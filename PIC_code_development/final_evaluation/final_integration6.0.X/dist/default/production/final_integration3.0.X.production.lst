

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 14:05:56 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           ; Version 1.45
    73                           ; Generated 16/11/2017 GMT
    74                           ; 
    75                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F4620 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataBANK0
   108  0046B4                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _close_handle
   112  0046B4  0E                 	db	14
   113                           
   114                           ;initializer for _servo_ramp
   115  0046B5  0D                 	db	13
   116                           
   117                           ;initializer for _motorStop_3
   118  0046B6  0C                 	db	12
   119                           
   120                           ;initializer for _motorStart_3
   121  0046B7  0B                 	db	11
   122                           
   123                           ;initializer for _motorStop_2
   124  0046B8  0A                 	db	10
   125                           
   126                           ;initializer for _motorStart_2
   127  0046B9  39                 	db	57
   128                           
   129                           ;initializer for _motorStop_1
   130  0046BA  38                 	db	56
   131                           
   132                           ;initializer for _motorStart_1
   133  0046BB  37                 	db	55
   134                           
   135                           ;initializer for _motorStop_0
   136  0046BC  36                 	db	54
   137                           
   138                           ;initializer for _motorStart_0
   139  0046BD  35                 	db	53
   140                           
   141                           ;initializer for _S_dispense
   142  0046BE  34                 	db	52
   143                           
   144                           ;initializer for _N_dispense
   145  0046BF  33                 	db	51
   146                           
   147                           ;initializer for _B_dispense
   148  0046C0  32                 	db	50
   149                           
   150                           ;initializer for _rotate_1compartment
   151  0046C1  31                 	db	49
   152                           
   153                           ;initializer for _rotate_gear
   154  0046C2  30                 	db	48
   155                           
   156                           	psect	idataBANK1
   157  0046C3                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _W_max
   161  0046C3  0004               	dw	4
   162                           
   163                           ;initializer for _S_max
   164  0046C5  0004               	dw	4
   165                           
   166                           ;initializer for _N_max
   167  0046C7  0004               	dw	4
   168                           
   169                           ;initializer for _B_max
   170  0046C9  0004               	dw	4
   171                           
   172                           ;initializer for _init_position
   173  0046CB  0005               	dw	5
   174                           
   175                           	psect	mediumconst
   176  00FC92                     __pmediumconst:
   177                           	opt stack 0
   178  00FC92  00                 	db	0
   179  00FC93                     _keys:
   180                           	opt stack 0
   181  00FC93  31                 	db	49
   182  00FC94  32                 	db	50
   183  00FC95  33                 	db	51
   184  00FC96  41                 	db	65
   185  00FC97  34                 	db	52
   186  00FC98  35                 	db	53
   187  00FC99  36                 	db	54
   188  00FC9A  42                 	db	66
   189  00FC9B  37                 	db	55
   190  00FC9C  38                 	db	56
   191  00FC9D  39                 	db	57
   192  00FC9E  43                 	db	67
   193  00FC9F  2A                 	db	42
   194  00FCA0  30                 	db	48
   195  00FCA1  23                 	db	35
   196  00FCA2  44                 	db	68
   197  00FCA3  00                 	db	0
   198  00FCA4                     __end_of_keys:
   199                           	opt stack 0
   200  00FCA4                     _dpowers:
   201                           	opt stack 0
   202  00FCA4  0001               	dw	1
   203  00FCA6  000A               	dw	10
   204  00FCA8  0064               	dw	100
   205  00FCAA  03E8               	dw	1000
   206  00FCAC  2710               	dw	10000
   207  00FCAE                     __end_of_dpowers:
   208                           	opt stack 0
   209  00FCAE                     _hexpowers:
   210                           	opt stack 0
   211  00FCAE  0001               	dw	1
   212  00FCB0  0010               	dw	16
   213  00FCB2  0100               	dw	256
   214  00FCB4  1000               	dw	4096
   215  00FCB6                     __end_of_hexpowers:
   216                           	opt stack 0
   217  00FCB6                     _happynewyear:
   218                           	opt stack 0
   219  00FCB6  45                 	db	69
   220  00FCB7  14                 	db	20
   221  00FCB8  14                 	db	20
   222  00FCB9  00                 	db	0
   223  00FCBA  11                 	db	17
   224  00FCBB  03                 	db	3
   225  00FCBC  18                 	db	24
   226  00FCBD                     __end_of_happynewyear:
   227                           	opt stack 0
   228  00FCBD                     _array:
   229                           	opt stack 0
   230  00FCBD  30                 	db	48
   231  00FCBE  31                 	db	49
   232  00FCBF  00                 	db	0
   233  00FCC0                     __end_of_array:
   234                           	opt stack 0
   235  00FCC0                     _LCD_LEFT:
   236                           	opt stack 0
   237  00FCC0  00                 	db	0
   238  00FCC1                     __end_of_LCD_LEFT:
   239                           	opt stack 0
   240  00FCC1                     _LCD_RIGHT:
   241                           	opt stack 0
   242  00FCC1  01                 	db	1
   243  00FCC2                     __end_of_LCD_RIGHT:
   244                           	opt stack 0
   245  00FCC2                     _LCD_SIZE_VERT:
   246                           	opt stack 0
   247  00FCC2  02                 	db	2
   248  00FCC3                     __end_of_LCD_SIZE_VERT:
   249                           	opt stack 0
   250  00FCC3                     _LCD_SIZE_HORZ:
   251                           	opt stack 0
   252  00FCC3  10                 	db	16
   253  00FCC4                     __end_of_LCD_SIZE_HORZ:
   254                           	opt stack 0
   255  00FCC4                     _LCD_VERT_LIMIT:
   256                           	opt stack 0
   257  00FCC4  02                 	db	2
   258  00FCC5                     __end_of_LCD_VERT_LIMIT:
   259                           	opt stack 0
   260  00FCC5                     _LCD_HORZ_LIMIT:
   261                           	opt stack 0
   262  00FCC5  28                 	db	40
   263  00FCC6                     __end_of_LCD_HORZ_LIMIT:
   264                           	opt stack 0
   265  00FCC6                     _strs:
   266                           	opt stack 0
   267  00FCC6  42                 	db	66
   268  00FCC7  00                 	db	0
   269  00FCC8  00                 	db	0
   270  00FCC9  00                 	db	0
   271  00FCCA  00                 	db	0
   272  00FCCB  4E                 	db	78
   273  00FCCC  00                 	db	0
   274  00FCCD  00                 	db	0
   275  00FCCE  00                 	db	0
   276  00FCCF  00                 	db	0
   277  00FCD0  53                 	db	83
   278  00FCD1  00                 	db	0
   279  00FCD2  00                 	db	0
   280  00FCD3  00                 	db	0
   281  00FCD4  00                 	db	0
   282  00FCD5  57                 	db	87
   283  00FCD6  00                 	db	0
   284  00FCD7  00                 	db	0
   285  00FCD8  00                 	db	0
   286  00FCD9  00                 	db	0
   287  00FCDA  42                 	db	66
   288  00FCDB  4E                 	db	78
   289  00FCDC  00                 	db	0
   290  00FCDD  00                 	db	0
   291  00FCDE  00                 	db	0
   292  00FCDF  42                 	db	66
   293  00FCE0  53                 	db	83
   294  00FCE1  00                 	db	0
   295  00FCE2  00                 	db	0
   296  00FCE3  00                 	db	0
   297  00FCE4  42                 	db	66
   298  00FCE5  57                 	db	87
   299  00FCE6  00                 	db	0
   300  00FCE7  00                 	db	0
   301  00FCE8  00                 	db	0
   302  00FCE9  42                 	db	66
   303  00FCEA  42                 	db	66
   304  00FCEB  4E                 	db	78
   305  00FCEC  00                 	db	0
   306  00FCED  00                 	db	0
   307  00FCEE  42                 	db	66
   308  00FCEF  42                 	db	66
   309  00FCF0  53                 	db	83
   310  00FCF1  00                 	db	0
   311  00FCF2  00                 	db	0
   312  00FCF3  42                 	db	66
   313  00FCF4  42                 	db	66
   314  00FCF5  57                 	db	87
   315  00FCF6  00                 	db	0
   316  00FCF7  00                 	db	0
   317  00FCF8  42                 	db	66
   318  00FCF9  4E                 	db	78
   319  00FCFA  57                 	db	87
   320  00FCFB  00                 	db	0
   321  00FCFC  00                 	db	0
   322  00FCFD  42                 	db	66
   323  00FCFE  53                 	db	83
   324  00FCFF  57                 	db	87
   325  00FD00  00                 	db	0
   326  00FD01  00                 	db	0
   327  00FD02  42                 	db	66
   328  00FD03  57                 	db	87
   329  00FD04  57                 	db	87
   330  00FD05  00                 	db	0
   331  00FD06  00                 	db	0
   332  00FD07  42                 	db	66
   333  00FD08  4E                 	db	78
   334  00FD09  57                 	db	87
   335  00FD0A  57                 	db	87
   336  00FD0B  00                 	db	0
   337  00FD0C  42                 	db	66
   338  00FD0D  53                 	db	83
   339  00FD0E  57                 	db	87
   340  00FD0F  57                 	db	87
   341  00FD10  00                 	db	0
   342  00FD11  42                 	db	66
   343  00FD12  42                 	db	66
   344  00FD13  53                 	db	83
   345  00FD14  57                 	db	87
   346  00FD15  00                 	db	0
   347  00FD16  42                 	db	66
   348  00FD17  42                 	db	66
   349  00FD18  4E                 	db	78
   350  00FD19  57                 	db	87
   351  00FD1A  00                 	db	0
   352  00FD1B  42                 	db	66
   353  00FD1C  4E                 	db	78
   354  00FD1D  4E                 	db	78
   355  00FD1E  57                 	db	87
   356  00FD1F  00                 	db	0
   357  00FD20  42                 	db	66
   358  00FD21  4E                 	db	78
   359  00FD22  4E                 	db	78
   360  00FD23  4E                 	db	78
   361  00FD24  00                 	db	0
   362  00FD25  42                 	db	66
   363  00FD26  57                 	db	87
   364  00FD27  57                 	db	87
   365  00FD28  57                 	db	87
   366  00FD29  00                 	db	0
   367  00FD2A                     __end_of_strs:
   368                           	opt stack 0
   369  0000                     _SSPBUF	set	4041
   370  0000                     _SSPCON2bits	set	4037
   371  0000                     _SSPADD	set	4040
   372  0000                     _SSPCON2	set	4037
   373  0000                     _SSPCON1	set	4038
   374  0000                     _SSPSTAT	set	4039
   375  0000                     _TRISCbits	set	3988
   376  0000                     _SSPCON1bits	set	4038
   377  0000                     _PORTAbits	set	3968
   378  0000                     _TRISAbits	set	3986
   379  0000                     _TRISDbits	set	3989
   380  0000                     _ADRESL	set	4035
   381  0000                     _ADRESH	set	4036
   382  0000                     _ADCON0bits	set	4034
   383  0000                     _PORTB	set	3969
   384  0000                     _ADCON1	set	4033
   385  0000                     _ADCON0	set	4034
   386  0000                     _TRISE	set	3990
   387  0000                     _TRISD	set	3989
   388  0000                     _TRISC	set	3988
   389  0000                     _TRISB	set	3987
   390  0000                     _TRISA	set	3986
   391  0000                     _LATE	set	3981
   392  0000                     _LATC	set	3979
   393  0000                     _LATB	set	3978
   394  0000                     _LATA	set	3977
   395  0000                     _INTCONbits	set	4082
   396  0000                     _LATD	set	3980
   397  0000                     _LATDbits	set	3980
   398  0000                     _ADON	set	32272
   399  0000                     _INT1IF	set	32640
   400  0000                     _INT1IE	set	32643
   401  00FD2A                     STR_30:
   402  00FD2A  73                 	db	115	;'s'
   403  00FD2B  70                 	db	112	;'p'
   404  00FD2C  61                 	db	97	;'a'
   405  00FD2D  63                 	db	99	;'c'
   406  00FD2E  65                 	db	101	;'e'
   407  00FD2F  72                 	db	114	;'r'
   408  00FD30  73                 	db	115	;'s'
   409  00FD31  20                 	db	32
   410  00FD32  64                 	db	100	;'d'
   411  00FD33  69                 	db	105	;'i'
   412  00FD34  73                 	db	115	;'s'
   413  00FD35  70                 	db	112	;'p'
   414  00FD36  65                 	db	101	;'e'
   415  00FD37  6E                 	db	110	;'n'
   416  00FD38  73                 	db	115	;'s'
   417  00FD39  65                 	db	101	;'e'
   418  00FD3A  64                 	db	100	;'d'
   419  00FD3B  3A                 	db	58	;':'
   420  00FD3C  25                 	db	37
   421  00FD3D  64                 	db	100	;'d'
   422  00FD3E  00                 	db	0
   423  00FD3F                     STR_33:
   424  00FD3F  57                 	db	87	;'W'
   425  00FD40  61                 	db	97	;'a'
   426  00FD41  73                 	db	115	;'s'
   427  00FD42  68                 	db	104	;'h'
   428  00FD43  65                 	db	101	;'e'
   429  00FD44  72                 	db	114	;'r'
   430  00FD45  20                 	db	32
   431  00FD46  64                 	db	100	;'d'
   432  00FD47  69                 	db	105	;'i'
   433  00FD48  73                 	db	115	;'s'
   434  00FD49  70                 	db	112	;'p'
   435  00FD4A  65                 	db	101	;'e'
   436  00FD4B  6E                 	db	110	;'n'
   437  00FD4C  73                 	db	115	;'s'
   438  00FD4D  65                 	db	101	;'e'
   439  00FD4E  64                 	db	100	;'d'
   440  00FD4F  3A                 	db	58	;':'
   441  00FD50  25                 	db	37
   442  00FD51  64                 	db	100	;'d'
   443  00FD52  00                 	db	0
   444  00FD53                     STR_53:
   445  00FD53  43                 	db	67	;'C'
   446  00FD54  25                 	db	37
   447  00FD55  64                 	db	100	;'d'
   448  00FD56  3A                 	db	58	;':'
   449  00FD57  42                 	db	66	;'B'
   450  00FD58  25                 	db	37
   451  00FD59  64                 	db	100	;'d'
   452  00FD5A  2C                 	db	44
   453  00FD5B  4E                 	db	78	;'N'
   454  00FD5C  25                 	db	37
   455  00FD5D  64                 	db	100	;'d'
   456  00FD5E  2C                 	db	44
   457  00FD5F  53                 	db	83	;'S'
   458  00FD60  25                 	db	37
   459  00FD61  64                 	db	100	;'d'
   460  00FD62  2C                 	db	44
   461  00FD63  57                 	db	87	;'W'
   462  00FD64  25                 	db	37
   463  00FD65  64                 	db	100	;'d'
   464  00FD66  00                 	db	0
   465  00FD67                     STR_24:
   466  00FD67  62                 	db	98	;'b'
   467  00FD68  6F                 	db	111	;'o'
   468  00FD69  6C                 	db	108	;'l'
   469  00FD6A  74                 	db	116	;'t'
   470  00FD6B  73                 	db	115	;'s'
   471  00FD6C  20                 	db	32
   472  00FD6D  64                 	db	100	;'d'
   473  00FD6E  69                 	db	105	;'i'
   474  00FD6F  73                 	db	115	;'s'
   475  00FD70  70                 	db	112	;'p'
   476  00FD71  65                 	db	101	;'e'
   477  00FD72  6E                 	db	110	;'n'
   478  00FD73  73                 	db	115	;'s'
   479  00FD74  65                 	db	101	;'e'
   480  00FD75  64                 	db	100	;'d'
   481  00FD76  3A                 	db	58	;':'
   482  00FD77  25                 	db	37
   483  00FD78  64                 	db	100	;'d'
   484  00FD79  00                 	db	0
   485  00FD7A                     STR_44:
   486  00FD7A  20                 	db	32
   487  00FD7B  32                 	db	50	;'2'
   488  00FD7C  3A                 	db	58	;':'
   489  00FD7D  20                 	db	32
   490  00FD7E  4F                 	db	79	;'O'
   491  00FD7F  70                 	db	112	;'p'
   492  00FD80  65                 	db	101	;'e'
   493  00FD81  72                 	db	114	;'r'
   494  00FD82  61                 	db	97	;'a'
   495  00FD83  74                 	db	116	;'t'
   496  00FD84  69                 	db	105	;'i'
   497  00FD85  6F                 	db	111	;'o'
   498  00FD86  6E                 	db	110	;'n'
   499  00FD87  20                 	db	32
   500  00FD88  54                 	db	84	;'T'
   501  00FD89  69                 	db	105	;'i'
   502  00FD8A  6D                 	db	109	;'m'
   503  00FD8B  65                 	db	101	;'e'
   504  00FD8C  00                 	db	0
   505  00FD8D                     STR_27:
   506  00FD8D  6E                 	db	110	;'n'
   507  00FD8E  75                 	db	117	;'u'
   508  00FD8F  74                 	db	116	;'t'
   509  00FD90  73                 	db	115	;'s'
   510  00FD91  20                 	db	32
   511  00FD92  64                 	db	100	;'d'
   512  00FD93  69                 	db	105	;'i'
   513  00FD94  73                 	db	115	;'s'
   514  00FD95  70                 	db	112	;'p'
   515  00FD96  65                 	db	101	;'e'
   516  00FD97  6E                 	db	110	;'n'
   517  00FD98  73                 	db	115	;'s'
   518  00FD99  65                 	db	101	;'e'
   519  00FD9A  64                 	db	100	;'d'
   520  00FD9B  3A                 	db	58	;':'
   521  00FD9C  25                 	db	37
   522  00FD9D  64                 	db	100	;'d'
   523  00FD9E  00                 	db	0
   524  00FD9F                     STR_102:
   525  00FD9F  30                 	db	48	;'0'
   526  00FDA0  31                 	db	49	;'1'
   527  00FDA1  32                 	db	50	;'2'
   528  00FDA2  33                 	db	51	;'3'
   529  00FDA3  34                 	db	52	;'4'
   530  00FDA4  35                 	db	53	;'5'
   531  00FDA5  36                 	db	54	;'6'
   532  00FDA6  37                 	db	55	;'7'
   533  00FDA7  38                 	db	56	;'8'
   534  00FDA8  39                 	db	57	;'9'
   535  00FDA9  61                 	db	97	;'a'
   536  00FDAA  62                 	db	98	;'b'
   537  00FDAB  63                 	db	99	;'c'
   538  00FDAC  64                 	db	100	;'d'
   539  00FDAD  65                 	db	101	;'e'
   540  00FDAE  66                 	db	102	;'f'
   541  00FDAF  00                 	db	0
   542  00FDB0                     STR_40:
   543  00FDB0  53                 	db	83	;'S'
   544  00FDB1  70                 	db	112	;'p'
   545  00FDB2  61                 	db	97	;'a'
   546  00FDB3  63                 	db	99	;'c'
   547  00FDB4  65                 	db	101	;'e'
   548  00FDB5  72                 	db	114	;'r'
   549  00FDB6  5F                 	db	95	;'_'
   550  00FDB7  72                 	db	114	;'r'
   551  00FDB8  65                 	db	101	;'e'
   552  00FDB9  6D                 	db	109	;'m'
   553  00FDBA  61                 	db	97	;'a'
   554  00FDBB  69                 	db	105	;'i'
   555  00FDBC  6E                 	db	110	;'n'
   556  00FDBD  3A                 	db	58	;':'
   557  00FDBE  25                 	db	37
   558  00FDBF  64                 	db	100	;'d'
   559  00FDC0  00                 	db	0
   560  00FDC1                     STR_41:
   561  00FDC1  57                 	db	87	;'W'
   562  00FDC2  61                 	db	97	;'a'
   563  00FDC3  73                 	db	115	;'s'
   564  00FDC4  68                 	db	104	;'h'
   565  00FDC5  65                 	db	101	;'e'
   566  00FDC6  72                 	db	114	;'r'
   567  00FDC7  5F                 	db	95	;'_'
   568  00FDC8  72                 	db	114	;'r'
   569  00FDC9  65                 	db	101	;'e'
   570  00FDCA  6D                 	db	109	;'m'
   571  00FDCB  61                 	db	97	;'a'
   572  00FDCC  69                 	db	105	;'i'
   573  00FDCD  6E                 	db	110	;'n'
   574  00FDCE  3A                 	db	58	;':'
   575  00FDCF  25                 	db	37
   576  00FDD0  64                 	db	100	;'d'
   577  00FDD1  00                 	db	0
   578  00FDD2                     STR_8:
   579  00FDD2  61                 	db	97	;'a'
   580  00FDD3  73                 	db	115	;'s'
   581  00FDD4  73                 	db	115	;'s'
   582  00FDD5  65                 	db	101	;'e'
   583  00FDD6  6D                 	db	109	;'m'
   584  00FDD7  62                 	db	98	;'b'
   585  00FDD8  6C                 	db	108	;'l'
   586  00FDD9  79                 	db	121	;'y'
   587  00FDDA  20                 	db	32
   588  00FDDB  73                 	db	115	;'s'
   589  00FDDC  74                 	db	116	;'t'
   590  00FDDD  65                 	db	101	;'e'
   591  00FDDE  70                 	db	112	;'p'
   592  00FDDF  3A                 	db	58	;':'
   593  00FDE0  25                 	db	37
   594  00FDE1  64                 	db	100	;'d'
   595  00FDE2  00                 	db	0
   596  00FDE3                     STR_43:
   597  00FDE3  31                 	db	49	;'1'
   598  00FDE4  3A                 	db	58	;':'
   599  00FDE5  20                 	db	32
   600  00FDE6  44                 	db	68	;'D'
   601  00FDE7  61                 	db	97	;'a'
   602  00FDE8  74                 	db	116	;'t'
   603  00FDE9  65                 	db	101	;'e'
   604  00FDEA  20                 	db	32
   605  00FDEB  61                 	db	97	;'a'
   606  00FDEC  6E                 	db	110	;'n'
   607  00FDED  64                 	db	100	;'d'
   608  00FDEE  20                 	db	32
   609  00FDEF  54                 	db	84	;'T'
   610  00FDF0  69                 	db	105	;'i'
   611  00FDF1  6D                 	db	109	;'m'
   612  00FDF2  65                 	db	101	;'e'
   613  00FDF3  00                 	db	0
   614  00FDF4                     STR_50:
   615  00FDF4  6F                 	db	111	;'o'
   616  00FDF5  70                 	db	112	;'p'
   617  00FDF6  65                 	db	101	;'e'
   618  00FDF7  72                 	db	114	;'r'
   619  00FDF8  61                 	db	97	;'a'
   620  00FDF9  74                 	db	116	;'t'
   621  00FDFA  69                 	db	105	;'i'
   622  00FDFB  6F                 	db	111	;'o'
   623  00FDFC  6E                 	db	110	;'n'
   624  00FDFD  20                 	db	32
   625  00FDFE  74                 	db	116	;'t'
   626  00FDFF  69                 	db	105	;'i'
   627  00FE00  6D                 	db	109	;'m'
   628  00FE01  65                 	db	101	;'e'
   629  00FE02  3A                 	db	58	;':'
   630  00FE03  00                 	db	0
   631  00FE04                     STR_1:
   632  00FE04  31                 	db	49	;'1'
   633  00FE05  3A                 	db	58	;':'
   634  00FE06  64                 	db	100	;'d'
   635  00FE07  61                 	db	97	;'a'
   636  00FE08  74                 	db	116	;'t'
   637  00FE09  65                 	db	101	;'e'
   638  00FE0A  20                 	db	32
   639  00FE0B  61                 	db	97	;'a'
   640  00FE0C  6E                 	db	110	;'n'
   641  00FE0D  64                 	db	100	;'d'
   642  00FE0E  20                 	db	32
   643  00FE0F  74                 	db	116	;'t'
   644  00FE10  69                 	db	105	;'i'
   645  00FE11  6D                 	db	109	;'m'
   646  00FE12  65                 	db	101	;'e'
   647  00FE13  00                 	db	0
   648  00FE14                     STR_16:
   649  00FE14  73                 	db	115	;'s'
   650  00FE15  74                 	db	116	;'t'
   651  00FE16  61                 	db	97	;'a'
   652  00FE17  72                 	db	114	;'r'
   653  00FE18  74                 	db	116	;'t'
   654  00FE19  20                 	db	32
   655  00FE1A  6F                 	db	111	;'o'
   656  00FE1B  70                 	db	112	;'p'
   657  00FE1C  65                 	db	101	;'e'
   658  00FE1D  72                 	db	114	;'r'
   659  00FE1E  61                 	db	97	;'a'
   660  00FE1F  74                 	db	116	;'t'
   661  00FE20  69                 	db	105	;'i'
   662  00FE21  6F                 	db	111	;'o'
   663  00FE22  6E                 	db	110	;'n'
   664  00FE23  00                 	db	0
   665  00FE24                     STR_65:
   666  00FE24  57                 	db	87	;'W'
   667  00FE25  72                 	db	114	;'r'
   668  00FE26  6F                 	db	111	;'o'
   669  00FE27  6E                 	db	110	;'n'
   670  00FE28  67                 	db	103	;'g'
   671  00FE29  20                 	db	32
   672  00FE2A  6E                 	db	110	;'n'
   673  00FE2B  75                 	db	117	;'u'
   674  00FE2C  6D                 	db	109	;'m'
   675  00FE2D  62                 	db	98	;'b'
   676  00FE2E  65                 	db	101	;'e'
   677  00FE2F  72                 	db	114	;'r'
   678  00FE30  21                 	db	33
   679  00FE31  20                 	db	32
   680  00FE32  00                 	db	0
   681  00FE33                     STR_3:
   682  00FE33  61                 	db	97	;'a'
   683  00FE34  73                 	db	115	;'s'
   684  00FE35  73                 	db	115	;'s'
   685  00FE36  65                 	db	101	;'e'
   686  00FE37  6D                 	db	109	;'m'
   687  00FE38  62                 	db	98	;'b'
   688  00FE39  6C                 	db	108	;'l'
   689  00FE3A  79                 	db	121	;'y'
   690  00FE3B  20                 	db	32
   691  00FE3C  73                 	db	115	;'s'
   692  00FE3D  74                 	db	116	;'t'
   693  00FE3E  65                 	db	101	;'e'
   694  00FE3F  70                 	db	112	;'p'
   695  00FE40  3A                 	db	58	;':'
   696  00FE41  00                 	db	0
   697  00FE42                     STR_54:
   698  00FE42  42                 	db	66	;'B'
   699  00FE43  20                 	db	32
   700  00FE44  64                 	db	100	;'d'
   701  00FE45  69                 	db	105	;'i'
   702  00FE46  73                 	db	115	;'s'
   703  00FE47  70                 	db	112	;'p'
   704  00FE48  65                 	db	101	;'e'
   705  00FE49  6E                 	db	110	;'n'
   706  00FE4A  73                 	db	115	;'s'
   707  00FE4B  65                 	db	101	;'e'
   708  00FE4C  64                 	db	100	;'d'
   709  00FE4D  3A                 	db	58	;':'
   710  00FE4E  25                 	db	37
   711  00FE4F  64                 	db	100	;'d'
   712  00FE50  00                 	db	0
   713  00FE51                     STR_55:
   714  00FE51  4E                 	db	78	;'N'
   715  00FE52  20                 	db	32
   716  00FE53  64                 	db	100	;'d'
   717  00FE54  69                 	db	105	;'i'
   718  00FE55  73                 	db	115	;'s'
   719  00FE56  70                 	db	112	;'p'
   720  00FE57  65                 	db	101	;'e'
   721  00FE58  6E                 	db	110	;'n'
   722  00FE59  73                 	db	115	;'s'
   723  00FE5A  65                 	db	101	;'e'
   724  00FE5B  64                 	db	100	;'d'
   725  00FE5C  3A                 	db	58	;':'
   726  00FE5D  25                 	db	37
   727  00FE5E  64                 	db	100	;'d'
   728  00FE5F  00                 	db	0
   729  00FE60                     STR_56:
   730  00FE60  53                 	db	83	;'S'
   731  00FE61  20                 	db	32
   732  00FE62  64                 	db	100	;'d'
   733  00FE63  69                 	db	105	;'i'
   734  00FE64  73                 	db	115	;'s'
   735  00FE65  70                 	db	112	;'p'
   736  00FE66  65                 	db	101	;'e'
   737  00FE67  6E                 	db	110	;'n'
   738  00FE68  73                 	db	115	;'s'
   739  00FE69  65                 	db	101	;'e'
   740  00FE6A  64                 	db	100	;'d'
   741  00FE6B  3A                 	db	58	;':'
   742  00FE6C  25                 	db	37
   743  00FE6D  64                 	db	100	;'d'
   744  00FE6E  00                 	db	0
   745  00FE6F                     STR_57:
   746  00FE6F  57                 	db	87	;'W'
   747  00FE70  20                 	db	32
   748  00FE71  64                 	db	100	;'d'
   749  00FE72  69                 	db	105	;'i'
   750  00FE73  73                 	db	115	;'s'
   751  00FE74  70                 	db	112	;'p'
   752  00FE75  65                 	db	101	;'e'
   753  00FE76  6E                 	db	110	;'n'
   754  00FE77  73                 	db	115	;'s'
   755  00FE78  65                 	db	101	;'e'
   756  00FE79  64                 	db	100	;'d'
   757  00FE7A  3A                 	db	58	;':'
   758  00FE7B  25                 	db	37
   759  00FE7C  64                 	db	100	;'d'
   760  00FE7D  00                 	db	0
   761  00FE7E                     STR_38:
   762  00FE7E  42                 	db	66	;'B'
   763  00FE7F  6F                 	db	111	;'o'
   764  00FE80  6C                 	db	108	;'l'
   765  00FE81  74                 	db	116	;'t'
   766  00FE82  5F                 	db	95	;'_'
   767  00FE83  72                 	db	114	;'r'
   768  00FE84  65                 	db	101	;'e'
   769  00FE85  6D                 	db	109	;'m'
   770  00FE86  61                 	db	97	;'a'
   771  00FE87  69                 	db	105	;'i'
   772  00FE88  6E                 	db	110	;'n'
   773  00FE89  3A                 	db	58	;':'
   774  00FE8A  25                 	db	37
   775  00FE8B  64                 	db	100	;'d'
   776  00FE8C  00                 	db	0
   777  00FE8D                     STR_21:
   778  00FE8D  70                 	db	112	;'p'
   779  00FE8E  72                 	db	114	;'r'
   780  00FE8F  6F                 	db	111	;'o'
   781  00FE90  63                 	db	99	;'c'
   782  00FE91  65                 	db	101	;'e'
   783  00FE92  73                 	db	115	;'s'
   784  00FE93  73                 	db	115	;'s'
   785  00FE94  69                 	db	105	;'i'
   786  00FE95  6E                 	db	110	;'n'
   787  00FE96  67                 	db	103	;'g'
   788  00FE97  20                 	db	32
   789  00FE98  43                 	db	67	;'C'
   790  00FE99  25                 	db	37
   791  00FE9A  64                 	db	100	;'d'
   792  00FE9B  00                 	db	0
   793  00FE9C                     STR_46:
   794  00FE9C  25                 	db	37
   795  00FE9D  30                 	db	48	;'0'
   796  00FE9E  32                 	db	50	;'2'
   797  00FE9F  78                 	db	120	;'x'
   798  00FEA0  2F                 	db	47
   799  00FEA1  25                 	db	37
   800  00FEA2  30                 	db	48	;'0'
   801  00FEA3  32                 	db	50	;'2'
   802  00FEA4  78                 	db	120	;'x'
   803  00FEA5  2F                 	db	47
   804  00FEA6  25                 	db	37
   805  00FEA7  30                 	db	48	;'0'
   806  00FEA8  32                 	db	50	;'2'
   807  00FEA9  78                 	db	120	;'x'
   808  00FEAA  00                 	db	0
   809  00FEAB                     STR_47:
   810  00FEAB  25                 	db	37
   811  00FEAC  30                 	db	48	;'0'
   812  00FEAD  32                 	db	50	;'2'
   813  00FEAE  78                 	db	120	;'x'
   814  00FEAF  3A                 	db	58	;':'
   815  00FEB0  25                 	db	37
   816  00FEB1  30                 	db	48	;'0'
   817  00FEB2  32                 	db	50	;'2'
   818  00FEB3  78                 	db	120	;'x'
   819  00FEB4  3A                 	db	58	;':'
   820  00FEB5  25                 	db	37
   821  00FEB6  30                 	db	48	;'0'
   822  00FEB7  32                 	db	50	;'2'
   823  00FEB8  78                 	db	120	;'x'
   824  00FEB9  00                 	db	0
   825  00FEBA                     STR_15:
   826  00FEBA  63                 	db	99	;'c'
   827  00FEBB  68                 	db	104	;'h'
   828  00FEBC  61                 	db	97	;'a'
   829  00FEBD  6E                 	db	110	;'n'
   830  00FEBE  67                 	db	103	;'g'
   831  00FEBF  65                 	db	101	;'e'
   832  00FEC0  20                 	db	32
   833  00FEC1  6D                 	db	109	;'m'
   834  00FEC2  6F                 	db	111	;'o'
   835  00FEC3  64                 	db	100	;'d'
   836  00FEC4  65                 	db	101	;'e'
   837  00FEC5  20                 	db	32
   838  00FEC6  32                 	db	50	;'2'
   839  00FEC7  00                 	db	0
   840  00FEC8                     STR_4:
   841  00FEC8  66                 	db	102	;'f'
   842  00FEC9  61                 	db	97	;'a'
   843  00FECA  73                 	db	115	;'s'
   844  00FECB  74                 	db	116	;'t'
   845  00FECC  65                 	db	101	;'e'
   846  00FECD  6E                 	db	110	;'n'
   847  00FECE  65                 	db	101	;'e'
   848  00FECF  72                 	db	114	;'r'
   849  00FED0  20                 	db	32
   850  00FED1  73                 	db	115	;'s'
   851  00FED2  65                 	db	101	;'e'
   852  00FED3  74                 	db	116	;'t'
   853  00FED4  3A                 	db	58	;':'
   854  00FED5  00                 	db	0
   855  00FED6                     STR_39:
   856  00FED6  4E                 	db	78	;'N'
   857  00FED7  75                 	db	117	;'u'
   858  00FED8  74                 	db	116	;'t'
   859  00FED9  5F                 	db	95	;'_'
   860  00FEDA  72                 	db	114	;'r'
   861  00FEDB  65                 	db	101	;'e'
   862  00FEDC  6D                 	db	109	;'m'
   863  00FEDD  61                 	db	97	;'a'
   864  00FEDE  69                 	db	105	;'i'
   865  00FEDF  6E                 	db	110	;'n'
   866  00FEE0  3A                 	db	58	;':'
   867  00FEE1  25                 	db	37
   868  00FEE2  64                 	db	100	;'d'
   869  00FEE3  00                 	db	0
   870  00FEE4                     STR_2:
   871  00FEE4  32                 	db	50	;'2'
   872  00FEE5  3A                 	db	58	;':'
   873  00FEE6  69                 	db	105	;'i'
   874  00FEE7  6E                 	db	110	;'n'
   875  00FEE8  73                 	db	115	;'s'
   876  00FEE9  74                 	db	116	;'t'
   877  00FEEA  72                 	db	114	;'r'
   878  00FEEB  75                 	db	117	;'u'
   879  00FEEC  63                 	db	99	;'c'
   880  00FEED  74                 	db	116	;'t'
   881  00FEEE  69                 	db	105	;'i'
   882  00FEEF  6F                 	db	111	;'o'
   883  00FEF0  6E                 	db	110	;'n'
   884  00FEF1  00                 	db	0
   885  00FEF2                     STR_22:
   886  00FEF2  42                 	db	66	;'B'
   887  00FEF3  5F                 	db	95	;'_'
   888  00FEF4  63                 	db	99	;'c'
   889  00FEF5  6F                 	db	111	;'o'
   890  00FEF6  75                 	db	117	;'u'
   891  00FEF7  6E                 	db	110	;'n'
   892  00FEF8  74                 	db	116	;'t'
   893  00FEF9  65                 	db	101	;'e'
   894  00FEFA  72                 	db	114	;'r'
   895  00FEFB  3A                 	db	58	;':'
   896  00FEFC  25                 	db	37
   897  00FEFD  64                 	db	100	;'d'
   898  00FEFE  00                 	db	0
   899  00FEFF                     STR_25:
   900  00FEFF  4E                 	db	78	;'N'
   901  00FF00  5F                 	db	95	;'_'
   902  00FF01  63                 	db	99	;'c'
   903  00FF02  6F                 	db	111	;'o'
   904  00FF03  75                 	db	117	;'u'
   905  00FF04  6E                 	db	110	;'n'
   906  00FF05  74                 	db	116	;'t'
   907  00FF06  65                 	db	101	;'e'
   908  00FF07  72                 	db	114	;'r'
   909  00FF08  3A                 	db	58	;':'
   910  00FF09  25                 	db	37
   911  00FF0A  64                 	db	100	;'d'
   912  00FF0B  00                 	db	0
   913  00FF0C                     STR_28:
   914  00FF0C  53                 	db	83	;'S'
   915  00FF0D  5F                 	db	95	;'_'
   916  00FF0E  63                 	db	99	;'c'
   917  00FF0F  6F                 	db	111	;'o'
   918  00FF10  75                 	db	117	;'u'
   919  00FF11  6E                 	db	110	;'n'
   920  00FF12  74                 	db	116	;'t'
   921  00FF13  65                 	db	101	;'e'
   922  00FF14  72                 	db	114	;'r'
   923  00FF15  3A                 	db	58	;':'
   924  00FF16  25                 	db	37
   925  00FF17  64                 	db	100	;'d'
   926  00FF18  00                 	db	0
   927  00FF19                     STR_51:
   928  00FF19  25                 	db	37
   929  00FF1A  64                 	db	100	;'d'
   930  00FF1B  6D                 	db	109	;'m'
   931  00FF1C  69                 	db	105	;'i'
   932  00FF1D  6E                 	db	110	;'n'
   933  00FF1E  20                 	db	32
   934  00FF1F  25                 	db	37
   935  00FF20  64                 	db	100	;'d'
   936  00FF21  73                 	db	115	;'s'
   937  00FF22  65                 	db	101	;'e'
   938  00FF23  63                 	db	99	;'c'
   939  00FF24  73                 	db	115	;'s'
   940  00FF25  00                 	db	0
   941  00FF26                     STR_20:
   942  00FF26  43                 	db	67	;'C'
   943  00FF27  30                 	db	48	;'0'
   944  00FF28  20                 	db	32
   945  00FF29  69                 	db	105	;'i'
   946  00FF2A  73                 	db	115	;'s'
   947  00FF2B  20                 	db	32
   948  00FF2C  66                 	db	102	;'f'
   949  00FF2D  6F                 	db	111	;'o'
   950  00FF2E  75                 	db	117	;'u'
   951  00FF2F  6E                 	db	110	;'n'
   952  00FF30  64                 	db	100	;'d'
   953  00FF31  00                 	db	0
   954  00FF32                     STR_42:
   955  00FF32  79                 	db	121	;'y'
   956  00FF33  6F                 	db	111	;'o'
   957  00FF34  75                 	db	117	;'u'
   958  00FF35  27                 	db	39
   959  00FF36  72                 	db	114	;'r'
   960  00FF37  65                 	db	101	;'e'
   961  00FF38  20                 	db	32
   962  00FF39  64                 	db	100	;'d'
   963  00FF3A  6F                 	db	111	;'o'
   964  00FF3B  6E                 	db	110	;'n'
   965  00FF3C  65                 	db	101	;'e'
   966  00FF3D  00                 	db	0
   967  00FF3E                     STR_78:
   968  00FF3E  57                 	db	87	;'W'
   969  00FF3F  72                 	db	114	;'r'
   970  00FF40  6F                 	db	111	;'o'
   971  00FF41  6E                 	db	110	;'n'
   972  00FF42  67                 	db	103	;'g'
   973  00FF43  20                 	db	32
   974  00FF44  69                 	db	105	;'i'
   975  00FF45  6E                 	db	110	;'n'
   976  00FF46  70                 	db	112	;'p'
   977  00FF47  75                 	db	117	;'u'
   978  00FF48  74                 	db	116	;'t'
   979  00FF49  00                 	db	0
   980  00FF4A                     STR_73:
   981  00FF4A  77                 	db	119	;'w'
   982  00FF4B  72                 	db	114	;'r'
   983  00FF4C  6F                 	db	111	;'o'
   984  00FF4D  6E                 	db	110	;'n'
   985  00FF4E  67                 	db	103	;'g'
   986  00FF4F  20                 	db	32
   987  00FF50  73                 	db	115	;'s'
   988  00FF51  65                 	db	101	;'e'
   989  00FF52  74                 	db	116	;'t'
   990  00FF53  21                 	db	33
   991  00FF54  00                 	db	0
   992  00FF55                     STR_23:
   993  00FF55  42                 	db	66	;'B'
   994  00FF56  5F                 	db	95	;'_'
   995  00FF57  63                 	db	99	;'c'
   996  00FF58  6F                 	db	111	;'o'
   997  00FF59  75                 	db	117	;'u'
   998  00FF5A  6E                 	db	110	;'n'
   999  00FF5B  74                 	db	116	;'t'
  1000  00FF5C  3A                 	db	58	;':'
  1001  00FF5D  25                 	db	37
  1002  00FF5E  64                 	db	100	;'d'
  1003  00FF5F  00                 	db	0
  1004  00FF60                     STR_26:
  1005  00FF60  4E                 	db	78	;'N'
  1006  00FF61  5F                 	db	95	;'_'
  1007  00FF62  63                 	db	99	;'c'
  1008  00FF63  6F                 	db	111	;'o'
  1009  00FF64  75                 	db	117	;'u'
  1010  00FF65  6E                 	db	110	;'n'
  1011  00FF66  74                 	db	116	;'t'
  1012  00FF67  3A                 	db	58	;':'
  1013  00FF68  25                 	db	37
  1014  00FF69  64                 	db	100	;'d'
  1015  00FF6A  00                 	db	0
  1016  00FF6B                     STR_29:
  1017  00FF6B  53                 	db	83	;'S'
  1018  00FF6C  5F                 	db	95	;'_'
  1019  00FF6D  63                 	db	99	;'c'
  1020  00FF6E  6F                 	db	111	;'o'
  1021  00FF6F  75                 	db	117	;'u'
  1022  00FF70  6E                 	db	110	;'n'
  1023  00FF71  74                 	db	116	;'t'
  1024  00FF72  3A                 	db	58	;':'
  1025  00FF73  25                 	db	37
  1026  00FF74  64                 	db	100	;'d'
  1027  00FF75  00                 	db	0
  1028  00FF76                     STR_45:
  1029  00FF76  33                 	db	51	;'3'
  1030  00FF77  3A                 	db	58	;':'
  1031  00FF78  73                 	db	115	;'s'
  1032  00FF79  75                 	db	117	;'u'
  1033  00FF7A  6D                 	db	109	;'m'
  1034  00FF7B  6D                 	db	109	;'m'
  1035  00FF7C  61                 	db	97	;'a'
  1036  00FF7D  72                 	db	114	;'r'
  1037  00FF7E  79                 	db	121	;'y'
  1038  00FF7F  00                 	db	0
  1039  00FF80                     STR_70:
  1040  00FF80  63                 	db	99	;'c'
  1041  00FF81  6F                 	db	111	;'o'
  1042  00FF82  72                 	db	114	;'r'
  1043  00FF83  72                 	db	114	;'r'
  1044  00FF84  65                 	db	101	;'e'
  1045  00FF85  63                 	db	99	;'c'
  1046  00FF86  74                 	db	116	;'t'
  1047  00FF87  21                 	db	33
  1048  00FF88  00                 	db	0
  1049  00FF89                     STR_63:
  1050  00FF89  30                 	db	48	;'0'
  1051  00FF8A  30                 	db	48	;'0'
  1052  00FF8B  3A                 	db	58	;':'
  1053  00FF8C  30                 	db	48	;'0'
  1054  00FF8D  34                 	db	52	;'4'
  1055  00FF8E  3A                 	db	58	;':'
  1056  00FF8F  30                 	db	48	;'0'
  1057  00FF90  33                 	db	51	;'3'
  1058  00FF91  00                 	db	0
  1059  00FF92                     STR_79:
  1060  00FF92  54                 	db	84	;'T'
  1061  00FF93  4F                 	db	79	;'O'
  1062  00FF94  4F                 	db	79	;'O'
  1063  00FF95  20                 	db	32
  1064  00FF96  4D                 	db	77	;'M'
  1065  00FF97  41                 	db	65	;'A'
  1066  00FF98  4E                 	db	78	;'N'
  1067  00FF99  59                 	db	89	;'Y'
  1068  00FF9A  00                 	db	0
  1069  00FF9B                     STR_34:
  1070  00FF9B  64                 	db	100	;'d'
  1071  00FF9C  6F                 	db	111	;'o'
  1072  00FF9D  6E                 	db	110	;'n'
  1073  00FF9E  65                 	db	101	;'e'
  1074  00FF9F  20                 	db	32
  1075  00FFA0  43                 	db	67	;'C'
  1076  00FFA1  25                 	db	37
  1077  00FFA2  64                 	db	100	;'d'
  1078  00FFA3  00                 	db	0
  1079  00FFA4                     STR_6:
  1080  00FFA4  6E                 	db	110	;'n'
  1081  00FFA5  75                 	db	117	;'u'
  1082  00FFA6  6D                 	db	109	;'m'
  1083  00FFA7  62                 	db	98	;'b'
  1084  00FFA8  65                 	db	101	;'e'
  1085  00FFA9  72                 	db	114	;'r'
  1086  00FFAA  3A                 	db	58	;':'
  1087  00FFAB  00                 	db	0
  1088  00FFAC                     STR_101:
  1089  00FFAC  28                 	db	40
  1090  00FFAD  6E                 	db	110	;'n'
  1091  00FFAE  75                 	db	117	;'u'
  1092  00FFAF  6C                 	db	108	;'l'
  1093  00FFB0  6C                 	db	108	;'l'
  1094  00FFB1  29                 	db	41
  1095  00FFB2  00                 	db	0
  1096  00FFB3                     STR_76:
  1097  00FFB3  77                 	db	119	;'w'
  1098  00FFB4  72                 	db	114	;'r'
  1099  00FFB5  6F                 	db	111	;'o'
  1100  00FFB6  6E                 	db	110	;'n'
  1101  00FFB7  67                 	db	103	;'g'
  1102  00FFB8  21                 	db	33
  1103  00FFB9  00                 	db	0
  1104  00FFBA                     STR_7:
  1105  00FFBA  44                 	db	68	;'D'
  1106  00FFBB  6F                 	db	111	;'o'
  1107  00FFBC  6E                 	db	110	;'n'
  1108  00FFBD  65                 	db	101	;'e'
  1109  00FFBE  21                 	db	33
  1110  00FFBF  00                 	db	0
  1111  00FFC0                     STR_99:
  1112  00FFC0  42                 	db	66	;'B'
  1113  00FFC1  4E                 	db	78	;'N'
  1114  00FFC2  4E                 	db	78	;'N'
  1115  00FFC3  4E                 	db	78	;'N'
  1116  00FFC4  00                 	db	0
  1117  00FFC5                     STR_97:
  1118  00FFC5  42                 	db	66	;'B'
  1119  00FFC6  42                 	db	66	;'B'
  1120  00FFC7  4E                 	db	78	;'N'
  1121  00FFC8  57                 	db	87	;'W'
  1122  00FFC9  00                 	db	0
  1123  00FFCA                     STR_98:
  1124  00FFCA  42                 	db	66	;'B'
  1125  00FFCB  4E                 	db	78	;'N'
  1126  00FFCC  4E                 	db	78	;'N'
  1127  00FFCD  57                 	db	87	;'W'
  1128  00FFCE  00                 	db	0
  1129  00FFCF                     STR_96:
  1130  00FFCF  42                 	db	66	;'B'
  1131  00FFD0  42                 	db	66	;'B'
  1132  00FFD1  53                 	db	83	;'S'
  1133  00FFD2  57                 	db	87	;'W'
  1134  00FFD3  00                 	db	0
  1135  00FFD4                     STR_94:
  1136  00FFD4  42                 	db	66	;'B'
  1137  00FFD5  4E                 	db	78	;'N'
  1138  00FFD6  57                 	db	87	;'W'
  1139  00FFD7  57                 	db	87	;'W'
  1140  00FFD8  00                 	db	0
  1141  00FFD9                     STR_95:
  1142  00FFD9  42                 	db	66	;'B'
  1143  00FFDA  53                 	db	83	;'S'
  1144  00FFDB  57                 	db	87	;'W'
  1145  00FFDC  57                 	db	87	;'W'
  1146  00FFDD  00                 	db	0
  1147  00FFDE                     STR_100:
  1148  00FFDE  42                 	db	66	;'B'
  1149  00FFDF  57                 	db	87	;'W'
  1150  00FFE0  57                 	db	87	;'W'
  1151  00FFE1  57                 	db	87	;'W'
  1152  00FFE2  00                 	db	0
  1153  00FFE3                     STR_9:
  1154  00FFE3  73                 	db	115	;'s'
  1155  00FFE4  74                 	db	116	;'t'
  1156  00FFE5  65                 	db	101	;'e'
  1157  00FFE6  70                 	db	112	;'p'
  1158  00FFE7  00                 	db	0
  1159  00FFE8                     STR_88:
  1160  00FFE8  42                 	db	66	;'B'
  1161  00FFE9  42                 	db	66	;'B'
  1162  00FFEA  4E                 	db	78	;'N'
  1163  00FFEB  00                 	db	0
  1164  00FFEC                     STR_89:
  1165  00FFEC  42                 	db	66	;'B'
  1166  00FFED  42                 	db	66	;'B'
  1167  00FFEE  53                 	db	83	;'S'
  1168  00FFEF  00                 	db	0
  1169  00FFF0                     STR_90:
  1170  00FFF0  42                 	db	66	;'B'
  1171  00FFF1  42                 	db	66	;'B'
  1172  00FFF2  57                 	db	87	;'W'
  1173  00FFF3  00                 	db	0
  1174  00FFF4                     STR_93:
  1175  00FFF4  42                 	db	66	;'B'
  1176  00FFF5  57                 	db	87	;'W'
  1177  00FFF6  57                 	db	87	;'W'
  1178  00FFF7  00                 	db	0
  1179  00FFF8                     STR_5:
  1180  00FFF8  25                 	db	37
  1181  00FFF9  73                 	db	115	;'s'
  1182  00FFFA  00                 	db	0
  1183  00FFFB                     STR_13:
  1184  00FFFB  2C                 	db	44
  1185  00FFFC  00                 	db	0
  1186  00FFFD                     STR_66:
  1187  00FFFD  42                 	db	66	;'B'
  1188  00FFFE  00                 	db	0
  1189  0000                     
  1190                           ; #config settings
  1191  00FFFF  00                 	db	0	; dummy byte at the end
  1192  0000                     
  1193                           	psect	cinit
  1194  004058                     __pcinit:
  1195                           	opt stack 0
  1196  004058                     start_initialization:
  1197                           	opt stack 0
  1198  004058                     __initialization:
  1199                           	opt stack 0
  1200                           
  1201                           ; Initialize objects allocated to BANK1 (10 bytes)
  1202                           ; load TBLPTR registers with __pidataBANK1
  1203  004058  0EC3               	movlw	low __pidataBANK1
  1204  00405A  6EF6               	movwf	tblptrl,c
  1205  00405C  0E46               	movlw	high __pidataBANK1
  1206  00405E  6EF7               	movwf	tblptrh,c
  1207  004060  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1208  004062  6EF8               	movwf	tblptru,c
  1209  004064  EE01  F0D3         	lfsr	0,__pdataBANK1
  1210  004068  EE10 F00A          	lfsr	1,10
  1211  00406C                     copy_data0:
  1212  00406C  0009               	tblrd		*+
  1213  00406E  CFF5 FFEE          	movff	tablat,postinc0
  1214  004072  50E5               	movf	postdec1,w,c
  1215  004074  50E1               	movf	fsr1l,w,c
  1216  004076  E1FA               	bnz	copy_data0
  1217                           
  1218                           ; Initialize objects allocated to BANK0 (15 bytes)
  1219                           ; load TBLPTR registers with __pidataBANK0
  1220  004078  0EB4               	movlw	low __pidataBANK0
  1221  00407A  6EF6               	movwf	tblptrl,c
  1222  00407C  0E46               	movlw	high __pidataBANK0
  1223  00407E  6EF7               	movwf	tblptrh,c
  1224  004080  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1225  004082  6EF8               	movwf	tblptru,c
  1226  004084  EE00  F0F0         	lfsr	0,__pdataBANK0
  1227  004088  EE10 F00F          	lfsr	1,15
  1228  00408C                     copy_data1:
  1229  00408C  0009               	tblrd		*+
  1230  00408E  CFF5 FFEE          	movff	tablat,postinc0
  1231  004092  50E5               	movf	postdec1,w,c
  1232  004094  50E1               	movf	fsr1l,w,c
  1233  004096  E1FA               	bnz	copy_data1
  1234                           
  1235                           ; Clear objects allocated to BANK2 (200 bytes)
  1236  004098  EE02  F000         	lfsr	0,__pbssBANK2
  1237  00409C  0EC8               	movlw	200
  1238  00409E                     clear_0:
  1239  00409E  6AEE               	clrf	postinc0,c
  1240  0040A0  06E8               	decf	wreg,f,c
  1241  0040A2  E1FD               	bnz	clear_0
  1242                           
  1243                           ; Clear objects allocated to BANK1 (211 bytes)
  1244  0040A4  EE01  F000         	lfsr	0,__pbssBANK1
  1245  0040A8  0ED3               	movlw	211
  1246  0040AA                     clear_1:
  1247  0040AA  6AEE               	clrf	postinc0,c
  1248  0040AC  06E8               	decf	wreg,f,c
  1249  0040AE  E1FD               	bnz	clear_1
  1250                           
  1251                           ; Clear objects allocated to BANK0 (72 bytes)
  1252  0040B0  EE00  F080         	lfsr	0,__pbssBANK0
  1253  0040B4  0E48               	movlw	72
  1254  0040B6                     clear_2:
  1255  0040B6  6AEE               	clrf	postinc0,c
  1256  0040B8  06E8               	decf	wreg,f,c
  1257  0040BA  E1FD               	bnz	clear_2
  1258                           
  1259                           ; Clear objects allocated to COMRAM (57 bytes)
  1260  0040BC  EE00  F046         	lfsr	0,__pbssCOMRAM
  1261  0040C0  0E39               	movlw	57
  1262  0040C2                     clear_3:
  1263  0040C2  6AEE               	clrf	postinc0,c
  1264  0040C4  06E8               	decf	wreg,f,c
  1265  0040C6  E1FD               	bnz	clear_3
  1266  0040C8                     end_of_initialization:
  1267                           	opt stack 0
  1268  0040C8                     __end_of__initialization:
  1269                           	opt stack 0
  1270  0040C8  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1271  0040CA  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1272  0040CC  0100               	movlb	0
  1273  0040CE  EF28  F00F         	goto	_main	;jump to C main() function
  1274                           tblptru	equ	0xFF8
  1275                           tblptrh	equ	0xFF7
  1276                           tblptrl	equ	0xFF6
  1277                           tablat	equ	0xFF5
  1278                           postinc0	equ	0xFEE
  1279                           wreg	equ	0xFE8
  1280                           postdec1	equ	0xFE5
  1281                           fsr1l	equ	0xFE1
  1282                           
  1283                           	psect	bssCOMRAM
  1284  000046                     __pbssCOMRAM:
  1285                           	opt stack 0
  1286  000046                     _compartment_number:
  1287                           	opt stack 0
  1288  000046                     	ds	16
  1289  000056                     _time:
  1290                           	opt stack 0
  1291  000056                     	ds	7
  1292  00005D                     _B_total_dispensed:
  1293                           	opt stack 0
  1294  00005D                     	ds	2
  1295  00005F                     _W:
  1296                           	opt stack 0
  1297  00005F                     	ds	2
  1298  000061                     _S:
  1299                           	opt stack 0
  1300  000061                     	ds	2
  1301  000063                     _N:
  1302                           	opt stack 0
  1303  000063                     	ds	2
  1304  000065                     _B:
  1305                           	opt stack 0
  1306  000065                     	ds	2
  1307  000067                     _prev_state:
  1308                           	opt stack 0
  1309  000067                     	ds	2
  1310  000069                     _total_number:
  1311                           	opt stack 0
  1312  000069                     	ds	2
  1313  00006B                     _valid:
  1314                           	opt stack 0
  1315  00006B                     	ds	2
  1316  00006D                     _counter_step:
  1317                           	opt stack 0
  1318  00006D                     	ds	2
  1319  00006F                     _counter:
  1320                           	opt stack 0
  1321  00006F                     	ds	2
  1322  000071                     _operationTime:
  1323                           	opt stack 0
  1324  000071                     	ds	2
  1325  000073                     _operation:
  1326                           	opt stack 0
  1327  000073                     	ds	2
  1328  000075                     _j:
  1329                           	opt stack 0
  1330  000075                     	ds	1
  1331  000076                     _temp:
  1332                           	opt stack 0
  1333  000076                     	ds	1
  1334  000077                     	ds	1
  1335  000078                     _current_set2:
  1336                           	opt stack 0
  1337  000078                     	ds	5
  1338  00007D                     _number:
  1339                           	opt stack 0
  1340  00007D                     	ds	2
  1341                           tblptru	equ	0xFF8
  1342                           tblptrh	equ	0xFF7
  1343                           tblptrl	equ	0xFF6
  1344                           tablat	equ	0xFF5
  1345                           postinc0	equ	0xFEE
  1346                           wreg	equ	0xFE8
  1347                           postdec1	equ	0xFE5
  1348                           fsr1l	equ	0xFE1
  1349                           
  1350                           	psect	bssBANK0
  1351  000080                     __pbssBANK0:
  1352                           	opt stack 0
  1353  000080                     _compartment_array:
  1354                           	opt stack 0
  1355  000080                     	ds	16
  1356  000090                     _min_initial:
  1357                           	opt stack 0
  1358  000090                     	ds	2
  1359  000092                     _hr_initial:
  1360                           	opt stack 0
  1361  000092                     	ds	2
  1362  000094                     _W_total_dispensed:
  1363                           	opt stack 0
  1364  000094                     	ds	2
  1365  000096                     _S_total_dispensed:
  1366                           	opt stack 0
  1367  000096                     	ds	2
  1368  000098                     _N_total_dispensed:
  1369                           	opt stack 0
  1370  000098                     	ds	2
  1371  00009A                     _N_spacingTime:
  1372                           	opt stack 0
  1373  00009A                     	ds	2
  1374  00009C                     _W_remain:
  1375                           	opt stack 0
  1376  00009C                     	ds	2
  1377  00009E                     _S_remain:
  1378                           	opt stack 0
  1379  00009E                     	ds	2
  1380  0000A0                     _N_remain:
  1381                           	opt stack 0
  1382  0000A0                     	ds	2
  1383  0000A2                     _B_remain:
  1384                           	opt stack 0
  1385  0000A2                     	ds	2
  1386  0000A4                     _W_counter:
  1387                           	opt stack 0
  1388  0000A4                     	ds	2
  1389  0000A6                     _N_counter:
  1390                           	opt stack 0
  1391  0000A6                     	ds	2
  1392  0000A8                     _S_counter:
  1393                           	opt stack 0
  1394  0000A8                     	ds	2
  1395  0000AA                     _B_counter:
  1396                           	opt stack 0
  1397  0000AA                     	ds	2
  1398  0000AC                     _assembly_step:
  1399                           	opt stack 0
  1400  0000AC                     	ds	2
  1401  0000AE                     _state:
  1402                           	opt stack 0
  1403  0000AE                     	ds	2
  1404  0000B0                     _compartment_pos:
  1405                           	opt stack 0
  1406  0000B0                     	ds	2
  1407  0000B2                     _prev:
  1408                           	opt stack 0
  1409  0000B2                     	ds	2
  1410  0000B4                     _gear_counter:
  1411                           	opt stack 0
  1412  0000B4                     	ds	2
  1413  0000B6                     _operation_done:
  1414                           	opt stack 0
  1415  0000B6                     	ds	2
  1416  0000B8                     _change_mode:
  1417                           	opt stack 0
  1418  0000B8                     	ds	2
  1419  0000BA                     _mode:
  1420                           	opt stack 0
  1421  0000BA                     	ds	2
  1422  0000BC                     _white_tape:
  1423                           	opt stack 0
  1424  0000BC                     	ds	2
  1425  0000BE                     _i:
  1426                           	opt stack 0
  1427  0000BE                     	ds	2
  1428  0000C0                     _nuts_data:
  1429                           	opt stack 0
  1430  0000C0                     	ds	1
  1431  0000C1                     _openHandle_data:
  1432                           	opt stack 0
  1433  0000C1                     	ds	1
  1434  0000C2                     _LCDinterruptState:
  1435                           	opt stack 0
  1436  0000C2                     	ds	1
  1437  0000C3                     _current_set:
  1438                           	opt stack 0
  1439  0000C3                     	ds	5
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           postdec1	equ	0xFE5
  1447                           fsr1l	equ	0xFE1
  1448                           
  1449                           	psect	dataBANK0
  1450  0000F0                     __pdataBANK0:
  1451                           	opt stack 0
  1452  0000F0                     _close_handle:
  1453                           	opt stack 0
  1454  0000F0                     	ds	1
  1455  0000F1                     _servo_ramp:
  1456                           	opt stack 0
  1457  0000F1                     	ds	1
  1458  0000F2                     _motorStop_3:
  1459                           	opt stack 0
  1460  0000F2                     	ds	1
  1461  0000F3                     _motorStart_3:
  1462                           	opt stack 0
  1463  0000F3                     	ds	1
  1464  0000F4                     _motorStop_2:
  1465                           	opt stack 0
  1466  0000F4                     	ds	1
  1467  0000F5                     _motorStart_2:
  1468                           	opt stack 0
  1469  0000F5                     	ds	1
  1470  0000F6                     _motorStop_1:
  1471                           	opt stack 0
  1472  0000F6                     	ds	1
  1473  0000F7                     _motorStart_1:
  1474                           	opt stack 0
  1475  0000F7                     	ds	1
  1476  0000F8                     _motorStop_0:
  1477                           	opt stack 0
  1478  0000F8                     	ds	1
  1479  0000F9                     _motorStart_0:
  1480                           	opt stack 0
  1481  0000F9                     	ds	1
  1482  0000FA                     _S_dispense:
  1483                           	opt stack 0
  1484  0000FA                     	ds	1
  1485  0000FB                     _N_dispense:
  1486                           	opt stack 0
  1487  0000FB                     	ds	1
  1488  0000FC                     _B_dispense:
  1489                           	opt stack 0
  1490  0000FC                     	ds	1
  1491  0000FD                     _rotate_1compartment:
  1492                           	opt stack 0
  1493  0000FD                     	ds	1
  1494  0000FE                     _rotate_gear:
  1495                           	opt stack 0
  1496  0000FE                     	ds	1
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           postdec1	equ	0xFE5
  1504                           fsr1l	equ	0xFE1
  1505                           
  1506                           	psect	bssBANK1
  1507  000100                     __pbssBANK1:
  1508                           	opt stack 0
  1509  000100                     _W_array:
  1510                           	opt stack 0
  1511  000100                     	ds	16
  1512  000110                     _N_array:
  1513                           	opt stack 0
  1514  000110                     	ds	16
  1515  000120                     _S_array:
  1516                           	opt stack 0
  1517  000120                     	ds	16
  1518  000130                     _B_array:
  1519                           	opt stack 0
  1520  000130                     	ds	16
  1521  000140                     _prev_number:
  1522                           	opt stack 0
  1523  000140                     	ds	16
  1524  000150                     _final_number:
  1525                           	opt stack 0
  1526  000150                     	ds	16
  1527  000160                     _final_time:
  1528                           	opt stack 0
  1529  000160                     	ds	2
  1530  000162                     _sec_final:
  1531                           	opt stack 0
  1532  000162                     	ds	2
  1533  000164                     _min_final:
  1534                           	opt stack 0
  1535  000164                     	ds	2
  1536  000166                     _hr_final:
  1537                           	opt stack 0
  1538  000166                     	ds	2
  1539  000168                     _initial_time:
  1540                           	opt stack 0
  1541  000168                     	ds	2
  1542  00016A                     _sec_initial:
  1543                           	opt stack 0
  1544  00016A                     	ds	2
  1545  00016C                     _W_done:
  1546                           	opt stack 0
  1547  00016C                     	ds	2
  1548  00016E                     _S_done:
  1549                           	opt stack 0
  1550  00016E                     	ds	2
  1551  000170                     _N_done:
  1552                           	opt stack 0
  1553  000170                     	ds	2
  1554  000172                     _B_done:
  1555                           	opt stack 0
  1556  000172                     	ds	2
  1557  000174                     _W_spacingTime:
  1558                           	opt stack 0
  1559  000174                     	ds	2
  1560  000176                     _S_spacingTime:
  1561                           	opt stack 0
  1562  000176                     	ds	2
  1563  000178                     _B_spacingTime:
  1564                           	opt stack 0
  1565  000178                     	ds	2
  1566  00017A                     _error:
  1567                           	opt stack 0
  1568  00017A                     	ds	2
  1569  00017C                     _angle:
  1570                           	opt stack 0
  1571  00017C                     	ds	2
  1572  00017E                     _prev_set:
  1573                           	opt stack 0
  1574  00017E                     	ds	40
  1575  0001A6                     _final_set:
  1576                           	opt stack 0
  1577  0001A6                     	ds	40
  1578  0001CE                     _temp_set:
  1579                           	opt stack 0
  1580  0001CE                     	ds	5
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           postdec1	equ	0xFE5
  1588                           fsr1l	equ	0xFE1
  1589                           
  1590                           	psect	dataBANK1
  1591  0001D3                     __pdataBANK1:
  1592                           	opt stack 0
  1593  0001D3                     _W_max:
  1594                           	opt stack 0
  1595  0001D3                     	ds	2
  1596  0001D5                     _S_max:
  1597                           	opt stack 0
  1598  0001D5                     	ds	2
  1599  0001D7                     _N_max:
  1600                           	opt stack 0
  1601  0001D7                     	ds	2
  1602  0001D9                     _B_max:
  1603                           	opt stack 0
  1604  0001D9                     	ds	2
  1605  0001DB                     _init_position:
  1606                           	opt stack 0
  1607  0001DB                     	ds	2
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1l	equ	0xFE1
  1616                           
  1617                           	psect	bssBANK2
  1618  000200                     __pbssBANK2:
  1619                           	opt stack 0
  1620  000200                     _fastener:
  1621                           	opt stack 0
  1622  000200                     	ds	200
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1l	equ	0xFE1
  1631                           
  1632                           	psect	cstackBANK0
  1633  0000C8                     __pcstackBANK0:
  1634                           	opt stack 0
  1635  0000C8                     ??_isdigit:
  1636  0000C8                     ??_I2C_Master_Wait:
  1637  0000C8                     ?_readADC:
  1638                           	opt stack 0
  1639  0000C8                     ?___awdiv:
  1640                           	opt stack 0
  1641  0000C8                     ?___lwdiv:
  1642                           	opt stack 0
  1643  0000C8                     ?___lldiv:
  1644                           	opt stack 0
  1645  0000C8                     lcdNibble@temp:
  1646                           	opt stack 0
  1647  0000C8                     generate_compartment_array@step:
  1648                           	opt stack 0
  1649  0000C8                     ___awdiv@dividend:
  1650                           	opt stack 0
  1651  0000C8                     ___lwdiv@dividend:
  1652                           	opt stack 0
  1653  0000C8                     ___lldiv@dividend:
  1654                           	opt stack 0
  1655                           
  1656                           ; 4 bytes @ 0x0
  1657  0000C8                     	ds	1
  1658  0000C9                     lcdNibble@data:
  1659                           	opt stack 0
  1660  0000C9                     I2C_Master_Read@ackBit:
  1661                           	opt stack 0
  1662  0000C9                     _isdigit$1301:
  1663                           	opt stack 0
  1664  0000C9                     I2C_Master_Write@byteToWrite:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x1
  1668  0000C9                     	ds	1
  1669  0000CA                     ??_generate_compartment_array:
  1670  0000CA                     ??_readADC:
  1671  0000CA                     lcdInst@data:
  1672                           	opt stack 0
  1673  0000CA                     putch@data:
  1674                           	opt stack 0
  1675  0000CA                     I2C_Master_Read@receivedByte:
  1676                           	opt stack 0
  1677  0000CA                     isdigit@c:
  1678                           	opt stack 0
  1679  0000CA                     ___awdiv@divisor:
  1680                           	opt stack 0
  1681  0000CA                     ___lwdiv@divisor:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x2
  1685  0000CA                     	ds	1
  1686  0000CB                     ??_initLCD:
  1687  0000CB                     I2C_sendData@char_data:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x3
  1691  0000CB                     	ds	1
  1692  0000CC                     readADC@channel:
  1693                           	opt stack 0
  1694  0000CC                     ___awdiv@counter:
  1695                           	opt stack 0
  1696  0000CC                     ___lwdiv@quotient:
  1697                           	opt stack 0
  1698  0000CC                     ___lldiv@divisor:
  1699                           	opt stack 0
  1700                           
  1701                           ; 4 bytes @ 0x4
  1702  0000CC                     	ds	1
  1703  0000CD                     ___awdiv@sign:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x5
  1707  0000CD                     	ds	1
  1708  0000CE                     ___lwdiv@counter:
  1709                           	opt stack 0
  1710  0000CE                     ___awdiv@quotient:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x6
  1714  0000CE                     	ds	1
  1715  0000CF                     ?___lwmod:
  1716                           	opt stack 0
  1717  0000CF                     ___lwmod@dividend:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x7
  1721  0000CF                     	ds	1
  1722  0000D0                     ?___wmul:
  1723                           	opt stack 0
  1724  0000D0                     ___wmul@multiplier:
  1725                           	opt stack 0
  1726  0000D0                     ___lldiv@quotient:
  1727                           	opt stack 0
  1728                           
  1729                           ; 4 bytes @ 0x8
  1730  0000D0                     	ds	1
  1731  0000D1                     ___lwmod@divisor:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x9
  1735  0000D1                     	ds	1
  1736  0000D2                     ___wmul@multiplicand:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0xA
  1740  0000D2                     	ds	1
  1741  0000D3                     ___lwmod@counter:
  1742                           	opt stack 0
  1743                           
  1744                           ; 1 bytes @ 0xB
  1745  0000D3                     	ds	1
  1746  0000D4                     ___lldiv@counter:
  1747                           	opt stack 0
  1748  0000D4                     ___wmul@product:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0xC
  1752  0000D4                     	ds	1
  1753  0000D5                     I2C_Master_Init@clockFreq:
  1754                           	opt stack 0
  1755                           
  1756                           ; 4 bytes @ 0xD
  1757  0000D5                     	ds	1
  1758  0000D6                     ??_get_RTC_initial:
  1759  0000D6                     ??_get_RTC_final:
  1760  0000D6                     ?_printf:
  1761                           	opt stack 0
  1762  0000D6                     printf@f:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0xE
  1766  0000D6                     	ds	3
  1767  0000D9                     ??_I2C_Master_Init:
  1768                           
  1769                           ; 1 bytes @ 0x11
  1770  0000D9                     	ds	1
  1771  0000DA                     ??_printf:
  1772                           
  1773                           ; 1 bytes @ 0x12
  1774  0000DA                     	ds	4
  1775  0000DE                     printf@idx:
  1776                           	opt stack 0
  1777                           
  1778                           ; 1 bytes @ 0x16
  1779  0000DE                     	ds	1
  1780  0000DF                     printf@prec:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0x17
  1784  0000DF                     	ds	1
  1785  0000E0                     printf@cp:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x18
  1789  0000E0                     	ds	2
  1790  0000E2                     printf@ap:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x1A
  1794  0000E2                     	ds	2
  1795  0000E4                     printf@len:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x1C
  1799  0000E4                     	ds	2
  1800  0000E6                     printf@val:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x1E
  1804  0000E6                     	ds	2
  1805  0000E8                     printf@flag:
  1806                           	opt stack 0
  1807                           
  1808                           ; 1 bytes @ 0x20
  1809  0000E8                     	ds	1
  1810  0000E9                     printf@width:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x21
  1814  0000E9                     	ds	2
  1815  0000EB                     printf@c:
  1816                           	opt stack 0
  1817                           
  1818                           ; 1 bytes @ 0x23
  1819  0000EB                     	ds	1
  1820  0000EC                     ??_main:
  1821                           
  1822                           ; 1 bytes @ 0x24
  1823  0000EC                     	ds	2
  1824  0000EE                     _main$1690:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x26
  1828  0000EE                     	ds	2
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1l	equ	0xFE1
  1837                           
  1838                           	psect	cstackCOMRAM
  1839  000001                     __pcstackCOMRAM:
  1840                           	opt stack 0
  1841  000001                     ??i2_I2C_Master_Wait:
  1842  000001                     ??i2_isdigit:
  1843  000001                     ?_check:
  1844                           	opt stack 0
  1845  000001                     ?_strcmp:
  1846                           	opt stack 0
  1847  000001                     ?___awmod:
  1848                           	opt stack 0
  1849  000001                     ?i2___wmul:
  1850                           	opt stack 0
  1851  000001                     ?i2___awdiv:
  1852                           	opt stack 0
  1853  000001                     ?i2___lwdiv:
  1854                           	opt stack 0
  1855  000001                     ?i2___lldiv:
  1856                           	opt stack 0
  1857  000001                     i2lcdNibble@temp:
  1858                           	opt stack 0
  1859  000001                     ___awmod@dividend:
  1860                           	opt stack 0
  1861  000001                     strcat@to:
  1862                           	opt stack 0
  1863  000001                     strcmp@s1:
  1864                           	opt stack 0
  1865  000001                     i2generate_compartment_array@step:
  1866                           	opt stack 0
  1867  000001                     i2___wmul@multiplier:
  1868                           	opt stack 0
  1869  000001                     i2___awdiv@dividend:
  1870                           	opt stack 0
  1871  000001                     i2___lwdiv@dividend:
  1872                           	opt stack 0
  1873  000001                     i2___lldiv@dividend:
  1874                           	opt stack 0
  1875                           
  1876                           ; 4 bytes @ 0x0
  1877  000001                     	ds	1
  1878  000002                     i2lcdNibble@data:
  1879                           	opt stack 0
  1880  000002                     i2I2C_Master_Read@ackBit:
  1881                           	opt stack 0
  1882  000002                     i2_isdigit$1301:
  1883                           	opt stack 0
  1884  000002                     i2I2C_Master_Write@byteToWrite:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x1
  1888  000002                     	ds	1
  1889  000003                     ??i2_generate_compartment_array:
  1890  000003                     i2lcdInst@data:
  1891                           	opt stack 0
  1892  000003                     i2putch@data:
  1893                           	opt stack 0
  1894  000003                     i2I2C_Master_Read@receivedByte:
  1895                           	opt stack 0
  1896  000003                     i2isdigit@c:
  1897                           	opt stack 0
  1898  000003                     ___awmod@divisor:
  1899                           	opt stack 0
  1900  000003                     strcat@from:
  1901                           	opt stack 0
  1902  000003                     strcmp@s2:
  1903                           	opt stack 0
  1904  000003                     i2___wmul@multiplicand:
  1905                           	opt stack 0
  1906  000003                     i2___awdiv@divisor:
  1907                           	opt stack 0
  1908  000003                     i2___lwdiv@divisor:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x2
  1912  000003                     	ds	1
  1913  000004                     ??i2_initLCD:
  1914  000004                     
  1915                           ; 1 bytes @ 0x3
  1916  000004                     	ds	1
  1917  000005                     ??_strcmp:
  1918  000005                     ___awmod@counter:
  1919                           	opt stack 0
  1920  000005                     i2___awdiv@counter:
  1921                           	opt stack 0
  1922  000005                     strcat@cp:
  1923                           	opt stack 0
  1924  000005                     i2___wmul@product:
  1925                           	opt stack 0
  1926  000005                     i2___lwdiv@quotient:
  1927                           	opt stack 0
  1928  000005                     i2___lldiv@divisor:
  1929                           	opt stack 0
  1930                           
  1931                           ; 4 bytes @ 0x4
  1932  000005                     	ds	1
  1933  000006                     ___awmod@sign:
  1934                           	opt stack 0
  1935  000006                     strcmp@r:
  1936                           	opt stack 0
  1937  000006                     i2___awdiv@sign:
  1938                           	opt stack 0
  1939                           
  1940                           ; 1 bytes @ 0x5
  1941  000006                     	ds	1
  1942  000007                     ??_is_valid:
  1943  000007                     ?_strncmp:
  1944                           	opt stack 0
  1945  000007                     i2___lwdiv@counter:
  1946                           	opt stack 0
  1947  000007                     strcpy@to:
  1948                           	opt stack 0
  1949  000007                     strncmp@s1:
  1950                           	opt stack 0
  1951  000007                     i2___awdiv@quotient:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x6
  1955  000007                     	ds	1
  1956  000008                     ?i2___lwmod:
  1957                           	opt stack 0
  1958  000008                     i2___lwmod@dividend:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x7
  1962  000008                     	ds	1
  1963  000009                     strcpy@from:
  1964                           	opt stack 0
  1965  000009                     strncmp@s2:
  1966                           	opt stack 0
  1967  000009                     i2___lldiv@quotient:
  1968                           	opt stack 0
  1969                           
  1970                           ; 4 bytes @ 0x8
  1971  000009                     	ds	1
  1972  00000A                     i2___lwmod@divisor:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x9
  1976  00000A                     	ds	1
  1977  00000B                     strcpy@cp:
  1978                           	opt stack 0
  1979  00000B                     strncmp@len:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0xA
  1983  00000B                     	ds	1
  1984  00000C                     i2___lwmod@counter:
  1985                           	opt stack 0
  1986                           
  1987                           ; 1 bytes @ 0xB
  1988  00000C                     	ds	1
  1989  00000D                     ??_strncmp:
  1990  00000D                     ?i2_printf:
  1991                           	opt stack 0
  1992  00000D                     i2___lldiv@counter:
  1993                           	opt stack 0
  1994  00000D                     i2printf@f:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0xC
  1998  00000D                     	ds	1
  1999  00000E                     i2I2C_Master_Init@clockFreq:
  2000                           	opt stack 0
  2001                           
  2002                           ; 4 bytes @ 0xD
  2003  00000E                     	ds	4
  2004  000012                     ??i2_I2C_Master_Init:
  2005                           
  2006                           ; 1 bytes @ 0x11
  2007  000012                     	ds	7
  2008  000019                     ??i2_printf:
  2009                           
  2010                           ; 1 bytes @ 0x18
  2011  000019                     	ds	4
  2012  00001D                     i2printf@idx:
  2013                           	opt stack 0
  2014                           
  2015                           ; 1 bytes @ 0x1C
  2016  00001D                     	ds	1
  2017  00001E                     i2printf@prec:
  2018                           	opt stack 0
  2019                           
  2020                           ; 1 bytes @ 0x1D
  2021  00001E                     	ds	1
  2022  00001F                     i2printf@cp:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x1E
  2026  00001F                     	ds	2
  2027  000021                     i2printf@ap:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x20
  2031  000021                     	ds	2
  2032  000023                     i2printf@len:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x22
  2036  000023                     	ds	2
  2037  000025                     i2printf@val:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x24
  2041  000025                     	ds	2
  2042  000027                     i2printf@flag:
  2043                           	opt stack 0
  2044                           
  2045                           ; 1 bytes @ 0x26
  2046  000027                     	ds	1
  2047  000028                     i2printf@width:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x27
  2051  000028                     	ds	2
  2052  00002A                     i2printf@c:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0x29
  2056  00002A                     	ds	1
  2057  00002B                     ??_interruptHandler:
  2058                           
  2059                           ; 1 bytes @ 0x2A
  2060  00002B                     	ds	23
  2061  000042                     interruptHandler@i:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x41
  2065  000042                     	ds	2
  2066  000044                     interruptHandler@keypress:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x43
  2070  000044                     	ds	1
  2071  000045                     interruptHandler@temp:
  2072                           	opt stack 0
  2073                           
  2074                           ; 1 bytes @ 0x44
  2075  000045                     	ds	1
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           postdec1	equ	0xFE5
  2083                           fsr1l	equ	0xFE1
  2084                           
  2085 ;;
  2086 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2087 ;;
  2088 ;; *************** function _main *****************
  2089 ;; Defined at:
  2090 ;;		line 65 in file "main.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;Total ram usage:        4 bytes
  2109 ;; Hardware stack levels required when called:    7
  2110 ;; This function calls:
  2111 ;;		_I2C_Master_Init
  2112 ;;		_I2C_Master_Read
  2113 ;;		_I2C_Master_Start
  2114 ;;		_I2C_Master_Stop
  2115 ;;		_I2C_Master_Write
  2116 ;;		_I2C_sendData
  2117 ;;		___wmul
  2118 ;;		_generate_compartment_array
  2119 ;;		_get_RTC_final
  2120 ;;		_get_RTC_initial
  2121 ;;		_initLCD
  2122 ;;		_initialize
  2123 ;;		_lcdInst
  2124 ;;		_printf
  2125 ;;		_readADC
  2126 ;; This function is called by:
  2127 ;;		Startup code after reset
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text0
  2132  001E50                     __ptext0:
  2133                           	opt stack 0
  2134  001E50                     _main:
  2135                           	opt stack 24
  2136                           
  2137                           ;main.c: 74: LATA = 0x00;
  2138                           
  2139                           ;incstack = 0
  2140  001E50  0E00               	movlw	0
  2141  001E52  6E89               	movwf	3977,c	;volatile
  2142                           
  2143                           ;main.c: 75: LATB = 0x00;
  2144  001E54  0E00               	movlw	0
  2145  001E56  6E8A               	movwf	3978,c	;volatile
  2146                           
  2147                           ;main.c: 76: LATC = 0x00;
  2148  001E58  0E00               	movlw	0
  2149  001E5A  6E8B               	movwf	3979,c	;volatile
  2150                           
  2151                           ;main.c: 77: LATD = 0x00;
  2152  001E5C  0E00               	movlw	0
  2153  001E5E  6E8C               	movwf	3980,c	;volatile
  2154                           
  2155                           ;main.c: 78: LATE = 0x00;
  2156  001E60  0E00               	movlw	0
  2157  001E62  6E8D               	movwf	3981,c	;volatile
  2158                           
  2159                           ;main.c: 82: TRISA = 0xFF;
  2160  001E64  6892               	setf	3986,c	;volatile
  2161                           
  2162                           ;main.c: 83: TRISB = 0xFF;
  2163  001E66  6893               	setf	3987,c	;volatile
  2164                           
  2165                           ;main.c: 84: TRISC = 0x00;
  2166  001E68  0E00               	movlw	0
  2167  001E6A  6E94               	movwf	3988,c	;volatile
  2168                           
  2169                           ;main.c: 85: TRISD = 0x00;
  2170  001E6C  0E00               	movlw	0
  2171  001E6E  6E95               	movwf	3989,c	;volatile
  2172                           
  2173                           ;main.c: 86: TRISE = 0x00;
  2174  001E70  0E00               	movlw	0
  2175  001E72  6E96               	movwf	3990,c	;volatile
  2176                           
  2177                           ;main.c: 89: ADCON0 = 0x00;
  2178  001E74  0E00               	movlw	0
  2179  001E76  6EC2               	movwf	4034,c	;volatile
  2180                           
  2181                           ;main.c: 90: ADCON1 = 0b00001111;
  2182  001E78  0E0F               	movlw	15
  2183  001E7A  6EC1               	movwf	4033,c	;volatile
  2184                           
  2185                           ;main.c: 93: INT1IE = 1;
  2186  001E7C  86F0               	bsf	intcon3,3,c	;volatile
  2187                           
  2188                           ;main.c: 94: (INTCONbits.GIE = 1);
  2189  001E7E  8EF2               	bsf	intcon,7,c	;volatile
  2190                           
  2191                           ;main.c: 97: initLCD();
  2192  001E80  EC84  F021         	call	_initLCD	;wreg free
  2193  001E84                     
  2194                           ;main.c: 102: if (mode == 0){
  2195  001E84  0100               	movlb	0	; () banked
  2196  001E86  51BA               	movf	_mode& (0+255),w,b
  2197  001E88  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2198  001E8A  A4D8               	btfss	status,2,c
  2199  001E8C  D032               	goto	l350
  2200  001E8E                     u4090:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;main.c: 104: printf("1:date and time");
  2204                           
  2205                           ; BSR set to: 0
  2206                           
  2207                           ;main.c: 103: while(1){
  2208  001E8E  0E04               	movlw	low STR_1
  2209  001E90  6FD6               	movwf	printf@f& (0+255),b
  2210  001E92  0EFE               	movlw	high STR_1
  2211  001E94  6FD7               	movwf	(printf@f+1)& (0+255),b
  2212  001E96  ECDA  F015         	call	_printf	;wreg free
  2213                           
  2214                           ;main.c: 105: lcdInst(0xC0);;
  2215  001E9A  0EC0               	movlw	192
  2216  001E9C  EC27  F023         	call	_lcdInst
  2217                           
  2218                           ;main.c: 106: printf("2:instruction");
  2219  001EA0  0EE4               	movlw	low STR_2
  2220  001EA2  0100               	movlb	0	; () banked
  2221  001EA4  6FD6               	movwf	printf@f& (0+255),b
  2222  001EA6  0EFE               	movlw	high STR_2
  2223  001EA8  6FD7               	movwf	(printf@f+1)& (0+255),b
  2224  001EAA  ECDA  F015         	call	_printf	;wreg free
  2225                           
  2226                           ;main.c: 107: _delay((unsigned long)((300)*(40000000/4000.0)));
  2227  001EAE  0E10               	movlw	16
  2228  001EB0  0100               	movlb	0	; () banked
  2229  001EB2  6FED               	movwf	(??_main+1)& (0+255),b
  2230  001EB4  0E39               	movlw	57
  2231  001EB6  6FEC               	movwf	??_main& (0+255),b
  2232  001EB8  0E0D               	movlw	13
  2233  001EBA                     u5027:
  2234  001EBA  2EE8               	decfsz	wreg,f,c
  2235  001EBC  D7FE               	bra	u5027
  2236  001EBE  2FEC               	decfsz	??_main& (0+255),f,b
  2237  001EC0  D7FC               	bra	u5027
  2238  001EC2  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2239  001EC4  D7FA               	bra	u5027
  2240  001EC6  D000               	nop2	
  2241                           
  2242                           ;main.c: 108: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2243  001EC8  0E80               	movlw	128
  2244  001ECA  EC27  F023         	call	_lcdInst
  2245  001ECE  0E41               	movlw	65
  2246  001ED0  0100               	movlb	0	; () banked
  2247  001ED2  6FEC               	movwf	??_main& (0+255),b
  2248  001ED4  0EEE               	movlw	238
  2249  001ED6                     u5037:
  2250  001ED6  2EE8               	decfsz	wreg,f,c
  2251  001ED8  D7FE               	bra	u5037
  2252  001EDA  2FEC               	decfsz	??_main& (0+255),f,b
  2253  001EDC  D7FC               	bra	u5037
  2254  001EDE  F000               	nop	
  2255                           
  2256                           ;main.c: 109: if (change_mode == 1){
  2257  001EE0  0100               	movlb	0	; () banked
  2258  001EE2  05B8               	decf	_change_mode& (0+255),w,b
  2259  001EE4  11B9               	iorwf	(_change_mode+1)& (0+255),w,b
  2260  001EE6  A4D8               	btfss	status,2,c
  2261  001EE8  D7D2               	goto	u4090
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 110: mode = 1;
  2265  001EEA  0E00               	movlw	0
  2266  001EEC  6FBB               	movwf	(_mode+1)& (0+255),b
  2267  001EEE  0E01               	movlw	1
  2268  001EF0  6FBA               	movwf	_mode& (0+255),b
  2269  001EF2                     l350:
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 112: }
  2273                           ;main.c: 113: }
  2274                           ;main.c: 115: }
  2275                           ;main.c: 118: if (mode == 1){
  2276                           
  2277                           ; BSR set to: 0
  2278                           
  2279                           ; BSR set to: 0
  2280  001EF2  05BA               	decf	_mode& (0+255),w,b
  2281  001EF4  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2282  001EF6  A4D8               	btfss	status,2,c
  2283  001EF8  D128               	goto	l352
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 120: initLCD();
  2287  001EFA  EC84  F021         	call	_initLCD	;wreg free
  2288  001EFE                     
  2289                           ;main.c: 123: if (state == 0){
  2290  001EFE  0100               	movlb	0	; () banked
  2291  001F00  51AE               	movf	_state& (0+255),w,b
  2292  001F02  11AF               	iorwf	(_state+1)& (0+255),w,b
  2293  001F04  A4D8               	btfss	status,2,c
  2294  001F06  D023               	goto	l354
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;main.c: 125: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2298  001F08  0E80               	movlw	128
  2299  001F0A  EC27  F023         	call	_lcdInst
  2300  001F0E  0E41               	movlw	65
  2301  001F10  0100               	movlb	0	; () banked
  2302  001F12  6FEC               	movwf	??_main& (0+255),b
  2303  001F14  0EEE               	movlw	238
  2304  001F16                     u5047:
  2305  001F16  2EE8               	decfsz	wreg,f,c
  2306  001F18  D7FE               	bra	u5047
  2307  001F1A  2FEC               	decfsz	??_main& (0+255),f,b
  2308  001F1C  D7FC               	bra	u5047
  2309  001F1E  F000               	nop	
  2310                           
  2311                           ;main.c: 126: printf("assembly step:");
  2312  001F20  0E33               	movlw	low STR_3
  2313  001F22  0100               	movlb	0	; () banked
  2314  001F24  6FD6               	movwf	printf@f& (0+255),b
  2315  001F26  0EFE               	movlw	high STR_3
  2316  001F28  6FD7               	movwf	(printf@f+1)& (0+255),b
  2317  001F2A  ECDA  F015         	call	_printf	;wreg free
  2318                           
  2319                           ;main.c: 127: _delay((unsigned long)((500)*(40000000/4000.0)));
  2320  001F2E  0E1A               	movlw	26
  2321  001F30  0100               	movlb	0	; () banked
  2322  001F32  6FED               	movwf	(??_main+1)& (0+255),b
  2323  001F34  0E5E               	movlw	94
  2324  001F36  6FEC               	movwf	??_main& (0+255),b
  2325  001F38  0E6E               	movlw	110
  2326  001F3A                     u5057:
  2327  001F3A  2EE8               	decfsz	wreg,f,c
  2328  001F3C  D7FE               	bra	u5057
  2329  001F3E  2FEC               	decfsz	??_main& (0+255),f,b
  2330  001F40  D7FC               	bra	u5057
  2331  001F42  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2332  001F44  D7FA               	bra	u5057
  2333  001F46  F000               	nop	
  2334                           
  2335                           ;main.c: 128: lcdInst(0xC0);;
  2336  001F48  0EC0               	movlw	192
  2337  001F4A  EC27  F023         	call	_lcdInst
  2338  001F4E                     l354:
  2339                           
  2340                           ;main.c: 129: }
  2341                           ;main.c: 130: if (state ==1){
  2342  001F4E  0100               	movlb	0	; () banked
  2343  001F50  05AE               	decf	_state& (0+255),w,b
  2344  001F52  11AF               	iorwf	(_state+1)& (0+255),w,b
  2345  001F54  A4D8               	btfss	status,2,c
  2346  001F56  D024               	goto	l355
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;main.c: 131: initLCD();
  2350  001F58  EC84  F021         	call	_initLCD	;wreg free
  2351                           
  2352                           ;main.c: 132: printf("fastener set:");
  2353  001F5C  0EC8               	movlw	low STR_4
  2354  001F5E  0100               	movlb	0	; () banked
  2355  001F60  6FD6               	movwf	printf@f& (0+255),b
  2356  001F62  0EFE               	movlw	high STR_4
  2357  001F64  6FD7               	movwf	(printf@f+1)& (0+255),b
  2358  001F66  ECDA  F015         	call	_printf	;wreg free
  2359                           
  2360                           ;main.c: 133: lcdInst(0xC0);;
  2361  001F6A  0EC0               	movlw	192
  2362  001F6C  EC27  F023         	call	_lcdInst
  2363                           
  2364                           ;main.c: 134: printf("%s",current_set);
  2365  001F70  0EF8               	movlw	low STR_5
  2366  001F72  0100               	movlb	0	; () banked
  2367  001F74  6FD6               	movwf	printf@f& (0+255),b
  2368  001F76  0EFF               	movlw	high STR_5
  2369  001F78  6FD7               	movwf	(printf@f+1)& (0+255),b
  2370  001F7A  0EC3               	movlw	low _current_set
  2371  001F7C  6FD8               	movwf	(?_printf+2)& (0+255),b
  2372  001F7E  0E00               	movlw	high _current_set
  2373  001F80  6FD9               	movwf	(?_printf+3)& (0+255),b
  2374  001F82  ECDA  F015         	call	_printf	;wreg free
  2375                           
  2376                           ;main.c: 135: _delay((unsigned long)((500)*(40000000/4000.0)));
  2377  001F86  0E1A               	movlw	26
  2378  001F88  0100               	movlb	0	; () banked
  2379  001F8A  6FED               	movwf	(??_main+1)& (0+255),b
  2380  001F8C  0E5E               	movlw	94
  2381  001F8E  6FEC               	movwf	??_main& (0+255),b
  2382  001F90  0E6E               	movlw	110
  2383  001F92                     u5067:
  2384  001F92  2EE8               	decfsz	wreg,f,c
  2385  001F94  D7FE               	bra	u5067
  2386  001F96  2FEC               	decfsz	??_main& (0+255),f,b
  2387  001F98  D7FC               	bra	u5067
  2388  001F9A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2389  001F9C  D7FA               	bra	u5067
  2390  001F9E  F000               	nop	
  2391  001FA0                     l355:
  2392                           
  2393                           ;main.c: 136: }
  2394                           ;main.c: 138: if (state == 2){
  2395  001FA0  0E02               	movlw	2
  2396  001FA2  0100               	movlb	0	; () banked
  2397  001FA4  19AE               	xorwf	_state& (0+255),w,b
  2398  001FA6  11AF               	iorwf	(_state+1)& (0+255),w,b
  2399  001FA8  A4D8               	btfss	status,2,c
  2400  001FAA  D016               	goto	l356
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;main.c: 139: initLCD();
  2404  001FAC  EC84  F021         	call	_initLCD	;wreg free
  2405                           
  2406                           ;main.c: 140: printf("number:");
  2407  001FB0  0EA4               	movlw	low STR_6
  2408  001FB2  0100               	movlb	0	; () banked
  2409  001FB4  6FD6               	movwf	printf@f& (0+255),b
  2410  001FB6  0EFF               	movlw	high STR_6
  2411  001FB8  6FD7               	movwf	(printf@f+1)& (0+255),b
  2412  001FBA  ECDA  F015         	call	_printf	;wreg free
  2413                           
  2414                           ;main.c: 141: _delay((unsigned long)((500)*(40000000/4000.0)));
  2415  001FBE  0E1A               	movlw	26
  2416  001FC0  0100               	movlb	0	; () banked
  2417  001FC2  6FED               	movwf	(??_main+1)& (0+255),b
  2418  001FC4  0E5E               	movlw	94
  2419  001FC6  6FEC               	movwf	??_main& (0+255),b
  2420  001FC8  0E6E               	movlw	110
  2421  001FCA                     u5077:
  2422  001FCA  2EE8               	decfsz	wreg,f,c
  2423  001FCC  D7FE               	bra	u5077
  2424  001FCE  2FEC               	decfsz	??_main& (0+255),f,b
  2425  001FD0  D7FC               	bra	u5077
  2426  001FD2  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2427  001FD4  D7FA               	bra	u5077
  2428  001FD6  F000               	nop	
  2429  001FD8                     l356:
  2430                           
  2431                           ;main.c: 142: }
  2432                           ;main.c: 144: if (state == 3){
  2433  001FD8  0E03               	movlw	3
  2434  001FDA  0100               	movlb	0	; () banked
  2435  001FDC  19AE               	xorwf	_state& (0+255),w,b
  2436  001FDE  11AF               	iorwf	(_state+1)& (0+255),w,b
  2437  001FE0  A4D8               	btfss	status,2,c
  2438  001FE2  D78D               	goto	l353
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;main.c: 145: initLCD();
  2442  001FE4  EC84  F021         	call	_initLCD	;wreg free
  2443                           
  2444                           ;main.c: 146: printf("Done!");
  2445  001FE8  0EBA               	movlw	low STR_7
  2446  001FEA  0100               	movlb	0	; () banked
  2447  001FEC  6FD6               	movwf	printf@f& (0+255),b
  2448  001FEE  0EFF               	movlw	high STR_7
  2449  001FF0  6FD7               	movwf	(printf@f+1)& (0+255),b
  2450  001FF2  ECDA  F015         	call	_printf	;wreg free
  2451                           
  2452                           ;main.c: 147: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2453  001FF6  0E33               	movlw	51
  2454  001FF8  0100               	movlb	0	; () banked
  2455  001FFA  6FED               	movwf	(??_main+1)& (0+255),b
  2456  001FFC  0EBB               	movlw	187
  2457  001FFE  6FEC               	movwf	??_main& (0+255),b
  2458  002000  0EDF               	movlw	223
  2459  002002                     u5087:
  2460  002002  2EE8               	decfsz	wreg,f,c
  2461  002004  D7FE               	bra	u5087
  2462  002006  2FEC               	decfsz	??_main& (0+255),f,b
  2463  002008  D7FC               	bra	u5087
  2464  00200A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2465  00200C  D7FA               	bra	u5087
  2466  00200E  D000               	nop2	
  2467                           
  2468                           ;main.c: 148: initLCD();
  2469  002010  EC84  F021         	call	_initLCD	;wreg free
  2470                           
  2471                           ;main.c: 149: printf("assembly step:%d",assembly_step);
  2472  002014  0ED2               	movlw	low STR_8
  2473  002016  0100               	movlb	0	; () banked
  2474  002018  6FD6               	movwf	printf@f& (0+255),b
  2475  00201A  0EFD               	movlw	high STR_8
  2476  00201C  6FD7               	movwf	(printf@f+1)& (0+255),b
  2477  00201E  C0AC  F0D8         	movff	_assembly_step,?_printf+2
  2478  002022  C0AD  F0D9         	movff	_assembly_step+1,?_printf+3
  2479  002026  ECDA  F015         	call	_printf	;wreg free
  2480                           
  2481                           ;main.c: 150: _delay((unsigned long)((600)*(40000000/4000.0)));
  2482  00202A  0E1F               	movlw	31
  2483  00202C  0100               	movlb	0	; () banked
  2484  00202E  6FED               	movwf	(??_main+1)& (0+255),b
  2485  002030  0E71               	movlw	113
  2486  002032  6FEC               	movwf	??_main& (0+255),b
  2487  002034  0E1E               	movlw	30
  2488  002036                     u5097:
  2489  002036  2EE8               	decfsz	wreg,f,c
  2490  002038  D7FE               	bra	u5097
  2491  00203A  2FEC               	decfsz	??_main& (0+255),f,b
  2492  00203C  D7FC               	bra	u5097
  2493  00203E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2494  002040  D7FA               	bra	u5097
  2495  002042  F000               	nop	
  2496                           
  2497                           ;main.c: 151: for ( i=0; i<assembly_step; i++){
  2498  002044  0E00               	movlw	0
  2499  002046  0100               	movlb	0	; () banked
  2500  002048  6FBF               	movwf	(_i+1)& (0+255),b
  2501  00204A  0E00               	movlw	0
  2502  00204C  6FBE               	movwf	_i& (0+255),b
  2503  00204E  D067               	goto	l358
  2504  002050                     
  2505                           ; BSR set to: 0
  2506                           ;main.c: 153: initLCD();
  2507                           
  2508                           ; BSR set to: 0
  2509  002050  EC84  F021         	call	_initLCD	;wreg free
  2510                           
  2511                           ;main.c: 155: printf("step");
  2512  002054  0EE3               	movlw	low STR_9
  2513  002056  0100               	movlb	0	; () banked
  2514  002058  6FD6               	movwf	printf@f& (0+255),b
  2515  00205A  0EFF               	movlw	high STR_9
  2516  00205C  6FD7               	movwf	(printf@f+1)& (0+255),b
  2517  00205E  ECDA  F015         	call	_printf	;wreg free
  2518                           
  2519                           ;main.c: 156: printf("%d", i+1);
  2520  002062  0E4E               	movlw	low (STR_54+12)
  2521  002064  0100               	movlb	0	; () banked
  2522  002066  6FD6               	movwf	printf@f& (0+255),b
  2523  002068  0EFE               	movlw	high (STR_54+12)
  2524  00206A  6FD7               	movwf	(printf@f+1)& (0+255),b
  2525  00206C  0E01               	movlw	1
  2526  00206E  25BE               	addwf	_i& (0+255),w,b
  2527  002070  6FD8               	movwf	(?_printf+2)& (0+255),b
  2528  002072  0E00               	movlw	0
  2529  002074  21BF               	addwfc	(_i+1)& (0+255),w,b
  2530  002076  6FD9               	movwf	(?_printf+3)& (0+255),b
  2531  002078  ECDA  F015         	call	_printf	;wreg free
  2532                           
  2533                           ;main.c: 157: printf(":");
  2534  00207C  0E02               	movlw	low (STR_50+14)
  2535  00207E  0100               	movlb	0	; () banked
  2536  002080  6FD6               	movwf	printf@f& (0+255),b
  2537  002082  0EFE               	movlw	high (STR_50+14)
  2538  002084  6FD7               	movwf	(printf@f+1)& (0+255),b
  2539  002086  ECDA  F015         	call	_printf	;wreg free
  2540                           
  2541                           ;main.c: 158: printf("%s", final_set[i]);
  2542  00208A  C0BE  F0D0         	movff	_i,___wmul@multiplier
  2543  00208E  C0BF  F0D1         	movff	_i+1,___wmul@multiplier+1
  2544  002092  0E00               	movlw	0
  2545  002094  0100               	movlb	0	; () banked
  2546  002096  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2547  002098  0E05               	movlw	5
  2548  00209A  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  2549  00209C  ECAE  F022         	call	___wmul	;wreg free
  2550  0020A0  0EA6               	movlw	low _final_set
  2551  0020A2  0100               	movlb	0	; () banked
  2552  0020A4  25D0               	addwf	?___wmul& (0+255),w,b
  2553  0020A6  6FEE               	movwf	_main$1690& (0+255),b
  2554  0020A8  0E01               	movlw	high _final_set
  2555  0020AA  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  2556  0020AC  6FEF               	movwf	(_main$1690+1)& (0+255),b
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;main.c: 158: printf("%s", final_set[i]);
  2560  0020AE  0EF8               	movlw	low STR_5
  2561  0020B0  6FD6               	movwf	printf@f& (0+255),b
  2562  0020B2  0EFF               	movlw	high STR_5
  2563  0020B4  6FD7               	movwf	(printf@f+1)& (0+255),b
  2564  0020B6  C0EE  F0D8         	movff	_main$1690,?_printf+2
  2565  0020BA  C0EF  F0D9         	movff	_main$1690+1,?_printf+3
  2566  0020BE  ECDA  F015         	call	_printf	;wreg free
  2567                           
  2568                           ;main.c: 159: printf(",");
  2569  0020C2  0EFB               	movlw	low STR_13
  2570  0020C4  0100               	movlb	0	; () banked
  2571  0020C6  6FD6               	movwf	printf@f& (0+255),b
  2572  0020C8  0EFF               	movlw	high STR_13
  2573  0020CA  6FD7               	movwf	(printf@f+1)& (0+255),b
  2574  0020CC  ECDA  F015         	call	_printf	;wreg free
  2575                           
  2576                           ;main.c: 160: printf("%d",final_number[i]);
  2577  0020D0  0E4E               	movlw	low (STR_54+12)
  2578  0020D2  0100               	movlb	0	; () banked
  2579  0020D4  6FD6               	movwf	printf@f& (0+255),b
  2580  0020D6  0EFE               	movlw	high (STR_54+12)
  2581  0020D8  6FD7               	movwf	(printf@f+1)& (0+255),b
  2582  0020DA  90D8               	bcf	status,0,c
  2583  0020DC  35BE               	rlcf	_i& (0+255),w,b
  2584  0020DE  6ED9               	movwf	fsr2l,c
  2585  0020E0  35BF               	rlcf	(_i+1)& (0+255),w,b
  2586  0020E2  6EDA               	movwf	fsr2h,c
  2587  0020E4  0E50               	movlw	low _final_number
  2588  0020E6  26D9               	addwf	fsr2l,f,c
  2589  0020E8  0E01               	movlw	high _final_number
  2590  0020EA  22DA               	addwfc	fsr2h,f,c
  2591  0020EC  CFDE F0D8          	movff	postinc2,?_printf+2
  2592  0020F0  CFDD F0D9          	movff	postdec2,?_printf+3
  2593  0020F4  ECDA  F015         	call	_printf	;wreg free
  2594                           
  2595                           ;main.c: 161: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2596  0020F8  0E33               	movlw	51
  2597  0020FA  0100               	movlb	0	; () banked
  2598  0020FC  6FED               	movwf	(??_main+1)& (0+255),b
  2599  0020FE  0EBB               	movlw	187
  2600  002100  6FEC               	movwf	??_main& (0+255),b
  2601  002102  0EDF               	movlw	223
  2602  002104                     u5107:
  2603  002104  2EE8               	decfsz	wreg,f,c
  2604  002106  D7FE               	bra	u5107
  2605  002108  2FEC               	decfsz	??_main& (0+255),f,b
  2606  00210A  D7FC               	bra	u5107
  2607  00210C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2608  00210E  D7FA               	bra	u5107
  2609  002110  D000               	nop2	
  2610                           
  2611                           ;main.c: 162: lcdInst(0xC0);;
  2612  002112  0EC0               	movlw	192
  2613  002114  EC27  F023         	call	_lcdInst
  2614  002118  0100               	movlb	0	; () banked
  2615  00211A  4BBE               	infsnz	_i& (0+255),f,b
  2616  00211C  2BBF               	incf	(_i+1)& (0+255),f,b
  2617  00211E                     l358:
  2618                           
  2619                           ; BSR set to: 0
  2620                           
  2621                           ; BSR set to: 0
  2622  00211E  51AC               	movf	_assembly_step& (0+255),w,b
  2623  002120  5DBE               	subwf	_i& (0+255),w,b
  2624  002122  51AD               	movf	(_assembly_step+1)& (0+255),w,b
  2625  002124  59BF               	subwfb	(_i+1)& (0+255),w,b
  2626  002126  A0D8               	btfss	status,0,c
  2627  002128  D793               	goto	l359
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;main.c: 167: }
  2631                           ;main.c: 168: mode = 2;
  2632                           
  2633                           ; BSR set to: 0
  2634  00212A  0E00               	movlw	0
  2635  00212C  6FBB               	movwf	(_mode+1)& (0+255),b
  2636  00212E  0E02               	movlw	2
  2637  002130  6FBA               	movwf	_mode& (0+255),b
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 169: printf("change mode 2");
  2641  002132  0EBA               	movlw	low STR_15
  2642  002134  6FD6               	movwf	printf@f& (0+255),b
  2643  002136  0EFE               	movlw	high STR_15
  2644  002138  6FD7               	movwf	(printf@f+1)& (0+255),b
  2645  00213A  ECDA  F015         	call	_printf	;wreg free
  2646                           
  2647                           ;main.c: 192: }
  2648                           ;main.c: 194: }
  2649                           ;main.c: 195: generate_compartment_array(assembly_step);
  2650                           
  2651                           ;main.c: 190: break;
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 189: printf("change mode 2");
  2655                           
  2656                           ;main.c: 188: mode = 2;
  2657                           
  2658                           ;main.c: 182: get_RTC_initial();
  2659                           
  2660                           ;main.c: 177: printf("change mode 2");
  2661                           
  2662                           ;main.c: 176: initLCD();
  2663                           
  2664                           ;main.c: 173: printf("start operation");
  2665                           
  2666                           ;main.c: 172: initLCD();
  2667                           
  2668                           ;main.c: 170: break;
  2669  00213E  C0AC  F0C8         	movff	_assembly_step,generate_compartment_array@step
  2670  002142  C0AD  F0C9         	movff	_assembly_step+1,generate_compartment_array@step+1
  2671  002146  EC41  F01B         	call	_generate_compartment_array	;wreg free
  2672  00214A                     l352:
  2673                           
  2674                           ;main.c: 199: }
  2675                           ;main.c: 212: if (mode == 2){
  2676  00214A  0E02               	movlw	2
  2677  00214C  0100               	movlb	0	; () banked
  2678  00214E  19BA               	xorwf	_mode& (0+255),w,b
  2679  002150  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2680  002152  A4D8               	btfss	status,2,c
  2681  002154  D697               	goto	l346
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 214: (INTCONbits.GIE = 0);
  2685  002156  9EF2               	bcf	intcon,7,c	;volatile
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 215: initLCD();
  2689  002158  EC84  F021         	call	_initLCD	;wreg free
  2690                           
  2691                           ;main.c: 216: printf("mode 2");
  2692  00215C  0EC1               	movlw	low (STR_15+7)
  2693  00215E  0100               	movlb	0	; () banked
  2694  002160  6FD6               	movwf	printf@f& (0+255),b
  2695  002162  0EFE               	movlw	high (STR_15+7)
  2696  002164  6FD7               	movwf	(printf@f+1)& (0+255),b
  2697  002166  ECDA  F015         	call	_printf	;wreg free
  2698                           
  2699                           ;main.c: 217: _delay((unsigned long)((200)*(40000000/4000.0)));
  2700  00216A  0E0B               	movlw	11
  2701  00216C  0100               	movlb	0	; () banked
  2702  00216E  6FED               	movwf	(??_main+1)& (0+255),b
  2703  002170  0E26               	movlw	38
  2704  002172  6FEC               	movwf	??_main& (0+255),b
  2705  002174  0E5D               	movlw	93
  2706  002176                     u5117:
  2707  002176  2EE8               	decfsz	wreg,f,c
  2708  002178  D7FE               	bra	u5117
  2709  00217A  2FEC               	decfsz	??_main& (0+255),f,b
  2710  00217C  D7FC               	bra	u5117
  2711  00217E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2712  002180  D7FA               	bra	u5117
  2713  002182  D000               	nop2	
  2714                           
  2715                           ;main.c: 219: I2C_Master_Init(100000);
  2716  002184  0EA0               	movlw	160
  2717  002186  0100               	movlb	0	; () banked
  2718  002188  6FD5               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2719  00218A  0E86               	movlw	134
  2720  00218C  6FD6               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2721  00218E  0E01               	movlw	1
  2722  002190  6FD7               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2723  002192  0E00               	movlw	0
  2724  002194  6FD8               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2725  002196  ECD3  F020         	call	_I2C_Master_Init	;wreg free
  2726                           
  2727                           ;main.c: 220: I2C_Master_Start();
  2728  00219A  EC75  F023         	call	_I2C_Master_Start	;wreg free
  2729                           
  2730                           ;main.c: 223: I2C_Master_Write(0b00010000);
  2731  00219E  0E00               	movlw	0
  2732  0021A0  0100               	movlb	0	; () banked
  2733  0021A2  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2734  0021A4  0E10               	movlw	16
  2735  0021A6  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2736  0021A8  EC67  F023         	call	_I2C_Master_Write	;wreg free
  2737                           
  2738                           ;main.c: 224: I2C_Master_Stop();
  2739  0021AC  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  2740                           
  2741                           ;main.c: 227: I2C_sendData(rotate_gear);
  2742  0021B0  0100               	movlb	0	; () banked
  2743  0021B2  51FE               	movf	_rotate_gear& (0+255),w,b
  2744  0021B4  ECC2  F022         	call	_I2C_sendData
  2745  0021B8                     
  2746                           ;main.c: 233: I2C_Master_Start();
  2747  0021B8  EC75  F023         	call	_I2C_Master_Start	;wreg free
  2748                           
  2749                           ;main.c: 234: I2C_Master_Write(0b00010001);
  2750  0021BC  0E00               	movlw	0
  2751  0021BE  0100               	movlb	0	; () banked
  2752  0021C0  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2753  0021C2  0E11               	movlw	17
  2754  0021C4  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2755  0021C6  EC67  F023         	call	_I2C_Master_Write	;wreg free
  2756                           
  2757                           ;main.c: 235: openHandle_data = I2C_Master_Read(1);
  2758  0021CA  0E01               	movlw	1
  2759  0021CC  EC99  F022         	call	_I2C_Master_Read
  2760  0021D0  0100               	movlb	0	; () banked
  2761  0021D2  6FC1               	movwf	_openHandle_data& (0+255),b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 236: I2C_Master_Stop();
  2765  0021D4  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  2766                           
  2767                           ;main.c: 238: if (openHandle_data == '0'){
  2768  0021D8  0E30               	movlw	48
  2769  0021DA  0100               	movlb	0	; () banked
  2770  0021DC  19C1               	xorwf	_openHandle_data& (0+255),w,b
  2771  0021DE  A4D8               	btfss	status,2,c
  2772  0021E0  D7EB               	goto	l364
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;main.c: 239: initLCD();
  2776  0021E2  EC84  F021         	call	_initLCD	;wreg free
  2777                           
  2778                           ;main.c: 240: printf("C0 is found");
  2779  0021E6  0E26               	movlw	low STR_20
  2780  0021E8  0100               	movlb	0	; () banked
  2781  0021EA  6FD6               	movwf	printf@f& (0+255),b
  2782  0021EC  0EFF               	movlw	high STR_20
  2783  0021EE  6FD7               	movwf	(printf@f+1)& (0+255),b
  2784  0021F0  ECDA  F015         	call	_printf	;wreg free
  2785                           
  2786                           ;main.c: 241: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2787  0021F4  0E80               	movlw	128
  2788  0021F6  EC27  F023         	call	_lcdInst
  2789  0021FA  0E41               	movlw	65
  2790  0021FC  0100               	movlb	0	; () banked
  2791  0021FE  6FEC               	movwf	??_main& (0+255),b
  2792  002200  0EEE               	movlw	238
  2793  002202                     u5127:
  2794  002202  2EE8               	decfsz	wreg,f,c
  2795  002204  D7FE               	bra	u5127
  2796  002206  2FEC               	decfsz	??_main& (0+255),f,b
  2797  002208  D7FC               	bra	u5127
  2798  00220A  F000               	nop	
  2799                           
  2800                           ;main.c: 244: }
  2801                           ;main.c: 245: }
  2802                           ;main.c: 251: I2C_Master_Init(100000);
  2803                           
  2804                           ;main.c: 243: break;
  2805  00220C  0EA0               	movlw	160
  2806  00220E  0100               	movlb	0	; () banked
  2807  002210  6FD5               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2808  002212  0E86               	movlw	134
  2809  002214  6FD6               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2810  002216  0E01               	movlw	1
  2811  002218  6FD7               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2812  00221A  0E00               	movlw	0
  2813  00221C  6FD8               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2814  00221E  ECD3  F020         	call	_I2C_Master_Init	;wreg free
  2815                           
  2816                           ;main.c: 252: I2C_Master_Start();
  2817  002222  EC75  F023         	call	_I2C_Master_Start	;wreg free
  2818                           
  2819                           ;main.c: 255: I2C_Master_Write(0b00010000);
  2820  002226  0E00               	movlw	0
  2821  002228  0100               	movlb	0	; () banked
  2822  00222A  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2823  00222C  0E10               	movlw	16
  2824  00222E  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2825  002230  EC67  F023         	call	_I2C_Master_Write	;wreg free
  2826                           
  2827                           ;main.c: 256: I2C_Master_Stop();
  2828  002234  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  2829                           
  2830                           ;main.c: 258: I2C_sendData(15);
  2831  002238  0E0F               	movlw	15
  2832  00223A  ECC2  F022         	call	_I2C_sendData
  2833                           
  2834                           ;main.c: 259: _delay((unsigned long)((200)*(40000000/4000.0)));
  2835  00223E  0E0B               	movlw	11
  2836  002240  0100               	movlb	0	; () banked
  2837  002242  6FED               	movwf	(??_main+1)& (0+255),b
  2838  002244  0E26               	movlw	38
  2839  002246  6FEC               	movwf	??_main& (0+255),b
  2840  002248  0E5D               	movlw	93
  2841  00224A                     u5137:
  2842  00224A  2EE8               	decfsz	wreg,f,c
  2843  00224C  D7FE               	bra	u5137
  2844  00224E  2FEC               	decfsz	??_main& (0+255),f,b
  2845  002250  D7FC               	bra	u5137
  2846  002252  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2847  002254  D7FA               	bra	u5137
  2848  002256  D000               	nop2	
  2849                           
  2850                           ;main.c: 261: i = 0;
  2851  002258  0E00               	movlw	0
  2852  00225A  0100               	movlb	0	; () banked
  2853  00225C  6FBF               	movwf	(_i+1)& (0+255),b
  2854  00225E  0E00               	movlw	0
  2855  002260  6FBE               	movwf	_i& (0+255),b
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;main.c: 262: compartment_pos = 0;
  2859  002262  0E00               	movlw	0
  2860  002264  6FB1               	movwf	(_compartment_pos+1)& (0+255),b
  2861  002266  0E00               	movlw	0
  2862  002268  6FB0               	movwf	_compartment_pos& (0+255),b
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;main.c: 266: for (i = 0; i<8; i++){
  2866  00226A  0E00               	movlw	0
  2867  00226C  6FBF               	movwf	(_i+1)& (0+255),b
  2868  00226E  0E00               	movlw	0
  2869  002270  6FBE               	movwf	_i& (0+255),b
  2870                           
  2871                           ; BSR set to: 0
  2872  002272  51BF               	movf	(_i+1)& (0+255),w,b
  2873  002274  E105               	bnz	u4190
  2874  002276  0E08               	movlw	8
  2875  002278  5DBE               	subwf	_i& (0+255),w,b
  2876  00227A  B0D8               	btfsc	status,0,c
  2877  00227C  D2E1               	goto	u4350
  2878  00227E  D001               	goto	l368
  2879  002280                     u4190:
  2880                           
  2881                           ; BSR set to: 0
  2882  002280  D2DF               	goto	u4350
  2883  002282                     l368:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 268: initLCD();
  2887                           
  2888                           ; BSR set to: 0
  2889  002282  EC84  F021         	call	_initLCD	;wreg free
  2890                           
  2891                           ;main.c: 269: printf("processing C%d",i);
  2892  002286  0E8D               	movlw	low STR_21
  2893  002288  0100               	movlb	0	; () banked
  2894  00228A  6FD6               	movwf	printf@f& (0+255),b
  2895  00228C  0EFE               	movlw	high STR_21
  2896  00228E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2897  002290  C0BE  F0D8         	movff	_i,?_printf+2
  2898  002294  C0BF  F0D9         	movff	_i+1,?_printf+3
  2899  002298  ECDA  F015         	call	_printf	;wreg free
  2900                           
  2901                           ;main.c: 270: _delay((unsigned long)((200)*(40000000/4000.0)));
  2902  00229C  0E0B               	movlw	11
  2903  00229E  0100               	movlb	0	; () banked
  2904  0022A0  6FED               	movwf	(??_main+1)& (0+255),b
  2905  0022A2  0E26               	movlw	38
  2906  0022A4  6FEC               	movwf	??_main& (0+255),b
  2907  0022A6  0E5D               	movlw	93
  2908  0022A8                     u5147:
  2909  0022A8  2EE8               	decfsz	wreg,f,c
  2910  0022AA  D7FE               	bra	u5147
  2911  0022AC  2FEC               	decfsz	??_main& (0+255),f,b
  2912  0022AE  D7FC               	bra	u5147
  2913  0022B0  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2914  0022B2  D7FA               	bra	u5147
  2915  0022B4  D000               	nop2	
  2916                           
  2917                           ;main.c: 273: if (compartment_array[compartment_pos] != 0){
  2918  0022B6  90D8               	bcf	status,0,c
  2919  0022B8  0100               	movlb	0	; () banked
  2920  0022BA  35B0               	rlcf	_compartment_pos& (0+255),w,b
  2921  0022BC  6ED9               	movwf	fsr2l,c
  2922  0022BE  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2923  0022C0  6EDA               	movwf	fsr2h,c
  2924  0022C2  0E80               	movlw	low _compartment_array
  2925  0022C4  26D9               	addwf	fsr2l,f,c
  2926  0022C6  0E00               	movlw	high _compartment_array
  2927  0022C8  22DA               	addwfc	fsr2h,f,c
  2928  0022CA  50DE               	movf	postinc2,w,c
  2929  0022CC  10DE               	iorwf	postinc2,w,c
  2930  0022CE  B4D8               	btfsc	status,2,c
  2931  0022D0  D288               	goto	l370
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;main.c: 277: initLCD();
  2935  0022D2  EC84  F021         	call	_initLCD	;wreg free
  2936                           
  2937                           ;main.c: 279: printf("B_counter:%d",B_counter);
  2938  0022D6  0EF2               	movlw	low STR_22
  2939  0022D8  0100               	movlb	0	; () banked
  2940  0022DA  6FD6               	movwf	printf@f& (0+255),b
  2941  0022DC  0EFE               	movlw	high STR_22
  2942  0022DE  6FD7               	movwf	(printf@f+1)& (0+255),b
  2943  0022E0  C0AA  F0D8         	movff	_B_counter,?_printf+2
  2944  0022E4  C0AB  F0D9         	movff	_B_counter+1,?_printf+3
  2945  0022E8  ECDA  F015         	call	_printf	;wreg free
  2946                           
  2947                           ;main.c: 280: B_counter = B_array[compartment_pos];
  2948  0022EC  90D8               	bcf	status,0,c
  2949  0022EE  0100               	movlb	0	; () banked
  2950  0022F0  35B0               	rlcf	_compartment_pos& (0+255),w,b
  2951  0022F2  6ED9               	movwf	fsr2l,c
  2952  0022F4  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2953  0022F6  6EDA               	movwf	fsr2h,c
  2954  0022F8  0E30               	movlw	low _B_array
  2955  0022FA  26D9               	addwf	fsr2l,f,c
  2956  0022FC  0E01               	movlw	high _B_array
  2957  0022FE  22DA               	addwfc	fsr2h,f,c
  2958  002300  CFDE F0AA          	movff	postinc2,_B_counter
  2959  002304  CFDD F0AB          	movff	postdec2,_B_counter+1
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 281: if(B_counter != 0){
  2963  002308  51AA               	movf	_B_counter& (0+255),w,b
  2964  00230A  11AB               	iorwf	(_B_counter+1)& (0+255),w,b
  2965  00230C  B4D8               	btfsc	status,2,c
  2966  00230E  D047               	goto	l376
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;main.c: 282: I2C_sendData(motorStart_0);
  2970  002310  51F9               	movf	_motorStart_0& (0+255),w,b
  2971  002312  ECC2  F022         	call	_I2C_sendData
  2972                           
  2973                           ;main.c: 283: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2974  002316  0E33               	movlw	51
  2975  002318  0100               	movlb	0	; () banked
  2976  00231A  6FED               	movwf	(??_main+1)& (0+255),b
  2977  00231C  0EBB               	movlw	187
  2978  00231E  6FEC               	movwf	??_main& (0+255),b
  2979  002320  0EDF               	movlw	223
  2980  002322                     u5157:
  2981  002322  2EE8               	decfsz	wreg,f,c
  2982  002324  D7FE               	bra	u5157
  2983  002326  2FEC               	decfsz	??_main& (0+255),f,b
  2984  002328  D7FC               	bra	u5157
  2985  00232A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2986  00232C  D7FA               	bra	u5157
  2987  00232E  D000               	nop2	
  2988                           
  2989                           ;main.c: 284: I2C_sendData(B_dispense);
  2990  002330  0100               	movlb	0	; () banked
  2991  002332  51FC               	movf	_B_dispense& (0+255),w,b
  2992  002334  ECC2  F022         	call	_I2C_sendData
  2993                           
  2994                           ;main.c: 285: }
  2995                           ;main.c: 287: while(B_counter > 0){
  2996  002338  D032               	goto	l376
  2997  00233A                     l5378:
  2998                           
  2999                           ;main.c: 290: I2C_Master_Start();
  3000  00233A  EC75  F023         	call	_I2C_Master_Start	;wreg free
  3001                           
  3002                           ;main.c: 291: I2C_Master_Write(0b00010001);
  3003  00233E  0E00               	movlw	0
  3004  002340  0100               	movlb	0	; () banked
  3005  002342  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3006  002344  0E11               	movlw	17
  3007  002346  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3008  002348  EC67  F023         	call	_I2C_Master_Write	;wreg free
  3009                           
  3010                           ;main.c: 292: nuts_data = I2C_Master_Read(1);
  3011  00234C  0E01               	movlw	1
  3012  00234E  EC99  F022         	call	_I2C_Master_Read
  3013  002352  0100               	movlb	0	; () banked
  3014  002354  6FC0               	movwf	_nuts_data& (0+255),b
  3015                           
  3016                           ;main.c: 293: I2C_Master_Stop();
  3017  002356  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  3018                           
  3019                           ;main.c: 294: if (nuts_data == '2'){
  3020  00235A  0E32               	movlw	50
  3021  00235C  0100               	movlb	0	; () banked
  3022  00235E  19C0               	xorwf	_nuts_data& (0+255),w,b
  3023  002360  A4D8               	btfss	status,2,c
  3024  002362  D01D               	goto	l376
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;main.c: 295: B_counter --;
  3028  002364  07AA               	decf	_B_counter& (0+255),f,b
  3029  002366  A0D8               	btfss	status,0,c
  3030  002368  07AB               	decf	(_B_counter+1)& (0+255),f,b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;main.c: 296: initLCD();
  3034  00236A  EC84  F021         	call	_initLCD	;wreg free
  3035                           
  3036                           ;main.c: 297: printf("B_count:%d", B_counter);
  3037  00236E  0E55               	movlw	low STR_23
  3038  002370  0100               	movlb	0	; () banked
  3039  002372  6FD6               	movwf	printf@f& (0+255),b
  3040  002374  0EFF               	movlw	high STR_23
  3041  002376  6FD7               	movwf	(printf@f+1)& (0+255),b
  3042  002378  C0AA  F0D8         	movff	_B_counter,?_printf+2
  3043  00237C  C0AB  F0D9         	movff	_B_counter+1,?_printf+3
  3044  002380  ECDA  F015         	call	_printf	;wreg free
  3045                           
  3046                           ;main.c: 299: if (B_counter ==0){
  3047  002384  0100               	movlb	0	; () banked
  3048  002386  51AA               	movf	_B_counter& (0+255),w,b
  3049  002388  11AB               	iorwf	(_B_counter+1)& (0+255),w,b
  3050  00238A  A4D8               	btfss	status,2,c
  3051  00238C  D004               	goto	l375
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;main.c: 300: I2C_sendData(motorStop_0);
  3055  00238E  51F8               	movf	_motorStop_0& (0+255),w,b
  3056  002390  ECC2  F022         	call	_I2C_sendData
  3057                           
  3058                           ;main.c: 301: }
  3059  002394  D004               	goto	l376
  3060  002396                     l375:
  3061                           
  3062                           ;main.c: 302: else{
  3063                           ;main.c: 303: I2C_sendData(B_dispense);
  3064  002396  0100               	movlb	0	; () banked
  3065  002398  51FC               	movf	_B_dispense& (0+255),w,b
  3066  00239A  ECC2  F022         	call	_I2C_sendData
  3067  00239E                     l376:
  3068  00239E  0100               	movlb	0	; () banked
  3069  0023A0  BFAB               	btfsc	(_B_counter+1)& (0+255),7,b
  3070  0023A2  D005               	goto	u4240
  3071  0023A4  51AB               	movf	(_B_counter+1)& (0+255),w,b
  3072  0023A6  E1C9               	bnz	l5378
  3073  0023A8  05AA               	decf	_B_counter& (0+255),w,b
  3074  0023AA  B0D8               	btfsc	status,0,c
  3075  0023AC  D7C6               	goto	l373
  3076  0023AE                     u4240:
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 304: }
  3080                           ;main.c: 305: }
  3081                           ;main.c: 306: }
  3082                           ;main.c: 310: initLCD();
  3083                           
  3084                           ; BSR set to: 0
  3085  0023AE  EC84  F021         	call	_initLCD	;wreg free
  3086                           
  3087                           ;main.c: 312: printf("bolts dispensed:%d",B_array[compartment_pos]);
  3088  0023B2  0E67               	movlw	low STR_24
  3089  0023B4  0100               	movlb	0	; () banked
  3090  0023B6  6FD6               	movwf	printf@f& (0+255),b
  3091  0023B8  0EFD               	movlw	high STR_24
  3092  0023BA  6FD7               	movwf	(printf@f+1)& (0+255),b
  3093  0023BC  90D8               	bcf	status,0,c
  3094  0023BE  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3095  0023C0  6ED9               	movwf	fsr2l,c
  3096  0023C2  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3097  0023C4  6EDA               	movwf	fsr2h,c
  3098  0023C6  0E30               	movlw	low _B_array
  3099  0023C8  26D9               	addwf	fsr2l,f,c
  3100  0023CA  0E01               	movlw	high _B_array
  3101  0023CC  22DA               	addwfc	fsr2h,f,c
  3102  0023CE  CFDE F0D8          	movff	postinc2,?_printf+2
  3103  0023D2  CFDD F0D9          	movff	postdec2,?_printf+3
  3104  0023D6  ECDA  F015         	call	_printf	;wreg free
  3105                           
  3106                           ;main.c: 313: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3107  0023DA  0E33               	movlw	51
  3108  0023DC  0100               	movlb	0	; () banked
  3109  0023DE  6FED               	movwf	(??_main+1)& (0+255),b
  3110  0023E0  0EBB               	movlw	187
  3111  0023E2  6FEC               	movwf	??_main& (0+255),b
  3112  0023E4  0EDF               	movlw	223
  3113  0023E6                     u5167:
  3114  0023E6  2EE8               	decfsz	wreg,f,c
  3115  0023E8  D7FE               	bra	u5167
  3116  0023EA  2FEC               	decfsz	??_main& (0+255),f,b
  3117  0023EC  D7FC               	bra	u5167
  3118  0023EE  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3119  0023F0  D7FA               	bra	u5167
  3120  0023F2  D000               	nop2	
  3121                           
  3122                           ;main.c: 314: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3123  0023F4  0E99               	movlw	153
  3124  0023F6  0100               	movlb	0	; () banked
  3125  0023F8  6FED               	movwf	(??_main+1)& (0+255),b
  3126  0023FA  0E31               	movlw	49
  3127  0023FC  6FEC               	movwf	??_main& (0+255),b
  3128  0023FE  0EA2               	movlw	162
  3129  002400                     u5177:
  3130  002400  2EE8               	decfsz	wreg,f,c
  3131  002402  D7FE               	bra	u5177
  3132  002404  2FEC               	decfsz	??_main& (0+255),f,b
  3133  002406  D7FC               	bra	u5177
  3134  002408  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3135  00240A  D7FA               	bra	u5177
  3136  00240C  F000               	nop	
  3137                           
  3138                           ;main.c: 315: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3139  00240E  0E80               	movlw	128
  3140  002410  EC27  F023         	call	_lcdInst
  3141  002414  0E41               	movlw	65
  3142  002416  0100               	movlb	0	; () banked
  3143  002418  6FEC               	movwf	??_main& (0+255),b
  3144  00241A  0EEE               	movlw	238
  3145  00241C                     u5187:
  3146  00241C  2EE8               	decfsz	wreg,f,c
  3147  00241E  D7FE               	bra	u5187
  3148  002420  2FEC               	decfsz	??_main& (0+255),f,b
  3149  002422  D7FC               	bra	u5187
  3150  002424  F000               	nop	
  3151                           
  3152                           ;main.c: 316: B_counter = 0;
  3153  002426  0E00               	movlw	0
  3154  002428  0100               	movlb	0	; () banked
  3155  00242A  6FAB               	movwf	(_B_counter+1)& (0+255),b
  3156  00242C  0E00               	movlw	0
  3157  00242E  6FAA               	movwf	_B_counter& (0+255),b
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;main.c: 325: initLCD();
  3161  002430  EC84  F021         	call	_initLCD	;wreg free
  3162                           
  3163                           ;main.c: 327: printf("N_counter:%d",N_counter);
  3164  002434  0EFF               	movlw	low STR_25
  3165  002436  0100               	movlb	0	; () banked
  3166  002438  6FD6               	movwf	printf@f& (0+255),b
  3167  00243A  0EFE               	movlw	high STR_25
  3168  00243C  6FD7               	movwf	(printf@f+1)& (0+255),b
  3169  00243E  C0A6  F0D8         	movff	_N_counter,?_printf+2
  3170  002442  C0A7  F0D9         	movff	_N_counter+1,?_printf+3
  3171  002446  ECDA  F015         	call	_printf	;wreg free
  3172                           
  3173                           ;main.c: 328: N_counter = N_array[compartment_pos];
  3174  00244A  90D8               	bcf	status,0,c
  3175  00244C  0100               	movlb	0	; () banked
  3176  00244E  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3177  002450  6ED9               	movwf	fsr2l,c
  3178  002452  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3179  002454  6EDA               	movwf	fsr2h,c
  3180  002456  0E10               	movlw	low _N_array
  3181  002458  26D9               	addwf	fsr2l,f,c
  3182  00245A  0E01               	movlw	high _N_array
  3183  00245C  22DA               	addwfc	fsr2h,f,c
  3184  00245E  CFDE F0A6          	movff	postinc2,_N_counter
  3185  002462  CFDD F0A7          	movff	postdec2,_N_counter+1
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 329: if(N_counter != 0){
  3189  002466  51A6               	movf	_N_counter& (0+255),w,b
  3190  002468  11A7               	iorwf	(_N_counter+1)& (0+255),w,b
  3191  00246A  B4D8               	btfsc	status,2,c
  3192  00246C  D03A               	goto	l383
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;main.c: 330: I2C_sendData(motorStart_1);
  3196  00246E  51F7               	movf	_motorStart_1& (0+255),w,b
  3197  002470  ECC2  F022         	call	_I2C_sendData
  3198                           
  3199                           ;main.c: 331: I2C_sendData(N_dispense);
  3200  002474  0100               	movlb	0	; () banked
  3201  002476  51FB               	movf	_N_dispense& (0+255),w,b
  3202  002478  ECC2  F022         	call	_I2C_sendData
  3203                           
  3204                           ;main.c: 332: }
  3205                           ;main.c: 334: while(N_counter > 0){
  3206  00247C  D032               	goto	l383
  3207  00247E                     l5420:
  3208                           
  3209                           ;main.c: 337: I2C_Master_Start();
  3210  00247E  EC75  F023         	call	_I2C_Master_Start	;wreg free
  3211                           
  3212                           ;main.c: 338: I2C_Master_Write(0b00010001);
  3213  002482  0E00               	movlw	0
  3214  002484  0100               	movlb	0	; () banked
  3215  002486  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3216  002488  0E11               	movlw	17
  3217  00248A  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3218  00248C  EC67  F023         	call	_I2C_Master_Write	;wreg free
  3219                           
  3220                           ;main.c: 339: nuts_data = I2C_Master_Read(1);
  3221  002490  0E01               	movlw	1
  3222  002492  EC99  F022         	call	_I2C_Master_Read
  3223  002496  0100               	movlb	0	; () banked
  3224  002498  6FC0               	movwf	_nuts_data& (0+255),b
  3225                           
  3226                           ;main.c: 340: I2C_Master_Stop();
  3227  00249A  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  3228                           
  3229                           ;main.c: 341: if (nuts_data == '3'){
  3230  00249E  0E33               	movlw	51
  3231  0024A0  0100               	movlb	0	; () banked
  3232  0024A2  19C0               	xorwf	_nuts_data& (0+255),w,b
  3233  0024A4  A4D8               	btfss	status,2,c
  3234  0024A6  D01D               	goto	l383
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 342: N_counter --;
  3238  0024A8  07A6               	decf	_N_counter& (0+255),f,b
  3239  0024AA  A0D8               	btfss	status,0,c
  3240  0024AC  07A7               	decf	(_N_counter+1)& (0+255),f,b
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;main.c: 343: initLCD();
  3244  0024AE  EC84  F021         	call	_initLCD	;wreg free
  3245                           
  3246                           ;main.c: 344: printf("N_count:%d", N_counter);
  3247  0024B2  0E60               	movlw	low STR_26
  3248  0024B4  0100               	movlb	0	; () banked
  3249  0024B6  6FD6               	movwf	printf@f& (0+255),b
  3250  0024B8  0EFF               	movlw	high STR_26
  3251  0024BA  6FD7               	movwf	(printf@f+1)& (0+255),b
  3252  0024BC  C0A6  F0D8         	movff	_N_counter,?_printf+2
  3253  0024C0  C0A7  F0D9         	movff	_N_counter+1,?_printf+3
  3254  0024C4  ECDA  F015         	call	_printf	;wreg free
  3255                           
  3256                           ;main.c: 346: if (N_counter ==0){
  3257  0024C8  0100               	movlb	0	; () banked
  3258  0024CA  51A6               	movf	_N_counter& (0+255),w,b
  3259  0024CC  11A7               	iorwf	(_N_counter+1)& (0+255),w,b
  3260  0024CE  A4D8               	btfss	status,2,c
  3261  0024D0  D004               	goto	l382
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 347: I2C_sendData(motorStop_1);
  3265  0024D2  51F6               	movf	_motorStop_1& (0+255),w,b
  3266  0024D4  ECC2  F022         	call	_I2C_sendData
  3267                           
  3268                           ;main.c: 348: }
  3269  0024D8  D004               	goto	l383
  3270  0024DA                     l382:
  3271                           
  3272                           ;main.c: 349: else{
  3273                           ;main.c: 350: I2C_sendData(N_dispense);
  3274  0024DA  0100               	movlb	0	; () banked
  3275  0024DC  51FB               	movf	_N_dispense& (0+255),w,b
  3276  0024DE  ECC2  F022         	call	_I2C_sendData
  3277  0024E2                     l383:
  3278  0024E2  0100               	movlb	0	; () banked
  3279  0024E4  BFA7               	btfsc	(_N_counter+1)& (0+255),7,b
  3280  0024E6  D005               	goto	u4280
  3281  0024E8  51A7               	movf	(_N_counter+1)& (0+255),w,b
  3282  0024EA  E1C9               	bnz	l5420
  3283  0024EC  05A6               	decf	_N_counter& (0+255),w,b
  3284  0024EE  B0D8               	btfsc	status,0,c
  3285  0024F0  D7C6               	goto	l380
  3286  0024F2                     u4280:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 351: }
  3290                           ;main.c: 352: }
  3291                           ;main.c: 353: }
  3292                           ;main.c: 357: initLCD();
  3293                           
  3294                           ; BSR set to: 0
  3295  0024F2  EC84  F021         	call	_initLCD	;wreg free
  3296                           
  3297                           ;main.c: 359: printf("nuts dispensed:%d",N_array[compartment_pos]);
  3298  0024F6  0E8D               	movlw	low STR_27
  3299  0024F8  0100               	movlb	0	; () banked
  3300  0024FA  6FD6               	movwf	printf@f& (0+255),b
  3301  0024FC  0EFD               	movlw	high STR_27
  3302  0024FE  6FD7               	movwf	(printf@f+1)& (0+255),b
  3303  002500  90D8               	bcf	status,0,c
  3304  002502  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3305  002504  6ED9               	movwf	fsr2l,c
  3306  002506  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3307  002508  6EDA               	movwf	fsr2h,c
  3308  00250A  0E10               	movlw	low _N_array
  3309  00250C  26D9               	addwf	fsr2l,f,c
  3310  00250E  0E01               	movlw	high _N_array
  3311  002510  22DA               	addwfc	fsr2h,f,c
  3312  002512  CFDE F0D8          	movff	postinc2,?_printf+2
  3313  002516  CFDD F0D9          	movff	postdec2,?_printf+3
  3314  00251A  ECDA  F015         	call	_printf	;wreg free
  3315                           
  3316                           ;main.c: 360: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3317  00251E  0E33               	movlw	51
  3318  002520  0100               	movlb	0	; () banked
  3319  002522  6FED               	movwf	(??_main+1)& (0+255),b
  3320  002524  0EBB               	movlw	187
  3321  002526  6FEC               	movwf	??_main& (0+255),b
  3322  002528  0EDF               	movlw	223
  3323  00252A                     u5197:
  3324  00252A  2EE8               	decfsz	wreg,f,c
  3325  00252C  D7FE               	bra	u5197
  3326  00252E  2FEC               	decfsz	??_main& (0+255),f,b
  3327  002530  D7FC               	bra	u5197
  3328  002532  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3329  002534  D7FA               	bra	u5197
  3330  002536  D000               	nop2	
  3331                           
  3332                           ;main.c: 361: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3333  002538  0E99               	movlw	153
  3334  00253A  0100               	movlb	0	; () banked
  3335  00253C  6FED               	movwf	(??_main+1)& (0+255),b
  3336  00253E  0E31               	movlw	49
  3337  002540  6FEC               	movwf	??_main& (0+255),b
  3338  002542  0EA2               	movlw	162
  3339  002544                     u5207:
  3340  002544  2EE8               	decfsz	wreg,f,c
  3341  002546  D7FE               	bra	u5207
  3342  002548  2FEC               	decfsz	??_main& (0+255),f,b
  3343  00254A  D7FC               	bra	u5207
  3344  00254C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3345  00254E  D7FA               	bra	u5207
  3346  002550  F000               	nop	
  3347                           
  3348                           ;main.c: 362: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3349  002552  0E80               	movlw	128
  3350  002554  EC27  F023         	call	_lcdInst
  3351  002558  0E41               	movlw	65
  3352  00255A  0100               	movlb	0	; () banked
  3353  00255C  6FEC               	movwf	??_main& (0+255),b
  3354  00255E  0EEE               	movlw	238
  3355  002560                     u5217:
  3356  002560  2EE8               	decfsz	wreg,f,c
  3357  002562  D7FE               	bra	u5217
  3358  002564  2FEC               	decfsz	??_main& (0+255),f,b
  3359  002566  D7FC               	bra	u5217
  3360  002568  F000               	nop	
  3361                           
  3362                           ;main.c: 363: N_counter = 0;
  3363  00256A  0E00               	movlw	0
  3364  00256C  0100               	movlb	0	; () banked
  3365  00256E  6FA7               	movwf	(_N_counter+1)& (0+255),b
  3366  002570  0E00               	movlw	0
  3367  002572  6FA6               	movwf	_N_counter& (0+255),b
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 373: initLCD();
  3371  002574  EC84  F021         	call	_initLCD	;wreg free
  3372                           
  3373                           ;main.c: 375: printf("S_counter:%d",S_counter);
  3374  002578  0E0C               	movlw	low STR_28
  3375  00257A  0100               	movlb	0	; () banked
  3376  00257C  6FD6               	movwf	printf@f& (0+255),b
  3377  00257E  0EFF               	movlw	high STR_28
  3378  002580  6FD7               	movwf	(printf@f+1)& (0+255),b
  3379  002582  C0A8  F0D8         	movff	_S_counter,?_printf+2
  3380  002586  C0A9  F0D9         	movff	_S_counter+1,?_printf+3
  3381  00258A  ECDA  F015         	call	_printf	;wreg free
  3382                           
  3383                           ;main.c: 376: S_counter = S_array[compartment_pos];
  3384  00258E  90D8               	bcf	status,0,c
  3385  002590  0100               	movlb	0	; () banked
  3386  002592  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3387  002594  6ED9               	movwf	fsr2l,c
  3388  002596  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3389  002598  6EDA               	movwf	fsr2h,c
  3390  00259A  0E20               	movlw	low _S_array
  3391  00259C  26D9               	addwf	fsr2l,f,c
  3392  00259E  0E01               	movlw	high _S_array
  3393  0025A0  22DA               	addwfc	fsr2h,f,c
  3394  0025A2  CFDE F0A8          	movff	postinc2,_S_counter
  3395  0025A6  CFDD F0A9          	movff	postdec2,_S_counter+1
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;main.c: 377: if(S_counter != 0){
  3399  0025AA  51A8               	movf	_S_counter& (0+255),w,b
  3400  0025AC  11A9               	iorwf	(_S_counter+1)& (0+255),w,b
  3401  0025AE  B4D8               	btfsc	status,2,c
  3402  0025B0  D03A               	goto	l390
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;main.c: 378: I2C_sendData(motorStart_2);
  3406  0025B2  51F5               	movf	_motorStart_2& (0+255),w,b
  3407  0025B4  ECC2  F022         	call	_I2C_sendData
  3408                           
  3409                           ;main.c: 379: I2C_sendData(S_dispense);
  3410  0025B8  0100               	movlb	0	; () banked
  3411  0025BA  51FA               	movf	_S_dispense& (0+255),w,b
  3412  0025BC  ECC2  F022         	call	_I2C_sendData
  3413                           
  3414                           ;main.c: 380: }
  3415                           ;main.c: 382: while(S_counter > 0){
  3416  0025C0  D032               	goto	l390
  3417  0025C2                     l5462:
  3418                           
  3419                           ;main.c: 385: I2C_Master_Start();
  3420  0025C2  EC75  F023         	call	_I2C_Master_Start	;wreg free
  3421                           
  3422                           ;main.c: 386: I2C_Master_Write(0b00010001);
  3423  0025C6  0E00               	movlw	0
  3424  0025C8  0100               	movlb	0	; () banked
  3425  0025CA  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3426  0025CC  0E11               	movlw	17
  3427  0025CE  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3428  0025D0  EC67  F023         	call	_I2C_Master_Write	;wreg free
  3429                           
  3430                           ;main.c: 387: nuts_data = I2C_Master_Read(1);
  3431  0025D4  0E01               	movlw	1
  3432  0025D6  EC99  F022         	call	_I2C_Master_Read
  3433  0025DA  0100               	movlb	0	; () banked
  3434  0025DC  6FC0               	movwf	_nuts_data& (0+255),b
  3435                           
  3436                           ;main.c: 388: I2C_Master_Stop();
  3437  0025DE  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  3438                           
  3439                           ;main.c: 389: if (nuts_data == '4'){
  3440  0025E2  0E34               	movlw	52
  3441  0025E4  0100               	movlb	0	; () banked
  3442  0025E6  19C0               	xorwf	_nuts_data& (0+255),w,b
  3443  0025E8  A4D8               	btfss	status,2,c
  3444  0025EA  D01D               	goto	l390
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;main.c: 390: S_counter --;
  3448  0025EC  07A8               	decf	_S_counter& (0+255),f,b
  3449  0025EE  A0D8               	btfss	status,0,c
  3450  0025F0  07A9               	decf	(_S_counter+1)& (0+255),f,b
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main.c: 391: initLCD();
  3454  0025F2  EC84  F021         	call	_initLCD	;wreg free
  3455                           
  3456                           ;main.c: 392: printf("S_count:%d", S_counter);
  3457  0025F6  0E6B               	movlw	low STR_29
  3458  0025F8  0100               	movlb	0	; () banked
  3459  0025FA  6FD6               	movwf	printf@f& (0+255),b
  3460  0025FC  0EFF               	movlw	high STR_29
  3461  0025FE  6FD7               	movwf	(printf@f+1)& (0+255),b
  3462  002600  C0A8  F0D8         	movff	_S_counter,?_printf+2
  3463  002604  C0A9  F0D9         	movff	_S_counter+1,?_printf+3
  3464  002608  ECDA  F015         	call	_printf	;wreg free
  3465                           
  3466                           ;main.c: 394: if (S_counter ==0){
  3467  00260C  0100               	movlb	0	; () banked
  3468  00260E  51A8               	movf	_S_counter& (0+255),w,b
  3469  002610  11A9               	iorwf	(_S_counter+1)& (0+255),w,b
  3470  002612  A4D8               	btfss	status,2,c
  3471  002614  D004               	goto	l389
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;main.c: 395: I2C_sendData(motorStop_2);
  3475  002616  51F4               	movf	_motorStop_2& (0+255),w,b
  3476  002618  ECC2  F022         	call	_I2C_sendData
  3477                           
  3478                           ;main.c: 396: }
  3479  00261C  D004               	goto	l390
  3480  00261E                     l389:
  3481                           
  3482                           ;main.c: 397: else{
  3483                           ;main.c: 398: I2C_sendData(S_dispense);
  3484  00261E  0100               	movlb	0	; () banked
  3485  002620  51FA               	movf	_S_dispense& (0+255),w,b
  3486  002622  ECC2  F022         	call	_I2C_sendData
  3487  002626                     l390:
  3488  002626  0100               	movlb	0	; () banked
  3489  002628  BFA9               	btfsc	(_S_counter+1)& (0+255),7,b
  3490  00262A  D005               	goto	u4320
  3491  00262C  51A9               	movf	(_S_counter+1)& (0+255),w,b
  3492  00262E  E1C9               	bnz	l5462
  3493  002630  05A8               	decf	_S_counter& (0+255),w,b
  3494  002632  B0D8               	btfsc	status,0,c
  3495  002634  D7C6               	goto	l387
  3496  002636                     u4320:
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;main.c: 399: }
  3500                           ;main.c: 400: }
  3501                           ;main.c: 401: }
  3502                           ;main.c: 405: initLCD();
  3503                           
  3504                           ; BSR set to: 0
  3505  002636  EC84  F021         	call	_initLCD	;wreg free
  3506                           
  3507                           ;main.c: 407: printf("spacers dispensed:%d",S_array[compartment_pos]);
  3508  00263A  0E2A               	movlw	low STR_30
  3509  00263C  0100               	movlb	0	; () banked
  3510  00263E  6FD6               	movwf	printf@f& (0+255),b
  3511  002640  0EFD               	movlw	high STR_30
  3512  002642  6FD7               	movwf	(printf@f+1)& (0+255),b
  3513  002644  90D8               	bcf	status,0,c
  3514  002646  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3515  002648  6ED9               	movwf	fsr2l,c
  3516  00264A  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3517  00264C  6EDA               	movwf	fsr2h,c
  3518  00264E  0E20               	movlw	low _S_array
  3519  002650  26D9               	addwf	fsr2l,f,c
  3520  002652  0E01               	movlw	high _S_array
  3521  002654  22DA               	addwfc	fsr2h,f,c
  3522  002656  CFDE F0D8          	movff	postinc2,?_printf+2
  3523  00265A  CFDD F0D9          	movff	postdec2,?_printf+3
  3524  00265E  ECDA  F015         	call	_printf	;wreg free
  3525                           
  3526                           ;main.c: 408: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3527  002662  0E33               	movlw	51
  3528  002664  0100               	movlb	0	; () banked
  3529  002666  6FED               	movwf	(??_main+1)& (0+255),b
  3530  002668  0EBB               	movlw	187
  3531  00266A  6FEC               	movwf	??_main& (0+255),b
  3532  00266C  0EDF               	movlw	223
  3533  00266E                     u5227:
  3534  00266E  2EE8               	decfsz	wreg,f,c
  3535  002670  D7FE               	bra	u5227
  3536  002672  2FEC               	decfsz	??_main& (0+255),f,b
  3537  002674  D7FC               	bra	u5227
  3538  002676  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3539  002678  D7FA               	bra	u5227
  3540  00267A  D000               	nop2	
  3541                           
  3542                           ;main.c: 409: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3543  00267C  0E99               	movlw	153
  3544  00267E  0100               	movlb	0	; () banked
  3545  002680  6FED               	movwf	(??_main+1)& (0+255),b
  3546  002682  0E31               	movlw	49
  3547  002684  6FEC               	movwf	??_main& (0+255),b
  3548  002686  0EA2               	movlw	162
  3549  002688                     u5237:
  3550  002688  2EE8               	decfsz	wreg,f,c
  3551  00268A  D7FE               	bra	u5237
  3552  00268C  2FEC               	decfsz	??_main& (0+255),f,b
  3553  00268E  D7FC               	bra	u5237
  3554  002690  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3555  002692  D7FA               	bra	u5237
  3556  002694  F000               	nop	
  3557                           
  3558                           ;main.c: 410: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3559  002696  0E80               	movlw	128
  3560  002698  EC27  F023         	call	_lcdInst
  3561  00269C  0E41               	movlw	65
  3562  00269E  0100               	movlb	0	; () banked
  3563  0026A0  6FEC               	movwf	??_main& (0+255),b
  3564  0026A2  0EEE               	movlw	238
  3565  0026A4                     u5247:
  3566  0026A4  2EE8               	decfsz	wreg,f,c
  3567  0026A6  D7FE               	bra	u5247
  3568  0026A8  2FEC               	decfsz	??_main& (0+255),f,b
  3569  0026AA  D7FC               	bra	u5247
  3570  0026AC  F000               	nop	
  3571                           
  3572                           ;main.c: 411: S_counter = 0;
  3573  0026AE  0E00               	movlw	0
  3574  0026B0  0100               	movlb	0	; () banked
  3575  0026B2  6FA9               	movwf	(_S_counter+1)& (0+255),b
  3576  0026B4  0E00               	movlw	0
  3577  0026B6  6FA8               	movwf	_S_counter& (0+255),b
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;main.c: 421: initLCD();
  3581  0026B8  EC84  F021         	call	_initLCD	;wreg free
  3582                           
  3583                           ;main.c: 422: printf("%d",W_counter);
  3584  0026BC  0E4E               	movlw	low (STR_54+12)
  3585  0026BE  0100               	movlb	0	; () banked
  3586  0026C0  6FD6               	movwf	printf@f& (0+255),b
  3587  0026C2  0EFE               	movlw	high (STR_54+12)
  3588  0026C4  6FD7               	movwf	(printf@f+1)& (0+255),b
  3589  0026C6  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3590  0026CA  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3591  0026CE  ECDA  F015         	call	_printf	;wreg free
  3592                           
  3593                           ;main.c: 423: _delay((unsigned long)((50)*(40000000/4000.0)));
  3594  0026D2  0E03               	movlw	3
  3595  0026D4  0100               	movlb	0	; () banked
  3596  0026D6  6FED               	movwf	(??_main+1)& (0+255),b
  3597  0026D8  0E8A               	movlw	138
  3598  0026DA  6FEC               	movwf	??_main& (0+255),b
  3599  0026DC  0E55               	movlw	85
  3600  0026DE                     u5257:
  3601  0026DE  2EE8               	decfsz	wreg,f,c
  3602  0026E0  D7FE               	bra	u5257
  3603  0026E2  2FEC               	decfsz	??_main& (0+255),f,b
  3604  0026E4  D7FC               	bra	u5257
  3605  0026E6  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3606  0026E8  D7FA               	bra	u5257
  3607  0026EA  D000               	nop2	
  3608                           
  3609                           ;main.c: 424: I2C_sendData(motorStart_3);
  3610  0026EC  0100               	movlb	0	; () banked
  3611  0026EE  51F3               	movf	_motorStart_3& (0+255),w,b
  3612  0026F0  ECC2  F022         	call	_I2C_sendData
  3613  0026F4                     l5502:
  3614                           
  3615                           ;main.c: 428: if (W_counter == W_array[compartment_pos]){
  3616  0026F4  90D8               	bcf	status,0,c
  3617  0026F6  0100               	movlb	0	; () banked
  3618  0026F8  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3619  0026FA  6ED9               	movwf	fsr2l,c
  3620  0026FC  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3621  0026FE  6EDA               	movwf	fsr2h,c
  3622  002700  0E00               	movlw	low _W_array
  3623  002702  26D9               	addwf	fsr2l,f,c
  3624  002704  0E01               	movlw	high _W_array
  3625  002706  22DA               	addwfc	fsr2h,f,c
  3626  002708  51A4               	movf	_W_counter& (0+255),w,b
  3627  00270A  18DE               	xorwf	postinc2,w,c
  3628  00270C  E108               	bnz	l5506
  3629  00270E  51A5               	movf	(_W_counter+1)& (0+255),w,b
  3630  002710  18DE               	xorwf	postinc2,w,c
  3631  002712  A4D8               	btfss	status,2,c
  3632  002714  D004               	goto	l393
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;main.c: 429: I2C_sendData(motorStop_3);
  3636  002716  51F2               	movf	_motorStop_3& (0+255),w,b
  3637  002718  ECC2  F022         	call	_I2C_sendData
  3638                           
  3639                           ;main.c: 430: break;
  3640  00271C  D027               	goto	l394
  3641  00271E                     l393:
  3642  00271E                     l5506:
  3643                           
  3644                           ;main.c: 431: }
  3645                           ;main.c: 432: if (readADC(3)<=250 ){
  3646  00271E  0E03               	movlw	3
  3647  002720  EC7C  F022         	call	_readADC
  3648  002724  0100               	movlb	0	; () banked
  3649  002726  51C9               	movf	(?_readADC+1)& (0+255),w,b
  3650  002728  E1E5               	bnz	l5502
  3651  00272A  0EFB               	movlw	251
  3652  00272C  5DC8               	subwf	?_readADC& (0+255),w,b
  3653  00272E  B0D8               	btfsc	status,0,c
  3654  002730  D7E1               	goto	l392
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;main.c: 434: W_counter ++;
  3658  002732  4BA4               	infsnz	_W_counter& (0+255),f,b
  3659  002734  2BA5               	incf	(_W_counter+1)& (0+255),f,b
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;main.c: 435: initLCD();
  3663  002736  EC84  F021         	call	_initLCD	;wreg free
  3664                           
  3665                           ;main.c: 436: printf("%d", W_counter);
  3666  00273A  0E4E               	movlw	low (STR_54+12)
  3667  00273C  0100               	movlb	0	; () banked
  3668  00273E  6FD6               	movwf	printf@f& (0+255),b
  3669  002740  0EFE               	movlw	high (STR_54+12)
  3670  002742  6FD7               	movwf	(printf@f+1)& (0+255),b
  3671  002744  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3672  002748  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3673  00274C  ECDA  F015         	call	_printf	;wreg free
  3674                           
  3675                           ;main.c: 437: _delay((unsigned long)((50)*(40000000/4000.0)));
  3676  002750  0E03               	movlw	3
  3677  002752  0100               	movlb	0	; () banked
  3678  002754  6FED               	movwf	(??_main+1)& (0+255),b
  3679  002756  0E8A               	movlw	138
  3680  002758  6FEC               	movwf	??_main& (0+255),b
  3681  00275A  0E55               	movlw	85
  3682  00275C                     u5267:
  3683  00275C  2EE8               	decfsz	wreg,f,c
  3684  00275E  D7FE               	bra	u5267
  3685  002760  2FEC               	decfsz	??_main& (0+255),f,b
  3686  002762  D7FC               	bra	u5267
  3687  002764  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3688  002766  D7FA               	bra	u5267
  3689  002768  D000               	nop2	
  3690  00276A  D7C4               	goto	l392
  3691  00276C                     l394:
  3692                           
  3693                           ;main.c: 438: }
  3694                           ;main.c: 440: }
  3695                           ;main.c: 442: initLCD();
  3696  00276C  EC84  F021         	call	_initLCD	;wreg free
  3697                           
  3698                           ;main.c: 444: printf("Washer dispensed:%d",W_counter);
  3699  002770  0E3F               	movlw	low STR_33
  3700  002772  0100               	movlb	0	; () banked
  3701  002774  6FD6               	movwf	printf@f& (0+255),b
  3702  002776  0EFD               	movlw	high STR_33
  3703  002778  6FD7               	movwf	(printf@f+1)& (0+255),b
  3704  00277A  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3705  00277E  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3706  002782  ECDA  F015         	call	_printf	;wreg free
  3707                           
  3708                           ;main.c: 445: _delay((unsigned long)((200)*(40000000/4000.0)));
  3709  002786  0E0B               	movlw	11
  3710  002788  0100               	movlb	0	; () banked
  3711  00278A  6FED               	movwf	(??_main+1)& (0+255),b
  3712  00278C  0E26               	movlw	38
  3713  00278E  6FEC               	movwf	??_main& (0+255),b
  3714  002790  0E5D               	movlw	93
  3715  002792                     u5277:
  3716  002792  2EE8               	decfsz	wreg,f,c
  3717  002794  D7FE               	bra	u5277
  3718  002796  2FEC               	decfsz	??_main& (0+255),f,b
  3719  002798  D7FC               	bra	u5277
  3720  00279A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3721  00279C  D7FA               	bra	u5277
  3722  00279E  D000               	nop2	
  3723                           
  3724                           ;main.c: 446: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3725  0027A0  0E80               	movlw	128
  3726  0027A2  EC27  F023         	call	_lcdInst
  3727  0027A6  0E41               	movlw	65
  3728  0027A8  0100               	movlb	0	; () banked
  3729  0027AA  6FEC               	movwf	??_main& (0+255),b
  3730  0027AC  0EEE               	movlw	238
  3731  0027AE                     u5287:
  3732  0027AE  2EE8               	decfsz	wreg,f,c
  3733  0027B0  D7FE               	bra	u5287
  3734  0027B2  2FEC               	decfsz	??_main& (0+255),f,b
  3735  0027B4  D7FC               	bra	u5287
  3736  0027B6  F000               	nop	
  3737                           
  3738                           ;main.c: 447: W_counter = 0;
  3739  0027B8  0E00               	movlw	0
  3740  0027BA  0100               	movlb	0	; () banked
  3741  0027BC  6FA5               	movwf	(_W_counter+1)& (0+255),b
  3742  0027BE  0E00               	movlw	0
  3743  0027C0  6FA4               	movwf	_W_counter& (0+255),b
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;main.c: 452: B_counter = 0;
  3747  0027C2  0E00               	movlw	0
  3748  0027C4  6FAB               	movwf	(_B_counter+1)& (0+255),b
  3749  0027C6  0E00               	movlw	0
  3750  0027C8  6FAA               	movwf	_B_counter& (0+255),b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;main.c: 453: N_counter = 0;
  3754  0027CA  0E00               	movlw	0
  3755  0027CC  6FA7               	movwf	(_N_counter+1)& (0+255),b
  3756  0027CE  0E00               	movlw	0
  3757  0027D0  6FA6               	movwf	_N_counter& (0+255),b
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 454: S_counter = 0;
  3761  0027D2  0E00               	movlw	0
  3762  0027D4  6FA9               	movwf	(_S_counter+1)& (0+255),b
  3763  0027D6  0E00               	movlw	0
  3764  0027D8  6FA8               	movwf	_S_counter& (0+255),b
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;main.c: 455: W_counter = 0;
  3768  0027DA  0E00               	movlw	0
  3769  0027DC  6FA5               	movwf	(_W_counter+1)& (0+255),b
  3770  0027DE  0E00               	movlw	0
  3771  0027E0  6FA4               	movwf	_W_counter& (0+255),b
  3772  0027E2                     l370:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;main.c: 457: }
  3776                           ;main.c: 461: printf("done C%d",compartment_pos);
  3777                           
  3778                           ; BSR set to: 0
  3779  0027E2  0E9B               	movlw	low STR_34
  3780  0027E4  6FD6               	movwf	printf@f& (0+255),b
  3781  0027E6  0EFF               	movlw	high STR_34
  3782  0027E8  6FD7               	movwf	(printf@f+1)& (0+255),b
  3783  0027EA  C0B0  F0D8         	movff	_compartment_pos,?_printf+2
  3784  0027EE  C0B1  F0D9         	movff	_compartment_pos+1,?_printf+3
  3785  0027F2  ECDA  F015         	call	_printf	;wreg free
  3786                           
  3787                           ;main.c: 462: I2C_sendData(rotate_1compartment);
  3788  0027F6  0100               	movlb	0	; () banked
  3789  0027F8  51FD               	movf	_rotate_1compartment& (0+255),w,b
  3790  0027FA  ECC2  F022         	call	_I2C_sendData
  3791                           
  3792                           ;main.c: 463: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3793  0027FE  0E99               	movlw	153
  3794  002800  0100               	movlb	0	; () banked
  3795  002802  6FED               	movwf	(??_main+1)& (0+255),b
  3796  002804  0E31               	movlw	49
  3797  002806  6FEC               	movwf	??_main& (0+255),b
  3798  002808  0EA2               	movlw	162
  3799  00280A                     u5297:
  3800  00280A  2EE8               	decfsz	wreg,f,c
  3801  00280C  D7FE               	bra	u5297
  3802  00280E  2FEC               	decfsz	??_main& (0+255),f,b
  3803  002810  D7FC               	bra	u5297
  3804  002812  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3805  002814  D7FA               	bra	u5297
  3806  002816  F000               	nop	
  3807                           
  3808                           ;main.c: 464: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3809  002818  0E66               	movlw	102
  3810  00281A  0100               	movlb	0	; () banked
  3811  00281C  6FED               	movwf	(??_main+1)& (0+255),b
  3812  00281E  0E76               	movlw	118
  3813  002820  6FEC               	movwf	??_main& (0+255),b
  3814  002822  0EC1               	movlw	193
  3815  002824                     u5307:
  3816  002824  2EE8               	decfsz	wreg,f,c
  3817  002826  D7FE               	bra	u5307
  3818  002828  2FEC               	decfsz	??_main& (0+255),f,b
  3819  00282A  D7FC               	bra	u5307
  3820  00282C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3821  00282E  D7FA               	bra	u5307
  3822                           
  3823                           ;main.c: 465: compartment_pos ++;
  3824  002830  0100               	movlb	0	; () banked
  3825  002832  4BB0               	infsnz	_compartment_pos& (0+255),f,b
  3826  002834  2BB1               	incf	(_compartment_pos+1)& (0+255),f,b
  3827                           
  3828                           ; BSR set to: 0
  3829  002836  4BBE               	infsnz	_i& (0+255),f,b
  3830  002838  2BBF               	incf	(_i+1)& (0+255),f,b
  3831                           
  3832                           ; BSR set to: 0
  3833  00283A  51BF               	movf	(_i+1)& (0+255),w,b
  3834  00283C  E101               	bnz	l5550
  3835  00283E  D51B               	goto	L1
  3836  002840                     u4350:
  3837  002840                     l5550:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;main.c: 466: }
  3841                           ;main.c: 474: I2C_sendData(servo_ramp);
  3842  002840  51F1               	movf	_servo_ramp& (0+255),w,b
  3843  002842  ECC2  F022         	call	_I2C_sendData
  3844                           
  3845                           ;main.c: 481: initLCD();
  3846  002846  EC84  F021         	call	_initLCD	;wreg free
  3847                           
  3848                           ;main.c: 482: N_spacingTime = 0;
  3849  00284A  0E00               	movlw	0
  3850  00284C  0100               	movlb	0	; () banked
  3851  00284E  6F9B               	movwf	(_N_spacingTime+1)& (0+255),b
  3852  002850  0E00               	movlw	0
  3853  002852  6F9A               	movwf	_N_spacingTime& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;main.c: 483: initLCD();
  3857  002854  EC84  F021         	call	_initLCD	;wreg free
  3858                           
  3859                           ;main.c: 484: printf("%d", N_remain);
  3860  002858  0E4E               	movlw	low (STR_54+12)
  3861  00285A  0100               	movlb	0	; () banked
  3862  00285C  6FD6               	movwf	printf@f& (0+255),b
  3863  00285E  0EFE               	movlw	high (STR_54+12)
  3864  002860  6FD7               	movwf	(printf@f+1)& (0+255),b
  3865  002862  C0A0  F0D8         	movff	_N_remain,?_printf+2
  3866  002866  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  3867  00286A  ECDA  F015         	call	_printf	;wreg free
  3868                           
  3869                           ;main.c: 485: I2C_sendData(motorStart_1);
  3870  00286E  0100               	movlb	0	; () banked
  3871  002870  51F7               	movf	_motorStart_1& (0+255),w,b
  3872  002872  ECC2  F022         	call	_I2C_sendData
  3873  002876                     
  3874                           ;main.c: 488: if (N_spacingTime >= 30000){
  3875  002876  0100               	movlb	0	; () banked
  3876  002878  BF9B               	btfsc	(_N_spacingTime+1)& (0+255),7,b
  3877  00287A  D00A               	goto	l398
  3878  00287C  0E30               	movlw	48
  3879  00287E  5D9A               	subwf	_N_spacingTime& (0+255),w,b
  3880  002880  0E75               	movlw	117
  3881  002882  599B               	subwfb	(_N_spacingTime+1)& (0+255),w,b
  3882  002884  A0D8               	btfss	status,0,c
  3883  002886  D004               	goto	l398
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;main.c: 489: I2C_sendData(motorStop_1);
  3887  002888  51F6               	movf	_motorStop_1& (0+255),w,b
  3888  00288A  ECC2  F022         	call	_I2C_sendData
  3889                           
  3890                           ;main.c: 490: break;
  3891  00288E  D04E               	goto	l399
  3892  002890                     l398:
  3893                           
  3894                           ;main.c: 494: else{
  3895                           ;main.c: 495: I2C_sendData(S_dispense);
  3896  002890  0100               	movlb	0	; () banked
  3897  002892  51FA               	movf	_S_dispense& (0+255),w,b
  3898  002894  ECC2  F022         	call	_I2C_sendData
  3899                           
  3900                           ;main.c: 497: I2C_Master_Start();
  3901  002898  EC75  F023         	call	_I2C_Master_Start	;wreg free
  3902                           
  3903                           ;main.c: 498: I2C_Master_Write(0b00010001);
  3904  00289C  0E00               	movlw	0
  3905  00289E  0100               	movlb	0	; () banked
  3906  0028A0  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3907  0028A2  0E11               	movlw	17
  3908  0028A4  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3909  0028A6  EC67  F023         	call	_I2C_Master_Write	;wreg free
  3910                           
  3911                           ;main.c: 499: nuts_data = I2C_Master_Read(1);
  3912  0028AA  0E01               	movlw	1
  3913  0028AC  EC99  F022         	call	_I2C_Master_Read
  3914  0028B0  0100               	movlb	0	; () banked
  3915  0028B2  6FC0               	movwf	_nuts_data& (0+255),b
  3916                           
  3917                           ;main.c: 500: I2C_Master_Stop();
  3918  0028B4  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  3919                           
  3920                           ;main.c: 501: if (nuts_data == '3'){
  3921  0028B8  0E33               	movlw	51
  3922  0028BA  0100               	movlb	0	; () banked
  3923  0028BC  19C0               	xorwf	_nuts_data& (0+255),w,b
  3924  0028BE  A4D8               	btfss	status,2,c
  3925  0028C0  D006               	goto	l401
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;main.c: 502: N_remain++;
  3929  0028C2  4BA0               	infsnz	_N_remain& (0+255),f,b
  3930  0028C4  2BA1               	incf	(_N_remain+1)& (0+255),f,b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;main.c: 503: N_spacingTime = 0;
  3934  0028C6  0E00               	movlw	0
  3935  0028C8  6F9B               	movwf	(_N_spacingTime+1)& (0+255),b
  3936  0028CA  0E00               	movlw	0
  3937  0028CC  6F9A               	movwf	_N_spacingTime& (0+255),b
  3938  0028CE                     l401:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;main.c: 504: }
  3942                           ;main.c: 505: N_spacingTime+=200;
  3943                           
  3944                           ; BSR set to: 0
  3945  0028CE  0EC8               	movlw	200
  3946  0028D0  279A               	addwf	_N_spacingTime& (0+255),f,b
  3947  0028D2  0E00               	movlw	0
  3948  0028D4  239B               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  3949                           
  3950                           ;main.c: 509: }
  3951                           ;main.c: 514: printf("%d", N_remain);
  3952                           
  3953                           ; BSR set to: 0
  3954  0028D6  0E4E               	movlw	low (STR_54+12)
  3955  0028D8  0100               	movlb	0	; () banked
  3956  0028DA  6FD6               	movwf	printf@f& (0+255),b
  3957  0028DC  0EFE               	movlw	high (STR_54+12)
  3958  0028DE  6FD7               	movwf	(printf@f+1)& (0+255),b
  3959  0028E0  C0A0  F0D8         	movff	_N_remain,?_printf+2
  3960  0028E4  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  3961  0028E8  ECDA  F015         	call	_printf	;wreg free
  3962                           
  3963                           ;main.c: 515: lcdInst(0xC0);;
  3964  0028EC  0EC0               	movlw	192
  3965  0028EE  EC27  F023         	call	_lcdInst
  3966                           
  3967                           ;main.c: 516: printf("%d",N_spacingTime);
  3968  0028F2  0E4E               	movlw	low (STR_54+12)
  3969  0028F4  0100               	movlb	0	; () banked
  3970  0028F6  6FD6               	movwf	printf@f& (0+255),b
  3971  0028F8  0EFE               	movlw	high (STR_54+12)
  3972  0028FA  6FD7               	movwf	(printf@f+1)& (0+255),b
  3973  0028FC  C09A  F0D8         	movff	_N_spacingTime,?_printf+2
  3974  002900  C09B  F0D9         	movff	_N_spacingTime+1,?_printf+3
  3975  002904  ECDA  F015         	call	_printf	;wreg free
  3976                           
  3977                           ;main.c: 518: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3978  002908  0E80               	movlw	128
  3979  00290A  EC27  F023         	call	_lcdInst
  3980  00290E  0E41               	movlw	65
  3981  002910  0100               	movlb	0	; () banked
  3982  002912  6FEC               	movwf	??_main& (0+255),b
  3983  002914  0EEE               	movlw	238
  3984  002916                     u5317:
  3985  002916  2EE8               	decfsz	wreg,f,c
  3986  002918  D7FE               	bra	u5317
  3987  00291A  2FEC               	decfsz	??_main& (0+255),f,b
  3988  00291C  D7FC               	bra	u5317
  3989  00291E  F000               	nop	
  3990                           
  3991                           ;main.c: 521: N_spacingTime +=200;
  3992  002920  0EC8               	movlw	200
  3993  002922  0100               	movlb	0	; () banked
  3994  002924  279A               	addwf	_N_spacingTime& (0+255),f,b
  3995  002926  0E00               	movlw	0
  3996  002928  239B               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  3997                           
  3998                           ; BSR set to: 0
  3999  00292A  D7A5               	goto	l397
  4000  00292C                     l399:
  4001                           
  4002                           ;main.c: 524: }
  4003                           ;main.c: 535: I2C_sendData(close_handle);
  4004                           
  4005                           ; BSR set to: 0
  4006  00292C  0100               	movlb	0	; () banked
  4007  00292E  51F0               	movf	_close_handle& (0+255),w,b
  4008  002930  ECC2  F022         	call	_I2C_sendData
  4009                           
  4010                           ;main.c: 540: get_RTC_final();
  4011  002934  EC1A  F01D         	call	_get_RTC_final	;wreg free
  4012                           
  4013                           ;main.c: 542: printf("Bolt_remain:%d",B_remain);
  4014  002938  0E7E               	movlw	low STR_38
  4015  00293A  0100               	movlb	0	; () banked
  4016  00293C  6FD6               	movwf	printf@f& (0+255),b
  4017  00293E  0EFE               	movlw	high STR_38
  4018  002940  6FD7               	movwf	(printf@f+1)& (0+255),b
  4019  002942  C0A2  F0D8         	movff	_B_remain,?_printf+2
  4020  002946  C0A3  F0D9         	movff	_B_remain+1,?_printf+3
  4021  00294A  ECDA  F015         	call	_printf	;wreg free
  4022                           
  4023                           ;main.c: 543: _delay((unsigned long)((300)*(40000000/4000.0)));
  4024  00294E  0E10               	movlw	16
  4025  002950  0100               	movlb	0	; () banked
  4026  002952  6FED               	movwf	(??_main+1)& (0+255),b
  4027  002954  0E39               	movlw	57
  4028  002956  6FEC               	movwf	??_main& (0+255),b
  4029  002958  0E0D               	movlw	13
  4030  00295A                     u5327:
  4031  00295A  2EE8               	decfsz	wreg,f,c
  4032  00295C  D7FE               	bra	u5327
  4033  00295E  2FEC               	decfsz	??_main& (0+255),f,b
  4034  002960  D7FC               	bra	u5327
  4035  002962  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4036  002964  D7FA               	bra	u5327
  4037  002966  D000               	nop2	
  4038                           
  4039                           ;main.c: 544: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4040  002968  0E01               	movlw	1
  4041  00296A  EC27  F023         	call	_lcdInst
  4042  00296E  0EC3               	movlw	195
  4043  002970  0100               	movlb	0	; () banked
  4044  002972  6FEC               	movwf	??_main& (0+255),b
  4045  002974  0ECD               	movlw	205
  4046  002976                     u5337:
  4047  002976  2EE8               	decfsz	wreg,f,c
  4048  002978  D7FE               	bra	u5337
  4049  00297A  2FEC               	decfsz	??_main& (0+255),f,b
  4050  00297C  D7FC               	bra	u5337
  4051                           
  4052                           ;main.c: 545: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4053  00297E  0E80               	movlw	128
  4054  002980  EC27  F023         	call	_lcdInst
  4055  002984  0E41               	movlw	65
  4056  002986  0100               	movlb	0	; () banked
  4057  002988  6FEC               	movwf	??_main& (0+255),b
  4058  00298A  0EEE               	movlw	238
  4059  00298C                     u5347:
  4060  00298C  2EE8               	decfsz	wreg,f,c
  4061  00298E  D7FE               	bra	u5347
  4062  002990  2FEC               	decfsz	??_main& (0+255),f,b
  4063  002992  D7FC               	bra	u5347
  4064  002994  F000               	nop	
  4065                           
  4066                           ;main.c: 546: printf("Nut_remain:%d",N_remain);
  4067  002996  0ED6               	movlw	low STR_39
  4068  002998  0100               	movlb	0	; () banked
  4069  00299A  6FD6               	movwf	printf@f& (0+255),b
  4070  00299C  0EFE               	movlw	high STR_39
  4071  00299E  6FD7               	movwf	(printf@f+1)& (0+255),b
  4072  0029A0  C0A0  F0D8         	movff	_N_remain,?_printf+2
  4073  0029A4  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  4074  0029A8  ECDA  F015         	call	_printf	;wreg free
  4075                           
  4076                           ;main.c: 547: _delay((unsigned long)((300)*(40000000/4000.0)));
  4077  0029AC  0E10               	movlw	16
  4078  0029AE  0100               	movlb	0	; () banked
  4079  0029B0  6FED               	movwf	(??_main+1)& (0+255),b
  4080  0029B2  0E39               	movlw	57
  4081  0029B4  6FEC               	movwf	??_main& (0+255),b
  4082  0029B6  0E0D               	movlw	13
  4083  0029B8                     u5357:
  4084  0029B8  2EE8               	decfsz	wreg,f,c
  4085  0029BA  D7FE               	bra	u5357
  4086  0029BC  2FEC               	decfsz	??_main& (0+255),f,b
  4087  0029BE  D7FC               	bra	u5357
  4088  0029C0  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4089  0029C2  D7FA               	bra	u5357
  4090  0029C4  D000               	nop2	
  4091                           
  4092                           ;main.c: 548: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4093  0029C6  0E01               	movlw	1
  4094  0029C8  EC27  F023         	call	_lcdInst
  4095  0029CC  0EC3               	movlw	195
  4096  0029CE  0100               	movlb	0	; () banked
  4097  0029D0  6FEC               	movwf	??_main& (0+255),b
  4098  0029D2  0ECD               	movlw	205
  4099  0029D4                     u5367:
  4100  0029D4  2EE8               	decfsz	wreg,f,c
  4101  0029D6  D7FE               	bra	u5367
  4102  0029D8  2FEC               	decfsz	??_main& (0+255),f,b
  4103  0029DA  D7FC               	bra	u5367
  4104                           
  4105                           ;main.c: 549: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4106  0029DC  0E80               	movlw	128
  4107  0029DE  EC27  F023         	call	_lcdInst
  4108  0029E2  0E41               	movlw	65
  4109  0029E4  0100               	movlb	0	; () banked
  4110  0029E6  6FEC               	movwf	??_main& (0+255),b
  4111  0029E8  0EEE               	movlw	238
  4112  0029EA                     u5377:
  4113  0029EA  2EE8               	decfsz	wreg,f,c
  4114  0029EC  D7FE               	bra	u5377
  4115  0029EE  2FEC               	decfsz	??_main& (0+255),f,b
  4116  0029F0  D7FC               	bra	u5377
  4117  0029F2  F000               	nop	
  4118                           
  4119                           ;main.c: 550: printf("Spacer_remain:%d",S_remain);
  4120  0029F4  0EB0               	movlw	low STR_40
  4121  0029F6  0100               	movlb	0	; () banked
  4122  0029F8  6FD6               	movwf	printf@f& (0+255),b
  4123  0029FA  0EFD               	movlw	high STR_40
  4124  0029FC  6FD7               	movwf	(printf@f+1)& (0+255),b
  4125  0029FE  C09E  F0D8         	movff	_S_remain,?_printf+2
  4126  002A02  C09F  F0D9         	movff	_S_remain+1,?_printf+3
  4127  002A06  ECDA  F015         	call	_printf	;wreg free
  4128                           
  4129                           ;main.c: 551: _delay((unsigned long)((300)*(40000000/4000.0)));
  4130  002A0A  0E10               	movlw	16
  4131  002A0C  0100               	movlb	0	; () banked
  4132  002A0E  6FED               	movwf	(??_main+1)& (0+255),b
  4133  002A10  0E39               	movlw	57
  4134  002A12  6FEC               	movwf	??_main& (0+255),b
  4135  002A14  0E0D               	movlw	13
  4136  002A16                     u5387:
  4137  002A16  2EE8               	decfsz	wreg,f,c
  4138  002A18  D7FE               	bra	u5387
  4139  002A1A  2FEC               	decfsz	??_main& (0+255),f,b
  4140  002A1C  D7FC               	bra	u5387
  4141  002A1E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4142  002A20  D7FA               	bra	u5387
  4143  002A22  D000               	nop2	
  4144                           
  4145                           ;main.c: 552: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4146  002A24  0E01               	movlw	1
  4147  002A26  EC27  F023         	call	_lcdInst
  4148  002A2A  0EC3               	movlw	195
  4149  002A2C  0100               	movlb	0	; () banked
  4150  002A2E  6FEC               	movwf	??_main& (0+255),b
  4151  002A30  0ECD               	movlw	205
  4152  002A32                     u5397:
  4153  002A32  2EE8               	decfsz	wreg,f,c
  4154  002A34  D7FE               	bra	u5397
  4155  002A36  2FEC               	decfsz	??_main& (0+255),f,b
  4156  002A38  D7FC               	bra	u5397
  4157                           
  4158                           ;main.c: 553: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4159  002A3A  0E80               	movlw	128
  4160  002A3C  EC27  F023         	call	_lcdInst
  4161  002A40  0E41               	movlw	65
  4162  002A42  0100               	movlb	0	; () banked
  4163  002A44  6FEC               	movwf	??_main& (0+255),b
  4164  002A46  0EEE               	movlw	238
  4165  002A48                     u5407:
  4166  002A48  2EE8               	decfsz	wreg,f,c
  4167  002A4A  D7FE               	bra	u5407
  4168  002A4C  2FEC               	decfsz	??_main& (0+255),f,b
  4169  002A4E  D7FC               	bra	u5407
  4170  002A50  F000               	nop	
  4171                           
  4172                           ;main.c: 554: printf("Washer_remain:%d",W_remain);
  4173  002A52  0EC1               	movlw	low STR_41
  4174  002A54  0100               	movlb	0	; () banked
  4175  002A56  6FD6               	movwf	printf@f& (0+255),b
  4176  002A58  0EFD               	movlw	high STR_41
  4177  002A5A  6FD7               	movwf	(printf@f+1)& (0+255),b
  4178  002A5C  C09C  F0D8         	movff	_W_remain,?_printf+2
  4179  002A60  C09D  F0D9         	movff	_W_remain+1,?_printf+3
  4180  002A64  ECDA  F015         	call	_printf	;wreg free
  4181                           
  4182                           ;main.c: 555: _delay((unsigned long)((300)*(40000000/4000.0)));
  4183  002A68  0E10               	movlw	16
  4184  002A6A  0100               	movlb	0	; () banked
  4185  002A6C  6FED               	movwf	(??_main+1)& (0+255),b
  4186  002A6E  0E39               	movlw	57
  4187  002A70  6FEC               	movwf	??_main& (0+255),b
  4188  002A72  0E0D               	movlw	13
  4189  002A74                     u5417:
  4190  002A74  2EE8               	decfsz	wreg,f,c
  4191  002A76  D7FE               	bra	u5417
  4192  002A78  2FEC               	decfsz	??_main& (0+255),f,b
  4193  002A7A  D7FC               	bra	u5417
  4194  002A7C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4195  002A7E  D7FA               	bra	u5417
  4196  002A80  D000               	nop2	
  4197                           
  4198                           ;main.c: 556: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4199  002A82  0E01               	movlw	1
  4200  002A84  EC27  F023         	call	_lcdInst
  4201  002A88  0EC3               	movlw	195
  4202  002A8A  0100               	movlb	0	; () banked
  4203  002A8C  6FEC               	movwf	??_main& (0+255),b
  4204  002A8E  0ECD               	movlw	205
  4205  002A90                     u5427:
  4206  002A90  2EE8               	decfsz	wreg,f,c
  4207  002A92  D7FE               	bra	u5427
  4208  002A94  2FEC               	decfsz	??_main& (0+255),f,b
  4209  002A96  D7FC               	bra	u5427
  4210                           
  4211                           ;main.c: 557: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4212  002A98  0E80               	movlw	128
  4213  002A9A  EC27  F023         	call	_lcdInst
  4214  002A9E  0E41               	movlw	65
  4215  002AA0  0100               	movlb	0	; () banked
  4216  002AA2  6FEC               	movwf	??_main& (0+255),b
  4217  002AA4  0EEE               	movlw	238
  4218  002AA6                     u5437:
  4219  002AA6  2EE8               	decfsz	wreg,f,c
  4220  002AA8  D7FE               	bra	u5437
  4221  002AAA  2FEC               	decfsz	??_main& (0+255),f,b
  4222  002AAC  D7FC               	bra	u5437
  4223  002AAE  F000               	nop	
  4224                           
  4225                           ;main.c: 558: printf("you're done");
  4226  002AB0  0E32               	movlw	low STR_42
  4227  002AB2  0100               	movlb	0	; () banked
  4228  002AB4  6FD6               	movwf	printf@f& (0+255),b
  4229  002AB6  0EFF               	movlw	high STR_42
  4230  002AB8  6FD7               	movwf	(printf@f+1)& (0+255),b
  4231  002ABA  ECDA  F015         	call	_printf	;wreg free
  4232                           
  4233                           ;main.c: 559: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4234  002ABE  0E33               	movlw	51
  4235  002AC0  0100               	movlb	0	; () banked
  4236  002AC2  6FED               	movwf	(??_main+1)& (0+255),b
  4237  002AC4  0EBB               	movlw	187
  4238  002AC6  6FEC               	movwf	??_main& (0+255),b
  4239  002AC8  0EDF               	movlw	223
  4240  002ACA                     u5447:
  4241  002ACA  2EE8               	decfsz	wreg,f,c
  4242  002ACC  D7FE               	bra	u5447
  4243  002ACE  2FEC               	decfsz	??_main& (0+255),f,b
  4244  002AD0  D7FC               	bra	u5447
  4245  002AD2  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4246  002AD4  D7FA               	bra	u5447
  4247  002AD6  D000               	nop2	
  4248                           
  4249                           ;main.c: 560: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4250  002AD8  0E80               	movlw	128
  4251  002ADA  EC27  F023         	call	_lcdInst
  4252  002ADE  0E41               	movlw	65
  4253  002AE0  0100               	movlb	0	; () banked
  4254  002AE2  6FEC               	movwf	??_main& (0+255),b
  4255  002AE4  0EEE               	movlw	238
  4256  002AE6                     u5457:
  4257  002AE6  2EE8               	decfsz	wreg,f,c
  4258  002AE8  D7FE               	bra	u5457
  4259  002AEA  2FEC               	decfsz	??_main& (0+255),f,b
  4260  002AEC  D7FC               	bra	u5457
  4261  002AEE  F000               	nop	
  4262  002AF0                     
  4263                           ;main.c: 584: (INTCONbits.GIE = 1);
  4264  002AF0  8EF2               	bsf	intcon,7,c	;volatile
  4265                           
  4266                           ;main.c: 585: operation = 1;
  4267  002AF2  0E00               	movlw	0
  4268  002AF4  6E74               	movwf	_operation+1,c
  4269  002AF6  0E01               	movlw	1
  4270  002AF8  6E73               	movwf	_operation,c
  4271                           
  4272                           ;main.c: 586: printf("1: Date and Time");
  4273  002AFA  0EE3               	movlw	low STR_43
  4274  002AFC  0100               	movlb	0	; () banked
  4275  002AFE  6FD6               	movwf	printf@f& (0+255),b
  4276  002B00  0EFD               	movlw	high STR_43
  4277  002B02  6FD7               	movwf	(printf@f+1)& (0+255),b
  4278  002B04  ECDA  F015         	call	_printf	;wreg free
  4279                           
  4280                           ;main.c: 587: lcdInst(0xC0);;
  4281  002B08  0EC0               	movlw	192
  4282  002B0A  EC27  F023         	call	_lcdInst
  4283                           
  4284                           ;main.c: 588: printf(" 2: Operation Time");
  4285  002B0E  0E7A               	movlw	low STR_44
  4286  002B10  0100               	movlb	0	; () banked
  4287  002B12  6FD6               	movwf	printf@f& (0+255),b
  4288  002B14  0EFD               	movlw	high STR_44
  4289  002B16  6FD7               	movwf	(printf@f+1)& (0+255),b
  4290  002B18  ECDA  F015         	call	_printf	;wreg free
  4291                           
  4292                           ;main.c: 589: _delay((unsigned long)((600)*(40000000/4000.0)));
  4293  002B1C  0E1F               	movlw	31
  4294  002B1E  0100               	movlb	0	; () banked
  4295  002B20  6FED               	movwf	(??_main+1)& (0+255),b
  4296  002B22  0E71               	movlw	113
  4297  002B24  6FEC               	movwf	??_main& (0+255),b
  4298  002B26  0E1E               	movlw	30
  4299  002B28                     u5467:
  4300  002B28  2EE8               	decfsz	wreg,f,c
  4301  002B2A  D7FE               	bra	u5467
  4302  002B2C  2FEC               	decfsz	??_main& (0+255),f,b
  4303  002B2E  D7FC               	bra	u5467
  4304  002B30  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4305  002B32  D7FA               	bra	u5467
  4306  002B34  F000               	nop	
  4307                           
  4308                           ;main.c: 590: initLCD();
  4309  002B36  EC84  F021         	call	_initLCD	;wreg free
  4310                           
  4311                           ;main.c: 591: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4312  002B3A  0E80               	movlw	128
  4313  002B3C  EC27  F023         	call	_lcdInst
  4314  002B40  0E41               	movlw	65
  4315  002B42  0100               	movlb	0	; () banked
  4316  002B44  6FEC               	movwf	??_main& (0+255),b
  4317  002B46  0EEE               	movlw	238
  4318  002B48                     u5477:
  4319  002B48  2EE8               	decfsz	wreg,f,c
  4320  002B4A  D7FE               	bra	u5477
  4321  002B4C  2FEC               	decfsz	??_main& (0+255),f,b
  4322  002B4E  D7FC               	bra	u5477
  4323  002B50  F000               	nop	
  4324                           
  4325                           ;main.c: 592: printf("3:summary");
  4326  002B52  0E76               	movlw	low STR_45
  4327  002B54  0100               	movlb	0	; () banked
  4328  002B56  6FD6               	movwf	printf@f& (0+255),b
  4329  002B58  0EFF               	movlw	high STR_45
  4330  002B5A  6FD7               	movwf	(printf@f+1)& (0+255),b
  4331  002B5C  ECDA  F015         	call	_printf	;wreg free
  4332                           
  4333                           ;main.c: 593: lcdInst(0xC0);;
  4334  002B60  0EC0               	movlw	192
  4335  002B62  EC27  F023         	call	_lcdInst
  4336                           
  4337                           ;main.c: 595: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4338  002B66  0E33               	movlw	51
  4339  002B68  0100               	movlb	0	; () banked
  4340  002B6A  6FED               	movwf	(??_main+1)& (0+255),b
  4341  002B6C  0EBB               	movlw	187
  4342  002B6E  6FEC               	movwf	??_main& (0+255),b
  4343  002B70  0EDF               	movlw	223
  4344  002B72                     u5487:
  4345  002B72  2EE8               	decfsz	wreg,f,c
  4346  002B74  D7FE               	bra	u5487
  4347  002B76  2FEC               	decfsz	??_main& (0+255),f,b
  4348  002B78  D7FC               	bra	u5487
  4349  002B7A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4350  002B7C  D7FA               	bra	u5487
  4351  002B7E  D000               	nop2	
  4352                           
  4353                           ;main.c: 596: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4354  002B80  0E80               	movlw	128
  4355  002B82  EC27  F023         	call	_lcdInst
  4356  002B86  0E41               	movlw	65
  4357  002B88  0100               	movlb	0	; () banked
  4358  002B8A  6FEC               	movwf	??_main& (0+255),b
  4359  002B8C  0EEE               	movlw	238
  4360  002B8E                     u5497:
  4361  002B8E  2EE8               	decfsz	wreg,f,c
  4362  002B90  D7FE               	bra	u5497
  4363  002B92  2FEC               	decfsz	??_main& (0+255),f,b
  4364  002B94  D7FC               	bra	u5497
  4365  002B96  F000               	nop	
  4366                           
  4367                           ;main.c: 598: if(operation_done == 1){
  4368  002B98  0100               	movlb	0	; () banked
  4369  002B9A  05B6               	decf	_operation_done& (0+255),w,b
  4370  002B9C  11B7               	iorwf	(_operation_done+1)& (0+255),w,b
  4371  002B9E  A4D8               	btfss	status,2,c
  4372  002BA0  D7A7               	goto	l403
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;main.c: 600: }
  4376                           ;main.c: 601: }
  4377                           ;main.c: 602: initialize();
  4378                           
  4379                           ; BSR set to: 0
  4380                           
  4381                           ; BSR set to: 0
  4382                           
  4383                           ; BSR set to: 0
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;main.c: 599: break;
  4387  002BA2  EC73  F01C         	call	_initialize	;wreg free
  4388                           
  4389                           ;main.c: 603: mode = 0;
  4390  002BA6  0E00               	movlw	0
  4391  002BA8  0100               	movlb	0	; () banked
  4392  002BAA  6FBB               	movwf	(_mode+1)& (0+255),b
  4393  002BAC  0E00               	movlw	0
  4394  002BAE  6FBA               	movwf	_mode& (0+255),b
  4395                           
  4396                           ; BSR set to: 0
  4397                           
  4398                           ; BSR set to: 0
  4399  002BB0  EF42  F00F         	goto	l346
  4400  002BB4                     __end_of_main:
  4401                           	opt stack 0
  4402                           tblptru	equ	0xFF8
  4403                           tblptrh	equ	0xFF7
  4404                           tblptrl	equ	0xFF6
  4405                           tablat	equ	0xFF5
  4406                           intcon	equ	0xFF2
  4407                           intcon3	equ	0xFF0
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           postdec1	equ	0xFE5
  4411                           fsr1l	equ	0xFE1
  4412                           postinc2	equ	0xFDE
  4413                           postdec2	equ	0xFDD
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           status	equ	0xFD8
  4417                           
  4418 ;; *************** function _readADC *****************
  4419 ;; Defined at:
  4420 ;;		line 1138 in file "main.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;  channel         1    wreg     unsigned char 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  channel         1    4[BANK0 ] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  2    0[BANK0 ] unsigned short 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:        5 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    4
  4441 ;; This function calls:
  4442 ;;		Nothing
  4443 ;; This function is called by:
  4444 ;;		_main
  4445 ;;		_count_gear
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text1
  4450  0044F8                     __ptext1:
  4451                           	opt stack 0
  4452  0044F8                     _readADC:
  4453                           	opt stack 26
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;incstack = 0
  4457                           ;readADC@channel stored from wreg
  4458  0044F8  0100               	movlb	0	; () banked
  4459  0044FA  6FCC               	movwf	readADC@channel& (0+255),b
  4460                           
  4461                           ;main.c: 1147: ADCON0 = (channel & 0x0F) << 2;
  4462  0044FC  C0CC  F0CA         	movff	readADC@channel,??_readADC
  4463  004500  0E0F               	movlw	15
  4464  004502  0100               	movlb	0	; () banked
  4465  004504  17CA               	andwf	??_readADC& (0+255),f,b
  4466  004506  90D8               	bcf	status,0,c
  4467  004508  37CA               	rlcf	??_readADC& (0+255),f,b
  4468  00450A  90D8               	bcf	status,0,c
  4469  00450C  35CA               	rlcf	??_readADC& (0+255),w,b
  4470  00450E  6EC2               	movwf	4034,c	;volatile
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;main.c: 1148: ADON = 1;
  4474  004510  80C2               	bsf	4034,0,c	;volatile
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;main.c: 1149: ADCON0bits.GO = 1;
  4478  004512  82C2               	bsf	4034,1,c	;volatile
  4479  004514                     
  4480                           ; BSR set to: 0
  4481  004514  B2C2               	btfsc	4034,1,c	;volatile
  4482  004516  D7FE               	goto	l483
  4483                           
  4484                           ;main.c: 1151: return (ADRESH << 8) | ADRESL;
  4485  004518  50C3               	movf	4035,w,c	;volatile
  4486  00451A  CFC4 F0CA          	movff	4036,??_readADC	;volatile
  4487  00451E  0100               	movlb	0	; () banked
  4488  004520  6BCB               	clrf	(??_readADC+1)& (0+255),b
  4489  004522  C0CA  F0CB         	movff	??_readADC,??_readADC+1
  4490  004526  6BCA               	clrf	??_readADC& (0+255),b
  4491  004528  11CA               	iorwf	??_readADC& (0+255),w,b
  4492  00452A  6FC8               	movwf	?_readADC& (0+255),b
  4493  00452C  51CB               	movf	(??_readADC+1)& (0+255),w,b
  4494  00452E  6FC9               	movwf	(?_readADC+1)& (0+255),b
  4495  004530  0012               	return	
  4496  004532                     __end_of_readADC:
  4497                           	opt stack 0
  4498                           tblptru	equ	0xFF8
  4499                           tblptrh	equ	0xFF7
  4500                           tblptrl	equ	0xFF6
  4501                           tablat	equ	0xFF5
  4502                           intcon	equ	0xFF2
  4503                           intcon3	equ	0xFF0
  4504                           postinc0	equ	0xFEE
  4505                           wreg	equ	0xFE8
  4506                           postdec1	equ	0xFE5
  4507                           fsr1l	equ	0xFE1
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _printf *****************
  4515 ;; Defined at:
  4516 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4519 ;;		 -> STR_80(3), STR_79(9), STR_78(12), STR_76(7), 
  4520 ;;		 -> STR_74(3), STR_73(11), STR_71(3), STR_70(9), 
  4521 ;;		 -> STR_65(15), STR_64(12), STR_63(9), STR_62(16), 
  4522 ;;		 -> STR_61(17), STR_60(17), STR_59(14), STR_58(15), 
  4523 ;;		 -> STR_57(15), STR_56(15), STR_55(15), STR_54(15), 
  4524 ;;		 -> STR_53(20), STR_52(17), STR_51(13), STR_50(16), 
  4525 ;;		 -> STR_49(15), STR_48(15), STR_47(15), STR_46(15), 
  4526 ;;		 -> STR_45(10), STR_44(19), STR_43(17), STR_42(12), 
  4527 ;;		 -> STR_41(17), STR_40(17), STR_39(14), STR_38(15), 
  4528 ;;		 -> STR_37(3), STR_36(3), STR_35(3), STR_34(9), 
  4529 ;;		 -> STR_33(20), STR_32(3), STR_31(3), STR_30(21), 
  4530 ;;		 -> STR_29(11), STR_28(13), STR_27(18), STR_26(11), 
  4531 ;;		 -> STR_25(13), STR_24(19), STR_23(11), STR_22(13), 
  4532 ;;		 -> STR_21(15), STR_20(12), STR_19(7), STR_18(14), 
  4533 ;;		 -> STR_17(14), STR_16(16), STR_15(14), STR_14(3), 
  4534 ;;		 -> STR_13(2), STR_12(3), STR_11(2), STR_10(3), 
  4535 ;;		 -> STR_9(5), STR_8(17), STR_7(6), STR_6(8), 
  4536 ;;		 -> STR_5(3), STR_4(14), STR_3(15), STR_2(14), 
  4537 ;;		 -> STR_1(16), 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  idx             1   22[BANK0 ] unsigned char 
  4540 ;;  tmpval          4    0        struct .
  4541 ;;  width           2   33[BANK0 ] int 
  4542 ;;  val             2   30[BANK0 ] unsigned int 
  4543 ;;  len             2   28[BANK0 ] unsigned int 
  4544 ;;  ap              2   26[BANK0 ] PTR void [1]
  4545 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4546 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  4547 ;;		 -> STR_101(7), number(2), final_set(40), current_set(5), 
  4548 ;;  c               1   35[BANK0 ] char 
  4549 ;;  flag            1   32[BANK0 ] unsigned char 
  4550 ;;  prec            1   23[BANK0 ] char 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  2   14[BANK0 ] int 
  4553 ;; Registers used:
  4554 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4560 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;Total ram usage:       22 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    6
  4567 ;; This function calls:
  4568 ;;		___lwdiv
  4569 ;;		___lwmod
  4570 ;;		___wmul
  4571 ;;		_isdigit
  4572 ;;		_putch
  4573 ;; This function is called by:
  4574 ;;		_main
  4575 ;;		_count_gear
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text2
  4580  002BB4                     __ptext2:
  4581                           	opt stack 0
  4582  002BB4                     _printf:
  4583                           	opt stack 24
  4584                           
  4585                           ;doprnt.c: 466: va_list ap;
  4586                           ;doprnt.c: 499: signed char c;
  4587                           ;doprnt.c: 501: int width;
  4588                           ;doprnt.c: 506: signed char prec;
  4589                           ;doprnt.c: 508: unsigned char flag;
  4590                           ;doprnt.c: 523: union {
  4591                           ;doprnt.c: 524: unsigned long vd;
  4592                           ;doprnt.c: 525: double integ;
  4593                           ;doprnt.c: 526: } tmpval;
  4594                           ;doprnt.c: 528: unsigned int val;
  4595                           ;doprnt.c: 529: unsigned len;
  4596                           ;doprnt.c: 530: const char * cp;
  4597                           ;doprnt.c: 533: *ap = __va_start();
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;incstack = 0
  4601  002BB4  0ED8               	movlw	low (?_printf+2)
  4602  002BB6  0100               	movlb	0	; () banked
  4603  002BB8  6FE2               	movwf	printf@ap& (0+255),b
  4604  002BBA  0E00               	movlw	high (?_printf+2)
  4605  002BBC  6FE3               	movwf	(printf@ap+1)& (0+255),b
  4606                           
  4607                           ;doprnt.c: 536: while(c = *f++) {
  4608  002BBE  D20F               	goto	u3170
  4609  002BC0                     
  4610                           ; BSR set to: 0
  4611                           ;doprnt.c: 538: if(c != '%')
  4612                           
  4613                           ; BSR set to: 0
  4614  002BC0  0E25               	movlw	37
  4615  002BC2  19EB               	xorwf	printf@c& (0+255),w,b
  4616  002BC4  B4D8               	btfsc	status,2,c
  4617  002BC6  D004               	goto	l842
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;doprnt.c: 540: {
  4621                           ;doprnt.c: 541: (putch(c) );
  4622  002BC8  51EB               	movf	printf@c& (0+255),w,b
  4623  002BCA  EC1B  F023         	call	_putch
  4624                           
  4625                           ;doprnt.c: 542: continue;
  4626  002BCE  D207               	goto	u3170
  4627  002BD0                     l842:
  4628                           
  4629                           ;doprnt.c: 543: }
  4630                           ;doprnt.c: 546: width = 0;
  4631  002BD0  0E00               	movlw	0
  4632  002BD2  0100               	movlb	0	; () banked
  4633  002BD4  6FEA               	movwf	(printf@width+1)& (0+255),b
  4634  002BD6  0E00               	movlw	0
  4635  002BD8  6FE9               	movwf	printf@width& (0+255),b
  4636                           
  4637                           ;doprnt.c: 548: flag = 0;
  4638  002BDA  0E00               	movlw	0
  4639  002BDC  6FE8               	movwf	printf@flag& (0+255),b
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;doprnt.c: 551: switch(*f) {
  4643                           
  4644                           ;doprnt.c: 550: for(;;) {
  4645  002BDE  D004               	goto	l844
  4646  002BE0                     
  4647                           ;doprnt.c: 580: flag |= 0x04;
  4648                           
  4649                           ; BSR set to: 0
  4650  002BE0  0100               	movlb	0	; () banked
  4651  002BE2  85E8               	bsf	printf@flag& (0+255),2,b
  4652                           
  4653                           ;doprnt.c: 581: f++;
  4654  002BE4  4BD6               	infsnz	printf@f& (0+255),f,b
  4655  002BE6  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4656  002BE8                     l844:
  4657                           
  4658                           ; BSR set to: 0
  4659  002BE8  C0D6  FFF6         	movff	printf@f,tblptrl
  4660  002BEC  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4661  002BF0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4662  002BF0  6AF8               	clrf	tblptru,c
  4663  002BF2                     	endif
  4664  002BF2                     	if	0	;tblptru may be non-zero
  4665  002BF2                     	endif
  4666  002BF2  0008               	tblrd		*
  4667  002BF4  50F5               	movf	tablat,w,c
  4668                           
  4669                           ; Switch size 1, requested type "space"
  4670                           ; Number of cases is 1, Range of values is 48 to 48
  4671                           ; switch strategies available:
  4672                           ; Name         Instructions Cycles
  4673                           ; simple_byte            4     3 (average)
  4674                           ;	Chosen strategy is simple_byte
  4675  002BF6  0A30               	xorlw	48	; case 48
  4676  002BF8  B4D8               	btfsc	status,2,c
  4677  002BFA  D7F2               	goto	l845
  4678                           
  4679                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4680                           
  4681                           ;doprnt.c: 586: }
  4682                           
  4683                           ;doprnt.c: 585: break;
  4684  002BFC  C0D6  FFF6         	movff	printf@f,tblptrl
  4685  002C00  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4686  002C04                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4687  002C04  6AF8               	clrf	tblptru,c
  4688  002C06                     	endif
  4689  002C06                     	if	0	;tblptru may be non-zero
  4690  002C06                     	endif
  4691  002C06  0008               	tblrd		*
  4692  002C08  50F5               	movf	tablat,w,c
  4693  002C0A  ECFB  F022         	call	_isdigit
  4694  002C0E  A0D8               	btfss	status,0,c
  4695  002C10  D0AE               	goto	l852
  4696                           
  4697                           ;doprnt.c: 598: width = 0;
  4698  002C12  0E00               	movlw	0
  4699  002C14  0100               	movlb	0	; () banked
  4700  002C16  6FEA               	movwf	(printf@width+1)& (0+255),b
  4701  002C18  0E00               	movlw	0
  4702  002C1A  6FE9               	movwf	printf@width& (0+255),b
  4703  002C1C                     
  4704                           ;doprnt.c: 600: width *= 10;
  4705                           
  4706                           ; BSR set to: 0
  4707  002C1C  C0E9  F0D0         	movff	printf@width,___wmul@multiplier
  4708  002C20  C0EA  F0D1         	movff	printf@width+1,___wmul@multiplier+1
  4709  002C24  0E00               	movlw	0
  4710  002C26  0100               	movlb	0	; () banked
  4711  002C28  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4712  002C2A  0E0A               	movlw	10
  4713  002C2C  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  4714  002C2E  ECAE  F022         	call	___wmul	;wreg free
  4715  002C32  C0D0  F0E9         	movff	?___wmul,printf@width
  4716  002C36  C0D1  F0EA         	movff	?___wmul+1,printf@width+1
  4717                           
  4718                           ;doprnt.c: 601: width += *f++ - '0';
  4719  002C3A  0ED0               	movlw	208
  4720  002C3C  0100               	movlb	0	; () banked
  4721  002C3E  6FDA               	movwf	??_printf& (0+255),b
  4722  002C40  0EFF               	movlw	255
  4723  002C42  6FDB               	movwf	(??_printf+1)& (0+255),b
  4724  002C44  C0D6  FFF6         	movff	printf@f,tblptrl
  4725  002C48  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4726  002C4C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4727  002C4C  6AF8               	clrf	tblptru,c
  4728  002C4E                     	endif
  4729  002C4E                     	if	0	;tblptru may be non-zero
  4730  002C4E                     	endif
  4731  002C4E  0008               	tblrd		*
  4732  002C50  50F5               	movf	tablat,w,c
  4733  002C52  6FDC               	movwf	(??_printf+2)& (0+255),b
  4734  002C54  6BDD               	clrf	(??_printf+3)& (0+255),b
  4735  002C56  51DA               	movf	??_printf& (0+255),w,b
  4736  002C58  27DC               	addwf	(??_printf+2)& (0+255),f,b
  4737  002C5A  51DB               	movf	(??_printf+1)& (0+255),w,b
  4738  002C5C  23DD               	addwfc	(??_printf+3)& (0+255),f,b
  4739  002C5E  51DC               	movf	(??_printf+2)& (0+255),w,b
  4740  002C60  27E9               	addwf	printf@width& (0+255),f,b
  4741  002C62  51DD               	movf	(??_printf+3)& (0+255),w,b
  4742  002C64  23EA               	addwfc	(printf@width+1)& (0+255),f,b
  4743                           
  4744                           ; BSR set to: 0
  4745  002C66  4BD6               	infsnz	printf@f& (0+255),f,b
  4746  002C68  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4750  002C6A  C0D6  FFF6         	movff	printf@f,tblptrl
  4751  002C6E  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4752  002C72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4753  002C72  6AF8               	clrf	tblptru,c
  4754  002C74                     	endif
  4755  002C74                     	if	0	;tblptru may be non-zero
  4756  002C74                     	endif
  4757  002C74  0008               	tblrd		*
  4758  002C76  50F5               	movf	tablat,w,c
  4759  002C78  ECFB  F022         	call	_isdigit
  4760  002C7C  A0D8               	btfss	status,0,c
  4761  002C7E  D077               	goto	l852
  4762  002C80  D7CD               	goto	l850
  4763  002C82                     
  4764                           ;doprnt.c: 721: flag |= 0x80;
  4765  002C82  0100               	movlb	0	; () banked
  4766  002C84  8FE8               	bsf	printf@flag& (0+255),7,b
  4767                           
  4768                           ;doprnt.c: 723: break;
  4769  002C86  D08F               	goto	l857
  4770  002C88                     
  4771                           ; BSR set to: 0
  4772                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4773                           
  4774                           ; BSR set to: 0
  4775  002C88  C0E2  FFD9         	movff	printf@ap,fsr2l
  4776  002C8C  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  4777  002C90  CFDE F0E0          	movff	postinc2,printf@cp
  4778  002C94  CFDD F0E1          	movff	postdec2,printf@cp+1
  4779                           
  4780                           ; BSR set to: 0
  4781  002C98  0E02               	movlw	2
  4782  002C9A  27E2               	addwf	printf@ap& (0+255),f,b
  4783  002C9C  0E00               	movlw	0
  4784  002C9E  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;doprnt.c: 740: if(!cp)
  4788  002CA0  51E0               	movf	printf@cp& (0+255),w,b
  4789  002CA2  11E1               	iorwf	(printf@cp+1)& (0+255),w,b
  4790  002CA4  A4D8               	btfss	status,2,c
  4791  002CA6  D004               	goto	l860
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;doprnt.c: 741: cp = "(null)";
  4795  002CA8  0EAC               	movlw	low STR_101
  4796  002CAA  6FE0               	movwf	printf@cp& (0+255),b
  4797  002CAC  0EFF               	movlw	high STR_101
  4798  002CAE  6FE1               	movwf	(printf@cp+1)& (0+255),b
  4799  002CB0                     l860:
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;doprnt.c: 745: len = 0;
  4803                           
  4804                           ; BSR set to: 0
  4805  002CB0  0E00               	movlw	0
  4806  002CB2  6FE5               	movwf	(printf@len+1)& (0+255),b
  4807  002CB4  0E00               	movlw	0
  4808  002CB6  6FE4               	movwf	printf@len& (0+255),b
  4809                           
  4810                           ;doprnt.c: 746: while(cp[len])
  4811  002CB8  D003               	goto	l861
  4812  002CBA                     
  4813                           ;doprnt.c: 747: len++;
  4814                           
  4815                           ; BSR set to: 0
  4816  002CBA  0100               	movlb	0	; () banked
  4817  002CBC  4BE4               	infsnz	printf@len& (0+255),f,b
  4818  002CBE  2BE5               	incf	(printf@len+1)& (0+255),f,b
  4819  002CC0                     l861:
  4820                           
  4821                           ; BSR set to: 0
  4822                           
  4823                           ; BSR set to: 0
  4824  002CC0  51E4               	movf	printf@len& (0+255),w,b
  4825  002CC2  25E0               	addwf	printf@cp& (0+255),w,b
  4826  002CC4  6FDA               	movwf	??_printf& (0+255),b
  4827  002CC6  51E5               	movf	(printf@len+1)& (0+255),w,b
  4828  002CC8  21E1               	addwfc	(printf@cp+1)& (0+255),w,b
  4829  002CCA  6FDB               	movwf	(??_printf+1)& (0+255),b
  4830  002CCC  C0DA  FFF6         	movff	??_printf,tblptrl
  4831  002CD0  C0DB  FFF7         	movff	??_printf+1,tblptrh
  4832  002CD4  0E00               	movlw	low (__mediumconst shr (0+16))
  4833  002CD6  6EF8               	movwf	tblptru,c
  4834  002CD8  0E0F               	movlw	(high __ramtop+-1)
  4835  002CDA  64F7               	cpfsgt	tblptrh,c
  4836  002CDC  D003               	bra	u2937
  4837  002CDE  0008               	tblrd		*
  4838  002CE0  50F5               	movf	tablat,w,c
  4839  002CE2  D005               	bra	u2930
  4840  002CE4                     u2937:
  4841  002CE4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4842  002CE8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4843  002CEC  50EF               	movf	indf0,w,c
  4844  002CEE                     u2930:
  4845  002CEE  0900               	iorlw	0
  4846  002CF0  A4D8               	btfss	status,2,c
  4847  002CF2  D7E3               	goto	l862
  4848                           
  4849                           ;doprnt.c: 757: if(width > len)
  4850  002CF4  0100               	movlb	0	; () banked
  4851  002CF6  51E9               	movf	printf@width& (0+255),w,b
  4852  002CF8  5DE4               	subwf	printf@len& (0+255),w,b
  4853  002CFA  51EA               	movf	(printf@width+1)& (0+255),w,b
  4854  002CFC  59E5               	subwfb	(printf@len+1)& (0+255),w,b
  4855  002CFE  B0D8               	btfsc	status,0,c
  4856  002D00  D005               	goto	l864
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;doprnt.c: 758: width -= len;
  4860  002D02  51E4               	movf	printf@len& (0+255),w,b
  4861  002D04  5FE9               	subwf	printf@width& (0+255),f,b
  4862  002D06  51E5               	movf	(printf@len+1)& (0+255),w,b
  4863  002D08  5BEA               	subwfb	(printf@width+1)& (0+255),f,b
  4864  002D0A  D008               	goto	l866
  4865  002D0C                     l864:
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;doprnt.c: 759: else
  4869                           ;doprnt.c: 760: width = 0;
  4870                           
  4871                           ; BSR set to: 0
  4872  002D0C  0E00               	movlw	0
  4873  002D0E  6FEA               	movwf	(printf@width+1)& (0+255),b
  4874  002D10  0E00               	movlw	0
  4875  002D12  6FE9               	movwf	printf@width& (0+255),b
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;doprnt.c: 764: while(width--)
  4879  002D14  D003               	goto	l866
  4880  002D16                     l4352:
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;doprnt.c: 765: (putch(' ') );
  4884  002D16  0E20               	movlw	32
  4885  002D18  EC1B  F023         	call	_putch
  4886  002D1C                     l866:
  4887  002D1C  0100               	movlb	0	; () banked
  4888  002D1E  07E9               	decf	printf@width& (0+255),f,b
  4889  002D20  A0D8               	btfss	status,0,c
  4890  002D22  07EA               	decf	(printf@width+1)& (0+255),f,b
  4891  002D24  29E9               	incf	printf@width& (0+255),w,b
  4892  002D26  E1F7               	bnz	l4352
  4893  002D28  29EA               	incf	(printf@width+1)& (0+255),w,b
  4894  002D2A  B4D8               	btfsc	status,2,c
  4895  002D2C  D017               	goto	l869
  4896  002D2E  D7F3               	goto	l867
  4897  002D30                     l4356:
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;doprnt.c: 768: (putch(*cp++) );
  4901  002D30  C0E0  FFF6         	movff	printf@cp,tblptrl
  4902  002D34  C0E1  FFF7         	movff	printf@cp+1,tblptrh
  4903  002D38  0E00               	movlw	low (__mediumconst shr (0+16))
  4904  002D3A  6EF8               	movwf	tblptru,c
  4905  002D3C  0E0F               	movlw	(high __ramtop+-1)
  4906  002D3E  64F7               	cpfsgt	tblptrh,c
  4907  002D40  D003               	bra	u2977
  4908  002D42  0008               	tblrd		*
  4909  002D44  50F5               	movf	tablat,w,c
  4910  002D46  D005               	bra	u2970
  4911  002D48                     u2977:
  4912  002D48  CFF6 FFE9          	movff	tblptrl,fsr0l
  4913  002D4C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4914  002D50  50EF               	movf	indf0,w,c
  4915  002D52                     u2970:
  4916  002D52  EC1B  F023         	call	_putch
  4917  002D56  0100               	movlb	0	; () banked
  4918  002D58  4BE0               	infsnz	printf@cp& (0+255),f,b
  4919  002D5A  2BE1               	incf	(printf@cp+1)& (0+255),f,b
  4920  002D5C                     l869:
  4921                           
  4922                           ; BSR set to: 0
  4923                           
  4924                           ; BSR set to: 0
  4925  002D5C  07E4               	decf	printf@len& (0+255),f,b
  4926  002D5E  A0D8               	btfss	status,0,c
  4927  002D60  07E5               	decf	(printf@len+1)& (0+255),f,b
  4928  002D62  29E4               	incf	printf@len& (0+255),w,b
  4929  002D64  E1E5               	bnz	l4356
  4930  002D66  29E5               	incf	(printf@len+1)& (0+255),w,b
  4931  002D68  B4D8               	btfsc	status,2,c
  4932  002D6A  D139               	goto	u3170
  4933  002D6C  D7E1               	goto	l870
  4934  002D6E                     l852:
  4935                           
  4936                           ; BSR set to: 0
  4937  002D6E  C0D6  FFF6         	movff	printf@f,tblptrl
  4938  002D72  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4939  002D76  0100               	movlb	0	; () banked
  4940  002D78  4BD6               	infsnz	printf@f& (0+255),f,b
  4941  002D7A  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4942  002D7C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4943  002D7C  6AF8               	clrf	tblptru,c
  4944  002D7E                     	endif
  4945  002D7E                     	if	0	;tblptru may be non-zero
  4946  002D7E                     	endif
  4947  002D7E  0008               	tblrd		*
  4948  002D80  CFF5 F0EB          	movff	tablat,printf@c
  4949  002D84  51EB               	movf	printf@c& (0+255),w,b
  4950                           
  4951                           ; Switch size 1, requested type "space"
  4952                           ; Number of cases is 5, Range of values is 0 to 120
  4953                           ; switch strategies available:
  4954                           ; Name         Instructions Cycles
  4955                           ; simple_byte           16     9 (average)
  4956                           ;	Chosen strategy is simple_byte
  4957  002D86  0A00               	xorlw	0	; case 0
  4958  002D88  B4D8               	btfsc	status,2,c
  4959  002D8A  0012               	return	
  4960  002D8C  0A64               	xorlw	100	; case 100
  4961  002D8E  B4D8               	btfsc	status,2,c
  4962  002D90  D00A               	goto	l857
  4963  002D92  0A0D               	xorlw	13	; case 105
  4964  002D94  B4D8               	btfsc	status,2,c
  4965  002D96  D007               	goto	l857
  4966  002D98  0A1A               	xorlw	26	; case 115
  4967  002D9A  B4D8               	btfsc	status,2,c
  4968  002D9C  D775               	goto	l859
  4969  002D9E  0A0B               	xorlw	11	; case 120
  4970  002DA0  B4D8               	btfsc	status,2,c
  4971  002DA2  D76F               	goto	l858
  4972  002DA4  D11C               	goto	u3170
  4973  002DA6                     l857:
  4974                           
  4975                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4976  002DA6  0100               	movlb	0	; () banked
  4977  002DA8  BFE8               	btfsc	printf@flag& (0+255),7,b
  4978  002DAA  D015               	goto	l873
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;doprnt.c: 1253: {
  4982                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4983  002DAC  C0E2  FFD9         	movff	printf@ap,fsr2l
  4984  002DB0  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  4985  002DB4  CFDE F0E6          	movff	postinc2,printf@val
  4986  002DB8  CFDD F0E7          	movff	postdec2,printf@val+1
  4987                           
  4988                           ; BSR set to: 0
  4989  002DBC  0E02               	movlw	2
  4990  002DBE  27E2               	addwf	printf@ap& (0+255),f,b
  4991  002DC0  0E00               	movlw	0
  4992  002DC2  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;doprnt.c: 1261: if((int)val < 0) {
  4996  002DC4  AFE7               	btfss	(printf@val+1)& (0+255),7,b
  4997  002DC6  D04A               	goto	l876
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;doprnt.c: 1262: flag |= 0x03;
  5001  002DC8  0E03               	movlw	3
  5002  002DCA  13E8               	iorwf	printf@flag& (0+255),f,b
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;doprnt.c: 1263: val = -val;
  5006  002DCC  6DE6               	negf	printf@val& (0+255),b
  5007  002DCE  1FE7               	comf	(printf@val+1)& (0+255),f,b
  5008  002DD0  B0D8               	btfsc	status,0,c
  5009  002DD2  2BE7               	incf	(printf@val+1)& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;doprnt.c: 1264: }
  5013                           ;doprnt.c: 1266: }
  5014  002DD4  D043               	goto	l876
  5015  002DD6                     l873:
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;doprnt.c: 1268: else
  5019                           ;doprnt.c: 1273: {
  5020                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5021                           
  5022                           ; BSR set to: 0
  5023  002DD6  C0E2  FFD9         	movff	printf@ap,fsr2l
  5024  002DDA  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  5025  002DDE  CFDE F0E6          	movff	postinc2,printf@val
  5026  002DE2  CFDD F0E7          	movff	postdec2,printf@val+1
  5027                           
  5028                           ; BSR set to: 0
  5029  002DE6  0E02               	movlw	2
  5030  002DE8  27E2               	addwf	printf@ap& (0+255),f,b
  5031  002DEA  0E00               	movlw	0
  5032  002DEC  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;doprnt.c: 1287: }
  5036                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5037  002DEE  D036               	goto	l876
  5038  002DF0                     
  5039                           ; BSR set to: 0
  5040                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5041                           
  5042                           ; BSR set to: 0
  5043  002DF0  0E01               	movlw	1
  5044  002DF2  6FEB               	movwf	printf@c& (0+255),b
  5045  002DF4                     l4382:
  5046                           
  5047                           ; BSR set to: 0
  5048  002DF4  0E05               	movlw	5
  5049  002DF6  19EB               	xorwf	printf@c& (0+255),w,b
  5050  002DF8  B4D8               	btfsc	status,2,c
  5051  002DFA  D038               	goto	l881
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;doprnt.c: 1306: if(val < dpowers[c])
  5055                           
  5056                           ; BSR set to: 0
  5057                           
  5058                           ; BSR set to: 0
  5059  002DFC  51EB               	movf	printf@c& (0+255),w,b
  5060  002DFE  0D02               	mullw	2
  5061  002E00  0EA4               	movlw	low _dpowers
  5062  002E02  24F3               	addwf	prodl,w,c
  5063  002E04  6EF6               	movwf	tblptrl,c
  5064  002E06  0EFC               	movlw	high _dpowers
  5065  002E08  20F4               	addwfc	prodh,w,c
  5066  002E0A  6EF7               	movwf	tblptrh,c
  5067  002E0C                     	if	1	;There are 3 active tblptr bytes
  5068  002E0C  6AF8               	clrf	tblptru,c
  5069  002E0E  0E00               	movlw	low (__mediumconst shr (0+16))
  5070  002E10  22F8               	addwfc	tblptru,f,c
  5071  002E12                     	endif
  5072  002E12  0009               	tblrd		*+
  5073  002E14  50F5               	movf	tablat,w,c
  5074  002E16  5DE6               	subwf	printf@val& (0+255),w,b
  5075  002E18  0009               	tblrd		*+
  5076  002E1A  50F5               	movf	tablat,w,c
  5077  002E1C  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  5078  002E1E  A0D8               	btfss	status,0,c
  5079  002E20  D025               	goto	l881
  5080                           
  5081                           ; BSR set to: 0
  5082                           
  5083                           ; BSR set to: 0
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;doprnt.c: 1307: break;
  5087  002E22  2BEB               	incf	printf@c& (0+255),f,b
  5088  002E24  D7E7               	goto	l4382
  5089  002E26                     
  5090                           ; BSR set to: 0
  5091                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5092                           
  5093                           ; BSR set to: 0
  5094  002E26  0E01               	movlw	1
  5095  002E28  6FEB               	movwf	printf@c& (0+255),b
  5096  002E2A                     l4396:
  5097                           
  5098                           ; BSR set to: 0
  5099  002E2A  0E04               	movlw	4
  5100  002E2C  19EB               	xorwf	printf@c& (0+255),w,b
  5101  002E2E  B4D8               	btfsc	status,2,c
  5102  002E30  D01D               	goto	l881
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5106                           
  5107                           ; BSR set to: 0
  5108                           
  5109                           ; BSR set to: 0
  5110  002E32  51EB               	movf	printf@c& (0+255),w,b
  5111  002E34  0D02               	mullw	2
  5112  002E36  0EAE               	movlw	low _hexpowers
  5113  002E38  24F3               	addwf	prodl,w,c
  5114  002E3A  6EF6               	movwf	tblptrl,c
  5115  002E3C  0EFC               	movlw	high _hexpowers
  5116  002E3E  20F4               	addwfc	prodh,w,c
  5117  002E40  6EF7               	movwf	tblptrh,c
  5118  002E42                     	if	1	;There are 3 active tblptr bytes
  5119  002E42  6AF8               	clrf	tblptru,c
  5120  002E44  0E00               	movlw	low (__mediumconst shr (0+16))
  5121  002E46  22F8               	addwfc	tblptru,f,c
  5122  002E48                     	endif
  5123  002E48  0009               	tblrd		*+
  5124  002E4A  50F5               	movf	tablat,w,c
  5125  002E4C  5DE6               	subwf	printf@val& (0+255),w,b
  5126  002E4E  0009               	tblrd		*+
  5127  002E50  50F5               	movf	tablat,w,c
  5128  002E52  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  5129  002E54  A0D8               	btfss	status,0,c
  5130  002E56  D00A               	goto	l881
  5131                           
  5132                           ; BSR set to: 0
  5133                           
  5134                           ; BSR set to: 0
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;doprnt.c: 1318: break;
  5138  002E58  2BEB               	incf	printf@c& (0+255),f,b
  5139  002E5A  D7E7               	goto	l4396
  5140  002E5C                     l876:
  5141                           
  5142                           ; BSR set to: 0
  5143                           
  5144                           ; BSR set to: 0
  5145  002E5C  51E8               	movf	printf@flag& (0+255),w,b
  5146  002E5E  0B80               	andlw	128
  5147                           
  5148                           ; Switch size 1, requested type "space"
  5149                           ; Number of cases is 2, Range of values is 0 to 128
  5150                           ; switch strategies available:
  5151                           ; Name         Instructions Cycles
  5152                           ; simple_byte            7     4 (average)
  5153                           ;	Chosen strategy is simple_byte
  5154  002E60  0A00               	xorlw	0	; case 0
  5155  002E62  B4D8               	btfsc	status,2,c
  5156  002E64  D7C5               	goto	l877
  5157  002E66  0A80               	xorlw	128	; case 128
  5158  002E68  B4D8               	btfsc	status,2,c
  5159  002E6A  D7DD               	goto	l882
  5160  002E6C                     l881:
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5164                           
  5165                           ; BSR set to: 0
  5166  002E6C  51E9               	movf	printf@width& (0+255),w,b
  5167  002E6E  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5168  002E70  B4D8               	btfsc	status,2,c
  5169  002E72  D009               	goto	l886
  5170                           
  5171                           ; BSR set to: 0
  5172  002E74  C0E8  F0DA         	movff	printf@flag,??_printf
  5173  002E78  0E03               	movlw	3
  5174  002E7A  17DA               	andwf	??_printf& (0+255),f,b
  5175  002E7C  B4D8               	btfsc	status,2,c
  5176  002E7E  D003               	goto	l886
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;doprnt.c: 1346: width--;
  5180  002E80  07E9               	decf	printf@width& (0+255),f,b
  5181  002E82  A0D8               	btfss	status,0,c
  5182  002E84  07EA               	decf	(printf@width+1)& (0+255),f,b
  5183  002E86                     l886:
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;doprnt.c: 1381: if(width > c)
  5187                           
  5188                           ; BSR set to: 0
  5189  002E86  0E80               	movlw	128
  5190  002E88  BFEB               	btfsc	printf@c& (0+255),7,b
  5191  002E8A  0E7F               	movlw	127
  5192  002E8C  6FDA               	movwf	??_printf& (0+255),b
  5193  002E8E  51E9               	movf	printf@width& (0+255),w,b
  5194  002E90  5DEB               	subwf	printf@c& (0+255),w,b
  5195  002E92  51EA               	movf	(printf@width+1)& (0+255),w,b
  5196  002E94  0A80               	xorlw	128
  5197  002E96  59DA               	subwfb	??_printf& (0+255),w,b
  5198  002E98  B0D8               	btfsc	status,0,c
  5199  002E9A  D007               	goto	l887
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;doprnt.c: 1382: width -= c;
  5203  002E9C  51EB               	movf	printf@c& (0+255),w,b
  5204  002E9E  5FE9               	subwf	printf@width& (0+255),f,b
  5205  002EA0  0E00               	movlw	0
  5206  002EA2  BFEB               	btfsc	printf@c& (0+255),7,b
  5207  002EA4  0EFF               	movlw	255
  5208  002EA6  5BEA               	subwfb	(printf@width+1)& (0+255),f,b
  5209  002EA8  D004               	goto	l888
  5210  002EAA                     l887:
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;doprnt.c: 1383: else
  5214                           ;doprnt.c: 1384: width = 0;
  5215                           
  5216                           ; BSR set to: 0
  5217  002EAA  0E00               	movlw	0
  5218  002EAC  6FEA               	movwf	(printf@width+1)& (0+255),b
  5219  002EAE  0E00               	movlw	0
  5220  002EB0  6FE9               	movwf	printf@width& (0+255),b
  5221  002EB2                     l888:
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;doprnt.c: 1387: if(flag & 0x04) {
  5225                           
  5226                           ; BSR set to: 0
  5227  002EB2  A5E8               	btfss	printf@flag& (0+255),2,b
  5228  002EB4  D016               	goto	l889
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;doprnt.c: 1392: if(flag & 0x03)
  5232  002EB6  C0E8  F0DA         	movff	printf@flag,??_printf
  5233  002EBA  0E03               	movlw	3
  5234  002EBC  17DA               	andwf	??_printf& (0+255),f,b
  5235  002EBE  B4D8               	btfsc	status,2,c
  5236  002EC0  D003               	goto	l890
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;doprnt.c: 1393: (putch('-') );
  5240  002EC2  0E2D               	movlw	45
  5241  002EC4  EC1B  F023         	call	_putch
  5242  002EC8                     l890:
  5243                           
  5244                           ;doprnt.c: 1415: if(width)
  5245  002EC8  0100               	movlb	0	; () banked
  5246  002ECA  51E9               	movf	printf@width& (0+255),w,b
  5247  002ECC  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5248  002ECE  B4D8               	btfsc	status,2,c
  5249  002ED0  D020               	goto	l898
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;doprnt.c: 1417: (putch('0') );
  5253                           
  5254                           ; BSR set to: 0
  5255                           
  5256                           ;doprnt.c: 1416: do
  5257  002ED2  0E30               	movlw	48
  5258  002ED4  EC1B  F023         	call	_putch
  5259                           
  5260                           ;doprnt.c: 1418: while(--width);
  5261  002ED8  0100               	movlb	0	; () banked
  5262  002EDA  07E9               	decf	printf@width& (0+255),f,b
  5263  002EDC  A0D8               	btfss	status,0,c
  5264  002EDE  07EA               	decf	(printf@width+1)& (0+255),f,b
  5265  002EE0  D7F4               	goto	L11
  5266  002EE2                     l889:
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;doprnt.c: 1422: {
  5270                           ;doprnt.c: 1424: if(width
  5271                           ;doprnt.c: 1428: )
  5272                           
  5273                           ; BSR set to: 0
  5274  002EE2  51E9               	movf	printf@width& (0+255),w,b
  5275  002EE4  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5276  002EE6  B4D8               	btfsc	status,2,c
  5277  002EE8  D00B               	goto	u3150
  5278  002EEA                     u3140:
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;doprnt.c: 1430: (putch(' ') );
  5282                           
  5283                           ; BSR set to: 0
  5284                           
  5285                           ;doprnt.c: 1429: do
  5286  002EEA  0E20               	movlw	32
  5287  002EEC  EC1B  F023         	call	_putch
  5288                           
  5289                           ;doprnt.c: 1431: while(--width);
  5290  002EF0  0100               	movlb	0	; () banked
  5291  002EF2  07E9               	decf	printf@width& (0+255),f,b
  5292  002EF4  A0D8               	btfss	status,0,c
  5293  002EF6  07EA               	decf	(printf@width+1)& (0+255),f,b
  5294  002EF8  51E9               	movf	printf@width& (0+255),w,b
  5295  002EFA  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5296  002EFC  A4D8               	btfss	status,2,c
  5297  002EFE  D7F5               	goto	u3140
  5298  002F00                     u3150:
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;doprnt.c: 1438: if(flag & 0x03)
  5302                           
  5303                           ; BSR set to: 0
  5304                           
  5305                           ; BSR set to: 0
  5306  002F00  C0E8  F0DA         	movff	printf@flag,??_printf
  5307  002F04  0E03               	movlw	3
  5308  002F06  17DA               	andwf	??_printf& (0+255),f,b
  5309  002F08  B4D8               	btfsc	status,2,c
  5310  002F0A  D003               	goto	l898
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;doprnt.c: 1439: (putch('-') );
  5314  002F0C  0E2D               	movlw	45
  5315  002F0E  EC1B  F023         	call	_putch
  5316  002F12                     l898:
  5317                           
  5318                           ;doprnt.c: 1469: }
  5319                           ;doprnt.c: 1472: prec = c;
  5320  002F12  C0EB  F0DF         	movff	printf@c,printf@prec
  5321                           
  5322                           ;doprnt.c: 1474: while(prec--) {
  5323  002F16  D05E               	goto	l899
  5324  002F18                     
  5325                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5326  002F18  0100               	movlb	0	; () banked
  5327  002F1A  51DF               	movf	printf@prec& (0+255),w,b
  5328  002F1C  0D02               	mullw	2
  5329  002F1E  0EA4               	movlw	low _dpowers
  5330  002F20  24F3               	addwf	prodl,w,c
  5331  002F22  6EF6               	movwf	tblptrl,c
  5332  002F24  0EFC               	movlw	high _dpowers
  5333  002F26  20F4               	addwfc	prodh,w,c
  5334  002F28  6EF7               	movwf	tblptrh,c
  5335  002F2A                     	if	1	;There are 3 active tblptr bytes
  5336  002F2A  6AF8               	clrf	tblptru,c
  5337  002F2C  0E00               	movlw	low (__mediumconst shr (0+16))
  5338  002F2E  22F8               	addwfc	tblptru,f,c
  5339  002F30                     	endif
  5340  002F30  0009               	tblrd		*+
  5341  002F32  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  5342  002F36  000A               	tblrd		*-
  5343  002F38  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  5344  002F3C  C0E6  F0C8         	movff	printf@val,___lwdiv@dividend
  5345  002F40  C0E7  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  5346  002F44  EC31  F021         	call	___lwdiv	;wreg free
  5347  002F48  C0C8  F0CF         	movff	?___lwdiv,___lwmod@dividend
  5348  002F4C  C0C9  F0D0         	movff	?___lwdiv+1,___lwmod@dividend+1
  5349  002F50  0E00               	movlw	0
  5350  002F52  0100               	movlb	0	; () banked
  5351  002F54  6FD2               	movwf	(___lwmod@divisor+1)& (0+255),b
  5352  002F56  0E0A               	movlw	10
  5353  002F58  6FD1               	movwf	___lwmod@divisor& (0+255),b
  5354  002F5A  EC18  F022         	call	___lwmod	;wreg free
  5355  002F5E  0100               	movlb	0	; () banked
  5356  002F60  51CF               	movf	?___lwmod& (0+255),w,b
  5357  002F62  0F30               	addlw	48
  5358  002F64  6FEB               	movwf	printf@c& (0+255),b
  5359                           
  5360                           ;doprnt.c: 1491: break;
  5361  002F66  D033               	goto	l903
  5362  002F68                     
  5363                           ; BSR set to: 0
  5364                           ;doprnt.c: 1499: {
  5365                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5366                           
  5367                           ; BSR set to: 0
  5368  002F68  C0E6  F0C8         	movff	printf@val,___lwdiv@dividend
  5369  002F6C  C0E7  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  5370  002F70  51DF               	movf	printf@prec& (0+255),w,b
  5371  002F72  0D02               	mullw	2
  5372  002F74  0EAE               	movlw	low _hexpowers
  5373  002F76  24F3               	addwf	prodl,w,c
  5374  002F78  6EF6               	movwf	tblptrl,c
  5375  002F7A  0EFC               	movlw	high _hexpowers
  5376  002F7C  20F4               	addwfc	prodh,w,c
  5377  002F7E  6EF7               	movwf	tblptrh,c
  5378  002F80                     	if	1	;There are 3 active tblptr bytes
  5379  002F80  6AF8               	clrf	tblptru,c
  5380  002F82  0E00               	movlw	low (__mediumconst shr (0+16))
  5381  002F84  22F8               	addwfc	tblptru,f,c
  5382  002F86                     	endif
  5383  002F86  0009               	tblrd		*+
  5384  002F88  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  5385  002F8C  000A               	tblrd		*-
  5386  002F8E  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  5387  002F92  EC31  F021         	call	___lwdiv	;wreg free
  5388  002F96  0100               	movlb	0	; () banked
  5389  002F98  51C8               	movf	?___lwdiv& (0+255),w,b
  5390  002F9A  0B0F               	andlw	15
  5391  002F9C  6FDE               	movwf	printf@idx& (0+255),b
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5395  002F9E  51DE               	movf	printf@idx& (0+255),w,b
  5396  002FA0  0D01               	mullw	1
  5397  002FA2  0E9F               	movlw	low STR_102
  5398  002FA4  24F3               	addwf	prodl,w,c
  5399  002FA6  6EF6               	movwf	tblptrl,c
  5400  002FA8  0EFD               	movlw	high STR_102
  5401  002FAA  20F4               	addwfc	prodh,w,c
  5402  002FAC  6EF7               	movwf	tblptrh,c
  5403  002FAE                     	if	1	;There are 3 active tblptr bytes
  5404  002FAE  6AF8               	clrf	tblptru,c
  5405  002FB0  0E00               	movlw	low (__mediumconst shr (0+16))
  5406  002FB2  22F8               	addwfc	tblptru,f,c
  5407  002FB4                     	endif
  5408  002FB4  0008               	tblrd		*
  5409  002FB6  CFF5 F0EB          	movff	tablat,printf@c
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;doprnt.c: 1523: }
  5413                           
  5414                           ;doprnt.c: 1508: }
  5415                           ;doprnt.c: 1510: break;
  5416  002FBA  D009               	goto	l903
  5417  002FBC                     
  5418                           ; BSR set to: 0
  5419  002FBC  0100               	movlb	0	; () banked
  5420  002FBE  51E8               	movf	printf@flag& (0+255),w,b
  5421  002FC0  0B80               	andlw	128
  5422                           
  5423                           ; Switch size 1, requested type "space"
  5424                           ; Number of cases is 2, Range of values is 0 to 128
  5425                           ; switch strategies available:
  5426                           ; Name         Instructions Cycles
  5427                           ; simple_byte            7     4 (average)
  5428                           ;	Chosen strategy is simple_byte
  5429  002FC2  0A00               	xorlw	0	; case 0
  5430  002FC4  B4D8               	btfsc	status,2,c
  5431  002FC6  D7A8               	goto	l902
  5432  002FC8  0A80               	xorlw	128	; case 128
  5433  002FCA  B4D8               	btfsc	status,2,c
  5434  002FCC  D7CD               	goto	l904
  5435  002FCE                     l903:
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;doprnt.c: 1524: (putch(c) );
  5439                           
  5440                           ; BSR set to: 0
  5441  002FCE  51EB               	movf	printf@c& (0+255),w,b
  5442  002FD0  EC1B  F023         	call	_putch
  5443  002FD4                     l899:
  5444  002FD4  0100               	movlb	0	; () banked
  5445  002FD6  07DF               	decf	printf@prec& (0+255),f,b
  5446  002FD8  29DF               	incf	printf@prec& (0+255),w,b
  5447  002FDA  A4D8               	btfss	status,2,c
  5448  002FDC  D7EF               	goto	l901
  5449  002FDE                     u3170:
  5450                           
  5451                           ; BSR set to: 0
  5452                           
  5453                           ; BSR set to: 0
  5454  002FDE  C0D6  FFF6         	movff	printf@f,tblptrl
  5455  002FE2  C0D7  FFF7         	movff	printf@f+1,tblptrh
  5456  002FE6  0100               	movlb	0	; () banked
  5457  002FE8  4BD6               	infsnz	printf@f& (0+255),f,b
  5458  002FEA  2BD7               	incf	(printf@f+1)& (0+255),f,b
  5459  002FEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5460  002FEC  6AF8               	clrf	tblptru,c
  5461  002FEE                     	endif
  5462  002FEE                     	if	0	;tblptru may be non-zero
  5463  002FEE                     	endif
  5464  002FEE  0008               	tblrd		*
  5465  002FF0  CFF5 F0EB          	movff	tablat,printf@c
  5466  002FF4  51EB               	movf	printf@c& (0+255),w,b
  5467  002FF6  B4D8               	btfsc	status,2,c
  5468  002FF8  0012               	return	
  5469  002FFA  D5E2               	goto	l841
  5470  002FFC                     __end_of_printf:
  5471                           	opt stack 0
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           intcon	equ	0xFF2
  5479                           intcon3	equ	0xFF0
  5480                           indf0	equ	0xFEF
  5481                           postinc0	equ	0xFEE
  5482                           fsr0h	equ	0xFEA
  5483                           fsr0l	equ	0xFE9
  5484                           wreg	equ	0xFE8
  5485                           postdec1	equ	0xFE5
  5486                           fsr1l	equ	0xFE1
  5487                           postinc2	equ	0xFDE
  5488                           postdec2	equ	0xFDD
  5489                           fsr2h	equ	0xFDA
  5490                           fsr2l	equ	0xFD9
  5491                           status	equ	0xFD8
  5492                           
  5493 ;; *************** function _putch *****************
  5494 ;; Defined at:
  5495 ;;		line 24 in file "lcd.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  data            1    wreg     unsigned char 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  data            1    2[BANK0 ] unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      void 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;Total ram usage:        1 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    5
  5516 ;; This function calls:
  5517 ;;		_lcdNibble
  5518 ;; This function is called by:
  5519 ;;		_printf
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text3
  5524  004636                     __ptext3:
  5525                           	opt stack 0
  5526  004636                     _putch:
  5527                           	opt stack 24
  5528                           
  5529                           ;incstack = 0
  5530                           ;putch@data stored from wreg
  5531  004636  0100               	movlb	0	; () banked
  5532  004638  6FCA               	movwf	putch@data& (0+255),b
  5533                           
  5534                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5535  00463A  848C               	bsf	3980,2,c	;volatile
  5536                           
  5537                           ;lcd.c: 33: lcdNibble(data);
  5538  00463C  0100               	movlb	0	; () banked
  5539  00463E  51CA               	movf	putch@data& (0+255),w,b
  5540  004640  EC5A  F01E         	call	_lcdNibble
  5541                           
  5542                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5543  004644  0EC8               	movlw	200
  5544  004646                     u5507:
  5545  004646  D000               	nop2	
  5546  004648  2EE8               	decfsz	wreg,f,c
  5547  00464A  D7FD               	bra	u5507
  5548  00464C  0012               	return		;funcret
  5549  00464E                     __end_of_putch:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           intcon3	equ	0xFF0
  5559                           indf0	equ	0xFEF
  5560                           postinc0	equ	0xFEE
  5561                           fsr0h	equ	0xFEA
  5562                           fsr0l	equ	0xFE9
  5563                           wreg	equ	0xFE8
  5564                           postdec1	equ	0xFE5
  5565                           fsr1l	equ	0xFE1
  5566                           postinc2	equ	0xFDE
  5567                           postdec2	equ	0xFDD
  5568                           fsr2h	equ	0xFDA
  5569                           fsr2l	equ	0xFD9
  5570                           status	equ	0xFD8
  5571                           
  5572 ;; *************** function _isdigit *****************
  5573 ;; Defined at:
  5574 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  c               1    wreg     unsigned char 
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;  c               1    2[BANK0 ] unsigned char 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;		None               void
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;Total ram usage:        3 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    4
  5595 ;; This function calls:
  5596 ;;		Nothing
  5597 ;; This function is called by:
  5598 ;;		_printf
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text4
  5603  0045F6                     __ptext4:
  5604                           	opt stack 0
  5605  0045F6                     _isdigit:
  5606                           	opt stack 25
  5607                           
  5608                           ;incstack = 0
  5609                           ;isdigit@c stored from wreg
  5610  0045F6  0100               	movlb	0	; () banked
  5611  0045F8  6FCA               	movwf	isdigit@c& (0+255),b
  5612  0045FA  0E00               	movlw	0
  5613  0045FC  0100               	movlb	0	; () banked
  5614  0045FE  6FC9               	movwf	_isdigit$1301& (0+255),b
  5615                           
  5616                           ; BSR set to: 0
  5617  004600  0E3A               	movlw	58
  5618  004602  61CA               	cpfslt	isdigit@c& (0+255),b
  5619  004604  D005               	goto	l1237
  5620                           
  5621                           ; BSR set to: 0
  5622  004606  0E2F               	movlw	47
  5623  004608  65CA               	cpfsgt	isdigit@c& (0+255),b
  5624  00460A  D002               	goto	l1237
  5625                           
  5626                           ; BSR set to: 0
  5627  00460C  0E01               	movlw	1
  5628  00460E  6FC9               	movwf	_isdigit$1301& (0+255),b
  5629  004610                     l1237:
  5630                           
  5631                           ; BSR set to: 0
  5632                           
  5633                           ; BSR set to: 0
  5634  004610  C0C9  F0C8         	movff	_isdigit$1301,??_isdigit
  5635  004614  31C8               	rrcf	??_isdigit& (0+255),w,b
  5636  004616  0012               	return	
  5637  004618                     __end_of_isdigit:
  5638                           	opt stack 0
  5639                           tblptru	equ	0xFF8
  5640                           tblptrh	equ	0xFF7
  5641                           tblptrl	equ	0xFF6
  5642                           tablat	equ	0xFF5
  5643                           prodh	equ	0xFF4
  5644                           prodl	equ	0xFF3
  5645                           intcon	equ	0xFF2
  5646                           intcon3	equ	0xFF0
  5647                           indf0	equ	0xFEF
  5648                           postinc0	equ	0xFEE
  5649                           fsr0h	equ	0xFEA
  5650                           fsr0l	equ	0xFE9
  5651                           wreg	equ	0xFE8
  5652                           postdec1	equ	0xFE5
  5653                           fsr1l	equ	0xFE1
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8
  5659                           
  5660 ;; *************** function ___lwmod *****************
  5661 ;; Defined at:
  5662 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  dividend        2    7[BANK0 ] unsigned int 
  5665 ;;  divisor         2    9[BANK0 ] unsigned int 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  counter         1   11[BANK0 ] unsigned char 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  2    7[BANK0 ] unsigned int 
  5670 ;; Registers used:
  5671 ;;		wreg, status,2, status,0
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5677 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;Total ram usage:        5 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    4
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_printf
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           	psect	text5
  5692  004430                     __ptext5:
  5693                           	opt stack 0
  5694  004430                     ___lwmod:
  5695                           	opt stack 25
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;incstack = 0
  5699  004430  0100               	movlb	0	; () banked
  5700  004432  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5701  004434  11D2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5702  004436  B4D8               	btfsc	status,2,c
  5703  004438  D018               	goto	l1331
  5704                           
  5705                           ; BSR set to: 0
  5706  00443A  0E01               	movlw	1
  5707  00443C  6FD3               	movwf	___lwmod@counter& (0+255),b
  5708  00443E  D004               	goto	l1326
  5709  004440                     
  5710                           ; BSR set to: 0
  5711                           
  5712                           ; BSR set to: 0
  5713  004440  90D8               	bcf	status,0,c
  5714  004442  37D1               	rlcf	___lwmod@divisor& (0+255),f,b
  5715  004444  37D2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5716  004446  2BD3               	incf	___lwmod@counter& (0+255),f,b
  5717  004448                     l1326:
  5718                           
  5719                           ; BSR set to: 0
  5720                           
  5721                           ; BSR set to: 0
  5722  004448  AFD2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5723  00444A  D7FA               	goto	l1327
  5724  00444C                     u2740:
  5725                           
  5726                           ; BSR set to: 0
  5727                           
  5728                           ; BSR set to: 0
  5729                           
  5730                           ; BSR set to: 0
  5731  00444C  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5732  00444E  5DCF               	subwf	___lwmod@dividend& (0+255),w,b
  5733  004450  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5734  004452  59D0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5735  004454  A0D8               	btfss	status,0,c
  5736  004456  D004               	goto	l1330
  5737                           
  5738                           ; BSR set to: 0
  5739  004458  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5740  00445A  5FCF               	subwf	___lwmod@dividend& (0+255),f,b
  5741  00445C  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5742  00445E  5BD0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5743  004460                     l1330:
  5744                           
  5745                           ; BSR set to: 0
  5746                           
  5747                           ; BSR set to: 0
  5748  004460  90D8               	bcf	status,0,c
  5749  004462  33D2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5750  004464  33D1               	rrcf	___lwmod@divisor& (0+255),f,b
  5751                           
  5752                           ; BSR set to: 0
  5753  004466  2FD3               	decfsz	___lwmod@counter& (0+255),f,b
  5754  004468  D7F1               	goto	u2740
  5755  00446A                     l1331:
  5756                           
  5757                           ; BSR set to: 0
  5758                           
  5759                           ; BSR set to: 0
  5760  00446A  C0CF  F0CF         	movff	___lwmod@dividend,?___lwmod
  5761  00446E  C0D0  F0D0         	movff	___lwmod@dividend+1,?___lwmod+1
  5762                           
  5763                           ; BSR set to: 0
  5764  004472  0012               	return		;funcret
  5765  004474                     __end_of___lwmod:
  5766                           	opt stack 0
  5767                           tblptru	equ	0xFF8
  5768                           tblptrh	equ	0xFF7
  5769                           tblptrl	equ	0xFF6
  5770                           tablat	equ	0xFF5
  5771                           prodh	equ	0xFF4
  5772                           prodl	equ	0xFF3
  5773                           intcon	equ	0xFF2
  5774                           intcon3	equ	0xFF0
  5775                           indf0	equ	0xFEF
  5776                           postinc0	equ	0xFEE
  5777                           fsr0h	equ	0xFEA
  5778                           fsr0l	equ	0xFE9
  5779                           wreg	equ	0xFE8
  5780                           postdec1	equ	0xFE5
  5781                           fsr1l	equ	0xFE1
  5782                           postinc2	equ	0xFDE
  5783                           postdec2	equ	0xFDD
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function ___lwdiv *****************
  5789 ;; Defined at:
  5790 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  dividend        2    0[BANK0 ] unsigned int 
  5793 ;;  divisor         2    2[BANK0 ] unsigned int 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  quotient        2    4[BANK0 ] unsigned int 
  5796 ;;  counter         1    6[BANK0 ] unsigned char 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  2    0[BANK0 ] unsigned int 
  5799 ;; Registers used:
  5800 ;;		wreg, status,2, status,0
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5806 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;Total ram usage:        7 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    4
  5813 ;; This function calls:
  5814 ;;		Nothing
  5815 ;; This function is called by:
  5816 ;;		_printf
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text6
  5821  004262                     __ptext6:
  5822                           	opt stack 0
  5823  004262                     ___lwdiv:
  5824                           	opt stack 25
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;incstack = 0
  5828  004262  0E00               	movlw	0
  5829  004264  0100               	movlb	0	; () banked
  5830  004266  6FCD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5831  004268  0E00               	movlw	0
  5832  00426A  6FCC               	movwf	___lwdiv@quotient& (0+255),b
  5833                           
  5834                           ; BSR set to: 0
  5835  00426C  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5836  00426E  11CB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5837  004270  B4D8               	btfsc	status,2,c
  5838  004272  D01C               	goto	l1321
  5839                           
  5840                           ; BSR set to: 0
  5841  004274  0E01               	movlw	1
  5842  004276  6FCE               	movwf	___lwdiv@counter& (0+255),b
  5843  004278  D004               	goto	l1316
  5844  00427A                     
  5845                           ; BSR set to: 0
  5846                           
  5847                           ; BSR set to: 0
  5848  00427A  90D8               	bcf	status,0,c
  5849  00427C  37CA               	rlcf	___lwdiv@divisor& (0+255),f,b
  5850  00427E  37CB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5851  004280  2BCE               	incf	___lwdiv@counter& (0+255),f,b
  5852  004282                     l1316:
  5853                           
  5854                           ; BSR set to: 0
  5855                           
  5856                           ; BSR set to: 0
  5857  004282  AFCB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5858  004284  D7FA               	goto	l1317
  5859  004286                     u2710:
  5860                           
  5861                           ; BSR set to: 0
  5862                           
  5863                           ; BSR set to: 0
  5864                           
  5865                           ; BSR set to: 0
  5866  004286  90D8               	bcf	status,0,c
  5867  004288  37CC               	rlcf	___lwdiv@quotient& (0+255),f,b
  5868  00428A  37CD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5869                           
  5870                           ; BSR set to: 0
  5871  00428C  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5872  00428E  5DC8               	subwf	___lwdiv@dividend& (0+255),w,b
  5873  004290  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5874  004292  59C9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5875  004294  A0D8               	btfss	status,0,c
  5876  004296  D005               	goto	l1320
  5877                           
  5878                           ; BSR set to: 0
  5879  004298  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5880  00429A  5FC8               	subwf	___lwdiv@dividend& (0+255),f,b
  5881  00429C  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5882  00429E  5BC9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5883                           
  5884                           ; BSR set to: 0
  5885  0042A0  81CC               	bsf	___lwdiv@quotient& (0+255),0,b
  5886  0042A2                     l1320:
  5887                           
  5888                           ; BSR set to: 0
  5889                           
  5890                           ; BSR set to: 0
  5891  0042A2  90D8               	bcf	status,0,c
  5892  0042A4  33CB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5893  0042A6  33CA               	rrcf	___lwdiv@divisor& (0+255),f,b
  5894                           
  5895                           ; BSR set to: 0
  5896  0042A8  2FCE               	decfsz	___lwdiv@counter& (0+255),f,b
  5897  0042AA  D7ED               	goto	u2710
  5898  0042AC                     l1321:
  5899                           
  5900                           ; BSR set to: 0
  5901                           
  5902                           ; BSR set to: 0
  5903  0042AC  C0CC  F0C8         	movff	___lwdiv@quotient,?___lwdiv
  5904  0042B0  C0CD  F0C9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5905                           
  5906                           ; BSR set to: 0
  5907  0042B4  0012               	return		;funcret
  5908  0042B6                     __end_of___lwdiv:
  5909                           	opt stack 0
  5910                           tblptru	equ	0xFF8
  5911                           tblptrh	equ	0xFF7
  5912                           tblptrl	equ	0xFF6
  5913                           tablat	equ	0xFF5
  5914                           prodh	equ	0xFF4
  5915                           prodl	equ	0xFF3
  5916                           intcon	equ	0xFF2
  5917                           intcon3	equ	0xFF0
  5918                           indf0	equ	0xFEF
  5919                           postinc0	equ	0xFEE
  5920                           fsr0h	equ	0xFEA
  5921                           fsr0l	equ	0xFE9
  5922                           wreg	equ	0xFE8
  5923                           postdec1	equ	0xFE5
  5924                           fsr1l	equ	0xFE1
  5925                           postinc2	equ	0xFDE
  5926                           postdec2	equ	0xFDD
  5927                           fsr2h	equ	0xFDA
  5928                           fsr2l	equ	0xFD9
  5929                           status	equ	0xFD8
  5930                           
  5931 ;; *************** function _initialize *****************
  5932 ;; Defined at:
  5933 ;;		line 1103 in file "main.c"
  5934 ;; Parameters:    Size  Location     Type
  5935 ;;		None
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;		None
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  1    wreg      void 
  5940 ;; Registers used:
  5941 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;Total ram usage:        0 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    4
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_main
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           	psect	text7
  5962  0038E6                     __ptext7:
  5963                           	opt stack 0
  5964  0038E6                     _initialize:
  5965                           	opt stack 26
  5966                           
  5967                           ;main.c: 1104: white_tape = 0;
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;incstack = 0
  5971  0038E6  0E00               	movlw	0
  5972  0038E8  0100               	movlb	0	; () banked
  5973  0038EA  6FBD               	movwf	(_white_tape+1)& (0+255),b
  5974  0038EC  0E00               	movlw	0
  5975  0038EE  6FBC               	movwf	_white_tape& (0+255),b
  5976                           
  5977                           ;main.c: 1105: mode = 0;
  5978  0038F0  0E00               	movlw	0
  5979  0038F2  6FBB               	movwf	(_mode+1)& (0+255),b
  5980  0038F4  0E00               	movlw	0
  5981  0038F6  6FBA               	movwf	_mode& (0+255),b
  5982                           
  5983                           ;main.c: 1106: state = 0;
  5984  0038F8  0E00               	movlw	0
  5985  0038FA  6FAF               	movwf	(_state+1)& (0+255),b
  5986  0038FC  0E00               	movlw	0
  5987  0038FE  6FAE               	movwf	_state& (0+255),b
  5988                           
  5989                           ;main.c: 1107: assembly_step = 0;
  5990  003900  0E00               	movlw	0
  5991  003902  6FAD               	movwf	(_assembly_step+1)& (0+255),b
  5992  003904  0E00               	movlw	0
  5993  003906  6FAC               	movwf	_assembly_step& (0+255),b
  5994                           
  5995                           ;main.c: 1108: counter_step = 0;
  5996  003908  0E00               	movlw	0
  5997  00390A  6E6E               	movwf	_counter_step+1,c
  5998  00390C  0E00               	movlw	0
  5999  00390E  6E6D               	movwf	_counter_step,c
  6000                           
  6001                           ;main.c: 1110: valid = 0;
  6002  003910  0E00               	movlw	0
  6003  003912  6E6C               	movwf	_valid+1,c
  6004  003914  0E00               	movlw	0
  6005  003916  6E6B               	movwf	_valid,c
  6006                           
  6007                           ;main.c: 1111: number = 0;
  6008  003918  0E00               	movlw	0
  6009  00391A  6E7E               	movwf	_number+1,c
  6010  00391C  0E00               	movlw	0
  6011  00391E  6E7D               	movwf	_number,c
  6012                           
  6013                           ;main.c: 1112: total_number=0;
  6014  003920  0E00               	movlw	0
  6015  003922  6E6A               	movwf	_total_number+1,c
  6016  003924  0E00               	movlw	0
  6017  003926  6E69               	movwf	_total_number,c
  6018                           
  6019                           ;main.c: 1114: B=0,N=0,S=0,W=0;
  6020  003928  0E00               	movlw	0
  6021  00392A  6E66               	movwf	_B+1,c
  6022  00392C  0E00               	movlw	0
  6023  00392E  6E65               	movwf	_B,c
  6024  003930  0E00               	movlw	0
  6025  003932  6E64               	movwf	_N+1,c
  6026  003934  0E00               	movlw	0
  6027  003936  6E63               	movwf	_N,c
  6028  003938  0E00               	movlw	0
  6029  00393A  6E62               	movwf	_S+1,c
  6030  00393C  0E00               	movlw	0
  6031  00393E  6E61               	movwf	_S,c
  6032  003940  0E00               	movlw	0
  6033  003942  6E60               	movwf	_W+1,c
  6034  003944  0E00               	movlw	0
  6035  003946  6E5F               	movwf	_W,c
  6036                           
  6037                           ;main.c: 1116: B_counter= 0;
  6038  003948  0E00               	movlw	0
  6039  00394A  6FAB               	movwf	(_B_counter+1)& (0+255),b
  6040  00394C  0E00               	movlw	0
  6041  00394E  6FAA               	movwf	_B_counter& (0+255),b
  6042                           
  6043                           ;main.c: 1117: S_counter= 0;
  6044  003950  0E00               	movlw	0
  6045  003952  6FA9               	movwf	(_S_counter+1)& (0+255),b
  6046  003954  0E00               	movlw	0
  6047  003956  6FA8               	movwf	_S_counter& (0+255),b
  6048                           
  6049                           ;main.c: 1118: N_counter= 0;
  6050  003958  0E00               	movlw	0
  6051  00395A  6FA7               	movwf	(_N_counter+1)& (0+255),b
  6052  00395C  0E00               	movlw	0
  6053  00395E  6FA6               	movwf	_N_counter& (0+255),b
  6054                           
  6055                           ;main.c: 1119: W_counter= 0;
  6056  003960  0E00               	movlw	0
  6057  003962  6FA5               	movwf	(_W_counter+1)& (0+255),b
  6058  003964  0E00               	movlw	0
  6059  003966  6FA4               	movwf	_W_counter& (0+255),b
  6060                           
  6061                           ;main.c: 1122: initial_time = 0;
  6062  003968  0E00               	movlw	0
  6063  00396A  0101               	movlb	1	; () banked
  6064  00396C  6F69               	movwf	(_initial_time+1)& (0+255),b
  6065  00396E  0E00               	movlw	0
  6066  003970  6F68               	movwf	_initial_time& (0+255),b
  6067                           
  6068                           ;main.c: 1123: final_time = 0;
  6069  003972  0E00               	movlw	0
  6070  003974  6F61               	movwf	(_final_time+1)& (0+255),b
  6071  003976  0E00               	movlw	0
  6072  003978  6F60               	movwf	_final_time& (0+255),b
  6073                           
  6074                           ;main.c: 1125: for (i=0;i<8;i++){
  6075  00397A  0E00               	movlw	0
  6076  00397C  0100               	movlb	0	; () banked
  6077  00397E  6FBF               	movwf	(_i+1)& (0+255),b
  6078  003980  0E00               	movlw	0
  6079  003982  6FBE               	movwf	_i& (0+255),b
  6080  003984                     l4548:
  6081                           
  6082                           ; BSR set to: 0
  6083  003984  51BF               	movf	(_i+1)& (0+255),w,b
  6084  003986  E155               	bnz	l479
  6085  003988  0E08               	movlw	8
  6086  00398A  5DBE               	subwf	_i& (0+255),w,b
  6087  00398C  B0D8               	btfsc	status,0,c
  6088  00398E  0012               	return	
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;main.c: 1126: compartment_array[i] = 0;
  6092                           
  6093                           ; BSR set to: 0
  6094                           
  6095                           ; BSR set to: 0
  6096  003990  90D8               	bcf	status,0,c
  6097  003992  35BE               	rlcf	_i& (0+255),w,b
  6098  003994  6ED9               	movwf	fsr2l,c
  6099  003996  35BF               	rlcf	(_i+1)& (0+255),w,b
  6100  003998  6EDA               	movwf	fsr2h,c
  6101  00399A  0E80               	movlw	low _compartment_array
  6102  00399C  26D9               	addwf	fsr2l,f,c
  6103  00399E  0E00               	movlw	high _compartment_array
  6104  0039A0  22DA               	addwfc	fsr2h,f,c
  6105  0039A2  0E00               	movlw	0
  6106  0039A4  6EDE               	movwf	postinc2,c
  6107  0039A6  0E00               	movlw	0
  6108  0039A8  6EDD               	movwf	postdec2,c
  6109                           
  6110                           ;main.c: 1127: compartment_number[i] = 0;
  6111  0039AA  90D8               	bcf	status,0,c
  6112  0039AC  35BE               	rlcf	_i& (0+255),w,b
  6113  0039AE  6ED9               	movwf	fsr2l,c
  6114  0039B0  35BF               	rlcf	(_i+1)& (0+255),w,b
  6115  0039B2  6EDA               	movwf	fsr2h,c
  6116  0039B4  0E46               	movlw	low _compartment_number
  6117  0039B6  26D9               	addwf	fsr2l,f,c
  6118  0039B8  0E00               	movlw	high _compartment_number
  6119  0039BA  22DA               	addwfc	fsr2h,f,c
  6120  0039BC  0E00               	movlw	0
  6121  0039BE  6EDE               	movwf	postinc2,c
  6122  0039C0  0E00               	movlw	0
  6123  0039C2  6EDD               	movwf	postdec2,c
  6124                           
  6125                           ;main.c: 1128: B_array[i] = 0;
  6126  0039C4  90D8               	bcf	status,0,c
  6127  0039C6  35BE               	rlcf	_i& (0+255),w,b
  6128  0039C8  6ED9               	movwf	fsr2l,c
  6129  0039CA  35BF               	rlcf	(_i+1)& (0+255),w,b
  6130  0039CC  6EDA               	movwf	fsr2h,c
  6131  0039CE  0E30               	movlw	low _B_array
  6132  0039D0  26D9               	addwf	fsr2l,f,c
  6133  0039D2  0E01               	movlw	high _B_array
  6134  0039D4  22DA               	addwfc	fsr2h,f,c
  6135  0039D6  0E00               	movlw	0
  6136  0039D8  6EDE               	movwf	postinc2,c
  6137  0039DA  0E00               	movlw	0
  6138  0039DC  6EDD               	movwf	postdec2,c
  6139                           
  6140                           ;main.c: 1129: N_array[i] = 0;
  6141  0039DE  90D8               	bcf	status,0,c
  6142  0039E0  35BE               	rlcf	_i& (0+255),w,b
  6143  0039E2  6ED9               	movwf	fsr2l,c
  6144  0039E4  35BF               	rlcf	(_i+1)& (0+255),w,b
  6145  0039E6  6EDA               	movwf	fsr2h,c
  6146  0039E8  0E10               	movlw	low _N_array
  6147  0039EA  26D9               	addwf	fsr2l,f,c
  6148  0039EC  0E01               	movlw	high _N_array
  6149  0039EE  22DA               	addwfc	fsr2h,f,c
  6150  0039F0  0E00               	movlw	0
  6151  0039F2  6EDE               	movwf	postinc2,c
  6152  0039F4  0E00               	movlw	0
  6153  0039F6  6EDD               	movwf	postdec2,c
  6154                           
  6155                           ;main.c: 1130: S_array[i] = 0;
  6156  0039F8  90D8               	bcf	status,0,c
  6157  0039FA  35BE               	rlcf	_i& (0+255),w,b
  6158  0039FC  6ED9               	movwf	fsr2l,c
  6159  0039FE  35BF               	rlcf	(_i+1)& (0+255),w,b
  6160  003A00  6EDA               	movwf	fsr2h,c
  6161  003A02  0E20               	movlw	low _S_array
  6162  003A04  26D9               	addwf	fsr2l,f,c
  6163  003A06  0E01               	movlw	high _S_array
  6164  003A08  22DA               	addwfc	fsr2h,f,c
  6165  003A0A  0E00               	movlw	0
  6166  003A0C  6EDE               	movwf	postinc2,c
  6167  003A0E  0E00               	movlw	0
  6168  003A10  6EDD               	movwf	postdec2,c
  6169                           
  6170                           ;main.c: 1131: W_array[i] = 0;
  6171  003A12  90D8               	bcf	status,0,c
  6172  003A14  35BE               	rlcf	_i& (0+255),w,b
  6173  003A16  6ED9               	movwf	fsr2l,c
  6174  003A18  35BF               	rlcf	(_i+1)& (0+255),w,b
  6175  003A1A  6EDA               	movwf	fsr2h,c
  6176  003A1C  0E00               	movlw	low _W_array
  6177  003A1E  26D9               	addwf	fsr2l,f,c
  6178  003A20  0E01               	movlw	high _W_array
  6179  003A22  22DA               	addwfc	fsr2h,f,c
  6180  003A24  0E00               	movlw	0
  6181  003A26  6EDE               	movwf	postinc2,c
  6182  003A28  0E00               	movlw	0
  6183  003A2A  6EDD               	movwf	postdec2,c
  6184                           
  6185                           ; BSR set to: 0
  6186  003A2C  4BBE               	infsnz	_i& (0+255),f,b
  6187  003A2E  2BBF               	incf	(_i+1)& (0+255),f,b
  6188  003A30  D7A9               	goto	l4548
  6189  003A32                     l479:
  6190                           
  6191                           ; BSR set to: 0
  6192  003A32  0012               	return		;funcret
  6193  003A34                     __end_of_initialize:
  6194                           	opt stack 0
  6195                           tblptru	equ	0xFF8
  6196                           tblptrh	equ	0xFF7
  6197                           tblptrl	equ	0xFF6
  6198                           tablat	equ	0xFF5
  6199                           prodh	equ	0xFF4
  6200                           prodl	equ	0xFF3
  6201                           intcon	equ	0xFF2
  6202                           intcon3	equ	0xFF0
  6203                           indf0	equ	0xFEF
  6204                           postinc0	equ	0xFEE
  6205                           fsr0h	equ	0xFEA
  6206                           fsr0l	equ	0xFE9
  6207                           wreg	equ	0xFE8
  6208                           postdec1	equ	0xFE5
  6209                           fsr1l	equ	0xFE1
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           fsr2h	equ	0xFDA
  6213                           fsr2l	equ	0xFD9
  6214                           status	equ	0xFD8
  6215                           
  6216 ;; *************** function _initLCD *****************
  6217 ;; Defined at:
  6218 ;;		line 60 in file "lcd.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;		None
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;		None
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  1    wreg      void 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0, cstack
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;Total ram usage:        1 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    6
  6239 ;; This function calls:
  6240 ;;		_lcdInst
  6241 ;; This function is called by:
  6242 ;;		_main
  6243 ;;		_count_gear
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           	psect	text8
  6248  004308                     __ptext8:
  6249                           	opt stack 0
  6250  004308                     _initLCD:
  6251                           	opt stack 24
  6252                           
  6253                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;incstack = 0
  6257  004308  0EC3               	movlw	195
  6258  00430A  0100               	movlb	0	; () banked
  6259  00430C  6FCB               	movwf	??_initLCD& (0+255),b
  6260  00430E  0ECD               	movlw	205
  6261  004310                     u5517:
  6262  004310  2EE8               	decfsz	wreg,f,c
  6263  004312  D7FE               	bra	u5517
  6264  004314  2FCB               	decfsz	??_initLCD& (0+255),f,b
  6265  004316  D7FC               	bra	u5517
  6266                           
  6267                           ;lcd.c: 69: lcdInst(0b00110011);
  6268  004318  0E33               	movlw	51
  6269  00431A  EC27  F023         	call	_lcdInst
  6270                           
  6271                           ;lcd.c: 70: lcdInst(0b00110010);
  6272  00431E  0E32               	movlw	50
  6273  004320  EC27  F023         	call	_lcdInst
  6274                           
  6275                           ;lcd.c: 71: lcdInst(0b00101000);
  6276  004324  0E28               	movlw	40
  6277  004326  EC27  F023         	call	_lcdInst
  6278                           
  6279                           ;lcd.c: 72: lcdInst(0b00001111);
  6280  00432A  0E0F               	movlw	15
  6281  00432C  EC27  F023         	call	_lcdInst
  6282                           
  6283                           ;lcd.c: 73: lcdInst(0b00000110);
  6284  004330  0E06               	movlw	6
  6285  004332  EC27  F023         	call	_lcdInst
  6286                           
  6287                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6288  004336  0E01               	movlw	1
  6289  004338  EC27  F023         	call	_lcdInst
  6290  00433C  0EC3               	movlw	195
  6291  00433E  0100               	movlb	0	; () banked
  6292  004340  6FCB               	movwf	??_initLCD& (0+255),b
  6293  004342  0ECD               	movlw	205
  6294  004344                     u5527:
  6295  004344  2EE8               	decfsz	wreg,f,c
  6296  004346  D7FE               	bra	u5527
  6297  004348  2FCB               	decfsz	??_initLCD& (0+255),f,b
  6298  00434A  D7FC               	bra	u5527
  6299                           
  6300                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6301  00434C  0E0F               	movlw	15
  6302  00434E  EC27  F023         	call	_lcdInst
  6303  004352  0012               	return		;funcret
  6304  004354                     __end_of_initLCD:
  6305                           	opt stack 0
  6306                           tblptru	equ	0xFF8
  6307                           tblptrh	equ	0xFF7
  6308                           tblptrl	equ	0xFF6
  6309                           tablat	equ	0xFF5
  6310                           prodh	equ	0xFF4
  6311                           prodl	equ	0xFF3
  6312                           intcon	equ	0xFF2
  6313                           intcon3	equ	0xFF0
  6314                           indf0	equ	0xFEF
  6315                           postinc0	equ	0xFEE
  6316                           fsr0h	equ	0xFEA
  6317                           fsr0l	equ	0xFE9
  6318                           wreg	equ	0xFE8
  6319                           postdec1	equ	0xFE5
  6320                           fsr1l	equ	0xFE1
  6321                           postinc2	equ	0xFDE
  6322                           postdec2	equ	0xFDD
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function _lcdInst *****************
  6328 ;; Defined at:
  6329 ;;		line 11 in file "lcd.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  data            1    wreg     unsigned char 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  data            1    2[BANK0 ] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;                  1    wreg      void 
  6336 ;; Registers used:
  6337 ;;		wreg, status,2, status,0, cstack
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;Total ram usage:        1 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    5
  6350 ;; This function calls:
  6351 ;;		_lcdNibble
  6352 ;; This function is called by:
  6353 ;;		_initLCD
  6354 ;;		_main
  6355 ;;		_lcd_set_cursor
  6356 ;;		_lcd_shift_cursor
  6357 ;;		_lcd_shift_display
  6358 ;;		_count_gear
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text9
  6363  00464E                     __ptext9:
  6364                           	opt stack 0
  6365  00464E                     _lcdInst:
  6366                           	opt stack 25
  6367                           
  6368                           ;incstack = 0
  6369                           ;lcdInst@data stored from wreg
  6370  00464E  0100               	movlb	0	; () banked
  6371  004650  6FCA               	movwf	lcdInst@data& (0+255),b
  6372                           
  6373                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  6374  004652  948C               	bcf	3980,2,c	;volatile
  6375                           
  6376                           ;lcd.c: 20: lcdNibble(data);
  6377  004654  0100               	movlb	0	; () banked
  6378  004656  51CA               	movf	lcdInst@data& (0+255),w,b
  6379  004658  EC5A  F01E         	call	_lcdNibble
  6380                           
  6381                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6382  00465C  0EC8               	movlw	200
  6383  00465E                     u5537:
  6384  00465E  D000               	nop2	
  6385  004660  2EE8               	decfsz	wreg,f,c
  6386  004662  D7FD               	bra	u5537
  6387  004664  0012               	return		;funcret
  6388  004666                     __end_of_lcdInst:
  6389                           	opt stack 0
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodh	equ	0xFF4
  6395                           prodl	equ	0xFF3
  6396                           intcon	equ	0xFF2
  6397                           intcon3	equ	0xFF0
  6398                           indf0	equ	0xFEF
  6399                           postinc0	equ	0xFEE
  6400                           fsr0h	equ	0xFEA
  6401                           fsr0l	equ	0xFE9
  6402                           wreg	equ	0xFE8
  6403                           postdec1	equ	0xFE5
  6404                           fsr1l	equ	0xFE1
  6405                           postinc2	equ	0xFDE
  6406                           postdec2	equ	0xFDD
  6407                           fsr2h	equ	0xFDA
  6408                           fsr2l	equ	0xFD9
  6409                           status	equ	0xFD8
  6410                           
  6411 ;; *************** function _lcdNibble *****************
  6412 ;; Defined at:
  6413 ;;		line 37 in file "lcd.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  data            1    wreg     unsigned char 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;  data            1    1[BANK0 ] unsigned char 
  6418 ;;  temp            1    0[BANK0 ] unsigned char 
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg, status,2, status,0
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;Total ram usage:        2 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:    4
  6435 ;; This function calls:
  6436 ;;		Nothing
  6437 ;; This function is called by:
  6438 ;;		_lcdInst
  6439 ;;		_putch
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text10
  6444  003CB4                     __ptext10:
  6445                           	opt stack 0
  6446  003CB4                     _lcdNibble:
  6447                           	opt stack 24
  6448                           
  6449                           ;incstack = 0
  6450                           ;lcdNibble@data stored from wreg
  6451  003CB4  0100               	movlb	0	; () banked
  6452  003CB6  6FC9               	movwf	lcdNibble@data& (0+255),b
  6453                           
  6454                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  6455  003CB8  0100               	movlb	0	; () banked
  6456  003CBA  51C9               	movf	lcdNibble@data& (0+255),w,b
  6457  003CBC  0BF0               	andlw	240
  6458  003CBE  6FC8               	movwf	lcdNibble@temp& (0+255),b
  6459                           
  6460                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  6461  003CC0  508C               	movf	3980,w,c	;volatile
  6462  003CC2  0B0F               	andlw	15
  6463  003CC4  6E8C               	movwf	3980,c	;volatile
  6464                           
  6465                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  6466  003CC6  51C8               	movf	lcdNibble@temp& (0+255),w,b
  6467  003CC8  108C               	iorwf	3980,w,c	;volatile
  6468  003CCA  6E8C               	movwf	3980,c	;volatile
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6472  003CCC  0E00               	movlw	0
  6473  003CCE  BEF2               	btfsc	intcon,7,c	;volatile
  6474  003CD0  0E01               	movlw	1
  6475  003CD2  6FC2               	movwf	_LCDinterruptState& (0+255),b
  6476                           
  6477                           ; BSR set to: 0
  6478  003CD4  9EF2               	bcf	intcon,7,c	;volatile
  6479                           
  6480                           ; BSR set to: 0
  6481  003CD6  868C               	bsf	3980,3,c	;volatile
  6482                           
  6483                           ; BSR set to: 0
  6484  003CD8  0E53               	movlw	83
  6485  003CDA                     u5547:
  6486  003CDA  2EE8               	decfsz	wreg,f,c
  6487  003CDC  D7FE               	bra	u5547
  6488  003CDE  F000               	nop	
  6489  003CE0  968C               	bcf	3980,3,c	;volatile
  6490  003CE2  0EC8               	movlw	200
  6491  003CE4                     u5557:
  6492  003CE4  D000               	nop2	
  6493  003CE6  2EE8               	decfsz	wreg,f,c
  6494  003CE8  D7FD               	bra	u5557
  6495  003CEA  0100               	movlb	0	; () banked
  6496  003CEC  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
  6497  003CEE  D002               	bra	u2505
  6498  003CF0  9EF2               	bcf	intcon,7,c	;volatile
  6499  003CF2  D001               	bra	u2506
  6500  003CF4                     u2505:
  6501  003CF4  8EF2               	bsf	intcon,7,c	;volatile
  6502  003CF6                     u2506:
  6503                           
  6504                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  6505  003CF6  0100               	movlb	0	; () banked
  6506  003CF8  39C9               	swapf	lcdNibble@data& (0+255),w,b
  6507  003CFA  0BF0               	andlw	240
  6508  003CFC  6FC9               	movwf	lcdNibble@data& (0+255),b
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  6512  003CFE  51C9               	movf	lcdNibble@data& (0+255),w,b
  6513  003D00  0BF0               	andlw	240
  6514  003D02  6FC8               	movwf	lcdNibble@temp& (0+255),b
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  6518  003D04  508C               	movf	3980,w,c	;volatile
  6519  003D06  0B0F               	andlw	15
  6520  003D08  6E8C               	movwf	3980,c	;volatile
  6521                           
  6522                           ; BSR set to: 0
  6523                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  6524  003D0A  51C8               	movf	lcdNibble@temp& (0+255),w,b
  6525  003D0C  108C               	iorwf	3980,w,c	;volatile
  6526  003D0E  6E8C               	movwf	3980,c	;volatile
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6530  003D10  0E00               	movlw	0
  6531  003D12  BEF2               	btfsc	intcon,7,c	;volatile
  6532  003D14  0E01               	movlw	1
  6533  003D16  6FC2               	movwf	_LCDinterruptState& (0+255),b
  6534                           
  6535                           ; BSR set to: 0
  6536  003D18  9EF2               	bcf	intcon,7,c	;volatile
  6537                           
  6538                           ; BSR set to: 0
  6539  003D1A  868C               	bsf	3980,3,c	;volatile
  6540                           
  6541                           ; BSR set to: 0
  6542  003D1C  0E53               	movlw	83
  6543  003D1E                     u5567:
  6544  003D1E  2EE8               	decfsz	wreg,f,c
  6545  003D20  D7FE               	bra	u5567
  6546  003D22  F000               	nop	
  6547  003D24  968C               	bcf	3980,3,c	;volatile
  6548  003D26  0EC8               	movlw	200
  6549  003D28                     u5577:
  6550  003D28  D000               	nop2	
  6551  003D2A  2EE8               	decfsz	wreg,f,c
  6552  003D2C  D7FD               	bra	u5577
  6553  003D2E  0100               	movlb	0	; () banked
  6554  003D30  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
  6555  003D32  D002               	bra	u2515
  6556  003D34  9EF2               	bcf	intcon,7,c	;volatile
  6557  003D36  D001               	bra	u2516
  6558  003D38                     u2515:
  6559  003D38  8EF2               	bsf	intcon,7,c	;volatile
  6560  003D3A                     u2516:
  6561  003D3A  0012               	return		;funcret
  6562  003D3C                     __end_of_lcdNibble:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           intcon3	equ	0xFF0
  6572                           indf0	equ	0xFEF
  6573                           postinc0	equ	0xFEE
  6574                           fsr0h	equ	0xFEA
  6575                           fsr0l	equ	0xFE9
  6576                           wreg	equ	0xFE8
  6577                           postdec1	equ	0xFE5
  6578                           fsr1l	equ	0xFE1
  6579                           postinc2	equ	0xFDE
  6580                           postdec2	equ	0xFDD
  6581                           fsr2h	equ	0xFDA
  6582                           fsr2l	equ	0xFD9
  6583                           status	equ	0xFD8
  6584                           
  6585 ;; *************** function _get_RTC_initial *****************
  6586 ;; Defined at:
  6587 ;;		line 1237 in file "main.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;		None
  6590 ;; Auto vars:     Size  Location     Type
  6591 ;;		None
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  1    wreg      void 
  6594 ;; Registers used:
  6595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;Total ram usage:        1 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:    6
  6608 ;; This function calls:
  6609 ;;		_I2C_Master_Read
  6610 ;;		_I2C_Master_Start
  6611 ;;		_I2C_Master_Stop
  6612 ;;		_I2C_Master_Write
  6613 ;;		___awdiv
  6614 ;;		___wmul
  6615 ;; This function is called by:
  6616 ;;		_main
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           	psect	text11
  6621  003B7C                     __ptext11:
  6622                           	opt stack 0
  6623  003B7C                     _get_RTC_initial:
  6624                           	opt stack 24
  6625                           
  6626                           ;main.c: 1239: I2C_Master_Start();
  6627                           
  6628                           ;incstack = 0
  6629  003B7C  EC75  F023         	call	_I2C_Master_Start	;wreg free
  6630                           
  6631                           ;main.c: 1240: I2C_Master_Write(0b11010000);
  6632  003B80  0E00               	movlw	0
  6633  003B82  0100               	movlb	0	; () banked
  6634  003B84  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6635  003B86  0ED0               	movlw	208
  6636  003B88  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6637  003B8A  EC67  F023         	call	_I2C_Master_Write	;wreg free
  6638                           
  6639                           ;main.c: 1241: I2C_Master_Write(0x00);
  6640  003B8E  0E00               	movlw	0
  6641  003B90  0100               	movlb	0	; () banked
  6642  003B92  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6643  003B94  0E00               	movlw	0
  6644  003B96  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6645  003B98  EC67  F023         	call	_I2C_Master_Write	;wreg free
  6646                           
  6647                           ;main.c: 1242: I2C_Master_Stop();
  6648  003B9C  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  6649                           
  6650                           ;main.c: 1245: I2C_Master_Start();
  6651  003BA0  EC75  F023         	call	_I2C_Master_Start	;wreg free
  6652                           
  6653                           ;main.c: 1246: I2C_Master_Write(0b11010001);
  6654  003BA4  0E00               	movlw	0
  6655  003BA6  0100               	movlb	0	; () banked
  6656  003BA8  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6657  003BAA  0ED1               	movlw	209
  6658  003BAC  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6659  003BAE  EC67  F023         	call	_I2C_Master_Write	;wreg free
  6660                           
  6661                           ;main.c: 1247: for(i = 0; i < 6; i++){
  6662  003BB2  0E00               	movlw	0
  6663  003BB4  0100               	movlb	0	; () banked
  6664  003BB6  6FBF               	movwf	(_i+1)& (0+255),b
  6665  003BB8  0E00               	movlw	0
  6666  003BBA  6FBE               	movwf	_i& (0+255),b
  6667  003BBC                     l4468:
  6668                           
  6669                           ; BSR set to: 0
  6670  003BBC  51BF               	movf	(_i+1)& (0+255),w,b
  6671  003BBE  E112               	bnz	l4478
  6672  003BC0  0E06               	movlw	6
  6673  003BC2  5DBE               	subwf	_i& (0+255),w,b
  6674  003BC4  B0D8               	btfsc	status,0,c
  6675  003BC6  D00E               	goto	u3200
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;main.c: 1248: time[i] = I2C_Master_Read(0);
  6679                           
  6680                           ; BSR set to: 0
  6681                           
  6682                           ; BSR set to: 0
  6683  003BC8  0E56               	movlw	low _time
  6684  003BCA  25BE               	addwf	_i& (0+255),w,b
  6685  003BCC  6ED9               	movwf	fsr2l,c
  6686  003BCE  0E00               	movlw	high _time
  6687  003BD0  21BF               	addwfc	(_i+1)& (0+255),w,b
  6688  003BD2  6EDA               	movwf	fsr2h,c
  6689  003BD4  0E00               	movlw	0
  6690  003BD6  EC99  F022         	call	_I2C_Master_Read
  6691  003BDA  6EDF               	movwf	indf2,c
  6692  003BDC  0100               	movlb	0	; () banked
  6693  003BDE  4BBE               	infsnz	_i& (0+255),f,b
  6694  003BE0  2BBF               	incf	(_i+1)& (0+255),f,b
  6695  003BE2  D7EC               	goto	l4468
  6696  003BE4                     u3200:
  6697  003BE4                     l4478:
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;main.c: 1249: }
  6701                           ;main.c: 1250: time[6] = I2C_Master_Read(1);
  6702  003BE4  0E01               	movlw	1
  6703  003BE6  EC99  F022         	call	_I2C_Master_Read
  6704  003BEA  6E5C               	movwf	_time+6,c
  6705                           
  6706                           ;main.c: 1251: I2C_Master_Stop();
  6707  003BEC  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  6708                           
  6709                           ;main.c: 1253: hr_initial = time[2]/16*10+time[2]%16;
  6710  003BF0  C058  F0D6         	movff	_time+2,??_get_RTC_initial
  6711  003BF4  0E0F               	movlw	15
  6712  003BF6  0100               	movlb	0	; () banked
  6713  003BF8  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6714  003BFA  0E00               	movlw	0
  6715  003BFC  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6716  003BFE  0E10               	movlw	16
  6717  003C00  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6718  003C02  C058  F0C8         	movff	_time+2,___awdiv@dividend
  6719  003C06  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6720  003C08  EC9E  F01E         	call	___awdiv	;wreg free
  6721  003C0C  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6722  003C10  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6723  003C14  0E00               	movlw	0
  6724  003C16  0100               	movlb	0	; () banked
  6725  003C18  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6726  003C1A  0E0A               	movlw	10
  6727  003C1C  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6728  003C1E  ECAE  F022         	call	___wmul	;wreg free
  6729  003C22  0100               	movlb	0	; () banked
  6730  003C24  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6731  003C26  25D0               	addwf	?___wmul& (0+255),w,b
  6732  003C28  6F92               	movwf	_hr_initial& (0+255),b
  6733  003C2A  0E00               	movlw	0
  6734  003C2C  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6735  003C2E  6F93               	movwf	(_hr_initial+1)& (0+255),b
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;main.c: 1254: min_initial = time[1]/16*10 + time[1]%16;
  6739  003C30  C057  F0D6         	movff	_time+1,??_get_RTC_initial
  6740  003C34  0E0F               	movlw	15
  6741  003C36  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6742  003C38  0E00               	movlw	0
  6743  003C3A  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6744  003C3C  0E10               	movlw	16
  6745  003C3E  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6746  003C40  C057  F0C8         	movff	_time+1,___awdiv@dividend
  6747  003C44  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6748  003C46  EC9E  F01E         	call	___awdiv	;wreg free
  6749  003C4A  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6750  003C4E  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6751  003C52  0E00               	movlw	0
  6752  003C54  0100               	movlb	0	; () banked
  6753  003C56  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6754  003C58  0E0A               	movlw	10
  6755  003C5A  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6756  003C5C  ECAE  F022         	call	___wmul	;wreg free
  6757  003C60  0100               	movlb	0	; () banked
  6758  003C62  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6759  003C64  25D0               	addwf	?___wmul& (0+255),w,b
  6760  003C66  6F90               	movwf	_min_initial& (0+255),b
  6761  003C68  0E00               	movlw	0
  6762  003C6A  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6763  003C6C  6F91               	movwf	(_min_initial+1)& (0+255),b
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;main.c: 1255: sec_initial = time[0]/16*10 +time[0]%16;
  6767  003C6E  C056  F0D6         	movff	_time,??_get_RTC_initial
  6768  003C72  0E0F               	movlw	15
  6769  003C74  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6770  003C76  0E00               	movlw	0
  6771  003C78  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6772  003C7A  0E10               	movlw	16
  6773  003C7C  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6774  003C7E  C056  F0C8         	movff	_time,___awdiv@dividend
  6775  003C82  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6776  003C84  EC9E  F01E         	call	___awdiv	;wreg free
  6777  003C88  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6778  003C8C  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6779  003C90  0E00               	movlw	0
  6780  003C92  0100               	movlb	0	; () banked
  6781  003C94  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6782  003C96  0E0A               	movlw	10
  6783  003C98  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6784  003C9A  ECAE  F022         	call	___wmul	;wreg free
  6785  003C9E  0100               	movlb	0	; () banked
  6786  003CA0  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6787  003CA2  25D0               	addwf	?___wmul& (0+255),w,b
  6788  003CA4  0101               	movlb	1	; () banked
  6789  003CA6  6F6A               	movwf	_sec_initial& (0+255),b
  6790  003CA8  0100               	movlb	0	; () banked
  6791  003CAA  0E00               	movlw	0
  6792  003CAC  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6793  003CAE  0101               	movlb	1	; () banked
  6794  003CB0  6F6B               	movwf	(_sec_initial+1)& (0+255),b
  6795                           
  6796                           ; BSR set to: 1
  6797  003CB2  0012               	return		;funcret
  6798  003CB4                     __end_of_get_RTC_initial:
  6799                           	opt stack 0
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           intcon	equ	0xFF2
  6807                           intcon3	equ	0xFF0
  6808                           indf0	equ	0xFEF
  6809                           postinc0	equ	0xFEE
  6810                           fsr0h	equ	0xFEA
  6811                           fsr0l	equ	0xFE9
  6812                           wreg	equ	0xFE8
  6813                           postdec1	equ	0xFE5
  6814                           fsr1l	equ	0xFE1
  6815                           indf2	equ	0xFDF
  6816                           postinc2	equ	0xFDE
  6817                           postdec2	equ	0xFDD
  6818                           fsr2h	equ	0xFDA
  6819                           fsr2l	equ	0xFD9
  6820                           status	equ	0xFD8
  6821                           
  6822 ;; *************** function _get_RTC_final *****************
  6823 ;; Defined at:
  6824 ;;		line 1258 in file "main.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;		None
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;		None
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      void 
  6831 ;; Registers used:
  6832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;Total ram usage:        1 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    6
  6845 ;; This function calls:
  6846 ;;		_I2C_Master_Read
  6847 ;;		_I2C_Master_Start
  6848 ;;		_I2C_Master_Stop
  6849 ;;		_I2C_Master_Write
  6850 ;;		___awdiv
  6851 ;;		___wmul
  6852 ;; This function is called by:
  6853 ;;		_main
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	text12
  6858  003A34                     __ptext12:
  6859                           	opt stack 0
  6860  003A34                     _get_RTC_final:
  6861                           	opt stack 24
  6862                           
  6863                           ;main.c: 1259: I2C_Master_Start();
  6864                           
  6865                           ; BSR set to: 1
  6866                           ;incstack = 0
  6867  003A34  EC75  F023         	call	_I2C_Master_Start	;wreg free
  6868                           
  6869                           ;main.c: 1260: I2C_Master_Write(0b11010000);
  6870  003A38  0E00               	movlw	0
  6871  003A3A  0100               	movlb	0	; () banked
  6872  003A3C  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6873  003A3E  0ED0               	movlw	208
  6874  003A40  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6875  003A42  EC67  F023         	call	_I2C_Master_Write	;wreg free
  6876                           
  6877                           ;main.c: 1261: I2C_Master_Write(0x00);
  6878  003A46  0E00               	movlw	0
  6879  003A48  0100               	movlb	0	; () banked
  6880  003A4A  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6881  003A4C  0E00               	movlw	0
  6882  003A4E  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6883  003A50  EC67  F023         	call	_I2C_Master_Write	;wreg free
  6884                           
  6885                           ;main.c: 1262: I2C_Master_Stop();
  6886  003A54  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  6887                           
  6888                           ;main.c: 1265: I2C_Master_Start();
  6889  003A58  EC75  F023         	call	_I2C_Master_Start	;wreg free
  6890                           
  6891                           ;main.c: 1266: I2C_Master_Write(0b11010001);
  6892  003A5C  0E00               	movlw	0
  6893  003A5E  0100               	movlb	0	; () banked
  6894  003A60  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6895  003A62  0ED1               	movlw	209
  6896  003A64  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6897  003A66  EC67  F023         	call	_I2C_Master_Write	;wreg free
  6898                           
  6899                           ;main.c: 1267: for(i = 0; i < 6; i++){
  6900  003A6A  0E00               	movlw	0
  6901  003A6C  0100               	movlb	0	; () banked
  6902  003A6E  6FBF               	movwf	(_i+1)& (0+255),b
  6903  003A70  0E00               	movlw	0
  6904  003A72  6FBE               	movwf	_i& (0+255),b
  6905  003A74                     l4528:
  6906                           
  6907                           ; BSR set to: 0
  6908  003A74  51BF               	movf	(_i+1)& (0+255),w,b
  6909  003A76  E112               	bnz	l4538
  6910  003A78  0E06               	movlw	6
  6911  003A7A  5DBE               	subwf	_i& (0+255),w,b
  6912  003A7C  B0D8               	btfsc	status,0,c
  6913  003A7E  D00E               	goto	u3240
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;main.c: 1268: time[i] = I2C_Master_Read(0);
  6917                           
  6918                           ; BSR set to: 0
  6919                           
  6920                           ; BSR set to: 0
  6921  003A80  0E56               	movlw	low _time
  6922  003A82  25BE               	addwf	_i& (0+255),w,b
  6923  003A84  6ED9               	movwf	fsr2l,c
  6924  003A86  0E00               	movlw	high _time
  6925  003A88  21BF               	addwfc	(_i+1)& (0+255),w,b
  6926  003A8A  6EDA               	movwf	fsr2h,c
  6927  003A8C  0E00               	movlw	0
  6928  003A8E  EC99  F022         	call	_I2C_Master_Read
  6929  003A92  6EDF               	movwf	indf2,c
  6930  003A94  0100               	movlb	0	; () banked
  6931  003A96  4BBE               	infsnz	_i& (0+255),f,b
  6932  003A98  2BBF               	incf	(_i+1)& (0+255),f,b
  6933  003A9A  D7EC               	goto	l4528
  6934  003A9C                     u3240:
  6935  003A9C                     l4538:
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;main.c: 1269: }
  6939                           ;main.c: 1270: time[6] = I2C_Master_Read(1);
  6940  003A9C  0E01               	movlw	1
  6941  003A9E  EC99  F022         	call	_I2C_Master_Read
  6942  003AA2  6E5C               	movwf	_time+6,c
  6943                           
  6944                           ;main.c: 1271: I2C_Master_Stop();
  6945  003AA4  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  6946                           
  6947                           ;main.c: 1273: hr_final = time[2]/16*10+time[2]%16;
  6948  003AA8  C058  F0D6         	movff	_time+2,??_get_RTC_final
  6949  003AAC  0E0F               	movlw	15
  6950  003AAE  0100               	movlb	0	; () banked
  6951  003AB0  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  6952  003AB2  0E00               	movlw	0
  6953  003AB4  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6954  003AB6  0E10               	movlw	16
  6955  003AB8  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6956  003ABA  C058  F0C8         	movff	_time+2,___awdiv@dividend
  6957  003ABE  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6958  003AC0  EC9E  F01E         	call	___awdiv	;wreg free
  6959  003AC4  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6960  003AC8  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6961  003ACC  0E00               	movlw	0
  6962  003ACE  0100               	movlb	0	; () banked
  6963  003AD0  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6964  003AD2  0E0A               	movlw	10
  6965  003AD4  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6966  003AD6  ECAE  F022         	call	___wmul	;wreg free
  6967  003ADA  0100               	movlb	0	; () banked
  6968  003ADC  51D6               	movf	??_get_RTC_final& (0+255),w,b
  6969  003ADE  25D0               	addwf	?___wmul& (0+255),w,b
  6970  003AE0  0101               	movlb	1	; () banked
  6971  003AE2  6F66               	movwf	_hr_final& (0+255),b
  6972  003AE4  0100               	movlb	0	; () banked
  6973  003AE6  0E00               	movlw	0
  6974  003AE8  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6975  003AEA  0101               	movlb	1	; () banked
  6976  003AEC  6F67               	movwf	(_hr_final+1)& (0+255),b
  6977                           
  6978                           ; BSR set to: 1
  6979                           ;main.c: 1274: min_final = time[1]/16*10 + time[1]%16;
  6980  003AEE  C057  F0D6         	movff	_time+1,??_get_RTC_final
  6981  003AF2  0E0F               	movlw	15
  6982  003AF4  0100               	movlb	0	; () banked
  6983  003AF6  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  6984  003AF8  0E00               	movlw	0
  6985  003AFA  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6986  003AFC  0E10               	movlw	16
  6987  003AFE  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6988  003B00  C057  F0C8         	movff	_time+1,___awdiv@dividend
  6989  003B04  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6990  003B06  EC9E  F01E         	call	___awdiv	;wreg free
  6991  003B0A  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6992  003B0E  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6993  003B12  0E00               	movlw	0
  6994  003B14  0100               	movlb	0	; () banked
  6995  003B16  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6996  003B18  0E0A               	movlw	10
  6997  003B1A  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6998  003B1C  ECAE  F022         	call	___wmul	;wreg free
  6999  003B20  0100               	movlb	0	; () banked
  7000  003B22  51D6               	movf	??_get_RTC_final& (0+255),w,b
  7001  003B24  25D0               	addwf	?___wmul& (0+255),w,b
  7002  003B26  0101               	movlb	1	; () banked
  7003  003B28  6F64               	movwf	_min_final& (0+255),b
  7004  003B2A  0100               	movlb	0	; () banked
  7005  003B2C  0E00               	movlw	0
  7006  003B2E  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7007  003B30  0101               	movlb	1	; () banked
  7008  003B32  6F65               	movwf	(_min_final+1)& (0+255),b
  7009                           
  7010                           ; BSR set to: 1
  7011                           ;main.c: 1275: sec_final = time[0]/16*10 + time[0]%16;
  7012  003B34  C056  F0D6         	movff	_time,??_get_RTC_final
  7013  003B38  0E0F               	movlw	15
  7014  003B3A  0100               	movlb	0	; () banked
  7015  003B3C  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  7016  003B3E  0E00               	movlw	0
  7017  003B40  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7018  003B42  0E10               	movlw	16
  7019  003B44  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7020  003B46  C056  F0C8         	movff	_time,___awdiv@dividend
  7021  003B4A  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7022  003B4C  EC9E  F01E         	call	___awdiv	;wreg free
  7023  003B50  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7024  003B54  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7025  003B58  0E00               	movlw	0
  7026  003B5A  0100               	movlb	0	; () banked
  7027  003B5C  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7028  003B5E  0E0A               	movlw	10
  7029  003B60  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7030  003B62  ECAE  F022         	call	___wmul	;wreg free
  7031  003B66  0100               	movlb	0	; () banked
  7032  003B68  51D6               	movf	??_get_RTC_final& (0+255),w,b
  7033  003B6A  25D0               	addwf	?___wmul& (0+255),w,b
  7034  003B6C  0101               	movlb	1	; () banked
  7035  003B6E  6F62               	movwf	_sec_final& (0+255),b
  7036  003B70  0100               	movlb	0	; () banked
  7037  003B72  0E00               	movlw	0
  7038  003B74  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7039  003B76  0101               	movlb	1	; () banked
  7040  003B78  6F63               	movwf	(_sec_final+1)& (0+255),b
  7041                           
  7042                           ; BSR set to: 1
  7043  003B7A  0012               	return		;funcret
  7044  003B7C                     __end_of_get_RTC_final:
  7045                           	opt stack 0
  7046                           tblptru	equ	0xFF8
  7047                           tblptrh	equ	0xFF7
  7048                           tblptrl	equ	0xFF6
  7049                           tablat	equ	0xFF5
  7050                           prodh	equ	0xFF4
  7051                           prodl	equ	0xFF3
  7052                           intcon	equ	0xFF2
  7053                           intcon3	equ	0xFF0
  7054                           indf0	equ	0xFEF
  7055                           postinc0	equ	0xFEE
  7056                           fsr0h	equ	0xFEA
  7057                           fsr0l	equ	0xFE9
  7058                           wreg	equ	0xFE8
  7059                           postdec1	equ	0xFE5
  7060                           fsr1l	equ	0xFE1
  7061                           indf2	equ	0xFDF
  7062                           postinc2	equ	0xFDE
  7063                           postdec2	equ	0xFDD
  7064                           fsr2h	equ	0xFDA
  7065                           fsr2l	equ	0xFD9
  7066                           status	equ	0xFD8
  7067                           
  7068 ;; *************** function ___wmul *****************
  7069 ;; Defined at:
  7070 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  multiplier      2    8[BANK0 ] unsigned int 
  7073 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;  product         2   12[BANK0 ] unsigned int 
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  2    8[BANK0 ] unsigned int 
  7078 ;; Registers used:
  7079 ;;		wreg, status,2, status,0, prodl, prodh
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;Total ram usage:        6 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:    4
  7092 ;; This function calls:
  7093 ;;		Nothing
  7094 ;; This function is called by:
  7095 ;;		_main
  7096 ;;		_get_RTC_initial
  7097 ;;		_get_RTC_final
  7098 ;;		_printf
  7099 ;;		_store_prev
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           	psect	text13
  7104  00455C                     __ptext13:
  7105                           	opt stack 0
  7106  00455C                     ___wmul:
  7107                           	opt stack 25
  7108                           
  7109                           ; BSR set to: 1
  7110                           ;incstack = 0
  7111  00455C  0100               	movlb	0	; () banked
  7112  00455E  51D0               	movf	___wmul@multiplier& (0+255),w,b
  7113  004560  03D2               	mulwf	___wmul@multiplicand& (0+255),b
  7114  004562  CFF3 F0D4          	movff	prodl,___wmul@product
  7115  004566  CFF4 F0D5          	movff	prodh,___wmul@product+1
  7116  00456A  51D0               	movf	___wmul@multiplier& (0+255),w,b
  7117  00456C  03D3               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7118  00456E  50F3               	movf	prodl,w,c
  7119  004570  27D5               	addwf	(___wmul@product+1)& (0+255),f,b
  7120  004572  51D1               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7121  004574  03D2               	mulwf	___wmul@multiplicand& (0+255),b
  7122  004576  50F3               	movf	prodl,w,c
  7123  004578  27D5               	addwf	(___wmul@product+1)& (0+255),f,b
  7124                           
  7125                           ; BSR set to: 0
  7126  00457A  C0D4  F0D0         	movff	___wmul@product,?___wmul
  7127  00457E  C0D5  F0D1         	movff	___wmul@product+1,?___wmul+1
  7128  004582  0012               	return	
  7129  004584                     __end_of___wmul:
  7130                           	opt stack 0
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           intcon3	equ	0xFF0
  7139                           indf0	equ	0xFEF
  7140                           postinc0	equ	0xFEE
  7141                           fsr0h	equ	0xFEA
  7142                           fsr0l	equ	0xFE9
  7143                           wreg	equ	0xFE8
  7144                           postdec1	equ	0xFE5
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153 ;; *************** function ___awdiv *****************
  7154 ;; Defined at:
  7155 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;  dividend        2    0[BANK0 ] int 
  7158 ;;  divisor         2    2[BANK0 ] int 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  quotient        2    6[BANK0 ] int 
  7161 ;;  sign            1    5[BANK0 ] unsigned char 
  7162 ;;  counter         1    4[BANK0 ] unsigned char 
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  2    0[BANK0 ] int 
  7165 ;; Registers used:
  7166 ;;		wreg, status,2, status,0
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7172 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;Total ram usage:        8 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    4
  7179 ;; This function calls:
  7180 ;;		Nothing
  7181 ;; This function is called by:
  7182 ;;		_get_RTC_initial
  7183 ;;		_get_RTC_final
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text14
  7188  003D3C                     __ptext14:
  7189                           	opt stack 0
  7190  003D3C                     ___awdiv:
  7191                           	opt stack 25
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;incstack = 0
  7195  003D3C  0E00               	movlw	0
  7196  003D3E  0100               	movlb	0	; () banked
  7197  003D40  6FCD               	movwf	___awdiv@sign& (0+255),b
  7198                           
  7199                           ; BSR set to: 0
  7200  003D42  AFCB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7201  003D44  D006               	goto	l1075
  7202                           
  7203                           ; BSR set to: 0
  7204  003D46  6DCA               	negf	___awdiv@divisor& (0+255),b
  7205  003D48  1FCB               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7206  003D4A  B0D8               	btfsc	status,0,c
  7207  003D4C  2BCB               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7208                           
  7209                           ; BSR set to: 0
  7210  003D4E  0E01               	movlw	1
  7211  003D50  6FCD               	movwf	___awdiv@sign& (0+255),b
  7212  003D52                     l1075:
  7213                           
  7214                           ; BSR set to: 0
  7215                           
  7216                           ; BSR set to: 0
  7217  003D52  AFC9               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7218  003D54  D006               	goto	l1076
  7219                           
  7220                           ; BSR set to: 0
  7221  003D56  6DC8               	negf	___awdiv@dividend& (0+255),b
  7222  003D58  1FC9               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7223  003D5A  B0D8               	btfsc	status,0,c
  7224  003D5C  2BC9               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7225                           
  7226                           ; BSR set to: 0
  7227  003D5E  0E01               	movlw	1
  7228  003D60  1BCD               	xorwf	___awdiv@sign& (0+255),f,b
  7229  003D62                     l1076:
  7230                           
  7231                           ; BSR set to: 0
  7232                           
  7233                           ; BSR set to: 0
  7234  003D62  0E00               	movlw	0
  7235  003D64  6FCF               	movwf	(___awdiv@quotient+1)& (0+255),b
  7236  003D66  0E00               	movlw	0
  7237  003D68  6FCE               	movwf	___awdiv@quotient& (0+255),b
  7238                           
  7239                           ; BSR set to: 0
  7240  003D6A  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7241  003D6C  11CB               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7242  003D6E  B4D8               	btfsc	status,2,c
  7243  003D70  D01C               	goto	l1083
  7244                           
  7245                           ; BSR set to: 0
  7246  003D72  0E01               	movlw	1
  7247  003D74  6FCC               	movwf	___awdiv@counter& (0+255),b
  7248  003D76  D004               	goto	l1078
  7249  003D78                     
  7250                           ; BSR set to: 0
  7251                           
  7252                           ; BSR set to: 0
  7253  003D78  90D8               	bcf	status,0,c
  7254  003D7A  37CA               	rlcf	___awdiv@divisor& (0+255),f,b
  7255  003D7C  37CB               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7256  003D7E  2BCC               	incf	___awdiv@counter& (0+255),f,b
  7257  003D80                     l1078:
  7258                           
  7259                           ; BSR set to: 0
  7260                           
  7261                           ; BSR set to: 0
  7262  003D80  AFCB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7263  003D82  D7FA               	goto	l1079
  7264  003D84                     u2640:
  7265                           
  7266                           ; BSR set to: 0
  7267                           
  7268                           ; BSR set to: 0
  7269                           
  7270                           ; BSR set to: 0
  7271  003D84  90D8               	bcf	status,0,c
  7272  003D86  37CE               	rlcf	___awdiv@quotient& (0+255),f,b
  7273  003D88  37CF               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7274                           
  7275                           ; BSR set to: 0
  7276  003D8A  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7277  003D8C  5DC8               	subwf	___awdiv@dividend& (0+255),w,b
  7278  003D8E  51CB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7279  003D90  59C9               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7280  003D92  A0D8               	btfss	status,0,c
  7281  003D94  D005               	goto	l1082
  7282                           
  7283                           ; BSR set to: 0
  7284  003D96  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7285  003D98  5FC8               	subwf	___awdiv@dividend& (0+255),f,b
  7286  003D9A  51CB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7287  003D9C  5BC9               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7288                           
  7289                           ; BSR set to: 0
  7290  003D9E  81CE               	bsf	___awdiv@quotient& (0+255),0,b
  7291  003DA0                     l1082:
  7292                           
  7293                           ; BSR set to: 0
  7294                           
  7295                           ; BSR set to: 0
  7296  003DA0  90D8               	bcf	status,0,c
  7297  003DA2  33CB               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7298  003DA4  33CA               	rrcf	___awdiv@divisor& (0+255),f,b
  7299                           
  7300                           ; BSR set to: 0
  7301  003DA6  2FCC               	decfsz	___awdiv@counter& (0+255),f,b
  7302  003DA8  D7ED               	goto	u2640
  7303  003DAA                     l1083:
  7304                           
  7305                           ; BSR set to: 0
  7306                           
  7307                           ; BSR set to: 0
  7308                           
  7309                           ; BSR set to: 0
  7310  003DAA  51CD               	movf	___awdiv@sign& (0+255),w,b
  7311  003DAC  B4D8               	btfsc	status,2,c
  7312  003DAE  D004               	goto	l1084
  7313                           
  7314                           ; BSR set to: 0
  7315  003DB0  6DCE               	negf	___awdiv@quotient& (0+255),b
  7316  003DB2  1FCF               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7317  003DB4  B0D8               	btfsc	status,0,c
  7318  003DB6  2BCF               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7319  003DB8                     l1084:
  7320                           
  7321                           ; BSR set to: 0
  7322                           
  7323                           ; BSR set to: 0
  7324  003DB8  C0CE  F0C8         	movff	___awdiv@quotient,?___awdiv
  7325  003DBC  C0CF  F0C9         	movff	___awdiv@quotient+1,?___awdiv+1
  7326  003DC0  0012               	return	
  7327  003DC2                     __end_of___awdiv:
  7328                           	opt stack 0
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           intcon3	equ	0xFF0
  7337                           indf0	equ	0xFEF
  7338                           postinc0	equ	0xFEE
  7339                           fsr0h	equ	0xFEA
  7340                           fsr0l	equ	0xFE9
  7341                           wreg	equ	0xFE8
  7342                           postdec1	equ	0xFE5
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function _I2C_Master_Read *****************
  7352 ;; Defined at:
  7353 ;;		line 120 in file "I2C.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;  ackBit          1    wreg     unsigned char 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  ackBit          1    1[BANK0 ] unsigned char 
  7358 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      unsigned char 
  7361 ;; Registers used:
  7362 ;;		wreg, status,2, status,0, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;Total ram usage:        2 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    5
  7375 ;; This function calls:
  7376 ;;		_I2C_Master_Wait
  7377 ;; This function is called by:
  7378 ;;		_main
  7379 ;;		_get_RTC_initial
  7380 ;;		_get_RTC_final
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text15
  7385  004532                     __ptext15:
  7386                           	opt stack 0
  7387  004532                     _I2C_Master_Read:
  7388                           	opt stack 24
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;incstack = 0
  7392                           ;I2C_Master_Read@ackBit stored from wreg
  7393  004532  0100               	movlb	0	; () banked
  7394  004534  6FC9               	movwf	I2C_Master_Read@ackBit& (0+255),b
  7395                           
  7396                           ;I2C.c: 130: unsigned char receivedByte;
  7397                           ;I2C.c: 132: I2C_Master_Wait();
  7398  004536  EC33  F023         	call	_I2C_Master_Wait	;wreg free
  7399                           
  7400                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  7401  00453A  86C5               	bsf	4037,3,c	;volatile
  7402                           
  7403                           ;I2C.c: 135: I2C_Master_Wait();
  7404  00453C  EC33  F023         	call	_I2C_Master_Wait	;wreg free
  7405                           
  7406                           ;I2C.c: 136: receivedByte = SSPBUF;
  7407  004540  CFC9 F0CA          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  7408                           
  7409                           ;I2C.c: 138: I2C_Master_Wait();
  7410  004544  EC33  F023         	call	_I2C_Master_Wait	;wreg free
  7411                           
  7412                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  7413  004548  0100               	movlb	0	; () banked
  7414  00454A  B1C9               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  7415  00454C  D002               	bra	u2565
  7416  00454E  9AC5               	bcf	4037,5,c	;volatile
  7417  004550  D001               	bra	u2566
  7418  004552                     u2565:
  7419  004552  8AC5               	bsf	4037,5,c	;volatile
  7420  004554                     u2566:
  7421                           
  7422                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  7423  004554  88C5               	bsf	4037,4,c	;volatile
  7424                           
  7425                           ;I2C.c: 142: return receivedByte;
  7426  004556  0100               	movlb	0	; () banked
  7427  004558  51CA               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  7428  00455A  0012               	return	
  7429  00455C                     __end_of_I2C_Master_Read:
  7430                           	opt stack 0
  7431                           tblptru	equ	0xFF8
  7432                           tblptrh	equ	0xFF7
  7433                           tblptrl	equ	0xFF6
  7434                           tablat	equ	0xFF5
  7435                           prodh	equ	0xFF4
  7436                           prodl	equ	0xFF3
  7437                           intcon	equ	0xFF2
  7438                           intcon3	equ	0xFF0
  7439                           indf0	equ	0xFEF
  7440                           postinc0	equ	0xFEE
  7441                           fsr0h	equ	0xFEA
  7442                           fsr0l	equ	0xFE9
  7443                           wreg	equ	0xFE8
  7444                           postdec1	equ	0xFE5
  7445                           fsr1l	equ	0xFE1
  7446                           indf2	equ	0xFDF
  7447                           postinc2	equ	0xFDE
  7448                           postdec2	equ	0xFDD
  7449                           fsr2h	equ	0xFDA
  7450                           fsr2l	equ	0xFD9
  7451                           status	equ	0xFD8
  7452                           
  7453 ;; *************** function _generate_compartment_array *****************
  7454 ;; Defined at:
  7455 ;;		line 220 in file "keypad.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  step            2    0[BANK0 ] int 
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;		None
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      void 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7469 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;Total ram usage:        4 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    4
  7476 ;; This function calls:
  7477 ;;		Nothing
  7478 ;; This function is called by:
  7479 ;;		_main
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           	psect	text16
  7484  003682                     __ptext16:
  7485                           	opt stack 0
  7486  003682                     _generate_compartment_array:
  7487                           	opt stack 26
  7488                           
  7489                           ;keypad.c: 222: switch(step){
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;incstack = 0
  7493  003682  D117               	goto	l772
  7494  003684                     
  7495                           ;keypad.c: 224: compartment_array[1] = 1;
  7496  003684  0E00               	movlw	0
  7497  003686  0100               	movlb	0	; () banked
  7498  003688  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7499  00368A  0E01               	movlw	1
  7500  00368C  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7501                           
  7502                           ;keypad.c: 225: compartment_array[3] = 1;
  7503  00368E  0E00               	movlw	0
  7504  003690  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7505  003692  0E01               	movlw	1
  7506  003694  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7507                           
  7508                           ;keypad.c: 226: compartment_array[5] = 1;
  7509  003696  0E00               	movlw	0
  7510  003698  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7511  00369A  0E01               	movlw	1
  7512  00369C  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7513                           
  7514                           ;keypad.c: 227: compartment_array[7] = 1;
  7515  00369E  0E00               	movlw	0
  7516  0036A0  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  7517  0036A2  0E01               	movlw	1
  7518  0036A4  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  7519                           
  7520                           ;keypad.c: 230: compartment_number[0] = 1;
  7521  0036A6  0E00               	movlw	0
  7522  0036A8  6E47               	movwf	_compartment_number+1,c
  7523  0036AA  0E01               	movlw	1
  7524  0036AC  6E46               	movwf	_compartment_number,c
  7525                           
  7526                           ;keypad.c: 231: compartment_number[1] = 3;
  7527  0036AE  0E00               	movlw	0
  7528  0036B0  6E49               	movwf	_compartment_number+3,c
  7529  0036B2  0E03               	movlw	3
  7530  0036B4  6E48               	movwf	_compartment_number+2,c
  7531                           
  7532                           ;keypad.c: 232: compartment_number[2] = 5;
  7533  0036B6  0E00               	movlw	0
  7534  0036B8  6E4B               	movwf	_compartment_number+5,c
  7535  0036BA  0E05               	movlw	5
  7536  0036BC  6E4A               	movwf	_compartment_number+4,c
  7537                           
  7538                           ;keypad.c: 233: compartment_number[3] = 7;
  7539  0036BE  0E00               	movlw	0
  7540  0036C0  6E4D               	movwf	_compartment_number+7,c
  7541  0036C2  0E07               	movlw	7
  7542  0036C4  6E4C               	movwf	_compartment_number+6,c
  7543                           
  7544                           ;keypad.c: 235: break;
  7545  0036C6  0012               	return	
  7546  0036C8                     
  7547                           ; BSR set to: 0
  7548                           ;keypad.c: 237: compartment_array[0] = 1;
  7549                           
  7550                           ; BSR set to: 0
  7551  0036C8  0E00               	movlw	0
  7552  0036CA  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7553  0036CC  0E01               	movlw	1
  7554  0036CE  6F80               	movwf	_compartment_array& (0+255),b
  7555                           
  7556                           ;keypad.c: 238: compartment_array[1] = 1;
  7557  0036D0  0E00               	movlw	0
  7558  0036D2  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7559  0036D4  0E01               	movlw	1
  7560  0036D6  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7561                           
  7562                           ;keypad.c: 239: compartment_array[3] = 1;
  7563  0036D8  0E00               	movlw	0
  7564  0036DA  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7565  0036DC  0E01               	movlw	1
  7566  0036DE  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7567                           
  7568                           ;keypad.c: 240: compartment_array[4] = 1;
  7569  0036E0  0E00               	movlw	0
  7570  0036E2  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7571  0036E4  0E01               	movlw	1
  7572  0036E6  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7573                           
  7574                           ;keypad.c: 241: compartment_array[6] = 1;
  7575  0036E8  0E00               	movlw	0
  7576  0036EA  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7577  0036EC  0E01               	movlw	1
  7578  0036EE  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7579                           
  7580                           ;keypad.c: 245: compartment_number[0] = 0;
  7581  0036F0  0E00               	movlw	0
  7582  0036F2  6E47               	movwf	_compartment_number+1,c
  7583  0036F4  0E00               	movlw	0
  7584  0036F6  6E46               	movwf	_compartment_number,c
  7585                           
  7586                           ;keypad.c: 246: compartment_number[1] = 1;
  7587  0036F8  0E00               	movlw	0
  7588  0036FA  6E49               	movwf	_compartment_number+3,c
  7589  0036FC  0E01               	movlw	1
  7590  0036FE  6E48               	movwf	_compartment_number+2,c
  7591                           
  7592                           ;keypad.c: 247: compartment_number[2] = 3;
  7593  003700  0E00               	movlw	0
  7594  003702  6E4B               	movwf	_compartment_number+5,c
  7595  003704  0E03               	movlw	3
  7596  003706  6E4A               	movwf	_compartment_number+4,c
  7597                           
  7598                           ;keypad.c: 248: compartment_number[3] = 4;
  7599  003708  0E00               	movlw	0
  7600  00370A  6E4D               	movwf	_compartment_number+7,c
  7601  00370C  0E04               	movlw	4
  7602  00370E  6E4C               	movwf	_compartment_number+6,c
  7603                           
  7604                           ;keypad.c: 249: compartment_number[4] = 6;
  7605  003710  0E00               	movlw	0
  7606  003712  6E4F               	movwf	_compartment_number+9,c
  7607  003714  0E06               	movlw	6
  7608  003716  6E4E               	movwf	_compartment_number+8,c
  7609                           
  7610                           ;keypad.c: 251: break;
  7611  003718  0012               	return	
  7612  00371A                     
  7613                           ; BSR set to: 0
  7614                           ;keypad.c: 254: compartment_array[0] = 1;
  7615                           
  7616                           ; BSR set to: 0
  7617  00371A  0E00               	movlw	0
  7618  00371C  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7619  00371E  0E01               	movlw	1
  7620  003720  6F80               	movwf	_compartment_array& (0+255),b
  7621                           
  7622                           ;keypad.c: 255: compartment_array[1] = 1;
  7623  003722  0E00               	movlw	0
  7624  003724  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7625  003726  0E01               	movlw	1
  7626  003728  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7627                           
  7628                           ;keypad.c: 256: compartment_array[2] = 1;
  7629  00372A  0E00               	movlw	0
  7630  00372C  6F85               	movwf	(_compartment_array+5)& (0+255),b
  7631  00372E  0E01               	movlw	1
  7632  003730  6F84               	movwf	(_compartment_array+4)& (0+255),b
  7633                           
  7634                           ;keypad.c: 257: compartment_array[4] = 1;
  7635  003732  0E00               	movlw	0
  7636  003734  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7637  003736  0E01               	movlw	1
  7638  003738  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7639                           
  7640                           ;keypad.c: 258: compartment_array[5] = 1;
  7641  00373A  0E00               	movlw	0
  7642  00373C  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7643  00373E  0E01               	movlw	1
  7644  003740  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7645                           
  7646                           ;keypad.c: 259: compartment_array[6] = 1;
  7647  003742  0E00               	movlw	0
  7648  003744  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7649  003746  0E01               	movlw	1
  7650  003748  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7651                           
  7652                           ;keypad.c: 262: compartment_number[0] = 0;
  7653  00374A  0E00               	movlw	0
  7654  00374C  6E47               	movwf	_compartment_number+1,c
  7655  00374E  0E00               	movlw	0
  7656  003750  6E46               	movwf	_compartment_number,c
  7657                           
  7658                           ;keypad.c: 263: compartment_number[1] = 1;
  7659  003752  0E00               	movlw	0
  7660  003754  6E49               	movwf	_compartment_number+3,c
  7661  003756  0E01               	movlw	1
  7662  003758  6E48               	movwf	_compartment_number+2,c
  7663                           
  7664                           ;keypad.c: 264: compartment_number[2] = 2;
  7665  00375A  0E00               	movlw	0
  7666  00375C  6E4B               	movwf	_compartment_number+5,c
  7667  00375E  0E02               	movlw	2
  7668  003760  6E4A               	movwf	_compartment_number+4,c
  7669                           
  7670                           ;keypad.c: 265: compartment_number[3] = 4;
  7671  003762  0E00               	movlw	0
  7672  003764  6E4D               	movwf	_compartment_number+7,c
  7673  003766  0E04               	movlw	4
  7674  003768  6E4C               	movwf	_compartment_number+6,c
  7675                           
  7676                           ;keypad.c: 266: compartment_number[4] = 5;
  7677  00376A  0E00               	movlw	0
  7678  00376C  6E4F               	movwf	_compartment_number+9,c
  7679  00376E  0E05               	movlw	5
  7680  003770  6E4E               	movwf	_compartment_number+8,c
  7681                           
  7682                           ;keypad.c: 267: compartment_number[5] = 6;
  7683  003772  0E00               	movlw	0
  7684  003774  6E51               	movwf	_compartment_number+11,c
  7685  003776  0E06               	movlw	6
  7686  003778  6E50               	movwf	_compartment_number+10,c
  7687                           
  7688                           ;keypad.c: 269: break;
  7689  00377A  0012               	return	
  7690  00377C                     
  7691                           ; BSR set to: 0
  7692                           ;keypad.c: 271: compartment_array[0] = 1;
  7693                           
  7694                           ; BSR set to: 0
  7695  00377C  0E00               	movlw	0
  7696  00377E  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7697  003780  0E01               	movlw	1
  7698  003782  6F80               	movwf	_compartment_array& (0+255),b
  7699                           
  7700                           ;keypad.c: 272: compartment_array[1] = 1;
  7701  003784  0E00               	movlw	0
  7702  003786  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7703  003788  0E01               	movlw	1
  7704  00378A  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7705                           
  7706                           ;keypad.c: 273: compartment_array[2] = 1;
  7707  00378C  0E00               	movlw	0
  7708  00378E  6F85               	movwf	(_compartment_array+5)& (0+255),b
  7709  003790  0E01               	movlw	1
  7710  003792  6F84               	movwf	(_compartment_array+4)& (0+255),b
  7711                           
  7712                           ;keypad.c: 274: compartment_array[3] = 1;
  7713  003794  0E00               	movlw	0
  7714  003796  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7715  003798  0E01               	movlw	1
  7716  00379A  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7717                           
  7718                           ;keypad.c: 275: compartment_array[4] = 1;
  7719  00379C  0E00               	movlw	0
  7720  00379E  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7721  0037A0  0E01               	movlw	1
  7722  0037A2  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7723                           
  7724                           ;keypad.c: 276: compartment_array[5] = 1;
  7725  0037A4  0E00               	movlw	0
  7726  0037A6  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7727  0037A8  0E01               	movlw	1
  7728  0037AA  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7729                           
  7730                           ;keypad.c: 277: compartment_array[6] = 1;
  7731  0037AC  0E00               	movlw	0
  7732  0037AE  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7733  0037B0  0E01               	movlw	1
  7734  0037B2  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7735                           
  7736                           ;keypad.c: 280: compartment_number[0] = 0;
  7737  0037B4  0E00               	movlw	0
  7738  0037B6  6E47               	movwf	_compartment_number+1,c
  7739  0037B8  0E00               	movlw	0
  7740  0037BA  6E46               	movwf	_compartment_number,c
  7741                           
  7742                           ;keypad.c: 281: compartment_number[1] = 1;
  7743  0037BC  0E00               	movlw	0
  7744  0037BE  6E49               	movwf	_compartment_number+3,c
  7745  0037C0  0E01               	movlw	1
  7746  0037C2  6E48               	movwf	_compartment_number+2,c
  7747                           
  7748                           ;keypad.c: 282: compartment_number[2] = 2;
  7749  0037C4  0E00               	movlw	0
  7750  0037C6  6E4B               	movwf	_compartment_number+5,c
  7751  0037C8  0E02               	movlw	2
  7752  0037CA  6E4A               	movwf	_compartment_number+4,c
  7753                           
  7754                           ;keypad.c: 283: compartment_number[3] = 3;
  7755  0037CC  0E00               	movlw	0
  7756  0037CE  6E4D               	movwf	_compartment_number+7,c
  7757  0037D0  0E03               	movlw	3
  7758  0037D2  6E4C               	movwf	_compartment_number+6,c
  7759                           
  7760                           ;keypad.c: 284: compartment_number[4] = 4;
  7761  0037D4  0E00               	movlw	0
  7762  0037D6  6E4F               	movwf	_compartment_number+9,c
  7763  0037D8  0E04               	movlw	4
  7764  0037DA  6E4E               	movwf	_compartment_number+8,c
  7765                           
  7766                           ;keypad.c: 285: compartment_number[5] = 5;
  7767  0037DC  0E00               	movlw	0
  7768  0037DE  6E51               	movwf	_compartment_number+11,c
  7769  0037E0  0E05               	movlw	5
  7770  0037E2  6E50               	movwf	_compartment_number+10,c
  7771                           
  7772                           ;keypad.c: 286: compartment_number[6] = 6;
  7773  0037E4  0E00               	movlw	0
  7774  0037E6  6E53               	movwf	_compartment_number+13,c
  7775  0037E8  0E06               	movlw	6
  7776  0037EA  6E52               	movwf	_compartment_number+12,c
  7777                           
  7778                           ;keypad.c: 288: break;
  7779  0037EC  0012               	return	
  7780  0037EE                     
  7781                           ; BSR set to: 0
  7782                           ;keypad.c: 290: compartment_array[0] = 1;
  7783                           
  7784                           ; BSR set to: 0
  7785  0037EE  0E00               	movlw	0
  7786  0037F0  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7787  0037F2  0E01               	movlw	1
  7788  0037F4  6F80               	movwf	_compartment_array& (0+255),b
  7789                           
  7790                           ;keypad.c: 291: compartment_array[1] = 1;
  7791  0037F6  0E00               	movlw	0
  7792  0037F8  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7793  0037FA  0E01               	movlw	1
  7794  0037FC  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7795                           
  7796                           ;keypad.c: 292: compartment_array[2] = 1;
  7797  0037FE  0E00               	movlw	0
  7798  003800  6F85               	movwf	(_compartment_array+5)& (0+255),b
  7799  003802  0E01               	movlw	1
  7800  003804  6F84               	movwf	(_compartment_array+4)& (0+255),b
  7801                           
  7802                           ;keypad.c: 293: compartment_array[3] = 1;
  7803  003806  0E00               	movlw	0
  7804  003808  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7805  00380A  0E01               	movlw	1
  7806  00380C  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7807                           
  7808                           ;keypad.c: 294: compartment_array[4] = 1;
  7809  00380E  0E00               	movlw	0
  7810  003810  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7811  003812  0E01               	movlw	1
  7812  003814  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7813                           
  7814                           ;keypad.c: 295: compartment_array[5] = 1;
  7815  003816  0E00               	movlw	0
  7816  003818  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7817  00381A  0E01               	movlw	1
  7818  00381C  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7819                           
  7820                           ;keypad.c: 296: compartment_array[6] = 1;
  7821  00381E  0E00               	movlw	0
  7822  003820  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7823  003822  0E01               	movlw	1
  7824  003824  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7825                           
  7826                           ;keypad.c: 297: compartment_array[7] = 1;
  7827  003826  0E00               	movlw	0
  7828  003828  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  7829  00382A  0E01               	movlw	1
  7830  00382C  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  7831                           
  7832                           ;keypad.c: 300: compartment_number[0] = 0;
  7833  00382E  0E00               	movlw	0
  7834  003830  6E47               	movwf	_compartment_number+1,c
  7835  003832  0E00               	movlw	0
  7836  003834  6E46               	movwf	_compartment_number,c
  7837                           
  7838                           ;keypad.c: 301: compartment_number[1] = 1;
  7839  003836  0E00               	movlw	0
  7840  003838  6E49               	movwf	_compartment_number+3,c
  7841  00383A  0E01               	movlw	1
  7842  00383C  6E48               	movwf	_compartment_number+2,c
  7843                           
  7844                           ;keypad.c: 302: compartment_number[2] = 2;
  7845  00383E  0E00               	movlw	0
  7846  003840  6E4B               	movwf	_compartment_number+5,c
  7847  003842  0E02               	movlw	2
  7848  003844  6E4A               	movwf	_compartment_number+4,c
  7849                           
  7850                           ;keypad.c: 303: compartment_number[3] = 3;
  7851  003846  0E00               	movlw	0
  7852  003848  6E4D               	movwf	_compartment_number+7,c
  7853  00384A  0E03               	movlw	3
  7854  00384C  6E4C               	movwf	_compartment_number+6,c
  7855                           
  7856                           ;keypad.c: 304: compartment_number[4] = 4;
  7857  00384E  0E00               	movlw	0
  7858  003850  6E4F               	movwf	_compartment_number+9,c
  7859  003852  0E04               	movlw	4
  7860  003854  6E4E               	movwf	_compartment_number+8,c
  7861                           
  7862                           ;keypad.c: 305: compartment_number[5] = 5;
  7863  003856  0E00               	movlw	0
  7864  003858  6E51               	movwf	_compartment_number+11,c
  7865  00385A  0E05               	movlw	5
  7866  00385C  6E50               	movwf	_compartment_number+10,c
  7867                           
  7868                           ;keypad.c: 306: compartment_number[6] = 6;
  7869  00385E  0E00               	movlw	0
  7870  003860  6E53               	movwf	_compartment_number+13,c
  7871  003862  0E06               	movlw	6
  7872  003864  6E52               	movwf	_compartment_number+12,c
  7873                           
  7874                           ;keypad.c: 307: compartment_number[7] = 7;
  7875  003866  0E00               	movlw	0
  7876  003868  6E55               	movwf	_compartment_number+15,c
  7877  00386A  0E07               	movlw	7
  7878  00386C  6E54               	movwf	_compartment_number+14,c
  7879                           
  7880                           ;keypad.c: 309: break;
  7881  00386E  0012               	return	
  7882  003870                     
  7883                           ; BSR set to: 0
  7884                           ;keypad.c: 311: compartment_array[0] = 0;
  7885                           
  7886                           ; BSR set to: 0
  7887  003870  0E00               	movlw	0
  7888  003872  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7889  003874  0E00               	movlw	0
  7890  003876  6F80               	movwf	_compartment_array& (0+255),b
  7891                           
  7892                           ;keypad.c: 312: compartment_array[1] = 0;
  7893  003878  0E00               	movlw	0
  7894  00387A  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7895  00387C  0E00               	movlw	0
  7896  00387E  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7897                           
  7898                           ;keypad.c: 313: compartment_array[2] = 0;
  7899  003880  0E00               	movlw	0
  7900  003882  6F85               	movwf	(_compartment_array+5)& (0+255),b
  7901  003884  0E00               	movlw	0
  7902  003886  6F84               	movwf	(_compartment_array+4)& (0+255),b
  7903                           
  7904                           ;keypad.c: 314: compartment_array[3] = 0;
  7905  003888  0E00               	movlw	0
  7906  00388A  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7907  00388C  0E00               	movlw	0
  7908  00388E  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7909                           
  7910                           ;keypad.c: 315: compartment_array[4] = 0;
  7911  003890  0E00               	movlw	0
  7912  003892  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7913  003894  0E00               	movlw	0
  7914  003896  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7915                           
  7916                           ;keypad.c: 316: compartment_array[5] = 0;
  7917  003898  0E00               	movlw	0
  7918  00389A  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7919  00389C  0E00               	movlw	0
  7920  00389E  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7921                           
  7922                           ;keypad.c: 317: compartment_array[6] = 0;
  7923  0038A0  0E00               	movlw	0
  7924  0038A2  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7925  0038A4  0E00               	movlw	0
  7926  0038A6  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7927                           
  7928                           ;keypad.c: 318: compartment_array[7] = 0;
  7929  0038A8  0E00               	movlw	0
  7930  0038AA  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  7931  0038AC  0E00               	movlw	0
  7932  0038AE  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  7933                           
  7934                           ;keypad.c: 320: }
  7935  0038B0  0012               	return	
  7936  0038B2                     l772:
  7937                           
  7938                           ; BSR set to: 0
  7939  0038B2  C0C8  F0CA         	movff	generate_compartment_array@step,??_generate_compartment_array
  7940  0038B6  C0C9  F0CB         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
  7941                           
  7942                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7943                           ; Switch size 1, requested type "space"
  7944                           ; Number of cases is 1, Range of values is 0 to 0
  7945                           ; switch strategies available:
  7946                           ; Name         Instructions Cycles
  7947                           ; simple_byte            4     3 (average)
  7948                           ;	Chosen strategy is simple_byte
  7949  0038BA  0100               	movlb	0	; () banked
  7950  0038BC  51CB               	movf	(??_generate_compartment_array+1)& (0+255),w,b
  7951  0038BE  0A00               	xorlw	0	; case 0
  7952  0038C0  A4D8               	btfss	status,2,c
  7953  0038C2  D7D6               	goto	l779
  7954                           
  7955                           ; BSR set to: 0
  7956                           ; Switch size 1, requested type "space"
  7957                           ; Number of cases is 5, Range of values is 4 to 8
  7958                           ; switch strategies available:
  7959                           ; Name         Instructions Cycles
  7960                           ; simple_byte           16     9 (average)
  7961                           ;	Chosen strategy is simple_byte
  7962  0038C4  51CA               	movf	??_generate_compartment_array& (0+255),w,b
  7963  0038C6  0A04               	xorlw	4	; case 4
  7964  0038C8  B4D8               	btfsc	status,2,c
  7965  0038CA  D6DC               	goto	l773
  7966  0038CC  0A01               	xorlw	1	; case 5
  7967  0038CE  B4D8               	btfsc	status,2,c
  7968  0038D0  D6FB               	goto	l775
  7969  0038D2  0A03               	xorlw	3	; case 6
  7970  0038D4  B4D8               	btfsc	status,2,c
  7971  0038D6  D721               	goto	l776
  7972  0038D8  0A01               	xorlw	1	; case 7
  7973  0038DA  B4D8               	btfsc	status,2,c
  7974  0038DC  D74F               	goto	l777
  7975  0038DE  0A0F               	xorlw	15	; case 8
  7976  0038E0  B4D8               	btfsc	status,2,c
  7977  0038E2  D785               	goto	l778
  7978  0038E4  D7C5               	goto	l779
  7979  0038E6                     __end_of_generate_compartment_array:
  7980                           	opt stack 0
  7981                           tblptru	equ	0xFF8
  7982                           tblptrh	equ	0xFF7
  7983                           tblptrl	equ	0xFF6
  7984                           tablat	equ	0xFF5
  7985                           prodh	equ	0xFF4
  7986                           prodl	equ	0xFF3
  7987                           intcon	equ	0xFF2
  7988                           intcon3	equ	0xFF0
  7989                           indf0	equ	0xFEF
  7990                           postinc0	equ	0xFEE
  7991                           fsr0h	equ	0xFEA
  7992                           fsr0l	equ	0xFE9
  7993                           wreg	equ	0xFE8
  7994                           postdec1	equ	0xFE5
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           postdec2	equ	0xFDD
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function _I2C_sendData *****************
  8004 ;; Defined at:
  8005 ;;		line 1281 in file "main.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  char_data       1    wreg     unsigned char 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  char_data       1    3[BANK0 ] unsigned char 
  8010 ;; Return value:  Size  Location     Type
  8011 ;;                  1    wreg      void 
  8012 ;; Registers used:
  8013 ;;		wreg, status,2, status,0, cstack
  8014 ;; Tracked objects:
  8015 ;;		On entry : 0/0
  8016 ;;		On exit  : 0/0
  8017 ;;		Unchanged: 0/0
  8018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;Total ram usage:        1 bytes
  8024 ;; Hardware stack levels used:    1
  8025 ;; Hardware stack levels required when called:    6
  8026 ;; This function calls:
  8027 ;;		_I2C_Master_Start
  8028 ;;		_I2C_Master_Stop
  8029 ;;		_I2C_Master_Write
  8030 ;; This function is called by:
  8031 ;;		_main
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           	psect	text17
  8036  004584                     __ptext17:
  8037                           	opt stack 0
  8038  004584                     _I2C_sendData:
  8039                           	opt stack 24
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;incstack = 0
  8043                           ;I2C_sendData@char_data stored from wreg
  8044  004584  0100               	movlb	0	; () banked
  8045  004586  6FCB               	movwf	I2C_sendData@char_data& (0+255),b
  8046                           
  8047                           ;main.c: 1282: I2C_Master_Start();
  8048  004588  EC75  F023         	call	_I2C_Master_Start	;wreg free
  8049                           
  8050                           ;main.c: 1283: I2C_Master_Write(0b00010000);
  8051  00458C  0E00               	movlw	0
  8052  00458E  0100               	movlb	0	; () banked
  8053  004590  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  8054  004592  0E10               	movlw	16
  8055  004594  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  8056  004596  EC67  F023         	call	_I2C_Master_Write	;wreg free
  8057                           
  8058                           ;main.c: 1284: I2C_Master_Write(char_data);
  8059  00459A  C0CB  F0C9         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  8060  00459E  0100               	movlb	0	; () banked
  8061  0045A0  6BCA               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  8062  0045A2  EC67  F023         	call	_I2C_Master_Write	;wreg free
  8063                           
  8064                           ;main.c: 1285: I2C_Master_Stop();
  8065  0045A6  EC71  F023         	call	_I2C_Master_Stop	;wreg free
  8066  0045AA  0012               	return		;funcret
  8067  0045AC                     __end_of_I2C_sendData:
  8068                           	opt stack 0
  8069                           tblptru	equ	0xFF8
  8070                           tblptrh	equ	0xFF7
  8071                           tblptrl	equ	0xFF6
  8072                           tablat	equ	0xFF5
  8073                           prodh	equ	0xFF4
  8074                           prodl	equ	0xFF3
  8075                           intcon	equ	0xFF2
  8076                           intcon3	equ	0xFF0
  8077                           indf0	equ	0xFEF
  8078                           postinc0	equ	0xFEE
  8079                           fsr0h	equ	0xFEA
  8080                           fsr0l	equ	0xFE9
  8081                           wreg	equ	0xFE8
  8082                           postdec1	equ	0xFE5
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           fsr2h	equ	0xFDA
  8088                           fsr2l	equ	0xFD9
  8089                           status	equ	0xFD8
  8090                           
  8091 ;; *************** function _I2C_Master_Write *****************
  8092 ;; Defined at:
  8093 ;;		line 108 in file "I2C.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;		None
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      void 
  8100 ;; Registers used:
  8101 ;;		wreg, status,2, status,0, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8107 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;Total ram usage:        2 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    5
  8114 ;; This function calls:
  8115 ;;		_I2C_Master_Wait
  8116 ;; This function is called by:
  8117 ;;		_main
  8118 ;;		_get_RTC_initial
  8119 ;;		_get_RTC_final
  8120 ;;		_I2C_sendData
  8121 ;;		_initRamp
  8122 ;;		_ramp_Rotate
  8123 ;;		_RTC_setTime
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           	psect	text18
  8128  0046CE                     __ptext18:
  8129                           	opt stack 0
  8130  0046CE                     _I2C_Master_Write:
  8131                           	opt stack 24
  8132                           
  8133                           ;I2C.c: 116: I2C_Master_Wait();
  8134                           
  8135                           ;incstack = 0
  8136  0046CE  EC33  F023         	call	_I2C_Master_Wait	;wreg free
  8137                           
  8138                           ;I2C.c: 117: SSPBUF = byteToWrite;
  8139  0046D2  C0C9  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  8140  0046D6  0012               	return		;funcret
  8141  0046D8                     __end_of_I2C_Master_Write:
  8142                           	opt stack 0
  8143                           tblptru	equ	0xFF8
  8144                           tblptrh	equ	0xFF7
  8145                           tblptrl	equ	0xFF6
  8146                           tablat	equ	0xFF5
  8147                           prodh	equ	0xFF4
  8148                           prodl	equ	0xFF3
  8149                           intcon	equ	0xFF2
  8150                           intcon3	equ	0xFF0
  8151                           indf0	equ	0xFEF
  8152                           postinc0	equ	0xFEE
  8153                           fsr0h	equ	0xFEA
  8154                           fsr0l	equ	0xFE9
  8155                           wreg	equ	0xFE8
  8156                           postdec1	equ	0xFE5
  8157                           fsr1l	equ	0xFE1
  8158                           indf2	equ	0xFDF
  8159                           postinc2	equ	0xFDE
  8160                           postdec2	equ	0xFDD
  8161                           fsr2h	equ	0xFDA
  8162                           fsr2l	equ	0xFD9
  8163                           status	equ	0xFD8
  8164                           
  8165 ;; *************** function _I2C_Master_Stop *****************
  8166 ;; Defined at:
  8167 ;;		line 95 in file "I2C.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;		None
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;		None
  8172 ;; Return value:  Size  Location     Type
  8173 ;;                  1    wreg      void 
  8174 ;; Registers used:
  8175 ;;		wreg, status,2, status,0, cstack
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;Total ram usage:        0 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    5
  8188 ;; This function calls:
  8189 ;;		_I2C_Master_Wait
  8190 ;; This function is called by:
  8191 ;;		_main
  8192 ;;		_get_RTC_initial
  8193 ;;		_get_RTC_final
  8194 ;;		_I2C_sendData
  8195 ;;		_initRamp
  8196 ;;		_ramp_Rotate
  8197 ;;		_RTC_setTime
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           	psect	text19
  8202  0046E2                     __ptext19:
  8203                           	opt stack 0
  8204  0046E2                     _I2C_Master_Stop:
  8205                           	opt stack 24
  8206                           
  8207                           ;I2C.c: 104: I2C_Master_Wait();
  8208                           
  8209                           ;incstack = 0
  8210  0046E2  EC33  F023         	call	_I2C_Master_Wait	;wreg free
  8211                           
  8212                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  8213  0046E6  84C5               	bsf	4037,2,c	;volatile
  8214  0046E8  0012               	return		;funcret
  8215  0046EA                     __end_of_I2C_Master_Stop:
  8216                           	opt stack 0
  8217                           tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           intcon	equ	0xFF2
  8224                           intcon3	equ	0xFF0
  8225                           indf0	equ	0xFEF
  8226                           postinc0	equ	0xFEE
  8227                           fsr0h	equ	0xFEA
  8228                           fsr0l	equ	0xFE9
  8229                           wreg	equ	0xFE8
  8230                           postdec1	equ	0xFE5
  8231                           fsr1l	equ	0xFE1
  8232                           indf2	equ	0xFDF
  8233                           postinc2	equ	0xFDE
  8234                           postdec2	equ	0xFDD
  8235                           fsr2h	equ	0xFDA
  8236                           fsr2l	equ	0xFD9
  8237                           status	equ	0xFD8
  8238                           
  8239 ;; *************** function _I2C_Master_Start *****************
  8240 ;; Defined at:
  8241 ;;		line 69 in file "I2C.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;		None
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;		None
  8246 ;; Return value:  Size  Location     Type
  8247 ;;                  1    wreg      void 
  8248 ;; Registers used:
  8249 ;;		wreg, status,2, status,0, cstack
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;Total ram usage:        0 bytes
  8260 ;; Hardware stack levels used:    1
  8261 ;; Hardware stack levels required when called:    5
  8262 ;; This function calls:
  8263 ;;		_I2C_Master_Wait
  8264 ;; This function is called by:
  8265 ;;		_main
  8266 ;;		_get_RTC_initial
  8267 ;;		_get_RTC_final
  8268 ;;		_I2C_sendData
  8269 ;;		_initRamp
  8270 ;;		_ramp_Rotate
  8271 ;;		_RTC_setTime
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           	psect	text20
  8276  0046EA                     __ptext20:
  8277                           	opt stack 0
  8278  0046EA                     _I2C_Master_Start:
  8279                           	opt stack 24
  8280                           
  8281                           ;I2C.c: 78: I2C_Master_Wait();
  8282                           
  8283                           ;incstack = 0
  8284  0046EA  EC33  F023         	call	_I2C_Master_Wait	;wreg free
  8285                           
  8286                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  8287  0046EE  80C5               	bsf	4037,0,c	;volatile
  8288  0046F0  0012               	return		;funcret
  8289  0046F2                     __end_of_I2C_Master_Start:
  8290                           	opt stack 0
  8291                           tblptru	equ	0xFF8
  8292                           tblptrh	equ	0xFF7
  8293                           tblptrl	equ	0xFF6
  8294                           tablat	equ	0xFF5
  8295                           prodh	equ	0xFF4
  8296                           prodl	equ	0xFF3
  8297                           intcon	equ	0xFF2
  8298                           intcon3	equ	0xFF0
  8299                           indf0	equ	0xFEF
  8300                           postinc0	equ	0xFEE
  8301                           fsr0h	equ	0xFEA
  8302                           fsr0l	equ	0xFE9
  8303                           wreg	equ	0xFE8
  8304                           postdec1	equ	0xFE5
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function _I2C_Master_Wait *****************
  8314 ;; Defined at:
  8315 ;;		line 51 in file "I2C.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;		None
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;		None
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      void 
  8322 ;; Registers used:
  8323 ;;		wreg, status,2, status,0
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;Total ram usage:        1 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    4
  8336 ;; This function calls:
  8337 ;;		Nothing
  8338 ;; This function is called by:
  8339 ;;		_I2C_Master_Start
  8340 ;;		_I2C_Master_Stop
  8341 ;;		_I2C_Master_Write
  8342 ;;		_I2C_Master_Read
  8343 ;;		_I2C_Master_RepeatedStart
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           	psect	text21
  8348  004666                     __ptext21:
  8349                           	opt stack 0
  8350  004666                     _I2C_Master_Wait:
  8351                           	opt stack 24
  8352                           
  8353                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  8354                           
  8355                           ;incstack = 0
  8356  004666  B4C7               	btfsc	4039,2,c	;volatile
  8357  004668  D7FE               	goto	_I2C_Master_Wait
  8358  00466A  CFC5 F0C8          	movff	4037,??_I2C_Master_Wait	;volatile
  8359  00466E  0E1F               	movlw	31
  8360  004670  0100               	movlb	0	; () banked
  8361  004672  17C8               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8362  004674  B4D8               	btfsc	status,2,c
  8363  004676  0012               	return	
  8364  004678  D7F6               	goto	_I2C_Master_Wait
  8365  00467A                     __end_of_I2C_Master_Wait:
  8366                           	opt stack 0
  8367                           tblptru	equ	0xFF8
  8368                           tblptrh	equ	0xFF7
  8369                           tblptrl	equ	0xFF6
  8370                           tablat	equ	0xFF5
  8371                           prodh	equ	0xFF4
  8372                           prodl	equ	0xFF3
  8373                           intcon	equ	0xFF2
  8374                           intcon3	equ	0xFF0
  8375                           indf0	equ	0xFEF
  8376                           postinc0	equ	0xFEE
  8377                           fsr0h	equ	0xFEA
  8378                           fsr0l	equ	0xFE9
  8379                           wreg	equ	0xFE8
  8380                           postdec1	equ	0xFE5
  8381                           fsr1l	equ	0xFE1
  8382                           indf2	equ	0xFDF
  8383                           postinc2	equ	0xFDE
  8384                           postdec2	equ	0xFDD
  8385                           fsr2h	equ	0xFDA
  8386                           fsr2l	equ	0xFD9
  8387                           status	equ	0xFD8
  8388                           
  8389 ;; *************** function _I2C_Master_Init *****************
  8390 ;; Defined at:
  8391 ;;		line 14 in file "I2C.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;		None
  8396 ;; Return value:  Size  Location     Type
  8397 ;;                  1    wreg      void 
  8398 ;; Registers used:
  8399 ;;		wreg, status,2, status,0, cstack
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8405 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8407 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8409 ;;Total ram usage:        8 bytes
  8410 ;; Hardware stack levels used:    1
  8411 ;; Hardware stack levels required when called:    5
  8412 ;; This function calls:
  8413 ;;		___lldiv
  8414 ;; This function is called by:
  8415 ;;		_main
  8416 ;;		_initRamp
  8417 ;;		_ramp_Rotate
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           	psect	text22
  8422  0041A6                     __ptext22:
  8423                           	opt stack 0
  8424  0041A6                     _I2C_Master_Init:
  8425                           	opt stack 25
  8426                           
  8427                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  8428                           
  8429                           ; BSR set to: 0
  8430                           ;incstack = 0
  8431  0041A6  9AC6               	bcf	4038,5,c	;volatile
  8432                           
  8433                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  8434  0041A8  8694               	bsf	3988,3,c	;volatile
  8435                           
  8436                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  8437  0041AA  8894               	bsf	3988,4,c	;volatile
  8438                           
  8439                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  8440  0041AC  0E80               	movlw	128
  8441  0041AE  6EC7               	movwf	4039,c	;volatile
  8442                           
  8443                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  8444  0041B0  0E28               	movlw	40
  8445  0041B2  6EC6               	movwf	4038,c	;volatile
  8446                           
  8447                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  8448  0041B4  0E00               	movlw	0
  8449  0041B6  6EC5               	movwf	4037,c	;volatile
  8450                           
  8451                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  8452  0041B8  0E00               	movlw	0
  8453  0041BA  0100               	movlb	0	; () banked
  8454  0041BC  6FC8               	movwf	___lldiv@dividend& (0+255),b
  8455  0041BE  0E5A               	movlw	90
  8456  0041C0  6FC9               	movwf	(___lldiv@dividend+1)& (0+255),b
  8457  0041C2  0E62               	movlw	98
  8458  0041C4  6FCA               	movwf	(___lldiv@dividend+2)& (0+255),b
  8459  0041C6  0E02               	movlw	2
  8460  0041C8  6FCB               	movwf	(___lldiv@dividend+3)& (0+255),b
  8461  0041CA  C0D5  F0D9         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  8462  0041CE  C0D6  F0DA         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  8463  0041D2  C0D7  F0DB         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  8464  0041D6  C0D8  F0DC         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  8465  0041DA  0E02               	movlw	2
  8466  0041DC                     u3215:
  8467  0041DC  90D8               	bcf	status,0,c
  8468  0041DE  37D9               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8469  0041E0  37DA               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8470  0041E2  37DB               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8471  0041E4  37DC               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8472  0041E6  2EE8               	decfsz	wreg,f,c
  8473  0041E8  D7F9               	goto	u3215
  8474  0041EA  C0D9  F0CC         	movff	??_I2C_Master_Init,___lldiv@divisor
  8475  0041EE  C0DA  F0CD         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8476  0041F2  C0DB  F0CE         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8477  0041F6  C0DC  F0CF         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8478  0041FA  EC67  F01F         	call	___lldiv	;wreg free
  8479  0041FE  0100               	movlb	0	; () banked
  8480  004200  05C8               	decf	?___lldiv& (0+255),w,b
  8481  004202  6EC8               	movwf	4040,c	;volatile
  8482                           
  8483                           ; BSR set to: 0
  8484  004204  0012               	return		;funcret
  8485  004206                     __end_of_I2C_Master_Init:
  8486                           	opt stack 0
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           intcon	equ	0xFF2
  8494                           intcon3	equ	0xFF0
  8495                           indf0	equ	0xFEF
  8496                           postinc0	equ	0xFEE
  8497                           fsr0h	equ	0xFEA
  8498                           fsr0l	equ	0xFE9
  8499                           wreg	equ	0xFE8
  8500                           postdec1	equ	0xFE5
  8501                           fsr1l	equ	0xFE1
  8502                           indf2	equ	0xFDF
  8503                           postinc2	equ	0xFDE
  8504                           postdec2	equ	0xFDD
  8505                           fsr2h	equ	0xFDA
  8506                           fsr2l	equ	0xFD9
  8507                           status	equ	0xFD8
  8508                           
  8509 ;; *************** function ___lldiv *****************
  8510 ;; Defined at:
  8511 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;  dividend        4    0[BANK0 ] unsigned long 
  8514 ;;  divisor         4    4[BANK0 ] unsigned long 
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;  quotient        4    8[BANK0 ] unsigned long 
  8517 ;;  counter         1   12[BANK0 ] unsigned char 
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  4    0[BANK0 ] unsigned long 
  8520 ;; Registers used:
  8521 ;;		wreg, status,2, status,0
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8527 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;Total ram usage:       13 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    4
  8534 ;; This function calls:
  8535 ;;		Nothing
  8536 ;; This function is called by:
  8537 ;;		_I2C_Master_Init
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           	psect	text23
  8542  003ECE                     __ptext23:
  8543                           	opt stack 0
  8544  003ECE                     ___lldiv:
  8545                           	opt stack 25
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;incstack = 0
  8549  003ECE  0E00               	movlw	0
  8550  003ED0  0100               	movlb	0	; () banked
  8551  003ED2  6FD0               	movwf	___lldiv@quotient& (0+255),b
  8552  003ED4  0E00               	movlw	0
  8553  003ED6  6FD1               	movwf	(___lldiv@quotient+1)& (0+255),b
  8554  003ED8  0E00               	movlw	0
  8555  003EDA  6FD2               	movwf	(___lldiv@quotient+2)& (0+255),b
  8556  003EDC  0E00               	movlw	0
  8557  003EDE  6FD3               	movwf	(___lldiv@quotient+3)& (0+255),b
  8558                           
  8559                           ; BSR set to: 0
  8560  003EE0  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8561  003EE2  11CD               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8562  003EE4  11CE               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8563  003EE6  11CF               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8564  003EE8  B4D8               	btfsc	status,2,c
  8565  003EEA  D02A               	goto	l1268
  8566                           
  8567                           ; BSR set to: 0
  8568  003EEC  0E01               	movlw	1
  8569  003EEE  6FD4               	movwf	___lldiv@counter& (0+255),b
  8570  003EF0  D006               	goto	l1263
  8571  003EF2                     
  8572                           ; BSR set to: 0
  8573                           
  8574                           ; BSR set to: 0
  8575  003EF2  90D8               	bcf	status,0,c
  8576  003EF4  37CC               	rlcf	___lldiv@divisor& (0+255),f,b
  8577  003EF6  37CD               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8578  003EF8  37CE               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8579  003EFA  37CF               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8580  003EFC  2BD4               	incf	___lldiv@counter& (0+255),f,b
  8581  003EFE                     l1263:
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  003EFE  AFCF               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8587  003F00  D7F8               	goto	l1264
  8588  003F02                     u2680:
  8589                           
  8590                           ; BSR set to: 0
  8591                           
  8592                           ; BSR set to: 0
  8593                           
  8594                           ; BSR set to: 0
  8595  003F02  90D8               	bcf	status,0,c
  8596  003F04  37D0               	rlcf	___lldiv@quotient& (0+255),f,b
  8597  003F06  37D1               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8598  003F08  37D2               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8599  003F0A  37D3               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8600                           
  8601                           ; BSR set to: 0
  8602  003F0C  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8603  003F0E  5DC8               	subwf	___lldiv@dividend& (0+255),w,b
  8604  003F10  51CD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8605  003F12  59C9               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8606  003F14  51CE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8607  003F16  59CA               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8608  003F18  51CF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8609  003F1A  59CB               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8610  003F1C  A0D8               	btfss	status,0,c
  8611  003F1E  D009               	goto	l1267
  8612                           
  8613                           ; BSR set to: 0
  8614  003F20  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8615  003F22  5FC8               	subwf	___lldiv@dividend& (0+255),f,b
  8616  003F24  51CD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8617  003F26  5BC9               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8618  003F28  51CE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8619  003F2A  5BCA               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8620  003F2C  51CF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8621  003F2E  5BCB               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8622                           
  8623                           ; BSR set to: 0
  8624  003F30  81D0               	bsf	___lldiv@quotient& (0+255),0,b
  8625  003F32                     l1267:
  8626                           
  8627                           ; BSR set to: 0
  8628                           
  8629                           ; BSR set to: 0
  8630  003F32  90D8               	bcf	status,0,c
  8631  003F34  33CF               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8632  003F36  33CE               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8633  003F38  33CD               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8634  003F3A  33CC               	rrcf	___lldiv@divisor& (0+255),f,b
  8635                           
  8636                           ; BSR set to: 0
  8637  003F3C  2FD4               	decfsz	___lldiv@counter& (0+255),f,b
  8638  003F3E  D7E1               	goto	u2680
  8639  003F40                     l1268:
  8640                           
  8641                           ; BSR set to: 0
  8642                           
  8643                           ; BSR set to: 0
  8644  003F40  C0D0  F0C8         	movff	___lldiv@quotient,?___lldiv
  8645  003F44  C0D1  F0C9         	movff	___lldiv@quotient+1,?___lldiv+1
  8646  003F48  C0D2  F0CA         	movff	___lldiv@quotient+2,?___lldiv+2
  8647  003F4C  C0D3  F0CB         	movff	___lldiv@quotient+3,?___lldiv+3
  8648                           
  8649                           ; BSR set to: 0
  8650  003F50  0012               	return		;funcret
  8651  003F52                     __end_of___lldiv:
  8652                           	opt stack 0
  8653                           tblptru	equ	0xFF8
  8654                           tblptrh	equ	0xFF7
  8655                           tblptrl	equ	0xFF6
  8656                           tablat	equ	0xFF5
  8657                           prodh	equ	0xFF4
  8658                           prodl	equ	0xFF3
  8659                           intcon	equ	0xFF2
  8660                           intcon3	equ	0xFF0
  8661                           indf0	equ	0xFEF
  8662                           postinc0	equ	0xFEE
  8663                           fsr0h	equ	0xFEA
  8664                           fsr0l	equ	0xFE9
  8665                           wreg	equ	0xFE8
  8666                           postdec1	equ	0xFE5
  8667                           fsr1l	equ	0xFE1
  8668                           indf2	equ	0xFDF
  8669                           postinc2	equ	0xFDE
  8670                           postdec2	equ	0xFDD
  8671                           fsr2h	equ	0xFDA
  8672                           fsr2l	equ	0xFD9
  8673                           status	equ	0xFD8
  8674                           
  8675 ;; *************** function _interruptHandler *****************
  8676 ;; Defined at:
  8677 ;;		line 613 in file "main.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;		None
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;  i               2   65[COMRAM] int 
  8682 ;;  temp            1   68[COMRAM] unsigned char 
  8683 ;;  keypress        1   67[COMRAM] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      void 
  8686 ;; Registers used:
  8687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;Total ram usage:       27 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    3
  8700 ;; This function calls:
  8701 ;;		___awmod
  8702 ;;		_check
  8703 ;;		_is_valid
  8704 ;;		_strcat
  8705 ;;		_strcpy
  8706 ;;		_strncmp
  8707 ;;		i2_I2C_Master_Init
  8708 ;;		i2_I2C_Master_Read
  8709 ;;		i2_I2C_Master_Start
  8710 ;;		i2_I2C_Master_Stop
  8711 ;;		i2_I2C_Master_Write
  8712 ;;		i2___awdiv
  8713 ;;		i2___wmul
  8714 ;;		i2_generate_compartment_array
  8715 ;;		i2_initLCD
  8716 ;;		i2_lcdInst
  8717 ;;		i2_printf
  8718 ;;		i2_putch
  8719 ;; This function is called by:
  8720 ;;		Interrupt level 2
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           	psect	intcode
  8725  000008                     __pintcode:
  8726                           	opt stack 0
  8727  000008                     _interruptHandler:
  8728                           	opt stack 24
  8729                           
  8730                           ; BSR set to: 0
  8731                           ;incstack = 0
  8732  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8733  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  8734                           tblptru	equ	0xFF8
  8735                           tblptrh	equ	0xFF7
  8736                           tblptrl	equ	0xFF6
  8737                           tablat	equ	0xFF5
  8738                           prodh	equ	0xFF4
  8739                           prodl	equ	0xFF3
  8740                           intcon	equ	0xFF2
  8741                           intcon3	equ	0xFF0
  8742                           indf0	equ	0xFEF
  8743                           postinc0	equ	0xFEE
  8744                           fsr0h	equ	0xFEA
  8745                           fsr0l	equ	0xFE9
  8746                           wreg	equ	0xFE8
  8747                           postdec1	equ	0xFE5
  8748                           fsr1l	equ	0xFE1
  8749                           indf2	equ	0xFDF
  8750                           postinc2	equ	0xFDE
  8751                           postdec2	equ	0xFDD
  8752                           fsr2h	equ	0xFDA
  8753                           fsr2l	equ	0xFD9
  8754                           status	equ	0xFD8
  8755                           
  8756                           	psect	intcode_body
  8757  000012                     __pintcode_body:
  8758                           	opt stack 24
  8759  000012                     int_func:
  8760                           	opt stack 24
  8761  000012  0006               	pop		; remove dummy address from shadow register refresh
  8762  000014  CFFA F030          	movff	pclath,??_interruptHandler+5
  8763  000018  CFFB F031          	movff	pclatu,??_interruptHandler+6
  8764  00001C  CFE9 F032          	movff	fsr0l,??_interruptHandler+7
  8765  000020  CFEA F033          	movff	fsr0h,??_interruptHandler+8
  8766  000024  CFE1 F034          	movff	fsr1l,??_interruptHandler+9
  8767  000028  CFE2 F035          	movff	fsr1h,??_interruptHandler+10
  8768  00002C  CFD9 F036          	movff	fsr2l,??_interruptHandler+11
  8769  000030  CFDA F037          	movff	fsr2h,??_interruptHandler+12
  8770  000034  CFF3 F038          	movff	prodl,??_interruptHandler+13
  8771  000038  CFF4 F039          	movff	prodh,??_interruptHandler+14
  8772  00003C  CFF6 F03A          	movff	tblptrl,??_interruptHandler+15
  8773  000040  CFF7 F03B          	movff	tblptrh,??_interruptHandler+16
  8774  000044  CFF8 F03C          	movff	tblptru,??_interruptHandler+17
  8775  000048  CFF5 F03D          	movff	tablat,??_interruptHandler+18
  8776  00004C  C07F  F03E         	movff	btemp,??_interruptHandler+19
  8777  000050  C080  F03F         	movff	btemp+1,??_interruptHandler+20
  8778  000054  C081  F040         	movff	btemp+2,??_interruptHandler+21
  8779  000058  C082  F041         	movff	btemp+3,??_interruptHandler+22
  8780                           
  8781                           ;main.c: 624: if(INT1IF){
  8782  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  8783  00005E  EFDA  F007         	goto	i2l6186
  8784                           
  8785                           ;main.c: 630: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8786  000062  3881               	swapf	3969,w,c	;volatile
  8787  000064  0B0F               	andlw	15
  8788  000066  0B0F               	andlw	15
  8789  000068  6E44               	movwf	interruptHandler@keypress,c
  8790                           
  8791                           ;main.c: 632: char temp = keys[keypress];
  8792  00006A  5044               	movf	interruptHandler@keypress,w,c
  8793  00006C  0D01               	mullw	1
  8794  00006E  0E93               	movlw	low _keys
  8795  000070  24F3               	addwf	prodl,w,c
  8796  000072  6EF6               	movwf	tblptrl,c
  8797  000074  0EFC               	movlw	high _keys
  8798  000076  20F4               	addwfc	prodh,w,c
  8799  000078  6EF7               	movwf	tblptrh,c
  8800  00007A                     	if	1	;There are 3 active tblptr bytes
  8801  00007A  6AF8               	clrf	tblptru,c
  8802  00007C  0E00               	movlw	low (__mediumconst shr (0+16))
  8803  00007E  22F8               	addwfc	tblptru,f,c
  8804  000080                     	endif
  8805  000080  0008               	tblrd		*
  8806  000082  CFF5 F045          	movff	tablat,interruptHandler@temp
  8807                           
  8808                           ;main.c: 635: if(temp == 'A'){
  8809  000086  0E41               	movlw	65
  8810  000088  1845               	xorwf	interruptHandler@temp,w,c
  8811  00008A  A4D8               	btfss	status,2,c
  8812  00008C  D006               	goto	i2l415
  8813                           
  8814                           ;main.c: 636: state = prev_state;
  8815  00008E  C067  F0AE         	movff	_prev_state,_state
  8816  000092  C068  F0AF         	movff	_prev_state+1,_state+1
  8817  000096  EFD9  F007         	goto	i2l6184
  8818  00009A                     i2l415:
  8819                           
  8820                           ;main.c: 639: }
  8821                           ;main.c: 642: if (change_mode == 0){
  8822  00009A  0100               	movlb	0	; () banked
  8823  00009C  51B8               	movf	_change_mode& (0+255),w,b
  8824  00009E  11B9               	iorwf	(_change_mode+1)& (0+255),w,b
  8825  0000A0  A4D8               	btfss	status,2,c
  8826  0000A2  D09D               	goto	i2l423
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;main.c: 646: if (temp == '1'){
  8830  0000A4  0E31               	movlw	49
  8831  0000A6  1845               	xorwf	interruptHandler@temp,w,c
  8832  0000A8  A4D8               	btfss	status,2,c
  8833  0000AA  D08B               	goto	i2l418
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;main.c: 648: initLCD();
  8837  0000AC  ECAA  F021         	call	i2_initLCD	;wreg free
  8838                           
  8839                           ;main.c: 649: for (i = 0; i <3; i++){
  8840  0000B0  0E00               	movlw	0
  8841  0000B2  0100               	movlb	0	; () banked
  8842  0000B4  6FBF               	movwf	(_i+1)& (0+255),b
  8843  0000B6  0E00               	movlw	0
  8844  0000B8  6FBE               	movwf	_i& (0+255),b
  8845                           
  8846                           ; BSR set to: 0
  8847  0000BA  51BF               	movf	(_i+1)& (0+255),w,b
  8848  0000BC  E101               	bnz	i2u443_40
  8849  0000BE  D07B               	goto	L2
  8850  0000C0                     i2u443_40:
  8851                           
  8852                           ; BSR set to: 0
  8853  0000C0  EFD9  F007         	goto	i2l6184
  8854  0000C4                     
  8855                           ; BSR set to: 0
  8856                           ;main.c: 650: I2C_Master_Init(100000);
  8857                           
  8858                           ; BSR set to: 0
  8859  0000C4  0EA0               	movlw	160
  8860  0000C6  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  8861  0000C8  0E86               	movlw	134
  8862  0000CA  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  8863  0000CC  0E01               	movlw	1
  8864  0000CE  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  8865  0000D0  0E00               	movlw	0
  8866  0000D2  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  8867  0000D4  EC03  F021         	call	i2_I2C_Master_Init	;wreg free
  8868                           
  8869                           ;main.c: 651: I2C_Master_Start();
  8870  0000D8  EC7D  F023         	call	i2_I2C_Master_Start	;wreg free
  8871                           
  8872                           ;main.c: 652: I2C_Master_Write(0b11010000);
  8873  0000DC  0E00               	movlw	0
  8874  0000DE  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  8875  0000E0  0ED0               	movlw	208
  8876  0000E2  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  8877  0000E4  EC6C  F023         	call	i2_I2C_Master_Write	;wreg free
  8878                           
  8879                           ;main.c: 653: I2C_Master_Write(0x00);
  8880  0000E8  0E00               	movlw	0
  8881  0000EA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  8882  0000EC  0E00               	movlw	0
  8883  0000EE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  8884  0000F0  EC6C  F023         	call	i2_I2C_Master_Write	;wreg free
  8885                           
  8886                           ;main.c: 654: I2C_Master_Stop();
  8887  0000F4  EC79  F023         	call	i2_I2C_Master_Stop	;wreg free
  8888                           
  8889                           ;main.c: 657: I2C_Master_Start();
  8890  0000F8  EC7D  F023         	call	i2_I2C_Master_Start	;wreg free
  8891                           
  8892                           ;main.c: 658: I2C_Master_Write(0b11010001);
  8893  0000FC  0E00               	movlw	0
  8894  0000FE  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  8895  000100  0ED1               	movlw	209
  8896  000102  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  8897  000104  EC6C  F023         	call	i2_I2C_Master_Write	;wreg free
  8898                           
  8899                           ;main.c: 659: for(j = 0; j < 6; j++){
  8900  000108  0E00               	movlw	0
  8901  00010A  6E75               	movwf	_j,c
  8902  00010C                     i2l5710:
  8903  00010C  0E05               	movlw	5
  8904  00010E  6475               	cpfsgt	_j,c
  8905  000110  D001               	goto	i2l421
  8906  000112  D00E               	goto	i2u445_40
  8907  000114                     i2l421:
  8908                           
  8909                           ;main.c: 660: time[j] = I2C_Master_Read(0);
  8910  000114  5075               	movf	_j,w,c
  8911  000116  0D01               	mullw	1
  8912  000118  0E56               	movlw	low _time
  8913  00011A  24F3               	addwf	prodl,w,c
  8914  00011C  6ED9               	movwf	fsr2l,c
  8915  00011E  0E00               	movlw	high _time
  8916  000120  20F4               	addwfc	prodh,w,c
  8917  000122  6EDA               	movwf	fsr2h,c
  8918  000124  0E00               	movlw	0
  8919  000126  ECE9  F022         	call	i2_I2C_Master_Read
  8920  00012A  6EDF               	movwf	indf2,c
  8921  00012C  2A75               	incf	_j,f,c
  8922  00012E  D7EE               	goto	i2l5710
  8923  000130                     i2u445_40:
  8924                           
  8925                           ;main.c: 661: }
  8926                           ;main.c: 662: time[6] = I2C_Master_Read(1);
  8927  000130  0E01               	movlw	1
  8928  000132  ECE9  F022         	call	i2_I2C_Master_Read
  8929  000136  6E5C               	movwf	_time+6,c
  8930                           
  8931                           ;main.c: 663: I2C_Master_Stop();
  8932  000138  EC79  F023         	call	i2_I2C_Master_Stop	;wreg free
  8933                           
  8934                           ;main.c: 665: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  8935  00013C  0E80               	movlw	128
  8936  00013E  EC47  F023         	call	i2_lcdInst
  8937  000142  0E41               	movlw	65
  8938  000144  6E2B               	movwf	??_interruptHandler& (0+255),c
  8939  000146  0EEE               	movlw	238
  8940  000148                     i2u558_47:
  8941  000148  2EE8               	decfsz	wreg,f,c
  8942  00014A  D7FE               	bra	i2u558_47
  8943  00014C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  8944  00014E  D7FC               	bra	i2u558_47
  8945  000150  D000               	nop2	
  8946                           
  8947                           ;main.c: 666: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  8948  000152  0E9C               	movlw	low STR_46
  8949  000154  6E0D               	movwf	i2printf@f,c
  8950  000156  0EFE               	movlw	high STR_46
  8951  000158  6E0E               	movwf	i2printf@f+1,c
  8952  00015A  C05C  F00F         	movff	_time+6,?i2_printf+2
  8953  00015E  6A10               	clrf	?i2_printf+3,c
  8954  000160  C05B  F011         	movff	_time+5,?i2_printf+4
  8955  000164  6A12               	clrf	?i2_printf+5,c
  8956  000166  C05A  F013         	movff	_time+4,?i2_printf+6
  8957  00016A  6A14               	clrf	?i2_printf+7,c
  8958  00016C  ECFE  F017         	call	i2_printf	;wreg free
  8959                           
  8960                           ;main.c: 667: lcdInst(0xC0);;
  8961  000170  0EC0               	movlw	192
  8962  000172  EC47  F023         	call	i2_lcdInst
  8963                           
  8964                           ;main.c: 668: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  8965  000176  0EAB               	movlw	low STR_47
  8966  000178  6E0D               	movwf	i2printf@f,c
  8967  00017A  0EFE               	movlw	high STR_47
  8968  00017C  6E0E               	movwf	i2printf@f+1,c
  8969  00017E  C058  F00F         	movff	_time+2,?i2_printf+2
  8970  000182  6A10               	clrf	?i2_printf+3,c
  8971  000184  C057  F011         	movff	_time+1,?i2_printf+4
  8972  000188  6A12               	clrf	?i2_printf+5,c
  8973  00018A  C056  F013         	movff	_time,?i2_printf+6
  8974  00018E  6A14               	clrf	?i2_printf+7,c
  8975  000190  ECFE  F017         	call	i2_printf	;wreg free
  8976                           
  8977                           ;main.c: 669: _delay((unsigned long)((600)*(40000000/4000.0)));
  8978  000194  0E1F               	movlw	31
  8979  000196  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  8980  000198  0E71               	movlw	113
  8981  00019A  6E2B               	movwf	??_interruptHandler& (0+255),c
  8982  00019C  0E1E               	movlw	30
  8983  00019E                     i2u559_47:
  8984  00019E  2EE8               	decfsz	wreg,f,c
  8985  0001A0  D7FE               	bra	i2u559_47
  8986  0001A2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  8987  0001A4  D7FC               	bra	i2u559_47
  8988  0001A6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8989  0001A8  D7FA               	bra	i2u559_47
  8990  0001AA  D000               	nop2	
  8991  0001AC  0100               	movlb	0	; () banked
  8992  0001AE  4BBE               	infsnz	_i& (0+255),f,b
  8993  0001B0  2BBF               	incf	(_i+1)& (0+255),f,b
  8994  0001B2  51BF               	movf	(_i+1)& (0+255),w,b
  8995  0001B4  E112               	bnz	i2l5736
  8996  0001B6                     L2:
  8997  0001B6  0E03               	movlw	3
  8998  0001B8  5DBE               	subwf	_i& (0+255),w,b
  8999  0001BA  A0D8               	btfss	status,0,c
  9000  0001BC  D783               	goto	i2l419
  9001  0001BE  EFD9  F007         	goto	i2l6184
  9002  0001C2                     i2l418:
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;main.c: 673: }
  9006                           ;main.c: 674: if (temp == '2'){
  9007                           
  9008                           ; BSR set to: 0
  9009  0001C2  0E32               	movlw	50
  9010  0001C4  1845               	xorwf	interruptHandler@temp,w,c
  9011  0001C6  A4D8               	btfss	status,2,c
  9012  0001C8  D00A               	goto	i2l423
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;main.c: 675: change_mode = 1;
  9016  0001CA  0E00               	movlw	0
  9017  0001CC  6FB9               	movwf	(_change_mode+1)& (0+255),b
  9018  0001CE  0E01               	movlw	1
  9019  0001D0  6FB8               	movwf	_change_mode& (0+255),b
  9020                           
  9021                           ;main.c: 676: mode = 1;
  9022  0001D2  0E00               	movlw	0
  9023  0001D4  6FBB               	movwf	(_mode+1)& (0+255),b
  9024  0001D6  0E01               	movlw	1
  9025  0001D8  D33D               	goto	L10
  9026  0001DA                     i2l5736:
  9027  0001DA  EFD9  F007         	goto	i2l6184
  9028  0001DE                     i2l423:
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;main.c: 681: }
  9032                           ;main.c: 684: }
  9033                           ;main.c: 689: if(operation == 1){
  9034                           
  9035                           ; BSR set to: 0
  9036                           
  9037                           ; BSR set to: 0
  9038  0001DE  0473               	decf	_operation,w,c
  9039  0001E0  1074               	iorwf	_operation+1,w,c
  9040  0001E2  A4D8               	btfss	status,2,c
  9041  0001E4  D339               	goto	i2l434
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;main.c: 690: if (temp == '1'){
  9045  0001E6  0E31               	movlw	49
  9046  0001E8  1845               	xorwf	interruptHandler@temp,w,c
  9047  0001EA  A4D8               	btfss	status,2,c
  9048  0001EC  D08B               	goto	i2l425
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;main.c: 691: initLCD();
  9052  0001EE  ECAA  F021         	call	i2_initLCD	;wreg free
  9053                           
  9054                           ;main.c: 692: for (i = 0; i <3; i++){
  9055  0001F2  0E00               	movlw	0
  9056  0001F4  0100               	movlb	0	; () banked
  9057  0001F6  6FBF               	movwf	(_i+1)& (0+255),b
  9058  0001F8  0E00               	movlw	0
  9059  0001FA  6FBE               	movwf	_i& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062  0001FC  51BF               	movf	(_i+1)& (0+255),w,b
  9063  0001FE  E101               	bnz	i2u450_40
  9064  000200  D07B               	goto	L3
  9065  000202                     i2u450_40:
  9066                           
  9067                           ; BSR set to: 0
  9068  000202  EFD9  F007         	goto	i2l6184
  9069  000206                     
  9070                           ; BSR set to: 0
  9071                           ;main.c: 693: I2C_Master_Init(100000);
  9072                           
  9073                           ; BSR set to: 0
  9074  000206  0EA0               	movlw	160
  9075  000208  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9076  00020A  0E86               	movlw	134
  9077  00020C  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9078  00020E  0E01               	movlw	1
  9079  000210  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9080  000212  0E00               	movlw	0
  9081  000214  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9082  000216  EC03  F021         	call	i2_I2C_Master_Init	;wreg free
  9083                           
  9084                           ;main.c: 694: I2C_Master_Start();
  9085  00021A  EC7D  F023         	call	i2_I2C_Master_Start	;wreg free
  9086                           
  9087                           ;main.c: 695: I2C_Master_Write(0b11010000);
  9088  00021E  0E00               	movlw	0
  9089  000220  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9090  000222  0ED0               	movlw	208
  9091  000224  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9092  000226  EC6C  F023         	call	i2_I2C_Master_Write	;wreg free
  9093                           
  9094                           ;main.c: 696: I2C_Master_Write(0x00);
  9095  00022A  0E00               	movlw	0
  9096  00022C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9097  00022E  0E00               	movlw	0
  9098  000230  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9099  000232  EC6C  F023         	call	i2_I2C_Master_Write	;wreg free
  9100                           
  9101                           ;main.c: 697: I2C_Master_Stop();
  9102  000236  EC79  F023         	call	i2_I2C_Master_Stop	;wreg free
  9103                           
  9104                           ;main.c: 700: I2C_Master_Start();
  9105  00023A  EC7D  F023         	call	i2_I2C_Master_Start	;wreg free
  9106                           
  9107                           ;main.c: 701: I2C_Master_Write(0b11010001);
  9108  00023E  0E00               	movlw	0
  9109  000240  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9110  000242  0ED1               	movlw	209
  9111  000244  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9112  000246  EC6C  F023         	call	i2_I2C_Master_Write	;wreg free
  9113                           
  9114                           ;main.c: 702: for(j = 0; j < 6; j++){
  9115  00024A  0E00               	movlw	0
  9116  00024C  6E75               	movwf	_j,c
  9117  00024E                     i2l5756:
  9118  00024E  0E05               	movlw	5
  9119  000250  6475               	cpfsgt	_j,c
  9120  000252  D001               	goto	i2l428
  9121  000254  D00E               	goto	i2u452_40
  9122  000256                     i2l428:
  9123                           
  9124                           ;main.c: 703: time[j] = I2C_Master_Read(0);
  9125  000256  5075               	movf	_j,w,c
  9126  000258  0D01               	mullw	1
  9127  00025A  0E56               	movlw	low _time
  9128  00025C  24F3               	addwf	prodl,w,c
  9129  00025E  6ED9               	movwf	fsr2l,c
  9130  000260  0E00               	movlw	high _time
  9131  000262  20F4               	addwfc	prodh,w,c
  9132  000264  6EDA               	movwf	fsr2h,c
  9133  000266  0E00               	movlw	0
  9134  000268  ECE9  F022         	call	i2_I2C_Master_Read
  9135  00026C  6EDF               	movwf	indf2,c
  9136  00026E  2A75               	incf	_j,f,c
  9137  000270  D7EE               	goto	i2l5756
  9138  000272                     i2u452_40:
  9139                           
  9140                           ;main.c: 704: }
  9141                           ;main.c: 705: time[6] = I2C_Master_Read(1);
  9142  000272  0E01               	movlw	1
  9143  000274  ECE9  F022         	call	i2_I2C_Master_Read
  9144  000278  6E5C               	movwf	_time+6,c
  9145                           
  9146                           ;main.c: 706: I2C_Master_Stop();
  9147  00027A  EC79  F023         	call	i2_I2C_Master_Stop	;wreg free
  9148                           
  9149                           ;main.c: 708: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9150  00027E  0E80               	movlw	128
  9151  000280  EC47  F023         	call	i2_lcdInst
  9152  000284  0E41               	movlw	65
  9153  000286  6E2B               	movwf	??_interruptHandler& (0+255),c
  9154  000288  0EEE               	movlw	238
  9155  00028A                     i2u560_47:
  9156  00028A  2EE8               	decfsz	wreg,f,c
  9157  00028C  D7FE               	bra	i2u560_47
  9158  00028E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9159  000290  D7FC               	bra	i2u560_47
  9160  000292  D000               	nop2	
  9161                           
  9162                           ;main.c: 709: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9163  000294  0E9C               	movlw	low STR_46
  9164  000296  6E0D               	movwf	i2printf@f,c
  9165  000298  0EFE               	movlw	high STR_46
  9166  00029A  6E0E               	movwf	i2printf@f+1,c
  9167  00029C  C05C  F00F         	movff	_time+6,?i2_printf+2
  9168  0002A0  6A10               	clrf	?i2_printf+3,c
  9169  0002A2  C05B  F011         	movff	_time+5,?i2_printf+4
  9170  0002A6  6A12               	clrf	?i2_printf+5,c
  9171  0002A8  C05A  F013         	movff	_time+4,?i2_printf+6
  9172  0002AC  6A14               	clrf	?i2_printf+7,c
  9173  0002AE  ECFE  F017         	call	i2_printf	;wreg free
  9174                           
  9175                           ;main.c: 710: lcdInst(0xC0);;
  9176  0002B2  0EC0               	movlw	192
  9177  0002B4  EC47  F023         	call	i2_lcdInst
  9178                           
  9179                           ;main.c: 711: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9180  0002B8  0EAB               	movlw	low STR_47
  9181  0002BA  6E0D               	movwf	i2printf@f,c
  9182  0002BC  0EFE               	movlw	high STR_47
  9183  0002BE  6E0E               	movwf	i2printf@f+1,c
  9184  0002C0  C058  F00F         	movff	_time+2,?i2_printf+2
  9185  0002C4  6A10               	clrf	?i2_printf+3,c
  9186  0002C6  C057  F011         	movff	_time+1,?i2_printf+4
  9187  0002CA  6A12               	clrf	?i2_printf+5,c
  9188  0002CC  C056  F013         	movff	_time,?i2_printf+6
  9189  0002D0  6A14               	clrf	?i2_printf+7,c
  9190  0002D2  ECFE  F017         	call	i2_printf	;wreg free
  9191                           
  9192                           ;main.c: 712: _delay((unsigned long)((600)*(40000000/4000.0)));
  9193  0002D6  0E1F               	movlw	31
  9194  0002D8  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9195  0002DA  0E71               	movlw	113
  9196  0002DC  6E2B               	movwf	??_interruptHandler& (0+255),c
  9197  0002DE  0E1E               	movlw	30
  9198  0002E0                     i2u561_47:
  9199  0002E0  2EE8               	decfsz	wreg,f,c
  9200  0002E2  D7FE               	bra	i2u561_47
  9201  0002E4  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9202  0002E6  D7FC               	bra	i2u561_47
  9203  0002E8  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9204  0002EA  D7FA               	bra	i2u561_47
  9205  0002EC  D000               	nop2	
  9206  0002EE  0100               	movlb	0	; () banked
  9207  0002F0  4BBE               	infsnz	_i& (0+255),f,b
  9208  0002F2  2BBF               	incf	(_i+1)& (0+255),f,b
  9209  0002F4  51BF               	movf	(_i+1)& (0+255),w,b
  9210  0002F6  E104               	bnz	i2u453_40
  9211  0002F8                     L3:
  9212  0002F8  0E03               	movlw	3
  9213  0002FA  5DBE               	subwf	_i& (0+255),w,b
  9214  0002FC  A0D8               	btfss	status,0,c
  9215  0002FE  D783               	goto	i2l426
  9216  000300                     i2u453_40:
  9217  000300  EFD9  F007         	goto	i2l6184
  9218  000304                     i2l425:
  9219                           
  9220                           ; BSR set to: 0
  9221                           ;main.c: 718: }
  9222                           ;main.c: 719: if (temp == '2'){
  9223                           
  9224                           ; BSR set to: 0
  9225  000304  0E32               	movlw	50
  9226  000306  1845               	xorwf	interruptHandler@temp,w,c
  9227  000308  A4D8               	btfss	status,2,c
  9228  00030A  D09A               	goto	i2l430
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;main.c: 728: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
  9232  00030C  C092  F001         	movff	_hr_initial,i2___wmul@multiplier
  9233  000310  C093  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
  9234  000314  0E0E               	movlw	14
  9235  000316  6E04               	movwf	i2___wmul@multiplicand+1,c
  9236  000318  0E10               	movlw	16
  9237  00031A  6E03               	movwf	i2___wmul@multiplicand,c
  9238  00031C  ECD6  F022         	call	i2___wmul	;wreg free
  9239  000320  C001  F02B         	movff	?i2___wmul,??_interruptHandler
  9240  000324  C002  F02C         	movff	?i2___wmul+1,??_interruptHandler+1
  9241  000328  C090  F001         	movff	_min_initial,i2___wmul@multiplier
  9242  00032C  C091  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
  9243  000330  0E00               	movlw	0
  9244  000332  6E04               	movwf	i2___wmul@multiplicand+1,c
  9245  000334  0E3C               	movlw	60
  9246  000336  6E03               	movwf	i2___wmul@multiplicand,c
  9247  000338  ECD6  F022         	call	i2___wmul	;wreg free
  9248  00033C  5001               	movf	?i2___wmul,w,c
  9249  00033E  262B               	addwf	??_interruptHandler,f,c
  9250  000340  5002               	movf	?i2___wmul+1,w,c
  9251  000342  222C               	addwfc	??_interruptHandler+1,f,c
  9252  000344  0101               	movlb	1	; () banked
  9253  000346  516A               	movf	_sec_initial& (0+255),w,b
  9254  000348  242B               	addwf	??_interruptHandler,w,c
  9255  00034A  6F68               	movwf	_initial_time& (0+255),b
  9256  00034C  516B               	movf	(_sec_initial+1)& (0+255),w,b
  9257  00034E  202C               	addwfc	??_interruptHandler+1,w,c
  9258  000350  6F69               	movwf	(_initial_time+1)& (0+255),b
  9259                           
  9260                           ;main.c: 729: final_time = hr_final*3600 + min_final*60 + sec_final;
  9261  000352  C166  F001         	movff	_hr_final,i2___wmul@multiplier
  9262  000356  C167  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
  9263  00035A  0E0E               	movlw	14
  9264  00035C  6E04               	movwf	i2___wmul@multiplicand+1,c
  9265  00035E  0E10               	movlw	16
  9266  000360  6E03               	movwf	i2___wmul@multiplicand,c
  9267  000362  ECD6  F022         	call	i2___wmul	;wreg free
  9268  000366  C001  F02B         	movff	?i2___wmul,??_interruptHandler
  9269  00036A  C002  F02C         	movff	?i2___wmul+1,??_interruptHandler+1
  9270  00036E  C164  F001         	movff	_min_final,i2___wmul@multiplier
  9271  000372  C165  F002         	movff	_min_final+1,i2___wmul@multiplier+1
  9272  000376  0E00               	movlw	0
  9273  000378  6E04               	movwf	i2___wmul@multiplicand+1,c
  9274  00037A  0E3C               	movlw	60
  9275  00037C  6E03               	movwf	i2___wmul@multiplicand,c
  9276  00037E  ECD6  F022         	call	i2___wmul	;wreg free
  9277  000382  5001               	movf	?i2___wmul,w,c
  9278  000384  262B               	addwf	??_interruptHandler,f,c
  9279  000386  5002               	movf	?i2___wmul+1,w,c
  9280  000388  222C               	addwfc	??_interruptHandler+1,f,c
  9281  00038A  0101               	movlb	1	; () banked
  9282  00038C  5162               	movf	_sec_final& (0+255),w,b
  9283  00038E  242B               	addwf	??_interruptHandler,w,c
  9284  000390  6F60               	movwf	_final_time& (0+255),b
  9285  000392  5163               	movf	(_sec_final+1)& (0+255),w,b
  9286  000394  202C               	addwfc	??_interruptHandler+1,w,c
  9287  000396  6F61               	movwf	(_final_time+1)& (0+255),b
  9288                           
  9289                           ; BSR set to: 1
  9290                           ;main.c: 730: operationTime = final_time - initial_time;
  9291  000398  C168  F02B         	movff	_initial_time,??_interruptHandler
  9292  00039C  C169  F02C         	movff	_initial_time+1,??_interruptHandler+1
  9293  0003A0  1E2B               	comf	??_interruptHandler,f,c
  9294  0003A2  1E2C               	comf	??_interruptHandler+1,f,c
  9295  0003A4  4A2B               	infsnz	??_interruptHandler,f,c
  9296  0003A6  2A2C               	incf	??_interruptHandler+1,f,c
  9297  0003A8  5160               	movf	_final_time& (0+255),w,b
  9298  0003AA  242B               	addwf	??_interruptHandler,w,c
  9299  0003AC  6E71               	movwf	_operationTime,c
  9300  0003AE  5161               	movf	(_final_time+1)& (0+255),w,b
  9301  0003B0  202C               	addwfc	??_interruptHandler+1,w,c
  9302  0003B2  6E72               	movwf	_operationTime+1,c
  9303                           
  9304                           ; BSR set to: 1
  9305                           ;main.c: 731: initLCD();
  9306  0003B4  ECAA  F021         	call	i2_initLCD	;wreg free
  9307                           
  9308                           ;main.c: 734: printf("operation time:");
  9309  0003B8  0EF4               	movlw	low STR_50
  9310  0003BA  6E0D               	movwf	i2printf@f,c
  9311  0003BC  0EFD               	movlw	high STR_50
  9312  0003BE  6E0E               	movwf	i2printf@f+1,c
  9313  0003C0  ECFE  F017         	call	i2_printf	;wreg free
  9314                           
  9315                           ;main.c: 735: lcdInst(0xC0);;
  9316  0003C4  0EC0               	movlw	192
  9317  0003C6  EC47  F023         	call	i2_lcdInst
  9318                           
  9319                           ;main.c: 736: printf("%dmin %dsecs",operationTime/60,operationTime%60);
  9320  0003CA  0E19               	movlw	low STR_51
  9321  0003CC  6E0D               	movwf	i2printf@f,c
  9322  0003CE  0EFF               	movlw	high STR_51
  9323  0003D0  6E0E               	movwf	i2printf@f+1,c
  9324  0003D2  C071  F001         	movff	_operationTime,i2___awdiv@dividend
  9325  0003D6  C072  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
  9326  0003DA  0E00               	movlw	0
  9327  0003DC  6E04               	movwf	i2___awdiv@divisor+1,c
  9328  0003DE  0E3C               	movlw	60
  9329  0003E0  6E03               	movwf	i2___awdiv@divisor,c
  9330  0003E2  ECA9  F01F         	call	i2___awdiv	;wreg free
  9331  0003E6  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  9332  0003EA  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  9333  0003EE  C071  F001         	movff	_operationTime,___awmod@dividend
  9334  0003F2  C072  F002         	movff	_operationTime+1,___awmod@dividend+1
  9335  0003F6  0E00               	movlw	0
  9336  0003F8  6E04               	movwf	___awmod@divisor+1,c
  9337  0003FA  0E3C               	movlw	60
  9338  0003FC  6E03               	movwf	___awmod@divisor,c
  9339  0003FE  EC69  F020         	call	___awmod	;wreg free
  9340  000402  C001  F011         	movff	?___awmod,?i2_printf+4
  9341  000406  C002  F012         	movff	?___awmod+1,?i2_printf+5
  9342  00040A  ECFE  F017         	call	i2_printf	;wreg free
  9343                           
  9344                           ;main.c: 737: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9345  00040E  0E80               	movlw	128
  9346  000410  EC47  F023         	call	i2_lcdInst
  9347  000414  0E41               	movlw	65
  9348  000416  6E2B               	movwf	??_interruptHandler& (0+255),c
  9349  000418  0EEE               	movlw	238
  9350  00041A                     i2u562_47:
  9351  00041A  2EE8               	decfsz	wreg,f,c
  9352  00041C  D7FE               	bra	i2u562_47
  9353  00041E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9354  000420  D7FC               	bra	i2u562_47
  9355  000422  D000               	nop2	
  9356                           
  9357                           ;main.c: 738: _delay((unsigned long)((2000)*(40000000/4000.0)));
  9358  000424  0E66               	movlw	102
  9359  000426  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9360  000428  0E76               	movlw	118
  9361  00042A  6E2B               	movwf	??_interruptHandler& (0+255),c
  9362  00042C  0EC1               	movlw	193
  9363  00042E                     i2u563_47:
  9364  00042E  2EE8               	decfsz	wreg,f,c
  9365  000430  D7FE               	bra	i2u563_47
  9366  000432  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9367  000434  D7FC               	bra	i2u563_47
  9368  000436  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9369  000438  D7FA               	bra	i2u563_47
  9370  00043A  F000               	nop	
  9371  00043C  EFD9  F007         	goto	i2l6184
  9372  000440                     i2l430:
  9373                           
  9374                           ;main.c: 744: }
  9375                           ;main.c: 746: if (temp == '3'){
  9376  000440  0E33               	movlw	51
  9377  000442  1845               	xorwf	interruptHandler@temp,w,c
  9378  000444  A4D8               	btfss	status,2,c
  9379  000446  D1FA               	goto	i2l431
  9380                           
  9381                           ;main.c: 751: initLCD();
  9382  000448  ECAA  F021         	call	i2_initLCD	;wreg free
  9383                           
  9384                           ;main.c: 752: printf("assembly step:%d",assembly_step);
  9385  00044C  0ED2               	movlw	low STR_8
  9386  00044E  6E0D               	movwf	i2printf@f,c
  9387  000450  0EFD               	movlw	high STR_8
  9388  000452  6E0E               	movwf	i2printf@f+1,c
  9389  000454  C0AC  F00F         	movff	_assembly_step,?i2_printf+2
  9390  000458  C0AD  F010         	movff	_assembly_step+1,?i2_printf+3
  9391  00045C  ECFE  F017         	call	i2_printf	;wreg free
  9392                           
  9393                           ;main.c: 753: for (i = 0; i<8; i++){
  9394  000460  0E00               	movlw	0
  9395  000462  0100               	movlb	0	; () banked
  9396  000464  6FBF               	movwf	(_i+1)& (0+255),b
  9397  000466  0E00               	movlw	0
  9398  000468  6FBE               	movwf	_i& (0+255),b
  9399                           
  9400                           ; BSR set to: 0
  9401  00046A  51BF               	movf	(_i+1)& (0+255),w,b
  9402  00046C  E105               	bnz	i2u456_40
  9403  00046E  0E08               	movlw	8
  9404  000470  5DBE               	subwf	_i& (0+255),w,b
  9405  000472  B0D8               	btfsc	status,0,c
  9406  000474  D093               	goto	i2u457_40
  9407  000476  D001               	goto	i2l432
  9408  000478                     i2u456_40:
  9409                           
  9410                           ; BSR set to: 0
  9411  000478  D091               	goto	i2u457_40
  9412  00047A                     i2l432:
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;main.c: 755: _delay((unsigned long)((800)*(40000000/4000.0)));
  9416                           
  9417                           ; BSR set to: 0
  9418  00047A  0E29               	movlw	41
  9419  00047C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9420  00047E  0E96               	movlw	150
  9421  000480  6E2B               	movwf	??_interruptHandler& (0+255),c
  9422  000482  0E7F               	movlw	127
  9423  000484                     i2u564_47:
  9424  000484  2EE8               	decfsz	wreg,f,c
  9425  000486  D7FE               	bra	i2u564_47
  9426  000488  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9427  00048A  D7FC               	bra	i2u564_47
  9428  00048C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9429  00048E  D7FA               	bra	i2u564_47
  9430  000490  F000               	nop	
  9431                           
  9432                           ;main.c: 756: printf("C%d:B%d,N%d,S%d,W%d",i,B_array[i],N_array[i],S_array[i],W_array[i]
      +                          );
  9433  000492  0E53               	movlw	low STR_53
  9434  000494  6E0D               	movwf	i2printf@f,c
  9435  000496  0EFD               	movlw	high STR_53
  9436  000498  6E0E               	movwf	i2printf@f+1,c
  9437  00049A  C0BE  F00F         	movff	_i,?i2_printf+2
  9438  00049E  C0BF  F010         	movff	_i+1,?i2_printf+3
  9439  0004A2  90D8               	bcf	status,0,c
  9440  0004A4  0100               	movlb	0	; () banked
  9441  0004A6  35BE               	rlcf	_i& (0+255),w,b
  9442  0004A8  6ED9               	movwf	fsr2l,c
  9443  0004AA  35BF               	rlcf	(_i+1)& (0+255),w,b
  9444  0004AC  6EDA               	movwf	fsr2h,c
  9445  0004AE  0E30               	movlw	low _B_array
  9446  0004B0  26D9               	addwf	fsr2l,f,c
  9447  0004B2  0E01               	movlw	high _B_array
  9448  0004B4  22DA               	addwfc	fsr2h,f,c
  9449  0004B6  CFDE F011          	movff	postinc2,?i2_printf+4
  9450  0004BA  CFDD F012          	movff	postdec2,?i2_printf+5
  9451  0004BE  90D8               	bcf	status,0,c
  9452  0004C0  35BE               	rlcf	_i& (0+255),w,b
  9453  0004C2  6ED9               	movwf	fsr2l,c
  9454  0004C4  35BF               	rlcf	(_i+1)& (0+255),w,b
  9455  0004C6  6EDA               	movwf	fsr2h,c
  9456  0004C8  0E10               	movlw	low _N_array
  9457  0004CA  26D9               	addwf	fsr2l,f,c
  9458  0004CC  0E01               	movlw	high _N_array
  9459  0004CE  22DA               	addwfc	fsr2h,f,c
  9460  0004D0  CFDE F013          	movff	postinc2,?i2_printf+6
  9461  0004D4  CFDD F014          	movff	postdec2,?i2_printf+7
  9462  0004D8  90D8               	bcf	status,0,c
  9463  0004DA  35BE               	rlcf	_i& (0+255),w,b
  9464  0004DC  6ED9               	movwf	fsr2l,c
  9465  0004DE  35BF               	rlcf	(_i+1)& (0+255),w,b
  9466  0004E0  6EDA               	movwf	fsr2h,c
  9467  0004E2  0E20               	movlw	low _S_array
  9468  0004E4  26D9               	addwf	fsr2l,f,c
  9469  0004E6  0E01               	movlw	high _S_array
  9470  0004E8  22DA               	addwfc	fsr2h,f,c
  9471  0004EA  CFDE F015          	movff	postinc2,?i2_printf+8
  9472  0004EE  CFDD F016          	movff	postdec2,?i2_printf+9
  9473  0004F2  90D8               	bcf	status,0,c
  9474  0004F4  35BE               	rlcf	_i& (0+255),w,b
  9475  0004F6  6ED9               	movwf	fsr2l,c
  9476  0004F8  35BF               	rlcf	(_i+1)& (0+255),w,b
  9477  0004FA  6EDA               	movwf	fsr2h,c
  9478  0004FC  0E00               	movlw	low _W_array
  9479  0004FE  26D9               	addwf	fsr2l,f,c
  9480  000500  0E01               	movlw	high _W_array
  9481  000502  22DA               	addwfc	fsr2h,f,c
  9482  000504  CFDE F017          	movff	postinc2,?i2_printf+10
  9483  000508  CFDD F018          	movff	postdec2,?i2_printf+11
  9484  00050C  ECFE  F017         	call	i2_printf	;wreg free
  9485                           
  9486                           ;main.c: 757: _delay((unsigned long)((800)*(40000000/4000.0)));
  9487  000510  0E29               	movlw	41
  9488  000512  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9489  000514  0E96               	movlw	150
  9490  000516  6E2B               	movwf	??_interruptHandler& (0+255),c
  9491  000518  0E7F               	movlw	127
  9492  00051A                     i2u565_47:
  9493  00051A  2EE8               	decfsz	wreg,f,c
  9494  00051C  D7FE               	bra	i2u565_47
  9495  00051E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9496  000520  D7FC               	bra	i2u565_47
  9497  000522  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9498  000524  D7FA               	bra	i2u565_47
  9499  000526  F000               	nop	
  9500                           
  9501                           ;main.c: 758: B_total_dispensed += B_array[i];
  9502  000528  90D8               	bcf	status,0,c
  9503  00052A  0100               	movlb	0	; () banked
  9504  00052C  35BE               	rlcf	_i& (0+255),w,b
  9505  00052E  6ED9               	movwf	fsr2l,c
  9506  000530  35BF               	rlcf	(_i+1)& (0+255),w,b
  9507  000532  6EDA               	movwf	fsr2h,c
  9508  000534  0E30               	movlw	low _B_array
  9509  000536  26D9               	addwf	fsr2l,f,c
  9510  000538  0E01               	movlw	high _B_array
  9511  00053A  22DA               	addwfc	fsr2h,f,c
  9512  00053C  50DE               	movf	postinc2,w,c
  9513  00053E  265D               	addwf	_B_total_dispensed,f,c
  9514  000540  50DD               	movf	postdec2,w,c
  9515  000542  225E               	addwfc	_B_total_dispensed+1,f,c
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;main.c: 759: N_total_dispensed += N_array[i];
  9519  000544  90D8               	bcf	status,0,c
  9520  000546  35BE               	rlcf	_i& (0+255),w,b
  9521  000548  6ED9               	movwf	fsr2l,c
  9522  00054A  35BF               	rlcf	(_i+1)& (0+255),w,b
  9523  00054C  6EDA               	movwf	fsr2h,c
  9524  00054E  0E10               	movlw	low _N_array
  9525  000550  26D9               	addwf	fsr2l,f,c
  9526  000552  0E01               	movlw	high _N_array
  9527  000554  22DA               	addwfc	fsr2h,f,c
  9528  000556  50DE               	movf	postinc2,w,c
  9529  000558  2798               	addwf	_N_total_dispensed& (0+255),f,b
  9530  00055A  50DD               	movf	postdec2,w,c
  9531  00055C  2399               	addwfc	(_N_total_dispensed+1)& (0+255),f,b
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;main.c: 760: S_total_dispensed += S_array[i];
  9535  00055E  90D8               	bcf	status,0,c
  9536  000560  35BE               	rlcf	_i& (0+255),w,b
  9537  000562  6ED9               	movwf	fsr2l,c
  9538  000564  35BF               	rlcf	(_i+1)& (0+255),w,b
  9539  000566  6EDA               	movwf	fsr2h,c
  9540  000568  0E20               	movlw	low _S_array
  9541  00056A  26D9               	addwf	fsr2l,f,c
  9542  00056C  0E01               	movlw	high _S_array
  9543  00056E  22DA               	addwfc	fsr2h,f,c
  9544  000570  50DE               	movf	postinc2,w,c
  9545  000572  2796               	addwf	_S_total_dispensed& (0+255),f,b
  9546  000574  50DD               	movf	postdec2,w,c
  9547  000576  2397               	addwfc	(_S_total_dispensed+1)& (0+255),f,b
  9548                           
  9549                           ; BSR set to: 0
  9550                           ;main.c: 761: W_total_dispensed += W_array[i];
  9551  000578  90D8               	bcf	status,0,c
  9552  00057A  35BE               	rlcf	_i& (0+255),w,b
  9553  00057C  6ED9               	movwf	fsr2l,c
  9554  00057E  35BF               	rlcf	(_i+1)& (0+255),w,b
  9555  000580  6EDA               	movwf	fsr2h,c
  9556  000582  0E00               	movlw	low _W_array
  9557  000584  26D9               	addwf	fsr2l,f,c
  9558  000586  0E01               	movlw	high _W_array
  9559  000588  22DA               	addwfc	fsr2h,f,c
  9560  00058A  50DE               	movf	postinc2,w,c
  9561  00058C  2794               	addwf	_W_total_dispensed& (0+255),f,b
  9562  00058E  50DD               	movf	postdec2,w,c
  9563  000590  2395               	addwfc	(_W_total_dispensed+1)& (0+255),f,b
  9564                           
  9565                           ; BSR set to: 0
  9566  000592  4BBE               	infsnz	_i& (0+255),f,b
  9567  000594  2BBF               	incf	(_i+1)& (0+255),f,b
  9568                           
  9569                           ; BSR set to: 0
  9570  000596  51BF               	movf	(_i+1)& (0+255),w,b
  9571  000598  E101               	bnz	i2l5832
  9572  00059A  D769               	goto	L4
  9573  00059C                     i2u457_40:
  9574  00059C                     i2l5832:
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;main.c: 763: }
  9578                           ;main.c: 764: initLCD();
  9579  00059C  ECAA  F021         	call	i2_initLCD	;wreg free
  9580                           
  9581                           ;main.c: 765: printf("B dispensed:%d",B_total_dispensed);
  9582  0005A0  0E42               	movlw	low STR_54
  9583  0005A2  6E0D               	movwf	i2printf@f,c
  9584  0005A4  0EFE               	movlw	high STR_54
  9585  0005A6  6E0E               	movwf	i2printf@f+1,c
  9586  0005A8  C05D  F00F         	movff	_B_total_dispensed,?i2_printf+2
  9587  0005AC  C05E  F010         	movff	_B_total_dispensed+1,?i2_printf+3
  9588  0005B0  ECFE  F017         	call	i2_printf	;wreg free
  9589                           
  9590                           ;main.c: 766: _delay((unsigned long)((800)*(40000000/4000.0)));
  9591  0005B4  0E29               	movlw	41
  9592  0005B6  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9593  0005B8  0E96               	movlw	150
  9594  0005BA  6E2B               	movwf	??_interruptHandler& (0+255),c
  9595  0005BC  0E7F               	movlw	127
  9596  0005BE                     i2u566_47:
  9597  0005BE  2EE8               	decfsz	wreg,f,c
  9598  0005C0  D7FE               	bra	i2u566_47
  9599  0005C2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9600  0005C4  D7FC               	bra	i2u566_47
  9601  0005C6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9602  0005C8  D7FA               	bra	i2u566_47
  9603  0005CA  F000               	nop	
  9604                           
  9605                           ;main.c: 767: initLCD();
  9606  0005CC  ECAA  F021         	call	i2_initLCD	;wreg free
  9607                           
  9608                           ;main.c: 768: printf("N dispensed:%d",N_total_dispensed);
  9609  0005D0  0E51               	movlw	low STR_55
  9610  0005D2  6E0D               	movwf	i2printf@f,c
  9611  0005D4  0EFE               	movlw	high STR_55
  9612  0005D6  6E0E               	movwf	i2printf@f+1,c
  9613  0005D8  C098  F00F         	movff	_N_total_dispensed,?i2_printf+2
  9614  0005DC  C099  F010         	movff	_N_total_dispensed+1,?i2_printf+3
  9615  0005E0  ECFE  F017         	call	i2_printf	;wreg free
  9616                           
  9617                           ;main.c: 769: _delay((unsigned long)((800)*(40000000/4000.0)));
  9618  0005E4  0E29               	movlw	41
  9619  0005E6  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9620  0005E8  0E96               	movlw	150
  9621  0005EA  6E2B               	movwf	??_interruptHandler& (0+255),c
  9622  0005EC  0E7F               	movlw	127
  9623  0005EE                     i2u567_47:
  9624  0005EE  2EE8               	decfsz	wreg,f,c
  9625  0005F0  D7FE               	bra	i2u567_47
  9626  0005F2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9627  0005F4  D7FC               	bra	i2u567_47
  9628  0005F6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9629  0005F8  D7FA               	bra	i2u567_47
  9630  0005FA  F000               	nop	
  9631                           
  9632                           ;main.c: 770: initLCD();
  9633  0005FC  ECAA  F021         	call	i2_initLCD	;wreg free
  9634                           
  9635                           ;main.c: 771: printf("S dispensed:%d",S_total_dispensed);
  9636  000600  0E60               	movlw	low STR_56
  9637  000602  6E0D               	movwf	i2printf@f,c
  9638  000604  0EFE               	movlw	high STR_56
  9639  000606  6E0E               	movwf	i2printf@f+1,c
  9640  000608  C096  F00F         	movff	_S_total_dispensed,?i2_printf+2
  9641  00060C  C097  F010         	movff	_S_total_dispensed+1,?i2_printf+3
  9642  000610  ECFE  F017         	call	i2_printf	;wreg free
  9643                           
  9644                           ;main.c: 772: _delay((unsigned long)((800)*(40000000/4000.0)));
  9645  000614  0E29               	movlw	41
  9646  000616  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9647  000618  0E96               	movlw	150
  9648  00061A  6E2B               	movwf	??_interruptHandler& (0+255),c
  9649  00061C  0E7F               	movlw	127
  9650  00061E                     i2u568_47:
  9651  00061E  2EE8               	decfsz	wreg,f,c
  9652  000620  D7FE               	bra	i2u568_47
  9653  000622  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9654  000624  D7FC               	bra	i2u568_47
  9655  000626  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9656  000628  D7FA               	bra	i2u568_47
  9657  00062A  F000               	nop	
  9658                           
  9659                           ;main.c: 773: initLCD();
  9660  00062C  ECAA  F021         	call	i2_initLCD	;wreg free
  9661                           
  9662                           ;main.c: 774: printf("W dispensed:%d",W_total_dispensed);
  9663  000630  0E6F               	movlw	low STR_57
  9664  000632  6E0D               	movwf	i2printf@f,c
  9665  000634  0EFE               	movlw	high STR_57
  9666  000636  6E0E               	movwf	i2printf@f+1,c
  9667  000638  C094  F00F         	movff	_W_total_dispensed,?i2_printf+2
  9668  00063C  C095  F010         	movff	_W_total_dispensed+1,?i2_printf+3
  9669  000640  ECFE  F017         	call	i2_printf	;wreg free
  9670                           
  9671                           ;main.c: 776: _delay((unsigned long)((800)*(40000000/4000.0)));
  9672  000644  0E29               	movlw	41
  9673  000646  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9674  000648  0E96               	movlw	150
  9675  00064A  6E2B               	movwf	??_interruptHandler& (0+255),c
  9676  00064C  0E7F               	movlw	127
  9677  00064E                     i2u569_47:
  9678  00064E  2EE8               	decfsz	wreg,f,c
  9679  000650  D7FE               	bra	i2u569_47
  9680  000652  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9681  000654  D7FC               	bra	i2u569_47
  9682  000656  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9683  000658  D7FA               	bra	i2u569_47
  9684  00065A  F000               	nop	
  9685                           
  9686                           ;main.c: 777: initLCD();
  9687  00065C  ECAA  F021         	call	i2_initLCD	;wreg free
  9688                           
  9689                           ;main.c: 779: printf("Bolt_remain:%d",B_remain);
  9690  000660  0E7E               	movlw	low STR_38
  9691  000662  6E0D               	movwf	i2printf@f,c
  9692  000664  0EFE               	movlw	high STR_38
  9693  000666  6E0E               	movwf	i2printf@f+1,c
  9694  000668  C0A2  F00F         	movff	_B_remain,?i2_printf+2
  9695  00066C  C0A3  F010         	movff	_B_remain+1,?i2_printf+3
  9696  000670  ECFE  F017         	call	i2_printf	;wreg free
  9697                           
  9698                           ;main.c: 780: _delay((unsigned long)((300)*(40000000/4000.0)));
  9699  000674  0E10               	movlw	16
  9700  000676  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9701  000678  0E39               	movlw	57
  9702  00067A  6E2B               	movwf	??_interruptHandler& (0+255),c
  9703  00067C  0E0E               	movlw	14
  9704  00067E                     i2u570_47:
  9705  00067E  2EE8               	decfsz	wreg,f,c
  9706  000680  D7FE               	bra	i2u570_47
  9707  000682  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9708  000684  D7FC               	bra	i2u570_47
  9709  000686  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9710  000688  D7FA               	bra	i2u570_47
  9711                           
  9712                           ;main.c: 781: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9713  00068A  0E01               	movlw	1
  9714  00068C  EC47  F023         	call	i2_lcdInst
  9715  000690  0EC3               	movlw	195
  9716  000692  6E2B               	movwf	??_interruptHandler& (0+255),c
  9717  000694  0ECD               	movlw	205
  9718  000696                     i2u571_47:
  9719  000696  2EE8               	decfsz	wreg,f,c
  9720  000698  D7FE               	bra	i2u571_47
  9721  00069A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9722  00069C  D7FC               	bra	i2u571_47
  9723  00069E  F000               	nop	
  9724                           
  9725                           ;main.c: 782: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9726  0006A0  0E80               	movlw	128
  9727  0006A2  EC47  F023         	call	i2_lcdInst
  9728  0006A6  0E41               	movlw	65
  9729  0006A8  6E2B               	movwf	??_interruptHandler& (0+255),c
  9730  0006AA  0EEE               	movlw	238
  9731  0006AC                     i2u572_47:
  9732  0006AC  2EE8               	decfsz	wreg,f,c
  9733  0006AE  D7FE               	bra	i2u572_47
  9734  0006B0  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9735  0006B2  D7FC               	bra	i2u572_47
  9736  0006B4  D000               	nop2	
  9737                           
  9738                           ;main.c: 783: printf("Nut_remain:%d",N_remain);
  9739  0006B6  0ED6               	movlw	low STR_39
  9740  0006B8  6E0D               	movwf	i2printf@f,c
  9741  0006BA  0EFE               	movlw	high STR_39
  9742  0006BC  6E0E               	movwf	i2printf@f+1,c
  9743  0006BE  C0A0  F00F         	movff	_N_remain,?i2_printf+2
  9744  0006C2  C0A1  F010         	movff	_N_remain+1,?i2_printf+3
  9745  0006C6  ECFE  F017         	call	i2_printf	;wreg free
  9746                           
  9747                           ;main.c: 784: _delay((unsigned long)((300)*(40000000/4000.0)));
  9748  0006CA  0E10               	movlw	16
  9749  0006CC  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9750  0006CE  0E39               	movlw	57
  9751  0006D0  6E2B               	movwf	??_interruptHandler& (0+255),c
  9752  0006D2  0E0E               	movlw	14
  9753  0006D4                     i2u573_47:
  9754  0006D4  2EE8               	decfsz	wreg,f,c
  9755  0006D6  D7FE               	bra	i2u573_47
  9756  0006D8  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9757  0006DA  D7FC               	bra	i2u573_47
  9758  0006DC  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9759  0006DE  D7FA               	bra	i2u573_47
  9760                           
  9761                           ;main.c: 785: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9762  0006E0  0E01               	movlw	1
  9763  0006E2  EC47  F023         	call	i2_lcdInst
  9764  0006E6  0EC3               	movlw	195
  9765  0006E8  6E2B               	movwf	??_interruptHandler& (0+255),c
  9766  0006EA  0ECD               	movlw	205
  9767  0006EC                     i2u574_47:
  9768  0006EC  2EE8               	decfsz	wreg,f,c
  9769  0006EE  D7FE               	bra	i2u574_47
  9770  0006F0  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9771  0006F2  D7FC               	bra	i2u574_47
  9772  0006F4  F000               	nop	
  9773                           
  9774                           ;main.c: 786: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9775  0006F6  0E80               	movlw	128
  9776  0006F8  EC47  F023         	call	i2_lcdInst
  9777  0006FC  0E41               	movlw	65
  9778  0006FE  6E2B               	movwf	??_interruptHandler& (0+255),c
  9779  000700  0EEE               	movlw	238
  9780  000702                     i2u575_47:
  9781  000702  2EE8               	decfsz	wreg,f,c
  9782  000704  D7FE               	bra	i2u575_47
  9783  000706  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9784  000708  D7FC               	bra	i2u575_47
  9785  00070A  D000               	nop2	
  9786                           
  9787                           ;main.c: 787: printf("Spacer_remain:%d",S_remain);
  9788  00070C  0EB0               	movlw	low STR_40
  9789  00070E  6E0D               	movwf	i2printf@f,c
  9790  000710  0EFD               	movlw	high STR_40
  9791  000712  6E0E               	movwf	i2printf@f+1,c
  9792  000714  C09E  F00F         	movff	_S_remain,?i2_printf+2
  9793  000718  C09F  F010         	movff	_S_remain+1,?i2_printf+3
  9794  00071C  ECFE  F017         	call	i2_printf	;wreg free
  9795                           
  9796                           ;main.c: 788: _delay((unsigned long)((300)*(40000000/4000.0)));
  9797  000720  0E10               	movlw	16
  9798  000722  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9799  000724  0E39               	movlw	57
  9800  000726  6E2B               	movwf	??_interruptHandler& (0+255),c
  9801  000728  0E0E               	movlw	14
  9802  00072A                     i2u576_47:
  9803  00072A  2EE8               	decfsz	wreg,f,c
  9804  00072C  D7FE               	bra	i2u576_47
  9805  00072E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9806  000730  D7FC               	bra	i2u576_47
  9807  000732  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9808  000734  D7FA               	bra	i2u576_47
  9809                           
  9810                           ;main.c: 789: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9811  000736  0E01               	movlw	1
  9812  000738  EC47  F023         	call	i2_lcdInst
  9813  00073C  0EC3               	movlw	195
  9814  00073E  6E2B               	movwf	??_interruptHandler& (0+255),c
  9815  000740  0ECD               	movlw	205
  9816  000742                     i2u577_47:
  9817  000742  2EE8               	decfsz	wreg,f,c
  9818  000744  D7FE               	bra	i2u577_47
  9819  000746  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9820  000748  D7FC               	bra	i2u577_47
  9821  00074A  F000               	nop	
  9822                           
  9823                           ;main.c: 790: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9824  00074C  0E80               	movlw	128
  9825  00074E  EC47  F023         	call	i2_lcdInst
  9826  000752  0E41               	movlw	65
  9827  000754  6E2B               	movwf	??_interruptHandler& (0+255),c
  9828  000756  0EEE               	movlw	238
  9829  000758                     i2u578_47:
  9830  000758  2EE8               	decfsz	wreg,f,c
  9831  00075A  D7FE               	bra	i2u578_47
  9832  00075C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9833  00075E  D7FC               	bra	i2u578_47
  9834  000760  D000               	nop2	
  9835                           
  9836                           ;main.c: 791: printf("Washer_remain:%d",W_remain);
  9837  000762  0EC1               	movlw	low STR_41
  9838  000764  6E0D               	movwf	i2printf@f,c
  9839  000766  0EFD               	movlw	high STR_41
  9840  000768  6E0E               	movwf	i2printf@f+1,c
  9841  00076A  C09C  F00F         	movff	_W_remain,?i2_printf+2
  9842  00076E  C09D  F010         	movff	_W_remain+1,?i2_printf+3
  9843  000772  ECFE  F017         	call	i2_printf	;wreg free
  9844                           
  9845                           ;main.c: 792: _delay((unsigned long)((300)*(40000000/4000.0)));
  9846  000776  0E10               	movlw	16
  9847  000778  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9848  00077A  0E39               	movlw	57
  9849  00077C  6E2B               	movwf	??_interruptHandler& (0+255),c
  9850  00077E  0E0E               	movlw	14
  9851  000780                     i2u579_47:
  9852  000780  2EE8               	decfsz	wreg,f,c
  9853  000782  D7FE               	bra	i2u579_47
  9854  000784  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9855  000786  D7FC               	bra	i2u579_47
  9856  000788  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9857  00078A  D7FA               	bra	i2u579_47
  9858                           
  9859                           ;main.c: 793: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9860  00078C  0E01               	movlw	1
  9861  00078E  EC47  F023         	call	i2_lcdInst
  9862  000792  0EC3               	movlw	195
  9863  000794  6E2B               	movwf	??_interruptHandler& (0+255),c
  9864  000796  0ECD               	movlw	205
  9865  000798                     i2u580_47:
  9866  000798  2EE8               	decfsz	wreg,f,c
  9867  00079A  D7FE               	bra	i2u580_47
  9868  00079C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9869  00079E  D7FC               	bra	i2u580_47
  9870  0007A0  F000               	nop	
  9871                           
  9872                           ;main.c: 794: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9873  0007A2  0E80               	movlw	128
  9874  0007A4  EC47  F023         	call	i2_lcdInst
  9875  0007A8  0E41               	movlw	65
  9876  0007AA  6E2B               	movwf	??_interruptHandler& (0+255),c
  9877  0007AC  0EEE               	movlw	238
  9878  0007AE                     i2u581_47:
  9879  0007AE  2EE8               	decfsz	wreg,f,c
  9880  0007B0  D7FE               	bra	i2u581_47
  9881  0007B2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9882  0007B4  D7FC               	bra	i2u581_47
  9883  0007B6  D000               	nop2	
  9884                           
  9885                           ;main.c: 795: printf("operation time:");
  9886  0007B8  0EF4               	movlw	low STR_50
  9887  0007BA  6E0D               	movwf	i2printf@f,c
  9888  0007BC  0EFD               	movlw	high STR_50
  9889  0007BE  6E0E               	movwf	i2printf@f+1,c
  9890  0007C0  ECFE  F017         	call	i2_printf	;wreg free
  9891                           
  9892                           ;main.c: 796: lcdInst(0xC0);;
  9893  0007C4  0EC0               	movlw	192
  9894  0007C6  EC47  F023         	call	i2_lcdInst
  9895                           
  9896                           ;main.c: 797: printf("00:04:03");
  9897  0007CA  0E89               	movlw	low STR_63
  9898  0007CC  6E0D               	movwf	i2printf@f,c
  9899  0007CE  0EFF               	movlw	high STR_63
  9900  0007D0  6E0E               	movwf	i2printf@f+1,c
  9901  0007D2  ECFE  F017         	call	i2_printf	;wreg free
  9902                           
  9903                           ;main.c: 798: _delay((unsigned long)((1000)*(40000000/4000.0)));
  9904  0007D6  0E33               	movlw	51
  9905  0007D8  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9906  0007DA  0EBB               	movlw	187
  9907  0007DC  6E2B               	movwf	??_interruptHandler& (0+255),c
  9908  0007DE  0EE0               	movlw	224
  9909  0007E0                     i2u582_47:
  9910  0007E0  2EE8               	decfsz	wreg,f,c
  9911  0007E2  D7FE               	bra	i2u582_47
  9912  0007E4  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9913  0007E6  D7FC               	bra	i2u582_47
  9914  0007E8  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9915  0007EA  D7FA               	bra	i2u582_47
  9916                           
  9917                           ;main.c: 799: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9918  0007EC  0E01               	movlw	1
  9919  0007EE  EC47  F023         	call	i2_lcdInst
  9920  0007F2  0EC3               	movlw	195
  9921  0007F4  6E2B               	movwf	??_interruptHandler& (0+255),c
  9922  0007F6  0ECD               	movlw	205
  9923  0007F8                     i2u583_47:
  9924  0007F8  2EE8               	decfsz	wreg,f,c
  9925  0007FA  D7FE               	bra	i2u583_47
  9926  0007FC  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9927  0007FE  D7FC               	bra	i2u583_47
  9928  000800  F000               	nop	
  9929                           
  9930                           ;main.c: 800: printf("you're done");
  9931  000802  0E32               	movlw	low STR_42
  9932  000804  6E0D               	movwf	i2printf@f,c
  9933  000806  0EFF               	movlw	high STR_42
  9934  000808  6E0E               	movwf	i2printf@f+1,c
  9935  00080A  ECFE  F017         	call	i2_printf	;wreg free
  9936                           
  9937                           ;main.c: 801: _delay((unsigned long)((1000)*(40000000/4000.0)));
  9938  00080E  0E33               	movlw	51
  9939  000810  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9940  000812  0EBB               	movlw	187
  9941  000814  6E2B               	movwf	??_interruptHandler& (0+255),c
  9942  000816  0EE0               	movlw	224
  9943  000818                     i2u584_47:
  9944  000818  2EE8               	decfsz	wreg,f,c
  9945  00081A  D7FE               	bra	i2u584_47
  9946  00081C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9947  00081E  D7FC               	bra	i2u584_47
  9948  000820  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9949  000822  D7FA               	bra	i2u584_47
  9950                           
  9951                           ;main.c: 802: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9952  000824  0E80               	movlw	128
  9953  000826  EC47  F023         	call	i2_lcdInst
  9954  00082A  0E41               	movlw	65
  9955  00082C  6E2B               	movwf	??_interruptHandler& (0+255),c
  9956  00082E  0EEE               	movlw	238
  9957  000830                     i2u585_47:
  9958  000830  2EE8               	decfsz	wreg,f,c
  9959  000832  D7FE               	bra	i2u585_47
  9960  000834  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9961  000836  D7FC               	bra	i2u585_47
  9962  000838  D000               	nop2	
  9963  00083A  D3BB               	goto	i2l6184
  9964  00083C                     i2l431:
  9965                           
  9966                           ;main.c: 807: }
  9967                           ;main.c: 809: if (temp == '4'){
  9968  00083C  0E34               	movlw	52
  9969  00083E  1845               	xorwf	interruptHandler@temp,w,c
  9970  000840  A4D8               	btfss	status,2,c
  9971  000842  D00A               	goto	i2l434
  9972                           
  9973                           ;main.c: 810: operation_done = 1;
  9974  000844  0E00               	movlw	0
  9975  000846  0100               	movlb	0	; () banked
  9976  000848  6FB7               	movwf	(_operation_done+1)& (0+255),b
  9977  00084A  0E01               	movlw	1
  9978  00084C  6FB6               	movwf	_operation_done& (0+255),b
  9979                           
  9980                           ;main.c: 811: mode = 0;
  9981  00084E  0E00               	movlw	0
  9982  000850  6FBB               	movwf	(_mode+1)& (0+255),b
  9983  000852  0E00               	movlw	0
  9984  000854                     L10:
  9985  000854  6FBA               	movwf	_mode& (0+255),b
  9986  000856  D3AD               	goto	i2l6184
  9987  000858                     i2l434:
  9988                           
  9989                           ;main.c: 814: }
  9990                           ;main.c: 816: }
  9991                           ;main.c: 841: if (state == 0){
  9992                           
  9993                           ; BSR set to: 0
  9994                           
  9995                           ; BSR set to: 0
  9996  000858  0100               	movlb	0	; () banked
  9997  00085A  51AE               	movf	_state& (0+255),w,b
  9998  00085C  11AF               	iorwf	(_state+1)& (0+255),w,b
  9999  00085E  A4D8               	btfss	status,2,c
 10000  000860  D0CD               	goto	i2l435
 10001                           
 10002                           ; BSR set to: 0
 10003                           ;main.c: 843: if(temp == '4'){
 10004  000862  0E34               	movlw	52
 10005  000864  1845               	xorwf	interruptHandler@temp,w,c
 10006  000866  A4D8               	btfss	status,2,c
 10007  000868  D01F               	goto	i2l436
 10008                           
 10009                           ; BSR set to: 0
 10010                           ;main.c: 844: assembly_step = 4;
 10011  00086A  0E00               	movlw	0
 10012  00086C  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10013  00086E  0E04               	movlw	4
 10014  000870  6FAC               	movwf	_assembly_step& (0+255),b
 10015                           
 10016                           ; BSR set to: 0
 10017                           ;main.c: 845: prev_state = state;
 10018  000872  C0AE  F067         	movff	_state,_prev_state
 10019  000876  C0AF  F068         	movff	_state+1,_prev_state+1
 10020                           
 10021                           ;main.c: 846: state = 1;
 10022  00087A  0E00               	movlw	0
 10023  00087C  6FAF               	movwf	(_state+1)& (0+255),b
 10024  00087E  0E01               	movlw	1
 10025  000880  6FAE               	movwf	_state& (0+255),b
 10026                           
 10027                           ; BSR set to: 0
 10028                           ;main.c: 847: lcdInst(0xC0);;
 10029  000882  0EC0               	movlw	192
 10030  000884  EC47  F023         	call	i2_lcdInst
 10031                           
 10032                           ;main.c: 848: putch(keys[keypress]);
 10033  000888  5044               	movf	interruptHandler@keypress,w,c
 10034  00088A  0D01               	mullw	1
 10035  00088C  0E93               	movlw	low _keys
 10036  00088E  24F3               	addwf	prodl,w,c
 10037  000890  6EF6               	movwf	tblptrl,c
 10038  000892  0EFC               	movlw	high _keys
 10039  000894  20F4               	addwfc	prodh,w,c
 10040  000896  6EF7               	movwf	tblptrh,c
 10041  000898                     	if	1	;There are 3 active tblptr bytes
 10042  000898  6AF8               	clrf	tblptru,c
 10043  00089A  0E00               	movlw	low (__mediumconst shr (0+16))
 10044  00089C  22F8               	addwfc	tblptru,f,c
 10045  00089E                     	endif
 10046  00089E  0008               	tblrd		*
 10047  0008A0  50F5               	movf	tablat,w,c
 10048  0008A2  EC3D  F023         	call	i2_putch
 10049                           
 10050                           ;main.c: 850: }
 10051  0008A6  D0A3               	goto	i2l445
 10052  0008A8                     i2l436:
 10053                           
 10054                           ;main.c: 851: else if(temp == '5'){
 10055  0008A8  0E35               	movlw	53
 10056  0008AA  1845               	xorwf	interruptHandler@temp,w,c
 10057  0008AC  A4D8               	btfss	status,2,c
 10058  0008AE  D020               	goto	i2l438
 10059                           
 10060                           ;main.c: 852: assembly_step = 5;
 10061  0008B0  0E00               	movlw	0
 10062  0008B2  0100               	movlb	0	; () banked
 10063  0008B4  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10064  0008B6  0E05               	movlw	5
 10065  0008B8  6FAC               	movwf	_assembly_step& (0+255),b
 10066                           
 10067                           ; BSR set to: 0
 10068                           ;main.c: 853: prev_state = state;
 10069  0008BA  C0AE  F067         	movff	_state,_prev_state
 10070  0008BE  C0AF  F068         	movff	_state+1,_prev_state+1
 10071                           
 10072                           ;main.c: 854: state = 1;
 10073  0008C2  0E00               	movlw	0
 10074  0008C4  6FAF               	movwf	(_state+1)& (0+255),b
 10075  0008C6  0E01               	movlw	1
 10076  0008C8  6FAE               	movwf	_state& (0+255),b
 10077                           
 10078                           ; BSR set to: 0
 10079                           ;main.c: 855: lcdInst(0xC0);;
 10080  0008CA  0EC0               	movlw	192
 10081  0008CC  EC47  F023         	call	i2_lcdInst
 10082                           
 10083                           ;main.c: 856: putch(keys[keypress]);
 10084  0008D0  5044               	movf	interruptHandler@keypress,w,c
 10085  0008D2  0D01               	mullw	1
 10086  0008D4  0E93               	movlw	low _keys
 10087  0008D6  24F3               	addwf	prodl,w,c
 10088  0008D8  6EF6               	movwf	tblptrl,c
 10089  0008DA  0EFC               	movlw	high _keys
 10090  0008DC  20F4               	addwfc	prodh,w,c
 10091  0008DE  6EF7               	movwf	tblptrh,c
 10092  0008E0                     	if	1	;There are 3 active tblptr bytes
 10093  0008E0  6AF8               	clrf	tblptru,c
 10094  0008E2  0E00               	movlw	low (__mediumconst shr (0+16))
 10095  0008E4  22F8               	addwfc	tblptru,f,c
 10096  0008E6                     	endif
 10097  0008E6  0008               	tblrd		*
 10098  0008E8  50F5               	movf	tablat,w,c
 10099  0008EA  EC3D  F023         	call	i2_putch
 10100                           
 10101                           ;main.c: 858: }
 10102  0008EE  D07F               	goto	i2l445
 10103  0008F0                     i2l438:
 10104                           
 10105                           ;main.c: 859: else if (temp == '6') {
 10106  0008F0  0E36               	movlw	54
 10107  0008F2  1845               	xorwf	interruptHandler@temp,w,c
 10108  0008F4  A4D8               	btfss	status,2,c
 10109  0008F6  D020               	goto	i2l440
 10110                           
 10111                           ;main.c: 860: assembly_step = 6;
 10112  0008F8  0E00               	movlw	0
 10113  0008FA  0100               	movlb	0	; () banked
 10114  0008FC  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10115  0008FE  0E06               	movlw	6
 10116  000900  6FAC               	movwf	_assembly_step& (0+255),b
 10117                           
 10118                           ; BSR set to: 0
 10119                           ;main.c: 861: prev_state = state;
 10120  000902  C0AE  F067         	movff	_state,_prev_state
 10121  000906  C0AF  F068         	movff	_state+1,_prev_state+1
 10122                           
 10123                           ;main.c: 862: state = 1;
 10124  00090A  0E00               	movlw	0
 10125  00090C  6FAF               	movwf	(_state+1)& (0+255),b
 10126  00090E  0E01               	movlw	1
 10127  000910  6FAE               	movwf	_state& (0+255),b
 10128                           
 10129                           ; BSR set to: 0
 10130                           ;main.c: 863: lcdInst(0xC0);;
 10131  000912  0EC0               	movlw	192
 10132  000914  EC47  F023         	call	i2_lcdInst
 10133                           
 10134                           ;main.c: 864: putch(keys[keypress]);
 10135  000918  5044               	movf	interruptHandler@keypress,w,c
 10136  00091A  0D01               	mullw	1
 10137  00091C  0E93               	movlw	low _keys
 10138  00091E  24F3               	addwf	prodl,w,c
 10139  000920  6EF6               	movwf	tblptrl,c
 10140  000922  0EFC               	movlw	high _keys
 10141  000924  20F4               	addwfc	prodh,w,c
 10142  000926  6EF7               	movwf	tblptrh,c
 10143  000928                     	if	1	;There are 3 active tblptr bytes
 10144  000928  6AF8               	clrf	tblptru,c
 10145  00092A  0E00               	movlw	low (__mediumconst shr (0+16))
 10146  00092C  22F8               	addwfc	tblptru,f,c
 10147  00092E                     	endif
 10148  00092E  0008               	tblrd		*
 10149  000930  50F5               	movf	tablat,w,c
 10150  000932  EC3D  F023         	call	i2_putch
 10151                           
 10152                           ;main.c: 865: }
 10153  000936  D05B               	goto	i2l445
 10154  000938                     i2l440:
 10155                           
 10156                           ;main.c: 866: else if (temp == '7'){
 10157  000938  0E37               	movlw	55
 10158  00093A  1845               	xorwf	interruptHandler@temp,w,c
 10159  00093C  A4D8               	btfss	status,2,c
 10160  00093E  D020               	goto	i2l442
 10161                           
 10162                           ;main.c: 867: assembly_step = 7;
 10163  000940  0E00               	movlw	0
 10164  000942  0100               	movlb	0	; () banked
 10165  000944  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10166  000946  0E07               	movlw	7
 10167  000948  6FAC               	movwf	_assembly_step& (0+255),b
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;main.c: 868: prev_state = state;
 10171  00094A  C0AE  F067         	movff	_state,_prev_state
 10172  00094E  C0AF  F068         	movff	_state+1,_prev_state+1
 10173                           
 10174                           ;main.c: 869: state = 1;
 10175  000952  0E00               	movlw	0
 10176  000954  6FAF               	movwf	(_state+1)& (0+255),b
 10177  000956  0E01               	movlw	1
 10178  000958  6FAE               	movwf	_state& (0+255),b
 10179                           
 10180                           ; BSR set to: 0
 10181                           ;main.c: 870: lcdInst(0xC0);;
 10182  00095A  0EC0               	movlw	192
 10183  00095C  EC47  F023         	call	i2_lcdInst
 10184                           
 10185                           ;main.c: 871: putch(keys[keypress]);
 10186  000960  5044               	movf	interruptHandler@keypress,w,c
 10187  000962  0D01               	mullw	1
 10188  000964  0E93               	movlw	low _keys
 10189  000966  24F3               	addwf	prodl,w,c
 10190  000968  6EF6               	movwf	tblptrl,c
 10191  00096A  0EFC               	movlw	high _keys
 10192  00096C  20F4               	addwfc	prodh,w,c
 10193  00096E  6EF7               	movwf	tblptrh,c
 10194  000970                     	if	1	;There are 3 active tblptr bytes
 10195  000970  6AF8               	clrf	tblptru,c
 10196  000972  0E00               	movlw	low (__mediumconst shr (0+16))
 10197  000974  22F8               	addwfc	tblptru,f,c
 10198  000976                     	endif
 10199  000976  0008               	tblrd		*
 10200  000978  50F5               	movf	tablat,w,c
 10201  00097A  EC3D  F023         	call	i2_putch
 10202                           
 10203                           ;main.c: 873: }
 10204  00097E  D037               	goto	i2l445
 10205  000980                     i2l442:
 10206                           
 10207                           ;main.c: 874: else if (temp == '8'){
 10208  000980  0E38               	movlw	56
 10209  000982  1845               	xorwf	interruptHandler@temp,w,c
 10210  000984  A4D8               	btfss	status,2,c
 10211  000986  D020               	goto	i2l444
 10212                           
 10213                           ;main.c: 875: assembly_step = 8;
 10214  000988  0E00               	movlw	0
 10215  00098A  0100               	movlb	0	; () banked
 10216  00098C  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10217  00098E  0E08               	movlw	8
 10218  000990  6FAC               	movwf	_assembly_step& (0+255),b
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;main.c: 876: prev_state = state;
 10222  000992  C0AE  F067         	movff	_state,_prev_state
 10223  000996  C0AF  F068         	movff	_state+1,_prev_state+1
 10224                           
 10225                           ;main.c: 877: state = 1;
 10226  00099A  0E00               	movlw	0
 10227  00099C  6FAF               	movwf	(_state+1)& (0+255),b
 10228  00099E  0E01               	movlw	1
 10229  0009A0  6FAE               	movwf	_state& (0+255),b
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;main.c: 878: lcdInst(0xC0);;
 10233  0009A2  0EC0               	movlw	192
 10234  0009A4  EC47  F023         	call	i2_lcdInst
 10235                           
 10236                           ;main.c: 879: putch(keys[keypress]);
 10237  0009A8  5044               	movf	interruptHandler@keypress,w,c
 10238  0009AA  0D01               	mullw	1
 10239  0009AC  0E93               	movlw	low _keys
 10240  0009AE  24F3               	addwf	prodl,w,c
 10241  0009B0  6EF6               	movwf	tblptrl,c
 10242  0009B2  0EFC               	movlw	high _keys
 10243  0009B4  20F4               	addwfc	prodh,w,c
 10244  0009B6  6EF7               	movwf	tblptrh,c
 10245  0009B8                     	if	1	;There are 3 active tblptr bytes
 10246  0009B8  6AF8               	clrf	tblptru,c
 10247  0009BA  0E00               	movlw	low (__mediumconst shr (0+16))
 10248  0009BC  22F8               	addwfc	tblptru,f,c
 10249  0009BE                     	endif
 10250  0009BE  0008               	tblrd		*
 10251  0009C0  50F5               	movf	tablat,w,c
 10252  0009C2  EC3D  F023         	call	i2_putch
 10253                           
 10254                           ;main.c: 881: }
 10255  0009C6  D013               	goto	i2l445
 10256  0009C8                     i2l444:
 10257                           
 10258                           ;main.c: 882: else{
 10259                           ;main.c: 888: initLCD();
 10260  0009C8  ECAA  F021         	call	i2_initLCD	;wreg free
 10261                           
 10262                           ;main.c: 889: printf("Wrong number! ");
 10263  0009CC  0E24               	movlw	low STR_65
 10264  0009CE  6E0D               	movwf	i2printf@f,c
 10265  0009D0  0EFE               	movlw	high STR_65
 10266  0009D2  6E0E               	movwf	i2printf@f+1,c
 10267  0009D4  ECFE  F017         	call	i2_printf	;wreg free
 10268                           
 10269                           ;main.c: 890: _delay((unsigned long)((1000)*(40000000/4000.0)));
 10270  0009D8  0E33               	movlw	51
 10271  0009DA  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10272  0009DC  0EBB               	movlw	187
 10273  0009DE  6E2B               	movwf	??_interruptHandler& (0+255),c
 10274  0009E0  0EE0               	movlw	224
 10275  0009E2                     i2u586_47:
 10276  0009E2  2EE8               	decfsz	wreg,f,c
 10277  0009E4  D7FE               	bra	i2u586_47
 10278  0009E6  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10279  0009E8  D7FC               	bra	i2u586_47
 10280  0009EA  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10281  0009EC  D7FA               	bra	i2u586_47
 10282  0009EE                     i2l445:
 10283                           
 10284                           ;main.c: 892: }
 10285                           ;main.c: 898: generate_compartment_array(assembly_step);
 10286  0009EE  C0AC  F001         	movff	_assembly_step,i2generate_compartment_array@step
 10287  0009F2  C0AD  F002         	movff	_assembly_step+1,i2generate_compartment_array@step+1
 10288  0009F6  EC0B  F01A         	call	i2_generate_compartment_array	;wreg free
 10289  0009FA  D2DB               	goto	i2l6184
 10290  0009FC                     i2l435:
 10291                           
 10292                           ;main.c: 905: }
 10293                           ;main.c: 913: if(state == 1){
 10294  0009FC  0100               	movlb	0	; () banked
 10295  0009FE  05AE               	decf	_state& (0+255),w,b
 10296  000A00  11AF               	iorwf	(_state+1)& (0+255),w,b
 10297  000A02  A4D8               	btfss	status,2,c
 10298  000A04  D19D               	goto	i2l446
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;main.c: 914: if (temp == 'A'){
 10302  000A06  0E41               	movlw	65
 10303  000A08  1845               	xorwf	interruptHandler@temp,w,c
 10304  000A0A  A4D8               	btfss	status,2,c
 10305  000A0C  D004               	goto	i2l447
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;main.c: 915: state = prev_state;
 10309  000A0E  C067  F0AE         	movff	_prev_state,_state
 10310  000A12  C068  F0AF         	movff	_prev_state+1,_state+1
 10311  000A16                     i2l447:
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;main.c: 916: }
 10315                           ;main.c: 918: if (temp == '1'){
 10316                           
 10317                           ; BSR set to: 0
 10318  000A16  0E31               	movlw	49
 10319  000A18  1845               	xorwf	interruptHandler@temp,w,c
 10320  000A1A  A4D8               	btfss	status,2,c
 10321  000A1C  D01C               	goto	i2l448
 10322                           
 10323                           ; BSR set to: 0
 10324                           ;main.c: 919: lcdInst(0xC0);;
 10325  000A1E  0EC0               	movlw	192
 10326  000A20  EC47  F023         	call	i2_lcdInst
 10327                           
 10328                           ;main.c: 920: putch('B');
 10329  000A24  0E42               	movlw	66
 10330  000A26  EC3D  F023         	call	i2_putch
 10331                           
 10332                           ;main.c: 921: strcpy(temp_set,"B");
 10333  000A2A  0ECE               	movlw	low _temp_set
 10334  000A2C  6E07               	movwf	strcpy@to,c
 10335  000A2E  0E01               	movlw	high _temp_set
 10336  000A30  6E08               	movwf	strcpy@to+1,c
 10337  000A32  0EFD               	movlw	low STR_66
 10338  000A34  6E09               	movwf	strcpy@from,c
 10339  000A36  0EFF               	movlw	high STR_66
 10340  000A38  6E0A               	movwf	strcpy@from+1,c
 10341  000A3A  ECF5  F021         	call	_strcpy	;wreg free
 10342                           
 10343                           ;main.c: 922: strcat(current_set,temp_set);
 10344  000A3E  0EC3               	movlw	low _current_set
 10345  000A40  6E01               	movwf	strcat@to,c
 10346  000A42  0E00               	movlw	high _current_set
 10347  000A44  6E02               	movwf	strcat@to+1,c
 10348  000A46  0ECE               	movlw	low _temp_set
 10349  000A48  6E03               	movwf	strcat@from,c
 10350  000A4A  0E01               	movlw	high _temp_set
 10351  000A4C  6E04               	movwf	strcat@from+1,c
 10352  000A4E  EC5B  F022         	call	_strcat	;wreg free
 10353                           
 10354                           ;main.c: 923: counter++;
 10355  000A52  4A6F               	infsnz	_counter,f,c
 10356  000A54  2A70               	incf	_counter+1,f,c
 10357  000A56                     i2l448:
 10358                           
 10359                           ;main.c: 924: }
 10360                           ;main.c: 926: if(temp == '2'){
 10361  000A56  0E32               	movlw	50
 10362  000A58  1845               	xorwf	interruptHandler@temp,w,c
 10363  000A5A  A4D8               	btfss	status,2,c
 10364  000A5C  D01C               	goto	i2l449
 10365                           
 10366                           ;main.c: 927: lcdInst(0xC0);;
 10367  000A5E  0EC0               	movlw	192
 10368  000A60  EC47  F023         	call	i2_lcdInst
 10369                           
 10370                           ;main.c: 928: putch('N');
 10371  000A64  0E4E               	movlw	78
 10372  000A66  EC3D  F023         	call	i2_putch
 10373                           
 10374                           ;main.c: 929: strcpy(temp_set,"N");
 10375  000A6A  0ECE               	movlw	low _temp_set
 10376  000A6C  6E07               	movwf	strcpy@to,c
 10377  000A6E  0E01               	movlw	high _temp_set
 10378  000A70  6E08               	movwf	strcpy@to+1,c
 10379  000A72  0EEA               	movlw	low (STR_88+2)
 10380  000A74  6E09               	movwf	strcpy@from,c
 10381  000A76  0EFF               	movlw	high (STR_88+2)
 10382  000A78  6E0A               	movwf	strcpy@from+1,c
 10383  000A7A  ECF5  F021         	call	_strcpy	;wreg free
 10384                           
 10385                           ;main.c: 930: strcat(current_set,temp_set);
 10386  000A7E  0EC3               	movlw	low _current_set
 10387  000A80  6E01               	movwf	strcat@to,c
 10388  000A82  0E00               	movlw	high _current_set
 10389  000A84  6E02               	movwf	strcat@to+1,c
 10390  000A86  0ECE               	movlw	low _temp_set
 10391  000A88  6E03               	movwf	strcat@from,c
 10392  000A8A  0E01               	movlw	high _temp_set
 10393  000A8C  6E04               	movwf	strcat@from+1,c
 10394  000A8E  EC5B  F022         	call	_strcat	;wreg free
 10395                           
 10396                           ;main.c: 931: counter++;
 10397  000A92  4A6F               	infsnz	_counter,f,c
 10398  000A94  2A70               	incf	_counter+1,f,c
 10399  000A96                     i2l449:
 10400                           
 10401                           ;main.c: 932: }
 10402                           ;main.c: 934: if(temp == '3'){
 10403  000A96  0E33               	movlw	51
 10404  000A98  1845               	xorwf	interruptHandler@temp,w,c
 10405  000A9A  A4D8               	btfss	status,2,c
 10406  000A9C  D01C               	goto	i2l450
 10407                           
 10408                           ;main.c: 935: lcdInst(0xC0);;
 10409  000A9E  0EC0               	movlw	192
 10410  000AA0  EC47  F023         	call	i2_lcdInst
 10411                           
 10412                           ;main.c: 936: putch('S');
 10413  000AA4  0E53               	movlw	83
 10414  000AA6  EC3D  F023         	call	i2_putch
 10415                           
 10416                           ;main.c: 938: strcpy(temp_set,"S");
 10417  000AAA  0ECE               	movlw	low _temp_set
 10418  000AAC  6E07               	movwf	strcpy@to,c
 10419  000AAE  0E01               	movlw	high _temp_set
 10420  000AB0  6E08               	movwf	strcpy@to+1,c
 10421  000AB2  0EEE               	movlw	low (STR_89+2)
 10422  000AB4  6E09               	movwf	strcpy@from,c
 10423  000AB6  0EFF               	movlw	high (STR_89+2)
 10424  000AB8  6E0A               	movwf	strcpy@from+1,c
 10425  000ABA  ECF5  F021         	call	_strcpy	;wreg free
 10426                           
 10427                           ;main.c: 939: strcat(current_set,temp_set);
 10428  000ABE  0EC3               	movlw	low _current_set
 10429  000AC0  6E01               	movwf	strcat@to,c
 10430  000AC2  0E00               	movlw	high _current_set
 10431  000AC4  6E02               	movwf	strcat@to+1,c
 10432  000AC6  0ECE               	movlw	low _temp_set
 10433  000AC8  6E03               	movwf	strcat@from,c
 10434  000ACA  0E01               	movlw	high _temp_set
 10435  000ACC  6E04               	movwf	strcat@from+1,c
 10436  000ACE  EC5B  F022         	call	_strcat	;wreg free
 10437                           
 10438                           ;main.c: 940: counter++;
 10439  000AD2  4A6F               	infsnz	_counter,f,c
 10440  000AD4  2A70               	incf	_counter+1,f,c
 10441  000AD6                     i2l450:
 10442                           
 10443                           ;main.c: 941: }
 10444                           ;main.c: 942: if (temp == '4'){
 10445  000AD6  0E34               	movlw	52
 10446  000AD8  1845               	xorwf	interruptHandler@temp,w,c
 10447  000ADA  A4D8               	btfss	status,2,c
 10448  000ADC  D01C               	goto	i2l451
 10449                           
 10450                           ;main.c: 943: lcdInst(0xC0);;
 10451  000ADE  0EC0               	movlw	192
 10452  000AE0  EC47  F023         	call	i2_lcdInst
 10453                           
 10454                           ;main.c: 944: putch('W');
 10455  000AE4  0E57               	movlw	87
 10456  000AE6  EC3D  F023         	call	i2_putch
 10457                           
 10458                           ;main.c: 946: strcpy(temp_set,"W");
 10459  000AEA  0ECE               	movlw	low _temp_set
 10460  000AEC  6E07               	movwf	strcpy@to,c
 10461  000AEE  0E01               	movlw	high _temp_set
 10462  000AF0  6E08               	movwf	strcpy@to+1,c
 10463  000AF2  0EF2               	movlw	low (STR_90+2)
 10464  000AF4  6E09               	movwf	strcpy@from,c
 10465  000AF6  0EFF               	movlw	high (STR_90+2)
 10466  000AF8  6E0A               	movwf	strcpy@from+1,c
 10467  000AFA  ECF5  F021         	call	_strcpy	;wreg free
 10468                           
 10469                           ;main.c: 947: strcat(current_set,temp_set);
 10470  000AFE  0EC3               	movlw	low _current_set
 10471  000B00  6E01               	movwf	strcat@to,c
 10472  000B02  0E00               	movlw	high _current_set
 10473  000B04  6E02               	movwf	strcat@to+1,c
 10474  000B06  0ECE               	movlw	low _temp_set
 10475  000B08  6E03               	movwf	strcat@from,c
 10476  000B0A  0E01               	movlw	high _temp_set
 10477  000B0C  6E04               	movwf	strcat@from+1,c
 10478  000B0E  EC5B  F022         	call	_strcat	;wreg free
 10479                           
 10480                           ;main.c: 949: counter++;
 10481  000B12  4A6F               	infsnz	_counter,f,c
 10482  000B14  2A70               	incf	_counter+1,f,c
 10483  000B16                     i2l451:
 10484                           
 10485                           ;main.c: 950: }
 10486                           ;main.c: 952: if (keys[keypress] == '*'){
 10487  000B16  5044               	movf	interruptHandler@keypress,w,c
 10488  000B18  0D01               	mullw	1
 10489  000B1A  0E93               	movlw	low _keys
 10490  000B1C  24F3               	addwf	prodl,w,c
 10491  000B1E  6EF6               	movwf	tblptrl,c
 10492  000B20  0EFC               	movlw	high _keys
 10493  000B22  20F4               	addwfc	prodh,w,c
 10494  000B24  6EF7               	movwf	tblptrh,c
 10495  000B26                     	if	1	;There are 3 active tblptr bytes
 10496  000B26  6AF8               	clrf	tblptru,c
 10497  000B28  0E00               	movlw	low (__mediumconst shr (0+16))
 10498  000B2A  22F8               	addwfc	tblptru,f,c
 10499  000B2C                     	endif
 10500  000B2C  0008               	tblrd		*
 10501  000B2E  50F5               	movf	tablat,w,c
 10502  000B30  0A2A               	xorlw	42
 10503  000B32  A4D8               	btfss	status,2,c
 10504  000B34  D0DA               	goto	i2l452
 10505                           
 10506                           ;main.c: 955: _delay((unsigned long)((500)*(40000000/4000.0)));
 10507  000B36  0E1A               	movlw	26
 10508  000B38  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10509  000B3A  0E5E               	movlw	94
 10510  000B3C  6E2B               	movwf	??_interruptHandler& (0+255),c
 10511  000B3E  0E6E               	movlw	110
 10512  000B40                     i2u587_47:
 10513  000B40  2EE8               	decfsz	wreg,f,c
 10514  000B42  D7FE               	bra	i2u587_47
 10515  000B44  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10516  000B46  D7FC               	bra	i2u587_47
 10517  000B48  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10518  000B4A  D7FA               	bra	i2u587_47
 10519  000B4C  D000               	nop2	
 10520                           
 10521                           ;main.c: 956: counter ++;
 10522  000B4E  4A6F               	infsnz	_counter,f,c
 10523  000B50  2A70               	incf	_counter+1,f,c
 10524                           
 10525                           ;main.c: 957: for (int i=0;i<20;i++){
 10526  000B52  0E00               	movlw	0
 10527  000B54  6E43               	movwf	interruptHandler@i+1,c
 10528  000B56  0E00               	movlw	0
 10529  000B58  6E42               	movwf	interruptHandler@i,c
 10530  000B5A  BE43               	btfsc	interruptHandler@i+1,7,c
 10531  000B5C  D008               	goto	i2l453
 10532  000B5E  5043               	movf	interruptHandler@i+1,w,c
 10533  000B60  E105               	bnz	i2u472_40
 10534  000B62  0E14               	movlw	20
 10535  000B64  5C42               	subwf	interruptHandler@i,w,c
 10536  000B66  B0D8               	btfsc	status,0,c
 10537  000B68  D089               	goto	i2u474_40
 10538  000B6A  D001               	goto	i2l453
 10539  000B6C                     i2u472_40:
 10540  000B6C  D087               	goto	i2u474_40
 10541  000B6E                     i2l453:
 10542                           
 10543                           ;main.c: 958: if (strncmp(current_set,strs[i],4) == 0){
 10544  000B6E  0EC3               	movlw	low _current_set
 10545  000B70  6E07               	movwf	strncmp@s1,c
 10546  000B72  0E00               	movlw	high _current_set
 10547  000B74  6E08               	movwf	strncmp@s1+1,c
 10548  000B76  C042  F001         	movff	interruptHandler@i,i2___wmul@multiplier
 10549  000B7A  C043  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
 10550  000B7E  0E00               	movlw	0
 10551  000B80  6E04               	movwf	i2___wmul@multiplicand+1,c
 10552  000B82  0E05               	movlw	5
 10553  000B84  6E03               	movwf	i2___wmul@multiplicand,c
 10554  000B86  ECD6  F022         	call	i2___wmul	;wreg free
 10555  000B8A  0EC6               	movlw	low _strs
 10556  000B8C  2401               	addwf	?i2___wmul,w,c
 10557  000B8E  6E09               	movwf	strncmp@s2,c
 10558  000B90  0EFC               	movlw	high _strs
 10559  000B92  2002               	addwfc	?i2___wmul+1,w,c
 10560  000B94  6E0A               	movwf	strncmp@s2+1,c
 10561  000B96  0E00               	movlw	0
 10562  000B98  6E0C               	movwf	strncmp@len+1,c
 10563  000B9A  0E04               	movlw	4
 10564  000B9C  6E0B               	movwf	strncmp@len,c
 10565  000B9E  EC24  F01F         	call	_strncmp	;wreg free
 10566  000BA2  5007               	movf	?_strncmp,w,c
 10567  000BA4  1008               	iorwf	?_strncmp+1,w,c
 10568  000BA6  A4D8               	btfss	status,2,c
 10569  000BA8  D062               	goto	i2l455
 10570                           
 10571                           ;main.c: 959: strcpy(final_set[counter_step],current_set);
 10572  000BAA  C06D  F001         	movff	_counter_step,i2___wmul@multiplier
 10573  000BAE  C06E  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
 10574  000BB2  0E00               	movlw	0
 10575  000BB4  6E04               	movwf	i2___wmul@multiplicand+1,c
 10576  000BB6  0E05               	movlw	5
 10577  000BB8  6E03               	movwf	i2___wmul@multiplicand,c
 10578  000BBA  ECD6  F022         	call	i2___wmul	;wreg free
 10579  000BBE  0EA6               	movlw	low _final_set
 10580  000BC0  2401               	addwf	?i2___wmul,w,c
 10581  000BC2  6E07               	movwf	strcpy@to,c
 10582  000BC4  0E01               	movlw	high _final_set
 10583  000BC6  2002               	addwfc	?i2___wmul+1,w,c
 10584  000BC8  6E08               	movwf	strcpy@to+1,c
 10585  000BCA  0EC3               	movlw	low _current_set
 10586  000BCC  6E09               	movwf	strcpy@from,c
 10587  000BCE  0E00               	movlw	high _current_set
 10588  000BD0  6E0A               	movwf	strcpy@from+1,c
 10589  000BD2  ECF5  F021         	call	_strcpy	;wreg free
 10590                           
 10591                           ;main.c: 960: strcpy(current_set2,current_set);
 10592  000BD6  0E78               	movlw	low _current_set2
 10593  000BD8  6E07               	movwf	strcpy@to,c
 10594  000BDA  0E00               	movlw	high _current_set2
 10595  000BDC  6E08               	movwf	strcpy@to+1,c
 10596  000BDE  0EC3               	movlw	low _current_set
 10597  000BE0  6E09               	movwf	strcpy@from,c
 10598  000BE2  0E00               	movlw	high _current_set
 10599  000BE4  6E0A               	movwf	strcpy@from+1,c
 10600  000BE6  ECF5  F021         	call	_strcpy	;wreg free
 10601                           
 10602                           ;main.c: 963: valid = 1;
 10603  000BEA  0E00               	movlw	0
 10604  000BEC  6E6C               	movwf	_valid+1,c
 10605  000BEE  0E01               	movlw	1
 10606  000BF0  6E6B               	movwf	_valid,c
 10607                           
 10608                           ;main.c: 964: state = 2;
 10609  000BF2  0E00               	movlw	0
 10610  000BF4  0100               	movlb	0	; () banked
 10611  000BF6  6FAF               	movwf	(_state+1)& (0+255),b
 10612  000BF8  0E02               	movlw	2
 10613  000BFA  6FAE               	movwf	_state& (0+255),b
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;main.c: 966: initLCD();
 10617  000BFC  ECAA  F021         	call	i2_initLCD	;wreg free
 10618                           
 10619                           ;main.c: 967: printf("correct!");
 10620  000C00  0E80               	movlw	low STR_70
 10621  000C02  6E0D               	movwf	i2printf@f,c
 10622  000C04  0EFF               	movlw	high STR_70
 10623  000C06  6E0E               	movwf	i2printf@f+1,c
 10624  000C08  ECFE  F017         	call	i2_printf	;wreg free
 10625                           
 10626                           ;main.c: 968: _delay((unsigned long)((500)*(40000000/4000.0)));
 10627  000C0C  0E1A               	movlw	26
 10628  000C0E  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10629  000C10  0E5E               	movlw	94
 10630  000C12  6E2B               	movwf	??_interruptHandler& (0+255),c
 10631  000C14  0E6E               	movlw	110
 10632  000C16                     i2u588_47:
 10633  000C16  2EE8               	decfsz	wreg,f,c
 10634  000C18  D7FE               	bra	i2u588_47
 10635  000C1A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10636  000C1C  D7FC               	bra	i2u588_47
 10637  000C1E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10638  000C20  D7FA               	bra	i2u588_47
 10639  000C22  D000               	nop2	
 10640                           
 10641                           ;main.c: 970: printf("%s",current_set);
 10642  000C24  0EF8               	movlw	low STR_5
 10643  000C26  6E0D               	movwf	i2printf@f,c
 10644  000C28  0EFF               	movlw	high STR_5
 10645  000C2A  6E0E               	movwf	i2printf@f+1,c
 10646  000C2C  0EC3               	movlw	low _current_set
 10647  000C2E  6E0F               	movwf	?i2_printf+2,c
 10648  000C30  0E00               	movlw	high _current_set
 10649  000C32  6E10               	movwf	?i2_printf+3,c
 10650  000C34  ECFE  F017         	call	i2_printf	;wreg free
 10651                           
 10652                           ;main.c: 972: strcpy(current_set,"");
 10653  000C38  0EC3               	movlw	low _current_set
 10654  000C3A  6E07               	movwf	strcpy@to,c
 10655  000C3C  0E00               	movlw	high _current_set
 10656  000C3E  6E08               	movwf	strcpy@to+1,c
 10657  000C40  0E32               	movlw	low (STR_65+14)
 10658  000C42  6E09               	movwf	strcpy@from,c
 10659  000C44  0EFE               	movlw	high (STR_65+14)
 10660  000C46  6E0A               	movwf	strcpy@from+1,c
 10661  000C48  ECF5  F021         	call	_strcpy	;wreg free
 10662                           
 10663                           ;main.c: 973: _delay((unsigned long)((500)*(40000000/4000.0)));
 10664  000C4C  0E1A               	movlw	26
 10665  000C4E  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10666  000C50  0E5E               	movlw	94
 10667  000C52  6E2B               	movwf	??_interruptHandler& (0+255),c
 10668  000C54  0E6E               	movlw	110
 10669  000C56                     i2u589_47:
 10670  000C56  2EE8               	decfsz	wreg,f,c
 10671  000C58  D7FE               	bra	i2u589_47
 10672  000C5A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10673  000C5C  D7FC               	bra	i2u589_47
 10674  000C5E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10675  000C60  D7FA               	bra	i2u589_47
 10676  000C62  D000               	nop2	
 10677                           
 10678                           ;main.c: 974: counter = 0;
 10679  000C64  0E00               	movlw	0
 10680  000C66  6E70               	movwf	_counter+1,c
 10681  000C68  0E00               	movlw	0
 10682  000C6A  6E6F               	movwf	_counter,c
 10683                           
 10684                           ;main.c: 975: break;
 10685  000C6C  D007               	goto	i2u474_40
 10686  000C6E                     i2l455:
 10687  000C6E  4A42               	infsnz	interruptHandler@i,f,c
 10688  000C70  2A43               	incf	interruptHandler@i+1,f,c
 10689  000C72  BE43               	btfsc	interruptHandler@i+1,7,c
 10690  000C74  D77C               	goto	i2l453
 10691  000C76  5043               	movf	interruptHandler@i+1,w,c
 10692  000C78  E101               	bnz	i2l6072
 10693  000C7A  D773               	goto	L5
 10694  000C7C                     i2u474_40:
 10695  000C7C                     i2l6072:
 10696                           
 10697                           ;main.c: 977: }
 10698                           ;main.c: 978: }
 10699                           ;main.c: 979: if (valid != 1){
 10700  000C7C  046B               	decf	_valid,w,c
 10701  000C7E  106C               	iorwf	_valid+1,w,c
 10702  000C80  B4D8               	btfsc	status,2,c
 10703  000C82  D02F               	goto	i2l456
 10704                           
 10705                           ;main.c: 981: initLCD();
 10706  000C84  ECAA  F021         	call	i2_initLCD	;wreg free
 10707                           
 10708                           ;main.c: 982: printf("wrong set!");
 10709  000C88  0E4A               	movlw	low STR_73
 10710  000C8A  6E0D               	movwf	i2printf@f,c
 10711  000C8C  0EFF               	movlw	high STR_73
 10712  000C8E  6E0E               	movwf	i2printf@f+1,c
 10713  000C90  ECFE  F017         	call	i2_printf	;wreg free
 10714                           
 10715                           ;main.c: 983: printf("%s",current_set);
 10716  000C94  0EF8               	movlw	low STR_5
 10717  000C96  6E0D               	movwf	i2printf@f,c
 10718  000C98  0EFF               	movlw	high STR_5
 10719  000C9A  6E0E               	movwf	i2printf@f+1,c
 10720  000C9C  0EC3               	movlw	low _current_set
 10721  000C9E  6E0F               	movwf	?i2_printf+2,c
 10722  000CA0  0E00               	movlw	high _current_set
 10723  000CA2  6E10               	movwf	?i2_printf+3,c
 10724  000CA4  ECFE  F017         	call	i2_printf	;wreg free
 10725                           
 10726                           ;main.c: 984: strcpy(current_set,"");
 10727  000CA8  0EC3               	movlw	low _current_set
 10728  000CAA  6E07               	movwf	strcpy@to,c
 10729  000CAC  0E00               	movlw	high _current_set
 10730  000CAE  6E08               	movwf	strcpy@to+1,c
 10731  000CB0  0E32               	movlw	low (STR_65+14)
 10732  000CB2  6E09               	movwf	strcpy@from,c
 10733  000CB4  0EFE               	movlw	high (STR_65+14)
 10734  000CB6  6E0A               	movwf	strcpy@from+1,c
 10735  000CB8  ECF5  F021         	call	_strcpy	;wreg free
 10736                           
 10737                           ;main.c: 985: _delay((unsigned long)((300)*(40000000/4000.0)));
 10738  000CBC  0E10               	movlw	16
 10739  000CBE  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10740  000CC0  0E39               	movlw	57
 10741  000CC2  6E2B               	movwf	??_interruptHandler& (0+255),c
 10742  000CC4  0E0E               	movlw	14
 10743  000CC6                     i2u590_47:
 10744  000CC6  2EE8               	decfsz	wreg,f,c
 10745  000CC8  D7FE               	bra	i2u590_47
 10746  000CCA  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10747  000CCC  D7FC               	bra	i2u590_47
 10748  000CCE  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10749  000CD0  D7FA               	bra	i2u590_47
 10750                           
 10751                           ;main.c: 986: counter = 0;
 10752  000CD2  0E00               	movlw	0
 10753  000CD4  6E70               	movwf	_counter+1,c
 10754  000CD6  0E00               	movlw	0
 10755  000CD8  6E6F               	movwf	_counter,c
 10756                           
 10757                           ;main.c: 987: valid = 0;
 10758  000CDA  0E00               	movlw	0
 10759  000CDC  6E6C               	movwf	_valid+1,c
 10760  000CDE  0E00               	movlw	0
 10761  000CE0  6E6B               	movwf	_valid,c
 10762  000CE2                     i2l456:
 10763                           
 10764                           ;main.c: 988: }
 10765                           ;main.c: 989: valid = 0;
 10766  000CE2  0E00               	movlw	0
 10767  000CE4  6E6C               	movwf	_valid+1,c
 10768  000CE6  0E00               	movlw	0
 10769  000CE8  6E6B               	movwf	_valid,c
 10770  000CEA                     i2l452:
 10771                           
 10772                           ;main.c: 991: }
 10773                           ;main.c: 994: if (counter >= 5){
 10774  000CEA  BE70               	btfsc	_counter+1,7,c
 10775  000CEC  D162               	goto	i2l6184
 10776  000CEE  5070               	movf	_counter+1,w,c
 10777  000CF0  E104               	bnz	i2u476_40
 10778  000CF2  0E05               	movlw	5
 10779  000CF4  5C6F               	subwf	_counter,w,c
 10780  000CF6  A0D8               	btfss	status,0,c
 10781  000CF8  D15C               	goto	i2l6184
 10782  000CFA                     i2u476_40:
 10783                           
 10784                           ;main.c: 996: initLCD();
 10785  000CFA  ECAA  F021         	call	i2_initLCD	;wreg free
 10786                           
 10787                           ;main.c: 997: printf("wrong!");
 10788  000CFE  0EB3               	movlw	low STR_76
 10789  000D00  6E0D               	movwf	i2printf@f,c
 10790  000D02  0EFF               	movlw	high STR_76
 10791  000D04  6E0E               	movwf	i2printf@f+1,c
 10792  000D06  ECFE  F017         	call	i2_printf	;wreg free
 10793                           
 10794                           ;main.c: 999: _delay((unsigned long)((500)*(40000000/4000.0)));
 10795  000D0A  0E1A               	movlw	26
 10796  000D0C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10797  000D0E  0E5E               	movlw	94
 10798  000D10  6E2B               	movwf	??_interruptHandler& (0+255),c
 10799  000D12  0E6E               	movlw	110
 10800  000D14                     i2u591_47:
 10801  000D14  2EE8               	decfsz	wreg,f,c
 10802  000D16  D7FE               	bra	i2u591_47
 10803  000D18  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10804  000D1A  D7FC               	bra	i2u591_47
 10805  000D1C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10806  000D1E  D7FA               	bra	i2u591_47
 10807  000D20  D000               	nop2	
 10808                           
 10809                           ;main.c: 1001: strcpy(current_set,"");
 10810  000D22  0EC3               	movlw	low _current_set
 10811  000D24  6E07               	movwf	strcpy@to,c
 10812  000D26  0E00               	movlw	high _current_set
 10813  000D28  6E08               	movwf	strcpy@to+1,c
 10814  000D2A  0E32               	movlw	low (STR_65+14)
 10815  000D2C  6E09               	movwf	strcpy@from,c
 10816  000D2E  0EFE               	movlw	high (STR_65+14)
 10817  000D30  6E0A               	movwf	strcpy@from+1,c
 10818  000D32  ECF5  F021         	call	_strcpy	;wreg free
 10819                           
 10820                           ;main.c: 1004: counter = 0;
 10821  000D36  0E00               	movlw	0
 10822  000D38  6E70               	movwf	_counter+1,c
 10823  000D3A  0E00               	movlw	0
 10824  000D3C  6E6F               	movwf	_counter,c
 10825  000D3E  D139               	goto	i2l6184
 10826  000D40                     i2l446:
 10827                           
 10828                           ;main.c: 1009: }
 10829                           ;main.c: 1014: if (state ==2){
 10830  000D40  0E02               	movlw	2
 10831  000D42  0100               	movlb	0	; () banked
 10832  000D44  19AE               	xorwf	_state& (0+255),w,b
 10833  000D46  11AF               	iorwf	(_state+1)& (0+255),w,b
 10834  000D48  A4D8               	btfss	status,2,c
 10835  000D4A  D11F               	goto	i2l474
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;main.c: 1015: counter = 0;
 10839  000D4C  0E00               	movlw	0
 10840  000D4E  6E70               	movwf	_counter+1,c
 10841  000D50  0E00               	movlw	0
 10842  000D52  6E6F               	movwf	_counter,c
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;main.c: 1017: lcdInst(0xC0);;
 10846  000D54  0EC0               	movlw	192
 10847  000D56  EC47  F023         	call	i2_lcdInst
 10848                           
 10849                           ;main.c: 1018: putch(keys[keypress]);
 10850  000D5A  5044               	movf	interruptHandler@keypress,w,c
 10851  000D5C  0D01               	mullw	1
 10852  000D5E  0E93               	movlw	low _keys
 10853  000D60  24F3               	addwf	prodl,w,c
 10854  000D62  6EF6               	movwf	tblptrl,c
 10855  000D64  0EFC               	movlw	high _keys
 10856  000D66  20F4               	addwfc	prodh,w,c
 10857  000D68  6EF7               	movwf	tblptrh,c
 10858  000D6A                     	if	1	;There are 3 active tblptr bytes
 10859  000D6A  6AF8               	clrf	tblptru,c
 10860  000D6C  0E00               	movlw	low (__mediumconst shr (0+16))
 10861  000D6E  22F8               	addwfc	tblptru,f,c
 10862  000D70                     	endif
 10863  000D70  0008               	tblrd		*
 10864  000D72  50F5               	movf	tablat,w,c
 10865  000D74  EC3D  F023         	call	i2_putch
 10866                           
 10867                           ;main.c: 1020: _delay((unsigned long)((500)*(40000000/4000.0)));
 10868  000D78  0E1A               	movlw	26
 10869  000D7A  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10870  000D7C  0E5E               	movlw	94
 10871  000D7E  6E2B               	movwf	??_interruptHandler& (0+255),c
 10872  000D80  0E6E               	movlw	110
 10873  000D82                     i2u592_47:
 10874  000D82  2EE8               	decfsz	wreg,f,c
 10875  000D84  D7FE               	bra	i2u592_47
 10876  000D86  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10877  000D88  D7FC               	bra	i2u592_47
 10878  000D8A  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10879  000D8C  D7FA               	bra	i2u592_47
 10880  000D8E  D000               	nop2	
 10881                           
 10882                           ;main.c: 1022: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' 
      +                          ||keys[keypress] == '4'){
 10883  000D90  5044               	movf	interruptHandler@keypress,w,c
 10884  000D92  0D01               	mullw	1
 10885  000D94  0E93               	movlw	low _keys
 10886  000D96  24F3               	addwf	prodl,w,c
 10887  000D98  6EF6               	movwf	tblptrl,c
 10888  000D9A  0EFC               	movlw	high _keys
 10889  000D9C  20F4               	addwfc	prodh,w,c
 10890  000D9E  6EF7               	movwf	tblptrh,c
 10891  000DA0                     	if	1	;There are 3 active tblptr bytes
 10892  000DA0  6AF8               	clrf	tblptru,c
 10893  000DA2  0E00               	movlw	low (__mediumconst shr (0+16))
 10894  000DA4  22F8               	addwfc	tblptru,f,c
 10895  000DA6                     	endif
 10896  000DA6  0008               	tblrd		*
 10897  000DA8  50F5               	movf	tablat,w,c
 10898  000DAA  0A31               	xorlw	49
 10899  000DAC  B4D8               	btfsc	status,2,c
 10900  000DAE  D05A               	goto	i2l462
 10901  000DB0  5044               	movf	interruptHandler@keypress,w,c
 10902  000DB2  0D01               	mullw	1
 10903  000DB4  0E93               	movlw	low _keys
 10904  000DB6  24F3               	addwf	prodl,w,c
 10905  000DB8  6EF6               	movwf	tblptrl,c
 10906  000DBA  0EFC               	movlw	high _keys
 10907  000DBC  20F4               	addwfc	prodh,w,c
 10908  000DBE  6EF7               	movwf	tblptrh,c
 10909  000DC0                     	if	1	;There are 3 active tblptr bytes
 10910  000DC0  6AF8               	clrf	tblptru,c
 10911  000DC2  0E00               	movlw	low (__mediumconst shr (0+16))
 10912  000DC4  22F8               	addwfc	tblptru,f,c
 10913  000DC6                     	endif
 10914  000DC6  0008               	tblrd		*
 10915  000DC8  50F5               	movf	tablat,w,c
 10916  000DCA  0A32               	xorlw	50
 10917  000DCC  B4D8               	btfsc	status,2,c
 10918  000DCE  D04A               	goto	i2l462
 10919  000DD0  5044               	movf	interruptHandler@keypress,w,c
 10920  000DD2  0D01               	mullw	1
 10921  000DD4  0E93               	movlw	low _keys
 10922  000DD6  24F3               	addwf	prodl,w,c
 10923  000DD8  6EF6               	movwf	tblptrl,c
 10924  000DDA  0EFC               	movlw	high _keys
 10925  000DDC  20F4               	addwfc	prodh,w,c
 10926  000DDE  6EF7               	movwf	tblptrh,c
 10927  000DE0                     	if	1	;There are 3 active tblptr bytes
 10928  000DE0  6AF8               	clrf	tblptru,c
 10929  000DE2  0E00               	movlw	low (__mediumconst shr (0+16))
 10930  000DE4  22F8               	addwfc	tblptru,f,c
 10931  000DE6                     	endif
 10932  000DE6  0008               	tblrd		*
 10933  000DE8  50F5               	movf	tablat,w,c
 10934  000DEA  0A33               	xorlw	51
 10935  000DEC  B4D8               	btfsc	status,2,c
 10936  000DEE  D03A               	goto	i2l462
 10937  000DF0  5044               	movf	interruptHandler@keypress,w,c
 10938  000DF2  0D01               	mullw	1
 10939  000DF4  0E93               	movlw	low _keys
 10940  000DF6  24F3               	addwf	prodl,w,c
 10941  000DF8  6EF6               	movwf	tblptrl,c
 10942  000DFA  0EFC               	movlw	high _keys
 10943  000DFC  20F4               	addwfc	prodh,w,c
 10944  000DFE  6EF7               	movwf	tblptrh,c
 10945  000E00                     	if	1	;There are 3 active tblptr bytes
 10946  000E00  6AF8               	clrf	tblptru,c
 10947  000E02  0E00               	movlw	low (__mediumconst shr (0+16))
 10948  000E04  22F8               	addwfc	tblptru,f,c
 10949  000E06                     	endif
 10950  000E06  0008               	tblrd		*
 10951  000E08  50F5               	movf	tablat,w,c
 10952  000E0A  0A34               	xorlw	52
 10953  000E0C  B4D8               	btfsc	status,2,c
 10954  000E0E  D02A               	goto	i2l462
 10955  000E10  D0BC               	goto	i2l474
 10956  000E12                     
 10957                           ;main.c: 1026: number = 1;
 10958  000E12  0E00               	movlw	0
 10959  000E14  6E7E               	movwf	_number+1,c
 10960  000E16  0E01               	movlw	1
 10961  000E18  D00F               	goto	L9
 10962  000E1A                     
 10963                           ;main.c: 1029: number = 2;
 10964  000E1A  0E00               	movlw	0
 10965  000E1C  6E7E               	movwf	_number+1,c
 10966  000E1E  0E02               	movlw	2
 10967  000E20  D00B               	goto	L9
 10968  000E22                     
 10969                           ;main.c: 1032: number = 3;
 10970  000E22  0E00               	movlw	0
 10971  000E24  6E7E               	movwf	_number+1,c
 10972  000E26  0E03               	movlw	3
 10973  000E28  D007               	goto	L9
 10974  000E2A                     
 10975                           ;main.c: 1035: number = 4;
 10976  000E2A  0E00               	movlw	0
 10977  000E2C  6E7E               	movwf	_number+1,c
 10978  000E2E  0E04               	movlw	4
 10979  000E30  D003               	goto	L9
 10980  000E32                     
 10981                           ;main.c: 1038: number = 5;
 10982  000E32  0E00               	movlw	0
 10983  000E34  6E7E               	movwf	_number+1,c
 10984  000E36  0E05               	movlw	5
 10985  000E38                     L9:
 10986  000E38  6E7D               	movwf	_number,c
 10987                           
 10988                           ;main.c: 1039: break;
 10989  000E3A  D031               	goto	i2l464
 10990  000E3C                     
 10991                           ;main.c: 1041: initLCD();
 10992  000E3C  ECAA  F021         	call	i2_initLCD	;wreg free
 10993                           
 10994                           ;main.c: 1042: printf("Wrong input");
 10995  000E40  0E3E               	movlw	low STR_78
 10996  000E42  6E0D               	movwf	i2printf@f,c
 10997  000E44  0EFF               	movlw	high STR_78
 10998  000E46  6E0E               	movwf	i2printf@f+1,c
 10999  000E48  ECFE  F017         	call	i2_printf	;wreg free
 11000                           
 11001                           ;main.c: 1043: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11002  000E4C  0E33               	movlw	51
 11003  000E4E  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11004  000E50  0EBB               	movlw	187
 11005  000E52  6E2B               	movwf	??_interruptHandler& (0+255),c
 11006  000E54  0EE0               	movlw	224
 11007  000E56                     i2u593_47:
 11008  000E56  2EE8               	decfsz	wreg,f,c
 11009  000E58  D7FE               	bra	i2u593_47
 11010  000E5A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11011  000E5C  D7FC               	bra	i2u593_47
 11012  000E5E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11013  000E60  D7FA               	bra	i2u593_47
 11014                           
 11015                           ;main.c: 1044: }
 11016  000E62  D01D               	goto	i2l464
 11017  000E64                     i2l462:
 11018  000E64  5044               	movf	interruptHandler@keypress,w,c
 11019  000E66  0D01               	mullw	1
 11020  000E68  0E93               	movlw	low _keys
 11021  000E6A  24F3               	addwf	prodl,w,c
 11022  000E6C  6EF6               	movwf	tblptrl,c
 11023  000E6E  0EFC               	movlw	high _keys
 11024  000E70  20F4               	addwfc	prodh,w,c
 11025  000E72  6EF7               	movwf	tblptrh,c
 11026  000E74                     	if	1	;There are 3 active tblptr bytes
 11027  000E74  6AF8               	clrf	tblptru,c
 11028  000E76  0E00               	movlw	low (__mediumconst shr (0+16))
 11029  000E78  22F8               	addwfc	tblptru,f,c
 11030  000E7A                     	endif
 11031  000E7A  0008               	tblrd		*
 11032  000E7C  50F5               	movf	tablat,w,c
 11033                           
 11034                           ; Switch size 1, requested type "space"
 11035                           ; Number of cases is 5, Range of values is 49 to 53
 11036                           ; switch strategies available:
 11037                           ; Name         Instructions Cycles
 11038                           ; simple_byte           16     9 (average)
 11039                           ;	Chosen strategy is simple_byte
 11040  000E7E  0A31               	xorlw	49	; case 49
 11041  000E80  B4D8               	btfsc	status,2,c
 11042  000E82  D7C7               	goto	i2l463
 11043  000E84  0A03               	xorlw	3	; case 50
 11044  000E86  B4D8               	btfsc	status,2,c
 11045  000E88  D7C8               	goto	i2l465
 11046  000E8A  0A01               	xorlw	1	; case 51
 11047  000E8C  B4D8               	btfsc	status,2,c
 11048  000E8E  D7C9               	goto	i2l466
 11049  000E90  0A07               	xorlw	7	; case 52
 11050  000E92  B4D8               	btfsc	status,2,c
 11051  000E94  D7CA               	goto	i2l467
 11052  000E96  0A01               	xorlw	1	; case 53
 11053  000E98  B4D8               	btfsc	status,2,c
 11054  000E9A  D7CB               	goto	i2l468
 11055  000E9C  D7CF               	goto	i2l469
 11056  000E9E                     i2l464:
 11057                           
 11058                           ;main.c: 1047: is_valid();
 11059  000E9E  EC00  F008         	call	_is_valid	;wreg free
 11060                           
 11061                           ;main.c: 1049: if ( check() == 0){
 11062  000EA2  ECA1  F020         	call	_check	;wreg free
 11063  000EA6  5001               	movf	?_check,w,c
 11064  000EA8  1002               	iorwf	?_check+1,w,c
 11065  000EAA  A4D8               	btfss	status,2,c
 11066  000EAC  D029               	goto	i2l470
 11067                           
 11068                           ;main.c: 1050: initLCD();
 11069  000EAE  ECAA  F021         	call	i2_initLCD	;wreg free
 11070                           
 11071                           ;main.c: 1051: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
 11072  000EB2  0E80               	movlw	128
 11073  000EB4  EC47  F023         	call	i2_lcdInst
 11074  000EB8  0E41               	movlw	65
 11075  000EBA  6E2B               	movwf	??_interruptHandler& (0+255),c
 11076  000EBC  0EEE               	movlw	238
 11077  000EBE                     i2u594_47:
 11078  000EBE  2EE8               	decfsz	wreg,f,c
 11079  000EC0  D7FE               	bra	i2u594_47
 11080  000EC2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11081  000EC4  D7FC               	bra	i2u594_47
 11082  000EC6  D000               	nop2	
 11083                           
 11084                           ;main.c: 1052: printf("TOO MANY");
 11085  000EC8  0E92               	movlw	low STR_79
 11086  000ECA  6E0D               	movwf	i2printf@f,c
 11087  000ECC  0EFF               	movlw	high STR_79
 11088  000ECE  6E0E               	movwf	i2printf@f+1,c
 11089  000ED0  ECFE  F017         	call	i2_printf	;wreg free
 11090                           
 11091                           ;main.c: 1054: _delay((unsigned long)((500)*(40000000/4000.0)));
 11092  000ED4  0E1A               	movlw	26
 11093  000ED6  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11094  000ED8  0E5E               	movlw	94
 11095  000EDA  6E2B               	movwf	??_interruptHandler& (0+255),c
 11096  000EDC  0E6E               	movlw	110
 11097  000EDE                     i2u595_47:
 11098  000EDE  2EE8               	decfsz	wreg,f,c
 11099  000EE0  D7FE               	bra	i2u595_47
 11100  000EE2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11101  000EE4  D7FC               	bra	i2u595_47
 11102  000EE6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11103  000EE8  D7FA               	bra	i2u595_47
 11104  000EEA  D000               	nop2	
 11105                           
 11106                           ;main.c: 1055: state = 2;
 11107  000EEC  0E00               	movlw	0
 11108  000EEE  0100               	movlb	0	; () banked
 11109  000EF0  6FAF               	movwf	(_state+1)& (0+255),b
 11110  000EF2  0E02               	movlw	2
 11111  000EF4  6FAE               	movwf	_state& (0+255),b
 11112                           
 11113                           ; BSR set to: 0
 11114                           ;main.c: 1056: number = 0;
 11115  000EF6  0E00               	movlw	0
 11116  000EF8  6E7E               	movwf	_number+1,c
 11117  000EFA  0E00               	movlw	0
 11118  000EFC  6E7D               	movwf	_number,c
 11119                           
 11120                           ;main.c: 1057: }
 11121  000EFE  D045               	goto	i2l474
 11122  000F00                     i2l470:
 11123                           
 11124                           ;main.c: 1060: else if (counter_step >= assembly_step-1){
 11125                           
 11126                           ; BSR set to: 0
 11127  000F00  0EFF               	movlw	255
 11128  000F02  6E2B               	movwf	??_interruptHandler& (0+255),c
 11129  000F04  0EFF               	movlw	255
 11130  000F06  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11131  000F08  C0AC  F02D         	movff	_assembly_step,??_interruptHandler+2
 11132  000F0C  C0AD  F02E         	movff	_assembly_step+1,??_interruptHandler+3
 11133  000F10  502B               	movf	??_interruptHandler,w,c
 11134  000F12  262D               	addwf	??_interruptHandler+2,f,c
 11135  000F14  502C               	movf	??_interruptHandler+1,w,c
 11136  000F16  222E               	addwfc	??_interruptHandler+3,f,c
 11137  000F18  502D               	movf	??_interruptHandler+2,w,c
 11138  000F1A  5C6D               	subwf	_counter_step,w,c
 11139  000F1C  506E               	movf	_counter_step+1,w,c
 11140  000F1E  0A80               	xorlw	128
 11141  000F20  6E2F               	movwf	(??_interruptHandler+4)& (0+255),c
 11142  000F22  502E               	movf	??_interruptHandler+3,w,c
 11143  000F24  0A80               	xorlw	128
 11144  000F26  582F               	subwfb	(??_interruptHandler+4)& (0+255),w,c
 11145  000F28  A0D8               	btfss	status,0,c
 11146  000F2A  D013               	goto	i2l472
 11147                           
 11148                           ;main.c: 1061: final_number[counter_step] = number;
 11149  000F2C  90D8               	bcf	status,0,c
 11150  000F2E  346D               	rlcf	_counter_step,w,c
 11151  000F30  6ED9               	movwf	fsr2l,c
 11152  000F32  346E               	rlcf	_counter_step+1,w,c
 11153  000F34  6EDA               	movwf	fsr2h,c
 11154  000F36  0E50               	movlw	low _final_number
 11155  000F38  26D9               	addwf	fsr2l,f,c
 11156  000F3A  0E01               	movlw	high _final_number
 11157  000F3C  22DA               	addwfc	fsr2h,f,c
 11158  000F3E  C07D  FFDE         	movff	_number,postinc2
 11159  000F42  C07E  FFDD         	movff	_number+1,postdec2
 11160                           
 11161                           ;main.c: 1062: state = 3;
 11162  000F46  0E00               	movlw	0
 11163  000F48  0100               	movlb	0	; () banked
 11164  000F4A  6FAF               	movwf	(_state+1)& (0+255),b
 11165  000F4C  0E03               	movlw	3
 11166  000F4E  6FAE               	movwf	_state& (0+255),b
 11167                           
 11168                           ;main.c: 1063: }
 11169  000F50  D01C               	goto	i2l474
 11170  000F52                     i2l472:
 11171                           
 11172                           ;main.c: 1064: else if ( check() == 1){
 11173                           
 11174                           ; BSR set to: 0
 11175  000F52  ECA1  F020         	call	_check	;wreg free
 11176  000F56  0401               	decf	?_check,w,c
 11177  000F58  1002               	iorwf	?_check+1,w,c
 11178  000F5A  A4D8               	btfss	status,2,c
 11179  000F5C  D016               	goto	i2l474
 11180                           
 11181                           ;main.c: 1065: state = 1;
 11182  000F5E  0E00               	movlw	0
 11183  000F60  0100               	movlb	0	; () banked
 11184  000F62  6FAF               	movwf	(_state+1)& (0+255),b
 11185  000F64  0E01               	movlw	1
 11186  000F66  6FAE               	movwf	_state& (0+255),b
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;main.c: 1066: initLCD();
 11190  000F68  ECAA  F021         	call	i2_initLCD	;wreg free
 11191                           
 11192                           ;main.c: 1069: final_number[counter_step] = number;
 11193  000F6C  90D8               	bcf	status,0,c
 11194  000F6E  346D               	rlcf	_counter_step,w,c
 11195  000F70  6ED9               	movwf	fsr2l,c
 11196  000F72  346E               	rlcf	_counter_step+1,w,c
 11197  000F74  6EDA               	movwf	fsr2h,c
 11198  000F76  0E50               	movlw	low _final_number
 11199  000F78  26D9               	addwf	fsr2l,f,c
 11200  000F7A  0E01               	movlw	high _final_number
 11201  000F7C  22DA               	addwfc	fsr2h,f,c
 11202  000F7E  C07D  FFDE         	movff	_number,postinc2
 11203  000F82  C07E  FFDD         	movff	_number+1,postdec2
 11204                           
 11205                           ;main.c: 1070: counter_step++;
 11206  000F86  4A6D               	infsnz	_counter_step,f,c
 11207  000F88  2A6E               	incf	_counter_step+1,f,c
 11208  000F8A                     i2l474:
 11209                           
 11210                           ;main.c: 1071: }
 11211                           ;main.c: 1074: }
 11212                           ;main.c: 1076: }
 11213                           ;main.c: 1083: B=0;N=0;S=0;W=0;
 11214  000F8A  0E00               	movlw	0
 11215  000F8C  6E66               	movwf	_B+1,c
 11216  000F8E  0E00               	movlw	0
 11217  000F90  6E65               	movwf	_B,c
 11218  000F92  0E00               	movlw	0
 11219  000F94  6E64               	movwf	_N+1,c
 11220  000F96  0E00               	movlw	0
 11221  000F98  6E63               	movwf	_N,c
 11222  000F9A  0E00               	movlw	0
 11223  000F9C  6E62               	movwf	_S+1,c
 11224  000F9E  0E00               	movlw	0
 11225  000FA0  6E61               	movwf	_S,c
 11226  000FA2  0E00               	movlw	0
 11227  000FA4  6E60               	movwf	_W+1,c
 11228  000FA6  0E00               	movlw	0
 11229  000FA8  6E5F               	movwf	_W,c
 11230                           
 11231                           ;main.c: 1084: total_number = 0;
 11232  000FAA  0E00               	movlw	0
 11233  000FAC  6E6A               	movwf	_total_number+1,c
 11234  000FAE  0E00               	movlw	0
 11235  000FB0  6E69               	movwf	_total_number,c
 11236  000FB2                     i2l6184:
 11237                           
 11238                           ;main.c: 1086: INT1IF = 0;
 11239  000FB2  90F0               	bcf	intcon3,0,c	;volatile
 11240  000FB4                     i2l6186:
 11241                           
 11242                           ;main.c: 1087: return;
 11243  000FB4  C041  F082         	movff	??_interruptHandler+22,btemp+3
 11244  000FB8  C040  F081         	movff	??_interruptHandler+21,btemp+2
 11245  000FBC  C03F  F080         	movff	??_interruptHandler+20,btemp+1
 11246  000FC0  C03E  F07F         	movff	??_interruptHandler+19,btemp
 11247  000FC4  C03D  FFF5         	movff	??_interruptHandler+18,tablat
 11248  000FC8  C03C  FFF8         	movff	??_interruptHandler+17,tblptru
 11249  000FCC  C03B  FFF7         	movff	??_interruptHandler+16,tblptrh
 11250  000FD0  C03A  FFF6         	movff	??_interruptHandler+15,tblptrl
 11251  000FD4  C039  FFF4         	movff	??_interruptHandler+14,prodh
 11252  000FD8  C038  FFF3         	movff	??_interruptHandler+13,prodl
 11253  000FDC  C037  FFDA         	movff	??_interruptHandler+12,fsr2h
 11254  000FE0  C036  FFD9         	movff	??_interruptHandler+11,fsr2l
 11255  000FE4  C035  FFE2         	movff	??_interruptHandler+10,fsr1h
 11256  000FE8  C034  FFE1         	movff	??_interruptHandler+9,fsr1l
 11257  000FEC  C033  FFEA         	movff	??_interruptHandler+8,fsr0h
 11258  000FF0  C032  FFE9         	movff	??_interruptHandler+7,fsr0l
 11259  000FF4  C031  FFFB         	movff	??_interruptHandler+6,pclatu
 11260  000FF8  C030  FFFA         	movff	??_interruptHandler+5,pclath
 11261  000FFC  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11262  000FFE  0011               	retfie		f
 11263  001000                     __end_of_interruptHandler:
 11264                           	opt stack 0
 11265                           pclatu	equ	0xFFB
 11266                           pclath	equ	0xFFA
 11267                           tblptru	equ	0xFF8
 11268                           tblptrh	equ	0xFF7
 11269                           tblptrl	equ	0xFF6
 11270                           tablat	equ	0xFF5
 11271                           prodh	equ	0xFF4
 11272                           prodl	equ	0xFF3
 11273                           intcon	equ	0xFF2
 11274                           intcon3	equ	0xFF0
 11275                           indf0	equ	0xFEF
 11276                           postinc0	equ	0xFEE
 11277                           fsr0h	equ	0xFEA
 11278                           fsr0l	equ	0xFE9
 11279                           wreg	equ	0xFE8
 11280                           postdec1	equ	0xFE5
 11281                           fsr1h	equ	0xFE2
 11282                           fsr1l	equ	0xFE1
 11283                           indf2	equ	0xFDF
 11284                           postinc2	equ	0xFDE
 11285                           postdec2	equ	0xFDD
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function i2_printf *****************
 11291 ;; Defined at:
 11292 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11295 ;;		 -> STR_80(3), STR_79(9), STR_78(12), STR_76(7), 
 11296 ;;		 -> STR_74(3), STR_73(11), STR_71(3), STR_70(9), 
 11297 ;;		 -> STR_65(15), STR_64(12), STR_63(9), STR_62(16), 
 11298 ;;		 -> STR_61(17), STR_60(17), STR_59(14), STR_58(15), 
 11299 ;;		 -> STR_57(15), STR_56(15), STR_55(15), STR_54(15), 
 11300 ;;		 -> STR_53(20), STR_52(17), STR_51(13), STR_50(16), 
 11301 ;;		 -> STR_49(15), STR_48(15), STR_47(15), STR_46(15), 
 11302 ;;		 -> STR_45(10), STR_44(19), STR_43(17), STR_42(12), 
 11303 ;;		 -> STR_41(17), STR_40(17), STR_39(14), STR_38(15), 
 11304 ;;		 -> STR_37(3), STR_36(3), STR_35(3), STR_34(9), 
 11305 ;;		 -> STR_33(20), STR_32(3), STR_31(3), STR_30(21), 
 11306 ;;		 -> STR_29(11), STR_28(13), STR_27(18), STR_26(11), 
 11307 ;;		 -> STR_25(13), STR_24(19), STR_23(11), STR_22(13), 
 11308 ;;		 -> STR_21(15), STR_20(12), STR_19(7), STR_18(14), 
 11309 ;;		 -> STR_17(14), STR_16(16), STR_15(14), STR_14(3), 
 11310 ;;		 -> STR_13(2), STR_12(3), STR_11(2), STR_10(3), 
 11311 ;;		 -> STR_9(5), STR_8(17), STR_7(6), STR_6(8), 
 11312 ;;		 -> STR_5(3), STR_4(14), STR_3(15), STR_2(14), 
 11313 ;;		 -> STR_1(16), 
 11314 ;; Auto vars:     Size  Location     Type
 11315 ;;  printf          4    0        struct .
 11316 ;;  printf          2   39[COMRAM] int 
 11317 ;;  printf          2   36[COMRAM] unsigned int 
 11318 ;;  printf          2   34[COMRAM] unsigned int 
 11319 ;;  printf          2   32[COMRAM] PTR void [1]
 11320 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11321 ;;  printf          2   30[COMRAM] PTR const unsigned char 
 11322 ;;		 -> STR_101(7), number(2), final_set(40), current_set(5), 
 11323 ;;  printf          1   41[COMRAM] char 
 11324 ;;  printf          1   38[COMRAM] unsigned char 
 11325 ;;  printf          1   29[COMRAM] char 
 11326 ;;  printf          1   28[COMRAM] unsigned char 
 11327 ;; Return value:  Size  Location     Type
 11328 ;;                  2   12[COMRAM] int 
 11329 ;; Registers used:
 11330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11336 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;Total ram usage:       30 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; Hardware stack levels required when called:    2
 11343 ;; This function calls:
 11344 ;;		i2___lwdiv
 11345 ;;		i2___lwmod
 11346 ;;		i2___wmul
 11347 ;;		i2_isdigit
 11348 ;;		i2_putch
 11349 ;; This function is called by:
 11350 ;;		_interruptHandler
 11351 ;; This function uses a non-reentrant model
 11352 ;;
 11353                           
 11354                           	psect	text25
 11355  002FFC                     __ptext25:
 11356                           	opt stack 0
 11357  002FFC                     i2_printf:
 11358                           	opt stack 24
 11359                           
 11360                           ;doprnt.c: 466: va_list ap;
 11361                           ;doprnt.c: 499: signed char c;
 11362                           ;doprnt.c: 501: int width;
 11363                           ;doprnt.c: 506: signed char prec;
 11364                           ;doprnt.c: 508: unsigned char flag;
 11365                           ;doprnt.c: 523: union {
 11366                           ;doprnt.c: 524: unsigned long vd;
 11367                           ;doprnt.c: 525: double integ;
 11368                           ;doprnt.c: 526: } tmpval;
 11369                           ;doprnt.c: 528: unsigned int val;
 11370                           ;doprnt.c: 529: unsigned len;
 11371                           ;doprnt.c: 530: const char * cp;
 11372                           ;doprnt.c: 533: *ap = __va_start();
 11373                           
 11374                           ;incstack = 0
 11375  002FFC  0E0F               	movlw	low (?i2_printf+2)
 11376  002FFE  6E21               	movwf	i2printf@ap,c
 11377  003000  0E00               	movlw	high (?i2_printf+2)
 11378  003002  6E22               	movwf	i2printf@ap+1,c
 11379                           
 11380                           ;doprnt.c: 536: while(c = *f++) {
 11381  003004  D1FA               	goto	i2u395_40
 11382  003006                     
 11383                           ;doprnt.c: 538: if(c != '%')
 11384  003006  0E25               	movlw	37
 11385  003008  182A               	xorwf	i2printf@c,w,c
 11386  00300A  B4D8               	btfsc	status,2,c
 11387  00300C  D004               	goto	i2l842
 11388                           
 11389                           ;doprnt.c: 540: {
 11390                           ;doprnt.c: 541: (putch(c) );
 11391  00300E  502A               	movf	i2printf@c,w,c
 11392  003010  EC3D  F023         	call	i2_putch
 11393                           
 11394                           ;doprnt.c: 542: continue;
 11395  003014  D1F2               	goto	i2u395_40
 11396  003016                     i2l842:
 11397                           
 11398                           ;doprnt.c: 543: }
 11399                           ;doprnt.c: 546: width = 0;
 11400  003016  0E00               	movlw	0
 11401  003018  6E29               	movwf	i2printf@width+1,c
 11402  00301A  0E00               	movlw	0
 11403  00301C  6E28               	movwf	i2printf@width,c
 11404                           
 11405                           ;doprnt.c: 548: flag = 0;
 11406  00301E  0E00               	movlw	0
 11407  003020  6E27               	movwf	i2printf@flag,c
 11408                           
 11409                           ;doprnt.c: 551: switch(*f) {
 11410                           
 11411                           ;doprnt.c: 550: for(;;) {
 11412  003022  D003               	goto	i2l844
 11413  003024                     
 11414                           ;doprnt.c: 580: flag |= 0x04;
 11415  003024  8427               	bsf	i2printf@flag,2,c
 11416                           
 11417                           ;doprnt.c: 581: f++;
 11418  003026  4A0D               	infsnz	i2printf@f,f,c
 11419  003028  2A0E               	incf	i2printf@f+1,f,c
 11420  00302A                     i2l844:
 11421  00302A  C00D  FFF6         	movff	i2printf@f,tblptrl
 11422  00302E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11423  003032                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11424  003032  6AF8               	clrf	tblptru,c
 11425  003034                     	endif
 11426  003034                     	if	0	;tblptru may be non-zero
 11427  003034                     	endif
 11428  003034  0008               	tblrd		*
 11429  003036  50F5               	movf	tablat,w,c
 11430                           
 11431                           ; Switch size 1, requested type "space"
 11432                           ; Number of cases is 1, Range of values is 48 to 48
 11433                           ; switch strategies available:
 11434                           ; Name         Instructions Cycles
 11435                           ; simple_byte            4     3 (average)
 11436                           ;	Chosen strategy is simple_byte
 11437  003038  0A30               	xorlw	48	; case 48
 11438  00303A  B4D8               	btfsc	status,2,c
 11439  00303C  D7F3               	goto	i2l845
 11440                           
 11441                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11442                           
 11443                           ;doprnt.c: 586: }
 11444                           
 11445                           ;doprnt.c: 585: break;
 11446  00303E  C00D  FFF6         	movff	i2printf@f,tblptrl
 11447  003042  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11448  003046                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11449  003046  6AF8               	clrf	tblptru,c
 11450  003048                     	endif
 11451  003048                     	if	0	;tblptru may be non-zero
 11452  003048                     	endif
 11453  003048  0008               	tblrd		*
 11454  00304A  50F5               	movf	tablat,w,c
 11455  00304C  EC0C  F023         	call	i2_isdigit
 11456  003050  A0D8               	btfss	status,0,c
 11457  003052  D0A6               	goto	i2l852
 11458                           
 11459                           ;doprnt.c: 598: width = 0;
 11460  003054  0E00               	movlw	0
 11461  003056  6E29               	movwf	i2printf@width+1,c
 11462  003058  0E00               	movlw	0
 11463  00305A  6E28               	movwf	i2printf@width,c
 11464  00305C                     
 11465                           ;doprnt.c: 600: width *= 10;
 11466  00305C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11467  003060  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11468  003064  0E00               	movlw	0
 11469  003066  6E04               	movwf	i2___wmul@multiplicand+1,c
 11470  003068  0E0A               	movlw	10
 11471  00306A  6E03               	movwf	i2___wmul@multiplicand,c
 11472  00306C  ECD6  F022         	call	i2___wmul	;wreg free
 11473  003070  C001  F028         	movff	?i2___wmul,i2printf@width
 11474  003074  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11475                           
 11476                           ;doprnt.c: 601: width += *f++ - '0';
 11477  003078  0ED0               	movlw	208
 11478  00307A  6E19               	movwf	??i2_printf& (0+255),c
 11479  00307C  0EFF               	movlw	255
 11480  00307E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11481  003080  C00D  FFF6         	movff	i2printf@f,tblptrl
 11482  003084  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11483  003088                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11484  003088  6AF8               	clrf	tblptru,c
 11485  00308A                     	endif
 11486  00308A                     	if	0	;tblptru may be non-zero
 11487  00308A                     	endif
 11488  00308A  0008               	tblrd		*
 11489  00308C  50F5               	movf	tablat,w,c
 11490  00308E  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11491  003090  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11492  003092  5019               	movf	??i2_printf,w,c
 11493  003094  261B               	addwf	??i2_printf+2,f,c
 11494  003096  501A               	movf	??i2_printf+1,w,c
 11495  003098  221C               	addwfc	??i2_printf+3,f,c
 11496  00309A  501B               	movf	??i2_printf+2,w,c
 11497  00309C  2628               	addwf	i2printf@width,f,c
 11498  00309E  501C               	movf	??i2_printf+3,w,c
 11499  0030A0  2229               	addwfc	i2printf@width+1,f,c
 11500  0030A2  4A0D               	infsnz	i2printf@f,f,c
 11501  0030A4  2A0E               	incf	i2printf@f+1,f,c
 11502                           
 11503                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11504  0030A6  C00D  FFF6         	movff	i2printf@f,tblptrl
 11505  0030AA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11506  0030AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11507  0030AE  6AF8               	clrf	tblptru,c
 11508  0030B0                     	endif
 11509  0030B0                     	if	0	;tblptru may be non-zero
 11510  0030B0                     	endif
 11511  0030B0  0008               	tblrd		*
 11512  0030B2  50F5               	movf	tablat,w,c
 11513  0030B4  EC0C  F023         	call	i2_isdigit
 11514  0030B8  A0D8               	btfss	status,0,c
 11515  0030BA  D072               	goto	i2l852
 11516  0030BC  D7CF               	goto	i2l850
 11517  0030BE                     
 11518                           ;doprnt.c: 721: flag |= 0x80;
 11519  0030BE  8E27               	bsf	i2printf@flag,7,c
 11520                           
 11521                           ;doprnt.c: 723: break;
 11522  0030C0  D08A               	goto	i2l857
 11523  0030C2                     
 11524                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11525  0030C2  C021  FFD9         	movff	i2printf@ap,fsr2l
 11526  0030C6  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11527  0030CA  CFDE F01F          	movff	postinc2,i2printf@cp
 11528  0030CE  CFDD F020          	movff	postdec2,i2printf@cp+1
 11529  0030D2  0E02               	movlw	2
 11530  0030D4  2621               	addwf	i2printf@ap,f,c
 11531  0030D6  0E00               	movlw	0
 11532  0030D8  2222               	addwfc	i2printf@ap+1,f,c
 11533                           
 11534                           ;doprnt.c: 740: if(!cp)
 11535  0030DA  501F               	movf	i2printf@cp,w,c
 11536  0030DC  1020               	iorwf	i2printf@cp+1,w,c
 11537  0030DE  A4D8               	btfss	status,2,c
 11538  0030E0  D004               	goto	i2l860
 11539                           
 11540                           ;doprnt.c: 741: cp = "(null)";
 11541  0030E2  0EAC               	movlw	low STR_101
 11542  0030E4  6E1F               	movwf	i2printf@cp,c
 11543  0030E6  0EFF               	movlw	high STR_101
 11544  0030E8  6E20               	movwf	i2printf@cp+1,c
 11545  0030EA                     i2l860:
 11546                           
 11547                           ;doprnt.c: 745: len = 0;
 11548  0030EA  0E00               	movlw	0
 11549  0030EC  6E24               	movwf	i2printf@len+1,c
 11550  0030EE  0E00               	movlw	0
 11551  0030F0  6E23               	movwf	i2printf@len,c
 11552                           
 11553                           ;doprnt.c: 746: while(cp[len])
 11554  0030F2  D002               	goto	i2l861
 11555  0030F4                     
 11556                           ;doprnt.c: 747: len++;
 11557  0030F4  4A23               	infsnz	i2printf@len,f,c
 11558  0030F6  2A24               	incf	i2printf@len+1,f,c
 11559  0030F8                     i2l861:
 11560  0030F8  5023               	movf	i2printf@len,w,c
 11561  0030FA  241F               	addwf	i2printf@cp,w,c
 11562  0030FC  6E19               	movwf	??i2_printf& (0+255),c
 11563  0030FE  5024               	movf	i2printf@len+1,w,c
 11564  003100  2020               	addwfc	i2printf@cp+1,w,c
 11565  003102  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11566  003104  C019  FFF6         	movff	??i2_printf,tblptrl
 11567  003108  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 11568  00310C  0E00               	movlw	low (__mediumconst shr (0+16))
 11569  00310E  6EF8               	movwf	tblptru,c
 11570  003110  0E0F               	movlw	(high __ramtop+-1)
 11571  003112  64F7               	cpfsgt	tblptrh,c
 11572  003114  D003               	bra	i2u371_47
 11573  003116  0008               	tblrd		*
 11574  003118  50F5               	movf	tablat,w,c
 11575  00311A  D005               	bra	i2u371_40
 11576  00311C                     i2u371_47:
 11577  00311C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11578  003120  CFF7 FFEA          	movff	tblptrh,fsr0h
 11579  003124  50EF               	movf	indf0,w,c
 11580  003126                     i2u371_40:
 11581  003126  0900               	iorlw	0
 11582  003128  A4D8               	btfss	status,2,c
 11583  00312A  D7E4               	goto	i2l862
 11584                           
 11585                           ;doprnt.c: 757: if(width > len)
 11586  00312C  5028               	movf	i2printf@width,w,c
 11587  00312E  5C23               	subwf	i2printf@len,w,c
 11588  003130  5029               	movf	i2printf@width+1,w,c
 11589  003132  5824               	subwfb	i2printf@len+1,w,c
 11590  003134  B0D8               	btfsc	status,0,c
 11591  003136  D005               	goto	i2l864
 11592                           
 11593                           ;doprnt.c: 758: width -= len;
 11594  003138  5023               	movf	i2printf@len,w,c
 11595  00313A  5E28               	subwf	i2printf@width,f,c
 11596  00313C  5024               	movf	i2printf@len+1,w,c
 11597  00313E  5A29               	subwfb	i2printf@width+1,f,c
 11598  003140  D008               	goto	i2l866
 11599  003142                     i2l864:
 11600                           
 11601                           ;doprnt.c: 759: else
 11602                           ;doprnt.c: 760: width = 0;
 11603  003142  0E00               	movlw	0
 11604  003144  6E29               	movwf	i2printf@width+1,c
 11605  003146  0E00               	movlw	0
 11606  003148  6E28               	movwf	i2printf@width,c
 11607                           
 11608                           ;doprnt.c: 764: while(width--)
 11609  00314A  D003               	goto	i2l866
 11610  00314C                     i2l4990:
 11611                           
 11612                           ;doprnt.c: 765: (putch(' ') );
 11613  00314C  0E20               	movlw	32
 11614  00314E  EC3D  F023         	call	i2_putch
 11615  003152                     i2l866:
 11616  003152  0628               	decf	i2printf@width,f,c
 11617  003154  A0D8               	btfss	status,0,c
 11618  003156  0629               	decf	i2printf@width+1,f,c
 11619  003158  2828               	incf	i2printf@width,w,c
 11620  00315A  E1F8               	bnz	i2l4990
 11621  00315C  2829               	incf	i2printf@width+1,w,c
 11622  00315E  B4D8               	btfsc	status,2,c
 11623  003160  D016               	goto	i2l869
 11624  003162  D7F4               	goto	i2l867
 11625  003164                     i2l4994:
 11626                           
 11627                           ;doprnt.c: 768: (putch(*cp++) );
 11628  003164  C01F  FFF6         	movff	i2printf@cp,tblptrl
 11629  003168  C020  FFF7         	movff	i2printf@cp+1,tblptrh
 11630  00316C  0E00               	movlw	low (__mediumconst shr (0+16))
 11631  00316E  6EF8               	movwf	tblptru,c
 11632  003170  0E0F               	movlw	(high __ramtop+-1)
 11633  003172  64F7               	cpfsgt	tblptrh,c
 11634  003174  D003               	bra	i2u375_47
 11635  003176  0008               	tblrd		*
 11636  003178  50F5               	movf	tablat,w,c
 11637  00317A  D005               	bra	i2u375_40
 11638  00317C                     i2u375_47:
 11639  00317C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11640  003180  CFF7 FFEA          	movff	tblptrh,fsr0h
 11641  003184  50EF               	movf	indf0,w,c
 11642  003186                     i2u375_40:
 11643  003186  EC3D  F023         	call	i2_putch
 11644  00318A  4A1F               	infsnz	i2printf@cp,f,c
 11645  00318C  2A20               	incf	i2printf@cp+1,f,c
 11646  00318E                     i2l869:
 11647  00318E  0623               	decf	i2printf@len,f,c
 11648  003190  A0D8               	btfss	status,0,c
 11649  003192  0624               	decf	i2printf@len+1,f,c
 11650  003194  2823               	incf	i2printf@len,w,c
 11651  003196  E1E6               	bnz	i2l4994
 11652  003198  2824               	incf	i2printf@len+1,w,c
 11653  00319A  B4D8               	btfsc	status,2,c
 11654  00319C  D12E               	goto	i2u395_40
 11655  00319E  D7E2               	goto	i2l870
 11656  0031A0                     i2l852:
 11657  0031A0  C00D  FFF6         	movff	i2printf@f,tblptrl
 11658  0031A4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11659  0031A8  4A0D               	infsnz	i2printf@f,f,c
 11660  0031AA  2A0E               	incf	i2printf@f+1,f,c
 11661  0031AC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11662  0031AC  6AF8               	clrf	tblptru,c
 11663  0031AE                     	endif
 11664  0031AE                     	if	0	;tblptru may be non-zero
 11665  0031AE                     	endif
 11666  0031AE  0008               	tblrd		*
 11667  0031B0  CFF5 F02A          	movff	tablat,i2printf@c
 11668  0031B4  502A               	movf	i2printf@c,w,c
 11669                           
 11670                           ; Switch size 1, requested type "space"
 11671                           ; Number of cases is 5, Range of values is 0 to 120
 11672                           ; switch strategies available:
 11673                           ; Name         Instructions Cycles
 11674                           ; simple_byte           16     9 (average)
 11675                           ;	Chosen strategy is simple_byte
 11676  0031B6  0A00               	xorlw	0	; case 0
 11677  0031B8  B4D8               	btfsc	status,2,c
 11678  0031BA  0012               	return	
 11679  0031BC  0A64               	xorlw	100	; case 100
 11680  0031BE  B4D8               	btfsc	status,2,c
 11681  0031C0  D00A               	goto	i2l857
 11682  0031C2  0A0D               	xorlw	13	; case 105
 11683  0031C4  B4D8               	btfsc	status,2,c
 11684  0031C6  D007               	goto	i2l857
 11685  0031C8  0A1A               	xorlw	26	; case 115
 11686  0031CA  B4D8               	btfsc	status,2,c
 11687  0031CC  D77A               	goto	i2l859
 11688  0031CE  0A0B               	xorlw	11	; case 120
 11689  0031D0  B4D8               	btfsc	status,2,c
 11690  0031D2  D775               	goto	i2l858
 11691  0031D4  D112               	goto	i2u395_40
 11692  0031D6                     i2l857:
 11693                           
 11694                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11695  0031D6  BE27               	btfsc	i2printf@flag,7,c
 11696  0031D8  D015               	goto	i2l873
 11697                           
 11698                           ;doprnt.c: 1253: {
 11699                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11700  0031DA  C021  FFD9         	movff	i2printf@ap,fsr2l
 11701  0031DE  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11702  0031E2  CFDE F025          	movff	postinc2,i2printf@val
 11703  0031E6  CFDD F026          	movff	postdec2,i2printf@val+1
 11704  0031EA  0E02               	movlw	2
 11705  0031EC  2621               	addwf	i2printf@ap,f,c
 11706  0031EE  0E00               	movlw	0
 11707  0031F0  2222               	addwfc	i2printf@ap+1,f,c
 11708                           
 11709                           ;doprnt.c: 1261: if((int)val < 0) {
 11710  0031F2  AE26               	btfss	i2printf@val+1,7,c
 11711  0031F4  D04A               	goto	i2l876
 11712                           
 11713                           ;doprnt.c: 1262: flag |= 0x03;
 11714  0031F6  0E03               	movlw	3
 11715  0031F8  1227               	iorwf	i2printf@flag,f,c
 11716                           
 11717                           ;doprnt.c: 1263: val = -val;
 11718  0031FA  6C25               	negf	i2printf@val,c
 11719  0031FC  1E26               	comf	i2printf@val+1,f,c
 11720  0031FE  B0D8               	btfsc	status,0,c
 11721  003200  2A26               	incf	i2printf@val+1,f,c
 11722                           
 11723                           ;doprnt.c: 1264: }
 11724                           ;doprnt.c: 1266: }
 11725  003202  D043               	goto	i2l876
 11726  003204                     i2l873:
 11727                           
 11728                           ;doprnt.c: 1268: else
 11729                           ;doprnt.c: 1273: {
 11730                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11731  003204  C021  FFD9         	movff	i2printf@ap,fsr2l
 11732  003208  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11733  00320C  CFDE F025          	movff	postinc2,i2printf@val
 11734  003210  CFDD F026          	movff	postdec2,i2printf@val+1
 11735  003214  0E02               	movlw	2
 11736  003216  2621               	addwf	i2printf@ap,f,c
 11737  003218  0E00               	movlw	0
 11738  00321A  2222               	addwfc	i2printf@ap+1,f,c
 11739                           
 11740                           ;doprnt.c: 1287: }
 11741                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 11742  00321C  D036               	goto	i2l876
 11743  00321E                     
 11744                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11745  00321E  0E01               	movlw	1
 11746  003220  6E2A               	movwf	i2printf@c,c
 11747  003222                     i2l5020:
 11748  003222  0E05               	movlw	5
 11749  003224  182A               	xorwf	i2printf@c,w,c
 11750  003226  B4D8               	btfsc	status,2,c
 11751  003228  D038               	goto	i2l881
 11752                           
 11753                           ;doprnt.c: 1306: if(val < dpowers[c])
 11754  00322A  502A               	movf	i2printf@c,w,c
 11755  00322C  0D02               	mullw	2
 11756  00322E  0EA4               	movlw	low _dpowers
 11757  003230  24F3               	addwf	prodl,w,c
 11758  003232  6EF6               	movwf	tblptrl,c
 11759  003234  0EFC               	movlw	high _dpowers
 11760  003236  20F4               	addwfc	prodh,w,c
 11761  003238  6EF7               	movwf	tblptrh,c
 11762  00323A                     	if	1	;There are 3 active tblptr bytes
 11763  00323A  6AF8               	clrf	tblptru,c
 11764  00323C  0E00               	movlw	low (__mediumconst shr (0+16))
 11765  00323E  22F8               	addwfc	tblptru,f,c
 11766  003240                     	endif
 11767  003240  0009               	tblrd		*+
 11768  003242  50F5               	movf	tablat,w,c
 11769  003244  5C25               	subwf	i2printf@val,w,c
 11770  003246  0009               	tblrd		*+
 11771  003248  50F5               	movf	tablat,w,c
 11772  00324A  5826               	subwfb	i2printf@val+1,w,c
 11773  00324C  A0D8               	btfss	status,0,c
 11774  00324E  D025               	goto	i2l881
 11775                           
 11776                           ;doprnt.c: 1307: break;
 11777  003250  2A2A               	incf	i2printf@c,f,c
 11778  003252  D7E7               	goto	i2l5020
 11779  003254                     
 11780                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11781  003254  0E01               	movlw	1
 11782  003256  6E2A               	movwf	i2printf@c,c
 11783  003258                     i2l5034:
 11784  003258  0E04               	movlw	4
 11785  00325A  182A               	xorwf	i2printf@c,w,c
 11786  00325C  B4D8               	btfsc	status,2,c
 11787  00325E  D01D               	goto	i2l881
 11788                           
 11789                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11790  003260  502A               	movf	i2printf@c,w,c
 11791  003262  0D02               	mullw	2
 11792  003264  0EAE               	movlw	low _hexpowers
 11793  003266  24F3               	addwf	prodl,w,c
 11794  003268  6EF6               	movwf	tblptrl,c
 11795  00326A  0EFC               	movlw	high _hexpowers
 11796  00326C  20F4               	addwfc	prodh,w,c
 11797  00326E  6EF7               	movwf	tblptrh,c
 11798  003270                     	if	1	;There are 3 active tblptr bytes
 11799  003270  6AF8               	clrf	tblptru,c
 11800  003272  0E00               	movlw	low (__mediumconst shr (0+16))
 11801  003274  22F8               	addwfc	tblptru,f,c
 11802  003276                     	endif
 11803  003276  0009               	tblrd		*+
 11804  003278  50F5               	movf	tablat,w,c
 11805  00327A  5C25               	subwf	i2printf@val,w,c
 11806  00327C  0009               	tblrd		*+
 11807  00327E  50F5               	movf	tablat,w,c
 11808  003280  5826               	subwfb	i2printf@val+1,w,c
 11809  003282  A0D8               	btfss	status,0,c
 11810  003284  D00A               	goto	i2l881
 11811                           
 11812                           ;doprnt.c: 1318: break;
 11813  003286  2A2A               	incf	i2printf@c,f,c
 11814  003288  D7E7               	goto	i2l5034
 11815  00328A                     i2l876:
 11816  00328A  5027               	movf	i2printf@flag,w,c
 11817  00328C  0B80               	andlw	128
 11818                           
 11819                           ; Switch size 1, requested type "space"
 11820                           ; Number of cases is 2, Range of values is 0 to 128
 11821                           ; switch strategies available:
 11822                           ; Name         Instructions Cycles
 11823                           ; simple_byte            7     4 (average)
 11824                           ;	Chosen strategy is simple_byte
 11825  00328E  0A00               	xorlw	0	; case 0
 11826  003290  B4D8               	btfsc	status,2,c
 11827  003292  D7C5               	goto	i2l877
 11828  003294  0A80               	xorlw	128	; case 128
 11829  003296  B4D8               	btfsc	status,2,c
 11830  003298  D7DD               	goto	i2l882
 11831  00329A                     i2l881:
 11832                           
 11833                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11834  00329A  5028               	movf	i2printf@width,w,c
 11835  00329C  1029               	iorwf	i2printf@width+1,w,c
 11836  00329E  B4D8               	btfsc	status,2,c
 11837  0032A0  D009               	goto	i2l886
 11838  0032A2  C027  F019         	movff	i2printf@flag,??i2_printf
 11839  0032A6  0E03               	movlw	3
 11840  0032A8  1619               	andwf	??i2_printf,f,c
 11841  0032AA  B4D8               	btfsc	status,2,c
 11842  0032AC  D003               	goto	i2l886
 11843                           
 11844                           ;doprnt.c: 1346: width--;
 11845  0032AE  0628               	decf	i2printf@width,f,c
 11846  0032B0  A0D8               	btfss	status,0,c
 11847  0032B2  0629               	decf	i2printf@width+1,f,c
 11848  0032B4                     i2l886:
 11849                           
 11850                           ;doprnt.c: 1381: if(width > c)
 11851  0032B4  0E80               	movlw	128
 11852  0032B6  BE2A               	btfsc	i2printf@c,7,c
 11853  0032B8  0E7F               	movlw	127
 11854  0032BA  6E19               	movwf	??i2_printf& (0+255),c
 11855  0032BC  5028               	movf	i2printf@width,w,c
 11856  0032BE  5C2A               	subwf	i2printf@c,w,c
 11857  0032C0  5029               	movf	i2printf@width+1,w,c
 11858  0032C2  0A80               	xorlw	128
 11859  0032C4  5819               	subwfb	??i2_printf& (0+255),w,c
 11860  0032C6  B0D8               	btfsc	status,0,c
 11861  0032C8  D007               	goto	i2l887
 11862                           
 11863                           ;doprnt.c: 1382: width -= c;
 11864  0032CA  502A               	movf	i2printf@c,w,c
 11865  0032CC  5E28               	subwf	i2printf@width,f,c
 11866  0032CE  0E00               	movlw	0
 11867  0032D0  BE2A               	btfsc	i2printf@c,7,c
 11868  0032D2  0EFF               	movlw	255
 11869  0032D4  5A29               	subwfb	i2printf@width+1,f,c
 11870  0032D6  D004               	goto	i2l888
 11871  0032D8                     i2l887:
 11872                           
 11873                           ;doprnt.c: 1383: else
 11874                           ;doprnt.c: 1384: width = 0;
 11875  0032D8  0E00               	movlw	0
 11876  0032DA  6E29               	movwf	i2printf@width+1,c
 11877  0032DC  0E00               	movlw	0
 11878  0032DE  6E28               	movwf	i2printf@width,c
 11879  0032E0                     i2l888:
 11880                           
 11881                           ;doprnt.c: 1387: if(flag & 0x04) {
 11882  0032E0  A427               	btfss	i2printf@flag,2,c
 11883  0032E2  D014               	goto	i2l889
 11884                           
 11885                           ;doprnt.c: 1392: if(flag & 0x03)
 11886  0032E4  C027  F019         	movff	i2printf@flag,??i2_printf
 11887  0032E8  0E03               	movlw	3
 11888  0032EA  1619               	andwf	??i2_printf,f,c
 11889  0032EC  B4D8               	btfsc	status,2,c
 11890  0032EE  D003               	goto	i2l890
 11891                           
 11892                           ;doprnt.c: 1393: (putch('-') );
 11893  0032F0  0E2D               	movlw	45
 11894  0032F2  EC3D  F023         	call	i2_putch
 11895  0032F6                     i2l890:
 11896                           
 11897                           ;doprnt.c: 1415: if(width)
 11898  0032F6  5028               	movf	i2printf@width,w,c
 11899  0032F8  1029               	iorwf	i2printf@width+1,w,c
 11900  0032FA  B4D8               	btfsc	status,2,c
 11901  0032FC  D01E               	goto	i2l898
 11902                           
 11903                           ;doprnt.c: 1417: (putch('0') );
 11904                           
 11905                           ;doprnt.c: 1416: do
 11906  0032FE  0E30               	movlw	48
 11907  003300  EC3D  F023         	call	i2_putch
 11908                           
 11909                           ;doprnt.c: 1418: while(--width);
 11910  003304  0628               	decf	i2printf@width,f,c
 11911  003306  A0D8               	btfss	status,0,c
 11912  003308  0629               	decf	i2printf@width+1,f,c
 11913  00330A  D7F5               	goto	i2l890
 11914  00330C                     i2l889:
 11915                           
 11916                           ;doprnt.c: 1422: {
 11917                           ;doprnt.c: 1424: if(width
 11918                           ;doprnt.c: 1428: )
 11919  00330C  5028               	movf	i2printf@width,w,c
 11920  00330E  1029               	iorwf	i2printf@width+1,w,c
 11921  003310  B4D8               	btfsc	status,2,c
 11922  003312  D00A               	goto	i2u393_40
 11923  003314                     i2u392_40:
 11924                           
 11925                           ;doprnt.c: 1430: (putch(' ') );
 11926                           
 11927                           ;doprnt.c: 1429: do
 11928  003314  0E20               	movlw	32
 11929  003316  EC3D  F023         	call	i2_putch
 11930                           
 11931                           ;doprnt.c: 1431: while(--width);
 11932  00331A  0628               	decf	i2printf@width,f,c
 11933  00331C  A0D8               	btfss	status,0,c
 11934  00331E  0629               	decf	i2printf@width+1,f,c
 11935  003320  5028               	movf	i2printf@width,w,c
 11936  003322  1029               	iorwf	i2printf@width+1,w,c
 11937  003324  A4D8               	btfss	status,2,c
 11938  003326  D7F6               	goto	i2u392_40
 11939  003328                     i2u393_40:
 11940                           
 11941                           ;doprnt.c: 1438: if(flag & 0x03)
 11942  003328  C027  F019         	movff	i2printf@flag,??i2_printf
 11943  00332C  0E03               	movlw	3
 11944  00332E  1619               	andwf	??i2_printf,f,c
 11945  003330  B4D8               	btfsc	status,2,c
 11946  003332  D003               	goto	i2l898
 11947                           
 11948                           ;doprnt.c: 1439: (putch('-') );
 11949  003334  0E2D               	movlw	45
 11950  003336  EC3D  F023         	call	i2_putch
 11951  00333A                     i2l898:
 11952                           
 11953                           ;doprnt.c: 1469: }
 11954                           ;doprnt.c: 1472: prec = c;
 11955  00333A  C02A  F01E         	movff	i2printf@c,i2printf@prec
 11956                           
 11957                           ;doprnt.c: 1474: while(prec--) {
 11958  00333E  D059               	goto	i2l899
 11959  003340                     
 11960                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11961  003340  501E               	movf	i2printf@prec,w,c
 11962  003342  0D02               	mullw	2
 11963  003344  0EA4               	movlw	low _dpowers
 11964  003346  24F3               	addwf	prodl,w,c
 11965  003348  6EF6               	movwf	tblptrl,c
 11966  00334A  0EFC               	movlw	high _dpowers
 11967  00334C  20F4               	addwfc	prodh,w,c
 11968  00334E  6EF7               	movwf	tblptrh,c
 11969  003350                     	if	1	;There are 3 active tblptr bytes
 11970  003350  6AF8               	clrf	tblptru,c
 11971  003352  0E00               	movlw	low (__mediumconst shr (0+16))
 11972  003354  22F8               	addwfc	tblptru,f,c
 11973  003356                     	endif
 11974  003356  0009               	tblrd		*+
 11975  003358  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11976  00335C  000A               	tblrd		*-
 11977  00335E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11978  003362  C025  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11979  003366  C026  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11980  00336A  EC5B  F021         	call	i2___lwdiv	;wreg free
 11981  00336E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 11982  003372  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11983  003376  0E00               	movlw	0
 11984  003378  6E0B               	movwf	i2___lwmod@divisor+1,c
 11985  00337A  0E0A               	movlw	10
 11986  00337C  6E0A               	movwf	i2___lwmod@divisor,c
 11987  00337E  EC3A  F022         	call	i2___lwmod	;wreg free
 11988  003382  5008               	movf	?i2___lwmod,w,c
 11989  003384  0F30               	addlw	48
 11990  003386  6E2A               	movwf	i2printf@c,c
 11991                           
 11992                           ;doprnt.c: 1491: break;
 11993  003388  D031               	goto	i2l903
 11994  00338A                     
 11995                           ;doprnt.c: 1499: {
 11996                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11997  00338A  C025  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11998  00338E  C026  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11999  003392  501E               	movf	i2printf@prec,w,c
 12000  003394  0D02               	mullw	2
 12001  003396  0EAE               	movlw	low _hexpowers
 12002  003398  24F3               	addwf	prodl,w,c
 12003  00339A  6EF6               	movwf	tblptrl,c
 12004  00339C  0EFC               	movlw	high _hexpowers
 12005  00339E  20F4               	addwfc	prodh,w,c
 12006  0033A0  6EF7               	movwf	tblptrh,c
 12007  0033A2                     	if	1	;There are 3 active tblptr bytes
 12008  0033A2  6AF8               	clrf	tblptru,c
 12009  0033A4  0E00               	movlw	low (__mediumconst shr (0+16))
 12010  0033A6  22F8               	addwfc	tblptru,f,c
 12011  0033A8                     	endif
 12012  0033A8  0009               	tblrd		*+
 12013  0033AA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12014  0033AE  000A               	tblrd		*-
 12015  0033B0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12016  0033B4  EC5B  F021         	call	i2___lwdiv	;wreg free
 12017  0033B8  5001               	movf	?i2___lwdiv,w,c
 12018  0033BA  0B0F               	andlw	15
 12019  0033BC  6E1D               	movwf	i2printf@idx,c
 12020                           
 12021                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 12022  0033BE  501D               	movf	i2printf@idx,w,c
 12023  0033C0  0D01               	mullw	1
 12024  0033C2  0E9F               	movlw	low STR_102
 12025  0033C4  24F3               	addwf	prodl,w,c
 12026  0033C6  6EF6               	movwf	tblptrl,c
 12027  0033C8  0EFD               	movlw	high STR_102
 12028  0033CA  20F4               	addwfc	prodh,w,c
 12029  0033CC  6EF7               	movwf	tblptrh,c
 12030  0033CE                     	if	1	;There are 3 active tblptr bytes
 12031  0033CE  6AF8               	clrf	tblptru,c
 12032  0033D0  0E00               	movlw	low (__mediumconst shr (0+16))
 12033  0033D2  22F8               	addwfc	tblptru,f,c
 12034  0033D4                     	endif
 12035  0033D4  0008               	tblrd		*
 12036  0033D6  CFF5 F02A          	movff	tablat,i2printf@c
 12037                           
 12038                           ;doprnt.c: 1523: }
 12039                           
 12040                           ;doprnt.c: 1508: }
 12041                           ;doprnt.c: 1510: break;
 12042  0033DA  D008               	goto	i2l903
 12043  0033DC  5027               	movf	i2printf@flag,w,c
 12044  0033DE  0B80               	andlw	128
 12045                           
 12046                           ; Switch size 1, requested type "space"
 12047                           ; Number of cases is 2, Range of values is 0 to 128
 12048                           ; switch strategies available:
 12049                           ; Name         Instructions Cycles
 12050                           ; simple_byte            7     4 (average)
 12051                           ;	Chosen strategy is simple_byte
 12052  0033E0  0A00               	xorlw	0	; case 0
 12053  0033E2  B4D8               	btfsc	status,2,c
 12054  0033E4  D7AD               	goto	i2l902
 12055  0033E6  0A80               	xorlw	128	; case 128
 12056  0033E8  B4D8               	btfsc	status,2,c
 12057  0033EA  D7CF               	goto	i2l904
 12058  0033EC                     i2l903:
 12059                           
 12060                           ;doprnt.c: 1524: (putch(c) );
 12061  0033EC  502A               	movf	i2printf@c,w,c
 12062  0033EE  EC3D  F023         	call	i2_putch
 12063  0033F2                     i2l899:
 12064  0033F2  061E               	decf	i2printf@prec,f,c
 12065  0033F4  281E               	incf	i2printf@prec,w,c
 12066  0033F6  A4D8               	btfss	status,2,c
 12067  0033F8  D7F1               	goto	i2l901
 12068  0033FA                     i2u395_40:
 12069  0033FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 12070  0033FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12071  003402  4A0D               	infsnz	i2printf@f,f,c
 12072  003404  2A0E               	incf	i2printf@f+1,f,c
 12073  003406                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12074  003406  6AF8               	clrf	tblptru,c
 12075  003408                     	endif
 12076  003408                     	if	0	;tblptru may be non-zero
 12077  003408                     	endif
 12078  003408  0008               	tblrd		*
 12079  00340A  CFF5 F02A          	movff	tablat,i2printf@c
 12080  00340E  502A               	movf	i2printf@c,w,c
 12081  003410  B4D8               	btfsc	status,2,c
 12082  003412  0012               	return	
 12083  003414  D5F8               	goto	i2l841
 12084  003416                     __end_ofi2_printf:
 12085                           	opt stack 0
 12086                           pclatu	equ	0xFFB
 12087                           pclath	equ	0xFFA
 12088                           tblptru	equ	0xFF8
 12089                           tblptrh	equ	0xFF7
 12090                           tblptrl	equ	0xFF6
 12091                           tablat	equ	0xFF5
 12092                           prodh	equ	0xFF4
 12093                           prodl	equ	0xFF3
 12094                           intcon	equ	0xFF2
 12095                           intcon3	equ	0xFF0
 12096                           indf0	equ	0xFEF
 12097                           postinc0	equ	0xFEE
 12098                           fsr0h	equ	0xFEA
 12099                           fsr0l	equ	0xFE9
 12100                           wreg	equ	0xFE8
 12101                           postdec1	equ	0xFE5
 12102                           fsr1h	equ	0xFE2
 12103                           fsr1l	equ	0xFE1
 12104                           indf2	equ	0xFDF
 12105                           postinc2	equ	0xFDE
 12106                           postdec2	equ	0xFDD
 12107                           fsr2h	equ	0xFDA
 12108                           fsr2l	equ	0xFD9
 12109                           status	equ	0xFD8
 12110                           
 12111 ;; *************** function i2_putch *****************
 12112 ;; Defined at:
 12113 ;;		line 24 in file "lcd.c"
 12114 ;; Parameters:    Size  Location     Type
 12115 ;;  data            1    wreg     unsigned char 
 12116 ;; Auto vars:     Size  Location     Type
 12117 ;;  data            1    2[COMRAM] unsigned char 
 12118 ;; Return value:  Size  Location     Type
 12119 ;;                  1    wreg      void 
 12120 ;; Registers used:
 12121 ;;		wreg, status,2, status,0, cstack
 12122 ;; Tracked objects:
 12123 ;;		On entry : 0/0
 12124 ;;		On exit  : 0/0
 12125 ;;		Unchanged: 0/0
 12126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;Total ram usage:        1 bytes
 12132 ;; Hardware stack levels used:    1
 12133 ;; Hardware stack levels required when called:    1
 12134 ;; This function calls:
 12135 ;;		i2_lcdNibble
 12136 ;; This function is called by:
 12137 ;;		_interruptHandler
 12138 ;;		i2_printf
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           	psect	text26
 12143  00467A                     __ptext26:
 12144                           	opt stack 0
 12145  00467A                     i2_putch:
 12146                           	opt stack 25
 12147                           
 12148                           ;incstack = 0
 12149                           ;i2putch@data stored from wreg
 12150  00467A  6E03               	movwf	i2putch@data,c
 12151                           
 12152                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 12153  00467C  848C               	bsf	3980,2,c	;volatile
 12154                           
 12155                           ;lcd.c: 33: lcdNibble(data);
 12156  00467E  5003               	movf	i2putch@data,w,c
 12157  004680  ECE1  F01E         	call	i2_lcdNibble
 12158                           
 12159                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
 12160  004684  0EC8               	movlw	200
 12161  004686                     i2u596_47:
 12162  004686  D000               	nop2	
 12163  004688  2EE8               	decfsz	wreg,f,c
 12164  00468A  D7FD               	bra	i2u596_47
 12165  00468C  0012               	return		;funcret
 12166  00468E                     __end_ofi2_putch:
 12167                           	opt stack 0
 12168                           pclatu	equ	0xFFB
 12169                           pclath	equ	0xFFA
 12170                           tblptru	equ	0xFF8
 12171                           tblptrh	equ	0xFF7
 12172                           tblptrl	equ	0xFF6
 12173                           tablat	equ	0xFF5
 12174                           prodh	equ	0xFF4
 12175                           prodl	equ	0xFF3
 12176                           intcon	equ	0xFF2
 12177                           intcon3	equ	0xFF0
 12178                           indf0	equ	0xFEF
 12179                           postinc0	equ	0xFEE
 12180                           fsr0h	equ	0xFEA
 12181                           fsr0l	equ	0xFE9
 12182                           wreg	equ	0xFE8
 12183                           postdec1	equ	0xFE5
 12184                           fsr1h	equ	0xFE2
 12185                           fsr1l	equ	0xFE1
 12186                           indf2	equ	0xFDF
 12187                           postinc2	equ	0xFDE
 12188                           postdec2	equ	0xFDD
 12189                           fsr2h	equ	0xFDA
 12190                           fsr2l	equ	0xFD9
 12191                           status	equ	0xFD8
 12192                           
 12193 ;; *************** function i2_isdigit *****************
 12194 ;; Defined at:
 12195 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 12196 ;; Parameters:    Size  Location     Type
 12197 ;;  c               1    wreg     unsigned char 
 12198 ;; Auto vars:     Size  Location     Type
 12199 ;;  c               1    2[COMRAM] unsigned char 
 12200 ;; Return value:  Size  Location     Type
 12201 ;;		None               void
 12202 ;; Registers used:
 12203 ;;		wreg, status,2, status,0
 12204 ;; Tracked objects:
 12205 ;;		On entry : 0/0
 12206 ;;		On exit  : 0/0
 12207 ;;		Unchanged: 0/0
 12208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12212 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12213 ;;Total ram usage:        3 bytes
 12214 ;; Hardware stack levels used:    1
 12215 ;; This function calls:
 12216 ;;		Nothing
 12217 ;; This function is called by:
 12218 ;;		i2_printf
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           	psect	text27
 12223  004618                     __ptext27:
 12224                           	opt stack 0
 12225  004618                     i2_isdigit:
 12226                           	opt stack 25
 12227                           
 12228                           ;incstack = 0
 12229                           ;i2isdigit@c stored from wreg
 12230  004618  6E03               	movwf	i2isdigit@c,c
 12231  00461A  0E00               	movlw	0
 12232  00461C  6E02               	movwf	i2_isdigit$1301,c
 12233  00461E  0E3A               	movlw	58
 12234  004620  6003               	cpfslt	i2isdigit@c,c
 12235  004622  D005               	goto	i2l1237
 12236  004624  0E2F               	movlw	47
 12237  004626  6403               	cpfsgt	i2isdigit@c,c
 12238  004628  D002               	goto	i2l1237
 12239  00462A  0E01               	movlw	1
 12240  00462C  6E02               	movwf	i2_isdigit$1301,c
 12241  00462E                     i2l1237:
 12242  00462E  C002  F001         	movff	i2_isdigit$1301,??i2_isdigit
 12243  004632  3001               	rrcf	??i2_isdigit,w,c
 12244  004634  0012               	return	
 12245  004636                     __end_ofi2_isdigit:
 12246                           	opt stack 0
 12247                           pclatu	equ	0xFFB
 12248                           pclath	equ	0xFFA
 12249                           tblptru	equ	0xFF8
 12250                           tblptrh	equ	0xFF7
 12251                           tblptrl	equ	0xFF6
 12252                           tablat	equ	0xFF5
 12253                           prodh	equ	0xFF4
 12254                           prodl	equ	0xFF3
 12255                           intcon	equ	0xFF2
 12256                           intcon3	equ	0xFF0
 12257                           indf0	equ	0xFEF
 12258                           postinc0	equ	0xFEE
 12259                           fsr0h	equ	0xFEA
 12260                           fsr0l	equ	0xFE9
 12261                           wreg	equ	0xFE8
 12262                           postdec1	equ	0xFE5
 12263                           fsr1h	equ	0xFE2
 12264                           fsr1l	equ	0xFE1
 12265                           indf2	equ	0xFDF
 12266                           postinc2	equ	0xFDE
 12267                           postdec2	equ	0xFDD
 12268                           fsr2h	equ	0xFDA
 12269                           fsr2l	equ	0xFD9
 12270                           status	equ	0xFD8
 12271                           
 12272 ;; *************** function i2___lwmod *****************
 12273 ;; Defined at:
 12274 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;  dividend        2    7[COMRAM] unsigned int 
 12277 ;;  divisor         2    9[COMRAM] unsigned int 
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  2    7[COMRAM] unsigned int 
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12289 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12292 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;Total ram usage:        5 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; This function calls:
 12296 ;;		Nothing
 12297 ;; This function is called by:
 12298 ;;		i2_printf
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           	psect	text28
 12303  004474                     __ptext28:
 12304                           	opt stack 0
 12305  004474                     i2___lwmod:
 12306                           	opt stack 25
 12307                           
 12308                           ;incstack = 0
 12309  004474  500A               	movf	i2___lwmod@divisor,w,c
 12310  004476  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12311  004478  B4D8               	btfsc	status,2,c
 12312  00447A  D018               	goto	i2l1331
 12313  00447C  0E01               	movlw	1
 12314  00447E  6E0C               	movwf	i2___lwmod@counter,c
 12315  004480  D004               	goto	i2l1326
 12316  004482  90D8               	bcf	status,0,c
 12317  004484  360A               	rlcf	i2___lwmod@divisor,f,c
 12318  004486  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12319  004488  2A0C               	incf	i2___lwmod@counter,f,c
 12320  00448A                     i2l1326:
 12321  00448A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12322  00448C  D7FA               	goto	i2l1327
 12323  00448E                     i2u287_40:
 12324  00448E  500A               	movf	i2___lwmod@divisor,w,c
 12325  004490  5C08               	subwf	i2___lwmod@dividend,w,c
 12326  004492  500B               	movf	i2___lwmod@divisor+1,w,c
 12327  004494  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12328  004496  A0D8               	btfss	status,0,c
 12329  004498  D004               	goto	i2l1330
 12330  00449A  500A               	movf	i2___lwmod@divisor,w,c
 12331  00449C  5E08               	subwf	i2___lwmod@dividend,f,c
 12332  00449E  500B               	movf	i2___lwmod@divisor+1,w,c
 12333  0044A0  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12334  0044A2                     i2l1330:
 12335  0044A2  90D8               	bcf	status,0,c
 12336  0044A4  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12337  0044A6  320A               	rrcf	i2___lwmod@divisor,f,c
 12338  0044A8  2E0C               	decfsz	i2___lwmod@counter,f,c
 12339  0044AA  D7F1               	goto	i2u287_40
 12340  0044AC                     i2l1331:
 12341  0044AC  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12342  0044B0  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12343  0044B4  0012               	return		;funcret
 12344  0044B6                     __end_ofi2___lwmod:
 12345                           	opt stack 0
 12346                           pclatu	equ	0xFFB
 12347                           pclath	equ	0xFFA
 12348                           tblptru	equ	0xFF8
 12349                           tblptrh	equ	0xFF7
 12350                           tblptrl	equ	0xFF6
 12351                           tablat	equ	0xFF5
 12352                           prodh	equ	0xFF4
 12353                           prodl	equ	0xFF3
 12354                           intcon	equ	0xFF2
 12355                           intcon3	equ	0xFF0
 12356                           indf0	equ	0xFEF
 12357                           postinc0	equ	0xFEE
 12358                           fsr0h	equ	0xFEA
 12359                           fsr0l	equ	0xFE9
 12360                           wreg	equ	0xFE8
 12361                           postdec1	equ	0xFE5
 12362                           fsr1h	equ	0xFE2
 12363                           fsr1l	equ	0xFE1
 12364                           indf2	equ	0xFDF
 12365                           postinc2	equ	0xFDE
 12366                           postdec2	equ	0xFDD
 12367                           fsr2h	equ	0xFDA
 12368                           fsr2l	equ	0xFD9
 12369                           status	equ	0xFD8
 12370                           
 12371 ;; *************** function i2___lwdiv *****************
 12372 ;; Defined at:
 12373 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 12374 ;; Parameters:    Size  Location     Type
 12375 ;;  dividend        2    0[COMRAM] unsigned int 
 12376 ;;  divisor         2    2[COMRAM] unsigned int 
 12377 ;; Auto vars:     Size  Location     Type
 12378 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12379 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12380 ;; Return value:  Size  Location     Type
 12381 ;;                  2    0[COMRAM] unsigned int 
 12382 ;; Registers used:
 12383 ;;		wreg, status,2, status,0
 12384 ;; Tracked objects:
 12385 ;;		On entry : 0/0
 12386 ;;		On exit  : 0/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12389 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12390 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12392 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12393 ;;Total ram usage:        7 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; This function calls:
 12396 ;;		Nothing
 12397 ;; This function is called by:
 12398 ;;		i2_printf
 12399 ;; This function uses a non-reentrant model
 12400 ;;
 12401                           
 12402                           	psect	text29
 12403  0042B6                     __ptext29:
 12404                           	opt stack 0
 12405  0042B6                     i2___lwdiv:
 12406                           	opt stack 25
 12407                           
 12408                           ;incstack = 0
 12409  0042B6  0E00               	movlw	0
 12410  0042B8  6E06               	movwf	i2___lwdiv@quotient+1,c
 12411  0042BA  0E00               	movlw	0
 12412  0042BC  6E05               	movwf	i2___lwdiv@quotient,c
 12413  0042BE  5003               	movf	i2___lwdiv@divisor,w,c
 12414  0042C0  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12415  0042C2  B4D8               	btfsc	status,2,c
 12416  0042C4  D01C               	goto	i2l1321
 12417  0042C6  0E01               	movlw	1
 12418  0042C8  6E07               	movwf	i2___lwdiv@counter,c
 12419  0042CA  D004               	goto	i2l1316
 12420  0042CC  90D8               	bcf	status,0,c
 12421  0042CE  3603               	rlcf	i2___lwdiv@divisor,f,c
 12422  0042D0  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12423  0042D2  2A07               	incf	i2___lwdiv@counter,f,c
 12424  0042D4                     i2l1316:
 12425  0042D4  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12426  0042D6  D7FA               	goto	i2l1317
 12427  0042D8                     i2u284_40:
 12428  0042D8  90D8               	bcf	status,0,c
 12429  0042DA  3605               	rlcf	i2___lwdiv@quotient,f,c
 12430  0042DC  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12431  0042DE  5003               	movf	i2___lwdiv@divisor,w,c
 12432  0042E0  5C01               	subwf	i2___lwdiv@dividend,w,c
 12433  0042E2  5004               	movf	i2___lwdiv@divisor+1,w,c
 12434  0042E4  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12435  0042E6  A0D8               	btfss	status,0,c
 12436  0042E8  D005               	goto	i2l1320
 12437  0042EA  5003               	movf	i2___lwdiv@divisor,w,c
 12438  0042EC  5E01               	subwf	i2___lwdiv@dividend,f,c
 12439  0042EE  5004               	movf	i2___lwdiv@divisor+1,w,c
 12440  0042F0  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12441  0042F2  8005               	bsf	i2___lwdiv@quotient,0,c
 12442  0042F4                     i2l1320:
 12443  0042F4  90D8               	bcf	status,0,c
 12444  0042F6  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12445  0042F8  3203               	rrcf	i2___lwdiv@divisor,f,c
 12446  0042FA  2E07               	decfsz	i2___lwdiv@counter,f,c
 12447  0042FC  D7ED               	goto	i2u284_40
 12448  0042FE                     i2l1321:
 12449  0042FE  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12450  004302  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12451  004306  0012               	return		;funcret
 12452  004308                     __end_ofi2___lwdiv:
 12453                           	opt stack 0
 12454                           pclatu	equ	0xFFB
 12455                           pclath	equ	0xFFA
 12456                           tblptru	equ	0xFF8
 12457                           tblptrh	equ	0xFF7
 12458                           tblptrl	equ	0xFF6
 12459                           tablat	equ	0xFF5
 12460                           prodh	equ	0xFF4
 12461                           prodl	equ	0xFF3
 12462                           intcon	equ	0xFF2
 12463                           intcon3	equ	0xFF0
 12464                           indf0	equ	0xFEF
 12465                           postinc0	equ	0xFEE
 12466                           fsr0h	equ	0xFEA
 12467                           fsr0l	equ	0xFE9
 12468                           wreg	equ	0xFE8
 12469                           postdec1	equ	0xFE5
 12470                           fsr1h	equ	0xFE2
 12471                           fsr1l	equ	0xFE1
 12472                           indf2	equ	0xFDF
 12473                           postinc2	equ	0xFDE
 12474                           postdec2	equ	0xFDD
 12475                           fsr2h	equ	0xFDA
 12476                           fsr2l	equ	0xFD9
 12477                           status	equ	0xFD8
 12478                           
 12479 ;; *************** function i2_initLCD *****************
 12480 ;; Defined at:
 12481 ;;		line 60 in file "lcd.c"
 12482 ;; Parameters:    Size  Location     Type
 12483 ;;		None
 12484 ;; Auto vars:     Size  Location     Type
 12485 ;;		None
 12486 ;; Return value:  Size  Location     Type
 12487 ;;                  1    wreg      void 
 12488 ;; Registers used:
 12489 ;;		wreg, status,2, status,0, cstack
 12490 ;; Tracked objects:
 12491 ;;		On entry : 0/0
 12492 ;;		On exit  : 0/0
 12493 ;;		Unchanged: 0/0
 12494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12497 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12499 ;;Total ram usage:        1 bytes
 12500 ;; Hardware stack levels used:    1
 12501 ;; Hardware stack levels required when called:    2
 12502 ;; This function calls:
 12503 ;;		i2_lcdInst
 12504 ;; This function is called by:
 12505 ;;		_interruptHandler
 12506 ;; This function uses a non-reentrant model
 12507 ;;
 12508                           
 12509                           	psect	text30
 12510  004354                     __ptext30:
 12511                           	opt stack 0
 12512  004354                     i2_initLCD:
 12513                           	opt stack 24
 12514                           
 12515                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
 12516                           
 12517                           ;incstack = 0
 12518  004354  0EC3               	movlw	195
 12519  004356  6E04               	movwf	??i2_initLCD& (0+255),c
 12520  004358  0ECD               	movlw	205
 12521  00435A                     i2u597_47:
 12522  00435A  2EE8               	decfsz	wreg,f,c
 12523  00435C  D7FE               	bra	i2u597_47
 12524  00435E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12525  004360  D7FC               	bra	i2u597_47
 12526  004362  F000               	nop	
 12527                           
 12528                           ;lcd.c: 69: lcdInst(0b00110011);
 12529  004364  0E33               	movlw	51
 12530  004366  EC47  F023         	call	i2_lcdInst
 12531                           
 12532                           ;lcd.c: 70: lcdInst(0b00110010);
 12533  00436A  0E32               	movlw	50
 12534  00436C  EC47  F023         	call	i2_lcdInst
 12535                           
 12536                           ;lcd.c: 71: lcdInst(0b00101000);
 12537  004370  0E28               	movlw	40
 12538  004372  EC47  F023         	call	i2_lcdInst
 12539                           
 12540                           ;lcd.c: 72: lcdInst(0b00001111);
 12541  004376  0E0F               	movlw	15
 12542  004378  EC47  F023         	call	i2_lcdInst
 12543                           
 12544                           ;lcd.c: 73: lcdInst(0b00000110);
 12545  00437C  0E06               	movlw	6
 12546  00437E  EC47  F023         	call	i2_lcdInst
 12547                           
 12548                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12549  004382  0E01               	movlw	1
 12550  004384  EC47  F023         	call	i2_lcdInst
 12551  004388  0EC3               	movlw	195
 12552  00438A  6E04               	movwf	??i2_initLCD& (0+255),c
 12553  00438C  0ECD               	movlw	205
 12554  00438E                     i2u598_47:
 12555  00438E  2EE8               	decfsz	wreg,f,c
 12556  004390  D7FE               	bra	i2u598_47
 12557  004392  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12558  004394  D7FC               	bra	i2u598_47
 12559  004396  F000               	nop	
 12560                           
 12561                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 12562  004398  0E0F               	movlw	15
 12563  00439A  EC47  F023         	call	i2_lcdInst
 12564  00439E  0012               	return		;funcret
 12565  0043A0                     __end_ofi2_initLCD:
 12566                           	opt stack 0
 12567                           pclatu	equ	0xFFB
 12568                           pclath	equ	0xFFA
 12569                           tblptru	equ	0xFF8
 12570                           tblptrh	equ	0xFF7
 12571                           tblptrl	equ	0xFF6
 12572                           tablat	equ	0xFF5
 12573                           prodh	equ	0xFF4
 12574                           prodl	equ	0xFF3
 12575                           intcon	equ	0xFF2
 12576                           intcon3	equ	0xFF0
 12577                           indf0	equ	0xFEF
 12578                           postinc0	equ	0xFEE
 12579                           fsr0h	equ	0xFEA
 12580                           fsr0l	equ	0xFE9
 12581                           wreg	equ	0xFE8
 12582                           postdec1	equ	0xFE5
 12583                           fsr1h	equ	0xFE2
 12584                           fsr1l	equ	0xFE1
 12585                           indf2	equ	0xFDF
 12586                           postinc2	equ	0xFDE
 12587                           postdec2	equ	0xFDD
 12588                           fsr2h	equ	0xFDA
 12589                           fsr2l	equ	0xFD9
 12590                           status	equ	0xFD8
 12591                           
 12592 ;; *************** function i2_lcdInst *****************
 12593 ;; Defined at:
 12594 ;;		line 11 in file "lcd.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;  data            1    wreg     unsigned char 
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;  data            1    2[COMRAM] unsigned char 
 12599 ;; Return value:  Size  Location     Type
 12600 ;;                  1    wreg      void 
 12601 ;; Registers used:
 12602 ;;		wreg, status,2, status,0, cstack
 12603 ;; Tracked objects:
 12604 ;;		On entry : 0/0
 12605 ;;		On exit  : 0/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12611 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12612 ;;Total ram usage:        1 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    1
 12615 ;; This function calls:
 12616 ;;		i2_lcdNibble
 12617 ;; This function is called by:
 12618 ;;		_interruptHandler
 12619 ;;		i2_initLCD
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           	psect	text31
 12624  00468E                     __ptext31:
 12625                           	opt stack 0
 12626  00468E                     i2_lcdInst:
 12627                           	opt stack 25
 12628                           
 12629                           ;incstack = 0
 12630                           ;i2lcdInst@data stored from wreg
 12631  00468E  6E03               	movwf	i2lcdInst@data,c
 12632                           
 12633                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 12634  004690  948C               	bcf	3980,2,c	;volatile
 12635                           
 12636                           ;lcd.c: 20: lcdNibble(data);
 12637  004692  5003               	movf	i2lcdInst@data,w,c
 12638  004694  ECE1  F01E         	call	i2_lcdNibble
 12639                           
 12640                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
 12641  004698  0EC8               	movlw	200
 12642  00469A                     i2u599_47:
 12643  00469A  D000               	nop2	
 12644  00469C  2EE8               	decfsz	wreg,f,c
 12645  00469E  D7FD               	bra	i2u599_47
 12646  0046A0  0012               	return		;funcret
 12647  0046A2                     __end_ofi2_lcdInst:
 12648                           	opt stack 0
 12649                           pclatu	equ	0xFFB
 12650                           pclath	equ	0xFFA
 12651                           tblptru	equ	0xFF8
 12652                           tblptrh	equ	0xFF7
 12653                           tblptrl	equ	0xFF6
 12654                           tablat	equ	0xFF5
 12655                           prodh	equ	0xFF4
 12656                           prodl	equ	0xFF3
 12657                           intcon	equ	0xFF2
 12658                           intcon3	equ	0xFF0
 12659                           indf0	equ	0xFEF
 12660                           postinc0	equ	0xFEE
 12661                           fsr0h	equ	0xFEA
 12662                           fsr0l	equ	0xFE9
 12663                           wreg	equ	0xFE8
 12664                           postdec1	equ	0xFE5
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function i2_lcdNibble *****************
 12675 ;; Defined at:
 12676 ;;		line 37 in file "lcd.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  data            1    wreg     unsigned char 
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;  data            1    1[COMRAM] unsigned char 
 12681 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12682 ;; Return value:  Size  Location     Type
 12683 ;;                  1    wreg      void 
 12684 ;; Registers used:
 12685 ;;		wreg, status,2, status,0
 12686 ;; Tracked objects:
 12687 ;;		On entry : 0/0
 12688 ;;		On exit  : 0/0
 12689 ;;		Unchanged: 0/0
 12690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;Total ram usage:        2 bytes
 12696 ;; Hardware stack levels used:    1
 12697 ;; This function calls:
 12698 ;;		Nothing
 12699 ;; This function is called by:
 12700 ;;		i2_lcdInst
 12701 ;;		i2_putch
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705                           	psect	text32
 12706  003DC2                     __ptext32:
 12707                           	opt stack 0
 12708  003DC2                     i2_lcdNibble:
 12709                           	opt stack 25
 12710                           
 12711                           ;incstack = 0
 12712                           ;i2lcdNibble@data stored from wreg
 12713  003DC2  6E02               	movwf	i2lcdNibble@data,c
 12714                           
 12715                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 12716  003DC4  5002               	movf	i2lcdNibble@data,w,c
 12717  003DC6  0BF0               	andlw	240
 12718  003DC8  6E01               	movwf	i2lcdNibble@temp,c
 12719                           
 12720                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 12721  003DCA  508C               	movf	3980,w,c	;volatile
 12722  003DCC  0B0F               	andlw	15
 12723  003DCE  6E8C               	movwf	3980,c	;volatile
 12724                           
 12725                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 12726  003DD0  5001               	movf	i2lcdNibble@temp,w,c
 12727  003DD2  108C               	iorwf	3980,w,c	;volatile
 12728  003DD4  6E8C               	movwf	3980,c	;volatile
 12729                           
 12730                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12731  003DD6  0E00               	movlw	0
 12732  003DD8  BEF2               	btfsc	intcon,7,c	;volatile
 12733  003DDA  0E01               	movlw	1
 12734  003DDC  0100               	movlb	0	; () banked
 12735  003DDE  6FC2               	movwf	_LCDinterruptState& (0+255),b
 12736                           
 12737                           ; BSR set to: 0
 12738  003DE0  9EF2               	bcf	intcon,7,c	;volatile
 12739                           
 12740                           ; BSR set to: 0
 12741  003DE2  868C               	bsf	3980,3,c	;volatile
 12742                           
 12743                           ; BSR set to: 0
 12744  003DE4  0E53               	movlw	83
 12745  003DE6                     i2u600_47:
 12746  003DE6  2EE8               	decfsz	wreg,f,c
 12747  003DE8  D7FE               	bra	i2u600_47
 12748  003DEA  F000               	nop	
 12749  003DEC  968C               	bcf	3980,3,c	;volatile
 12750  003DEE  0EC8               	movlw	200
 12751  003DF0                     i2u601_47:
 12752  003DF0  D000               	nop2	
 12753  003DF2  2EE8               	decfsz	wreg,f,c
 12754  003DF4  D7FD               	bra	i2u601_47
 12755  003DF6  0100               	movlb	0	; () banked
 12756  003DF8  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
 12757  003DFA  D002               	bra	i2u254_45
 12758  003DFC  9EF2               	bcf	intcon,7,c	;volatile
 12759  003DFE  D001               	bra	i2u254_46
 12760  003E00                     i2u254_45:
 12761  003E00  8EF2               	bsf	intcon,7,c	;volatile
 12762  003E02                     i2u254_46:
 12763                           
 12764                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 12765  003E02  3802               	swapf	i2lcdNibble@data,w,c
 12766  003E04  0BF0               	andlw	240
 12767  003E06  6E02               	movwf	i2lcdNibble@data,c
 12768                           
 12769                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 12770  003E08  5002               	movf	i2lcdNibble@data,w,c
 12771  003E0A  0BF0               	andlw	240
 12772  003E0C  6E01               	movwf	i2lcdNibble@temp,c
 12773                           
 12774                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 12775  003E0E  508C               	movf	3980,w,c	;volatile
 12776  003E10  0B0F               	andlw	15
 12777  003E12  6E8C               	movwf	3980,c	;volatile
 12778                           
 12779                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 12780  003E14  5001               	movf	i2lcdNibble@temp,w,c
 12781  003E16  108C               	iorwf	3980,w,c	;volatile
 12782  003E18  6E8C               	movwf	3980,c	;volatile
 12783                           
 12784                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12785  003E1A  0E00               	movlw	0
 12786  003E1C  BEF2               	btfsc	intcon,7,c	;volatile
 12787  003E1E  0E01               	movlw	1
 12788  003E20  0100               	movlb	0	; () banked
 12789  003E22  6FC2               	movwf	_LCDinterruptState& (0+255),b
 12790                           
 12791                           ; BSR set to: 0
 12792  003E24  9EF2               	bcf	intcon,7,c	;volatile
 12793                           
 12794                           ; BSR set to: 0
 12795  003E26  868C               	bsf	3980,3,c	;volatile
 12796                           
 12797                           ; BSR set to: 0
 12798  003E28  0E53               	movlw	83
 12799  003E2A                     i2u602_47:
 12800  003E2A  2EE8               	decfsz	wreg,f,c
 12801  003E2C  D7FE               	bra	i2u602_47
 12802  003E2E  F000               	nop	
 12803  003E30  968C               	bcf	3980,3,c	;volatile
 12804  003E32  0EC8               	movlw	200
 12805  003E34                     i2u603_47:
 12806  003E34  D000               	nop2	
 12807  003E36  2EE8               	decfsz	wreg,f,c
 12808  003E38  D7FD               	bra	i2u603_47
 12809  003E3A  0100               	movlb	0	; () banked
 12810  003E3C  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
 12811  003E3E  D002               	bra	i2u255_45
 12812  003E40  9EF2               	bcf	intcon,7,c	;volatile
 12813  003E42  D001               	bra	i2u255_46
 12814  003E44                     i2u255_45:
 12815  003E44  8EF2               	bsf	intcon,7,c	;volatile
 12816  003E46                     i2u255_46:
 12817  003E46  0012               	return		;funcret
 12818  003E48                     __end_ofi2_lcdNibble:
 12819                           	opt stack 0
 12820                           pclatu	equ	0xFFB
 12821                           pclath	equ	0xFFA
 12822                           tblptru	equ	0xFF8
 12823                           tblptrh	equ	0xFF7
 12824                           tblptrl	equ	0xFF6
 12825                           tablat	equ	0xFF5
 12826                           prodh	equ	0xFF4
 12827                           prodl	equ	0xFF3
 12828                           intcon	equ	0xFF2
 12829                           intcon3	equ	0xFF0
 12830                           indf0	equ	0xFEF
 12831                           postinc0	equ	0xFEE
 12832                           fsr0h	equ	0xFEA
 12833                           fsr0l	equ	0xFE9
 12834                           wreg	equ	0xFE8
 12835                           postdec1	equ	0xFE5
 12836                           fsr1h	equ	0xFE2
 12837                           fsr1l	equ	0xFE1
 12838                           indf2	equ	0xFDF
 12839                           postinc2	equ	0xFDE
 12840                           postdec2	equ	0xFDD
 12841                           fsr2h	equ	0xFDA
 12842                           fsr2l	equ	0xFD9
 12843                           status	equ	0xFD8
 12844                           
 12845 ;; *************** function i2_generate_compartment_array *****************
 12846 ;; Defined at:
 12847 ;;		line 220 in file "keypad.c"
 12848 ;; Parameters:    Size  Location     Type
 12849 ;;  step            2    0[COMRAM] int 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;		None
 12852 ;; Return value:  Size  Location     Type
 12853 ;;                  1    wreg      void 
 12854 ;; Registers used:
 12855 ;;		wreg, status,2, status,0
 12856 ;; Tracked objects:
 12857 ;;		On entry : 0/0
 12858 ;;		On exit  : 0/0
 12859 ;;		Unchanged: 0/0
 12860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;Total ram usage:        4 bytes
 12866 ;; Hardware stack levels used:    1
 12867 ;; This function calls:
 12868 ;;		Nothing
 12869 ;; This function is called by:
 12870 ;;		_interruptHandler
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           	psect	text33
 12875  003416                     __ptext33:
 12876                           	opt stack 0
 12877  003416                     i2_generate_compartment_array:
 12878                           	opt stack 26
 12879                           
 12880                           ;keypad.c: 222: switch(step){
 12881                           
 12882                           ;incstack = 0
 12883  003416  D11C               	goto	i2l772
 12884  003418                     
 12885                           ;keypad.c: 224: compartment_array[1] = 1;
 12886  003418  0E00               	movlw	0
 12887  00341A  0100               	movlb	0	; () banked
 12888  00341C  6F83               	movwf	(_compartment_array+3)& (0+255),b
 12889  00341E  0E01               	movlw	1
 12890  003420  6F82               	movwf	(_compartment_array+2)& (0+255),b
 12891                           
 12892                           ;keypad.c: 225: compartment_array[3] = 1;
 12893  003422  0E00               	movlw	0
 12894  003424  6F87               	movwf	(_compartment_array+7)& (0+255),b
 12895  003426  0E01               	movlw	1
 12896  003428  6F86               	movwf	(_compartment_array+6)& (0+255),b
 12897                           
 12898                           ;keypad.c: 226: compartment_array[5] = 1;
 12899  00342A  0E00               	movlw	0
 12900  00342C  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 12901  00342E  0E01               	movlw	1
 12902  003430  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 12903                           
 12904                           ;keypad.c: 227: compartment_array[7] = 1;
 12905  003432  0E00               	movlw	0
 12906  003434  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 12907  003436  0E01               	movlw	1
 12908  003438  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 12909                           
 12910                           ;keypad.c: 230: compartment_number[0] = 1;
 12911  00343A  0E00               	movlw	0
 12912  00343C  6E47               	movwf	_compartment_number+1,c
 12913  00343E  0E01               	movlw	1
 12914  003440  6E46               	movwf	_compartment_number,c
 12915                           
 12916                           ;keypad.c: 231: compartment_number[1] = 3;
 12917  003442  0E00               	movlw	0
 12918  003444  6E49               	movwf	_compartment_number+3,c
 12919  003446  0E03               	movlw	3
 12920  003448  6E48               	movwf	_compartment_number+2,c
 12921                           
 12922                           ;keypad.c: 232: compartment_number[2] = 5;
 12923  00344A  0E00               	movlw	0
 12924  00344C  6E4B               	movwf	_compartment_number+5,c
 12925  00344E  0E05               	movlw	5
 12926  003450  6E4A               	movwf	_compartment_number+4,c
 12927                           
 12928                           ;keypad.c: 233: compartment_number[3] = 7;
 12929  003452  0E00               	movlw	0
 12930  003454  6E4D               	movwf	_compartment_number+7,c
 12931  003456  0E07               	movlw	7
 12932  003458  6E4C               	movwf	_compartment_number+6,c
 12933                           
 12934                           ;keypad.c: 235: break;
 12935  00345A  0012               	return	
 12936  00345C                     
 12937                           ;keypad.c: 237: compartment_array[0] = 1;
 12938                           
 12939                           ; BSR set to: 0
 12940  00345C  0E00               	movlw	0
 12941  00345E  0100               	movlb	0	; () banked
 12942  003460  6F81               	movwf	(_compartment_array+1)& (0+255),b
 12943  003462  0E01               	movlw	1
 12944  003464  6F80               	movwf	_compartment_array& (0+255),b
 12945                           
 12946                           ;keypad.c: 238: compartment_array[1] = 1;
 12947  003466  0E00               	movlw	0
 12948  003468  6F83               	movwf	(_compartment_array+3)& (0+255),b
 12949  00346A  0E01               	movlw	1
 12950  00346C  6F82               	movwf	(_compartment_array+2)& (0+255),b
 12951                           
 12952                           ;keypad.c: 239: compartment_array[3] = 1;
 12953  00346E  0E00               	movlw	0
 12954  003470  6F87               	movwf	(_compartment_array+7)& (0+255),b
 12955  003472  0E01               	movlw	1
 12956  003474  6F86               	movwf	(_compartment_array+6)& (0+255),b
 12957                           
 12958                           ;keypad.c: 240: compartment_array[4] = 1;
 12959  003476  0E00               	movlw	0
 12960  003478  6F89               	movwf	(_compartment_array+9)& (0+255),b
 12961  00347A  0E01               	movlw	1
 12962  00347C  6F88               	movwf	(_compartment_array+8)& (0+255),b
 12963                           
 12964                           ;keypad.c: 241: compartment_array[6] = 1;
 12965  00347E  0E00               	movlw	0
 12966  003480  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 12967  003482  0E01               	movlw	1
 12968  003484  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 12969                           
 12970                           ;keypad.c: 245: compartment_number[0] = 0;
 12971  003486  0E00               	movlw	0
 12972  003488  6E47               	movwf	_compartment_number+1,c
 12973  00348A  0E00               	movlw	0
 12974  00348C  6E46               	movwf	_compartment_number,c
 12975                           
 12976                           ;keypad.c: 246: compartment_number[1] = 1;
 12977  00348E  0E00               	movlw	0
 12978  003490  6E49               	movwf	_compartment_number+3,c
 12979  003492  0E01               	movlw	1
 12980  003494  6E48               	movwf	_compartment_number+2,c
 12981                           
 12982                           ;keypad.c: 247: compartment_number[2] = 3;
 12983  003496  0E00               	movlw	0
 12984  003498  6E4B               	movwf	_compartment_number+5,c
 12985  00349A  0E03               	movlw	3
 12986  00349C  6E4A               	movwf	_compartment_number+4,c
 12987                           
 12988                           ;keypad.c: 248: compartment_number[3] = 4;
 12989  00349E  0E00               	movlw	0
 12990  0034A0  6E4D               	movwf	_compartment_number+7,c
 12991  0034A2  0E04               	movlw	4
 12992  0034A4  6E4C               	movwf	_compartment_number+6,c
 12993                           
 12994                           ;keypad.c: 249: compartment_number[4] = 6;
 12995  0034A6  0E00               	movlw	0
 12996  0034A8  6E4F               	movwf	_compartment_number+9,c
 12997  0034AA  0E06               	movlw	6
 12998  0034AC  6E4E               	movwf	_compartment_number+8,c
 12999                           
 13000                           ;keypad.c: 251: break;
 13001  0034AE  0012               	return	
 13002  0034B0                     
 13003                           ;keypad.c: 254: compartment_array[0] = 1;
 13004                           
 13005                           ; BSR set to: 0
 13006  0034B0  0E00               	movlw	0
 13007  0034B2  0100               	movlb	0	; () banked
 13008  0034B4  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13009  0034B6  0E01               	movlw	1
 13010  0034B8  6F80               	movwf	_compartment_array& (0+255),b
 13011                           
 13012                           ;keypad.c: 255: compartment_array[1] = 1;
 13013  0034BA  0E00               	movlw	0
 13014  0034BC  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13015  0034BE  0E01               	movlw	1
 13016  0034C0  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13017                           
 13018                           ;keypad.c: 256: compartment_array[2] = 1;
 13019  0034C2  0E00               	movlw	0
 13020  0034C4  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13021  0034C6  0E01               	movlw	1
 13022  0034C8  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13023                           
 13024                           ;keypad.c: 257: compartment_array[4] = 1;
 13025  0034CA  0E00               	movlw	0
 13026  0034CC  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13027  0034CE  0E01               	movlw	1
 13028  0034D0  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13029                           
 13030                           ;keypad.c: 258: compartment_array[5] = 1;
 13031  0034D2  0E00               	movlw	0
 13032  0034D4  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13033  0034D6  0E01               	movlw	1
 13034  0034D8  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13035                           
 13036                           ;keypad.c: 259: compartment_array[6] = 1;
 13037  0034DA  0E00               	movlw	0
 13038  0034DC  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13039  0034DE  0E01               	movlw	1
 13040  0034E0  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13041                           
 13042                           ;keypad.c: 262: compartment_number[0] = 0;
 13043  0034E2  0E00               	movlw	0
 13044  0034E4  6E47               	movwf	_compartment_number+1,c
 13045  0034E6  0E00               	movlw	0
 13046  0034E8  6E46               	movwf	_compartment_number,c
 13047                           
 13048                           ;keypad.c: 263: compartment_number[1] = 1;
 13049  0034EA  0E00               	movlw	0
 13050  0034EC  6E49               	movwf	_compartment_number+3,c
 13051  0034EE  0E01               	movlw	1
 13052  0034F0  6E48               	movwf	_compartment_number+2,c
 13053                           
 13054                           ;keypad.c: 264: compartment_number[2] = 2;
 13055  0034F2  0E00               	movlw	0
 13056  0034F4  6E4B               	movwf	_compartment_number+5,c
 13057  0034F6  0E02               	movlw	2
 13058  0034F8  6E4A               	movwf	_compartment_number+4,c
 13059                           
 13060                           ;keypad.c: 265: compartment_number[3] = 4;
 13061  0034FA  0E00               	movlw	0
 13062  0034FC  6E4D               	movwf	_compartment_number+7,c
 13063  0034FE  0E04               	movlw	4
 13064  003500  6E4C               	movwf	_compartment_number+6,c
 13065                           
 13066                           ;keypad.c: 266: compartment_number[4] = 5;
 13067  003502  0E00               	movlw	0
 13068  003504  6E4F               	movwf	_compartment_number+9,c
 13069  003506  0E05               	movlw	5
 13070  003508  6E4E               	movwf	_compartment_number+8,c
 13071                           
 13072                           ;keypad.c: 267: compartment_number[5] = 6;
 13073  00350A  0E00               	movlw	0
 13074  00350C  6E51               	movwf	_compartment_number+11,c
 13075  00350E  0E06               	movlw	6
 13076  003510  6E50               	movwf	_compartment_number+10,c
 13077                           
 13078                           ;keypad.c: 269: break;
 13079  003512  0012               	return	
 13080  003514                     
 13081                           ;keypad.c: 271: compartment_array[0] = 1;
 13082                           
 13083                           ; BSR set to: 0
 13084  003514  0E00               	movlw	0
 13085  003516  0100               	movlb	0	; () banked
 13086  003518  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13087  00351A  0E01               	movlw	1
 13088  00351C  6F80               	movwf	_compartment_array& (0+255),b
 13089                           
 13090                           ;keypad.c: 272: compartment_array[1] = 1;
 13091  00351E  0E00               	movlw	0
 13092  003520  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13093  003522  0E01               	movlw	1
 13094  003524  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13095                           
 13096                           ;keypad.c: 273: compartment_array[2] = 1;
 13097  003526  0E00               	movlw	0
 13098  003528  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13099  00352A  0E01               	movlw	1
 13100  00352C  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13101                           
 13102                           ;keypad.c: 274: compartment_array[3] = 1;
 13103  00352E  0E00               	movlw	0
 13104  003530  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13105  003532  0E01               	movlw	1
 13106  003534  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13107                           
 13108                           ;keypad.c: 275: compartment_array[4] = 1;
 13109  003536  0E00               	movlw	0
 13110  003538  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13111  00353A  0E01               	movlw	1
 13112  00353C  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13113                           
 13114                           ;keypad.c: 276: compartment_array[5] = 1;
 13115  00353E  0E00               	movlw	0
 13116  003540  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13117  003542  0E01               	movlw	1
 13118  003544  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13119                           
 13120                           ;keypad.c: 277: compartment_array[6] = 1;
 13121  003546  0E00               	movlw	0
 13122  003548  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13123  00354A  0E01               	movlw	1
 13124  00354C  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13125                           
 13126                           ;keypad.c: 280: compartment_number[0] = 0;
 13127  00354E  0E00               	movlw	0
 13128  003550  6E47               	movwf	_compartment_number+1,c
 13129  003552  0E00               	movlw	0
 13130  003554  6E46               	movwf	_compartment_number,c
 13131                           
 13132                           ;keypad.c: 281: compartment_number[1] = 1;
 13133  003556  0E00               	movlw	0
 13134  003558  6E49               	movwf	_compartment_number+3,c
 13135  00355A  0E01               	movlw	1
 13136  00355C  6E48               	movwf	_compartment_number+2,c
 13137                           
 13138                           ;keypad.c: 282: compartment_number[2] = 2;
 13139  00355E  0E00               	movlw	0
 13140  003560  6E4B               	movwf	_compartment_number+5,c
 13141  003562  0E02               	movlw	2
 13142  003564  6E4A               	movwf	_compartment_number+4,c
 13143                           
 13144                           ;keypad.c: 283: compartment_number[3] = 3;
 13145  003566  0E00               	movlw	0
 13146  003568  6E4D               	movwf	_compartment_number+7,c
 13147  00356A  0E03               	movlw	3
 13148  00356C  6E4C               	movwf	_compartment_number+6,c
 13149                           
 13150                           ;keypad.c: 284: compartment_number[4] = 4;
 13151  00356E  0E00               	movlw	0
 13152  003570  6E4F               	movwf	_compartment_number+9,c
 13153  003572  0E04               	movlw	4
 13154  003574  6E4E               	movwf	_compartment_number+8,c
 13155                           
 13156                           ;keypad.c: 285: compartment_number[5] = 5;
 13157  003576  0E00               	movlw	0
 13158  003578  6E51               	movwf	_compartment_number+11,c
 13159  00357A  0E05               	movlw	5
 13160  00357C  6E50               	movwf	_compartment_number+10,c
 13161                           
 13162                           ;keypad.c: 286: compartment_number[6] = 6;
 13163  00357E  0E00               	movlw	0
 13164  003580  6E53               	movwf	_compartment_number+13,c
 13165  003582  0E06               	movlw	6
 13166  003584  6E52               	movwf	_compartment_number+12,c
 13167                           
 13168                           ;keypad.c: 288: break;
 13169  003586  0012               	return	
 13170  003588                     
 13171                           ;keypad.c: 290: compartment_array[0] = 1;
 13172                           
 13173                           ; BSR set to: 0
 13174  003588  0E00               	movlw	0
 13175  00358A  0100               	movlb	0	; () banked
 13176  00358C  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13177  00358E  0E01               	movlw	1
 13178  003590  6F80               	movwf	_compartment_array& (0+255),b
 13179                           
 13180                           ;keypad.c: 291: compartment_array[1] = 1;
 13181  003592  0E00               	movlw	0
 13182  003594  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13183  003596  0E01               	movlw	1
 13184  003598  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13185                           
 13186                           ;keypad.c: 292: compartment_array[2] = 1;
 13187  00359A  0E00               	movlw	0
 13188  00359C  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13189  00359E  0E01               	movlw	1
 13190  0035A0  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13191                           
 13192                           ;keypad.c: 293: compartment_array[3] = 1;
 13193  0035A2  0E00               	movlw	0
 13194  0035A4  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13195  0035A6  0E01               	movlw	1
 13196  0035A8  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13197                           
 13198                           ;keypad.c: 294: compartment_array[4] = 1;
 13199  0035AA  0E00               	movlw	0
 13200  0035AC  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13201  0035AE  0E01               	movlw	1
 13202  0035B0  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13203                           
 13204                           ;keypad.c: 295: compartment_array[5] = 1;
 13205  0035B2  0E00               	movlw	0
 13206  0035B4  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13207  0035B6  0E01               	movlw	1
 13208  0035B8  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13209                           
 13210                           ;keypad.c: 296: compartment_array[6] = 1;
 13211  0035BA  0E00               	movlw	0
 13212  0035BC  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13213  0035BE  0E01               	movlw	1
 13214  0035C0  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13215                           
 13216                           ;keypad.c: 297: compartment_array[7] = 1;
 13217  0035C2  0E00               	movlw	0
 13218  0035C4  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13219  0035C6  0E01               	movlw	1
 13220  0035C8  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13221                           
 13222                           ;keypad.c: 300: compartment_number[0] = 0;
 13223  0035CA  0E00               	movlw	0
 13224  0035CC  6E47               	movwf	_compartment_number+1,c
 13225  0035CE  0E00               	movlw	0
 13226  0035D0  6E46               	movwf	_compartment_number,c
 13227                           
 13228                           ;keypad.c: 301: compartment_number[1] = 1;
 13229  0035D2  0E00               	movlw	0
 13230  0035D4  6E49               	movwf	_compartment_number+3,c
 13231  0035D6  0E01               	movlw	1
 13232  0035D8  6E48               	movwf	_compartment_number+2,c
 13233                           
 13234                           ;keypad.c: 302: compartment_number[2] = 2;
 13235  0035DA  0E00               	movlw	0
 13236  0035DC  6E4B               	movwf	_compartment_number+5,c
 13237  0035DE  0E02               	movlw	2
 13238  0035E0  6E4A               	movwf	_compartment_number+4,c
 13239                           
 13240                           ;keypad.c: 303: compartment_number[3] = 3;
 13241  0035E2  0E00               	movlw	0
 13242  0035E4  6E4D               	movwf	_compartment_number+7,c
 13243  0035E6  0E03               	movlw	3
 13244  0035E8  6E4C               	movwf	_compartment_number+6,c
 13245                           
 13246                           ;keypad.c: 304: compartment_number[4] = 4;
 13247  0035EA  0E00               	movlw	0
 13248  0035EC  6E4F               	movwf	_compartment_number+9,c
 13249  0035EE  0E04               	movlw	4
 13250  0035F0  6E4E               	movwf	_compartment_number+8,c
 13251                           
 13252                           ;keypad.c: 305: compartment_number[5] = 5;
 13253  0035F2  0E00               	movlw	0
 13254  0035F4  6E51               	movwf	_compartment_number+11,c
 13255  0035F6  0E05               	movlw	5
 13256  0035F8  6E50               	movwf	_compartment_number+10,c
 13257                           
 13258                           ;keypad.c: 306: compartment_number[6] = 6;
 13259  0035FA  0E00               	movlw	0
 13260  0035FC  6E53               	movwf	_compartment_number+13,c
 13261  0035FE  0E06               	movlw	6
 13262  003600  6E52               	movwf	_compartment_number+12,c
 13263                           
 13264                           ;keypad.c: 307: compartment_number[7] = 7;
 13265  003602  0E00               	movlw	0
 13266  003604  6E55               	movwf	_compartment_number+15,c
 13267  003606  0E07               	movlw	7
 13268  003608  6E54               	movwf	_compartment_number+14,c
 13269                           
 13270                           ;keypad.c: 309: break;
 13271  00360A  0012               	return	
 13272  00360C                     
 13273                           ;keypad.c: 311: compartment_array[0] = 0;
 13274                           
 13275                           ; BSR set to: 0
 13276  00360C  0E00               	movlw	0
 13277  00360E  0100               	movlb	0	; () banked
 13278  003610  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13279  003612  0E00               	movlw	0
 13280  003614  6F80               	movwf	_compartment_array& (0+255),b
 13281                           
 13282                           ;keypad.c: 312: compartment_array[1] = 0;
 13283  003616  0E00               	movlw	0
 13284  003618  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13285  00361A  0E00               	movlw	0
 13286  00361C  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13287                           
 13288                           ;keypad.c: 313: compartment_array[2] = 0;
 13289  00361E  0E00               	movlw	0
 13290  003620  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13291  003622  0E00               	movlw	0
 13292  003624  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13293                           
 13294                           ;keypad.c: 314: compartment_array[3] = 0;
 13295  003626  0E00               	movlw	0
 13296  003628  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13297  00362A  0E00               	movlw	0
 13298  00362C  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13299                           
 13300                           ;keypad.c: 315: compartment_array[4] = 0;
 13301  00362E  0E00               	movlw	0
 13302  003630  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13303  003632  0E00               	movlw	0
 13304  003634  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13305                           
 13306                           ;keypad.c: 316: compartment_array[5] = 0;
 13307  003636  0E00               	movlw	0
 13308  003638  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13309  00363A  0E00               	movlw	0
 13310  00363C  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13311                           
 13312                           ;keypad.c: 317: compartment_array[6] = 0;
 13313  00363E  0E00               	movlw	0
 13314  003640  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13315  003642  0E00               	movlw	0
 13316  003644  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13317                           
 13318                           ;keypad.c: 318: compartment_array[7] = 0;
 13319  003646  0E00               	movlw	0
 13320  003648  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13321  00364A  0E00               	movlw	0
 13322  00364C  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13323                           
 13324                           ;keypad.c: 320: }
 13325  00364E  0012               	return	
 13326  003650                     i2l772:
 13327                           
 13328                           ; BSR set to: 0
 13329  003650  C001  F003         	movff	i2generate_compartment_array@step,??i2_generate_compartment_array
 13330  003654  C002  F004         	movff	i2generate_compartment_array@step+1,??i2_generate_compartment_array+1
 13331                           
 13332                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13333                           ; Switch size 1, requested type "space"
 13334                           ; Number of cases is 1, Range of values is 0 to 0
 13335                           ; switch strategies available:
 13336                           ; Name         Instructions Cycles
 13337                           ; simple_byte            4     3 (average)
 13338                           ;	Chosen strategy is simple_byte
 13339  003658  5004               	movf	??i2_generate_compartment_array+1,w,c
 13340  00365A  0A00               	xorlw	0	; case 0
 13341  00365C  A4D8               	btfss	status,2,c
 13342  00365E  D7D6               	goto	i2l779
 13343                           
 13344                           ; Switch size 1, requested type "space"
 13345                           ; Number of cases is 5, Range of values is 4 to 8
 13346                           ; switch strategies available:
 13347                           ; Name         Instructions Cycles
 13348                           ; simple_byte           16     9 (average)
 13349                           ;	Chosen strategy is simple_byte
 13350  003660  5003               	movf	??i2_generate_compartment_array,w,c
 13351  003662  0A04               	xorlw	4	; case 4
 13352  003664  B4D8               	btfsc	status,2,c
 13353  003666  D6D8               	goto	i2l773
 13354  003668  0A01               	xorlw	1	; case 5
 13355  00366A  B4D8               	btfsc	status,2,c
 13356  00366C  D6F7               	goto	i2l775
 13357  00366E  0A03               	xorlw	3	; case 6
 13358  003670  B4D8               	btfsc	status,2,c
 13359  003672  D71E               	goto	i2l776
 13360  003674  0A01               	xorlw	1	; case 7
 13361  003676  B4D8               	btfsc	status,2,c
 13362  003678  D74D               	goto	i2l777
 13363  00367A  0A0F               	xorlw	15	; case 8
 13364  00367C  B4D8               	btfsc	status,2,c
 13365  00367E  D784               	goto	i2l778
 13366  003680  D7C5               	goto	i2l779
 13367  003682                     __end_ofi2_generate_compartment_array:
 13368                           	opt stack 0
 13369                           pclatu	equ	0xFFB
 13370                           pclath	equ	0xFFA
 13371                           tblptru	equ	0xFF8
 13372                           tblptrh	equ	0xFF7
 13373                           tblptrl	equ	0xFF6
 13374                           tablat	equ	0xFF5
 13375                           prodh	equ	0xFF4
 13376                           prodl	equ	0xFF3
 13377                           intcon	equ	0xFF2
 13378                           intcon3	equ	0xFF0
 13379                           indf0	equ	0xFEF
 13380                           postinc0	equ	0xFEE
 13381                           fsr0h	equ	0xFEA
 13382                           fsr0l	equ	0xFE9
 13383                           wreg	equ	0xFE8
 13384                           postdec1	equ	0xFE5
 13385                           fsr1h	equ	0xFE2
 13386                           fsr1l	equ	0xFE1
 13387                           indf2	equ	0xFDF
 13388                           postinc2	equ	0xFDE
 13389                           postdec2	equ	0xFDD
 13390                           fsr2h	equ	0xFDA
 13391                           fsr2l	equ	0xFD9
 13392                           status	equ	0xFD8
 13393                           
 13394 ;; *************** function i2___awdiv *****************
 13395 ;; Defined at:
 13396 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 13397 ;; Parameters:    Size  Location     Type
 13398 ;;  dividend        2    0[COMRAM] int 
 13399 ;;  divisor         2    2[COMRAM] int 
 13400 ;; Auto vars:     Size  Location     Type
 13401 ;;  __awdiv         2    6[COMRAM] int 
 13402 ;;  __awdiv         1    5[COMRAM] unsigned char 
 13403 ;;  __awdiv         1    4[COMRAM] unsigned char 
 13404 ;; Return value:  Size  Location     Type
 13405 ;;                  2    0[COMRAM] int 
 13406 ;; Registers used:
 13407 ;;		wreg, status,2, status,0
 13408 ;; Tracked objects:
 13409 ;;		On entry : 0/0
 13410 ;;		On exit  : 0/0
 13411 ;;		Unchanged: 0/0
 13412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13414 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13416 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13417 ;;Total ram usage:        8 bytes
 13418 ;; Hardware stack levels used:    1
 13419 ;; This function calls:
 13420 ;;		Nothing
 13421 ;; This function is called by:
 13422 ;;		_interruptHandler
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426                           	psect	text34
 13427  003F52                     __ptext34:
 13428                           	opt stack 0
 13429  003F52                     i2___awdiv:
 13430                           	opt stack 26
 13431                           
 13432                           ;incstack = 0
 13433  003F52  0E00               	movlw	0
 13434  003F54  6E06               	movwf	i2___awdiv@sign,c
 13435  003F56  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13436  003F58  D006               	goto	i2l1075
 13437  003F5A  6C03               	negf	i2___awdiv@divisor,c
 13438  003F5C  1E04               	comf	i2___awdiv@divisor+1,f,c
 13439  003F5E  B0D8               	btfsc	status,0,c
 13440  003F60  2A04               	incf	i2___awdiv@divisor+1,f,c
 13441  003F62  0E01               	movlw	1
 13442  003F64  6E06               	movwf	i2___awdiv@sign,c
 13443  003F66                     i2l1075:
 13444  003F66  AE02               	btfss	i2___awdiv@dividend+1,7,c
 13445  003F68  D006               	goto	i2l1076
 13446  003F6A  6C01               	negf	i2___awdiv@dividend,c
 13447  003F6C  1E02               	comf	i2___awdiv@dividend+1,f,c
 13448  003F6E  B0D8               	btfsc	status,0,c
 13449  003F70  2A02               	incf	i2___awdiv@dividend+1,f,c
 13450  003F72  0E01               	movlw	1
 13451  003F74  1A06               	xorwf	i2___awdiv@sign,f,c
 13452  003F76                     i2l1076:
 13453  003F76  0E00               	movlw	0
 13454  003F78  6E08               	movwf	i2___awdiv@quotient+1,c
 13455  003F7A  0E00               	movlw	0
 13456  003F7C  6E07               	movwf	i2___awdiv@quotient,c
 13457  003F7E  5003               	movf	i2___awdiv@divisor,w,c
 13458  003F80  1004               	iorwf	i2___awdiv@divisor+1,w,c
 13459  003F82  B4D8               	btfsc	status,2,c
 13460  003F84  D01C               	goto	i2l1083
 13461  003F86  0E01               	movlw	1
 13462  003F88  6E05               	movwf	i2___awdiv@counter,c
 13463  003F8A  D004               	goto	i2l1078
 13464  003F8C  90D8               	bcf	status,0,c
 13465  003F8E  3603               	rlcf	i2___awdiv@divisor,f,c
 13466  003F90  3604               	rlcf	i2___awdiv@divisor+1,f,c
 13467  003F92  2A05               	incf	i2___awdiv@counter,f,c
 13468  003F94                     i2l1078:
 13469  003F94  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13470  003F96  D7FA               	goto	i2l1079
 13471  003F98                     i2u400_40:
 13472  003F98  90D8               	bcf	status,0,c
 13473  003F9A  3607               	rlcf	i2___awdiv@quotient,f,c
 13474  003F9C  3608               	rlcf	i2___awdiv@quotient+1,f,c
 13475  003F9E  5003               	movf	i2___awdiv@divisor,w,c
 13476  003FA0  5C01               	subwf	i2___awdiv@dividend,w,c
 13477  003FA2  5004               	movf	i2___awdiv@divisor+1,w,c
 13478  003FA4  5802               	subwfb	i2___awdiv@dividend+1,w,c
 13479  003FA6  A0D8               	btfss	status,0,c
 13480  003FA8  D005               	goto	i2l1082
 13481  003FAA  5003               	movf	i2___awdiv@divisor,w,c
 13482  003FAC  5E01               	subwf	i2___awdiv@dividend,f,c
 13483  003FAE  5004               	movf	i2___awdiv@divisor+1,w,c
 13484  003FB0  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 13485  003FB2  8007               	bsf	i2___awdiv@quotient,0,c
 13486  003FB4                     i2l1082:
 13487  003FB4  90D8               	bcf	status,0,c
 13488  003FB6  3204               	rrcf	i2___awdiv@divisor+1,f,c
 13489  003FB8  3203               	rrcf	i2___awdiv@divisor,f,c
 13490  003FBA  2E05               	decfsz	i2___awdiv@counter,f,c
 13491  003FBC  D7ED               	goto	i2u400_40
 13492  003FBE                     i2l1083:
 13493  003FBE  5006               	movf	i2___awdiv@sign,w,c
 13494  003FC0  B4D8               	btfsc	status,2,c
 13495  003FC2  D004               	goto	i2l1084
 13496  003FC4  6C07               	negf	i2___awdiv@quotient,c
 13497  003FC6  1E08               	comf	i2___awdiv@quotient+1,f,c
 13498  003FC8  B0D8               	btfsc	status,0,c
 13499  003FCA  2A08               	incf	i2___awdiv@quotient+1,f,c
 13500  003FCC                     i2l1084:
 13501  003FCC  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 13502  003FD0  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 13503  003FD4  0012               	return	
 13504  003FD6                     __end_ofi2___awdiv:
 13505                           	opt stack 0
 13506                           pclatu	equ	0xFFB
 13507                           pclath	equ	0xFFA
 13508                           tblptru	equ	0xFF8
 13509                           tblptrh	equ	0xFF7
 13510                           tblptrl	equ	0xFF6
 13511                           tablat	equ	0xFF5
 13512                           prodh	equ	0xFF4
 13513                           prodl	equ	0xFF3
 13514                           intcon	equ	0xFF2
 13515                           intcon3	equ	0xFF0
 13516                           indf0	equ	0xFEF
 13517                           postinc0	equ	0xFEE
 13518                           fsr0h	equ	0xFEA
 13519                           fsr0l	equ	0xFE9
 13520                           wreg	equ	0xFE8
 13521                           postdec1	equ	0xFE5
 13522                           fsr1h	equ	0xFE2
 13523                           fsr1l	equ	0xFE1
 13524                           indf2	equ	0xFDF
 13525                           postinc2	equ	0xFDE
 13526                           postdec2	equ	0xFDD
 13527                           fsr2h	equ	0xFDA
 13528                           fsr2l	equ	0xFD9
 13529                           status	equ	0xFD8
 13530                           
 13531 ;; *************** function i2_I2C_Master_Write *****************
 13532 ;; Defined at:
 13533 ;;		line 108 in file "I2C.c"
 13534 ;; Parameters:    Size  Location     Type
 13535 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;		None
 13538 ;; Return value:  Size  Location     Type
 13539 ;;                  1    wreg      void 
 13540 ;; Registers used:
 13541 ;;		wreg, status,2, status,0, cstack
 13542 ;; Tracked objects:
 13543 ;;		On entry : 0/0
 13544 ;;		On exit  : 0/0
 13545 ;;		Unchanged: 0/0
 13546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13547 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13551 ;;Total ram usage:        2 bytes
 13552 ;; Hardware stack levels used:    1
 13553 ;; Hardware stack levels required when called:    1
 13554 ;; This function calls:
 13555 ;;		i2_I2C_Master_Wait
 13556 ;; This function is called by:
 13557 ;;		_interruptHandler
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           	psect	text35
 13562  0046D8                     __ptext35:
 13563                           	opt stack 0
 13564  0046D8                     i2_I2C_Master_Write:
 13565                           	opt stack 25
 13566                           
 13567                           ;I2C.c: 116: I2C_Master_Wait();
 13568                           
 13569                           ;incstack = 0
 13570  0046D8  EC51  F023         	call	i2_I2C_Master_Wait	;wreg free
 13571                           
 13572                           ;I2C.c: 117: SSPBUF = byteToWrite;
 13573  0046DC  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 13574  0046E0  0012               	return		;funcret
 13575  0046E2                     __end_ofi2_I2C_Master_Write:
 13576                           	opt stack 0
 13577                           pclatu	equ	0xFFB
 13578                           pclath	equ	0xFFA
 13579                           tblptru	equ	0xFF8
 13580                           tblptrh	equ	0xFF7
 13581                           tblptrl	equ	0xFF6
 13582                           tablat	equ	0xFF5
 13583                           prodh	equ	0xFF4
 13584                           prodl	equ	0xFF3
 13585                           intcon	equ	0xFF2
 13586                           intcon3	equ	0xFF0
 13587                           indf0	equ	0xFEF
 13588                           postinc0	equ	0xFEE
 13589                           fsr0h	equ	0xFEA
 13590                           fsr0l	equ	0xFE9
 13591                           wreg	equ	0xFE8
 13592                           postdec1	equ	0xFE5
 13593                           fsr1h	equ	0xFE2
 13594                           fsr1l	equ	0xFE1
 13595                           indf2	equ	0xFDF
 13596                           postinc2	equ	0xFDE
 13597                           postdec2	equ	0xFDD
 13598                           fsr2h	equ	0xFDA
 13599                           fsr2l	equ	0xFD9
 13600                           status	equ	0xFD8
 13601                           
 13602 ;; *************** function i2_I2C_Master_Stop *****************
 13603 ;; Defined at:
 13604 ;;		line 95 in file "I2C.c"
 13605 ;; Parameters:    Size  Location     Type
 13606 ;;		None
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;		None
 13609 ;; Return value:  Size  Location     Type
 13610 ;;                  1    wreg      void 
 13611 ;; Registers used:
 13612 ;;		wreg, status,2, status,0, cstack
 13613 ;; Tracked objects:
 13614 ;;		On entry : 0/0
 13615 ;;		On exit  : 0/0
 13616 ;;		Unchanged: 0/0
 13617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13622 ;;Total ram usage:        0 bytes
 13623 ;; Hardware stack levels used:    1
 13624 ;; Hardware stack levels required when called:    1
 13625 ;; This function calls:
 13626 ;;		i2_I2C_Master_Wait
 13627 ;; This function is called by:
 13628 ;;		_interruptHandler
 13629 ;; This function uses a non-reentrant model
 13630 ;;
 13631                           
 13632                           	psect	text36
 13633  0046F2                     __ptext36:
 13634                           	opt stack 0
 13635  0046F2                     i2_I2C_Master_Stop:
 13636                           	opt stack 25
 13637                           
 13638                           ;I2C.c: 104: I2C_Master_Wait();
 13639                           
 13640                           ;incstack = 0
 13641  0046F2  EC51  F023         	call	i2_I2C_Master_Wait	;wreg free
 13642                           
 13643                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 13644  0046F6  84C5               	bsf	4037,2,c	;volatile
 13645  0046F8  0012               	return		;funcret
 13646  0046FA                     __end_ofi2_I2C_Master_Stop:
 13647                           	opt stack 0
 13648                           pclatu	equ	0xFFB
 13649                           pclath	equ	0xFFA
 13650                           tblptru	equ	0xFF8
 13651                           tblptrh	equ	0xFF7
 13652                           tblptrl	equ	0xFF6
 13653                           tablat	equ	0xFF5
 13654                           prodh	equ	0xFF4
 13655                           prodl	equ	0xFF3
 13656                           intcon	equ	0xFF2
 13657                           intcon3	equ	0xFF0
 13658                           indf0	equ	0xFEF
 13659                           postinc0	equ	0xFEE
 13660                           fsr0h	equ	0xFEA
 13661                           fsr0l	equ	0xFE9
 13662                           wreg	equ	0xFE8
 13663                           postdec1	equ	0xFE5
 13664                           fsr1h	equ	0xFE2
 13665                           fsr1l	equ	0xFE1
 13666                           indf2	equ	0xFDF
 13667                           postinc2	equ	0xFDE
 13668                           postdec2	equ	0xFDD
 13669                           fsr2h	equ	0xFDA
 13670                           fsr2l	equ	0xFD9
 13671                           status	equ	0xFD8
 13672                           
 13673 ;; *************** function i2_I2C_Master_Start *****************
 13674 ;; Defined at:
 13675 ;;		line 69 in file "I2C.c"
 13676 ;; Parameters:    Size  Location     Type
 13677 ;;		None
 13678 ;; Auto vars:     Size  Location     Type
 13679 ;;		None
 13680 ;; Return value:  Size  Location     Type
 13681 ;;                  1    wreg      void 
 13682 ;; Registers used:
 13683 ;;		wreg, status,2, status,0, cstack
 13684 ;; Tracked objects:
 13685 ;;		On entry : 0/0
 13686 ;;		On exit  : 0/0
 13687 ;;		Unchanged: 0/0
 13688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13693 ;;Total ram usage:        0 bytes
 13694 ;; Hardware stack levels used:    1
 13695 ;; Hardware stack levels required when called:    1
 13696 ;; This function calls:
 13697 ;;		i2_I2C_Master_Wait
 13698 ;; This function is called by:
 13699 ;;		_interruptHandler
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text37
 13704  0046FA                     __ptext37:
 13705                           	opt stack 0
 13706  0046FA                     i2_I2C_Master_Start:
 13707                           	opt stack 25
 13708                           
 13709                           ;I2C.c: 78: I2C_Master_Wait();
 13710                           
 13711                           ;incstack = 0
 13712  0046FA  EC51  F023         	call	i2_I2C_Master_Wait	;wreg free
 13713                           
 13714                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 13715  0046FE  80C5               	bsf	4037,0,c	;volatile
 13716  004700  0012               	return		;funcret
 13717  004702                     __end_ofi2_I2C_Master_Start:
 13718                           	opt stack 0
 13719                           pclatu	equ	0xFFB
 13720                           pclath	equ	0xFFA
 13721                           tblptru	equ	0xFF8
 13722                           tblptrh	equ	0xFF7
 13723                           tblptrl	equ	0xFF6
 13724                           tablat	equ	0xFF5
 13725                           prodh	equ	0xFF4
 13726                           prodl	equ	0xFF3
 13727                           intcon	equ	0xFF2
 13728                           intcon3	equ	0xFF0
 13729                           indf0	equ	0xFEF
 13730                           postinc0	equ	0xFEE
 13731                           fsr0h	equ	0xFEA
 13732                           fsr0l	equ	0xFE9
 13733                           wreg	equ	0xFE8
 13734                           postdec1	equ	0xFE5
 13735                           fsr1h	equ	0xFE2
 13736                           fsr1l	equ	0xFE1
 13737                           indf2	equ	0xFDF
 13738                           postinc2	equ	0xFDE
 13739                           postdec2	equ	0xFDD
 13740                           fsr2h	equ	0xFDA
 13741                           fsr2l	equ	0xFD9
 13742                           status	equ	0xFD8
 13743                           
 13744 ;; *************** function i2_I2C_Master_Read *****************
 13745 ;; Defined at:
 13746 ;;		line 120 in file "I2C.c"
 13747 ;; Parameters:    Size  Location     Type
 13748 ;;  ackBit          1    wreg     unsigned char 
 13749 ;; Auto vars:     Size  Location     Type
 13750 ;;  ackBit          1    1[COMRAM] unsigned char 
 13751 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13752 ;; Return value:  Size  Location     Type
 13753 ;;                  1    wreg      unsigned char 
 13754 ;; Registers used:
 13755 ;;		wreg, status,2, status,0, cstack
 13756 ;; Tracked objects:
 13757 ;;		On entry : 0/0
 13758 ;;		On exit  : 0/0
 13759 ;;		Unchanged: 0/0
 13760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13762 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13764 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13765 ;;Total ram usage:        2 bytes
 13766 ;; Hardware stack levels used:    1
 13767 ;; Hardware stack levels required when called:    1
 13768 ;; This function calls:
 13769 ;;		i2_I2C_Master_Wait
 13770 ;; This function is called by:
 13771 ;;		_interruptHandler
 13772 ;; This function uses a non-reentrant model
 13773 ;;
 13774                           
 13775                           	psect	text38
 13776  0045D2                     __ptext38:
 13777                           	opt stack 0
 13778  0045D2                     i2_I2C_Master_Read:
 13779                           	opt stack 25
 13780                           
 13781                           ;incstack = 0
 13782                           ;i2I2C_Master_Read@ackBit stored from wreg
 13783  0045D2  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 13784                           
 13785                           ;I2C.c: 130: unsigned char receivedByte;
 13786                           ;I2C.c: 132: I2C_Master_Wait();
 13787  0045D4  EC51  F023         	call	i2_I2C_Master_Wait	;wreg free
 13788                           
 13789                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 13790  0045D8  86C5               	bsf	4037,3,c	;volatile
 13791                           
 13792                           ;I2C.c: 135: I2C_Master_Wait();
 13793  0045DA  EC51  F023         	call	i2_I2C_Master_Wait	;wreg free
 13794                           
 13795                           ;I2C.c: 136: receivedByte = SSPBUF;
 13796  0045DE  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 13797                           
 13798                           ;I2C.c: 138: I2C_Master_Wait();
 13799  0045E2  EC51  F023         	call	i2_I2C_Master_Wait	;wreg free
 13800                           
 13801                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 13802  0045E6  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 13803  0045E8  D002               	bra	i2u366_45
 13804  0045EA  9AC5               	bcf	4037,5,c	;volatile
 13805  0045EC  D001               	bra	i2u366_46
 13806  0045EE                     i2u366_45:
 13807  0045EE  8AC5               	bsf	4037,5,c	;volatile
 13808  0045F0                     i2u366_46:
 13809                           
 13810                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 13811  0045F0  88C5               	bsf	4037,4,c	;volatile
 13812                           
 13813                           ;I2C.c: 142: return receivedByte;
 13814  0045F2  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 13815  0045F4  0012               	return	
 13816  0045F6                     __end_ofi2_I2C_Master_Read:
 13817                           	opt stack 0
 13818                           pclatu	equ	0xFFB
 13819                           pclath	equ	0xFFA
 13820                           tblptru	equ	0xFF8
 13821                           tblptrh	equ	0xFF7
 13822                           tblptrl	equ	0xFF6
 13823                           tablat	equ	0xFF5
 13824                           prodh	equ	0xFF4
 13825                           prodl	equ	0xFF3
 13826                           intcon	equ	0xFF2
 13827                           intcon3	equ	0xFF0
 13828                           indf0	equ	0xFEF
 13829                           postinc0	equ	0xFEE
 13830                           fsr0h	equ	0xFEA
 13831                           fsr0l	equ	0xFE9
 13832                           wreg	equ	0xFE8
 13833                           postdec1	equ	0xFE5
 13834                           fsr1h	equ	0xFE2
 13835                           fsr1l	equ	0xFE1
 13836                           indf2	equ	0xFDF
 13837                           postinc2	equ	0xFDE
 13838                           postdec2	equ	0xFDD
 13839                           fsr2h	equ	0xFDA
 13840                           fsr2l	equ	0xFD9
 13841                           status	equ	0xFD8
 13842                           
 13843 ;; *************** function i2_I2C_Master_Wait *****************
 13844 ;; Defined at:
 13845 ;;		line 51 in file "I2C.c"
 13846 ;; Parameters:    Size  Location     Type
 13847 ;;		None
 13848 ;; Auto vars:     Size  Location     Type
 13849 ;;		None
 13850 ;; Return value:  Size  Location     Type
 13851 ;;                  1    wreg      void 
 13852 ;; Registers used:
 13853 ;;		wreg, status,2, status,0
 13854 ;; Tracked objects:
 13855 ;;		On entry : 0/0
 13856 ;;		On exit  : 0/0
 13857 ;;		Unchanged: 0/0
 13858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13863 ;;Total ram usage:        1 bytes
 13864 ;; Hardware stack levels used:    1
 13865 ;; This function calls:
 13866 ;;		Nothing
 13867 ;; This function is called by:
 13868 ;;		i2_I2C_Master_Start
 13869 ;;		i2_I2C_Master_Stop
 13870 ;;		i2_I2C_Master_Write
 13871 ;;		i2_I2C_Master_Read
 13872 ;; This function uses a non-reentrant model
 13873 ;;
 13874                           
 13875                           	psect	text39
 13876  0046A2                     __ptext39:
 13877                           	opt stack 0
 13878  0046A2                     i2_I2C_Master_Wait:
 13879                           	opt stack 25
 13880                           
 13881                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 13882                           
 13883                           ;incstack = 0
 13884  0046A2  B4C7               	btfsc	4039,2,c	;volatile
 13885  0046A4  D7FE               	goto	i2_I2C_Master_Wait
 13886  0046A6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13887  0046AA  0E1F               	movlw	31
 13888  0046AC  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13889  0046AE  B4D8               	btfsc	status,2,c
 13890  0046B0  0012               	return	
 13891  0046B2  D7F7               	goto	i2_I2C_Master_Wait
 13892  0046B4                     __end_ofi2_I2C_Master_Wait:
 13893                           	opt stack 0
 13894                           pclatu	equ	0xFFB
 13895                           pclath	equ	0xFFA
 13896                           tblptru	equ	0xFF8
 13897                           tblptrh	equ	0xFF7
 13898                           tblptrl	equ	0xFF6
 13899                           tablat	equ	0xFF5
 13900                           prodh	equ	0xFF4
 13901                           prodl	equ	0xFF3
 13902                           intcon	equ	0xFF2
 13903                           intcon3	equ	0xFF0
 13904                           indf0	equ	0xFEF
 13905                           postinc0	equ	0xFEE
 13906                           fsr0h	equ	0xFEA
 13907                           fsr0l	equ	0xFE9
 13908                           wreg	equ	0xFE8
 13909                           postdec1	equ	0xFE5
 13910                           fsr1h	equ	0xFE2
 13911                           fsr1l	equ	0xFE1
 13912                           indf2	equ	0xFDF
 13913                           postinc2	equ	0xFDE
 13914                           postdec2	equ	0xFDD
 13915                           fsr2h	equ	0xFDA
 13916                           fsr2l	equ	0xFD9
 13917                           status	equ	0xFD8
 13918                           
 13919 ;; *************** function i2_I2C_Master_Init *****************
 13920 ;; Defined at:
 13921 ;;		line 14 in file "I2C.c"
 13922 ;; Parameters:    Size  Location     Type
 13923 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 13924 ;; Auto vars:     Size  Location     Type
 13925 ;;		None
 13926 ;; Return value:  Size  Location     Type
 13927 ;;                  1    wreg      void 
 13928 ;; Registers used:
 13929 ;;		wreg, status,2, status,0, cstack
 13930 ;; Tracked objects:
 13931 ;;		On entry : 0/0
 13932 ;;		On exit  : 0/0
 13933 ;;		Unchanged: 0/0
 13934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13937 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13938 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13939 ;;Total ram usage:        8 bytes
 13940 ;; Hardware stack levels used:    1
 13941 ;; Hardware stack levels required when called:    1
 13942 ;; This function calls:
 13943 ;;		i2___lldiv
 13944 ;; This function is called by:
 13945 ;;		_interruptHandler
 13946 ;; This function uses a non-reentrant model
 13947 ;;
 13948                           
 13949                           	psect	text40
 13950  004206                     __ptext40:
 13951                           	opt stack 0
 13952  004206                     i2_I2C_Master_Init:
 13953                           	opt stack 25
 13954                           
 13955                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 13956                           
 13957                           ;incstack = 0
 13958  004206  9AC6               	bcf	4038,5,c	;volatile
 13959                           
 13960                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 13961  004208  8694               	bsf	3988,3,c	;volatile
 13962                           
 13963                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 13964  00420A  8894               	bsf	3988,4,c	;volatile
 13965                           
 13966                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 13967  00420C  0E80               	movlw	128
 13968  00420E  6EC7               	movwf	4039,c	;volatile
 13969                           
 13970                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 13971  004210  0E28               	movlw	40
 13972  004212  6EC6               	movwf	4038,c	;volatile
 13973                           
 13974                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 13975  004214  0E00               	movlw	0
 13976  004216  6EC5               	movwf	4037,c	;volatile
 13977                           
 13978                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 13979  004218  0E00               	movlw	0
 13980  00421A  6E01               	movwf	i2___lldiv@dividend,c
 13981  00421C  0E5A               	movlw	90
 13982  00421E  6E02               	movwf	i2___lldiv@dividend+1,c
 13983  004220  0E62               	movlw	98
 13984  004222  6E03               	movwf	i2___lldiv@dividend+2,c
 13985  004224  0E02               	movlw	2
 13986  004226  6E04               	movwf	i2___lldiv@dividend+3,c
 13987  004228  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 13988  00422C  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 13989  004230  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 13990  004234  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 13991  004238  0E02               	movlw	2
 13992  00423A                     i2u365_45:
 13993  00423A  90D8               	bcf	status,0,c
 13994  00423C  3612               	rlcf	??i2_I2C_Master_Init,f,c
 13995  00423E  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 13996  004240  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 13997  004242  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 13998  004244  2EE8               	decfsz	wreg,f,c
 13999  004246  D7F9               	goto	i2u365_45
 14000  004248  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 14001  00424C  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 14002  004250  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 14003  004254  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 14004  004258  ECEB  F01F         	call	i2___lldiv	;wreg free
 14005  00425C  0401               	decf	?i2___lldiv,w,c
 14006  00425E  6EC8               	movwf	4040,c	;volatile
 14007  004260  0012               	return		;funcret
 14008  004262                     __end_ofi2_I2C_Master_Init:
 14009                           	opt stack 0
 14010                           pclatu	equ	0xFFB
 14011                           pclath	equ	0xFFA
 14012                           tblptru	equ	0xFF8
 14013                           tblptrh	equ	0xFF7
 14014                           tblptrl	equ	0xFF6
 14015                           tablat	equ	0xFF5
 14016                           prodh	equ	0xFF4
 14017                           prodl	equ	0xFF3
 14018                           intcon	equ	0xFF2
 14019                           intcon3	equ	0xFF0
 14020                           indf0	equ	0xFEF
 14021                           postinc0	equ	0xFEE
 14022                           fsr0h	equ	0xFEA
 14023                           fsr0l	equ	0xFE9
 14024                           wreg	equ	0xFE8
 14025                           postdec1	equ	0xFE5
 14026                           fsr1h	equ	0xFE2
 14027                           fsr1l	equ	0xFE1
 14028                           indf2	equ	0xFDF
 14029                           postinc2	equ	0xFDE
 14030                           postdec2	equ	0xFDD
 14031                           fsr2h	equ	0xFDA
 14032                           fsr2l	equ	0xFD9
 14033                           status	equ	0xFD8
 14034                           
 14035 ;; *************** function i2___lldiv *****************
 14036 ;; Defined at:
 14037 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 14038 ;; Parameters:    Size  Location     Type
 14039 ;;  dividend        4    0[COMRAM] unsigned long 
 14040 ;;  divisor         4    4[COMRAM] unsigned long 
 14041 ;; Auto vars:     Size  Location     Type
 14042 ;;  __lldiv         4    8[COMRAM] unsigned long 
 14043 ;;  __lldiv         1   12[COMRAM] unsigned char 
 14044 ;; Return value:  Size  Location     Type
 14045 ;;                  4    0[COMRAM] unsigned long 
 14046 ;; Registers used:
 14047 ;;		wreg, status,2, status,0
 14048 ;; Tracked objects:
 14049 ;;		On entry : 0/0
 14050 ;;		On exit  : 0/0
 14051 ;;		Unchanged: 0/0
 14052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14053 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14054 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14056 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14057 ;;Total ram usage:       13 bytes
 14058 ;; Hardware stack levels used:    1
 14059 ;; This function calls:
 14060 ;;		Nothing
 14061 ;; This function is called by:
 14062 ;;		i2_I2C_Master_Init
 14063 ;; This function uses a non-reentrant model
 14064 ;;
 14065                           
 14066                           	psect	text41
 14067  003FD6                     __ptext41:
 14068                           	opt stack 0
 14069  003FD6                     i2___lldiv:
 14070                           	opt stack 25
 14071                           
 14072                           ;incstack = 0
 14073  003FD6  0E00               	movlw	0
 14074  003FD8  6E09               	movwf	i2___lldiv@quotient,c
 14075  003FDA  0E00               	movlw	0
 14076  003FDC  6E0A               	movwf	i2___lldiv@quotient+1,c
 14077  003FDE  0E00               	movlw	0
 14078  003FE0  6E0B               	movwf	i2___lldiv@quotient+2,c
 14079  003FE2  0E00               	movlw	0
 14080  003FE4  6E0C               	movwf	i2___lldiv@quotient+3,c
 14081  003FE6  5005               	movf	i2___lldiv@divisor,w,c
 14082  003FE8  1006               	iorwf	i2___lldiv@divisor+1,w,c
 14083  003FEA  1007               	iorwf	i2___lldiv@divisor+2,w,c
 14084  003FEC  1008               	iorwf	i2___lldiv@divisor+3,w,c
 14085  003FEE  B4D8               	btfsc	status,2,c
 14086  003FF0  D02A               	goto	i2l1268
 14087  003FF2  0E01               	movlw	1
 14088  003FF4  6E0D               	movwf	i2___lldiv@counter,c
 14089  003FF6  D006               	goto	i2l1263
 14090  003FF8  90D8               	bcf	status,0,c
 14091  003FFA  3605               	rlcf	i2___lldiv@divisor,f,c
 14092  003FFC  3606               	rlcf	i2___lldiv@divisor+1,f,c
 14093  003FFE  3607               	rlcf	i2___lldiv@divisor+2,f,c
 14094  004000  3608               	rlcf	i2___lldiv@divisor+3,f,c
 14095  004002  2A0D               	incf	i2___lldiv@counter,f,c
 14096  004004                     i2l1263:
 14097  004004  AE08               	btfss	i2___lldiv@divisor+3,7,c
 14098  004006  D7F8               	goto	i2l1264
 14099  004008                     i2u281_40:
 14100  004008  90D8               	bcf	status,0,c
 14101  00400A  3609               	rlcf	i2___lldiv@quotient,f,c
 14102  00400C  360A               	rlcf	i2___lldiv@quotient+1,f,c
 14103  00400E  360B               	rlcf	i2___lldiv@quotient+2,f,c
 14104  004010  360C               	rlcf	i2___lldiv@quotient+3,f,c
 14105  004012  5005               	movf	i2___lldiv@divisor,w,c
 14106  004014  5C01               	subwf	i2___lldiv@dividend,w,c
 14107  004016  5006               	movf	i2___lldiv@divisor+1,w,c
 14108  004018  5802               	subwfb	i2___lldiv@dividend+1,w,c
 14109  00401A  5007               	movf	i2___lldiv@divisor+2,w,c
 14110  00401C  5803               	subwfb	i2___lldiv@dividend+2,w,c
 14111  00401E  5008               	movf	i2___lldiv@divisor+3,w,c
 14112  004020  5804               	subwfb	i2___lldiv@dividend+3,w,c
 14113  004022  A0D8               	btfss	status,0,c
 14114  004024  D009               	goto	i2l1267
 14115  004026  5005               	movf	i2___lldiv@divisor,w,c
 14116  004028  5E01               	subwf	i2___lldiv@dividend,f,c
 14117  00402A  5006               	movf	i2___lldiv@divisor+1,w,c
 14118  00402C  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 14119  00402E  5007               	movf	i2___lldiv@divisor+2,w,c
 14120  004030  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 14121  004032  5008               	movf	i2___lldiv@divisor+3,w,c
 14122  004034  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 14123  004036  8009               	bsf	i2___lldiv@quotient,0,c
 14124  004038                     i2l1267:
 14125  004038  90D8               	bcf	status,0,c
 14126  00403A  3208               	rrcf	i2___lldiv@divisor+3,f,c
 14127  00403C  3207               	rrcf	i2___lldiv@divisor+2,f,c
 14128  00403E  3206               	rrcf	i2___lldiv@divisor+1,f,c
 14129  004040  3205               	rrcf	i2___lldiv@divisor,f,c
 14130  004042  2E0D               	decfsz	i2___lldiv@counter,f,c
 14131  004044  D7E1               	goto	i2u281_40
 14132  004046                     i2l1268:
 14133  004046  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 14134  00404A  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 14135  00404E  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 14136  004052  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 14137  004056  0012               	return		;funcret
 14138  004058                     __end_ofi2___lldiv:
 14139                           	opt stack 0
 14140                           pclatu	equ	0xFFB
 14141                           pclath	equ	0xFFA
 14142                           tblptru	equ	0xFF8
 14143                           tblptrh	equ	0xFF7
 14144                           tblptrl	equ	0xFF6
 14145                           tablat	equ	0xFF5
 14146                           prodh	equ	0xFF4
 14147                           prodl	equ	0xFF3
 14148                           intcon	equ	0xFF2
 14149                           intcon3	equ	0xFF0
 14150                           indf0	equ	0xFEF
 14151                           postinc0	equ	0xFEE
 14152                           fsr0h	equ	0xFEA
 14153                           fsr0l	equ	0xFE9
 14154                           wreg	equ	0xFE8
 14155                           postdec1	equ	0xFE5
 14156                           fsr1h	equ	0xFE2
 14157                           fsr1l	equ	0xFE1
 14158                           indf2	equ	0xFDF
 14159                           postinc2	equ	0xFDE
 14160                           postdec2	equ	0xFDD
 14161                           fsr2h	equ	0xFDA
 14162                           fsr2l	equ	0xFD9
 14163                           status	equ	0xFD8
 14164                           
 14165 ;; *************** function _strncmp *****************
 14166 ;; Defined at:
 14167 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 14168 ;; Parameters:    Size  Location     Type
 14169 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 14170 ;;		 -> current_set(5), 
 14171 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 14172 ;;		 -> strs(100), 
 14173 ;;  len             2   10[COMRAM] unsigned int 
 14174 ;; Auto vars:     Size  Location     Type
 14175 ;;		None
 14176 ;; Return value:  Size  Location     Type
 14177 ;;                  2    6[COMRAM] int 
 14178 ;; Registers used:
 14179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14180 ;; Tracked objects:
 14181 ;;		On entry : 0/0
 14182 ;;		On exit  : 0/0
 14183 ;;		Unchanged: 0/0
 14184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14185 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14187 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14188 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14189 ;;Total ram usage:        9 bytes
 14190 ;; Hardware stack levels used:    1
 14191 ;; This function calls:
 14192 ;;		Nothing
 14193 ;; This function is called by:
 14194 ;;		_interruptHandler
 14195 ;; This function uses a non-reentrant model
 14196 ;;
 14197                           
 14198                           	psect	text42
 14199  003E48                     __ptext42:
 14200                           	opt stack 0
 14201  003E48                     _strncmp:
 14202                           	opt stack 26
 14203                           
 14204                           ;incstack = 0
 14205  003E48  D035               	goto	i2l1483
 14206  003E4A                     i2l4576:
 14207  003E4A  C007  FFD9         	movff	strncmp@s1,fsr2l
 14208  003E4E  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14209  003E52  50DF               	movf	indf2,w,c
 14210  003E54  B4D8               	btfsc	status,2,c
 14211  003E56  D010               	goto	i2u332_40
 14212  003E58  C007  FFD9         	movff	strncmp@s1,fsr2l
 14213  003E5C  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14214  003E60  50DF               	movf	indf2,w,c
 14215  003E62  6E0D               	movwf	??_strncmp& (0+255),c
 14216  003E64  C009  FFF6         	movff	strncmp@s2,tblptrl
 14217  003E68  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 14218  003E6C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14219  003E6C  6AF8               	clrf	tblptru,c
 14220  003E6E                     	endif
 14221  003E6E                     	if	0	;tblptru may be non-zero
 14222  003E6E                     	endif
 14223  003E6E  0008               	tblrd		*
 14224  003E70  50F5               	movf	tablat,w,c
 14225  003E72  180D               	xorwf	??_strncmp,w,c
 14226  003E74  B4D8               	btfsc	status,2,c
 14227  003E76  D01A               	goto	i2l1485
 14228  003E78                     i2u332_40:
 14229  003E78  C009  FFF6         	movff	strncmp@s2,tblptrl
 14230  003E7C  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 14231  003E80                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14232  003E80  6AF8               	clrf	tblptru,c
 14233  003E82                     	endif
 14234  003E82                     	if	0	;tblptru may be non-zero
 14235  003E82                     	endif
 14236  003E82  0008               	tblrd		*
 14237  003E84  50F5               	movf	tablat,w,c
 14238  003E86  6E0D               	movwf	??_strncmp& (0+255),c
 14239  003E88  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 14240  003E8A  1E0D               	comf	??_strncmp,f,c
 14241  003E8C  1E0E               	comf	??_strncmp+1,f,c
 14242  003E8E  4A0D               	infsnz	??_strncmp,f,c
 14243  003E90  2A0E               	incf	??_strncmp+1,f,c
 14244  003E92  C007  FFD9         	movff	strncmp@s1,fsr2l
 14245  003E96  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14246  003E9A  50DF               	movf	indf2,w,c
 14247  003E9C  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 14248  003E9E  500F               	movf	??_strncmp+2,w,c
 14249  003EA0  240D               	addwf	??_strncmp,w,c
 14250  003EA2  6E07               	movwf	?_strncmp,c
 14251  003EA4  0E00               	movlw	0
 14252  003EA6  200E               	addwfc	??_strncmp+1,w,c
 14253  003EA8  6E08               	movwf	?_strncmp+1,c
 14254  003EAA  0012               	return	
 14255  003EAC                     i2l1485:
 14256  003EAC  4A07               	infsnz	strncmp@s1,f,c
 14257  003EAE  2A08               	incf	strncmp@s1+1,f,c
 14258  003EB0  4A09               	infsnz	strncmp@s2,f,c
 14259  003EB2  2A0A               	incf	strncmp@s2+1,f,c
 14260  003EB4                     i2l1483:
 14261  003EB4  060B               	decf	strncmp@len,f,c
 14262  003EB6  A0D8               	btfss	status,0,c
 14263  003EB8  060C               	decf	strncmp@len+1,f,c
 14264  003EBA  280B               	incf	strncmp@len,w,c
 14265  003EBC  E1C6               	bnz	i2l4576
 14266  003EBE  280C               	incf	strncmp@len+1,w,c
 14267  003EC0  A4D8               	btfss	status,2,c
 14268  003EC2  D7C3               	goto	i2l1484
 14269  003EC4  0E00               	movlw	0
 14270  003EC6  6E08               	movwf	?_strncmp+1,c
 14271  003EC8  0E00               	movlw	0
 14272  003ECA  6E07               	movwf	?_strncmp,c
 14273  003ECC  0012               	return	
 14274  003ECE                     __end_of_strncmp:
 14275                           	opt stack 0
 14276                           pclatu	equ	0xFFB
 14277                           pclath	equ	0xFFA
 14278                           tblptru	equ	0xFF8
 14279                           tblptrh	equ	0xFF7
 14280                           tblptrl	equ	0xFF6
 14281                           tablat	equ	0xFF5
 14282                           prodh	equ	0xFF4
 14283                           prodl	equ	0xFF3
 14284                           intcon	equ	0xFF2
 14285                           intcon3	equ	0xFF0
 14286                           indf0	equ	0xFEF
 14287                           postinc0	equ	0xFEE
 14288                           fsr0h	equ	0xFEA
 14289                           fsr0l	equ	0xFE9
 14290                           wreg	equ	0xFE8
 14291                           postdec1	equ	0xFE5
 14292                           fsr1h	equ	0xFE2
 14293                           fsr1l	equ	0xFE1
 14294                           indf2	equ	0xFDF
 14295                           postinc2	equ	0xFDE
 14296                           postdec2	equ	0xFDD
 14297                           fsr2h	equ	0xFDA
 14298                           fsr2l	equ	0xFD9
 14299                           status	equ	0xFD8
 14300                           
 14301 ;; *************** function _strcpy *****************
 14302 ;; Defined at:
 14303 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 14304 ;; Parameters:    Size  Location     Type
 14305 ;;  to              2    6[COMRAM] PTR unsigned char 
 14306 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 14307 ;;  from            2    8[COMRAM] PTR const unsigned char 
 14308 ;;		 -> STR_77(1), STR_75(1), STR_72(1), STR_69(2), 
 14309 ;;		 -> STR_68(2), STR_67(2), STR_66(2), current_set(5), 
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;  cp              2   10[COMRAM] PTR unsigned char 
 14312 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 14313 ;; Return value:  Size  Location     Type
 14314 ;;                  2    6[COMRAM] PTR unsigned char 
 14315 ;; Registers used:
 14316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14317 ;; Tracked objects:
 14318 ;;		On entry : 0/0
 14319 ;;		On exit  : 0/0
 14320 ;;		Unchanged: 0/0
 14321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14325 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14326 ;;Total ram usage:        6 bytes
 14327 ;; Hardware stack levels used:    1
 14328 ;; This function calls:
 14329 ;;		Nothing
 14330 ;; This function is called by:
 14331 ;;		_interruptHandler
 14332 ;; This function uses a non-reentrant model
 14333 ;;
 14334                           
 14335                           	psect	text43
 14336  0043EA                     __ptext43:
 14337                           	opt stack 0
 14338  0043EA                     _strcpy:
 14339                           	opt stack 26
 14340                           
 14341                           ;incstack = 0
 14342  0043EA  C007  F00B         	movff	strcpy@to,strcpy@cp
 14343  0043EE  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 14344  0043F2  D004               	goto	i2l1477
 14345  0043F4  4A0B               	infsnz	strcpy@cp,f,c
 14346  0043F6  2A0C               	incf	strcpy@cp+1,f,c
 14347  0043F8  4A09               	infsnz	strcpy@from,f,c
 14348  0043FA  2A0A               	incf	strcpy@from+1,f,c
 14349  0043FC                     i2l1477:
 14350  0043FC  C009  FFF6         	movff	strcpy@from,tblptrl
 14351  004400  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 14352  004404  0E00               	movlw	low (__mediumconst shr (0+16))
 14353  004406  6EF8               	movwf	tblptru,c
 14354  004408  C00B  FFD9         	movff	strcpy@cp,fsr2l
 14355  00440C  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 14356  004410  0E0F               	movlw	(high __ramtop+-1)
 14357  004412  64F7               	cpfsgt	tblptrh,c
 14358  004414  D003               	bra	i2u327_47
 14359  004416  0008               	tblrd		*
 14360  004418  50F5               	movf	tablat,w,c
 14361  00441A  D005               	bra	i2u327_40
 14362  00441C                     i2u327_47:
 14363  00441C  CFF6 FFE9          	movff	tblptrl,fsr0l
 14364  004420  CFF7 FFEA          	movff	tblptrh,fsr0h
 14365  004424  50EF               	movf	indf0,w,c
 14366  004426                     i2u327_40:
 14367  004426  6EDF               	movwf	indf2,c
 14368  004428  50DF               	movf	indf2,w,c
 14369  00442A  B4D8               	btfsc	status,2,c
 14370  00442C  0012               	return	
 14371  00442E  D7E2               	goto	i2l1478
 14372  004430                     __end_of_strcpy:
 14373                           	opt stack 0
 14374                           pclatu	equ	0xFFB
 14375                           pclath	equ	0xFFA
 14376                           tblptru	equ	0xFF8
 14377                           tblptrh	equ	0xFF7
 14378                           tblptrl	equ	0xFF6
 14379                           tablat	equ	0xFF5
 14380                           prodh	equ	0xFF4
 14381                           prodl	equ	0xFF3
 14382                           intcon	equ	0xFF2
 14383                           intcon3	equ	0xFF0
 14384                           indf0	equ	0xFEF
 14385                           postinc0	equ	0xFEE
 14386                           fsr0h	equ	0xFEA
 14387                           fsr0l	equ	0xFE9
 14388                           wreg	equ	0xFE8
 14389                           postdec1	equ	0xFE5
 14390                           fsr1h	equ	0xFE2
 14391                           fsr1l	equ	0xFE1
 14392                           indf2	equ	0xFDF
 14393                           postinc2	equ	0xFDE
 14394                           postdec2	equ	0xFDD
 14395                           fsr2h	equ	0xFDA
 14396                           fsr2l	equ	0xFD9
 14397                           status	equ	0xFD8
 14398                           
 14399 ;; *************** function _strcat *****************
 14400 ;; Defined at:
 14401 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 14402 ;; Parameters:    Size  Location     Type
 14403 ;;  to              2    0[COMRAM] PTR unsigned char 
 14404 ;;		 -> current_set(5), 
 14405 ;;  from            2    2[COMRAM] PTR const unsigned char 
 14406 ;;		 -> temp_set(5), 
 14407 ;; Auto vars:     Size  Location     Type
 14408 ;;  cp              2    4[COMRAM] PTR unsigned char 
 14409 ;;		 -> current_set(5), 
 14410 ;; Return value:  Size  Location     Type
 14411 ;;                  2    0[COMRAM] PTR unsigned char 
 14412 ;; Registers used:
 14413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14414 ;; Tracked objects:
 14415 ;;		On entry : 0/0
 14416 ;;		On exit  : 0/0
 14417 ;;		Unchanged: 0/0
 14418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14419 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14420 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14422 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14423 ;;Total ram usage:        6 bytes
 14424 ;; Hardware stack levels used:    1
 14425 ;; This function calls:
 14426 ;;		Nothing
 14427 ;; This function is called by:
 14428 ;;		_interruptHandler
 14429 ;; This function uses a non-reentrant model
 14430 ;;
 14431                           
 14432                           	psect	text44
 14433  0044B6                     __ptext44:
 14434                           	opt stack 0
 14435  0044B6                     _strcat:
 14436                           	opt stack 26
 14437                           
 14438                           ;incstack = 0
 14439  0044B6  C001  F005         	movff	strcat@to,strcat@cp
 14440  0044BA  C002  F006         	movff	strcat@to+1,strcat@cp+1
 14441  0044BE  D002               	goto	i2l1460
 14442  0044C0  4A05               	infsnz	strcat@cp,f,c
 14443  0044C2  2A06               	incf	strcat@cp+1,f,c
 14444  0044C4                     i2l1460:
 14445  0044C4  C005  FFD9         	movff	strcat@cp,fsr2l
 14446  0044C8  C006  FFDA         	movff	strcat@cp+1,fsr2h
 14447  0044CC  50DF               	movf	indf2,w,c
 14448  0044CE  B4D8               	btfsc	status,2,c
 14449  0044D0  D005               	goto	i2l1463
 14450  0044D2  D7F6               	goto	i2l1461
 14451  0044D4  4A05               	infsnz	strcat@cp,f,c
 14452  0044D6  2A06               	incf	strcat@cp+1,f,c
 14453  0044D8  4A03               	infsnz	strcat@from,f,c
 14454  0044DA  2A04               	incf	strcat@from+1,f,c
 14455  0044DC                     i2l1463:
 14456  0044DC  C003  FFD9         	movff	strcat@from,fsr2l
 14457  0044E0  C004  FFDA         	movff	strcat@from+1,fsr2h
 14458  0044E4  C005  FFE1         	movff	strcat@cp,fsr1l
 14459  0044E8  C006  FFE2         	movff	strcat@cp+1,fsr1h
 14460  0044EC  CFDF FFE7          	movff	indf2,indf1
 14461  0044F0  50E7               	movf	indf1,w,c
 14462  0044F2  B4D8               	btfsc	status,2,c
 14463  0044F4  0012               	return	
 14464  0044F6  D7EE               	goto	i2l1464
 14465  0044F8                     __end_of_strcat:
 14466                           	opt stack 0
 14467                           pclatu	equ	0xFFB
 14468                           pclath	equ	0xFFA
 14469                           tblptru	equ	0xFF8
 14470                           tblptrh	equ	0xFF7
 14471                           tblptrl	equ	0xFF6
 14472                           tablat	equ	0xFF5
 14473                           prodh	equ	0xFF4
 14474                           prodl	equ	0xFF3
 14475                           intcon	equ	0xFF2
 14476                           intcon3	equ	0xFF0
 14477                           indf0	equ	0xFEF
 14478                           postinc0	equ	0xFEE
 14479                           fsr0h	equ	0xFEA
 14480                           fsr0l	equ	0xFE9
 14481                           wreg	equ	0xFE8
 14482                           indf1	equ	0xFE7
 14483                           postdec1	equ	0xFE5
 14484                           fsr1h	equ	0xFE2
 14485                           fsr1l	equ	0xFE1
 14486                           indf2	equ	0xFDF
 14487                           postinc2	equ	0xFDE
 14488                           postdec2	equ	0xFDD
 14489                           fsr2h	equ	0xFDA
 14490                           fsr2l	equ	0xFD9
 14491                           status	equ	0xFD8
 14492                           
 14493 ;; *************** function _is_valid *****************
 14494 ;; Defined at:
 14495 ;;		line 12 in file "keypad.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;		None
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;		None
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  2  127[None  ] int 
 14502 ;; Registers used:
 14503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14504 ;; Tracked objects:
 14505 ;;		On entry : 0/0
 14506 ;;		On exit  : 0/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14511 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14513 ;;Total ram usage:        2 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    1
 14516 ;; This function calls:
 14517 ;;		_strcmp
 14518 ;;		i2___wmul
 14519 ;; This function is called by:
 14520 ;;		_interruptHandler
 14521 ;; This function uses a non-reentrant model
 14522 ;;
 14523                           
 14524                           	psect	text45
 14525  001000                     __ptext45:
 14526                           	opt stack 0
 14527  001000                     _is_valid:
 14528                           	opt stack 25
 14529                           
 14530                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 14531                           
 14532                           ;incstack = 0
 14533  001000  0E78               	movlw	low _current_set2
 14534  001002  6E01               	movwf	strcmp@s1,c
 14535  001004  0E00               	movlw	high _current_set2
 14536  001006  6E02               	movwf	strcmp@s1+1,c
 14537  001008  0EFD               	movlw	low STR_66
 14538  00100A  6E03               	movwf	strcmp@s2,c
 14539  00100C  0EFF               	movlw	high STR_66
 14540  00100E  6E04               	movwf	strcmp@s2+1,c
 14541  001010  ECD0  F021         	call	_strcmp	;wreg free
 14542  001014  5001               	movf	?_strcmp,w,c
 14543  001016  1002               	iorwf	?_strcmp+1,w,c
 14544  001018  A4D8               	btfss	status,2,c
 14545  00101A  D023               	goto	i2l724
 14546                           
 14547                           ;keypad.c: 17: B=1*number;
 14548  00101C  C07D  F065         	movff	_number,_B
 14549  001020  C07E  F066         	movff	_number+1,_B+1
 14550                           
 14551                           ;keypad.c: 18: total_number = 1*number;
 14552  001024  C07D  F069         	movff	_number,_total_number
 14553  001028  C07E  F06A         	movff	_number+1,_total_number+1
 14554                           
 14555                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 14556  00102C  90D8               	bcf	status,0,c
 14557  00102E  346D               	rlcf	_counter_step,w,c
 14558  001030  6ED9               	movwf	fsr2l,c
 14559  001032  346E               	rlcf	_counter_step+1,w,c
 14560  001034  6EDA               	movwf	fsr2h,c
 14561  001036  0E46               	movlw	low _compartment_number
 14562  001038  26D9               	addwf	fsr2l,f,c
 14563  00103A  0E00               	movlw	high _compartment_number
 14564  00103C  22DA               	addwfc	fsr2h,f,c
 14565  00103E  CFDE F007          	movff	postinc2,??_is_valid
 14566  001042  CFDD F008          	movff	postdec2,??_is_valid+1
 14567  001046  90D8               	bcf	status,0,c
 14568  001048  3607               	rlcf	??_is_valid,f,c
 14569  00104A  3608               	rlcf	??_is_valid+1,f,c
 14570  00104C  0E30               	movlw	low _B_array
 14571  00104E  2407               	addwf	??_is_valid,w,c
 14572  001050  6ED9               	movwf	fsr2l,c
 14573  001052  0E01               	movlw	high _B_array
 14574  001054  2008               	addwfc	??_is_valid+1,w,c
 14575  001056  6EDA               	movwf	fsr2h,c
 14576  001058  C065  FFDE         	movff	_B,postinc2
 14577  00105C  C066  FFDD         	movff	_B+1,postdec2
 14578                           
 14579                           ;keypad.c: 22: }
 14580  001060  0012               	return	
 14581  001062                     i2l724:
 14582                           
 14583                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 14584  001062  0E78               	movlw	low _current_set2
 14585  001064  6E01               	movwf	strcmp@s1,c
 14586  001066  0E00               	movlw	high _current_set2
 14587  001068  6E02               	movwf	strcmp@s1+1,c
 14588  00106A  0EEA               	movlw	low (STR_88+2)
 14589  00106C  6E03               	movwf	strcmp@s2,c
 14590  00106E  0EFF               	movlw	high (STR_88+2)
 14591  001070  6E04               	movwf	strcmp@s2+1,c
 14592  001072  ECD0  F021         	call	_strcmp	;wreg free
 14593  001076  5001               	movf	?_strcmp,w,c
 14594  001078  1002               	iorwf	?_strcmp+1,w,c
 14595  00107A  A4D8               	btfss	status,2,c
 14596  00107C  D023               	goto	i2l726
 14597                           
 14598                           ;keypad.c: 25: N=1*number;
 14599  00107E  C07D  F063         	movff	_number,_N
 14600  001082  C07E  F064         	movff	_number+1,_N+1
 14601                           
 14602                           ;keypad.c: 26: total_number = 1*number;
 14603  001086  C07D  F069         	movff	_number,_total_number
 14604  00108A  C07E  F06A         	movff	_number+1,_total_number+1
 14605                           
 14606                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 14607  00108E  90D8               	bcf	status,0,c
 14608  001090  346D               	rlcf	_counter_step,w,c
 14609  001092  6ED9               	movwf	fsr2l,c
 14610  001094  346E               	rlcf	_counter_step+1,w,c
 14611  001096  6EDA               	movwf	fsr2h,c
 14612  001098  0E46               	movlw	low _compartment_number
 14613  00109A  26D9               	addwf	fsr2l,f,c
 14614  00109C  0E00               	movlw	high _compartment_number
 14615  00109E  22DA               	addwfc	fsr2h,f,c
 14616  0010A0  CFDE F007          	movff	postinc2,??_is_valid
 14617  0010A4  CFDD F008          	movff	postdec2,??_is_valid+1
 14618  0010A8  90D8               	bcf	status,0,c
 14619  0010AA  3607               	rlcf	??_is_valid,f,c
 14620  0010AC  3608               	rlcf	??_is_valid+1,f,c
 14621  0010AE  0E10               	movlw	low _N_array
 14622  0010B0  2407               	addwf	??_is_valid,w,c
 14623  0010B2  6ED9               	movwf	fsr2l,c
 14624  0010B4  0E01               	movlw	high _N_array
 14625  0010B6  2008               	addwfc	??_is_valid+1,w,c
 14626  0010B8  6EDA               	movwf	fsr2h,c
 14627  0010BA  C063  FFDE         	movff	_N,postinc2
 14628  0010BE  C064  FFDD         	movff	_N+1,postdec2
 14629                           
 14630                           ;keypad.c: 28: }
 14631  0010C2  0012               	return	
 14632  0010C4                     i2l726:
 14633                           
 14634                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 14635  0010C4  0E78               	movlw	low _current_set2
 14636  0010C6  6E01               	movwf	strcmp@s1,c
 14637  0010C8  0E00               	movlw	high _current_set2
 14638  0010CA  6E02               	movwf	strcmp@s1+1,c
 14639  0010CC  0EEE               	movlw	low (STR_89+2)
 14640  0010CE  6E03               	movwf	strcmp@s2,c
 14641  0010D0  0EFF               	movlw	high (STR_89+2)
 14642  0010D2  6E04               	movwf	strcmp@s2+1,c
 14643  0010D4  ECD0  F021         	call	_strcmp	;wreg free
 14644  0010D8  5001               	movf	?_strcmp,w,c
 14645  0010DA  1002               	iorwf	?_strcmp+1,w,c
 14646  0010DC  A4D8               	btfss	status,2,c
 14647  0010DE  D023               	goto	i2l728
 14648                           
 14649                           ;keypad.c: 30: S=1*number;
 14650  0010E0  C07D  F061         	movff	_number,_S
 14651  0010E4  C07E  F062         	movff	_number+1,_S+1
 14652                           
 14653                           ;keypad.c: 31: total_number = 1*number;
 14654  0010E8  C07D  F069         	movff	_number,_total_number
 14655  0010EC  C07E  F06A         	movff	_number+1,_total_number+1
 14656                           
 14657                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 14658  0010F0  90D8               	bcf	status,0,c
 14659  0010F2  346D               	rlcf	_counter_step,w,c
 14660  0010F4  6ED9               	movwf	fsr2l,c
 14661  0010F6  346E               	rlcf	_counter_step+1,w,c
 14662  0010F8  6EDA               	movwf	fsr2h,c
 14663  0010FA  0E46               	movlw	low _compartment_number
 14664  0010FC  26D9               	addwf	fsr2l,f,c
 14665  0010FE  0E00               	movlw	high _compartment_number
 14666  001100  22DA               	addwfc	fsr2h,f,c
 14667  001102  CFDE F007          	movff	postinc2,??_is_valid
 14668  001106  CFDD F008          	movff	postdec2,??_is_valid+1
 14669  00110A  90D8               	bcf	status,0,c
 14670  00110C  3607               	rlcf	??_is_valid,f,c
 14671  00110E  3608               	rlcf	??_is_valid+1,f,c
 14672  001110  0E20               	movlw	low _S_array
 14673  001112  2407               	addwf	??_is_valid,w,c
 14674  001114  6ED9               	movwf	fsr2l,c
 14675  001116  0E01               	movlw	high _S_array
 14676  001118  2008               	addwfc	??_is_valid+1,w,c
 14677  00111A  6EDA               	movwf	fsr2h,c
 14678  00111C  C061  FFDE         	movff	_S,postinc2
 14679  001120  C062  FFDD         	movff	_S+1,postdec2
 14680                           
 14681                           ;keypad.c: 33: }
 14682  001124  0012               	return	
 14683  001126                     i2l728:
 14684                           
 14685                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 14686  001126  0E78               	movlw	low _current_set2
 14687  001128  6E01               	movwf	strcmp@s1,c
 14688  00112A  0E00               	movlw	high _current_set2
 14689  00112C  6E02               	movwf	strcmp@s1+1,c
 14690  00112E  0EF2               	movlw	low (STR_90+2)
 14691  001130  6E03               	movwf	strcmp@s2,c
 14692  001132  0EFF               	movlw	high (STR_90+2)
 14693  001134  6E04               	movwf	strcmp@s2+1,c
 14694  001136  ECD0  F021         	call	_strcmp	;wreg free
 14695  00113A  5001               	movf	?_strcmp,w,c
 14696  00113C  1002               	iorwf	?_strcmp+1,w,c
 14697  00113E  A4D8               	btfss	status,2,c
 14698  001140  D023               	goto	i2l730
 14699                           
 14700                           ;keypad.c: 35: W=1*number;
 14701  001142  C07D  F05F         	movff	_number,_W
 14702  001146  C07E  F060         	movff	_number+1,_W+1
 14703                           
 14704                           ;keypad.c: 36: total_number = 1*number;
 14705  00114A  C07D  F069         	movff	_number,_total_number
 14706  00114E  C07E  F06A         	movff	_number+1,_total_number+1
 14707                           
 14708                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 14709  001152  90D8               	bcf	status,0,c
 14710  001154  346D               	rlcf	_counter_step,w,c
 14711  001156  6ED9               	movwf	fsr2l,c
 14712  001158  346E               	rlcf	_counter_step+1,w,c
 14713  00115A  6EDA               	movwf	fsr2h,c
 14714  00115C  0E46               	movlw	low _compartment_number
 14715  00115E  26D9               	addwf	fsr2l,f,c
 14716  001160  0E00               	movlw	high _compartment_number
 14717  001162  22DA               	addwfc	fsr2h,f,c
 14718  001164  CFDE F007          	movff	postinc2,??_is_valid
 14719  001168  CFDD F008          	movff	postdec2,??_is_valid+1
 14720  00116C  90D8               	bcf	status,0,c
 14721  00116E  3607               	rlcf	??_is_valid,f,c
 14722  001170  3608               	rlcf	??_is_valid+1,f,c
 14723  001172  0E00               	movlw	low _W_array
 14724  001174  2407               	addwf	??_is_valid,w,c
 14725  001176  6ED9               	movwf	fsr2l,c
 14726  001178  0E01               	movlw	high _W_array
 14727  00117A  2008               	addwfc	??_is_valid+1,w,c
 14728  00117C  6EDA               	movwf	fsr2h,c
 14729  00117E  C05F  FFDE         	movff	_W,postinc2
 14730  001182  C060  FFDD         	movff	_W+1,postdec2
 14731                           
 14732                           ;keypad.c: 38: }
 14733  001186  0012               	return	
 14734  001188                     i2l730:
 14735                           
 14736                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 14737  001188  0E78               	movlw	low _current_set2
 14738  00118A  6E01               	movwf	strcmp@s1,c
 14739  00118C  0E00               	movlw	high _current_set2
 14740  00118E  6E02               	movwf	strcmp@s1+1,c
 14741  001190  0EE9               	movlw	low (STR_88+1)
 14742  001192  6E03               	movwf	strcmp@s2,c
 14743  001194  0EFF               	movlw	high (STR_88+1)
 14744  001196  6E04               	movwf	strcmp@s2+1,c
 14745  001198  ECD0  F021         	call	_strcmp	;wreg free
 14746  00119C  5001               	movf	?_strcmp,w,c
 14747  00119E  1002               	iorwf	?_strcmp+1,w,c
 14748  0011A0  A4D8               	btfss	status,2,c
 14749  0011A2  D042               	goto	i2l732
 14750                           
 14751                           ;keypad.c: 40: B = 1*number;
 14752  0011A4  C07D  F065         	movff	_number,_B
 14753  0011A8  C07E  F066         	movff	_number+1,_B+1
 14754                           
 14755                           ;keypad.c: 42: N = 1*number;
 14756  0011AC  C07D  F063         	movff	_number,_N
 14757  0011B0  C07E  F064         	movff	_number+1,_N+1
 14758                           
 14759                           ;keypad.c: 43: total_number = 2*number;
 14760  0011B4  90D8               	bcf	status,0,c
 14761  0011B6  347D               	rlcf	_number,w,c
 14762  0011B8  6E69               	movwf	_total_number,c
 14763  0011BA  347E               	rlcf	_number+1,w,c
 14764  0011BC  6E6A               	movwf	_total_number+1,c
 14765                           
 14766                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 14767  0011BE  90D8               	bcf	status,0,c
 14768  0011C0  346D               	rlcf	_counter_step,w,c
 14769  0011C2  6ED9               	movwf	fsr2l,c
 14770  0011C4  346E               	rlcf	_counter_step+1,w,c
 14771  0011C6  6EDA               	movwf	fsr2h,c
 14772  0011C8  0E46               	movlw	low _compartment_number
 14773  0011CA  26D9               	addwf	fsr2l,f,c
 14774  0011CC  0E00               	movlw	high _compartment_number
 14775  0011CE  22DA               	addwfc	fsr2h,f,c
 14776  0011D0  CFDE F007          	movff	postinc2,??_is_valid
 14777  0011D4  CFDD F008          	movff	postdec2,??_is_valid+1
 14778  0011D8  90D8               	bcf	status,0,c
 14779  0011DA  3607               	rlcf	??_is_valid,f,c
 14780  0011DC  3608               	rlcf	??_is_valid+1,f,c
 14781  0011DE  0E30               	movlw	low _B_array
 14782  0011E0  2407               	addwf	??_is_valid,w,c
 14783  0011E2  6ED9               	movwf	fsr2l,c
 14784  0011E4  0E01               	movlw	high _B_array
 14785  0011E6  2008               	addwfc	??_is_valid+1,w,c
 14786  0011E8  6EDA               	movwf	fsr2h,c
 14787  0011EA  C065  FFDE         	movff	_B,postinc2
 14788  0011EE  C066  FFDD         	movff	_B+1,postdec2
 14789                           
 14790                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 14791  0011F2  90D8               	bcf	status,0,c
 14792  0011F4  346D               	rlcf	_counter_step,w,c
 14793  0011F6  6ED9               	movwf	fsr2l,c
 14794  0011F8  346E               	rlcf	_counter_step+1,w,c
 14795  0011FA  6EDA               	movwf	fsr2h,c
 14796  0011FC  0E46               	movlw	low _compartment_number
 14797  0011FE  26D9               	addwf	fsr2l,f,c
 14798  001200  0E00               	movlw	high _compartment_number
 14799  001202  22DA               	addwfc	fsr2h,f,c
 14800  001204  CFDE F007          	movff	postinc2,??_is_valid
 14801  001208  CFDD F008          	movff	postdec2,??_is_valid+1
 14802  00120C  90D8               	bcf	status,0,c
 14803  00120E  3607               	rlcf	??_is_valid,f,c
 14804  001210  3608               	rlcf	??_is_valid+1,f,c
 14805  001212  0E10               	movlw	low _N_array
 14806  001214  2407               	addwf	??_is_valid,w,c
 14807  001216  6ED9               	movwf	fsr2l,c
 14808  001218  0E01               	movlw	high _N_array
 14809  00121A  2008               	addwfc	??_is_valid+1,w,c
 14810  00121C  6EDA               	movwf	fsr2h,c
 14811  00121E  C063  FFDE         	movff	_N,postinc2
 14812  001222  C064  FFDD         	movff	_N+1,postdec2
 14813                           
 14814                           ;keypad.c: 47: }
 14815  001226  0012               	return	
 14816  001228                     i2l732:
 14817                           
 14818                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 14819  001228  0E78               	movlw	low _current_set2
 14820  00122A  6E01               	movwf	strcmp@s1,c
 14821  00122C  0E00               	movlw	high _current_set2
 14822  00122E  6E02               	movwf	strcmp@s1+1,c
 14823  001230  0EED               	movlw	low (STR_89+1)
 14824  001232  6E03               	movwf	strcmp@s2,c
 14825  001234  0EFF               	movlw	high (STR_89+1)
 14826  001236  6E04               	movwf	strcmp@s2+1,c
 14827  001238  ECD0  F021         	call	_strcmp	;wreg free
 14828  00123C  5001               	movf	?_strcmp,w,c
 14829  00123E  1002               	iorwf	?_strcmp+1,w,c
 14830  001240  A4D8               	btfss	status,2,c
 14831  001242  D042               	goto	i2l734
 14832                           
 14833                           ;keypad.c: 49: B = 1*number;
 14834  001244  C07D  F065         	movff	_number,_B
 14835  001248  C07E  F066         	movff	_number+1,_B+1
 14836                           
 14837                           ;keypad.c: 51: S = 1*number;
 14838  00124C  C07D  F061         	movff	_number,_S
 14839  001250  C07E  F062         	movff	_number+1,_S+1
 14840                           
 14841                           ;keypad.c: 52: total_number = 2*number;
 14842  001254  90D8               	bcf	status,0,c
 14843  001256  347D               	rlcf	_number,w,c
 14844  001258  6E69               	movwf	_total_number,c
 14845  00125A  347E               	rlcf	_number+1,w,c
 14846  00125C  6E6A               	movwf	_total_number+1,c
 14847                           
 14848                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 14849  00125E  90D8               	bcf	status,0,c
 14850  001260  346D               	rlcf	_counter_step,w,c
 14851  001262  6ED9               	movwf	fsr2l,c
 14852  001264  346E               	rlcf	_counter_step+1,w,c
 14853  001266  6EDA               	movwf	fsr2h,c
 14854  001268  0E46               	movlw	low _compartment_number
 14855  00126A  26D9               	addwf	fsr2l,f,c
 14856  00126C  0E00               	movlw	high _compartment_number
 14857  00126E  22DA               	addwfc	fsr2h,f,c
 14858  001270  CFDE F007          	movff	postinc2,??_is_valid
 14859  001274  CFDD F008          	movff	postdec2,??_is_valid+1
 14860  001278  90D8               	bcf	status,0,c
 14861  00127A  3607               	rlcf	??_is_valid,f,c
 14862  00127C  3608               	rlcf	??_is_valid+1,f,c
 14863  00127E  0E30               	movlw	low _B_array
 14864  001280  2407               	addwf	??_is_valid,w,c
 14865  001282  6ED9               	movwf	fsr2l,c
 14866  001284  0E01               	movlw	high _B_array
 14867  001286  2008               	addwfc	??_is_valid+1,w,c
 14868  001288  6EDA               	movwf	fsr2h,c
 14869  00128A  C065  FFDE         	movff	_B,postinc2
 14870  00128E  C066  FFDD         	movff	_B+1,postdec2
 14871                           
 14872                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 14873  001292  90D8               	bcf	status,0,c
 14874  001294  346D               	rlcf	_counter_step,w,c
 14875  001296  6ED9               	movwf	fsr2l,c
 14876  001298  346E               	rlcf	_counter_step+1,w,c
 14877  00129A  6EDA               	movwf	fsr2h,c
 14878  00129C  0E46               	movlw	low _compartment_number
 14879  00129E  26D9               	addwf	fsr2l,f,c
 14880  0012A0  0E00               	movlw	high _compartment_number
 14881  0012A2  22DA               	addwfc	fsr2h,f,c
 14882  0012A4  CFDE F007          	movff	postinc2,??_is_valid
 14883  0012A8  CFDD F008          	movff	postdec2,??_is_valid+1
 14884  0012AC  90D8               	bcf	status,0,c
 14885  0012AE  3607               	rlcf	??_is_valid,f,c
 14886  0012B0  3608               	rlcf	??_is_valid+1,f,c
 14887  0012B2  0E20               	movlw	low _S_array
 14888  0012B4  2407               	addwf	??_is_valid,w,c
 14889  0012B6  6ED9               	movwf	fsr2l,c
 14890  0012B8  0E01               	movlw	high _S_array
 14891  0012BA  2008               	addwfc	??_is_valid+1,w,c
 14892  0012BC  6EDA               	movwf	fsr2h,c
 14893  0012BE  C061  FFDE         	movff	_S,postinc2
 14894  0012C2  C062  FFDD         	movff	_S+1,postdec2
 14895                           
 14896                           ;keypad.c: 57: }
 14897  0012C6  0012               	return	
 14898  0012C8                     i2l734:
 14899                           
 14900                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 14901  0012C8  0E78               	movlw	low _current_set2
 14902  0012CA  6E01               	movwf	strcmp@s1,c
 14903  0012CC  0E00               	movlw	high _current_set2
 14904  0012CE  6E02               	movwf	strcmp@s1+1,c
 14905  0012D0  0EF1               	movlw	low (STR_90+1)
 14906  0012D2  6E03               	movwf	strcmp@s2,c
 14907  0012D4  0EFF               	movlw	high (STR_90+1)
 14908  0012D6  6E04               	movwf	strcmp@s2+1,c
 14909  0012D8  ECD0  F021         	call	_strcmp	;wreg free
 14910  0012DC  5001               	movf	?_strcmp,w,c
 14911  0012DE  1002               	iorwf	?_strcmp+1,w,c
 14912  0012E0  A4D8               	btfss	status,2,c
 14913  0012E2  D042               	goto	i2l736
 14914                           
 14915                           ;keypad.c: 60: B = 1*number;
 14916  0012E4  C07D  F065         	movff	_number,_B
 14917  0012E8  C07E  F066         	movff	_number+1,_B+1
 14918                           
 14919                           ;keypad.c: 62: W = 1*number;
 14920  0012EC  C07D  F05F         	movff	_number,_W
 14921  0012F0  C07E  F060         	movff	_number+1,_W+1
 14922                           
 14923                           ;keypad.c: 63: total_number = 2*number;
 14924  0012F4  90D8               	bcf	status,0,c
 14925  0012F6  347D               	rlcf	_number,w,c
 14926  0012F8  6E69               	movwf	_total_number,c
 14927  0012FA  347E               	rlcf	_number+1,w,c
 14928  0012FC  6E6A               	movwf	_total_number+1,c
 14929                           
 14930                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 14931  0012FE  90D8               	bcf	status,0,c
 14932  001300  346D               	rlcf	_counter_step,w,c
 14933  001302  6ED9               	movwf	fsr2l,c
 14934  001304  346E               	rlcf	_counter_step+1,w,c
 14935  001306  6EDA               	movwf	fsr2h,c
 14936  001308  0E46               	movlw	low _compartment_number
 14937  00130A  26D9               	addwf	fsr2l,f,c
 14938  00130C  0E00               	movlw	high _compartment_number
 14939  00130E  22DA               	addwfc	fsr2h,f,c
 14940  001310  CFDE F007          	movff	postinc2,??_is_valid
 14941  001314  CFDD F008          	movff	postdec2,??_is_valid+1
 14942  001318  90D8               	bcf	status,0,c
 14943  00131A  3607               	rlcf	??_is_valid,f,c
 14944  00131C  3608               	rlcf	??_is_valid+1,f,c
 14945  00131E  0E30               	movlw	low _B_array
 14946  001320  2407               	addwf	??_is_valid,w,c
 14947  001322  6ED9               	movwf	fsr2l,c
 14948  001324  0E01               	movlw	high _B_array
 14949  001326  2008               	addwfc	??_is_valid+1,w,c
 14950  001328  6EDA               	movwf	fsr2h,c
 14951  00132A  C065  FFDE         	movff	_B,postinc2
 14952  00132E  C066  FFDD         	movff	_B+1,postdec2
 14953                           
 14954                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 14955  001332  90D8               	bcf	status,0,c
 14956  001334  346D               	rlcf	_counter_step,w,c
 14957  001336  6ED9               	movwf	fsr2l,c
 14958  001338  346E               	rlcf	_counter_step+1,w,c
 14959  00133A  6EDA               	movwf	fsr2h,c
 14960  00133C  0E46               	movlw	low _compartment_number
 14961  00133E  26D9               	addwf	fsr2l,f,c
 14962  001340  0E00               	movlw	high _compartment_number
 14963  001342  22DA               	addwfc	fsr2h,f,c
 14964  001344  CFDE F007          	movff	postinc2,??_is_valid
 14965  001348  CFDD F008          	movff	postdec2,??_is_valid+1
 14966  00134C  90D8               	bcf	status,0,c
 14967  00134E  3607               	rlcf	??_is_valid,f,c
 14968  001350  3608               	rlcf	??_is_valid+1,f,c
 14969  001352  0E00               	movlw	low _W_array
 14970  001354  2407               	addwf	??_is_valid,w,c
 14971  001356  6ED9               	movwf	fsr2l,c
 14972  001358  0E01               	movlw	high _W_array
 14973  00135A  2008               	addwfc	??_is_valid+1,w,c
 14974  00135C  6EDA               	movwf	fsr2h,c
 14975  00135E  C05F  FFDE         	movff	_W,postinc2
 14976  001362  C060  FFDD         	movff	_W+1,postdec2
 14977                           
 14978                           ;keypad.c: 67: }
 14979  001366  0012               	return	
 14980  001368                     i2l736:
 14981                           
 14982                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 14983  001368  0E78               	movlw	low _current_set2
 14984  00136A  6E01               	movwf	strcmp@s1,c
 14985  00136C  0E00               	movlw	high _current_set2
 14986  00136E  6E02               	movwf	strcmp@s1+1,c
 14987  001370  0EE8               	movlw	low STR_88
 14988  001372  6E03               	movwf	strcmp@s2,c
 14989  001374  0EFF               	movlw	high STR_88
 14990  001376  6E04               	movwf	strcmp@s2+1,c
 14991  001378  ECD0  F021         	call	_strcmp	;wreg free
 14992  00137C  5001               	movf	?_strcmp,w,c
 14993  00137E  1002               	iorwf	?_strcmp+1,w,c
 14994  001380  A4D8               	btfss	status,2,c
 14995  001382  D04C               	goto	i2l738
 14996                           
 14997                           ;keypad.c: 69: B = 2*number;
 14998  001384  90D8               	bcf	status,0,c
 14999  001386  347D               	rlcf	_number,w,c
 15000  001388  6E65               	movwf	_B,c
 15001  00138A  347E               	rlcf	_number+1,w,c
 15002  00138C  6E66               	movwf	_B+1,c
 15003                           
 15004                           ;keypad.c: 71: N = 1*number;
 15005  00138E  C07D  F063         	movff	_number,_N
 15006  001392  C07E  F064         	movff	_number+1,_N+1
 15007                           
 15008                           ;keypad.c: 72: total_number = 3*number;
 15009  001396  C07D  F001         	movff	_number,i2___wmul@multiplier
 15010  00139A  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15011  00139E  0E00               	movlw	0
 15012  0013A0  6E04               	movwf	i2___wmul@multiplicand+1,c
 15013  0013A2  0E03               	movlw	3
 15014  0013A4  6E03               	movwf	i2___wmul@multiplicand,c
 15015  0013A6  ECD6  F022         	call	i2___wmul	;wreg free
 15016  0013AA  C001  F069         	movff	?i2___wmul,_total_number
 15017  0013AE  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15018                           
 15019                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 15020  0013B2  90D8               	bcf	status,0,c
 15021  0013B4  346D               	rlcf	_counter_step,w,c
 15022  0013B6  6ED9               	movwf	fsr2l,c
 15023  0013B8  346E               	rlcf	_counter_step+1,w,c
 15024  0013BA  6EDA               	movwf	fsr2h,c
 15025  0013BC  0E46               	movlw	low _compartment_number
 15026  0013BE  26D9               	addwf	fsr2l,f,c
 15027  0013C0  0E00               	movlw	high _compartment_number
 15028  0013C2  22DA               	addwfc	fsr2h,f,c
 15029  0013C4  CFDE F007          	movff	postinc2,??_is_valid
 15030  0013C8  CFDD F008          	movff	postdec2,??_is_valid+1
 15031  0013CC  90D8               	bcf	status,0,c
 15032  0013CE  3607               	rlcf	??_is_valid,f,c
 15033  0013D0  3608               	rlcf	??_is_valid+1,f,c
 15034  0013D2  0E30               	movlw	low _B_array
 15035  0013D4  2407               	addwf	??_is_valid,w,c
 15036  0013D6  6ED9               	movwf	fsr2l,c
 15037  0013D8  0E01               	movlw	high _B_array
 15038  0013DA  2008               	addwfc	??_is_valid+1,w,c
 15039  0013DC  6EDA               	movwf	fsr2h,c
 15040  0013DE  C065  FFDE         	movff	_B,postinc2
 15041  0013E2  C066  FFDD         	movff	_B+1,postdec2
 15042                           
 15043                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 15044  0013E6  90D8               	bcf	status,0,c
 15045  0013E8  346D               	rlcf	_counter_step,w,c
 15046  0013EA  6ED9               	movwf	fsr2l,c
 15047  0013EC  346E               	rlcf	_counter_step+1,w,c
 15048  0013EE  6EDA               	movwf	fsr2h,c
 15049  0013F0  0E46               	movlw	low _compartment_number
 15050  0013F2  26D9               	addwf	fsr2l,f,c
 15051  0013F4  0E00               	movlw	high _compartment_number
 15052  0013F6  22DA               	addwfc	fsr2h,f,c
 15053  0013F8  CFDE F007          	movff	postinc2,??_is_valid
 15054  0013FC  CFDD F008          	movff	postdec2,??_is_valid+1
 15055  001400  90D8               	bcf	status,0,c
 15056  001402  3607               	rlcf	??_is_valid,f,c
 15057  001404  3608               	rlcf	??_is_valid+1,f,c
 15058  001406  0E10               	movlw	low _N_array
 15059  001408  2407               	addwf	??_is_valid,w,c
 15060  00140A  6ED9               	movwf	fsr2l,c
 15061  00140C  0E01               	movlw	high _N_array
 15062  00140E  2008               	addwfc	??_is_valid+1,w,c
 15063  001410  6EDA               	movwf	fsr2h,c
 15064  001412  C063  FFDE         	movff	_N,postinc2
 15065  001416  C064  FFDD         	movff	_N+1,postdec2
 15066                           
 15067                           ;keypad.c: 76: }
 15068  00141A  0012               	return	
 15069  00141C                     i2l738:
 15070                           
 15071                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 15072  00141C  0E78               	movlw	low _current_set2
 15073  00141E  6E01               	movwf	strcmp@s1,c
 15074  001420  0E00               	movlw	high _current_set2
 15075  001422  6E02               	movwf	strcmp@s1+1,c
 15076  001424  0EEC               	movlw	low STR_89
 15077  001426  6E03               	movwf	strcmp@s2,c
 15078  001428  0EFF               	movlw	high STR_89
 15079  00142A  6E04               	movwf	strcmp@s2+1,c
 15080  00142C  ECD0  F021         	call	_strcmp	;wreg free
 15081  001430  5001               	movf	?_strcmp,w,c
 15082  001432  1002               	iorwf	?_strcmp+1,w,c
 15083  001434  A4D8               	btfss	status,2,c
 15084  001436  D04C               	goto	i2l740
 15085                           
 15086                           ;keypad.c: 78: B = 2*number;
 15087  001438  90D8               	bcf	status,0,c
 15088  00143A  347D               	rlcf	_number,w,c
 15089  00143C  6E65               	movwf	_B,c
 15090  00143E  347E               	rlcf	_number+1,w,c
 15091  001440  6E66               	movwf	_B+1,c
 15092                           
 15093                           ;keypad.c: 80: S = 1*number;
 15094  001442  C07D  F061         	movff	_number,_S
 15095  001446  C07E  F062         	movff	_number+1,_S+1
 15096                           
 15097                           ;keypad.c: 81: total_number = 3*number;
 15098  00144A  C07D  F001         	movff	_number,i2___wmul@multiplier
 15099  00144E  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15100  001452  0E00               	movlw	0
 15101  001454  6E04               	movwf	i2___wmul@multiplicand+1,c
 15102  001456  0E03               	movlw	3
 15103  001458  6E03               	movwf	i2___wmul@multiplicand,c
 15104  00145A  ECD6  F022         	call	i2___wmul	;wreg free
 15105  00145E  C001  F069         	movff	?i2___wmul,_total_number
 15106  001462  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15107                           
 15108                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 15109  001466  90D8               	bcf	status,0,c
 15110  001468  346D               	rlcf	_counter_step,w,c
 15111  00146A  6ED9               	movwf	fsr2l,c
 15112  00146C  346E               	rlcf	_counter_step+1,w,c
 15113  00146E  6EDA               	movwf	fsr2h,c
 15114  001470  0E46               	movlw	low _compartment_number
 15115  001472  26D9               	addwf	fsr2l,f,c
 15116  001474  0E00               	movlw	high _compartment_number
 15117  001476  22DA               	addwfc	fsr2h,f,c
 15118  001478  CFDE F007          	movff	postinc2,??_is_valid
 15119  00147C  CFDD F008          	movff	postdec2,??_is_valid+1
 15120  001480  90D8               	bcf	status,0,c
 15121  001482  3607               	rlcf	??_is_valid,f,c
 15122  001484  3608               	rlcf	??_is_valid+1,f,c
 15123  001486  0E30               	movlw	low _B_array
 15124  001488  2407               	addwf	??_is_valid,w,c
 15125  00148A  6ED9               	movwf	fsr2l,c
 15126  00148C  0E01               	movlw	high _B_array
 15127  00148E  2008               	addwfc	??_is_valid+1,w,c
 15128  001490  6EDA               	movwf	fsr2h,c
 15129  001492  C065  FFDE         	movff	_B,postinc2
 15130  001496  C066  FFDD         	movff	_B+1,postdec2
 15131                           
 15132                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 15133  00149A  90D8               	bcf	status,0,c
 15134  00149C  346D               	rlcf	_counter_step,w,c
 15135  00149E  6ED9               	movwf	fsr2l,c
 15136  0014A0  346E               	rlcf	_counter_step+1,w,c
 15137  0014A2  6EDA               	movwf	fsr2h,c
 15138  0014A4  0E46               	movlw	low _compartment_number
 15139  0014A6  26D9               	addwf	fsr2l,f,c
 15140  0014A8  0E00               	movlw	high _compartment_number
 15141  0014AA  22DA               	addwfc	fsr2h,f,c
 15142  0014AC  CFDE F007          	movff	postinc2,??_is_valid
 15143  0014B0  CFDD F008          	movff	postdec2,??_is_valid+1
 15144  0014B4  90D8               	bcf	status,0,c
 15145  0014B6  3607               	rlcf	??_is_valid,f,c
 15146  0014B8  3608               	rlcf	??_is_valid+1,f,c
 15147  0014BA  0E20               	movlw	low _S_array
 15148  0014BC  2407               	addwf	??_is_valid,w,c
 15149  0014BE  6ED9               	movwf	fsr2l,c
 15150  0014C0  0E01               	movlw	high _S_array
 15151  0014C2  2008               	addwfc	??_is_valid+1,w,c
 15152  0014C4  6EDA               	movwf	fsr2h,c
 15153  0014C6  C061  FFDE         	movff	_S,postinc2
 15154  0014CA  C062  FFDD         	movff	_S+1,postdec2
 15155                           
 15156                           ;keypad.c: 85: }
 15157  0014CE  0012               	return	
 15158  0014D0                     i2l740:
 15159                           
 15160                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 15161  0014D0  0E78               	movlw	low _current_set2
 15162  0014D2  6E01               	movwf	strcmp@s1,c
 15163  0014D4  0E00               	movlw	high _current_set2
 15164  0014D6  6E02               	movwf	strcmp@s1+1,c
 15165  0014D8  0EF0               	movlw	low STR_90
 15166  0014DA  6E03               	movwf	strcmp@s2,c
 15167  0014DC  0EFF               	movlw	high STR_90
 15168  0014DE  6E04               	movwf	strcmp@s2+1,c
 15169  0014E0  ECD0  F021         	call	_strcmp	;wreg free
 15170  0014E4  5001               	movf	?_strcmp,w,c
 15171  0014E6  1002               	iorwf	?_strcmp+1,w,c
 15172  0014E8  A4D8               	btfss	status,2,c
 15173  0014EA  D04C               	goto	i2l742
 15174                           
 15175                           ;keypad.c: 87: B = 2*number;
 15176  0014EC  90D8               	bcf	status,0,c
 15177  0014EE  347D               	rlcf	_number,w,c
 15178  0014F0  6E65               	movwf	_B,c
 15179  0014F2  347E               	rlcf	_number+1,w,c
 15180  0014F4  6E66               	movwf	_B+1,c
 15181                           
 15182                           ;keypad.c: 89: W = 1*number;
 15183  0014F6  C07D  F05F         	movff	_number,_W
 15184  0014FA  C07E  F060         	movff	_number+1,_W+1
 15185                           
 15186                           ;keypad.c: 90: total_number = 3*number;
 15187  0014FE  C07D  F001         	movff	_number,i2___wmul@multiplier
 15188  001502  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15189  001506  0E00               	movlw	0
 15190  001508  6E04               	movwf	i2___wmul@multiplicand+1,c
 15191  00150A  0E03               	movlw	3
 15192  00150C  6E03               	movwf	i2___wmul@multiplicand,c
 15193  00150E  ECD6  F022         	call	i2___wmul	;wreg free
 15194  001512  C001  F069         	movff	?i2___wmul,_total_number
 15195  001516  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15196                           
 15197                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 15198  00151A  90D8               	bcf	status,0,c
 15199  00151C  346D               	rlcf	_counter_step,w,c
 15200  00151E  6ED9               	movwf	fsr2l,c
 15201  001520  346E               	rlcf	_counter_step+1,w,c
 15202  001522  6EDA               	movwf	fsr2h,c
 15203  001524  0E46               	movlw	low _compartment_number
 15204  001526  26D9               	addwf	fsr2l,f,c
 15205  001528  0E00               	movlw	high _compartment_number
 15206  00152A  22DA               	addwfc	fsr2h,f,c
 15207  00152C  CFDE F007          	movff	postinc2,??_is_valid
 15208  001530  CFDD F008          	movff	postdec2,??_is_valid+1
 15209  001534  90D8               	bcf	status,0,c
 15210  001536  3607               	rlcf	??_is_valid,f,c
 15211  001538  3608               	rlcf	??_is_valid+1,f,c
 15212  00153A  0E30               	movlw	low _B_array
 15213  00153C  2407               	addwf	??_is_valid,w,c
 15214  00153E  6ED9               	movwf	fsr2l,c
 15215  001540  0E01               	movlw	high _B_array
 15216  001542  2008               	addwfc	??_is_valid+1,w,c
 15217  001544  6EDA               	movwf	fsr2h,c
 15218  001546  C065  FFDE         	movff	_B,postinc2
 15219  00154A  C066  FFDD         	movff	_B+1,postdec2
 15220                           
 15221                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 15222  00154E  90D8               	bcf	status,0,c
 15223  001550  346D               	rlcf	_counter_step,w,c
 15224  001552  6ED9               	movwf	fsr2l,c
 15225  001554  346E               	rlcf	_counter_step+1,w,c
 15226  001556  6EDA               	movwf	fsr2h,c
 15227  001558  0E46               	movlw	low _compartment_number
 15228  00155A  26D9               	addwf	fsr2l,f,c
 15229  00155C  0E00               	movlw	high _compartment_number
 15230  00155E  22DA               	addwfc	fsr2h,f,c
 15231  001560  CFDE F007          	movff	postinc2,??_is_valid
 15232  001564  CFDD F008          	movff	postdec2,??_is_valid+1
 15233  001568  90D8               	bcf	status,0,c
 15234  00156A  3607               	rlcf	??_is_valid,f,c
 15235  00156C  3608               	rlcf	??_is_valid+1,f,c
 15236  00156E  0E00               	movlw	low _W_array
 15237  001570  2407               	addwf	??_is_valid,w,c
 15238  001572  6ED9               	movwf	fsr2l,c
 15239  001574  0E01               	movlw	high _W_array
 15240  001576  2008               	addwfc	??_is_valid+1,w,c
 15241  001578  6EDA               	movwf	fsr2h,c
 15242  00157A  C05F  FFDE         	movff	_W,postinc2
 15243  00157E  C060  FFDD         	movff	_W+1,postdec2
 15244                           
 15245                           ;keypad.c: 94: }
 15246  001582  0012               	return	
 15247  001584                     i2l742:
 15248                           
 15249                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 15250  001584  0E78               	movlw	low _current_set2
 15251  001586  6E01               	movwf	strcmp@s1,c
 15252  001588  0E00               	movlw	high _current_set2
 15253  00158A  6E02               	movwf	strcmp@s1+1,c
 15254  00158C  0EC6               	movlw	low (STR_97+1)
 15255  00158E  6E03               	movwf	strcmp@s2,c
 15256  001590  0EFF               	movlw	high (STR_97+1)
 15257  001592  6E04               	movwf	strcmp@s2+1,c
 15258  001594  ECD0  F021         	call	_strcmp	;wreg free
 15259  001598  5001               	movf	?_strcmp,w,c
 15260  00159A  1002               	iorwf	?_strcmp+1,w,c
 15261  00159C  A4D8               	btfss	status,2,c
 15262  00159E  D069               	goto	i2l744
 15263                           
 15264                           ;keypad.c: 96: B = 1*number;
 15265  0015A0  C07D  F065         	movff	_number,_B
 15266  0015A4  C07E  F066         	movff	_number+1,_B+1
 15267                           
 15268                           ;keypad.c: 97: W = 1*number;
 15269  0015A8  C07D  F05F         	movff	_number,_W
 15270  0015AC  C07E  F060         	movff	_number+1,_W+1
 15271                           
 15272                           ;keypad.c: 98: N = 1*number;
 15273  0015B0  C07D  F063         	movff	_number,_N
 15274  0015B4  C07E  F064         	movff	_number+1,_N+1
 15275                           
 15276                           ;keypad.c: 99: total_number = 3*number;
 15277  0015B8  C07D  F001         	movff	_number,i2___wmul@multiplier
 15278  0015BC  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15279  0015C0  0E00               	movlw	0
 15280  0015C2  6E04               	movwf	i2___wmul@multiplicand+1,c
 15281  0015C4  0E03               	movlw	3
 15282  0015C6  6E03               	movwf	i2___wmul@multiplicand,c
 15283  0015C8  ECD6  F022         	call	i2___wmul	;wreg free
 15284  0015CC  C001  F069         	movff	?i2___wmul,_total_number
 15285  0015D0  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15286                           
 15287                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 15288  0015D4  90D8               	bcf	status,0,c
 15289  0015D6  346D               	rlcf	_counter_step,w,c
 15290  0015D8  6ED9               	movwf	fsr2l,c
 15291  0015DA  346E               	rlcf	_counter_step+1,w,c
 15292  0015DC  6EDA               	movwf	fsr2h,c
 15293  0015DE  0E46               	movlw	low _compartment_number
 15294  0015E0  26D9               	addwf	fsr2l,f,c
 15295  0015E2  0E00               	movlw	high _compartment_number
 15296  0015E4  22DA               	addwfc	fsr2h,f,c
 15297  0015E6  CFDE F007          	movff	postinc2,??_is_valid
 15298  0015EA  CFDD F008          	movff	postdec2,??_is_valid+1
 15299  0015EE  90D8               	bcf	status,0,c
 15300  0015F0  3607               	rlcf	??_is_valid,f,c
 15301  0015F2  3608               	rlcf	??_is_valid+1,f,c
 15302  0015F4  0E30               	movlw	low _B_array
 15303  0015F6  2407               	addwf	??_is_valid,w,c
 15304  0015F8  6ED9               	movwf	fsr2l,c
 15305  0015FA  0E01               	movlw	high _B_array
 15306  0015FC  2008               	addwfc	??_is_valid+1,w,c
 15307  0015FE  6EDA               	movwf	fsr2h,c
 15308  001600  C065  FFDE         	movff	_B,postinc2
 15309  001604  C066  FFDD         	movff	_B+1,postdec2
 15310                           
 15311                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 15312  001608  90D8               	bcf	status,0,c
 15313  00160A  346D               	rlcf	_counter_step,w,c
 15314  00160C  6ED9               	movwf	fsr2l,c
 15315  00160E  346E               	rlcf	_counter_step+1,w,c
 15316  001610  6EDA               	movwf	fsr2h,c
 15317  001612  0E46               	movlw	low _compartment_number
 15318  001614  26D9               	addwf	fsr2l,f,c
 15319  001616  0E00               	movlw	high _compartment_number
 15320  001618  22DA               	addwfc	fsr2h,f,c
 15321  00161A  CFDE F007          	movff	postinc2,??_is_valid
 15322  00161E  CFDD F008          	movff	postdec2,??_is_valid+1
 15323  001622  90D8               	bcf	status,0,c
 15324  001624  3607               	rlcf	??_is_valid,f,c
 15325  001626  3608               	rlcf	??_is_valid+1,f,c
 15326  001628  0E00               	movlw	low _W_array
 15327  00162A  2407               	addwf	??_is_valid,w,c
 15328  00162C  6ED9               	movwf	fsr2l,c
 15329  00162E  0E01               	movlw	high _W_array
 15330  001630  2008               	addwfc	??_is_valid+1,w,c
 15331  001632  6EDA               	movwf	fsr2h,c
 15332  001634  C05F  FFDE         	movff	_W,postinc2
 15333  001638  C060  FFDD         	movff	_W+1,postdec2
 15334                           
 15335                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 15336  00163C  90D8               	bcf	status,0,c
 15337  00163E  346D               	rlcf	_counter_step,w,c
 15338  001640  6ED9               	movwf	fsr2l,c
 15339  001642  346E               	rlcf	_counter_step+1,w,c
 15340  001644  6EDA               	movwf	fsr2h,c
 15341  001646  0E46               	movlw	low _compartment_number
 15342  001648  26D9               	addwf	fsr2l,f,c
 15343  00164A  0E00               	movlw	high _compartment_number
 15344  00164C  22DA               	addwfc	fsr2h,f,c
 15345  00164E  CFDE F007          	movff	postinc2,??_is_valid
 15346  001652  CFDD F008          	movff	postdec2,??_is_valid+1
 15347  001656  90D8               	bcf	status,0,c
 15348  001658  3607               	rlcf	??_is_valid,f,c
 15349  00165A  3608               	rlcf	??_is_valid+1,f,c
 15350  00165C  0E10               	movlw	low _N_array
 15351  00165E  2407               	addwf	??_is_valid,w,c
 15352  001660  6ED9               	movwf	fsr2l,c
 15353  001662  0E01               	movlw	high _N_array
 15354  001664  2008               	addwfc	??_is_valid+1,w,c
 15355  001666  6EDA               	movwf	fsr2h,c
 15356  001668  C063  FFDE         	movff	_N,postinc2
 15357  00166C  C064  FFDD         	movff	_N+1,postdec2
 15358                           
 15359                           ;keypad.c: 105: }
 15360  001670  0012               	return	
 15361  001672                     i2l744:
 15362                           
 15363                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 15364  001672  0E78               	movlw	low _current_set2
 15365  001674  6E01               	movwf	strcmp@s1,c
 15366  001676  0E00               	movlw	high _current_set2
 15367  001678  6E02               	movwf	strcmp@s1+1,c
 15368  00167A  0ED0               	movlw	low (STR_96+1)
 15369  00167C  6E03               	movwf	strcmp@s2,c
 15370  00167E  0EFF               	movlw	high (STR_96+1)
 15371  001680  6E04               	movwf	strcmp@s2+1,c
 15372  001682  ECD0  F021         	call	_strcmp	;wreg free
 15373  001686  5001               	movf	?_strcmp,w,c
 15374  001688  1002               	iorwf	?_strcmp+1,w,c
 15375  00168A  A4D8               	btfss	status,2,c
 15376  00168C  D069               	goto	i2l746
 15377                           
 15378                           ;keypad.c: 107: B = 1*number;
 15379  00168E  C07D  F065         	movff	_number,_B
 15380  001692  C07E  F066         	movff	_number+1,_B+1
 15381                           
 15382                           ;keypad.c: 108: S = 1*number;
 15383  001696  C07D  F061         	movff	_number,_S
 15384  00169A  C07E  F062         	movff	_number+1,_S+1
 15385                           
 15386                           ;keypad.c: 109: N = 1*number;
 15387  00169E  C07D  F063         	movff	_number,_N
 15388  0016A2  C07E  F064         	movff	_number+1,_N+1
 15389                           
 15390                           ;keypad.c: 110: total_number = 3*number;
 15391  0016A6  C07D  F001         	movff	_number,i2___wmul@multiplier
 15392  0016AA  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15393  0016AE  0E00               	movlw	0
 15394  0016B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 15395  0016B2  0E03               	movlw	3
 15396  0016B4  6E03               	movwf	i2___wmul@multiplicand,c
 15397  0016B6  ECD6  F022         	call	i2___wmul	;wreg free
 15398  0016BA  C001  F069         	movff	?i2___wmul,_total_number
 15399  0016BE  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15400                           
 15401                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 15402  0016C2  90D8               	bcf	status,0,c
 15403  0016C4  346D               	rlcf	_counter_step,w,c
 15404  0016C6  6ED9               	movwf	fsr2l,c
 15405  0016C8  346E               	rlcf	_counter_step+1,w,c
 15406  0016CA  6EDA               	movwf	fsr2h,c
 15407  0016CC  0E46               	movlw	low _compartment_number
 15408  0016CE  26D9               	addwf	fsr2l,f,c
 15409  0016D0  0E00               	movlw	high _compartment_number
 15410  0016D2  22DA               	addwfc	fsr2h,f,c
 15411  0016D4  CFDE F007          	movff	postinc2,??_is_valid
 15412  0016D8  CFDD F008          	movff	postdec2,??_is_valid+1
 15413  0016DC  90D8               	bcf	status,0,c
 15414  0016DE  3607               	rlcf	??_is_valid,f,c
 15415  0016E0  3608               	rlcf	??_is_valid+1,f,c
 15416  0016E2  0E30               	movlw	low _B_array
 15417  0016E4  2407               	addwf	??_is_valid,w,c
 15418  0016E6  6ED9               	movwf	fsr2l,c
 15419  0016E8  0E01               	movlw	high _B_array
 15420  0016EA  2008               	addwfc	??_is_valid+1,w,c
 15421  0016EC  6EDA               	movwf	fsr2h,c
 15422  0016EE  C065  FFDE         	movff	_B,postinc2
 15423  0016F2  C066  FFDD         	movff	_B+1,postdec2
 15424                           
 15425                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 15426  0016F6  90D8               	bcf	status,0,c
 15427  0016F8  346D               	rlcf	_counter_step,w,c
 15428  0016FA  6ED9               	movwf	fsr2l,c
 15429  0016FC  346E               	rlcf	_counter_step+1,w,c
 15430  0016FE  6EDA               	movwf	fsr2h,c
 15431  001700  0E46               	movlw	low _compartment_number
 15432  001702  26D9               	addwf	fsr2l,f,c
 15433  001704  0E00               	movlw	high _compartment_number
 15434  001706  22DA               	addwfc	fsr2h,f,c
 15435  001708  CFDE F007          	movff	postinc2,??_is_valid
 15436  00170C  CFDD F008          	movff	postdec2,??_is_valid+1
 15437  001710  90D8               	bcf	status,0,c
 15438  001712  3607               	rlcf	??_is_valid,f,c
 15439  001714  3608               	rlcf	??_is_valid+1,f,c
 15440  001716  0E20               	movlw	low _S_array
 15441  001718  2407               	addwf	??_is_valid,w,c
 15442  00171A  6ED9               	movwf	fsr2l,c
 15443  00171C  0E01               	movlw	high _S_array
 15444  00171E  2008               	addwfc	??_is_valid+1,w,c
 15445  001720  6EDA               	movwf	fsr2h,c
 15446  001722  C061  FFDE         	movff	_S,postinc2
 15447  001726  C062  FFDD         	movff	_S+1,postdec2
 15448                           
 15449                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
 15450  00172A  90D8               	bcf	status,0,c
 15451  00172C  346D               	rlcf	_counter_step,w,c
 15452  00172E  6ED9               	movwf	fsr2l,c
 15453  001730  346E               	rlcf	_counter_step+1,w,c
 15454  001732  6EDA               	movwf	fsr2h,c
 15455  001734  0E46               	movlw	low _compartment_number
 15456  001736  26D9               	addwf	fsr2l,f,c
 15457  001738  0E00               	movlw	high _compartment_number
 15458  00173A  22DA               	addwfc	fsr2h,f,c
 15459  00173C  CFDE F007          	movff	postinc2,??_is_valid
 15460  001740  CFDD F008          	movff	postdec2,??_is_valid+1
 15461  001744  90D8               	bcf	status,0,c
 15462  001746  3607               	rlcf	??_is_valid,f,c
 15463  001748  3608               	rlcf	??_is_valid+1,f,c
 15464  00174A  0E10               	movlw	low _N_array
 15465  00174C  2407               	addwf	??_is_valid,w,c
 15466  00174E  6ED9               	movwf	fsr2l,c
 15467  001750  0E01               	movlw	high _N_array
 15468  001752  2008               	addwfc	??_is_valid+1,w,c
 15469  001754  6EDA               	movwf	fsr2h,c
 15470  001756  C063  FFDE         	movff	_N,postinc2
 15471  00175A  C064  FFDD         	movff	_N+1,postdec2
 15472                           
 15473                           ;keypad.c: 116: }
 15474  00175E  0012               	return	
 15475  001760                     i2l746:
 15476                           
 15477                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 15478  001760  0E78               	movlw	low _current_set2
 15479  001762  6E01               	movwf	strcmp@s1,c
 15480  001764  0E00               	movlw	high _current_set2
 15481  001766  6E02               	movwf	strcmp@s1+1,c
 15482  001768  0EF4               	movlw	low STR_93
 15483  00176A  6E03               	movwf	strcmp@s2,c
 15484  00176C  0EFF               	movlw	high STR_93
 15485  00176E  6E04               	movwf	strcmp@s2+1,c
 15486  001770  ECD0  F021         	call	_strcmp	;wreg free
 15487  001774  5001               	movf	?_strcmp,w,c
 15488  001776  1002               	iorwf	?_strcmp+1,w,c
 15489  001778  A4D8               	btfss	status,2,c
 15490  00177A  D04C               	goto	i2l748
 15491                           
 15492                           ;keypad.c: 118: B = 1*number;
 15493  00177C  C07D  F065         	movff	_number,_B
 15494  001780  C07E  F066         	movff	_number+1,_B+1
 15495                           
 15496                           ;keypad.c: 119: W = 2*number;
 15497  001784  90D8               	bcf	status,0,c
 15498  001786  347D               	rlcf	_number,w,c
 15499  001788  6E5F               	movwf	_W,c
 15500  00178A  347E               	rlcf	_number+1,w,c
 15501  00178C  6E60               	movwf	_W+1,c
 15502                           
 15503                           ;keypad.c: 120: total_number = 3*number;
 15504  00178E  C07D  F001         	movff	_number,i2___wmul@multiplier
 15505  001792  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15506  001796  0E00               	movlw	0
 15507  001798  6E04               	movwf	i2___wmul@multiplicand+1,c
 15508  00179A  0E03               	movlw	3
 15509  00179C  6E03               	movwf	i2___wmul@multiplicand,c
 15510  00179E  ECD6  F022         	call	i2___wmul	;wreg free
 15511  0017A2  C001  F069         	movff	?i2___wmul,_total_number
 15512  0017A6  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15513                           
 15514                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 15515  0017AA  90D8               	bcf	status,0,c
 15516  0017AC  346D               	rlcf	_counter_step,w,c
 15517  0017AE  6ED9               	movwf	fsr2l,c
 15518  0017B0  346E               	rlcf	_counter_step+1,w,c
 15519  0017B2  6EDA               	movwf	fsr2h,c
 15520  0017B4  0E46               	movlw	low _compartment_number
 15521  0017B6  26D9               	addwf	fsr2l,f,c
 15522  0017B8  0E00               	movlw	high _compartment_number
 15523  0017BA  22DA               	addwfc	fsr2h,f,c
 15524  0017BC  CFDE F007          	movff	postinc2,??_is_valid
 15525  0017C0  CFDD F008          	movff	postdec2,??_is_valid+1
 15526  0017C4  90D8               	bcf	status,0,c
 15527  0017C6  3607               	rlcf	??_is_valid,f,c
 15528  0017C8  3608               	rlcf	??_is_valid+1,f,c
 15529  0017CA  0E30               	movlw	low _B_array
 15530  0017CC  2407               	addwf	??_is_valid,w,c
 15531  0017CE  6ED9               	movwf	fsr2l,c
 15532  0017D0  0E01               	movlw	high _B_array
 15533  0017D2  2008               	addwfc	??_is_valid+1,w,c
 15534  0017D4  6EDA               	movwf	fsr2h,c
 15535  0017D6  C065  FFDE         	movff	_B,postinc2
 15536  0017DA  C066  FFDD         	movff	_B+1,postdec2
 15537                           
 15538                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 15539  0017DE  90D8               	bcf	status,0,c
 15540  0017E0  346D               	rlcf	_counter_step,w,c
 15541  0017E2  6ED9               	movwf	fsr2l,c
 15542  0017E4  346E               	rlcf	_counter_step+1,w,c
 15543  0017E6  6EDA               	movwf	fsr2h,c
 15544  0017E8  0E46               	movlw	low _compartment_number
 15545  0017EA  26D9               	addwf	fsr2l,f,c
 15546  0017EC  0E00               	movlw	high _compartment_number
 15547  0017EE  22DA               	addwfc	fsr2h,f,c
 15548  0017F0  CFDE F007          	movff	postinc2,??_is_valid
 15549  0017F4  CFDD F008          	movff	postdec2,??_is_valid+1
 15550  0017F8  90D8               	bcf	status,0,c
 15551  0017FA  3607               	rlcf	??_is_valid,f,c
 15552  0017FC  3608               	rlcf	??_is_valid+1,f,c
 15553  0017FE  0E00               	movlw	low _W_array
 15554  001800  2407               	addwf	??_is_valid,w,c
 15555  001802  6ED9               	movwf	fsr2l,c
 15556  001804  0E01               	movlw	high _W_array
 15557  001806  2008               	addwfc	??_is_valid+1,w,c
 15558  001808  6EDA               	movwf	fsr2h,c
 15559  00180A  C05F  FFDE         	movff	_W,postinc2
 15560  00180E  C060  FFDD         	movff	_W+1,postdec2
 15561                           
 15562                           ;keypad.c: 124: }
 15563  001812  0012               	return	
 15564  001814                     i2l748:
 15565                           
 15566                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 15567  001814  0E78               	movlw	low _current_set2
 15568  001816  6E01               	movwf	strcmp@s1,c
 15569  001818  0E00               	movlw	high _current_set2
 15570  00181A  6E02               	movwf	strcmp@s1+1,c
 15571  00181C  0ED4               	movlw	low STR_94
 15572  00181E  6E03               	movwf	strcmp@s2,c
 15573  001820  0EFF               	movlw	high STR_94
 15574  001822  6E04               	movwf	strcmp@s2+1,c
 15575  001824  ECD0  F021         	call	_strcmp	;wreg free
 15576  001828  5001               	movf	?_strcmp,w,c
 15577  00182A  1002               	iorwf	?_strcmp+1,w,c
 15578  00182C  A4D8               	btfss	status,2,c
 15579  00182E  D06A               	goto	i2l750
 15580                           
 15581                           ;keypad.c: 126: B = 1*number;
 15582  001830  C07D  F065         	movff	_number,_B
 15583  001834  C07E  F066         	movff	_number+1,_B+1
 15584                           
 15585                           ;keypad.c: 127: N = 1*number;
 15586  001838  C07D  F063         	movff	_number,_N
 15587  00183C  C07E  F064         	movff	_number+1,_N+1
 15588                           
 15589                           ;keypad.c: 128: W = 2*number;
 15590  001840  90D8               	bcf	status,0,c
 15591  001842  347D               	rlcf	_number,w,c
 15592  001844  6E5F               	movwf	_W,c
 15593  001846  347E               	rlcf	_number+1,w,c
 15594  001848  6E60               	movwf	_W+1,c
 15595                           
 15596                           ;keypad.c: 129: total_number = 4*number;
 15597  00184A  C07D  F007         	movff	_number,??_is_valid
 15598  00184E  C07E  F008         	movff	_number+1,??_is_valid+1
 15599  001852  90D8               	bcf	status,0,c
 15600  001854  3607               	rlcf	??_is_valid,f,c
 15601  001856  3608               	rlcf	??_is_valid+1,f,c
 15602  001858  90D8               	bcf	status,0,c
 15603  00185A  3607               	rlcf	??_is_valid,f,c
 15604  00185C  3608               	rlcf	??_is_valid+1,f,c
 15605  00185E  C007  F069         	movff	??_is_valid,_total_number
 15606  001862  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15607                           
 15608                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 15609  001866  90D8               	bcf	status,0,c
 15610  001868  346D               	rlcf	_counter_step,w,c
 15611  00186A  6ED9               	movwf	fsr2l,c
 15612  00186C  346E               	rlcf	_counter_step+1,w,c
 15613  00186E  6EDA               	movwf	fsr2h,c
 15614  001870  0E46               	movlw	low _compartment_number
 15615  001872  26D9               	addwf	fsr2l,f,c
 15616  001874  0E00               	movlw	high _compartment_number
 15617  001876  22DA               	addwfc	fsr2h,f,c
 15618  001878  CFDE F007          	movff	postinc2,??_is_valid
 15619  00187C  CFDD F008          	movff	postdec2,??_is_valid+1
 15620  001880  90D8               	bcf	status,0,c
 15621  001882  3607               	rlcf	??_is_valid,f,c
 15622  001884  3608               	rlcf	??_is_valid+1,f,c
 15623  001886  0E30               	movlw	low _B_array
 15624  001888  2407               	addwf	??_is_valid,w,c
 15625  00188A  6ED9               	movwf	fsr2l,c
 15626  00188C  0E01               	movlw	high _B_array
 15627  00188E  2008               	addwfc	??_is_valid+1,w,c
 15628  001890  6EDA               	movwf	fsr2h,c
 15629  001892  C065  FFDE         	movff	_B,postinc2
 15630  001896  C066  FFDD         	movff	_B+1,postdec2
 15631                           
 15632                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 15633  00189A  90D8               	bcf	status,0,c
 15634  00189C  346D               	rlcf	_counter_step,w,c
 15635  00189E  6ED9               	movwf	fsr2l,c
 15636  0018A0  346E               	rlcf	_counter_step+1,w,c
 15637  0018A2  6EDA               	movwf	fsr2h,c
 15638  0018A4  0E46               	movlw	low _compartment_number
 15639  0018A6  26D9               	addwf	fsr2l,f,c
 15640  0018A8  0E00               	movlw	high _compartment_number
 15641  0018AA  22DA               	addwfc	fsr2h,f,c
 15642  0018AC  CFDE F007          	movff	postinc2,??_is_valid
 15643  0018B0  CFDD F008          	movff	postdec2,??_is_valid+1
 15644  0018B4  90D8               	bcf	status,0,c
 15645  0018B6  3607               	rlcf	??_is_valid,f,c
 15646  0018B8  3608               	rlcf	??_is_valid+1,f,c
 15647  0018BA  0E10               	movlw	low _N_array
 15648  0018BC  2407               	addwf	??_is_valid,w,c
 15649  0018BE  6ED9               	movwf	fsr2l,c
 15650  0018C0  0E01               	movlw	high _N_array
 15651  0018C2  2008               	addwfc	??_is_valid+1,w,c
 15652  0018C4  6EDA               	movwf	fsr2h,c
 15653  0018C6  C063  FFDE         	movff	_N,postinc2
 15654  0018CA  C064  FFDD         	movff	_N+1,postdec2
 15655                           
 15656                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 15657  0018CE  90D8               	bcf	status,0,c
 15658  0018D0  346D               	rlcf	_counter_step,w,c
 15659  0018D2  6ED9               	movwf	fsr2l,c
 15660  0018D4  346E               	rlcf	_counter_step+1,w,c
 15661  0018D6  6EDA               	movwf	fsr2h,c
 15662  0018D8  0E46               	movlw	low _compartment_number
 15663  0018DA  26D9               	addwf	fsr2l,f,c
 15664  0018DC  0E00               	movlw	high _compartment_number
 15665  0018DE  22DA               	addwfc	fsr2h,f,c
 15666  0018E0  CFDE F007          	movff	postinc2,??_is_valid
 15667  0018E4  CFDD F008          	movff	postdec2,??_is_valid+1
 15668  0018E8  90D8               	bcf	status,0,c
 15669  0018EA  3607               	rlcf	??_is_valid,f,c
 15670  0018EC  3608               	rlcf	??_is_valid+1,f,c
 15671  0018EE  0E00               	movlw	low _W_array
 15672  0018F0  2407               	addwf	??_is_valid,w,c
 15673  0018F2  6ED9               	movwf	fsr2l,c
 15674  0018F4  0E01               	movlw	high _W_array
 15675  0018F6  2008               	addwfc	??_is_valid+1,w,c
 15676  0018F8  6EDA               	movwf	fsr2h,c
 15677  0018FA  C05F  FFDE         	movff	_W,postinc2
 15678  0018FE  C060  FFDD         	movff	_W+1,postdec2
 15679                           
 15680                           ;keypad.c: 134: }
 15681  001902  0012               	return	
 15682  001904                     i2l750:
 15683                           
 15684                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 15685  001904  0E78               	movlw	low _current_set2
 15686  001906  6E01               	movwf	strcmp@s1,c
 15687  001908  0E00               	movlw	high _current_set2
 15688  00190A  6E02               	movwf	strcmp@s1+1,c
 15689  00190C  0ED9               	movlw	low STR_95
 15690  00190E  6E03               	movwf	strcmp@s2,c
 15691  001910  0EFF               	movlw	high STR_95
 15692  001912  6E04               	movwf	strcmp@s2+1,c
 15693  001914  ECD0  F021         	call	_strcmp	;wreg free
 15694  001918  5001               	movf	?_strcmp,w,c
 15695  00191A  1002               	iorwf	?_strcmp+1,w,c
 15696  00191C  A4D8               	btfss	status,2,c
 15697  00191E  D06A               	goto	i2l752
 15698                           
 15699                           ;keypad.c: 136: B = 1*number;
 15700  001920  C07D  F065         	movff	_number,_B
 15701  001924  C07E  F066         	movff	_number+1,_B+1
 15702                           
 15703                           ;keypad.c: 137: S = 1*number;
 15704  001928  C07D  F061         	movff	_number,_S
 15705  00192C  C07E  F062         	movff	_number+1,_S+1
 15706                           
 15707                           ;keypad.c: 138: W = 2*number;
 15708  001930  90D8               	bcf	status,0,c
 15709  001932  347D               	rlcf	_number,w,c
 15710  001934  6E5F               	movwf	_W,c
 15711  001936  347E               	rlcf	_number+1,w,c
 15712  001938  6E60               	movwf	_W+1,c
 15713                           
 15714                           ;keypad.c: 139: total_number = 4*number;
 15715  00193A  C07D  F007         	movff	_number,??_is_valid
 15716  00193E  C07E  F008         	movff	_number+1,??_is_valid+1
 15717  001942  90D8               	bcf	status,0,c
 15718  001944  3607               	rlcf	??_is_valid,f,c
 15719  001946  3608               	rlcf	??_is_valid+1,f,c
 15720  001948  90D8               	bcf	status,0,c
 15721  00194A  3607               	rlcf	??_is_valid,f,c
 15722  00194C  3608               	rlcf	??_is_valid+1,f,c
 15723  00194E  C007  F069         	movff	??_is_valid,_total_number
 15724  001952  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15725                           
 15726                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 15727  001956  90D8               	bcf	status,0,c
 15728  001958  346D               	rlcf	_counter_step,w,c
 15729  00195A  6ED9               	movwf	fsr2l,c
 15730  00195C  346E               	rlcf	_counter_step+1,w,c
 15731  00195E  6EDA               	movwf	fsr2h,c
 15732  001960  0E46               	movlw	low _compartment_number
 15733  001962  26D9               	addwf	fsr2l,f,c
 15734  001964  0E00               	movlw	high _compartment_number
 15735  001966  22DA               	addwfc	fsr2h,f,c
 15736  001968  CFDE F007          	movff	postinc2,??_is_valid
 15737  00196C  CFDD F008          	movff	postdec2,??_is_valid+1
 15738  001970  90D8               	bcf	status,0,c
 15739  001972  3607               	rlcf	??_is_valid,f,c
 15740  001974  3608               	rlcf	??_is_valid+1,f,c
 15741  001976  0E30               	movlw	low _B_array
 15742  001978  2407               	addwf	??_is_valid,w,c
 15743  00197A  6ED9               	movwf	fsr2l,c
 15744  00197C  0E01               	movlw	high _B_array
 15745  00197E  2008               	addwfc	??_is_valid+1,w,c
 15746  001980  6EDA               	movwf	fsr2h,c
 15747  001982  C065  FFDE         	movff	_B,postinc2
 15748  001986  C066  FFDD         	movff	_B+1,postdec2
 15749                           
 15750                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 15751  00198A  90D8               	bcf	status,0,c
 15752  00198C  346D               	rlcf	_counter_step,w,c
 15753  00198E  6ED9               	movwf	fsr2l,c
 15754  001990  346E               	rlcf	_counter_step+1,w,c
 15755  001992  6EDA               	movwf	fsr2h,c
 15756  001994  0E46               	movlw	low _compartment_number
 15757  001996  26D9               	addwf	fsr2l,f,c
 15758  001998  0E00               	movlw	high _compartment_number
 15759  00199A  22DA               	addwfc	fsr2h,f,c
 15760  00199C  CFDE F007          	movff	postinc2,??_is_valid
 15761  0019A0  CFDD F008          	movff	postdec2,??_is_valid+1
 15762  0019A4  90D8               	bcf	status,0,c
 15763  0019A6  3607               	rlcf	??_is_valid,f,c
 15764  0019A8  3608               	rlcf	??_is_valid+1,f,c
 15765  0019AA  0E20               	movlw	low _S_array
 15766  0019AC  2407               	addwf	??_is_valid,w,c
 15767  0019AE  6ED9               	movwf	fsr2l,c
 15768  0019B0  0E01               	movlw	high _S_array
 15769  0019B2  2008               	addwfc	??_is_valid+1,w,c
 15770  0019B4  6EDA               	movwf	fsr2h,c
 15771  0019B6  C061  FFDE         	movff	_S,postinc2
 15772  0019BA  C062  FFDD         	movff	_S+1,postdec2
 15773                           
 15774                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 15775  0019BE  90D8               	bcf	status,0,c
 15776  0019C0  346D               	rlcf	_counter_step,w,c
 15777  0019C2  6ED9               	movwf	fsr2l,c
 15778  0019C4  346E               	rlcf	_counter_step+1,w,c
 15779  0019C6  6EDA               	movwf	fsr2h,c
 15780  0019C8  0E46               	movlw	low _compartment_number
 15781  0019CA  26D9               	addwf	fsr2l,f,c
 15782  0019CC  0E00               	movlw	high _compartment_number
 15783  0019CE  22DA               	addwfc	fsr2h,f,c
 15784  0019D0  CFDE F007          	movff	postinc2,??_is_valid
 15785  0019D4  CFDD F008          	movff	postdec2,??_is_valid+1
 15786  0019D8  90D8               	bcf	status,0,c
 15787  0019DA  3607               	rlcf	??_is_valid,f,c
 15788  0019DC  3608               	rlcf	??_is_valid+1,f,c
 15789  0019DE  0E00               	movlw	low _W_array
 15790  0019E0  2407               	addwf	??_is_valid,w,c
 15791  0019E2  6ED9               	movwf	fsr2l,c
 15792  0019E4  0E01               	movlw	high _W_array
 15793  0019E6  2008               	addwfc	??_is_valid+1,w,c
 15794  0019E8  6EDA               	movwf	fsr2h,c
 15795  0019EA  C05F  FFDE         	movff	_W,postinc2
 15796  0019EE  C060  FFDD         	movff	_W+1,postdec2
 15797                           
 15798                           ;keypad.c: 145: }
 15799  0019F2  0012               	return	
 15800  0019F4                     i2l752:
 15801                           
 15802                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 15803  0019F4  0E78               	movlw	low _current_set2
 15804  0019F6  6E01               	movwf	strcmp@s1,c
 15805  0019F8  0E00               	movlw	high _current_set2
 15806  0019FA  6E02               	movwf	strcmp@s1+1,c
 15807  0019FC  0ECF               	movlw	low STR_96
 15808  0019FE  6E03               	movwf	strcmp@s2,c
 15809  001A00  0EFF               	movlw	high STR_96
 15810  001A02  6E04               	movwf	strcmp@s2+1,c
 15811  001A04  ECD0  F021         	call	_strcmp	;wreg free
 15812  001A08  5001               	movf	?_strcmp,w,c
 15813  001A0A  1002               	iorwf	?_strcmp+1,w,c
 15814  001A0C  A4D8               	btfss	status,2,c
 15815  001A0E  D06A               	goto	i2l754
 15816                           
 15817                           ;keypad.c: 147: B = 2*number;
 15818  001A10  90D8               	bcf	status,0,c
 15819  001A12  347D               	rlcf	_number,w,c
 15820  001A14  6E65               	movwf	_B,c
 15821  001A16  347E               	rlcf	_number+1,w,c
 15822  001A18  6E66               	movwf	_B+1,c
 15823                           
 15824                           ;keypad.c: 148: S = 1*number;
 15825  001A1A  C07D  F061         	movff	_number,_S
 15826  001A1E  C07E  F062         	movff	_number+1,_S+1
 15827                           
 15828                           ;keypad.c: 149: W = number;
 15829  001A22  C07D  F05F         	movff	_number,_W
 15830  001A26  C07E  F060         	movff	_number+1,_W+1
 15831                           
 15832                           ;keypad.c: 150: total_number = 4*number;
 15833  001A2A  C07D  F007         	movff	_number,??_is_valid
 15834  001A2E  C07E  F008         	movff	_number+1,??_is_valid+1
 15835  001A32  90D8               	bcf	status,0,c
 15836  001A34  3607               	rlcf	??_is_valid,f,c
 15837  001A36  3608               	rlcf	??_is_valid+1,f,c
 15838  001A38  90D8               	bcf	status,0,c
 15839  001A3A  3607               	rlcf	??_is_valid,f,c
 15840  001A3C  3608               	rlcf	??_is_valid+1,f,c
 15841  001A3E  C007  F069         	movff	??_is_valid,_total_number
 15842  001A42  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15843                           
 15844                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 15845  001A46  90D8               	bcf	status,0,c
 15846  001A48  346D               	rlcf	_counter_step,w,c
 15847  001A4A  6ED9               	movwf	fsr2l,c
 15848  001A4C  346E               	rlcf	_counter_step+1,w,c
 15849  001A4E  6EDA               	movwf	fsr2h,c
 15850  001A50  0E46               	movlw	low _compartment_number
 15851  001A52  26D9               	addwf	fsr2l,f,c
 15852  001A54  0E00               	movlw	high _compartment_number
 15853  001A56  22DA               	addwfc	fsr2h,f,c
 15854  001A58  CFDE F007          	movff	postinc2,??_is_valid
 15855  001A5C  CFDD F008          	movff	postdec2,??_is_valid+1
 15856  001A60  90D8               	bcf	status,0,c
 15857  001A62  3607               	rlcf	??_is_valid,f,c
 15858  001A64  3608               	rlcf	??_is_valid+1,f,c
 15859  001A66  0E30               	movlw	low _B_array
 15860  001A68  2407               	addwf	??_is_valid,w,c
 15861  001A6A  6ED9               	movwf	fsr2l,c
 15862  001A6C  0E01               	movlw	high _B_array
 15863  001A6E  2008               	addwfc	??_is_valid+1,w,c
 15864  001A70  6EDA               	movwf	fsr2h,c
 15865  001A72  C065  FFDE         	movff	_B,postinc2
 15866  001A76  C066  FFDD         	movff	_B+1,postdec2
 15867                           
 15868                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 15869  001A7A  90D8               	bcf	status,0,c
 15870  001A7C  346D               	rlcf	_counter_step,w,c
 15871  001A7E  6ED9               	movwf	fsr2l,c
 15872  001A80  346E               	rlcf	_counter_step+1,w,c
 15873  001A82  6EDA               	movwf	fsr2h,c
 15874  001A84  0E46               	movlw	low _compartment_number
 15875  001A86  26D9               	addwf	fsr2l,f,c
 15876  001A88  0E00               	movlw	high _compartment_number
 15877  001A8A  22DA               	addwfc	fsr2h,f,c
 15878  001A8C  CFDE F007          	movff	postinc2,??_is_valid
 15879  001A90  CFDD F008          	movff	postdec2,??_is_valid+1
 15880  001A94  90D8               	bcf	status,0,c
 15881  001A96  3607               	rlcf	??_is_valid,f,c
 15882  001A98  3608               	rlcf	??_is_valid+1,f,c
 15883  001A9A  0E20               	movlw	low _S_array
 15884  001A9C  2407               	addwf	??_is_valid,w,c
 15885  001A9E  6ED9               	movwf	fsr2l,c
 15886  001AA0  0E01               	movlw	high _S_array
 15887  001AA2  2008               	addwfc	??_is_valid+1,w,c
 15888  001AA4  6EDA               	movwf	fsr2h,c
 15889  001AA6  C061  FFDE         	movff	_S,postinc2
 15890  001AAA  C062  FFDD         	movff	_S+1,postdec2
 15891                           
 15892                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 15893  001AAE  90D8               	bcf	status,0,c
 15894  001AB0  346D               	rlcf	_counter_step,w,c
 15895  001AB2  6ED9               	movwf	fsr2l,c
 15896  001AB4  346E               	rlcf	_counter_step+1,w,c
 15897  001AB6  6EDA               	movwf	fsr2h,c
 15898  001AB8  0E46               	movlw	low _compartment_number
 15899  001ABA  26D9               	addwf	fsr2l,f,c
 15900  001ABC  0E00               	movlw	high _compartment_number
 15901  001ABE  22DA               	addwfc	fsr2h,f,c
 15902  001AC0  CFDE F007          	movff	postinc2,??_is_valid
 15903  001AC4  CFDD F008          	movff	postdec2,??_is_valid+1
 15904  001AC8  90D8               	bcf	status,0,c
 15905  001ACA  3607               	rlcf	??_is_valid,f,c
 15906  001ACC  3608               	rlcf	??_is_valid+1,f,c
 15907  001ACE  0E00               	movlw	low _W_array
 15908  001AD0  2407               	addwf	??_is_valid,w,c
 15909  001AD2  6ED9               	movwf	fsr2l,c
 15910  001AD4  0E01               	movlw	high _W_array
 15911  001AD6  2008               	addwfc	??_is_valid+1,w,c
 15912  001AD8  6EDA               	movwf	fsr2h,c
 15913  001ADA  C05F  FFDE         	movff	_W,postinc2
 15914  001ADE  C060  FFDD         	movff	_W+1,postdec2
 15915                           
 15916                           ;keypad.c: 155: }
 15917  001AE2  0012               	return	
 15918  001AE4                     i2l754:
 15919                           
 15920                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 15921  001AE4  0E78               	movlw	low _current_set2
 15922  001AE6  6E01               	movwf	strcmp@s1,c
 15923  001AE8  0E00               	movlw	high _current_set2
 15924  001AEA  6E02               	movwf	strcmp@s1+1,c
 15925  001AEC  0EC5               	movlw	low STR_97
 15926  001AEE  6E03               	movwf	strcmp@s2,c
 15927  001AF0  0EFF               	movlw	high STR_97
 15928  001AF2  6E04               	movwf	strcmp@s2+1,c
 15929  001AF4  ECD0  F021         	call	_strcmp	;wreg free
 15930  001AF8  5001               	movf	?_strcmp,w,c
 15931  001AFA  1002               	iorwf	?_strcmp+1,w,c
 15932  001AFC  A4D8               	btfss	status,2,c
 15933  001AFE  D06A               	goto	i2l756
 15934                           
 15935                           ;keypad.c: 157: B = 2*number;
 15936  001B00  90D8               	bcf	status,0,c
 15937  001B02  347D               	rlcf	_number,w,c
 15938  001B04  6E65               	movwf	_B,c
 15939  001B06  347E               	rlcf	_number+1,w,c
 15940  001B08  6E66               	movwf	_B+1,c
 15941                           
 15942                           ;keypad.c: 158: N = 1*number;
 15943  001B0A  C07D  F063         	movff	_number,_N
 15944  001B0E  C07E  F064         	movff	_number+1,_N+1
 15945                           
 15946                           ;keypad.c: 159: W = 1*number;
 15947  001B12  C07D  F05F         	movff	_number,_W
 15948  001B16  C07E  F060         	movff	_number+1,_W+1
 15949                           
 15950                           ;keypad.c: 160: total_number = 4*number;
 15951  001B1A  C07D  F007         	movff	_number,??_is_valid
 15952  001B1E  C07E  F008         	movff	_number+1,??_is_valid+1
 15953  001B22  90D8               	bcf	status,0,c
 15954  001B24  3607               	rlcf	??_is_valid,f,c
 15955  001B26  3608               	rlcf	??_is_valid+1,f,c
 15956  001B28  90D8               	bcf	status,0,c
 15957  001B2A  3607               	rlcf	??_is_valid,f,c
 15958  001B2C  3608               	rlcf	??_is_valid+1,f,c
 15959  001B2E  C007  F069         	movff	??_is_valid,_total_number
 15960  001B32  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15961                           
 15962                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 15963  001B36  90D8               	bcf	status,0,c
 15964  001B38  346D               	rlcf	_counter_step,w,c
 15965  001B3A  6ED9               	movwf	fsr2l,c
 15966  001B3C  346E               	rlcf	_counter_step+1,w,c
 15967  001B3E  6EDA               	movwf	fsr2h,c
 15968  001B40  0E46               	movlw	low _compartment_number
 15969  001B42  26D9               	addwf	fsr2l,f,c
 15970  001B44  0E00               	movlw	high _compartment_number
 15971  001B46  22DA               	addwfc	fsr2h,f,c
 15972  001B48  CFDE F007          	movff	postinc2,??_is_valid
 15973  001B4C  CFDD F008          	movff	postdec2,??_is_valid+1
 15974  001B50  90D8               	bcf	status,0,c
 15975  001B52  3607               	rlcf	??_is_valid,f,c
 15976  001B54  3608               	rlcf	??_is_valid+1,f,c
 15977  001B56  0E30               	movlw	low _B_array
 15978  001B58  2407               	addwf	??_is_valid,w,c
 15979  001B5A  6ED9               	movwf	fsr2l,c
 15980  001B5C  0E01               	movlw	high _B_array
 15981  001B5E  2008               	addwfc	??_is_valid+1,w,c
 15982  001B60  6EDA               	movwf	fsr2h,c
 15983  001B62  C065  FFDE         	movff	_B,postinc2
 15984  001B66  C066  FFDD         	movff	_B+1,postdec2
 15985                           
 15986                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 15987  001B6A  90D8               	bcf	status,0,c
 15988  001B6C  346D               	rlcf	_counter_step,w,c
 15989  001B6E  6ED9               	movwf	fsr2l,c
 15990  001B70  346E               	rlcf	_counter_step+1,w,c
 15991  001B72  6EDA               	movwf	fsr2h,c
 15992  001B74  0E46               	movlw	low _compartment_number
 15993  001B76  26D9               	addwf	fsr2l,f,c
 15994  001B78  0E00               	movlw	high _compartment_number
 15995  001B7A  22DA               	addwfc	fsr2h,f,c
 15996  001B7C  CFDE F007          	movff	postinc2,??_is_valid
 15997  001B80  CFDD F008          	movff	postdec2,??_is_valid+1
 15998  001B84  90D8               	bcf	status,0,c
 15999  001B86  3607               	rlcf	??_is_valid,f,c
 16000  001B88  3608               	rlcf	??_is_valid+1,f,c
 16001  001B8A  0E10               	movlw	low _N_array
 16002  001B8C  2407               	addwf	??_is_valid,w,c
 16003  001B8E  6ED9               	movwf	fsr2l,c
 16004  001B90  0E01               	movlw	high _N_array
 16005  001B92  2008               	addwfc	??_is_valid+1,w,c
 16006  001B94  6EDA               	movwf	fsr2h,c
 16007  001B96  C063  FFDE         	movff	_N,postinc2
 16008  001B9A  C064  FFDD         	movff	_N+1,postdec2
 16009                           
 16010                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 16011  001B9E  90D8               	bcf	status,0,c
 16012  001BA0  346D               	rlcf	_counter_step,w,c
 16013  001BA2  6ED9               	movwf	fsr2l,c
 16014  001BA4  346E               	rlcf	_counter_step+1,w,c
 16015  001BA6  6EDA               	movwf	fsr2h,c
 16016  001BA8  0E46               	movlw	low _compartment_number
 16017  001BAA  26D9               	addwf	fsr2l,f,c
 16018  001BAC  0E00               	movlw	high _compartment_number
 16019  001BAE  22DA               	addwfc	fsr2h,f,c
 16020  001BB0  CFDE F007          	movff	postinc2,??_is_valid
 16021  001BB4  CFDD F008          	movff	postdec2,??_is_valid+1
 16022  001BB8  90D8               	bcf	status,0,c
 16023  001BBA  3607               	rlcf	??_is_valid,f,c
 16024  001BBC  3608               	rlcf	??_is_valid+1,f,c
 16025  001BBE  0E00               	movlw	low _W_array
 16026  001BC0  2407               	addwf	??_is_valid,w,c
 16027  001BC2  6ED9               	movwf	fsr2l,c
 16028  001BC4  0E01               	movlw	high _W_array
 16029  001BC6  2008               	addwfc	??_is_valid+1,w,c
 16030  001BC8  6EDA               	movwf	fsr2h,c
 16031  001BCA  C05F  FFDE         	movff	_W,postinc2
 16032  001BCE  C060  FFDD         	movff	_W+1,postdec2
 16033                           
 16034                           ;keypad.c: 165: }
 16035  001BD2  0012               	return	
 16036  001BD4                     i2l756:
 16037                           
 16038                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 16039  001BD4  0E78               	movlw	low _current_set2
 16040  001BD6  6E01               	movwf	strcmp@s1,c
 16041  001BD8  0E00               	movlw	high _current_set2
 16042  001BDA  6E02               	movwf	strcmp@s1+1,c
 16043  001BDC  0ECA               	movlw	low STR_98
 16044  001BDE  6E03               	movwf	strcmp@s2,c
 16045  001BE0  0EFF               	movlw	high STR_98
 16046  001BE2  6E04               	movwf	strcmp@s2+1,c
 16047  001BE4  ECD0  F021         	call	_strcmp	;wreg free
 16048  001BE8  5001               	movf	?_strcmp,w,c
 16049  001BEA  1002               	iorwf	?_strcmp+1,w,c
 16050  001BEC  A4D8               	btfss	status,2,c
 16051  001BEE  D06A               	goto	i2l758
 16052                           
 16053                           ;keypad.c: 167: B = 1*number;
 16054  001BF0  C07D  F065         	movff	_number,_B
 16055  001BF4  C07E  F066         	movff	_number+1,_B+1
 16056                           
 16057                           ;keypad.c: 168: N = 2*number;
 16058  001BF8  90D8               	bcf	status,0,c
 16059  001BFA  347D               	rlcf	_number,w,c
 16060  001BFC  6E63               	movwf	_N,c
 16061  001BFE  347E               	rlcf	_number+1,w,c
 16062  001C00  6E64               	movwf	_N+1,c
 16063                           
 16064                           ;keypad.c: 169: W = 1*number;
 16065  001C02  C07D  F05F         	movff	_number,_W
 16066  001C06  C07E  F060         	movff	_number+1,_W+1
 16067                           
 16068                           ;keypad.c: 170: total_number = 4*number;
 16069  001C0A  C07D  F007         	movff	_number,??_is_valid
 16070  001C0E  C07E  F008         	movff	_number+1,??_is_valid+1
 16071  001C12  90D8               	bcf	status,0,c
 16072  001C14  3607               	rlcf	??_is_valid,f,c
 16073  001C16  3608               	rlcf	??_is_valid+1,f,c
 16074  001C18  90D8               	bcf	status,0,c
 16075  001C1A  3607               	rlcf	??_is_valid,f,c
 16076  001C1C  3608               	rlcf	??_is_valid+1,f,c
 16077  001C1E  C007  F069         	movff	??_is_valid,_total_number
 16078  001C22  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16079                           
 16080                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 16081  001C26  90D8               	bcf	status,0,c
 16082  001C28  346D               	rlcf	_counter_step,w,c
 16083  001C2A  6ED9               	movwf	fsr2l,c
 16084  001C2C  346E               	rlcf	_counter_step+1,w,c
 16085  001C2E  6EDA               	movwf	fsr2h,c
 16086  001C30  0E46               	movlw	low _compartment_number
 16087  001C32  26D9               	addwf	fsr2l,f,c
 16088  001C34  0E00               	movlw	high _compartment_number
 16089  001C36  22DA               	addwfc	fsr2h,f,c
 16090  001C38  CFDE F007          	movff	postinc2,??_is_valid
 16091  001C3C  CFDD F008          	movff	postdec2,??_is_valid+1
 16092  001C40  90D8               	bcf	status,0,c
 16093  001C42  3607               	rlcf	??_is_valid,f,c
 16094  001C44  3608               	rlcf	??_is_valid+1,f,c
 16095  001C46  0E30               	movlw	low _B_array
 16096  001C48  2407               	addwf	??_is_valid,w,c
 16097  001C4A  6ED9               	movwf	fsr2l,c
 16098  001C4C  0E01               	movlw	high _B_array
 16099  001C4E  2008               	addwfc	??_is_valid+1,w,c
 16100  001C50  6EDA               	movwf	fsr2h,c
 16101  001C52  C065  FFDE         	movff	_B,postinc2
 16102  001C56  C066  FFDD         	movff	_B+1,postdec2
 16103                           
 16104                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 16105  001C5A  90D8               	bcf	status,0,c
 16106  001C5C  346D               	rlcf	_counter_step,w,c
 16107  001C5E  6ED9               	movwf	fsr2l,c
 16108  001C60  346E               	rlcf	_counter_step+1,w,c
 16109  001C62  6EDA               	movwf	fsr2h,c
 16110  001C64  0E46               	movlw	low _compartment_number
 16111  001C66  26D9               	addwf	fsr2l,f,c
 16112  001C68  0E00               	movlw	high _compartment_number
 16113  001C6A  22DA               	addwfc	fsr2h,f,c
 16114  001C6C  CFDE F007          	movff	postinc2,??_is_valid
 16115  001C70  CFDD F008          	movff	postdec2,??_is_valid+1
 16116  001C74  90D8               	bcf	status,0,c
 16117  001C76  3607               	rlcf	??_is_valid,f,c
 16118  001C78  3608               	rlcf	??_is_valid+1,f,c
 16119  001C7A  0E10               	movlw	low _N_array
 16120  001C7C  2407               	addwf	??_is_valid,w,c
 16121  001C7E  6ED9               	movwf	fsr2l,c
 16122  001C80  0E01               	movlw	high _N_array
 16123  001C82  2008               	addwfc	??_is_valid+1,w,c
 16124  001C84  6EDA               	movwf	fsr2h,c
 16125  001C86  C063  FFDE         	movff	_N,postinc2
 16126  001C8A  C064  FFDD         	movff	_N+1,postdec2
 16127                           
 16128                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 16129  001C8E  90D8               	bcf	status,0,c
 16130  001C90  346D               	rlcf	_counter_step,w,c
 16131  001C92  6ED9               	movwf	fsr2l,c
 16132  001C94  346E               	rlcf	_counter_step+1,w,c
 16133  001C96  6EDA               	movwf	fsr2h,c
 16134  001C98  0E46               	movlw	low _compartment_number
 16135  001C9A  26D9               	addwf	fsr2l,f,c
 16136  001C9C  0E00               	movlw	high _compartment_number
 16137  001C9E  22DA               	addwfc	fsr2h,f,c
 16138  001CA0  CFDE F007          	movff	postinc2,??_is_valid
 16139  001CA4  CFDD F008          	movff	postdec2,??_is_valid+1
 16140  001CA8  90D8               	bcf	status,0,c
 16141  001CAA  3607               	rlcf	??_is_valid,f,c
 16142  001CAC  3608               	rlcf	??_is_valid+1,f,c
 16143  001CAE  0E00               	movlw	low _W_array
 16144  001CB0  2407               	addwf	??_is_valid,w,c
 16145  001CB2  6ED9               	movwf	fsr2l,c
 16146  001CB4  0E01               	movlw	high _W_array
 16147  001CB6  2008               	addwfc	??_is_valid+1,w,c
 16148  001CB8  6EDA               	movwf	fsr2h,c
 16149  001CBA  C05F  FFDE         	movff	_W,postinc2
 16150  001CBE  C060  FFDD         	movff	_W+1,postdec2
 16151                           
 16152                           ;keypad.c: 175: }
 16153  001CC2  0012               	return	
 16154  001CC4                     i2l758:
 16155                           
 16156                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 16157  001CC4  0E78               	movlw	low _current_set2
 16158  001CC6  6E01               	movwf	strcmp@s1,c
 16159  001CC8  0E00               	movlw	high _current_set2
 16160  001CCA  6E02               	movwf	strcmp@s1+1,c
 16161  001CCC  0EC0               	movlw	low STR_99
 16162  001CCE  6E03               	movwf	strcmp@s2,c
 16163  001CD0  0EFF               	movlw	high STR_99
 16164  001CD2  6E04               	movwf	strcmp@s2+1,c
 16165  001CD4  ECD0  F021         	call	_strcmp	;wreg free
 16166  001CD8  5001               	movf	?_strcmp,w,c
 16167  001CDA  1002               	iorwf	?_strcmp+1,w,c
 16168  001CDC  A4D8               	btfss	status,2,c
 16169  001CDE  D055               	goto	i2l760
 16170                           
 16171                           ;keypad.c: 177: B = 1*number;
 16172  001CE0  C07D  F065         	movff	_number,_B
 16173  001CE4  C07E  F066         	movff	_number+1,_B+1
 16174                           
 16175                           ;keypad.c: 178: N = 3*number;
 16176  001CE8  C07D  F001         	movff	_number,i2___wmul@multiplier
 16177  001CEC  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 16178  001CF0  0E00               	movlw	0
 16179  001CF2  6E04               	movwf	i2___wmul@multiplicand+1,c
 16180  001CF4  0E03               	movlw	3
 16181  001CF6  6E03               	movwf	i2___wmul@multiplicand,c
 16182  001CF8  ECD6  F022         	call	i2___wmul	;wreg free
 16183  001CFC  C001  F063         	movff	?i2___wmul,_N
 16184  001D00  C002  F064         	movff	?i2___wmul+1,_N+1
 16185                           
 16186                           ;keypad.c: 179: total_number = 4*number;
 16187  001D04  C07D  F007         	movff	_number,??_is_valid
 16188  001D08  C07E  F008         	movff	_number+1,??_is_valid+1
 16189  001D0C  90D8               	bcf	status,0,c
 16190  001D0E  3607               	rlcf	??_is_valid,f,c
 16191  001D10  3608               	rlcf	??_is_valid+1,f,c
 16192  001D12  90D8               	bcf	status,0,c
 16193  001D14  3607               	rlcf	??_is_valid,f,c
 16194  001D16  3608               	rlcf	??_is_valid+1,f,c
 16195  001D18  C007  F069         	movff	??_is_valid,_total_number
 16196  001D1C  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16197                           
 16198                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 16199  001D20  90D8               	bcf	status,0,c
 16200  001D22  346D               	rlcf	_counter_step,w,c
 16201  001D24  6ED9               	movwf	fsr2l,c
 16202  001D26  346E               	rlcf	_counter_step+1,w,c
 16203  001D28  6EDA               	movwf	fsr2h,c
 16204  001D2A  0E46               	movlw	low _compartment_number
 16205  001D2C  26D9               	addwf	fsr2l,f,c
 16206  001D2E  0E00               	movlw	high _compartment_number
 16207  001D30  22DA               	addwfc	fsr2h,f,c
 16208  001D32  CFDE F007          	movff	postinc2,??_is_valid
 16209  001D36  CFDD F008          	movff	postdec2,??_is_valid+1
 16210  001D3A  90D8               	bcf	status,0,c
 16211  001D3C  3607               	rlcf	??_is_valid,f,c
 16212  001D3E  3608               	rlcf	??_is_valid+1,f,c
 16213  001D40  0E30               	movlw	low _B_array
 16214  001D42  2407               	addwf	??_is_valid,w,c
 16215  001D44  6ED9               	movwf	fsr2l,c
 16216  001D46  0E01               	movlw	high _B_array
 16217  001D48  2008               	addwfc	??_is_valid+1,w,c
 16218  001D4A  6EDA               	movwf	fsr2h,c
 16219  001D4C  C065  FFDE         	movff	_B,postinc2
 16220  001D50  C066  FFDD         	movff	_B+1,postdec2
 16221                           
 16222                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 16223  001D54  90D8               	bcf	status,0,c
 16224  001D56  346D               	rlcf	_counter_step,w,c
 16225  001D58  6ED9               	movwf	fsr2l,c
 16226  001D5A  346E               	rlcf	_counter_step+1,w,c
 16227  001D5C  6EDA               	movwf	fsr2h,c
 16228  001D5E  0E46               	movlw	low _compartment_number
 16229  001D60  26D9               	addwf	fsr2l,f,c
 16230  001D62  0E00               	movlw	high _compartment_number
 16231  001D64  22DA               	addwfc	fsr2h,f,c
 16232  001D66  CFDE F007          	movff	postinc2,??_is_valid
 16233  001D6A  CFDD F008          	movff	postdec2,??_is_valid+1
 16234  001D6E  90D8               	bcf	status,0,c
 16235  001D70  3607               	rlcf	??_is_valid,f,c
 16236  001D72  3608               	rlcf	??_is_valid+1,f,c
 16237  001D74  0E10               	movlw	low _N_array
 16238  001D76  2407               	addwf	??_is_valid,w,c
 16239  001D78  6ED9               	movwf	fsr2l,c
 16240  001D7A  0E01               	movlw	high _N_array
 16241  001D7C  2008               	addwfc	??_is_valid+1,w,c
 16242  001D7E  6EDA               	movwf	fsr2h,c
 16243  001D80  C063  FFDE         	movff	_N,postinc2
 16244  001D84  C064  FFDD         	movff	_N+1,postdec2
 16245                           
 16246                           ;keypad.c: 184: }
 16247  001D88  0012               	return	
 16248  001D8A                     i2l760:
 16249                           
 16250                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 16251  001D8A  0E78               	movlw	low _current_set2
 16252  001D8C  6E01               	movwf	strcmp@s1,c
 16253  001D8E  0E00               	movlw	high _current_set2
 16254  001D90  6E02               	movwf	strcmp@s1+1,c
 16255  001D92  0EDE               	movlw	low STR_100
 16256  001D94  6E03               	movwf	strcmp@s2,c
 16257  001D96  0EFF               	movlw	high STR_100
 16258  001D98  6E04               	movwf	strcmp@s2+1,c
 16259  001D9A  ECD0  F021         	call	_strcmp	;wreg free
 16260  001D9E  5001               	movf	?_strcmp,w,c
 16261  001DA0  1002               	iorwf	?_strcmp+1,w,c
 16262  001DA2  A4D8               	btfss	status,2,c
 16263  001DA4  0012               	return	
 16264                           
 16265                           ;keypad.c: 186: B = 1*number;
 16266  001DA6  C07D  F065         	movff	_number,_B
 16267  001DAA  C07E  F066         	movff	_number+1,_B+1
 16268                           
 16269                           ;keypad.c: 187: W = 3*number;
 16270  001DAE  C07D  F001         	movff	_number,i2___wmul@multiplier
 16271  001DB2  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 16272  001DB6  0E00               	movlw	0
 16273  001DB8  6E04               	movwf	i2___wmul@multiplicand+1,c
 16274  001DBA  0E03               	movlw	3
 16275  001DBC  6E03               	movwf	i2___wmul@multiplicand,c
 16276  001DBE  ECD6  F022         	call	i2___wmul	;wreg free
 16277  001DC2  C001  F05F         	movff	?i2___wmul,_W
 16278  001DC6  C002  F060         	movff	?i2___wmul+1,_W+1
 16279                           
 16280                           ;keypad.c: 188: total_number = 4*number;
 16281  001DCA  C07D  F007         	movff	_number,??_is_valid
 16282  001DCE  C07E  F008         	movff	_number+1,??_is_valid+1
 16283  001DD2  90D8               	bcf	status,0,c
 16284  001DD4  3607               	rlcf	??_is_valid,f,c
 16285  001DD6  3608               	rlcf	??_is_valid+1,f,c
 16286  001DD8  90D8               	bcf	status,0,c
 16287  001DDA  3607               	rlcf	??_is_valid,f,c
 16288  001DDC  3608               	rlcf	??_is_valid+1,f,c
 16289  001DDE  C007  F069         	movff	??_is_valid,_total_number
 16290  001DE2  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16291                           
 16292                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 16293  001DE6  90D8               	bcf	status,0,c
 16294  001DE8  346D               	rlcf	_counter_step,w,c
 16295  001DEA  6ED9               	movwf	fsr2l,c
 16296  001DEC  346E               	rlcf	_counter_step+1,w,c
 16297  001DEE  6EDA               	movwf	fsr2h,c
 16298  001DF0  0E46               	movlw	low _compartment_number
 16299  001DF2  26D9               	addwf	fsr2l,f,c
 16300  001DF4  0E00               	movlw	high _compartment_number
 16301  001DF6  22DA               	addwfc	fsr2h,f,c
 16302  001DF8  CFDE F007          	movff	postinc2,??_is_valid
 16303  001DFC  CFDD F008          	movff	postdec2,??_is_valid+1
 16304  001E00  90D8               	bcf	status,0,c
 16305  001E02  3607               	rlcf	??_is_valid,f,c
 16306  001E04  3608               	rlcf	??_is_valid+1,f,c
 16307  001E06  0E30               	movlw	low _B_array
 16308  001E08  2407               	addwf	??_is_valid,w,c
 16309  001E0A  6ED9               	movwf	fsr2l,c
 16310  001E0C  0E01               	movlw	high _B_array
 16311  001E0E  2008               	addwfc	??_is_valid+1,w,c
 16312  001E10  6EDA               	movwf	fsr2h,c
 16313  001E12  C065  FFDE         	movff	_B,postinc2
 16314  001E16  C066  FFDD         	movff	_B+1,postdec2
 16315                           
 16316                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 16317  001E1A  90D8               	bcf	status,0,c
 16318  001E1C  346D               	rlcf	_counter_step,w,c
 16319  001E1E  6ED9               	movwf	fsr2l,c
 16320  001E20  346E               	rlcf	_counter_step+1,w,c
 16321  001E22  6EDA               	movwf	fsr2h,c
 16322  001E24  0E46               	movlw	low _compartment_number
 16323  001E26  26D9               	addwf	fsr2l,f,c
 16324  001E28  0E00               	movlw	high _compartment_number
 16325  001E2A  22DA               	addwfc	fsr2h,f,c
 16326  001E2C  CFDE F007          	movff	postinc2,??_is_valid
 16327  001E30  CFDD F008          	movff	postdec2,??_is_valid+1
 16328  001E34  90D8               	bcf	status,0,c
 16329  001E36  3607               	rlcf	??_is_valid,f,c
 16330  001E38  3608               	rlcf	??_is_valid+1,f,c
 16331  001E3A  0E00               	movlw	low _W_array
 16332  001E3C  2407               	addwf	??_is_valid,w,c
 16333  001E3E  6ED9               	movwf	fsr2l,c
 16334  001E40  0E01               	movlw	high _W_array
 16335  001E42  2008               	addwfc	??_is_valid+1,w,c
 16336  001E44  6EDA               	movwf	fsr2h,c
 16337  001E46  C05F  FFDE         	movff	_W,postinc2
 16338  001E4A  C060  FFDD         	movff	_W+1,postdec2
 16339  001E4E  0012               	return	
 16340  001E50                     __end_of_is_valid:
 16341                           	opt stack 0
 16342                           pclatu	equ	0xFFB
 16343                           pclath	equ	0xFFA
 16344                           tblptru	equ	0xFF8
 16345                           tblptrh	equ	0xFF7
 16346                           tblptrl	equ	0xFF6
 16347                           tablat	equ	0xFF5
 16348                           prodh	equ	0xFF4
 16349                           prodl	equ	0xFF3
 16350                           intcon	equ	0xFF2
 16351                           intcon3	equ	0xFF0
 16352                           indf0	equ	0xFEF
 16353                           postinc0	equ	0xFEE
 16354                           fsr0h	equ	0xFEA
 16355                           fsr0l	equ	0xFE9
 16356                           wreg	equ	0xFE8
 16357                           indf1	equ	0xFE7
 16358                           postdec1	equ	0xFE5
 16359                           fsr1h	equ	0xFE2
 16360                           fsr1l	equ	0xFE1
 16361                           indf2	equ	0xFDF
 16362                           postinc2	equ	0xFDE
 16363                           postdec2	equ	0xFDD
 16364                           fsr2h	equ	0xFDA
 16365                           fsr2l	equ	0xFD9
 16366                           status	equ	0xFD8
 16367                           
 16368 ;; *************** function i2___wmul *****************
 16369 ;; Defined at:
 16370 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;  multiplier      2    0[COMRAM] unsigned int 
 16373 ;;  multiplicand    2    2[COMRAM] unsigned int 
 16374 ;; Auto vars:     Size  Location     Type
 16375 ;;  __wmul          2    4[COMRAM] unsigned int 
 16376 ;; Return value:  Size  Location     Type
 16377 ;;                  2    0[COMRAM] unsigned int 
 16378 ;; Registers used:
 16379 ;;		wreg, status,2, status,0, prodl, prodh
 16380 ;; Tracked objects:
 16381 ;;		On entry : 0/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16385 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16388 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16389 ;;Total ram usage:        6 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; This function calls:
 16392 ;;		Nothing
 16393 ;; This function is called by:
 16394 ;;		_interruptHandler
 16395 ;;		_is_valid
 16396 ;;		i2_printf
 16397 ;; This function uses a non-reentrant model
 16398 ;;
 16399                           
 16400                           	psect	text46
 16401  0045AC                     __ptext46:
 16402                           	opt stack 0
 16403  0045AC                     i2___wmul:
 16404                           	opt stack 25
 16405                           
 16406                           ;incstack = 0
 16407  0045AC  5001               	movf	i2___wmul@multiplier,w,c
 16408  0045AE  0203               	mulwf	i2___wmul@multiplicand,c
 16409  0045B0  CFF3 F005          	movff	prodl,i2___wmul@product
 16410  0045B4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 16411  0045B8  5001               	movf	i2___wmul@multiplier,w,c
 16412  0045BA  0204               	mulwf	i2___wmul@multiplicand+1,c
 16413  0045BC  50F3               	movf	prodl,w,c
 16414  0045BE  2606               	addwf	i2___wmul@product+1,f,c
 16415  0045C0  5002               	movf	i2___wmul@multiplier+1,w,c
 16416  0045C2  0203               	mulwf	i2___wmul@multiplicand,c
 16417  0045C4  50F3               	movf	prodl,w,c
 16418  0045C6  2606               	addwf	i2___wmul@product+1,f,c
 16419  0045C8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 16420  0045CC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 16421  0045D0  0012               	return	
 16422  0045D2                     __end_ofi2___wmul:
 16423                           	opt stack 0
 16424                           pclatu	equ	0xFFB
 16425                           pclath	equ	0xFFA
 16426                           tblptru	equ	0xFF8
 16427                           tblptrh	equ	0xFF7
 16428                           tblptrl	equ	0xFF6
 16429                           tablat	equ	0xFF5
 16430                           prodh	equ	0xFF4
 16431                           prodl	equ	0xFF3
 16432                           intcon	equ	0xFF2
 16433                           intcon3	equ	0xFF0
 16434                           indf0	equ	0xFEF
 16435                           postinc0	equ	0xFEE
 16436                           fsr0h	equ	0xFEA
 16437                           fsr0l	equ	0xFE9
 16438                           wreg	equ	0xFE8
 16439                           indf1	equ	0xFE7
 16440                           postdec1	equ	0xFE5
 16441                           fsr1h	equ	0xFE2
 16442                           fsr1l	equ	0xFE1
 16443                           indf2	equ	0xFDF
 16444                           postinc2	equ	0xFDE
 16445                           postdec2	equ	0xFDD
 16446                           fsr2h	equ	0xFDA
 16447                           fsr2l	equ	0xFD9
 16448                           status	equ	0xFD8
 16449                           
 16450 ;; *************** function _strcmp *****************
 16451 ;; Defined at:
 16452 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 16453 ;; Parameters:    Size  Location     Type
 16454 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 16455 ;;		 -> current_set2(5), 
 16456 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 16457 ;;		 -> STR_100(5), STR_99(5), STR_98(5), STR_97(5), 
 16458 ;;		 -> STR_96(5), STR_95(5), STR_94(5), STR_93(4), 
 16459 ;;		 -> STR_92(4), STR_91(4), STR_90(4), STR_89(4), 
 16460 ;;		 -> STR_88(4), STR_87(3), STR_86(3), STR_85(3), 
 16461 ;;		 -> STR_84(2), STR_83(2), STR_82(2), STR_81(2), 
 16462 ;; Auto vars:     Size  Location     Type
 16463 ;;  r               1    5[COMRAM] char 
 16464 ;; Return value:  Size  Location     Type
 16465 ;;                  2    0[COMRAM] int 
 16466 ;; Registers used:
 16467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16468 ;; Tracked objects:
 16469 ;;		On entry : 0/0
 16470 ;;		On exit  : 0/0
 16471 ;;		Unchanged: 0/0
 16472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16473 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16476 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16477 ;;Total ram usage:        6 bytes
 16478 ;; Hardware stack levels used:    1
 16479 ;; This function calls:
 16480 ;;		Nothing
 16481 ;; This function is called by:
 16482 ;;		_is_valid
 16483 ;; This function uses a non-reentrant model
 16484 ;;
 16485                           
 16486                           	psect	text47
 16487  0043A0                     __ptext47:
 16488                           	opt stack 0
 16489  0043A0                     _strcmp:
 16490                           	opt stack 25
 16491                           
 16492                           ;incstack = 0
 16493  0043A0  D004               	goto	i2l1469
 16494  0043A2  4A01               	infsnz	strcmp@s1,f,c
 16495  0043A4  2A02               	incf	strcmp@s1+1,f,c
 16496  0043A6  4A03               	infsnz	strcmp@s2,f,c
 16497  0043A8  2A04               	incf	strcmp@s2+1,f,c
 16498  0043AA                     i2l1469:
 16499  0043AA  C001  FFD9         	movff	strcmp@s1,fsr2l
 16500  0043AE  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 16501  0043B2  50DF               	movf	indf2,w,c
 16502  0043B4  6E05               	movwf	??_strcmp& (0+255),c
 16503  0043B6  C003  FFF6         	movff	strcmp@s2,tblptrl
 16504  0043BA  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 16505  0043BE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16506  0043BE  6AF8               	clrf	tblptru,c
 16507  0043C0                     	endif
 16508  0043C0                     	if	0	;tblptru may be non-zero
 16509  0043C0                     	endif
 16510  0043C0  0008               	tblrd		*
 16511  0043C2  50F5               	movf	tablat,w,c
 16512  0043C4  0800               	sublw	0
 16513  0043C6  2405               	addwf	??_strcmp,w,c
 16514  0043C8  6E06               	movwf	strcmp@r,c
 16515  0043CA  5006               	movf	strcmp@r,w,c
 16516  0043CC  A4D8               	btfss	status,2,c
 16517  0043CE  D007               	goto	i2u258_40
 16518  0043D0  C001  FFD9         	movff	strcmp@s1,fsr2l
 16519  0043D4  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 16520  0043D8  50DF               	movf	indf2,w,c
 16521  0043DA  A4D8               	btfss	status,2,c
 16522  0043DC  D7E2               	goto	i2l1470
 16523  0043DE                     i2u258_40:
 16524  0043DE  5006               	movf	strcmp@r,w,c
 16525  0043E0  6E01               	movwf	?_strcmp,c
 16526  0043E2  6A02               	clrf	?_strcmp+1,c
 16527  0043E4  BE01               	btfsc	?_strcmp,7,c
 16528  0043E6  0602               	decf	?_strcmp+1,f,c
 16529  0043E8  0012               	return	
 16530  0043EA                     __end_of_strcmp:
 16531                           	opt stack 0
 16532                           pclatu	equ	0xFFB
 16533                           pclath	equ	0xFFA
 16534                           tblptru	equ	0xFF8
 16535                           tblptrh	equ	0xFF7
 16536                           tblptrl	equ	0xFF6
 16537                           tablat	equ	0xFF5
 16538                           prodh	equ	0xFF4
 16539                           prodl	equ	0xFF3
 16540                           intcon	equ	0xFF2
 16541                           intcon3	equ	0xFF0
 16542                           indf0	equ	0xFEF
 16543                           postinc0	equ	0xFEE
 16544                           fsr0h	equ	0xFEA
 16545                           fsr0l	equ	0xFE9
 16546                           wreg	equ	0xFE8
 16547                           indf1	equ	0xFE7
 16548                           postdec1	equ	0xFE5
 16549                           fsr1h	equ	0xFE2
 16550                           fsr1l	equ	0xFE1
 16551                           indf2	equ	0xFDF
 16552                           postinc2	equ	0xFDE
 16553                           postdec2	equ	0xFDD
 16554                           fsr2h	equ	0xFDA
 16555                           fsr2l	equ	0xFD9
 16556                           status	equ	0xFD8
 16557                           
 16558 ;; *************** function _check *****************
 16559 ;; Defined at:
 16560 ;;		line 208 in file "keypad.c"
 16561 ;; Parameters:    Size  Location     Type
 16562 ;;		None
 16563 ;; Auto vars:     Size  Location     Type
 16564 ;;		None
 16565 ;; Return value:  Size  Location     Type
 16566 ;;                  2    0[COMRAM] int 
 16567 ;; Registers used:
 16568 ;;		wreg, status,2, status,0
 16569 ;; Tracked objects:
 16570 ;;		On entry : 0/0
 16571 ;;		On exit  : 0/0
 16572 ;;		Unchanged: 0/0
 16573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16577 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16578 ;;Total ram usage:        2 bytes
 16579 ;; Hardware stack levels used:    1
 16580 ;; This function calls:
 16581 ;;		Nothing
 16582 ;; This function is called by:
 16583 ;;		_interruptHandler
 16584 ;; This function uses a non-reentrant model
 16585 ;;
 16586                           
 16587                           	psect	text48
 16588  004142                     __ptext48:
 16589                           	opt stack 0
 16590  004142                     _check:
 16591                           	opt stack 26
 16592                           
 16593                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 16594                           
 16595                           ;incstack = 0
 16596  004142  BE66               	btfsc	_B+1,7,c
 16597  004144  D006               	goto	i2u354_40
 16598  004146  5066               	movf	_B+1,w,c
 16599  004148  E124               	bnz	i2l4830
 16600  00414A  0E03               	movlw	3
 16601  00414C  5C65               	subwf	_B,w,c
 16602  00414E  B0D8               	btfsc	status,0,c
 16603  004150  D020               	goto	i2u358_40
 16604  004152                     i2u354_40:
 16605  004152  BE64               	btfsc	_N+1,7,c
 16606  004154  D006               	goto	i2u355_40
 16607  004156  5064               	movf	_N+1,w,c
 16608  004158  E11C               	bnz	i2l4830
 16609  00415A  0E04               	movlw	4
 16610  00415C  5C63               	subwf	_N,w,c
 16611  00415E  B0D8               	btfsc	status,0,c
 16612  004160  D018               	goto	i2u358_40
 16613  004162                     i2u355_40:
 16614  004162  BE62               	btfsc	_S+1,7,c
 16615  004164  D006               	goto	i2u356_40
 16616  004166  5062               	movf	_S+1,w,c
 16617  004168  E114               	bnz	i2l4830
 16618  00416A  0E03               	movlw	3
 16619  00416C  5C61               	subwf	_S,w,c
 16620  00416E  B0D8               	btfsc	status,0,c
 16621  004170  D010               	goto	i2u358_40
 16622  004172                     i2u356_40:
 16623  004172  BE60               	btfsc	_W+1,7,c
 16624  004174  D006               	goto	i2u357_40
 16625  004176  5060               	movf	_W+1,w,c
 16626  004178  E10C               	bnz	i2l4830
 16627  00417A  0E05               	movlw	5
 16628  00417C  5C5F               	subwf	_W,w,c
 16629  00417E  B0D8               	btfsc	status,0,c
 16630  004180  D008               	goto	i2u358_40
 16631  004182                     i2u357_40:
 16632  004182  BE6A               	btfsc	_total_number+1,7,c
 16633  004184  D00B               	goto	i2l766
 16634  004186  506A               	movf	_total_number+1,w,c
 16635  004188  E104               	bnz	i2l4830
 16636  00418A  0E05               	movlw	5
 16637  00418C  5C69               	subwf	_total_number,w,c
 16638  00418E  A0D8               	btfss	status,0,c
 16639  004190  D005               	goto	i2l766
 16640  004192                     i2u358_40:
 16641  004192                     i2l4830:
 16642                           
 16643                           ;keypad.c: 213: return 0;
 16644  004192  0E00               	movlw	0
 16645  004194  6E02               	movwf	?_check+1,c
 16646  004196  0E00               	movlw	0
 16647  004198  6E01               	movwf	?_check,c
 16648  00419A  0012               	return	
 16649  00419C                     i2l766:
 16650                           
 16651                           ;keypad.c: 214: }
 16652                           ;keypad.c: 215: return 1;
 16653  00419C  0E00               	movlw	0
 16654  00419E  6E02               	movwf	?_check+1,c
 16655  0041A0  0E01               	movlw	1
 16656  0041A2  6E01               	movwf	?_check,c
 16657  0041A4  0012               	return	
 16658  0041A6                     __end_of_check:
 16659                           	opt stack 0
 16660                           pclatu	equ	0xFFB
 16661                           pclath	equ	0xFFA
 16662                           tblptru	equ	0xFF8
 16663                           tblptrh	equ	0xFF7
 16664                           tblptrl	equ	0xFF6
 16665                           tablat	equ	0xFF5
 16666                           prodh	equ	0xFF4
 16667                           prodl	equ	0xFF3
 16668                           intcon	equ	0xFF2
 16669                           intcon3	equ	0xFF0
 16670                           indf0	equ	0xFEF
 16671                           postinc0	equ	0xFEE
 16672                           fsr0h	equ	0xFEA
 16673                           fsr0l	equ	0xFE9
 16674                           wreg	equ	0xFE8
 16675                           indf1	equ	0xFE7
 16676                           postdec1	equ	0xFE5
 16677                           fsr1h	equ	0xFE2
 16678                           fsr1l	equ	0xFE1
 16679                           indf2	equ	0xFDF
 16680                           postinc2	equ	0xFDE
 16681                           postdec2	equ	0xFDD
 16682                           fsr2h	equ	0xFDA
 16683                           fsr2l	equ	0xFD9
 16684                           status	equ	0xFD8
 16685                           
 16686 ;; *************** function ___awmod *****************
 16687 ;; Defined at:
 16688 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 16689 ;; Parameters:    Size  Location     Type
 16690 ;;  dividend        2    0[COMRAM] int 
 16691 ;;  divisor         2    2[COMRAM] int 
 16692 ;; Auto vars:     Size  Location     Type
 16693 ;;  sign            1    5[COMRAM] unsigned char 
 16694 ;;  counter         1    4[COMRAM] unsigned char 
 16695 ;; Return value:  Size  Location     Type
 16696 ;;                  2    0[COMRAM] int 
 16697 ;; Registers used:
 16698 ;;		wreg, status,2, status,0
 16699 ;; Tracked objects:
 16700 ;;		On entry : 0/0
 16701 ;;		On exit  : 0/0
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16705 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16707 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16708 ;;Total ram usage:        6 bytes
 16709 ;; Hardware stack levels used:    1
 16710 ;; This function calls:
 16711 ;;		Nothing
 16712 ;; This function is called by:
 16713 ;;		_interruptHandler
 16714 ;; This function uses a non-reentrant model
 16715 ;;
 16716                           
 16717                           	psect	text49
 16718  0040D2                     __ptext49:
 16719                           	opt stack 0
 16720  0040D2                     ___awmod:
 16721                           	opt stack 26
 16722                           
 16723                           ;incstack = 0
 16724  0040D2  0E00               	movlw	0
 16725  0040D4  6E06               	movwf	___awmod@sign,c
 16726  0040D6  AE02               	btfss	___awmod@dividend+1,7,c
 16727  0040D8  D006               	goto	i2l1088
 16728  0040DA  6C01               	negf	___awmod@dividend,c
 16729  0040DC  1E02               	comf	___awmod@dividend+1,f,c
 16730  0040DE  B0D8               	btfsc	status,0,c
 16731  0040E0  2A02               	incf	___awmod@dividend+1,f,c
 16732  0040E2  0E01               	movlw	1
 16733  0040E4  6E06               	movwf	___awmod@sign,c
 16734  0040E6                     i2l1088:
 16735  0040E6  AE04               	btfss	___awmod@divisor+1,7,c
 16736  0040E8  D004               	goto	i2l1089
 16737  0040EA  6C03               	negf	___awmod@divisor,c
 16738  0040EC  1E04               	comf	___awmod@divisor+1,f,c
 16739  0040EE  B0D8               	btfsc	status,0,c
 16740  0040F0  2A04               	incf	___awmod@divisor+1,f,c
 16741  0040F2                     i2l1089:
 16742  0040F2  5003               	movf	___awmod@divisor,w,c
 16743  0040F4  1004               	iorwf	___awmod@divisor+1,w,c
 16744  0040F6  B4D8               	btfsc	status,2,c
 16745  0040F8  D018               	goto	i2l1096
 16746  0040FA  0E01               	movlw	1
 16747  0040FC  6E05               	movwf	___awmod@counter,c
 16748  0040FE  D004               	goto	i2l1091
 16749  004100  90D8               	bcf	status,0,c
 16750  004102  3603               	rlcf	___awmod@divisor,f,c
 16751  004104  3604               	rlcf	___awmod@divisor+1,f,c
 16752  004106  2A05               	incf	___awmod@counter,f,c
 16753  004108                     i2l1091:
 16754  004108  AE04               	btfss	___awmod@divisor+1,7,c
 16755  00410A  D7FA               	goto	i2l1092
 16756  00410C                     i2u362_40:
 16757  00410C  5003               	movf	___awmod@divisor,w,c
 16758  00410E  5C01               	subwf	___awmod@dividend,w,c
 16759  004110  5004               	movf	___awmod@divisor+1,w,c
 16760  004112  5802               	subwfb	___awmod@dividend+1,w,c
 16761  004114  A0D8               	btfss	status,0,c
 16762  004116  D004               	goto	i2l1095
 16763  004118  5003               	movf	___awmod@divisor,w,c
 16764  00411A  5E01               	subwf	___awmod@dividend,f,c
 16765  00411C  5004               	movf	___awmod@divisor+1,w,c
 16766  00411E  5A02               	subwfb	___awmod@dividend+1,f,c
 16767  004120                     i2l1095:
 16768  004120  90D8               	bcf	status,0,c
 16769  004122  3204               	rrcf	___awmod@divisor+1,f,c
 16770  004124  3203               	rrcf	___awmod@divisor,f,c
 16771  004126  2E05               	decfsz	___awmod@counter,f,c
 16772  004128  D7F1               	goto	i2u362_40
 16773  00412A                     i2l1096:
 16774  00412A  5006               	movf	___awmod@sign,w,c
 16775  00412C  B4D8               	btfsc	status,2,c
 16776  00412E  D004               	goto	i2l1097
 16777  004130  6C01               	negf	___awmod@dividend,c
 16778  004132  1E02               	comf	___awmod@dividend+1,f,c
 16779  004134  B0D8               	btfsc	status,0,c
 16780  004136  2A02               	incf	___awmod@dividend+1,f,c
 16781  004138                     i2l1097:
 16782  004138  C001  F001         	movff	___awmod@dividend,?___awmod
 16783  00413C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 16784  004140  0012               	return	
 16785  004142                     __end_of___awmod:
 16786                           	opt stack 0
 16787                           pclatu	equ	0xFFB
 16788                           pclath	equ	0xFFA
 16789                           tblptru	equ	0xFF8
 16790                           tblptrh	equ	0xFF7
 16791                           tblptrl	equ	0xFF6
 16792                           tablat	equ	0xFF5
 16793                           prodh	equ	0xFF4
 16794                           prodl	equ	0xFF3
 16795                           intcon	equ	0xFF2
 16796                           intcon3	equ	0xFF0
 16797                           indf0	equ	0xFEF
 16798                           postinc0	equ	0xFEE
 16799                           fsr0h	equ	0xFEA
 16800                           fsr0l	equ	0xFE9
 16801                           wreg	equ	0xFE8
 16802                           indf1	equ	0xFE7
 16803                           postdec1	equ	0xFE5
 16804                           fsr1h	equ	0xFE2
 16805                           fsr1l	equ	0xFE1
 16806                           indf2	equ	0xFDF
 16807                           postinc2	equ	0xFDE
 16808                           postdec2	equ	0xFDD
 16809                           fsr2h	equ	0xFDA
 16810                           fsr2l	equ	0xFD9
 16811                           status	equ	0xFD8
 16812                           pclatu	equ	0xFFB
 16813                           pclath	equ	0xFFA
 16814                           tblptru	equ	0xFF8
 16815                           tblptrh	equ	0xFF7
 16816                           tblptrl	equ	0xFF6
 16817                           tablat	equ	0xFF5
 16818                           prodh	equ	0xFF4
 16819                           prodl	equ	0xFF3
 16820                           intcon	equ	0xFF2
 16821                           intcon3	equ	0xFF0
 16822                           indf0	equ	0xFEF
 16823                           postinc0	equ	0xFEE
 16824                           fsr0h	equ	0xFEA
 16825                           fsr0l	equ	0xFE9
 16826                           wreg	equ	0xFE8
 16827                           indf1	equ	0xFE7
 16828                           postdec1	equ	0xFE5
 16829                           fsr1h	equ	0xFE2
 16830                           fsr1l	equ	0xFE1
 16831                           indf2	equ	0xFDF
 16832                           postinc2	equ	0xFDE
 16833                           postdec2	equ	0xFDD
 16834                           fsr2h	equ	0xFDA
 16835                           fsr2l	equ	0xFD9
 16836                           status	equ	0xFD8
 16837                           
 16838                           	psect	rparam
 16839  0000                     pclatu	equ	0xFFB
 16840                           pclath	equ	0xFFA
 16841                           tblptru	equ	0xFF8
 16842                           tblptrh	equ	0xFF7
 16843                           tblptrl	equ	0xFF6
 16844                           tablat	equ	0xFF5
 16845                           prodh	equ	0xFF4
 16846                           prodl	equ	0xFF3
 16847                           intcon	equ	0xFF2
 16848                           intcon3	equ	0xFF0
 16849                           indf0	equ	0xFEF
 16850                           postinc0	equ	0xFEE
 16851                           fsr0h	equ	0xFEA
 16852                           fsr0l	equ	0xFE9
 16853                           wreg	equ	0xFE8
 16854                           indf1	equ	0xFE7
 16855                           postdec1	equ	0xFE5
 16856                           fsr1h	equ	0xFE2
 16857                           fsr1l	equ	0xFE1
 16858                           indf2	equ	0xFDF
 16859                           postinc2	equ	0xFDE
 16860                           postdec2	equ	0xFDD
 16861                           fsr2h	equ	0xFDA
 16862                           fsr2l	equ	0xFD9
 16863                           status	equ	0xFD8
 16864                           
 16865                           	psect	temp
 16866  00007F                     btemp:
 16867                           	opt stack 0
 16868  00007F                     	ds	1
 16869  0000                     int$flags	set	btemp
 16870  0000                     wtemp6	set	btemp+1
 16871                           pclatu	equ	0xFFB
 16872                           pclath	equ	0xFFA
 16873                           tblptru	equ	0xFF8
 16874                           tblptrh	equ	0xFF7
 16875                           tblptrl	equ	0xFF6
 16876                           tablat	equ	0xFF5
 16877                           prodh	equ	0xFF4
 16878                           prodl	equ	0xFF3
 16879                           intcon	equ	0xFF2
 16880                           intcon3	equ	0xFF0
 16881                           indf0	equ	0xFEF
 16882                           postinc0	equ	0xFEE
 16883                           fsr0h	equ	0xFEA
 16884                           fsr0l	equ	0xFE9
 16885                           wreg	equ	0xFE8
 16886                           indf1	equ	0xFE7
 16887                           postdec1	equ	0xFE5
 16888                           fsr1h	equ	0xFE2
 16889                           fsr1l	equ	0xFE1
 16890                           indf2	equ	0xFDF
 16891                           postinc2	equ	0xFDE
 16892                           postdec2	equ	0xFDD
 16893                           fsr2h	equ	0xFDA
 16894                           fsr2l	equ	0xFD9
 16895                           status	equ	0xFD8


Data Sizes:
    Strings     725
    Constant    151
    Data        25
    BSS         540
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69     126
    BANK0           128     40     127
    BANK1           256      0     221
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$1690	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_77(CODE[1]), STR_75(CODE[1]), STR_72(CODE[1]), STR_69(CODE[2]), 
		 -> STR_68(CODE[2]), STR_67(CODE[2]), STR_66(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_100(CODE[5]), STR_99(CODE[5]), STR_98(CODE[5]), STR_97(CODE[5]), 
		 -> STR_96(CODE[5]), STR_95(CODE[5]), STR_94(CODE[5]), STR_93(CODE[4]), 
		 -> STR_92(CODE[4]), STR_91(CODE[4]), STR_90(CODE[4]), STR_89(CODE[4]), 
		 -> STR_88(CODE[4]), STR_87(CODE[3]), STR_86(CODE[3]), STR_85(CODE[3]), 
		 -> STR_84(CODE[2]), STR_83(CODE[2]), STR_82(CODE[2]), STR_81(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_101(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_80(CODE[3]), STR_79(CODE[9]), STR_78(CODE[12]), STR_76(CODE[7]), 
		 -> STR_74(CODE[3]), STR_73(CODE[11]), STR_71(CODE[3]), STR_70(CODE[9]), 
		 -> STR_65(CODE[15]), STR_64(CODE[12]), STR_63(CODE[9]), STR_62(CODE[16]), 
		 -> STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[14]), STR_58(CODE[15]), 
		 -> STR_57(CODE[15]), STR_56(CODE[15]), STR_55(CODE[15]), STR_54(CODE[15]), 
		 -> STR_53(CODE[20]), STR_52(CODE[17]), STR_51(CODE[13]), STR_50(CODE[16]), 
		 -> STR_49(CODE[15]), STR_48(CODE[15]), STR_47(CODE[15]), STR_46(CODE[15]), 
		 -> STR_45(CODE[10]), STR_44(CODE[19]), STR_43(CODE[17]), STR_42(CODE[12]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[14]), STR_38(CODE[15]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[9]), 
		 -> STR_33(CODE[20]), STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[21]), 
		 -> STR_29(CODE[11]), STR_28(CODE[13]), STR_27(CODE[18]), STR_26(CODE[11]), 
		 -> STR_25(CODE[13]), STR_24(CODE[19]), STR_23(CODE[11]), STR_22(CODE[13]), 
		 -> STR_21(CODE[15]), STR_20(CODE[12]), STR_19(CODE[7]), STR_18(CODE[14]), 
		 -> STR_17(CODE[14]), STR_16(CODE[16]), STR_15(CODE[14]), STR_14(CODE[3]), 
		 -> STR_13(CODE[2]), STR_12(CODE[3]), STR_11(CODE[2]), STR_10(CODE[3]), 
		 -> STR_9(CODE[5]), STR_8(CODE[17]), STR_7(CODE[6]), STR_6(CODE[8]), 
		 -> STR_5(CODE[3]), STR_4(CODE[14]), STR_3(CODE[15]), STR_2(CODE[14]), 
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _get_RTC_initial->___wmul
    _get_RTC_final->___wmul
    ___wmul->___awdiv
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   31943
                                             36 BANK0      4     4      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _I2C_sendData
                             ___wmul
         _generate_compartment_array
                      _get_RTC_final
                    _get_RTC_initial
                            _initLCD
                         _initialize
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4   10132
                                             14 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_RTC_initial                                      1     1      0    6584
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_RTC_final                                        1     1      0    6584
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3081
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1312
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _generate_compartment_array                           4     2      2     148
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0    2168
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2146
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     740
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0   13554
                                             42 COMRAM    27    27      0
                            ___awmod
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
       i2_generate_compartment_array
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            34    22     12    3544
                                             12 COMRAM    30    18     12
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) i2_generate_compartment_array                         4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (6) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   ___wmul
     ___awdiv (ARG)
   _generate_compartment_array
   _get_RTC_final
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _get_RTC_initial
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble
   _readADC

 _interruptHandler (ROOT)
   ___awmod
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_generate_compartment_array
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DD       7       86.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     28      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2A2      34        0.0%
DATA                 0      0     2A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 14:05:56 2018

                                    _B 0065                                      _N 0063  
                                    _S 0061                                      _W 005F  
                                    _i 00BE                                      _j 0075  
                   i2_I2C_Master_Start 46FA                             _B_dispense 00FC  
                   i2_I2C_Master_Write 46D8                            _rotate_gear 00FE  
                          __CFG_CPD$ON 000000                           ___awdiv@sign 00CD  
                  ___wmul@multiplicand 00D2                     i2___lwdiv@dividend 0001  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    l401 28CE  
                                  l403 2AF0                                    l350 1EF2  
                                  l352 214A                                    l353 1EFE  
                                  l370 27E2                                    l354 1F4E  
                                  l346 1E84                                    l355 1FA0  
                                  l380 247E                                    l364 21B8  
                                  l356 1FD8                                    l373 233A  
                                  l390 2626                                    l382 24DA  
                                  l358 211E                                    l383 24E2  
                                  l375 2396                                    l359 2050  
                                  l392 26F4                                    l376 239E  
                                  l368 2282                                    l393 271E  
                                  l394 276C                                    l483 4514  
                                  l387 25C2                                    l901 2FBC  
                                  l397 2876                                    l389 261E  
                                  l902 2F18                                    l398 2890  
                                  l479 3A32                                    l903 2FCE  
                                  l399 292C                                    l904 2F68  
                                  l841 2BC0                                    l850 2C1C  
                                  l842 2BD0                                    l772 38B2  
                                  l852 2D6E                                    l860 2CB0  
                                  l844 2BE8                                    l773 3684  
                                  l861 2CC0                                    l845 2BE0  
                                  l870 2D30                                    l862 2CBA  
                                  l775 36C8                                    l776 371A  
                                  l864 2D0C                                    l777 377C  
                                  l881 2E6C                                    l873 2DD6  
                                  l857 2DA6                                    l778 37EE  
                                  l890 2EC8                                    l882 2E26  
                                  l866 2D1C                                    l858 2C82  
                                  l779 3870                                    l867 2D16  
                                  l859 2C88                                    l876 2E5C  
                                  l877 2DF0                                    l869 2D5C  
                                  l886 2E86                                    l887 2EAA  
                                  l888 2EB2                                    l889 2EE2  
                                  l898 2F12                                    l899 2FD4  
                         __CFG_CPB$OFF 000000                    ?i2_I2C_Master_Start 0001  
                  ?i2_I2C_Master_Write 0002                        _compartment_pos 00B0  
                         ___awmod@sign 0006                                    prod 000FF3  
                        _assembly_step 00AC                                    wreg 000FE8  
              __end_of_get_RTC_initial 3CB4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1320 42A2  
                                 l1321 42AC                                   l1082 3DA0  
                                 l1330 4460                                   l1083 3DAA  
                                 l1075 3D52                                   l1331 446A  
                                 l1084 3DB8                                   l1076 3D62  
                                 l1316 4282                                   l1317 427A  
                                 l1237 4610                                   l1078 3D80  
                                 l1326 4448                                   l1263 3EFE  
                                 l1079 3D78                                   l1327 4440  
                                 l1264 3EF2                                   l1267 3F32  
                                 l1268 3F40                                   l4352 2D16  
                                 l4356 2D30                                   l5420 247E  
                                 l4382 2DF4                                   l5502 26F4  
                                 l4528 3A74                                   l4538 3A9C  
                                 l5506 271E                                   l4468 3BBC  
                                 l4548 3984                                   l4396 2E2A  
                                 l4478 3BE4                                   l5462 25C2  
                                 l5550 2840                                   l5378 233A  
                                 _ADON 007E10                                   STR_1 FE04  
                                 STR_2 FEE4                                   STR_3 FE33  
                                 STR_4 FEC8                                   STR_5 FFF8  
                                 STR_6 FFA4                                   STR_7 FFBA  
                                 STR_8 FDD2                                   STR_9 FFE3  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   u3200 3BE4  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3140 2EEA                                   u3150 2F00  
                                 u3215 41DC                                   u3240 3A9C  
                                 u2505 3CF4                                   u2506 3CF6  
                                 u3170 2FDE                                   u2515 3D38  
                                 u2516 3D3A                                   u2710 4286  
                                 u2640 3D84                                   u4320 2636  
                                 u4240 23AE                                   u4090 1E8E  
                                 u5107 2104                                   u5027 1EBA  
                                 u2740 444C                                   u2565 4552  
                                 u5117 2176                                   u5037 1ED6  
                                 u2566 4554                                   u4350 2840  
                                 u4190 2280                                   u5207 2544  
                                 u5127 2202                                   u5047 1F16  
                                 u2680 3F02                                   u4280 24F2  
                                 u5217 2560                                   u5137 224A  
                                 u5057 1F3A                                   u2930 2CEE  
                                 u5307 2824                                   u5227 266E  
                                 u5147 22A8                                   u5067 1F92  
                                 u5317 2916                                   u5237 2688  
                                 u5157 2322                                   u5077 1FCA  
                                 u5407 2A48                                   u5327 295A  
                                 u5247 26A4                                   u5167 23E6  
                                 u5087 2002                                   u2937 2CE4  
                                 u5417 2A74                                   u5337 2976  
                                 u5257 26DE                                   u5177 2400  
                                 u5097 2036                                   u2970 2D52  
                                 u5507 4646                                   u5427 2A90  
                                 u5347 298C                                   u5267 275C  
                                 u5187 241C                                   u5517 4310  
                                 u5437 2AA6                                   u5357 29B8  
                                 u5277 2792                                   u5197 252A  
                                 u5527 4344                                   u5447 2ACA  
                                 u5367 29D4                                   u5287 27AE  
                                 u5537 465E                                   u2977 2D48  
                                 u5457 2AE6                                   u5377 29EA  
                                 u5297 280A                                   u5547 3CDA  
                                 u5467 2B28                                   u5387 2A16  
                                 u5557 3CE4                                   u5477 2B48  
                                 u5397 2A32                                   u5567 3D1E  
                                 u5487 2B72                                   u5577 3D28  
                                 u5497 2B8E                                   _main 1E50  
             __end_of_interruptHandler 1000                                   _mode 00BA  
                                 _keys FC93                                   _temp 0076  
                                 _time 0056                                   _prev 00B2  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 0005                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf1 000FE7                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 007F                                   _strs FCC6  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 468E                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                            i2_lcdNibble 3DC2  
                     __end_of_LCD_LEFT FCC1                           _total_number 0069  
                I2C_Master_Read@ackBit 00C9                       ?_I2C_Master_Init 00D5  
                     ?_I2C_Master_Read 0001       i2generate_compartment_array@step 0001  
       generate_compartment_array@step 00C8                       ?_I2C_Master_Wait 0001  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                      __end_of___awdiv 3DC2                                  STR_10 FE4E  
                                STR_11 FE02                                  STR_12 FFF8  
                                STR_20 FF26                                  STR_13 FFFB  
                                STR_21 FE8D                                  STR_14 FE4E  
                                STR_22 FEF2                                  STR_30 FD2A  
                                STR_31 FE4E                                  STR_23 FF55  
                                STR_15 FEBA                                  STR_32 FE4E  
                                STR_16 FE14                                  STR_40 FDB0  
                                STR_24 FD67                                  STR_17 FEBA  
                                STR_25 FEFF                                  STR_41 FDC1  
                                STR_33 FD3F                                  STR_18 FEBA  
                                STR_34 FF9B                                  STR_26 FF60  
                                STR_42 FF32                                  STR_50 FDF4  
                                STR_19 FEC1                                  STR_35 FE4E  
                                STR_51 FF19                                  STR_43 FDE3  
                                STR_27 FD8D                                  STR_36 FE4E  
                                STR_60 FDB0                                  STR_52 FDD2  
                                STR_28 FF0C                                  STR_44 FD7A  
                      __end_of___awmod 4142                                  STR_37 FE4E  
                                STR_61 FDC1                                  STR_45 FF76  
                                STR_29 FF6B                                  STR_53 FD53  
                                STR_62 FDF4                                  STR_70 FF80  
                                STR_46 FE9C                                  STR_38 FE7E  
                                STR_54 FE42                                  STR_71 FFF8  
                                STR_63 FF89                                  STR_39 FED6  
                                STR_47 FEAB                                  STR_55 FE51  
                                STR_72 FE32                                  STR_64 FF32  
                                STR_48 FE9C                                  STR_56 FE60  
                                STR_81 FFFD                                  STR_49 FEAB  
                                STR_73 FF4A                                  STR_57 FE6F  
                                STR_65 FE24                                  STR_82 FFEA  
                                STR_58 FE7E                                  STR_74 FFF8  
                                STR_66 FFFD                                  STR_90 FFF0  
                                STR_75 FE32                                  STR_67 FFEA  
                                STR_83 FFEE                                  STR_91 FFC6  
                                STR_59 FED6                                  STR_68 FFEE  
                                STR_84 FFF2                                  STR_92 FFD0  
                                STR_76 FFB3                                  STR_77 FE32  
                                STR_85 FFE9                                  STR_69 FFF2  
                                STR_93 FFF4                                  STR_86 FFED  
                                STR_94 FFD4                                  STR_78 FF3E  
                                STR_87 FFF1                                  STR_95 FFD9  
                                STR_79 FF92                                  STR_88 FFE8  
                                STR_96 FFCF                                  STR_89 FFEC  
                                STR_97 FFC5                                  STR_98 FFCA  
                                STR_99 FFC0                        __end_of___lldiv 3F52  
                      ___awdiv@divisor 00CA                        __end_of___lwdiv 42B6  
                      __end_of___lwmod 4474                                  i2l421 0114  
                                i2l430 0440                                  i2l431 083C  
                                i2l423 01DE                                  i2l415 009A  
                                i2l440 0938                                  i2l432 047A  
                                i2l425 0304                                  i2l450 0AD6  
                                i2l442 0980                                  i2l434 0858  
                                i2l426 0206                                  i2l418 01C2  
                                i2l451 0B16                                  i2l435 09FC  
                                i2l419 00C4                                  i2l452 0CEA  
                                i2l444 09C8                                  i2l436 08A8  
                                i2l428 0256                                  i2l453 0B6E  
                                i2l445 09EE                                  i2l470 0F00  
                                i2l462 0E64                                  i2l446 0D40  
                                i2l438 08F0                                  i2l463 0E12  
                                i2l455 0C6E                                  i2l447 0A16  
                                i2l472 0F52                                  i2l464 0E9E  
                                i2l456 0CE2                                  i2l448 0A56  
                                i2l465 0E1A                                  i2l449 0A96  
                                i2l730 1188                                  i2l474 0F8A  
                                i2l466 0E22                                  i2l467 0E2A  
                                i2l740 14D0                                  i2l732 1228  
                                i2l724 1062                                  i2l468 0E32  
                                i2l901 33DC                                  i2l469 0E3C  
                                i2l750 1904                                  i2l742 1584  
                                i2l734 12C8                                  i2l726 10C4  
                                i2l902 3340                                  i2l903 33EC  
                                i2l760 1D8A                                  i2l752 19F4  
                                i2l744 1672                                  i2l736 1368  
                                i2l728 1126                                  i2l904 338A  
                                i2l841 3006                                  i2l754 1AE4  
                                i2l746 1760                                  i2l738 141C  
                                i2l850 305C                                  i2l842 3016  
                                i2l756 1BD4                                  i2l748 1814  
                                i2l772 3650                                  i2l852 31A0  
                                i2l860 30EA                                  i2l844 302A  
                                i2l773 3418                                  i2l861 30F8  
                                i2l845 3024                                  i2l766 419C  
                                i2l758 1CC4                                  i2l870 3164  
                                i2l862 30F4                                  i2l775 345C  
                                i2l776 34B0                                  i2l864 3142  
                                i2l777 3514                                  i2l881 329A  
                                i2l873 3204                                  i2l857 31D6  
                                i2l778 3588                                  i2l890 32F6  
                                i2l882 3254                                  i2l866 3152  
                                i2l858 30BE                                  i2l779 360C  
                                i2l867 314C                                  i2l859 30C2  
                                i2l876 328A                        ___awdiv@counter 00CC  
                                i2l877 321E                                  i2l869 318E  
                                i2l886 32B4                                  i2l887 32D8  
                                i2l888 32E0                                  i2l889 330C  
                                i2l898 333A                                  i2l899 33F2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                                _B_max 01D9                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                                  _N_max 01D7  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 4666  
                        _N_spacingTime 009A                                  _S_max 01D5  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _W_max 01D3  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4532  
                      __end_of_initLCD 4354                                  _check 4142  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _angle 017C                        __end_of_dpowers FCAE  
                                _array FCBD                                  _error 017A  
                      __end_of_isdigit 4618                                  _valid 006B  
                                _state 00AE                                  _putch 4636  
                    _compartment_array 0080                             _N_dispense 00FB  
                                pclath 000FFA                                  tablat 000FF5  
                    _LCDinterruptState 00C2                       __end_ofi2___wmul 45D2  
                                status 000FD8            I2C_Master_Read@receivedByte 00CA  
                                wtemp6 0080                        __end_of_strncmp 3ECE  
                   __size_ofi2___awdiv 0084                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                  __size_of_I2C_sendData 0028  
                   __size_ofi2___lldiv 0082                       __end_ofi2_printf 3416  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                      __initialization 4058                      i2___lldiv@divisor 0005  
                   __size_ofi2_lcdInst 0014                           __end_of_main 2BB4  
                    i2___lldiv@counter 000D                           __end_of_keys FCA4  
                           i2printf@ap 0021                             i2printf@cp 001F  
                         __end_of_strs FD2A                     __size_ofi2_initLCD 004C  
                   __size_ofi2_isdigit 001E                         __CFG_OSC$HSPLL 000000  
                    __end_of_LCD_RIGHT FCC2                                 ??_main 00EC  
                           _S_dispense 00FA                          __activetblptr 000003  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 00C9  
                     ?_get_RTC_initial 0001                                 ?_check 0001  
                   ??_I2C_Master_Start 00C9                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 00CB  
                               STR_100 FFDE                                 STR_101 FFAC  
                               STR_102 FD9F                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                       ___awdiv@dividend 00C8  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
                         _I2C_sendData 4584                        i2lcdNibble@temp 0001  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               i2l1320 42F4                                 i2l1321 42FE  
                               i2l1082 3FB4                                 i2l1330 44A2  
                               i2l1091 4108                                 i2l1083 3FBE  
                               i2l1075 3F66                                 i2l1331 44AC  
                               i2l1092 4100                                 i2l1084 3FCC  
                               i2l1076 3F76                                 i2l1316 42D4  
                               i2l1317 42CC                                 i2l1237 462E  
                               i2l1078 3F94                                 i2l1326 448A  
                               i2l1095 4120                                 i2l1263 4004  
                               i2l1079 3F8C                                 i2l1327 4482  
                               i2l1096 412A                                 i2l1088 40E6  
                               i2l1264 3FF8                                 i2l1097 4138  
                               i2l1089 40F2                                 i2l1267 4038  
                               i2l1460 44C4                                 i2l1268 4046  
                               i2l1461 44C0                                 i2l1470 43A2  
                               i2l1463 44DC                                 i2l1464 44D4  
                               i2l1483 3EB4                                 i2l1484 3E4A  
                               i2l5020 3222                                 i2l1469 43AA  
                               i2l1477 43FC                                 i2l1485 3EAC  
                               i2l1478 43F4                                 i2l5034 3258  
                               i2l6072 0C7C                                 i2l4830 4192  
                               i2l5710 010C                                 i2l4576 3E4A  
                               i2l6184 0FB2                                 i2l6186 0FB4  
                               i2l5832 059C                                 i2l5736 01DA  
                               i2l5756 024E                                 i2l4990 314C  
                               i2l4994 3164                              ??i2_putch 0003  
                               _SSPADD 000FC8                                 _SSPBUF 000FC9  
                               _B_done 0172                        _openHandle_data 00C1  
                               _N_done 0170                                 _S_done 016E  
                       __CFG_XINST$OFF 000000                                 _W_done 016C  
       ??i2_generate_compartment_array 0003                                 ___wmul 455C  
                            ??___awdiv 00CC                         __CFG_STVREN$ON 000000  
                            ??___awmod 0005                              ??___lldiv 00D0  
                            ??___lwdiv 00CC                              ??___lwmod 00D3  
                     __end_of_is_valid 1E50                                 clear_0 409E  
                               clear_1 40AA                                 clear_2 40B6  
                               clear_3 40C2                       ___awdiv@quotient 00CE  
                      ___awmod@divisor 0003                                 _number 007D  
                      ___awmod@counter 0005                              ??_lcdInst 00CA  
                               _printf 2BB4                                 _strcat 44B6  
                               _strcmp 43A0                                 _strcpy 43EA  
                       i2___awdiv@sign 0006                              ??_readADC 00CA  
                            ??_initLCD 00CB                     _compartment_number 0046  
                            ??_isdigit 00C8                      __end_ofi2___awdiv 3FD6  
                    __end_ofi2___lldiv 4058                      __end_ofi2___lwdiv 4308  
                         __mediumconst FC92                      __end_ofi2___lwmod 44B6  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 46A2  
                            ??_strncmp 000D                      __end_ofi2_initLCD 43A0  
                    __end_ofi2_isdigit 4636                             __accesstop 0080  
              __end_of__initialization 40C8                  __end_of_get_RTC_final 3B7C  
                        ___rparam_used 000001                     i2___lwmod@dividend 0008  
                 __end_of_happynewyear FCBD                         __pcstackCOMRAM 0001  
                   i2___lldiv@dividend 0001                           __pidataBANK0 46B4  
                         __pidataBANK1 46C3                i2I2C_Master_Read@ackBit 0002  
                        __end_of_check 41A6                          __end_of_array FCC0  
                        __end_of_putch 464E                            i2printf@idx 001D  
                          i2printf@len 0023                            i2printf@val 0025  
                        _B_spacingTime 0178                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0088                            i2putch@data 0003  
                            ?i2_printf 000D                                ??_check 0003  
                              ??_putch 00CA                     i2___lldiv@quotient 0009  
                           __pbssBANK0 0080                             __pbssBANK1 0100  
                           __pbssBANK2 0200                      _S_total_dispensed 0096  
                    ?_interruptHandler 0001                     ??_interruptHandler 002B  
                        _init_position 01DB                           ?i2_lcdNibble 0001  
                              ?___wmul 00D0             i2I2C_Master_Init@clockFreq 000E  
                              ?_printf 00D6                                ?_strcat 0001  
                              ?_strcmp 0001                                ?_strcpy 0007  
                           ??i2___wmul 0005                           _gear_counter 00B4  
                           _final_time 0160                             ??i2_printf 0019  
                 lcd@LCDinterruptState 0077                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _B_array 0130                                i2_putch 467A  
                            ?_is_valid 0001                                _N_array 0110  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3D3C  
          __size_ofi2_I2C_Master_Write 000A                                _S_array 0120  
                              __Hparam 0000                             _hr_initial 0092  
                              __Lparam 0000                                _W_array 0100  
                              ___awdiv 3D3C                                ___awmod 40D2  
                              ___lldiv 3ECE                        __size_of___wmul 0028  
                              ___lwdiv 4262                                ___lwmod 4430  
             interruptHandler@keypress 0044                                __pcinit 4058  
                              __ramtop 1000                             _initialize 38E6  
                              _lcdInst 464E                                __ptext0 1E50  
                              __ptext1 44F8                                __ptext2 2BB4  
                              __ptext3 4636                                __ptext4 45F6  
                              __ptext5 4430                                __ptext6 4262  
                              __ptext7 38E6                                __ptext8 4308  
                              __ptext9 464E                        __size_of_printf 0448  
                      __size_of_strcat 0042                        __size_of_strcmp 004A  
                              _readADC 44F8                        __size_of_strcpy 0046  
                              _initLCD 4308                      __end_of_hexpowers FCB6  
                              _counter 006F                                _dpowers FCA4  
                              _isdigit 45F6                       ___awmod@dividend 0001  
                            _LCD_RIGHT FCC1               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002A               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                          _S_spacingTime 0176  
                              _strncmp 3E48                         __pintcode_body 0012  
                 end_of_initialization 40C8                  __end_of_LCD_SIZE_HORZ FCC4  
                __end_of_LCD_SIZE_VERT FCC3           ??_generate_compartment_array 00CA  
                         _final_number 0150                                int_func 0012  
                  i2___wmul@multiplier 0001                             ??_is_valid 0007  
                       _operation_done 00B6              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 00CC  
                         _close_handle 00F0                        ___lldiv@counter 00D4  
                              printf@c 00EB                                printf@f 00D6  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                              strcmp@r 0006                              _PORTAbits 000F80  
                           _prev_state 0067                             _servo_ramp 00F1  
  __size_of_generate_compartment_array 0264                              _TRISAbits 000F92  
                            _TRISCbits 000F94                              _TRISDbits 000F95  
                    i2_I2C_Master_Init 4206                      i2_I2C_Master_Read 45D2  
                    i2_I2C_Master_Wait 46A2                           _happynewyear FCB6  
                    i2_I2C_Master_Stop 46F2                              i2___awdiv 3F52  
                           _white_tape 00BC                              _B_counter 00AA  
                    i2___lwdiv@divisor 0003                              i2___lldiv 3FD6  
                            i2___lwdiv 42B6                              i2___lwmod 4474  
                   ?i2_I2C_Master_Init 000E                      i2___lwdiv@counter 0007  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   ?i2_I2C_Master_Stop 0001                              i2_lcdInst 468E  
             __size_of_get_RTC_initial 0138                            printf@width 00E9  
                            i2_initLCD 4354                     i2___awdiv@dividend 0001  
                  ??i2_I2C_Master_Init 0012                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4618                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                         __end_of___wmul 4584  
                 __size_ofi2_lcdNibble 0086                            ?_initialize 0001  
                        i2lcdInst@data 0003                       i2___wmul@product 0005  
                       __end_of_printf 2FFC                              _N_counter 00A6  
                       __end_of_strcat 44F8                         __end_of_strcmp 43EA  
                         i2printf@flag 0027                         __end_of_strcpy 4430  
            __end_ofi2_I2C_Master_Init 4262              __end_ofi2_I2C_Master_Read 45F6  
            __end_ofi2_I2C_Master_Wait 46B4                           i2printf@prec 001E  
                  start_initialization 4058              __end_ofi2_I2C_Master_Stop 46FA  
                   i2___awdiv@quotient 0007                      __size_ofi2___wmul 0026  
                            i2printf@c 002A                              i2printf@f 000D  
 __end_ofi2_generate_compartment_array 3682  __size_ofi2_generate_compartment_array 026C  
         i2_generate_compartment_array 3416                             ?i2___awdiv 0001  
                           ?i2___lldiv 0001                             ?i2___lwdiv 0001  
                           ?i2___lwmod 0008                      __size_ofi2_printf 041A  
                            _S_counter 00A8                      ??_I2C_Master_Init 00D9  
                    ??_I2C_Master_Read 00C9                      ??_I2C_Master_Wait 00C8  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 00C9  
                         _counter_step 006D                             ?i2_initLCD 0001  
                           ?i2_isdigit 0001                              _W_counter 00A4  
                    interruptHandler@i 0042                               ??___wmul 00D4  
             I2C_Master_Init@clockFreq 00D5                            __pdataBANK0 00F0  
                          __pdataBANK1 01D3                       __CFG_LPT1OSC$OFF 000000  
                             ??_printf 00DA              __size_of_interruptHandler 0FF8  
                             ??_strcat 0005                               ??_strcmp 0005  
                             ??_strcpy 000B                 __size_of_get_RTC_final 0148  
                          __pbssCOMRAM 0046                            _change_mode 00B8  
                        __pcstackBANK0 00C8                      i2___lwmod@divisor 000A  
                    i2___lwmod@counter 000C                           _isdigit$1301 00C9  
   __end_of_generate_compartment_array 38E6          ?i2_generate_compartment_array 0001  
           _generate_compartment_array 3682                               ?i2_putch 0001  
                    _W_total_dispensed 0094                    __size_of_initialize 014E  
                         _current_set2 0078                       _I2C_Master_Start 46EA  
                     _I2C_Master_Write 46CE                      __size_of_is_valid 0E50  
                            _main$1690 00EE                       ___lwdiv@dividend 00C8  
                         _initial_time 0168                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                      ??_get_RTC_initial 00D6  
                        __pmediumconst FC92                              _lcdNibble 3CB4  
                             ?___awdiv 00C8                               ?___awmod 0001  
                             ?___lldiv 00C8                               ?___lwdiv 00C8  
                             ?___lwmod 00CF                              _final_set 01A6  
                             ?_lcdInst 0001                               ?_readADC 00C8  
                             ?_initLCD 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Init 005C             __size_ofi2_I2C_Master_Read 0024  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _hexpowers FCAE                         __size_of_check 0064  
                     ___lwdiv@quotient 00CC                            ??i2___awdiv 0005  
                          ??i2___lldiv 0009                          _W_spacingTime 0174  
                        ?_I2C_sendData 0001                              _min_final 0164  
                             ?_strncmp 0007                            ??i2___lwdiv 0005  
                          ??i2___lwmod 000C                         __size_of_putch 0018  
                            _sec_final 0162                               _LCD_LEFT FCC0  
           __end_ofi2_I2C_Master_Start 4702             __end_ofi2_I2C_Master_Write 46E2  
                          ??i2_lcdInst 0003                         ___wmul@product 00D4  
                             _LATDbits 000F8C                            ??i2_initLCD 0004  
                          ??i2_isdigit 0001                          _get_RTC_final 3A34  
                        _operationTime 0071                               i2u400_40 3F98  
                             i2u332_40 3E78                               i2u254_45 3E00  
                             i2u254_46 3E02                               i2u327_40 4426  
                             i2u255_45 3E44                               i2u255_46 3E46  
                             i2u327_47 441C                               i2u600_47 3DE6  
                             i2u281_40 4008                               i2u601_47 3DF0  
                             i2u362_40 410C                               i2u354_40 4152  
                             i2u258_40 43DE                               i2u450_40 0202  
                             i2u602_47 3E2A                               i2u355_40 4162  
                             i2u371_40 3126                               i2u443_40 00C0  
                             i2u603_47 3E34                               i2u371_47 311C  
                             i2u356_40 4172                               i2u284_40 42D8  
                             i2u452_40 0272                               i2u357_40 4182  
                             i2u453_40 0300                               i2u445_40 0130  
                             i2u365_45 423A                               i2u358_40 4192  
                             i2u366_45 45EE                               i2u366_46 45F0  
                             i2u287_40 448E                               i2u375_40 3186  
                             i2u375_47 317C                              _operation 0073  
                             i2u392_40 3314                               i2u472_40 0B6C  
                             i2u456_40 0478                               i2u560_47 028A  
                             i2u393_40 3328                               i2u457_40 059C  
                             i2u561_47 02E0                               i2u474_40 0C7C  
                             i2u570_47 067E                               i2u562_47 041A  
                             i2u395_40 33FA                               i2u571_47 0696  
                             i2u563_47 042E                               i2u476_40 0CFA  
                             i2u580_47 0798                               i2u572_47 06AC  
                             i2u564_47 0484                               i2u581_47 07AE  
                             i2u573_47 06D4                               i2u565_47 051A  
                             i2u590_47 0CC6                               i2u582_47 07E0  
                             i2u574_47 06EC                               i2u566_47 05BE  
                             i2u558_47 0148                               i2u591_47 0D14  
                             i2u583_47 07F8                               i2u575_47 0702  
                             i2u567_47 05EE                               i2u559_47 019E  
                             i2u592_47 0D82                               i2u584_47 0818  
                             i2u576_47 072A                               i2u568_47 061E  
                             i2u593_47 0E56                               i2u585_47 0830  
                             i2u577_47 0742                               i2u569_47 064E  
                             i2u594_47 0EBE                               i2u586_47 09E2  
                             i2u578_47 0758                               i2u595_47 0EDE  
                             i2u587_47 0B40                               i2u579_47 0780  
                             i2u596_47 4686                               i2u588_47 0C16  
                             i2u597_47 435A                               i2u589_47 0C56  
                             i2u598_47 438E                               i2u599_47 469A  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
        i2I2C_Master_Write@byteToWrite 0002                              _nuts_data 00C0  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 00D0  
                             i2___wmul 45AC                          lcdNibble@data 00C9  
                             _B_remain 00A2                             printf@flag 00E8  
                        lcdNibble@temp 00C8                             printf@prec 00DF  
                    i2___awdiv@divisor 0003                      i2___awdiv@counter 0005  
                             i2_printf 2FFC                         ??_I2C_sendData 00CB  
                       _LCD_HORZ_LIMIT FCC5                              copy_data0 406C  
                            copy_data1 408C                   interruptHandler@temp 0045  
                             _N_remain 00A0                       __size_ofi2_putch 0014  
                       ?_get_RTC_final 0001                               _S_remain 009E  
                             __Hrparam 0000                  I2C_sendData@char_data 00CB  
                             __Lrparam 0000                               _W_remain 009C  
                   __CFG_BOREN$SBORDIS 000000                       __size_of___awdiv 0086  
                     __size_of___awmod 0070                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 0084                    _rotate_1compartment 00FD  
                     __size_of___lwdiv 0054                       __size_of___lwmod 0044  
                       readADC@channel 00CC                           ??_initialize 00C8  
                     _interruptHandler 0008                       __size_of_lcdInst 0018  
                      _I2C_Master_Init 41A6                       __size_of_readADC 003A  
                      _I2C_Master_Read 4532                       __size_of_initLCD 004C  
                          _current_set 00C3                        _I2C_Master_Wait 4666  
                           strcat@from 0003                        _I2C_Master_Stop 46E2  
               __end_of_LCD_HORZ_LIMIT FCC6                       __size_of_isdigit 0022  
                      ___lwdiv@divisor 00CA                        ___lwdiv@counter 00CE  
                             __ptext10 3CB4                               __ptext11 3B7C  
                             __ptext20 46EA                               __ptext12 3A34  
                             __ptext21 4666                               __ptext13 455C  
                             __ptext30 4354                               __ptext22 41A6  
                             __ptext14 3D3C                               __ptext31 468E  
                             __ptext23 3ECE                               __ptext15 4532  
                             __ptext40 4206                               __ptext32 3DC2  
                             __ptext16 3682                               __ptext41 3FD6  
                             __ptext33 3416                               __ptext25 2FFC  
                             __ptext17 4584                               __ptext42 3E48  
                             __ptext34 3F52                               __ptext26 467A  
                             __ptext18 46CE                               __ptext43 43EA  
                             __ptext35 46D8                               __ptext27 4618  
                             __ptext19 46E2                               __ptext44 44B6  
                             __ptext36 46F2                               __ptext28 4474  
                             __ptext45 1000                               __ptext37 46FA  
                             __ptext29 42B6                               __ptext46 45AC  
                             __ptext38 45D2                               __ptext47 43A0  
                             __ptext39 46A2                               __ptext48 4142  
                             __ptext49 40D2                               _fastener 0200  
                       _LCD_VERT_LIMIT FCC4                            _min_initial 0090  
                     __size_of_strncmp 0086                               _hr_final 0166  
                       i2_isdigit$1301 0002                             strcpy@from 0009  
                        __size_of_main 0D64                               _is_valid 1000  
                           strncmp@len 000B                     __end_of_initialize 3A34  
                          _sec_initial 016A                               _temp_set 01CE  
                        ??i2_lcdNibble 0001                            ??_lcdNibble 00C8  
                             _prev_set 017E                               int$flags 007F  
                            printf@idx 00DE                              printf@len 00E4  
                            printf@val 00E6            I2C_Master_Write@byteToWrite 00C9  
                            putch@data 00CA               __end_of_I2C_Master_Start 46F2  
             __end_of_I2C_Master_Write 46D8                             _INTCONbits 000FF2  
                         _motorStart_0 00F9                           _motorStart_1 00F7  
                         _motorStart_2 00F5                           _motorStart_3 00F3  
               __end_of_LCD_VERT_LIMIT FCC5                      _B_total_dispensed 005D  
                             isdigit@c 00CA                      _N_total_dispensed 0098  
                             intlevel2 0000            ?_generate_compartment_array 00C8  
                      _get_RTC_initial 3B7C                        ??_get_RTC_final 00D6  
                        _LCD_SIZE_HORZ FCC3                       ___lwmod@dividend 00CF  
                        _LCD_SIZE_VERT FCC2                       ___lldiv@dividend 00C8  
                            strncmp@s1 0007                              strncmp@s2 0009  
                             printf@ap 00E2                               printf@cp 00E0  
                 __end_of_I2C_sendData 45AC                __end_of_I2C_Master_Init 4206  
              __end_of_I2C_Master_Read 455C                __end_of_I2C_Master_Wait 467A  
              __end_of_I2C_Master_Stop 46EA                            lcdInst@data 00CA  
                          _motorStop_0 00F8                            _motorStop_1 00F6  
                          _motorStop_2 00F4                            _motorStop_3 00F2  
                  __end_ofi2_lcdNibble 3E48                               strcat@cp 0005  
                             strcat@to 0001                               strcmp@s1 0001  
                             strcmp@s2 0003                       ___lldiv@quotient 00D0  
                      ___lwmod@divisor 00D1                               strcpy@cp 000B  
                             strcpy@to 0007                        ___lwmod@counter 00D3  
                          _SSPCON1bits 000FC6                            _SSPCON2bits 000FC5  
                          _prev_number 0140          i2I2C_Master_Read@receivedByte 0003  
