

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 27 16:39:32 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.45
    56                           ; Generated 16/11/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4620 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  0031DE                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _white_tape
    95  0031DE  0001               	dw	1
    96                           
    97                           	psect	mediumconst
    98  00FE4E                     __pmediumconst:
    99                           	opt stack 0
   100  00FE4E  00                 	db	0
   101  00FE4F                     _keys:
   102                           	opt stack 0
   103  00FE4F  31                 	db	49
   104  00FE50  32                 	db	50
   105  00FE51  33                 	db	51
   106  00FE52  41                 	db	65
   107  00FE53  34                 	db	52
   108  00FE54  35                 	db	53
   109  00FE55  36                 	db	54
   110  00FE56  42                 	db	66
   111  00FE57  37                 	db	55
   112  00FE58  38                 	db	56
   113  00FE59  39                 	db	57
   114  00FE5A  43                 	db	67
   115  00FE5B  2A                 	db	42
   116  00FE5C  30                 	db	48
   117  00FE5D  23                 	db	35
   118  00FE5E  44                 	db	68
   119  00FE5F  00                 	db	0
   120  00FE60                     __end_of_keys:
   121                           	opt stack 0
   122  00FE60                     _dpowers:
   123                           	opt stack 0
   124  00FE60  0001               	dw	1
   125  00FE62  000A               	dw	10
   126  00FE64  0064               	dw	100
   127  00FE66  03E8               	dw	1000
   128  00FE68  2710               	dw	10000
   129  00FE6A                     __end_of_dpowers:
   130                           	opt stack 0
   131  00FE6A                     _array:
   132                           	opt stack 0
   133  00FE6A  30                 	db	48
   134  00FE6B  31                 	db	49
   135  00FE6C  00                 	db	0
   136  00FE6D                     __end_of_array:
   137                           	opt stack 0
   138  00FE6D                     _LCD_LEFT:
   139                           	opt stack 0
   140  00FE6D  00                 	db	0
   141  00FE6E                     __end_of_LCD_LEFT:
   142                           	opt stack 0
   143  00FE6E                     _LCD_RIGHT:
   144                           	opt stack 0
   145  00FE6E  01                 	db	1
   146  00FE6F                     __end_of_LCD_RIGHT:
   147                           	opt stack 0
   148  00FE6F                     _LCD_SIZE_VERT:
   149                           	opt stack 0
   150  00FE6F  02                 	db	2
   151  00FE70                     __end_of_LCD_SIZE_VERT:
   152                           	opt stack 0
   153  00FE70                     _LCD_SIZE_HORZ:
   154                           	opt stack 0
   155  00FE70  10                 	db	16
   156  00FE71                     __end_of_LCD_SIZE_HORZ:
   157                           	opt stack 0
   158  00FE71                     _LCD_VERT_LIMIT:
   159                           	opt stack 0
   160  00FE71  02                 	db	2
   161  00FE72                     __end_of_LCD_VERT_LIMIT:
   162                           	opt stack 0
   163  00FE72                     _LCD_HORZ_LIMIT:
   164                           	opt stack 0
   165  00FE72  28                 	db	40
   166  00FE73                     __end_of_LCD_HORZ_LIMIT:
   167                           	opt stack 0
   168  00FE73                     _strs:
   169                           	opt stack 0
   170  00FE73  42                 	db	66
   171  00FE74  00                 	db	0
   172  00FE75  00                 	db	0
   173  00FE76  00                 	db	0
   174  00FE77  00                 	db	0
   175  00FE78  4E                 	db	78
   176  00FE79  00                 	db	0
   177  00FE7A  00                 	db	0
   178  00FE7B  00                 	db	0
   179  00FE7C  00                 	db	0
   180  00FE7D  53                 	db	83
   181  00FE7E  00                 	db	0
   182  00FE7F  00                 	db	0
   183  00FE80  00                 	db	0
   184  00FE81  00                 	db	0
   185  00FE82  57                 	db	87
   186  00FE83  00                 	db	0
   187  00FE84  00                 	db	0
   188  00FE85  00                 	db	0
   189  00FE86  00                 	db	0
   190  00FE87  42                 	db	66
   191  00FE88  4E                 	db	78
   192  00FE89  00                 	db	0
   193  00FE8A  00                 	db	0
   194  00FE8B  00                 	db	0
   195  00FE8C  42                 	db	66
   196  00FE8D  53                 	db	83
   197  00FE8E  00                 	db	0
   198  00FE8F  00                 	db	0
   199  00FE90  00                 	db	0
   200  00FE91  42                 	db	66
   201  00FE92  57                 	db	87
   202  00FE93  00                 	db	0
   203  00FE94  00                 	db	0
   204  00FE95  00                 	db	0
   205  00FE96  42                 	db	66
   206  00FE97  42                 	db	66
   207  00FE98  4E                 	db	78
   208  00FE99  00                 	db	0
   209  00FE9A  00                 	db	0
   210  00FE9B  42                 	db	66
   211  00FE9C  42                 	db	66
   212  00FE9D  53                 	db	83
   213  00FE9E  00                 	db	0
   214  00FE9F  00                 	db	0
   215  00FEA0  42                 	db	66
   216  00FEA1  42                 	db	66
   217  00FEA2  57                 	db	87
   218  00FEA3  00                 	db	0
   219  00FEA4  00                 	db	0
   220  00FEA5  42                 	db	66
   221  00FEA6  4E                 	db	78
   222  00FEA7  57                 	db	87
   223  00FEA8  00                 	db	0
   224  00FEA9  00                 	db	0
   225  00FEAA  42                 	db	66
   226  00FEAB  53                 	db	83
   227  00FEAC  57                 	db	87
   228  00FEAD  00                 	db	0
   229  00FEAE  00                 	db	0
   230  00FEAF  42                 	db	66
   231  00FEB0  57                 	db	87
   232  00FEB1  57                 	db	87
   233  00FEB2  00                 	db	0
   234  00FEB3  00                 	db	0
   235  00FEB4  42                 	db	66
   236  00FEB5  4E                 	db	78
   237  00FEB6  57                 	db	87
   238  00FEB7  57                 	db	87
   239  00FEB8  00                 	db	0
   240  00FEB9  42                 	db	66
   241  00FEBA  53                 	db	83
   242  00FEBB  57                 	db	87
   243  00FEBC  57                 	db	87
   244  00FEBD  00                 	db	0
   245  00FEBE  42                 	db	66
   246  00FEBF  42                 	db	66
   247  00FEC0  53                 	db	83
   248  00FEC1  57                 	db	87
   249  00FEC2  00                 	db	0
   250  00FEC3  42                 	db	66
   251  00FEC4  42                 	db	66
   252  00FEC5  4E                 	db	78
   253  00FEC6  57                 	db	87
   254  00FEC7  00                 	db	0
   255  00FEC8  42                 	db	66
   256  00FEC9  4E                 	db	78
   257  00FECA  4E                 	db	78
   258  00FECB  57                 	db	87
   259  00FECC  00                 	db	0
   260  00FECD  42                 	db	66
   261  00FECE  4E                 	db	78
   262  00FECF  4E                 	db	78
   263  00FED0  4E                 	db	78
   264  00FED1  00                 	db	0
   265  00FED2  42                 	db	66
   266  00FED3  57                 	db	87
   267  00FED4  57                 	db	87
   268  00FED5  57                 	db	87
   269  00FED6  00                 	db	0
   270  00FED7                     __end_of_strs:
   271                           	opt stack 0
   272  0000                     _PORTAbits	set	3968
   273  0000                     _TRISAbits	set	3986
   274  0000                     _TRISDbits	set	3989
   275  0000                     _TRISCbits	set	3988
   276  0000                     _LATCbits	set	3979
   277  0000                     _ADRESL	set	4035
   278  0000                     _ADRESH	set	4036
   279  0000                     _ADCON0bits	set	4034
   280  0000                     _PORTB	set	3969
   281  0000                     _ADCON1	set	4033
   282  0000                     _ADCON0	set	4034
   283  0000                     _TRISE	set	3990
   284  0000                     _TRISD	set	3989
   285  0000                     _TRISC	set	3988
   286  0000                     _TRISB	set	3987
   287  0000                     _TRISA	set	3986
   288  0000                     _LATE	set	3981
   289  0000                     _LATC	set	3979
   290  0000                     _LATB	set	3978
   291  0000                     _LATA	set	3977
   292  0000                     _INTCONbits	set	4082
   293  0000                     _LATD	set	3980
   294  0000                     _LATDbits	set	3980
   295  0000                     _ADON	set	32272
   296  0000                     _INT1IF	set	32640
   297  0000                     _INT1IE	set	32643
   298  00FED7                     STR_26:
   299  00FED7  42                 	db	66	;'B'
   300  00FED8  3A                 	db	58	;':'
   301  00FED9  25                 	db	37
   302  00FEDA  64                 	db	100	;'d'
   303  00FEDB  20                 	db	32
   304  00FEDC  53                 	db	83	;'S'
   305  00FEDD  3A                 	db	58	;':'
   306  00FEDE  25                 	db	37
   307  00FEDF  64                 	db	100	;'d'
   308  00FEE0  20                 	db	32
   309  00FEE1  4E                 	db	78	;'N'
   310  00FEE2  3A                 	db	58	;':'
   311  00FEE3  25                 	db	37
   312  00FEE4  64                 	db	100	;'d'
   313  00FEE5  20                 	db	32
   314  00FEE6  57                 	db	87	;'W'
   315  00FEE7  3A                 	db	58	;':'
   316  00FEE8  25                 	db	37
   317  00FEE9  64                 	db	100	;'d'
   318  00FEEA  00                 	db	0
   319  00FEEB                     STR_47:
   320  00FEEB  31                 	db	49	;'1'
   321  00FEEC  3A                 	db	58	;':'
   322  00FEED  20                 	db	32
   323  00FEEE  6F                 	db	111	;'o'
   324  00FEEF  70                 	db	112	;'p'
   325  00FEF0  65                 	db	101	;'e'
   326  00FEF1  72                 	db	114	;'r'
   327  00FEF2  61                 	db	97	;'a'
   328  00FEF3  74                 	db	116	;'t'
   329  00FEF4  69                 	db	105	;'i'
   330  00FEF5  6F                 	db	111	;'o'
   331  00FEF6  6E                 	db	110	;'n'
   332  00FEF7  20                 	db	32
   333  00FEF8  74                 	db	116	;'t'
   334  00FEF9  69                 	db	105	;'i'
   335  00FEFA  6D                 	db	109	;'m'
   336  00FEFB  65                 	db	101	;'e'
   337  00FEFC  00                 	db	0
   338  00FEFD                     STR_6:
   339  00FEFD  61                 	db	97	;'a'
   340  00FEFE  73                 	db	115	;'s'
   341  00FEFF  73                 	db	115	;'s'
   342  00FF00  65                 	db	101	;'e'
   343  00FF01  6D                 	db	109	;'m'
   344  00FF02  62                 	db	98	;'b'
   345  00FF03  6C                 	db	108	;'l'
   346  00FF04  79                 	db	121	;'y'
   347  00FF05  20                 	db	32
   348  00FF06  73                 	db	115	;'s'
   349  00FF07  74                 	db	116	;'t'
   350  00FF08  65                 	db	101	;'e'
   351  00FF09  70                 	db	112	;'p'
   352  00FF0A  3A                 	db	58	;':'
   353  00FF0B  25                 	db	37
   354  00FF0C  64                 	db	100	;'d'
   355  00FF0D  00                 	db	0
   356  00FF0E                     STR_50:
   357  00FF0E  57                 	db	87	;'W'
   358  00FF0F  72                 	db	114	;'r'
   359  00FF10  6F                 	db	111	;'o'
   360  00FF11  6E                 	db	110	;'n'
   361  00FF12  67                 	db	103	;'g'
   362  00FF13  20                 	db	32
   363  00FF14  6E                 	db	110	;'n'
   364  00FF15  75                 	db	117	;'u'
   365  00FF16  6D                 	db	109	;'m'
   366  00FF17  62                 	db	98	;'b'
   367  00FF18  65                 	db	101	;'e'
   368  00FF19  72                 	db	114	;'r'
   369  00FF1A  21                 	db	33
   370  00FF1B  20                 	db	32
   371  00FF1C  00                 	db	0
   372  00FF1D                     STR_1:
   373  00FF1D  61                 	db	97	;'a'
   374  00FF1E  73                 	db	115	;'s'
   375  00FF1F  73                 	db	115	;'s'
   376  00FF20  65                 	db	101	;'e'
   377  00FF21  6D                 	db	109	;'m'
   378  00FF22  62                 	db	98	;'b'
   379  00FF23  6C                 	db	108	;'l'
   380  00FF24  79                 	db	121	;'y'
   381  00FF25  20                 	db	32
   382  00FF26  73                 	db	115	;'s'
   383  00FF27  74                 	db	116	;'t'
   384  00FF28  65                 	db	101	;'e'
   385  00FF29  70                 	db	112	;'p'
   386  00FF2A  3A                 	db	58	;':'
   387  00FF2B  00                 	db	0
   388  00FF2C                     STR_2:
   389  00FF2C  66                 	db	102	;'f'
   390  00FF2D  61                 	db	97	;'a'
   391  00FF2E  73                 	db	115	;'s'
   392  00FF2F  74                 	db	116	;'t'
   393  00FF30  65                 	db	101	;'e'
   394  00FF31  6E                 	db	110	;'n'
   395  00FF32  65                 	db	101	;'e'
   396  00FF33  72                 	db	114	;'r'
   397  00FF34  20                 	db	32
   398  00FF35  73                 	db	115	;'s'
   399  00FF36  65                 	db	101	;'e'
   400  00FF37  74                 	db	116	;'t'
   401  00FF38  3A                 	db	58	;':'
   402  00FF39  00                 	db	0
   403  00FF3A                     STR_49:
   404  00FF3A  64                 	db	100	;'d'
   405  00FF3B  69                 	db	105	;'i'
   406  00FF3C  73                 	db	115	;'s'
   407  00FF3D  70                 	db	112	;'p'
   408  00FF3E  6C                 	db	108	;'l'
   409  00FF3F  61                 	db	97	;'a'
   410  00FF40  79                 	db	121	;'y'
   411  00FF41  20                 	db	32
   412  00FF42  74                 	db	116	;'t'
   413  00FF43  69                 	db	105	;'i'
   414  00FF44  6D                 	db	109	;'m'
   415  00FF45  65                 	db	101	;'e'
   416  00FF46  00                 	db	0
   417  00FF47                     STR_41:
   418  00FF47  79                 	db	121	;'y'
   419  00FF48  6F                 	db	111	;'o'
   420  00FF49  75                 	db	117	;'u'
   421  00FF4A  27                 	db	39
   422  00FF4B  72                 	db	114	;'r'
   423  00FF4C  65                 	db	101	;'e'
   424  00FF4D  20                 	db	32
   425  00FF4E  64                 	db	100	;'d'
   426  00FF4F  6F                 	db	111	;'o'
   427  00FF50  6E                 	db	110	;'n'
   428  00FF51  65                 	db	101	;'e'
   429  00FF52  00                 	db	0
   430  00FF53                     STR_63:
   431  00FF53  57                 	db	87	;'W'
   432  00FF54  72                 	db	114	;'r'
   433  00FF55  6F                 	db	111	;'o'
   434  00FF56  6E                 	db	110	;'n'
   435  00FF57  67                 	db	103	;'g'
   436  00FF58  20                 	db	32
   437  00FF59  69                 	db	105	;'i'
   438  00FF5A  6E                 	db	110	;'n'
   439  00FF5B  70                 	db	112	;'p'
   440  00FF5C  75                 	db	117	;'u'
   441  00FF5D  74                 	db	116	;'t'
   442  00FF5E  00                 	db	0
   443  00FF5F                     STR_58:
   444  00FF5F  77                 	db	119	;'w'
   445  00FF60  72                 	db	114	;'r'
   446  00FF61  6F                 	db	111	;'o'
   447  00FF62  6E                 	db	110	;'n'
   448  00FF63  67                 	db	103	;'g'
   449  00FF64  20                 	db	32
   450  00FF65  73                 	db	115	;'s'
   451  00FF66  65                 	db	101	;'e'
   452  00FF67  74                 	db	116	;'t'
   453  00FF68  21                 	db	33
   454  00FF69  00                 	db	0
   455  00FF6A                     STR_48:
   456  00FF6A  32                 	db	50	;'2'
   457  00FF6B  3A                 	db	58	;':'
   458  00FF6C  20                 	db	32
   459  00FF6D  72                 	db	114	;'r'
   460  00FF6E  65                 	db	101	;'e'
   461  00FF6F  73                 	db	115	;'s'
   462  00FF70  74                 	db	116	;'t'
   463  00FF71  61                 	db	97	;'a'
   464  00FF72  72                 	db	114	;'r'
   465  00FF73  74                 	db	116	;'t'
   466  00FF74  00                 	db	0
   467  00FF75                     STR_39:
   468  00FF75  72                 	db	114	;'r'
   469  00FF76  65                 	db	101	;'e'
   470  00FF77  6D                 	db	109	;'m'
   471  00FF78  61                 	db	97	;'a'
   472  00FF79  69                 	db	105	;'i'
   473  00FF7A  6E                 	db	110	;'n'
   474  00FF7B  3A                 	db	58	;':'
   475  00FF7C  25                 	db	37
   476  00FF7D  64                 	db	100	;'d'
   477  00FF7E  00                 	db	0
   478  00FF7F                     STR_55:
   479  00FF7F  63                 	db	99	;'c'
   480  00FF80  6F                 	db	111	;'o'
   481  00FF81  72                 	db	114	;'r'
   482  00FF82  72                 	db	114	;'r'
   483  00FF83  65                 	db	101	;'e'
   484  00FF84  63                 	db	99	;'c'
   485  00FF85  74                 	db	116	;'t'
   486  00FF86  21                 	db	33
   487  00FF87  00                 	db	0
   488  00FF88                     STR_64:
   489  00FF88  54                 	db	84	;'T'
   490  00FF89  4F                 	db	79	;'O'
   491  00FF8A  4F                 	db	79	;'O'
   492  00FF8B  20                 	db	32
   493  00FF8C  4D                 	db	77	;'M'
   494  00FF8D  41                 	db	65	;'A'
   495  00FF8E  4E                 	db	78	;'N'
   496  00FF8F  59                 	db	89	;'Y'
   497  00FF90  00                 	db	0
   498  00FF91                     STR_4:
   499  00FF91  6E                 	db	110	;'n'
   500  00FF92  75                 	db	117	;'u'
   501  00FF93  6D                 	db	109	;'m'
   502  00FF94  62                 	db	98	;'b'
   503  00FF95  65                 	db	101	;'e'
   504  00FF96  72                 	db	114	;'r'
   505  00FF97  3A                 	db	58	;':'
   506  00FF98  00                 	db	0
   507  00FF99                     STR_85:
   508  00FF99  28                 	db	40
   509  00FF9A  6E                 	db	110	;'n'
   510  00FF9B  75                 	db	117	;'u'
   511  00FF9C  6C                 	db	108	;'l'
   512  00FF9D  6C                 	db	108	;'l'
   513  00FF9E  29                 	db	41
   514  00FF9F  00                 	db	0
   515  00FFA0                     STR_61:
   516  00FFA0  77                 	db	119	;'w'
   517  00FFA1  72                 	db	114	;'r'
   518  00FFA2  6F                 	db	111	;'o'
   519  00FFA3  6E                 	db	110	;'n'
   520  00FFA4  67                 	db	103	;'g'
   521  00FFA5  21                 	db	33
   522  00FFA6  00                 	db	0
   523  00FFA7                     STR_5:
   524  00FFA7  44                 	db	68	;'D'
   525  00FFA8  6F                 	db	111	;'o'
   526  00FFA9  6E                 	db	110	;'n'
   527  00FFAA  65                 	db	101	;'e'
   528  00FFAB  21                 	db	33
   529  00FFAC  00                 	db	0
   530  00FFAD                     STR_83:
   531  00FFAD  42                 	db	66	;'B'
   532  00FFAE  4E                 	db	78	;'N'
   533  00FFAF  4E                 	db	78	;'N'
   534  00FFB0  4E                 	db	78	;'N'
   535  00FFB1  00                 	db	0
   536  00FFB2                     STR_81:
   537  00FFB2  42                 	db	66	;'B'
   538  00FFB3  42                 	db	66	;'B'
   539  00FFB4  4E                 	db	78	;'N'
   540  00FFB5  57                 	db	87	;'W'
   541  00FFB6  00                 	db	0
   542  00FFB7                     STR_82:
   543  00FFB7  42                 	db	66	;'B'
   544  00FFB8  4E                 	db	78	;'N'
   545  00FFB9  4E                 	db	78	;'N'
   546  00FFBA  57                 	db	87	;'W'
   547  00FFBB  00                 	db	0
   548  00FFBC                     STR_80:
   549  00FFBC  42                 	db	66	;'B'
   550  00FFBD  42                 	db	66	;'B'
   551  00FFBE  53                 	db	83	;'S'
   552  00FFBF  57                 	db	87	;'W'
   553  00FFC0  00                 	db	0
   554  00FFC1                     STR_78:
   555  00FFC1  42                 	db	66	;'B'
   556  00FFC2  4E                 	db	78	;'N'
   557  00FFC3  57                 	db	87	;'W'
   558  00FFC4  57                 	db	87	;'W'
   559  00FFC5  00                 	db	0
   560  00FFC6                     STR_79:
   561  00FFC6  42                 	db	66	;'B'
   562  00FFC7  53                 	db	83	;'S'
   563  00FFC8  57                 	db	87	;'W'
   564  00FFC9  57                 	db	87	;'W'
   565  00FFCA  00                 	db	0
   566  00FFCB                     STR_84:
   567  00FFCB  42                 	db	66	;'B'
   568  00FFCC  57                 	db	87	;'W'
   569  00FFCD  57                 	db	87	;'W'
   570  00FFCE  57                 	db	87	;'W'
   571  00FFCF  00                 	db	0
   572  00FFD0                     STR_7:
   573  00FFD0  73                 	db	115	;'s'
   574  00FFD1  74                 	db	116	;'t'
   575  00FFD2  65                 	db	101	;'e'
   576  00FFD3  70                 	db	112	;'p'
   577  00FFD4  00                 	db	0
   578  00FFD5                     STR_72:
   579  00FFD5  42                 	db	66	;'B'
   580  00FFD6  42                 	db	66	;'B'
   581  00FFD7  4E                 	db	78	;'N'
   582  00FFD8  00                 	db	0
   583  00FFD9                     STR_73:
   584  00FFD9  42                 	db	66	;'B'
   585  00FFDA  42                 	db	66	;'B'
   586  00FFDB  53                 	db	83	;'S'
   587  00FFDC  00                 	db	0
   588  00FFDD                     STR_74:
   589  00FFDD  42                 	db	66	;'B'
   590  00FFDE  42                 	db	66	;'B'
   591  00FFDF  57                 	db	87	;'W'
   592  00FFE0  00                 	db	0
   593  00FFE1                     STR_77:
   594  00FFE1  42                 	db	66	;'B'
   595  00FFE2  57                 	db	87	;'W'
   596  00FFE3  57                 	db	87	;'W'
   597  00FFE4  00                 	db	0
   598  00FFE5                     STR_14:
   599  00FFE5  20                 	db	32
   600  00FFE6  42                 	db	66	;'B'
   601  00FFE7  3A                 	db	58	;':'
   602  00FFE8  00                 	db	0
   603  00FFE9                     STR_16:
   604  00FFE9  20                 	db	32
   605  00FFEA  4E                 	db	78	;'N'
   606  00FFEB  3A                 	db	58	;':'
   607  00FFEC  00                 	db	0
   608  00FFED                     STR_18:
   609  00FFED  20                 	db	32
   610  00FFEE  53                 	db	83	;'S'
   611  00FFEF  3A                 	db	58	;':'
   612  00FFF0  00                 	db	0
   613  00FFF1                     STR_20:
   614  00FFF1  20                 	db	32
   615  00FFF2  57                 	db	87	;'W'
   616  00FFF3  3A                 	db	58	;':'
   617  00FFF4  00                 	db	0
   618  00FFF5                     STR_3:
   619  00FFF5  25                 	db	37
   620  00FFF6  73                 	db	115	;'s'
   621  00FFF7  00                 	db	0
   622  00FFF8                     STR_11:
   623  00FFF8  2C                 	db	44
   624  00FFF9  00                 	db	0
   625  00FFFA                     STR_51:
   626  00FFFA  42                 	db	66	;'B'
   627  00FFFB  00                 	db	0
   628  00FFFC                     STR_23:
   629  00FFFC  43                 	db	67	;'C'
   630  00FFFD  00                 	db	0
   631  0000                     
   632                           ; #config settings
   633  00FFFE  00                 	db	0	; dummy byte at the end
   634  0000                     
   635                           	psect	cinit
   636  002DD2                     __pcinit:
   637                           	opt stack 0
   638  002DD2                     start_initialization:
   639                           	opt stack 0
   640  002DD2                     __initialization:
   641                           	opt stack 0
   642                           
   643                           ; Initialize objects allocated to COMRAM (2 bytes)
   644                           ; load TBLPTR registers with __pidataCOMRAM
   645  002DD2  0EDE               	movlw	low __pidataCOMRAM
   646  002DD4  6EF6               	movwf	tblptrl,c
   647  002DD6  0E31               	movlw	high __pidataCOMRAM
   648  002DD8  6EF7               	movwf	tblptrh,c
   649  002DDA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   650  002DDC  6EF8               	movwf	tblptru,c
   651  002DDE  0009               	tblrd		*+	;fetch initializer
   652  002DE0  CFF5 F06D          	movff	tablat,__pdataCOMRAM
   653  002DE4  0009               	tblrd		*+	;fetch initializer
   654  002DE6  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
   655                           
   656                           ; Clear objects allocated to BANK2 (200 bytes)
   657  002DEA  EE02  F000         	lfsr	0,__pbssBANK2
   658  002DEE  0EC8               	movlw	200
   659  002DF0                     clear_0:
   660  002DF0  6AEE               	clrf	postinc0,c
   661  002DF2  06E8               	decf	wreg,f,c
   662  002DF4  E1FD               	bnz	clear_0
   663                           
   664                           ; Clear objects allocated to BANK1 (128 bytes)
   665  002DF6  EE01  F000         	lfsr	0,__pbssBANK1
   666  002DFA  0E80               	movlw	128
   667  002DFC                     clear_1:
   668  002DFC  6AEE               	clrf	postinc0,c
   669  002DFE  06E8               	decf	wreg,f,c
   670  002E00  E1FD               	bnz	clear_1
   671                           
   672                           ; Clear objects allocated to BANK0 (101 bytes)
   673  002E02  EE00  F080         	lfsr	0,__pbssBANK0
   674  002E06  0E65               	movlw	101
   675  002E08                     clear_2:
   676  002E08  6AEE               	clrf	postinc0,c
   677  002E0A  06E8               	decf	wreg,f,c
   678  002E0C  E1FD               	bnz	clear_2
   679                           
   680                           ; Clear objects allocated to COMRAM (54 bytes)
   681  002E0E  EE00  F001         	lfsr	0,__pbssCOMRAM
   682  002E12  0E36               	movlw	54
   683  002E14                     clear_3:
   684  002E14  6AEE               	clrf	postinc0,c
   685  002E16  06E8               	decf	wreg,f,c
   686  002E18  E1FD               	bnz	clear_3
   687  002E1A                     end_of_initialization:
   688                           	opt stack 0
   689  002E1A                     __end_of__initialization:
   690                           	opt stack 0
   691  002E1A  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   692  002E1C  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   693  002E1E  0100               	movlb	0
   694  002E20  EF34  F007         	goto	_main	;jump to C main() function
   695                           tblptru	equ	0xFF8
   696                           tblptrh	equ	0xFF7
   697                           tblptrl	equ	0xFF6
   698                           tablat	equ	0xFF5
   699                           postinc0	equ	0xFEE
   700                           wreg	equ	0xFE8
   701                           
   702                           	psect	bssCOMRAM
   703  000001                     __pbssCOMRAM:
   704                           	opt stack 0
   705  000001                     _compartment_number:
   706                           	opt stack 0
   707  000001                     	ds	16
   708  000011                     _mode:
   709                           	opt stack 0
   710  000011                     	ds	2
   711  000013                     _W_count:
   712                           	opt stack 0
   713  000013                     	ds	2
   714  000015                     _N_count:
   715                           	opt stack 0
   716  000015                     	ds	2
   717  000017                     _S_count:
   718                           	opt stack 0
   719  000017                     	ds	2
   720  000019                     _B_count:
   721                           	opt stack 0
   722  000019                     	ds	2
   723  00001B                     _W:
   724                           	opt stack 0
   725  00001B                     	ds	2
   726  00001D                     _S:
   727                           	opt stack 0
   728  00001D                     	ds	2
   729  00001F                     _N:
   730                           	opt stack 0
   731  00001F                     	ds	2
   732  000021                     _B:
   733                           	opt stack 0
   734  000021                     	ds	2
   735  000023                     _prev_state:
   736                           	opt stack 0
   737  000023                     	ds	2
   738  000025                     _counter_step:
   739                           	opt stack 0
   740  000025                     	ds	2
   741  000027                     _assembly_step:
   742                           	opt stack 0
   743  000027                     	ds	2
   744  000029                     _state:
   745                           	opt stack 0
   746  000029                     	ds	2
   747  00002B                     _i:
   748                           	opt stack 0
   749  00002B                     	ds	2
   750  00002D                     _temp:
   751                           	opt stack 0
   752  00002D                     	ds	1
   753  00002E                     	ds	1
   754  00002F                     _LCDinterruptState:
   755                           	opt stack 0
   756  00002F                     	ds	1
   757  000030                     _current_set2:
   758                           	opt stack 0
   759  000030                     	ds	5
   760  000035                     _number:
   761                           	opt stack 0
   762  000035                     	ds	2
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           
   770                           	psect	dataCOMRAM
   771  00006D                     __pdataCOMRAM:
   772                           	opt stack 0
   773  00006D                     _white_tape:
   774                           	opt stack 0
   775  00006D                     	ds	2
   776                           tblptru	equ	0xFF8
   777                           tblptrh	equ	0xFF7
   778                           tblptrl	equ	0xFF6
   779                           tablat	equ	0xFF5
   780                           postinc0	equ	0xFEE
   781                           wreg	equ	0xFE8
   782                           
   783                           	psect	bssBANK0
   784  000080                     __pbssBANK0:
   785                           	opt stack 0
   786  000080                     _W_array:
   787                           	opt stack 0
   788  000080                     	ds	16
   789  000090                     _N_array:
   790                           	opt stack 0
   791  000090                     	ds	16
   792  0000A0                     _B_array:
   793                           	opt stack 0
   794  0000A0                     	ds	16
   795  0000B0                     _compartment_array:
   796                           	opt stack 0
   797  0000B0                     	ds	16
   798  0000C0                     _time:
   799                           	opt stack 0
   800  0000C0                     	ds	7
   801  0000C7                     _counter_test:
   802                           	opt stack 0
   803  0000C7                     	ds	2
   804  0000C9                     _operation_time:
   805                           	opt stack 0
   806  0000C9                     	ds	2
   807  0000CB                     _operation:
   808                           	opt stack 0
   809  0000CB                     	ds	2
   810  0000CD                     _motor_counter:
   811                           	opt stack 0
   812  0000CD                     	ds	2
   813  0000CF                     _change_mode:
   814                           	opt stack 0
   815  0000CF                     	ds	2
   816  0000D1                     _total_number:
   817                           	opt stack 0
   818  0000D1                     	ds	2
   819  0000D3                     _valid:
   820                           	opt stack 0
   821  0000D3                     	ds	2
   822  0000D5                     _error:
   823                           	opt stack 0
   824  0000D5                     	ds	2
   825  0000D7                     _counter:
   826                           	opt stack 0
   827  0000D7                     	ds	2
   828  0000D9                     _angle:
   829                           	opt stack 0
   830  0000D9                     	ds	2
   831  0000DB                     _temp_set:
   832                           	opt stack 0
   833  0000DB                     	ds	5
   834  0000E0                     _current_set:
   835                           	opt stack 0
   836  0000E0                     	ds	5
   837                           tblptru	equ	0xFF8
   838                           tblptrh	equ	0xFF7
   839                           tblptrl	equ	0xFF6
   840                           tablat	equ	0xFF5
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           
   844                           	psect	bssBANK1
   845  000100                     __pbssBANK1:
   846                           	opt stack 0
   847  000100                     _S_array:
   848                           	opt stack 0
   849  000100                     	ds	16
   850  000110                     _prev_number:
   851                           	opt stack 0
   852  000110                     	ds	16
   853  000120                     _final_number:
   854                           	opt stack 0
   855  000120                     	ds	16
   856  000130                     _prev_set:
   857                           	opt stack 0
   858  000130                     	ds	40
   859  000158                     _final_set:
   860                           	opt stack 0
   861  000158                     	ds	40
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           
   869                           	psect	bssBANK2
   870  000200                     __pbssBANK2:
   871                           	opt stack 0
   872  000200                     _fastener:
   873                           	opt stack 0
   874  000200                     	ds	200
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           
   882                           	psect	cstackBANK1
   883  000180                     __pcstackBANK1:
   884                           	opt stack 0
   885  000180                     printf@flag:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x0
   889  000180                     	ds	1
   890  000181                     printf@prec:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x1
   894  000181                     	ds	1
   895  000182                     printf@ap:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x2
   899  000182                     	ds	2
   900  000184                     printf@cp:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x4
   904  000184                     	ds	2
   905  000186                     printf@val:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x6
   909  000186                     	ds	2
   910  000188                     printf@c:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x8
   914  000188                     	ds	1
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           
   922                           	psect	cstackBANK0
   923  0000E5                     __pcstackBANK0:
   924                           	opt stack 0
   925  0000E5                     ??_servoRotate0:
   926  0000E5                     ??_servoRotate180:
   927  0000E5                     ??_motorStart_0:
   928  0000E5                     ??_motorStop_0:
   929  0000E5                     ?___wmul:
   930                           	opt stack 0
   931  0000E5                     ?___awmod:
   932                           	opt stack 0
   933  0000E5                     ?___lwdiv:
   934                           	opt stack 0
   935  0000E5                     lcdNibble@temp:
   936                           	opt stack 0
   937  0000E5                     ___wmul@multiplier:
   938                           	opt stack 0
   939  0000E5                     ___awmod@dividend:
   940                           	opt stack 0
   941  0000E5                     ___lwdiv@dividend:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x0
   945  0000E5                     	ds	1
   946  0000E6                     lcdNibble@data:
   947                           	opt stack 0
   948  0000E6                     servoRotate180@i:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x1
   952  0000E6                     	ds	1
   953  0000E7                     lcdInst@data:
   954                           	opt stack 0
   955  0000E7                     putch@data:
   956                           	opt stack 0
   957  0000E7                     ___wmul@multiplicand:
   958                           	opt stack 0
   959  0000E7                     ___awmod@divisor:
   960                           	opt stack 0
   961  0000E7                     ___lwdiv@divisor:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x2
   965  0000E7                     	ds	1
   966  0000E8                     ??_initLCD:
   967  0000E8                     ?_read_IR:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x3
   971  0000E8                     	ds	1
   972  0000E9                     ___awmod@counter:
   973                           	opt stack 0
   974  0000E9                     ___lwdiv@counter:
   975                           	opt stack 0
   976  0000E9                     ___wmul@product:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x4
   980  0000E9                     	ds	1
   981  0000EA                     ??_read_IR:
   982  0000EA                     ___awmod@sign:
   983                           	opt stack 0
   984  0000EA                     ___lwdiv@quotient:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x5
   988  0000EA                     	ds	1
   989  0000EB                     strncpy@to:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x6
   993  0000EB                     	ds	1
   994  0000EC                     ?___lwmod:
   995                           	opt stack 0
   996  0000EC                     read_IR@input:
   997                           	opt stack 0
   998  0000EC                     ___lwmod@dividend:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x7
  1002  0000EC                     	ds	1
  1003  0000ED                     strncpy@from:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x8
  1007  0000ED                     	ds	1
  1008  0000EE                     ___lwmod@divisor:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x9
  1012  0000EE                     	ds	1
  1013  0000EF                     strncpy@size:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0xA
  1017  0000EF                     	ds	1
  1018  0000F0                     ___lwmod@counter:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0xB
  1022  0000F0                     	ds	1
  1023  0000F1                     ?_printf:
  1024                           	opt stack 0
  1025  0000F1                     printf@f:
  1026                           	opt stack 0
  1027  0000F1                     strncpy@cp:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0xC
  1031  0000F1                     	ds	2
  1032  0000F3                     store_prev@i:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0xE
  1036  0000F3                     	ds	8
  1037  0000FB                     ??_printf:
  1038                           
  1039                           ; 1 bytes @ 0x16
  1040  0000FB                     	ds	2
  1041  0000FD                     ??_main:
  1042                           
  1043                           ; 1 bytes @ 0x18
  1044  0000FD                     	ds	3
  1045                           tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           postinc0	equ	0xFEE
  1050                           wreg	equ	0xFE8
  1051                           
  1052                           	psect	cstackCOMRAM
  1053  000037                     __pcstackCOMRAM:
  1054                           	opt stack 0
  1055  000037                     ?_check:
  1056                           	opt stack 0
  1057  000037                     ?_strcmp:
  1058                           	opt stack 0
  1059  000037                     ?i2___wmul:
  1060                           	opt stack 0
  1061  000037                     ?i2___lwdiv:
  1062                           	opt stack 0
  1063  000037                     i2lcdNibble@temp:
  1064                           	opt stack 0
  1065  000037                     generate_compartment_array@step:
  1066                           	opt stack 0
  1067  000037                     strcat@to:
  1068                           	opt stack 0
  1069  000037                     strcmp@s1:
  1070                           	opt stack 0
  1071  000037                     i2___wmul@multiplier:
  1072                           	opt stack 0
  1073  000037                     i2___lwdiv@dividend:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x0
  1077  000037                     	ds	1
  1078  000038                     i2lcdNibble@data:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x1
  1082  000038                     	ds	1
  1083  000039                     ??_generate_compartment_array:
  1084  000039                     i2lcdInst@data:
  1085                           	opt stack 0
  1086  000039                     i2putch@data:
  1087                           	opt stack 0
  1088  000039                     strcat@from:
  1089                           	opt stack 0
  1090  000039                     strcmp@s2:
  1091                           	opt stack 0
  1092  000039                     i2___wmul@multiplicand:
  1093                           	opt stack 0
  1094  000039                     i2___lwdiv@divisor:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x2
  1098  000039                     	ds	1
  1099  00003A                     ??i2_initLCD:
  1100                           
  1101                           ; 1 bytes @ 0x3
  1102  00003A                     	ds	1
  1103  00003B                     ??_strcmp:
  1104  00003B                     strcat@cp:
  1105                           	opt stack 0
  1106  00003B                     i2___wmul@product:
  1107                           	opt stack 0
  1108  00003B                     i2___lwdiv@quotient:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x4
  1112  00003B                     	ds	1
  1113  00003C                     strcmp@r:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x5
  1117  00003C                     	ds	1
  1118  00003D                     ??_is_valid:
  1119  00003D                     ?_strncmp:
  1120                           	opt stack 0
  1121  00003D                     i2___lwdiv@counter:
  1122                           	opt stack 0
  1123  00003D                     strcpy@to:
  1124                           	opt stack 0
  1125  00003D                     strncmp@s1:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x6
  1129  00003D                     	ds	1
  1130  00003E                     ?i2___lwmod:
  1131                           	opt stack 0
  1132  00003E                     i2___lwmod@dividend:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x7
  1136  00003E                     	ds	1
  1137  00003F                     strcpy@from:
  1138                           	opt stack 0
  1139  00003F                     strncmp@s2:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x8
  1143  00003F                     	ds	1
  1144  000040                     i2___lwmod@divisor:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x9
  1148  000040                     	ds	1
  1149  000041                     strcpy@cp:
  1150                           	opt stack 0
  1151  000041                     strncmp@len:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0xA
  1155  000041                     	ds	1
  1156  000042                     i2___lwmod@counter:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0xB
  1160  000042                     	ds	1
  1161  000043                     ??_strncmp:
  1162  000043                     ?i2_printf:
  1163                           	opt stack 0
  1164  000043                     i2printf@f:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0xC
  1168  000043                     	ds	4
  1169  000047                     ??i2_printf:
  1170                           
  1171                           ; 1 bytes @ 0x10
  1172  000047                     	ds	2
  1173  000049                     i2printf@flag:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x12
  1177  000049                     	ds	1
  1178  00004A                     i2printf@prec:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x13
  1182  00004A                     	ds	1
  1183  00004B                     i2printf@ap:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x14
  1187  00004B                     	ds	2
  1188  00004D                     i2printf@cp:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x16
  1192  00004D                     	ds	2
  1193  00004F                     i2printf@val:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x18
  1197  00004F                     	ds	2
  1198  000051                     i2printf@c:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x1A
  1202  000051                     	ds	1
  1203  000052                     ??_interruptHandler:
  1204                           
  1205                           ; 1 bytes @ 0x1B
  1206  000052                     	ds	23
  1207  000069                     interruptHandler@i:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x32
  1211  000069                     	ds	2
  1212  00006B                     interruptHandler@keypress:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x34
  1216  00006B                     	ds	1
  1217  00006C                     interruptHandler@temp:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x35
  1221  00006C                     	ds	1
  1222                           tblptru	equ	0xFF8
  1223                           tblptrh	equ	0xFF7
  1224                           tblptrl	equ	0xFF6
  1225                           tablat	equ	0xFF5
  1226                           postinc0	equ	0xFEE
  1227                           wreg	equ	0xFE8
  1228                           
  1229 ;;
  1230 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1231 ;;
  1232 ;; *************** function _main *****************
  1233 ;; Defined at:
  1234 ;;		line 36 in file "main.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;Total ram usage:        3 bytes
  1253 ;; Hardware stack levels required when called:    7
  1254 ;; This function calls:
  1255 ;;		___awmod
  1256 ;;		___wmul
  1257 ;;		_initLCD
  1258 ;;		_initialize
  1259 ;;		_lcdInst
  1260 ;;		_motorStart_0
  1261 ;;		_motorStop_0
  1262 ;;		_printf
  1263 ;;		_putch
  1264 ;;		_read_IR
  1265 ;;		_servoRotate0
  1266 ;;		_servoRotate180
  1267 ;;		_store_prev
  1268 ;; This function is called by:
  1269 ;;		Startup code after reset
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           	psect	text0
  1274  000E68                     __ptext0:
  1275                           	opt stack 0
  1276  000E68                     _main:
  1277                           	opt stack 24
  1278                           
  1279                           ;main.c: 42: LATA = 0x00;
  1280                           
  1281                           ;incstack = 0
  1282  000E68  0E00               	movlw	0
  1283  000E6A  6E89               	movwf	3977,c	;volatile
  1284                           
  1285                           ;main.c: 43: LATB = 0x00;
  1286  000E6C  0E00               	movlw	0
  1287  000E6E  6E8A               	movwf	3978,c	;volatile
  1288                           
  1289                           ;main.c: 44: LATC = 0x00;
  1290  000E70  0E00               	movlw	0
  1291  000E72  6E8B               	movwf	3979,c	;volatile
  1292                           
  1293                           ;main.c: 45: LATD = 0x00;
  1294  000E74  0E00               	movlw	0
  1295  000E76  6E8C               	movwf	3980,c	;volatile
  1296                           
  1297                           ;main.c: 46: LATE = 0x00;
  1298  000E78  0E00               	movlw	0
  1299  000E7A  6E8D               	movwf	3981,c	;volatile
  1300                           
  1301                           ;main.c: 50: TRISA = 0xFF;
  1302  000E7C  6892               	setf	3986,c	;volatile
  1303                           
  1304                           ;main.c: 51: TRISB = 0xFF;
  1305  000E7E  6893               	setf	3987,c	;volatile
  1306                           
  1307                           ;main.c: 52: TRISC = 0x00;
  1308  000E80  0E00               	movlw	0
  1309  000E82  6E94               	movwf	3988,c	;volatile
  1310                           
  1311                           ;main.c: 53: TRISD = 0x00;
  1312  000E84  0E00               	movlw	0
  1313  000E86  6E95               	movwf	3989,c	;volatile
  1314                           
  1315                           ;main.c: 54: TRISE = 0x00;
  1316  000E88  0E00               	movlw	0
  1317  000E8A  6E96               	movwf	3990,c	;volatile
  1318                           
  1319                           ;main.c: 57: ADCON0 = 0x00;
  1320  000E8C  0E00               	movlw	0
  1321  000E8E  6EC2               	movwf	4034,c	;volatile
  1322                           
  1323                           ;main.c: 58: ADCON1 = 0b00001111;
  1324  000E90  0E0F               	movlw	15
  1325  000E92  6EC1               	movwf	4033,c	;volatile
  1326                           
  1327                           ;main.c: 61: INT1IE = 1;
  1328  000E94  86F0               	bsf	intcon3,3,c	;volatile
  1329                           
  1330                           ;main.c: 62: (INTCONbits.GIE = 1);
  1331  000E96  8EF2               	bsf	intcon,7,c	;volatile
  1332                           
  1333                           ;main.c: 65: initLCD();
  1334  000E98  EC3B  F017         	call	_initLCD	;wreg free
  1335  000E9C                     
  1336                           ;main.c: 108: if (mode == 0){
  1337  000E9C  5011               	movf	_mode,w,c
  1338  000E9E  1012               	iorwf	_mode+1,w,c
  1339  000EA0  A4D8               	btfss	status,2,c
  1340  000EA2  D1C1               	goto	l252
  1341                           
  1342                           ;main.c: 110: initLCD();
  1343  000EA4  EC3B  F017         	call	_initLCD	;wreg free
  1344  000EA8                     
  1345                           ;main.c: 112: if (state == 0){
  1346  000EA8  5029               	movf	_state,w,c
  1347  000EAA  102A               	iorwf	_state+1,w,c
  1348  000EAC  A4D8               	btfss	status,2,c
  1349  000EAE  D023               	goto	l243
  1350                           
  1351                           ;main.c: 114: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1352  000EB0  0E80               	movlw	128
  1353  000EB2  ECCF  F018         	call	_lcdInst
  1354  000EB6  0E41               	movlw	65
  1355  000EB8  0100               	movlb	0	; () banked
  1356  000EBA  6FFD               	movwf	??_main& (0+255),b
  1357  000EBC  0EEE               	movlw	238
  1358  000EBE                     u4297:
  1359  000EBE  2EE8               	decfsz	wreg,f,c
  1360  000EC0  D7FE               	bra	u4297
  1361  000EC2  2FFD               	decfsz	??_main& (0+255),f,b
  1362  000EC4  D7FC               	bra	u4297
  1363  000EC6  F000               	nop	
  1364                           
  1365                           ;main.c: 115: printf("assembly step:");
  1366  000EC8  0E1D               	movlw	low STR_1
  1367  000ECA  0100               	movlb	0	; () banked
  1368  000ECC  6FF1               	movwf	printf@f& (0+255),b
  1369  000ECE  0EFF               	movlw	high STR_1
  1370  000ED0  6FF2               	movwf	(printf@f+1)& (0+255),b
  1371  000ED2  EC2B  F012         	call	_printf	;wreg free
  1372                           
  1373                           ;main.c: 116: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1374  000ED6  0E33               	movlw	51
  1375  000ED8  0100               	movlb	0	; () banked
  1376  000EDA  6FFE               	movwf	(??_main+1)& (0+255),b
  1377  000EDC  0EBB               	movlw	187
  1378  000EDE  6FFD               	movwf	??_main& (0+255),b
  1379  000EE0  0EDF               	movlw	223
  1380  000EE2                     u4307:
  1381  000EE2  2EE8               	decfsz	wreg,f,c
  1382  000EE4  D7FE               	bra	u4307
  1383  000EE6  2FFD               	decfsz	??_main& (0+255),f,b
  1384  000EE8  D7FC               	bra	u4307
  1385  000EEA  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1386  000EEC  D7FA               	bra	u4307
  1387  000EEE  D000               	nop2	
  1388                           
  1389                           ;main.c: 117: lcdInst(0xC0);;
  1390  000EF0  0EC0               	movlw	192
  1391  000EF2  ECCF  F018         	call	_lcdInst
  1392  000EF6                     l243:
  1393                           
  1394                           ;main.c: 118: }
  1395                           ;main.c: 119: if (state ==1){
  1396  000EF6  0429               	decf	_state,w,c
  1397  000EF8  102A               	iorwf	_state+1,w,c
  1398  000EFA  A4D8               	btfss	status,2,c
  1399  000EFC  D024               	goto	l244
  1400                           
  1401                           ;main.c: 120: initLCD();
  1402  000EFE  EC3B  F017         	call	_initLCD	;wreg free
  1403                           
  1404                           ;main.c: 121: printf("fastener set:");
  1405  000F02  0E2C               	movlw	low STR_2
  1406  000F04  0100               	movlb	0	; () banked
  1407  000F06  6FF1               	movwf	printf@f& (0+255),b
  1408  000F08  0EFF               	movlw	high STR_2
  1409  000F0A  6FF2               	movwf	(printf@f+1)& (0+255),b
  1410  000F0C  EC2B  F012         	call	_printf	;wreg free
  1411                           
  1412                           ;main.c: 122: lcdInst(0xC0);;
  1413  000F10  0EC0               	movlw	192
  1414  000F12  ECCF  F018         	call	_lcdInst
  1415                           
  1416                           ;main.c: 123: printf("%s",current_set);
  1417  000F16  0EF5               	movlw	low STR_3
  1418  000F18  0100               	movlb	0	; () banked
  1419  000F1A  6FF1               	movwf	printf@f& (0+255),b
  1420  000F1C  0EFF               	movlw	high STR_3
  1421  000F1E  6FF2               	movwf	(printf@f+1)& (0+255),b
  1422  000F20  0EE0               	movlw	low _current_set
  1423  000F22  6FF3               	movwf	(?_printf+2)& (0+255),b
  1424  000F24  0E00               	movlw	high _current_set
  1425  000F26  6FF4               	movwf	(?_printf+3)& (0+255),b
  1426  000F28  EC2B  F012         	call	_printf	;wreg free
  1427                           
  1428                           ;main.c: 124: _delay((unsigned long)((500)*(40000000/4000.0)));
  1429  000F2C  0E1A               	movlw	26
  1430  000F2E  0100               	movlb	0	; () banked
  1431  000F30  6FFE               	movwf	(??_main+1)& (0+255),b
  1432  000F32  0E5E               	movlw	94
  1433  000F34  6FFD               	movwf	??_main& (0+255),b
  1434  000F36  0E6E               	movlw	110
  1435  000F38                     u4317:
  1436  000F38  2EE8               	decfsz	wreg,f,c
  1437  000F3A  D7FE               	bra	u4317
  1438  000F3C  2FFD               	decfsz	??_main& (0+255),f,b
  1439  000F3E  D7FC               	bra	u4317
  1440  000F40  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1441  000F42  D7FA               	bra	u4317
  1442  000F44  F000               	nop	
  1443  000F46                     l244:
  1444                           
  1445                           ;main.c: 125: }
  1446                           ;main.c: 127: if (state == 2){
  1447  000F46  0E02               	movlw	2
  1448  000F48  1829               	xorwf	_state,w,c
  1449  000F4A  102A               	iorwf	_state+1,w,c
  1450  000F4C  A4D8               	btfss	status,2,c
  1451  000F4E  D016               	goto	l245
  1452                           
  1453                           ;main.c: 128: initLCD();
  1454  000F50  EC3B  F017         	call	_initLCD	;wreg free
  1455                           
  1456                           ;main.c: 129: printf("number:");
  1457  000F54  0E91               	movlw	low STR_4
  1458  000F56  0100               	movlb	0	; () banked
  1459  000F58  6FF1               	movwf	printf@f& (0+255),b
  1460  000F5A  0EFF               	movlw	high STR_4
  1461  000F5C  6FF2               	movwf	(printf@f+1)& (0+255),b
  1462  000F5E  EC2B  F012         	call	_printf	;wreg free
  1463                           
  1464                           ;main.c: 130: _delay((unsigned long)((500)*(40000000/4000.0)));
  1465  000F62  0E1A               	movlw	26
  1466  000F64  0100               	movlb	0	; () banked
  1467  000F66  6FFE               	movwf	(??_main+1)& (0+255),b
  1468  000F68  0E5E               	movlw	94
  1469  000F6A  6FFD               	movwf	??_main& (0+255),b
  1470  000F6C  0E6E               	movlw	110
  1471  000F6E                     u4327:
  1472  000F6E  2EE8               	decfsz	wreg,f,c
  1473  000F70  D7FE               	bra	u4327
  1474  000F72  2FFD               	decfsz	??_main& (0+255),f,b
  1475  000F74  D7FC               	bra	u4327
  1476  000F76  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1477  000F78  D7FA               	bra	u4327
  1478  000F7A  F000               	nop	
  1479  000F7C                     l245:
  1480                           
  1481                           ;main.c: 131: }
  1482                           ;main.c: 133: if (state == 3){
  1483  000F7C  0E03               	movlw	3
  1484  000F7E  1829               	xorwf	_state,w,c
  1485  000F80  102A               	iorwf	_state+1,w,c
  1486  000F82  A4D8               	btfss	status,2,c
  1487  000F84  D791               	goto	l242
  1488                           
  1489                           ;main.c: 134: initLCD();
  1490  000F86  EC3B  F017         	call	_initLCD	;wreg free
  1491                           
  1492                           ;main.c: 135: printf("Done!");
  1493  000F8A  0EA7               	movlw	low STR_5
  1494  000F8C  0100               	movlb	0	; () banked
  1495  000F8E  6FF1               	movwf	printf@f& (0+255),b
  1496  000F90  0EFF               	movlw	high STR_5
  1497  000F92  6FF2               	movwf	(printf@f+1)& (0+255),b
  1498  000F94  EC2B  F012         	call	_printf	;wreg free
  1499                           
  1500                           ;main.c: 136: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1501  000F98  0E66               	movlw	102
  1502  000F9A  0100               	movlb	0	; () banked
  1503  000F9C  6FFE               	movwf	(??_main+1)& (0+255),b
  1504  000F9E  0E76               	movlw	118
  1505  000FA0  6FFD               	movwf	??_main& (0+255),b
  1506  000FA2  0EC1               	movlw	193
  1507  000FA4                     u4337:
  1508  000FA4  2EE8               	decfsz	wreg,f,c
  1509  000FA6  D7FE               	bra	u4337
  1510  000FA8  2FFD               	decfsz	??_main& (0+255),f,b
  1511  000FAA  D7FC               	bra	u4337
  1512  000FAC  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1513  000FAE  D7FA               	bra	u4337
  1514                           
  1515                           ;main.c: 137: initLCD();
  1516  000FB0  EC3B  F017         	call	_initLCD	;wreg free
  1517                           
  1518                           ;main.c: 138: printf("assembly step:%d",assembly_step);
  1519  000FB4  0EFD               	movlw	low STR_6
  1520  000FB6  0100               	movlb	0	; () banked
  1521  000FB8  6FF1               	movwf	printf@f& (0+255),b
  1522  000FBA  0EFE               	movlw	high STR_6
  1523  000FBC  6FF2               	movwf	(printf@f+1)& (0+255),b
  1524  000FBE  C027  F0F3         	movff	_assembly_step,?_printf+2
  1525  000FC2  C028  F0F4         	movff	_assembly_step+1,?_printf+3
  1526  000FC6  EC2B  F012         	call	_printf	;wreg free
  1527                           
  1528                           ;main.c: 139: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1529  000FCA  0E33               	movlw	51
  1530  000FCC  0100               	movlb	0	; () banked
  1531  000FCE  6FFE               	movwf	(??_main+1)& (0+255),b
  1532  000FD0  0EBB               	movlw	187
  1533  000FD2  6FFD               	movwf	??_main& (0+255),b
  1534  000FD4  0EDF               	movlw	223
  1535  000FD6                     u4347:
  1536  000FD6  2EE8               	decfsz	wreg,f,c
  1537  000FD8  D7FE               	bra	u4347
  1538  000FDA  2FFD               	decfsz	??_main& (0+255),f,b
  1539  000FDC  D7FC               	bra	u4347
  1540  000FDE  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1541  000FE0  D7FA               	bra	u4347
  1542  000FE2  D000               	nop2	
  1543                           
  1544                           ;main.c: 140: for ( i=0; i<assembly_step; i++){
  1545  000FE4  0E00               	movlw	0
  1546  000FE6  6E2C               	movwf	_i+1,c
  1547  000FE8  0E00               	movlw	0
  1548  000FEA  6E2B               	movwf	_i,c
  1549  000FEC  D06F               	goto	l247
  1550  000FEE                     
  1551                           ;main.c: 142: initLCD();
  1552  000FEE  EC3B  F017         	call	_initLCD	;wreg free
  1553                           
  1554                           ;main.c: 144: printf("step");
  1555  000FF2  0ED0               	movlw	low STR_7
  1556  000FF4  0100               	movlb	0	; () banked
  1557  000FF6  6FF1               	movwf	printf@f& (0+255),b
  1558  000FF8  0EFF               	movlw	high STR_7
  1559  000FFA  6FF2               	movwf	(printf@f+1)& (0+255),b
  1560  000FFC  EC2B  F012         	call	_printf	;wreg free
  1561                           
  1562                           ;main.c: 145: printf("%d", i+1);
  1563  001000  0EE8               	movlw	low (STR_26+17)
  1564  001002  0100               	movlb	0	; () banked
  1565  001004  6FF1               	movwf	printf@f& (0+255),b
  1566  001006  0EFE               	movlw	high (STR_26+17)
  1567  001008  6FF2               	movwf	(printf@f+1)& (0+255),b
  1568  00100A  0E01               	movlw	1
  1569  00100C  242B               	addwf	_i,w,c
  1570  00100E  6FF3               	movwf	(?_printf+2)& (0+255),b
  1571  001010  0E00               	movlw	0
  1572  001012  202C               	addwfc	_i+1,w,c
  1573  001014  6FF4               	movwf	(?_printf+3)& (0+255),b
  1574  001016  EC2B  F012         	call	_printf	;wreg free
  1575                           
  1576                           ;main.c: 146: printf(":");
  1577  00101A  0EE7               	movlw	low (STR_14+2)
  1578  00101C  0100               	movlb	0	; () banked
  1579  00101E  6FF1               	movwf	printf@f& (0+255),b
  1580  001020  0EFF               	movlw	high (STR_14+2)
  1581  001022  6FF2               	movwf	(printf@f+1)& (0+255),b
  1582  001024  EC2B  F012         	call	_printf	;wreg free
  1583                           
  1584                           ;main.c: 147: printf("%s", final_set[i]);
  1585  001028  0EF5               	movlw	low STR_3
  1586  00102A  0100               	movlb	0	; () banked
  1587  00102C  6FF1               	movwf	printf@f& (0+255),b
  1588  00102E  0EFF               	movlw	high STR_3
  1589  001030  6FF2               	movwf	(printf@f+1)& (0+255),b
  1590  001032  C02B  F0E5         	movff	_i,___wmul@multiplier
  1591  001036  C02C  F0E6         	movff	_i+1,___wmul@multiplier+1
  1592  00103A  0E00               	movlw	0
  1593  00103C  6FE8               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1594  00103E  0E05               	movlw	5
  1595  001040  6FE7               	movwf	___wmul@multiplicand& (0+255),b
  1596  001042  EC7C  F018         	call	___wmul	;wreg free
  1597  001046  0E58               	movlw	low _final_set
  1598  001048  0100               	movlb	0	; () banked
  1599  00104A  25E5               	addwf	?___wmul& (0+255),w,b
  1600  00104C  6FF3               	movwf	(?_printf+2)& (0+255),b
  1601  00104E  0E01               	movlw	high _final_set
  1602  001050  21E6               	addwfc	(?___wmul+1)& (0+255),w,b
  1603  001052  6FF4               	movwf	(?_printf+3)& (0+255),b
  1604  001054  EC2B  F012         	call	_printf	;wreg free
  1605                           
  1606                           ;main.c: 148: printf(",");
  1607  001058  0EF8               	movlw	low STR_11
  1608  00105A  0100               	movlb	0	; () banked
  1609  00105C  6FF1               	movwf	printf@f& (0+255),b
  1610  00105E  0EFF               	movlw	high STR_11
  1611  001060  6FF2               	movwf	(printf@f+1)& (0+255),b
  1612  001062  EC2B  F012         	call	_printf	;wreg free
  1613                           
  1614                           ;main.c: 149: printf("%d",final_number[i]);
  1615  001066  0EE8               	movlw	low (STR_26+17)
  1616  001068  0100               	movlb	0	; () banked
  1617  00106A  6FF1               	movwf	printf@f& (0+255),b
  1618  00106C  0EFE               	movlw	high (STR_26+17)
  1619  00106E  6FF2               	movwf	(printf@f+1)& (0+255),b
  1620  001070  90D8               	bcf	status,0,c
  1621  001072  342B               	rlcf	_i,w,c
  1622  001074  6ED9               	movwf	fsr2l,c
  1623  001076  342C               	rlcf	_i+1,w,c
  1624  001078  6EDA               	movwf	fsr2h,c
  1625  00107A  0E20               	movlw	low _final_number
  1626  00107C  26D9               	addwf	fsr2l,f,c
  1627  00107E  0E01               	movlw	high _final_number
  1628  001080  22DA               	addwfc	fsr2h,f,c
  1629  001082  CFDE F0F3          	movff	postinc2,?_printf+2
  1630  001086  CFDD F0F4          	movff	postdec2,?_printf+3
  1631  00108A  EC2B  F012         	call	_printf	;wreg free
  1632                           
  1633                           ;main.c: 150: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1634  00108E  0E33               	movlw	51
  1635  001090  0100               	movlb	0	; () banked
  1636  001092  6FFE               	movwf	(??_main+1)& (0+255),b
  1637  001094  0EBB               	movlw	187
  1638  001096  6FFD               	movwf	??_main& (0+255),b
  1639  001098  0EDF               	movlw	223
  1640  00109A                     u4357:
  1641  00109A  2EE8               	decfsz	wreg,f,c
  1642  00109C  D7FE               	bra	u4357
  1643  00109E  2FFD               	decfsz	??_main& (0+255),f,b
  1644  0010A0  D7FC               	bra	u4357
  1645  0010A2  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1646  0010A4  D7FA               	bra	u4357
  1647  0010A6  D000               	nop2	
  1648                           
  1649                           ;main.c: 151: lcdInst(0xC0);;
  1650  0010A8  0EC0               	movlw	192
  1651  0010AA  ECCF  F018         	call	_lcdInst
  1652                           
  1653                           ;main.c: 155: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1654  0010AE  0E33               	movlw	51
  1655  0010B0  0100               	movlb	0	; () banked
  1656  0010B2  6FFE               	movwf	(??_main+1)& (0+255),b
  1657  0010B4  0EBB               	movlw	187
  1658  0010B6  6FFD               	movwf	??_main& (0+255),b
  1659  0010B8  0EDF               	movlw	223
  1660  0010BA                     u4367:
  1661  0010BA  2EE8               	decfsz	wreg,f,c
  1662  0010BC  D7FE               	bra	u4367
  1663  0010BE  2FFD               	decfsz	??_main& (0+255),f,b
  1664  0010C0  D7FC               	bra	u4367
  1665  0010C2  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1666  0010C4  D7FA               	bra	u4367
  1667  0010C6  D000               	nop2	
  1668  0010C8  4A2B               	infsnz	_i,f,c
  1669  0010CA  2A2C               	incf	_i+1,f,c
  1670  0010CC                     l247:
  1671  0010CC  5027               	movf	_assembly_step,w,c
  1672  0010CE  5C2B               	subwf	_i,w,c
  1673  0010D0  5028               	movf	_assembly_step+1,w,c
  1674  0010D2  582C               	subwfb	_i+1,w,c
  1675  0010D4  A0D8               	btfss	status,0,c
  1676  0010D6  D78B               	goto	l248
  1677                           
  1678                           ;main.c: 157: }
  1679                           ;main.c: 158: for (i = 0; i<8; i++){
  1680  0010D8  0E00               	movlw	0
  1681  0010DA  6E2C               	movwf	_i+1,c
  1682  0010DC  0E00               	movlw	0
  1683  0010DE  6E2B               	movwf	_i,c
  1684  0010E0  502C               	movf	_i+1,w,c
  1685  0010E2  E105               	bnz	u4060
  1686  0010E4  0E08               	movlw	8
  1687  0010E6  5C2B               	subwf	_i,w,c
  1688  0010E8  B0D8               	btfsc	status,0,c
  1689  0010EA  D099               	goto	u4070
  1690  0010EC  D001               	goto	l250
  1691  0010EE                     u4060:
  1692  0010EE  D097               	goto	u4070
  1693  0010F0                     l250:
  1694                           
  1695                           ;main.c: 159: initLCD();
  1696  0010F0  EC3B  F017         	call	_initLCD	;wreg free
  1697                           
  1698                           ;main.c: 160: printf("%d",compartment_array[i]);
  1699  0010F4  0EE8               	movlw	low (STR_26+17)
  1700  0010F6  0100               	movlb	0	; () banked
  1701  0010F8  6FF1               	movwf	printf@f& (0+255),b
  1702  0010FA  0EFE               	movlw	high (STR_26+17)
  1703  0010FC  6FF2               	movwf	(printf@f+1)& (0+255),b
  1704  0010FE  90D8               	bcf	status,0,c
  1705  001100  342B               	rlcf	_i,w,c
  1706  001102  6ED9               	movwf	fsr2l,c
  1707  001104  342C               	rlcf	_i+1,w,c
  1708  001106  6EDA               	movwf	fsr2h,c
  1709  001108  0EB0               	movlw	low _compartment_array
  1710  00110A  26D9               	addwf	fsr2l,f,c
  1711  00110C  0E00               	movlw	high _compartment_array
  1712  00110E  22DA               	addwfc	fsr2h,f,c
  1713  001110  CFDE F0F3          	movff	postinc2,?_printf+2
  1714  001114  CFDD F0F4          	movff	postdec2,?_printf+3
  1715  001118  EC2B  F012         	call	_printf	;wreg free
  1716                           
  1717                           ;main.c: 161: printf(" B:");
  1718  00111C  0EE5               	movlw	low STR_14
  1719  00111E  0100               	movlb	0	; () banked
  1720  001120  6FF1               	movwf	printf@f& (0+255),b
  1721  001122  0EFF               	movlw	high STR_14
  1722  001124  6FF2               	movwf	(printf@f+1)& (0+255),b
  1723  001126  EC2B  F012         	call	_printf	;wreg free
  1724                           
  1725                           ;main.c: 162: printf("%d",B_array[i]);
  1726  00112A  0EE8               	movlw	low (STR_26+17)
  1727  00112C  0100               	movlb	0	; () banked
  1728  00112E  6FF1               	movwf	printf@f& (0+255),b
  1729  001130  0EFE               	movlw	high (STR_26+17)
  1730  001132  6FF2               	movwf	(printf@f+1)& (0+255),b
  1731  001134  90D8               	bcf	status,0,c
  1732  001136  342B               	rlcf	_i,w,c
  1733  001138  6ED9               	movwf	fsr2l,c
  1734  00113A  342C               	rlcf	_i+1,w,c
  1735  00113C  6EDA               	movwf	fsr2h,c
  1736  00113E  0EA0               	movlw	low _B_array
  1737  001140  26D9               	addwf	fsr2l,f,c
  1738  001142  0E00               	movlw	high _B_array
  1739  001144  22DA               	addwfc	fsr2h,f,c
  1740  001146  CFDE F0F3          	movff	postinc2,?_printf+2
  1741  00114A  CFDD F0F4          	movff	postdec2,?_printf+3
  1742  00114E  EC2B  F012         	call	_printf	;wreg free
  1743                           
  1744                           ;main.c: 163: printf(" N:");
  1745  001152  0EE9               	movlw	low STR_16
  1746  001154  0100               	movlb	0	; () banked
  1747  001156  6FF1               	movwf	printf@f& (0+255),b
  1748  001158  0EFF               	movlw	high STR_16
  1749  00115A  6FF2               	movwf	(printf@f+1)& (0+255),b
  1750  00115C  EC2B  F012         	call	_printf	;wreg free
  1751                           
  1752                           ;main.c: 164: printf("%d",N_array[i]);
  1753  001160  0EE8               	movlw	low (STR_26+17)
  1754  001162  0100               	movlb	0	; () banked
  1755  001164  6FF1               	movwf	printf@f& (0+255),b
  1756  001166  0EFE               	movlw	high (STR_26+17)
  1757  001168  6FF2               	movwf	(printf@f+1)& (0+255),b
  1758  00116A  90D8               	bcf	status,0,c
  1759  00116C  342B               	rlcf	_i,w,c
  1760  00116E  6ED9               	movwf	fsr2l,c
  1761  001170  342C               	rlcf	_i+1,w,c
  1762  001172  6EDA               	movwf	fsr2h,c
  1763  001174  0E90               	movlw	low _N_array
  1764  001176  26D9               	addwf	fsr2l,f,c
  1765  001178  0E00               	movlw	high _N_array
  1766  00117A  22DA               	addwfc	fsr2h,f,c
  1767  00117C  CFDE F0F3          	movff	postinc2,?_printf+2
  1768  001180  CFDD F0F4          	movff	postdec2,?_printf+3
  1769  001184  EC2B  F012         	call	_printf	;wreg free
  1770                           
  1771                           ;main.c: 165: printf(" S:");
  1772  001188  0EED               	movlw	low STR_18
  1773  00118A  0100               	movlb	0	; () banked
  1774  00118C  6FF1               	movwf	printf@f& (0+255),b
  1775  00118E  0EFF               	movlw	high STR_18
  1776  001190  6FF2               	movwf	(printf@f+1)& (0+255),b
  1777  001192  EC2B  F012         	call	_printf	;wreg free
  1778                           
  1779                           ;main.c: 166: printf("%d",S_array[i]);
  1780  001196  0EE8               	movlw	low (STR_26+17)
  1781  001198  0100               	movlb	0	; () banked
  1782  00119A  6FF1               	movwf	printf@f& (0+255),b
  1783  00119C  0EFE               	movlw	high (STR_26+17)
  1784  00119E  6FF2               	movwf	(printf@f+1)& (0+255),b
  1785  0011A0  90D8               	bcf	status,0,c
  1786  0011A2  342B               	rlcf	_i,w,c
  1787  0011A4  6ED9               	movwf	fsr2l,c
  1788  0011A6  342C               	rlcf	_i+1,w,c
  1789  0011A8  6EDA               	movwf	fsr2h,c
  1790  0011AA  0E00               	movlw	low _S_array
  1791  0011AC  26D9               	addwf	fsr2l,f,c
  1792  0011AE  0E01               	movlw	high _S_array
  1793  0011B0  22DA               	addwfc	fsr2h,f,c
  1794  0011B2  CFDE F0F3          	movff	postinc2,?_printf+2
  1795  0011B6  CFDD F0F4          	movff	postdec2,?_printf+3
  1796  0011BA  EC2B  F012         	call	_printf	;wreg free
  1797                           
  1798                           ;main.c: 167: printf(" W:");
  1799  0011BE  0EF1               	movlw	low STR_20
  1800  0011C0  0100               	movlb	0	; () banked
  1801  0011C2  6FF1               	movwf	printf@f& (0+255),b
  1802  0011C4  0EFF               	movlw	high STR_20
  1803  0011C6  6FF2               	movwf	(printf@f+1)& (0+255),b
  1804  0011C8  EC2B  F012         	call	_printf	;wreg free
  1805                           
  1806                           ;main.c: 168: printf("%d",W_array[i]);
  1807  0011CC  0EE8               	movlw	low (STR_26+17)
  1808  0011CE  0100               	movlb	0	; () banked
  1809  0011D0  6FF1               	movwf	printf@f& (0+255),b
  1810  0011D2  0EFE               	movlw	high (STR_26+17)
  1811  0011D4  6FF2               	movwf	(printf@f+1)& (0+255),b
  1812  0011D6  90D8               	bcf	status,0,c
  1813  0011D8  342B               	rlcf	_i,w,c
  1814  0011DA  6ED9               	movwf	fsr2l,c
  1815  0011DC  342C               	rlcf	_i+1,w,c
  1816  0011DE  6EDA               	movwf	fsr2h,c
  1817  0011E0  0E80               	movlw	low _W_array
  1818  0011E2  26D9               	addwf	fsr2l,f,c
  1819  0011E4  0E00               	movlw	high _W_array
  1820  0011E6  22DA               	addwfc	fsr2h,f,c
  1821  0011E8  CFDE F0F3          	movff	postinc2,?_printf+2
  1822  0011EC  CFDD F0F4          	movff	postdec2,?_printf+3
  1823  0011F0  EC2B  F012         	call	_printf	;wreg free
  1824                           
  1825                           ;main.c: 169: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1826  0011F4  0E33               	movlw	51
  1827  0011F6  0100               	movlb	0	; () banked
  1828  0011F8  6FFE               	movwf	(??_main+1)& (0+255),b
  1829  0011FA  0EBB               	movlw	187
  1830  0011FC  6FFD               	movwf	??_main& (0+255),b
  1831  0011FE  0EDF               	movlw	223
  1832  001200                     u4377:
  1833  001200  2EE8               	decfsz	wreg,f,c
  1834  001202  D7FE               	bra	u4377
  1835  001204  2FFD               	decfsz	??_main& (0+255),f,b
  1836  001206  D7FC               	bra	u4377
  1837  001208  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1838  00120A  D7FA               	bra	u4377
  1839  00120C  D000               	nop2	
  1840                           
  1841                           ;main.c: 170: lcdInst(0xC0);;
  1842  00120E  0EC0               	movlw	192
  1843  001210  ECCF  F018         	call	_lcdInst
  1844  001214  4A2B               	infsnz	_i,f,c
  1845  001216  2A2C               	incf	_i+1,f,c
  1846  001218  502C               	movf	_i+1,w,c
  1847  00121A  E101               	bnz	l4980
  1848  00121C  D763               	goto	L1
  1849  00121E                     u4070:
  1850  00121E                     l4980:
  1851                           
  1852                           ;main.c: 172: }
  1853                           ;main.c: 173: mode = 1;
  1854  00121E  0E00               	movlw	0
  1855  001220  6E12               	movwf	_mode+1,c
  1856  001222  0E01               	movlw	1
  1857  001224  6E11               	movwf	_mode,c
  1858  001226                     l252:
  1859                           
  1860                           ;main.c: 176: }
  1861                           ;main.c: 178: }
  1862                           ;main.c: 179: }
  1863                           ;main.c: 192: if (mode == 1){
  1864  001226  0411               	decf	_mode,w,c
  1865  001228  1012               	iorwf	_mode+1,w,c
  1866  00122A  A4D8               	btfss	status,2,c
  1867  00122C  D236               	goto	l254
  1868                           
  1869                           ;main.c: 194: initLCD();
  1870  00122E  EC3B  F017         	call	_initLCD	;wreg free
  1871                           
  1872                           ;main.c: 196: if (white_tape == 0){
  1873  001232  506D               	movf	_white_tape,w,c
  1874  001234  106E               	iorwf	_white_tape+1,w,c
  1875  001236  A4D8               	btfss	status,2,c
  1876  001238  D034               	goto	l255
  1877                           
  1878                           ;main.c: 197: initLCD();
  1879  00123A  EC3B  F017         	call	_initLCD	;wreg free
  1880  00123E                     
  1881                           ;main.c: 199: printf("%d",read_IR());
  1882  00123E  0EE8               	movlw	low (STR_26+17)
  1883  001240  0100               	movlb	0	; () banked
  1884  001242  6FF1               	movwf	printf@f& (0+255),b
  1885  001244  0EFE               	movlw	high (STR_26+17)
  1886  001246  6FF2               	movwf	(printf@f+1)& (0+255),b
  1887  001248  ECA2  F015         	call	_read_IR	;wreg free
  1888  00124C  C0E8  F0F3         	movff	?_read_IR,?_printf+2
  1889  001250  C0E9  F0F4         	movff	?_read_IR+1,?_printf+3
  1890  001254  EC2B  F012         	call	_printf	;wreg free
  1891                           
  1892                           ;main.c: 200: _delay((unsigned long)((100)*(40000000/4000.0)));
  1893  001258  0E06               	movlw	6
  1894  00125A  0100               	movlb	0	; () banked
  1895  00125C  6FFE               	movwf	(??_main+1)& (0+255),b
  1896  00125E  0E13               	movlw	19
  1897  001260  6FFD               	movwf	??_main& (0+255),b
  1898  001262  0EAD               	movlw	173
  1899  001264                     u4387:
  1900  001264  2EE8               	decfsz	wreg,f,c
  1901  001266  D7FE               	bra	u4387
  1902  001268  2FFD               	decfsz	??_main& (0+255),f,b
  1903  00126A  D7FC               	bra	u4387
  1904  00126C  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1905  00126E  D7FA               	bra	u4387
  1906  001270  D000               	nop2	
  1907                           
  1908                           ;main.c: 201: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1909  001272  0E80               	movlw	128
  1910  001274  ECCF  F018         	call	_lcdInst
  1911  001278  0E41               	movlw	65
  1912  00127A  0100               	movlb	0	; () banked
  1913  00127C  6FFD               	movwf	??_main& (0+255),b
  1914  00127E  0EEE               	movlw	238
  1915  001280                     u4397:
  1916  001280  2EE8               	decfsz	wreg,f,c
  1917  001282  D7FE               	bra	u4397
  1918  001284  2FFD               	decfsz	??_main& (0+255),f,b
  1919  001286  D7FC               	bra	u4397
  1920  001288  F000               	nop	
  1921                           
  1922                           ;main.c: 202: if (read_IR() == 1){
  1923  00128A  ECA2  F015         	call	_read_IR	;wreg free
  1924  00128E  0100               	movlb	0	; () banked
  1925  001290  05E8               	decf	?_read_IR& (0+255),w,b
  1926  001292  11E9               	iorwf	(?_read_IR+1)& (0+255),w,b
  1927  001294  A4D8               	btfss	status,2,c
  1928  001296  D7D3               	goto	l256
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;main.c: 203: white_tape = 1;
  1932  001298  0E00               	movlw	0
  1933  00129A  6E6E               	movwf	_white_tape+1,c
  1934  00129C  0E01               	movlw	1
  1935  00129E  6E6D               	movwf	_white_tape,c
  1936                           
  1937                           ;main.c: 204: break;
  1938  0012A0  D1F6               	goto	u4220
  1939  0012A2                     l255:
  1940                           
  1941                           ;main.c: 212: else if (white_tape == 1){
  1942                           
  1943                           ; BSR set to: 0
  1944  0012A2  046D               	decf	_white_tape,w,c
  1945  0012A4  106E               	iorwf	_white_tape+1,w,c
  1946  0012A6  A4D8               	btfss	status,2,c
  1947  0012A8  D1F2               	goto	u4220
  1948                           
  1949                           ;main.c: 213: putch('1');
  1950  0012AA  0E31               	movlw	49
  1951  0012AC  ECC3  F018         	call	_putch
  1952                           
  1953                           ;main.c: 214: _delay((unsigned long)((200)*(40000000/4000.0)));
  1954  0012B0  0E0B               	movlw	11
  1955  0012B2  0100               	movlb	0	; () banked
  1956  0012B4  6FFE               	movwf	(??_main+1)& (0+255),b
  1957  0012B6  0E26               	movlw	38
  1958  0012B8  6FFD               	movwf	??_main& (0+255),b
  1959  0012BA  0E5D               	movlw	93
  1960  0012BC                     u4407:
  1961  0012BC  2EE8               	decfsz	wreg,f,c
  1962  0012BE  D7FE               	bra	u4407
  1963  0012C0  2FFD               	decfsz	??_main& (0+255),f,b
  1964  0012C2  D7FC               	bra	u4407
  1965  0012C4  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1966  0012C6  D7FA               	bra	u4407
  1967  0012C8  D000               	nop2	
  1968                           
  1969                           ;main.c: 217: _delay((unsigned long)((200)*(40000000/4000.0)));
  1970  0012CA  0E0B               	movlw	11
  1971  0012CC  0100               	movlb	0	; () banked
  1972  0012CE  6FFE               	movwf	(??_main+1)& (0+255),b
  1973  0012D0  0E26               	movlw	38
  1974  0012D2  6FFD               	movwf	??_main& (0+255),b
  1975  0012D4  0E5D               	movlw	93
  1976  0012D6                     u4417:
  1977  0012D6  2EE8               	decfsz	wreg,f,c
  1978  0012D8  D7FE               	bra	u4417
  1979  0012DA  2FFD               	decfsz	??_main& (0+255),f,b
  1980  0012DC  D7FC               	bra	u4417
  1981  0012DE  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  1982  0012E0  D7FA               	bra	u4417
  1983  0012E2  D000               	nop2	
  1984                           
  1985                           ;main.c: 219: initLCD();
  1986  0012E4  EC3B  F017         	call	_initLCD	;wreg free
  1987                           
  1988                           ;main.c: 222: for (i = 0; i<8; i++){
  1989  0012E8  0E00               	movlw	0
  1990  0012EA  6E2C               	movwf	_i+1,c
  1991  0012EC  0E00               	movlw	0
  1992  0012EE  6E2B               	movwf	_i,c
  1993  0012F0  502C               	movf	_i+1,w,c
  1994  0012F2  E105               	bnz	u4120
  1995  0012F4  0E08               	movlw	8
  1996  0012F6  5C2B               	subwf	_i,w,c
  1997  0012F8  B0D8               	btfsc	status,0,c
  1998  0012FA  D1C9               	goto	u4220
  1999  0012FC  D001               	goto	l262
  2000  0012FE                     u4120:
  2001  0012FE  D1C7               	goto	u4220
  2002  001300                     l262:
  2003                           
  2004                           ;main.c: 224: if (compartment_array[i]==1){
  2005  001300  90D8               	bcf	status,0,c
  2006  001302  342B               	rlcf	_i,w,c
  2007  001304  6ED9               	movwf	fsr2l,c
  2008  001306  342C               	rlcf	_i+1,w,c
  2009  001308  6EDA               	movwf	fsr2h,c
  2010  00130A  0EB0               	movlw	low _compartment_array
  2011  00130C  26D9               	addwf	fsr2l,f,c
  2012  00130E  0E00               	movlw	high _compartment_array
  2013  001310  22DA               	addwfc	fsr2h,f,c
  2014  001312  04DE               	decf	postinc2,w,c
  2015  001314  10DE               	iorwf	postinc2,w,c
  2016  001316  A4D8               	btfss	status,2,c
  2017  001318  D186               	goto	l264
  2018                           
  2019                           ;main.c: 235: initLCD();
  2020  00131A  EC3B  F017         	call	_initLCD	;wreg free
  2021                           
  2022                           ;main.c: 238: initLCD();
  2023  00131E  EC3B  F017         	call	_initLCD	;wreg free
  2024                           
  2025                           ;main.c: 239: printf("C");
  2026  001322  0EFC               	movlw	low STR_23
  2027  001324  0100               	movlb	0	; () banked
  2028  001326  6FF1               	movwf	printf@f& (0+255),b
  2029  001328  0EFF               	movlw	high STR_23
  2030  00132A  6FF2               	movwf	(printf@f+1)& (0+255),b
  2031  00132C  EC2B  F012         	call	_printf	;wreg free
  2032                           
  2033                           ;main.c: 240: printf("%d",i);
  2034  001330  0EE8               	movlw	low (STR_26+17)
  2035  001332  0100               	movlb	0	; () banked
  2036  001334  6FF1               	movwf	printf@f& (0+255),b
  2037  001336  0EFE               	movlw	high (STR_26+17)
  2038  001338  6FF2               	movwf	(printf@f+1)& (0+255),b
  2039  00133A  C02B  F0F3         	movff	_i,?_printf+2
  2040  00133E  C02C  F0F4         	movff	_i+1,?_printf+3
  2041  001342  EC2B  F012         	call	_printf	;wreg free
  2042                           
  2043                           ;main.c: 241: printf(":");
  2044  001346  0EE7               	movlw	low (STR_14+2)
  2045  001348  0100               	movlb	0	; () banked
  2046  00134A  6FF1               	movwf	printf@f& (0+255),b
  2047  00134C  0EFF               	movlw	high (STR_14+2)
  2048  00134E  6FF2               	movwf	(printf@f+1)& (0+255),b
  2049  001350  EC2B  F012         	call	_printf	;wreg free
  2050                           
  2051                           ;main.c: 242: _delay((unsigned long)((800)*(40000000/4000.0)));
  2052  001354  0E29               	movlw	41
  2053  001356  0100               	movlb	0	; () banked
  2054  001358  6FFE               	movwf	(??_main+1)& (0+255),b
  2055  00135A  0E96               	movlw	150
  2056  00135C  6FFD               	movwf	??_main& (0+255),b
  2057  00135E  0E7F               	movlw	127
  2058  001360                     u4427:
  2059  001360  2EE8               	decfsz	wreg,f,c
  2060  001362  D7FE               	bra	u4427
  2061  001364  2FFD               	decfsz	??_main& (0+255),f,b
  2062  001366  D7FC               	bra	u4427
  2063  001368  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2064  00136A  D7FA               	bra	u4427
  2065                           
  2066                           ;main.c: 243: initLCD();
  2067  00136C  EC3B  F017         	call	_initLCD	;wreg free
  2068  001370                     
  2069                           ;main.c: 245: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2070  001370  0E80               	movlw	128
  2071  001372  ECCF  F018         	call	_lcdInst
  2072  001376  0E41               	movlw	65
  2073  001378  0100               	movlb	0	; () banked
  2074  00137A  6FFD               	movwf	??_main& (0+255),b
  2075  00137C  0EEE               	movlw	238
  2076  00137E                     u4437:
  2077  00137E  2EE8               	decfsz	wreg,f,c
  2078  001380  D7FE               	bra	u4437
  2079  001382  2FFD               	decfsz	??_main& (0+255),f,b
  2080  001384  D7FC               	bra	u4437
  2081  001386  F000               	nop	
  2082                           
  2083                           ;main.c: 246: if (B_count>= B_array[i]&&S_count>= S_array[i]&&N_count>= N_array[i]&&W_co
      +                          unt>= W_array[i]){
  2084  001388  90D8               	bcf	status,0,c
  2085  00138A  342B               	rlcf	_i,w,c
  2086  00138C  6ED9               	movwf	fsr2l,c
  2087  00138E  342C               	rlcf	_i+1,w,c
  2088  001390  6EDA               	movwf	fsr2h,c
  2089  001392  0EA0               	movlw	low _B_array
  2090  001394  26D9               	addwf	fsr2l,f,c
  2091  001396  0E00               	movlw	high _B_array
  2092  001398  22DA               	addwfc	fsr2h,f,c
  2093  00139A  50DE               	movf	postinc2,w,c
  2094  00139C  5C19               	subwf	_B_count,w,c
  2095  00139E  501A               	movf	_B_count+1,w,c
  2096  0013A0  0A80               	xorlw	128
  2097  0013A2  0100               	movlb	0	; () banked
  2098  0013A4  6FFF               	movwf	(??_main+2)& (0+255),b
  2099  0013A6  50DE               	movf	postinc2,w,c
  2100  0013A8  0A80               	xorlw	128
  2101  0013AA  59FF               	subwfb	(??_main+2)& (0+255),w,b
  2102  0013AC  A0D8               	btfss	status,0,c
  2103  0013AE  D06D               	goto	l266
  2104                           
  2105                           ; BSR set to: 0
  2106  0013B0  90D8               	bcf	status,0,c
  2107  0013B2  342B               	rlcf	_i,w,c
  2108  0013B4  6ED9               	movwf	fsr2l,c
  2109  0013B6  342C               	rlcf	_i+1,w,c
  2110  0013B8  6EDA               	movwf	fsr2h,c
  2111  0013BA  0E00               	movlw	low _S_array
  2112  0013BC  26D9               	addwf	fsr2l,f,c
  2113  0013BE  0E01               	movlw	high _S_array
  2114  0013C0  22DA               	addwfc	fsr2h,f,c
  2115  0013C2  50DE               	movf	postinc2,w,c
  2116  0013C4  5C17               	subwf	_S_count,w,c
  2117  0013C6  5018               	movf	_S_count+1,w,c
  2118  0013C8  0A80               	xorlw	128
  2119  0013CA  6FFF               	movwf	(??_main+2)& (0+255),b
  2120  0013CC  50DE               	movf	postinc2,w,c
  2121  0013CE  0A80               	xorlw	128
  2122  0013D0  59FF               	subwfb	(??_main+2)& (0+255),w,b
  2123  0013D2  A0D8               	btfss	status,0,c
  2124  0013D4  D05A               	goto	l266
  2125                           
  2126                           ; BSR set to: 0
  2127  0013D6  90D8               	bcf	status,0,c
  2128  0013D8  342B               	rlcf	_i,w,c
  2129  0013DA  6ED9               	movwf	fsr2l,c
  2130  0013DC  342C               	rlcf	_i+1,w,c
  2131  0013DE  6EDA               	movwf	fsr2h,c
  2132  0013E0  0E90               	movlw	low _N_array
  2133  0013E2  26D9               	addwf	fsr2l,f,c
  2134  0013E4  0E00               	movlw	high _N_array
  2135  0013E6  22DA               	addwfc	fsr2h,f,c
  2136  0013E8  50DE               	movf	postinc2,w,c
  2137  0013EA  5C15               	subwf	_N_count,w,c
  2138  0013EC  5016               	movf	_N_count+1,w,c
  2139  0013EE  0A80               	xorlw	128
  2140  0013F0  6FFF               	movwf	(??_main+2)& (0+255),b
  2141  0013F2  50DE               	movf	postinc2,w,c
  2142  0013F4  0A80               	xorlw	128
  2143  0013F6  59FF               	subwfb	(??_main+2)& (0+255),w,b
  2144  0013F8  A0D8               	btfss	status,0,c
  2145  0013FA  D047               	goto	l266
  2146                           
  2147                           ; BSR set to: 0
  2148  0013FC  90D8               	bcf	status,0,c
  2149  0013FE  342B               	rlcf	_i,w,c
  2150  001400  6ED9               	movwf	fsr2l,c
  2151  001402  342C               	rlcf	_i+1,w,c
  2152  001404  6EDA               	movwf	fsr2h,c
  2153  001406  0E80               	movlw	low _W_array
  2154  001408  26D9               	addwf	fsr2l,f,c
  2155  00140A  0E00               	movlw	high _W_array
  2156  00140C  22DA               	addwfc	fsr2h,f,c
  2157  00140E  50DE               	movf	postinc2,w,c
  2158  001410  5C13               	subwf	_W_count,w,c
  2159  001412  5014               	movf	_W_count+1,w,c
  2160  001414  0A80               	xorlw	128
  2161  001416  6FFF               	movwf	(??_main+2)& (0+255),b
  2162  001418  50DE               	movf	postinc2,w,c
  2163  00141A  0A80               	xorlw	128
  2164  00141C  59FF               	subwfb	(??_main+2)& (0+255),w,b
  2165  00141E  A0D8               	btfss	status,0,c
  2166  001420  D034               	goto	l266
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;main.c: 247: printf("B:%d S:%d N:%d W:%d",B_count,S_count,N_count,W_count);
  2170  001422  0ED7               	movlw	low STR_26
  2171  001424  6FF1               	movwf	printf@f& (0+255),b
  2172  001426  0EFE               	movlw	high STR_26
  2173  001428  6FF2               	movwf	(printf@f+1)& (0+255),b
  2174  00142A  C019  F0F3         	movff	_B_count,?_printf+2
  2175  00142E  C01A  F0F4         	movff	_B_count+1,?_printf+3
  2176  001432  C017  F0F5         	movff	_S_count,?_printf+4
  2177  001436  C018  F0F6         	movff	_S_count+1,?_printf+5
  2178  00143A  C015  F0F7         	movff	_N_count,?_printf+6
  2179  00143E  C016  F0F8         	movff	_N_count+1,?_printf+7
  2180  001442  C013  F0F9         	movff	_W_count,?_printf+8
  2181  001446  C014  F0FA         	movff	_W_count+1,?_printf+9
  2182  00144A  EC2B  F012         	call	_printf	;wreg free
  2183                           
  2184                           ;main.c: 248: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2185  00144E  0E33               	movlw	51
  2186  001450  0100               	movlb	0	; () banked
  2187  001452  6FFE               	movwf	(??_main+1)& (0+255),b
  2188  001454  0EBB               	movlw	187
  2189  001456  6FFD               	movwf	??_main& (0+255),b
  2190  001458  0EDF               	movlw	223
  2191  00145A                     u4447:
  2192  00145A  2EE8               	decfsz	wreg,f,c
  2193  00145C  D7FE               	bra	u4447
  2194  00145E  2FFD               	decfsz	??_main& (0+255),f,b
  2195  001460  D7FC               	bra	u4447
  2196  001462  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2197  001464  D7FA               	bra	u4447
  2198  001466  D000               	nop2	
  2199                           
  2200                           ;main.c: 249: B_count = 0;
  2201  001468  0E00               	movlw	0
  2202  00146A  6E1A               	movwf	_B_count+1,c
  2203  00146C  0E00               	movlw	0
  2204  00146E  6E19               	movwf	_B_count,c
  2205                           
  2206                           ;main.c: 250: S_count = 0;
  2207  001470  0E00               	movlw	0
  2208  001472  6E18               	movwf	_S_count+1,c
  2209  001474  0E00               	movlw	0
  2210  001476  6E17               	movwf	_S_count,c
  2211                           
  2212                           ;main.c: 251: N_count = 0;
  2213  001478  0E00               	movlw	0
  2214  00147A  6E16               	movwf	_N_count+1,c
  2215  00147C  0E00               	movlw	0
  2216  00147E  6E15               	movwf	_N_count,c
  2217                           
  2218                           ;main.c: 252: W_count = 0;
  2219  001480  0E00               	movlw	0
  2220  001482  6E14               	movwf	_W_count+1,c
  2221  001484  0E00               	movlw	0
  2222  001486  6E13               	movwf	_W_count,c
  2223                           
  2224                           ;main.c: 255: break;
  2225  001488  D0FD               	goto	l273
  2226  00148A                     l266:
  2227                           
  2228                           ;main.c: 256: }
  2229                           ;main.c: 259: if (B_count< B_array[i]){
  2230  00148A  90D8               	bcf	status,0,c
  2231  00148C  342B               	rlcf	_i,w,c
  2232  00148E  6ED9               	movwf	fsr2l,c
  2233  001490  342C               	rlcf	_i+1,w,c
  2234  001492  6EDA               	movwf	fsr2h,c
  2235  001494  0EA0               	movlw	low _B_array
  2236  001496  26D9               	addwf	fsr2l,f,c
  2237  001498  0E00               	movlw	high _B_array
  2238  00149A  22DA               	addwfc	fsr2h,f,c
  2239  00149C  50DE               	movf	postinc2,w,c
  2240  00149E  5C19               	subwf	_B_count,w,c
  2241  0014A0  501A               	movf	_B_count+1,w,c
  2242  0014A2  0A80               	xorlw	128
  2243  0014A4  0100               	movlb	0	; () banked
  2244  0014A6  6FFF               	movwf	(??_main+2)& (0+255),b
  2245  0014A8  50DE               	movf	postinc2,w,c
  2246  0014AA  0A80               	xorlw	128
  2247  0014AC  59FF               	subwfb	(??_main+2)& (0+255),w,b
  2248  0014AE  B0D8               	btfsc	status,0,c
  2249  0014B0  D020               	goto	l268
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;main.c: 263: B_count++;
  2253  0014B2  4A19               	infsnz	_B_count,f,c
  2254  0014B4  2A1A               	incf	_B_count+1,f,c
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;main.c: 264: printf("B:");
  2258  0014B6  0EE6               	movlw	low (STR_14+1)
  2259  0014B8  6FF1               	movwf	printf@f& (0+255),b
  2260  0014BA  0EFF               	movlw	high (STR_14+1)
  2261  0014BC  6FF2               	movwf	(printf@f+1)& (0+255),b
  2262  0014BE  EC2B  F012         	call	_printf	;wreg free
  2263                           
  2264                           ;main.c: 265: printf("%d", B_count);
  2265  0014C2  0EE8               	movlw	low (STR_26+17)
  2266  0014C4  0100               	movlb	0	; () banked
  2267  0014C6  6FF1               	movwf	printf@f& (0+255),b
  2268  0014C8  0EFE               	movlw	high (STR_26+17)
  2269  0014CA  6FF2               	movwf	(printf@f+1)& (0+255),b
  2270  0014CC  C019  F0F3         	movff	_B_count,?_printf+2
  2271  0014D0  C01A  F0F4         	movff	_B_count+1,?_printf+3
  2272  0014D4  EC2B  F012         	call	_printf	;wreg free
  2273                           
  2274                           ;main.c: 268: _delay((unsigned long)((200)*(40000000/4000.0)));
  2275  0014D8  0E0B               	movlw	11
  2276  0014DA  0100               	movlb	0	; () banked
  2277  0014DC  6FFE               	movwf	(??_main+1)& (0+255),b
  2278  0014DE  0E26               	movlw	38
  2279  0014E0  6FFD               	movwf	??_main& (0+255),b
  2280  0014E2  0E5D               	movlw	93
  2281  0014E4                     u4457:
  2282  0014E4  2EE8               	decfsz	wreg,f,c
  2283  0014E6  D7FE               	bra	u4457
  2284  0014E8  2FFD               	decfsz	??_main& (0+255),f,b
  2285  0014EA  D7FC               	bra	u4457
  2286  0014EC  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2287  0014EE  D7FA               	bra	u4457
  2288  0014F0  D000               	nop2	
  2289  0014F2                     l268:
  2290                           
  2291                           ;main.c: 274: }
  2292                           ;main.c: 275: if (S_count< S_array[i]){
  2293  0014F2  90D8               	bcf	status,0,c
  2294  0014F4  342B               	rlcf	_i,w,c
  2295  0014F6  6ED9               	movwf	fsr2l,c
  2296  0014F8  342C               	rlcf	_i+1,w,c
  2297  0014FA  6EDA               	movwf	fsr2h,c
  2298  0014FC  0E00               	movlw	low _S_array
  2299  0014FE  26D9               	addwf	fsr2l,f,c
  2300  001500  0E01               	movlw	high _S_array
  2301  001502  22DA               	addwfc	fsr2h,f,c
  2302  001504  50DE               	movf	postinc2,w,c
  2303  001506  5C17               	subwf	_S_count,w,c
  2304  001508  5018               	movf	_S_count+1,w,c
  2305  00150A  0A80               	xorlw	128
  2306  00150C  0100               	movlb	0	; () banked
  2307  00150E  6FFF               	movwf	(??_main+2)& (0+255),b
  2308  001510  50DE               	movf	postinc2,w,c
  2309  001512  0A80               	xorlw	128
  2310  001514  59FF               	subwfb	(??_main+2)& (0+255),w,b
  2311  001516  B0D8               	btfsc	status,0,c
  2312  001518  D01F               	goto	l269
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;main.c: 276: printf(" S:");
  2316  00151A  0EED               	movlw	low STR_18
  2317  00151C  6FF1               	movwf	printf@f& (0+255),b
  2318  00151E  0EFF               	movlw	high STR_18
  2319  001520  6FF2               	movwf	(printf@f+1)& (0+255),b
  2320  001522  EC2B  F012         	call	_printf	;wreg free
  2321                           
  2322                           ;main.c: 277: printf("%d", S_count);
  2323  001526  0EE8               	movlw	low (STR_26+17)
  2324  001528  0100               	movlb	0	; () banked
  2325  00152A  6FF1               	movwf	printf@f& (0+255),b
  2326  00152C  0EFE               	movlw	high (STR_26+17)
  2327  00152E  6FF2               	movwf	(printf@f+1)& (0+255),b
  2328  001530  C017  F0F3         	movff	_S_count,?_printf+2
  2329  001534  C018  F0F4         	movff	_S_count+1,?_printf+3
  2330  001538  EC2B  F012         	call	_printf	;wreg free
  2331                           
  2332                           ;main.c: 278: _delay((unsigned long)((800)*(40000000/4000.0)));
  2333  00153C  0E29               	movlw	41
  2334  00153E  0100               	movlb	0	; () banked
  2335  001540  6FFE               	movwf	(??_main+1)& (0+255),b
  2336  001542  0E96               	movlw	150
  2337  001544  6FFD               	movwf	??_main& (0+255),b
  2338  001546  0E7F               	movlw	127
  2339  001548                     u4467:
  2340  001548  2EE8               	decfsz	wreg,f,c
  2341  00154A  D7FE               	bra	u4467
  2342  00154C  2FFD               	decfsz	??_main& (0+255),f,b
  2343  00154E  D7FC               	bra	u4467
  2344  001550  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2345  001552  D7FA               	bra	u4467
  2346                           
  2347                           ;main.c: 279: S_count++;
  2348  001554  4A17               	infsnz	_S_count,f,c
  2349  001556  2A18               	incf	_S_count+1,f,c
  2350  001558                     l269:
  2351                           
  2352                           ;main.c: 280: }
  2353                           ;main.c: 282: if (N_count< N_array[i]){
  2354  001558  90D8               	bcf	status,0,c
  2355  00155A  342B               	rlcf	_i,w,c
  2356  00155C  6ED9               	movwf	fsr2l,c
  2357  00155E  342C               	rlcf	_i+1,w,c
  2358  001560  6EDA               	movwf	fsr2h,c
  2359  001562  0E90               	movlw	low _N_array
  2360  001564  26D9               	addwf	fsr2l,f,c
  2361  001566  0E00               	movlw	high _N_array
  2362  001568  22DA               	addwfc	fsr2h,f,c
  2363  00156A  50DE               	movf	postinc2,w,c
  2364  00156C  5C15               	subwf	_N_count,w,c
  2365  00156E  5016               	movf	_N_count+1,w,c
  2366  001570  0A80               	xorlw	128
  2367  001572  0100               	movlb	0	; () banked
  2368  001574  6FFF               	movwf	(??_main+2)& (0+255),b
  2369  001576  50DE               	movf	postinc2,w,c
  2370  001578  0A80               	xorlw	128
  2371  00157A  59FF               	subwfb	(??_main+2)& (0+255),w,b
  2372  00157C  B0D8               	btfsc	status,0,c
  2373  00157E  D01F               	goto	l270
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;main.c: 283: printf(" N:");
  2377  001580  0EE9               	movlw	low STR_16
  2378  001582  6FF1               	movwf	printf@f& (0+255),b
  2379  001584  0EFF               	movlw	high STR_16
  2380  001586  6FF2               	movwf	(printf@f+1)& (0+255),b
  2381  001588  EC2B  F012         	call	_printf	;wreg free
  2382                           
  2383                           ;main.c: 284: printf("%d", N_count);
  2384  00158C  0EE8               	movlw	low (STR_26+17)
  2385  00158E  0100               	movlb	0	; () banked
  2386  001590  6FF1               	movwf	printf@f& (0+255),b
  2387  001592  0EFE               	movlw	high (STR_26+17)
  2388  001594  6FF2               	movwf	(printf@f+1)& (0+255),b
  2389  001596  C015  F0F3         	movff	_N_count,?_printf+2
  2390  00159A  C016  F0F4         	movff	_N_count+1,?_printf+3
  2391  00159E  EC2B  F012         	call	_printf	;wreg free
  2392                           
  2393                           ;main.c: 285: _delay((unsigned long)((800)*(40000000/4000.0)));
  2394  0015A2  0E29               	movlw	41
  2395  0015A4  0100               	movlb	0	; () banked
  2396  0015A6  6FFE               	movwf	(??_main+1)& (0+255),b
  2397  0015A8  0E96               	movlw	150
  2398  0015AA  6FFD               	movwf	??_main& (0+255),b
  2399  0015AC  0E7F               	movlw	127
  2400  0015AE                     u4477:
  2401  0015AE  2EE8               	decfsz	wreg,f,c
  2402  0015B0  D7FE               	bra	u4477
  2403  0015B2  2FFD               	decfsz	??_main& (0+255),f,b
  2404  0015B4  D7FC               	bra	u4477
  2405  0015B6  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2406  0015B8  D7FA               	bra	u4477
  2407                           
  2408                           ;main.c: 286: N_count++;
  2409  0015BA  4A15               	infsnz	_N_count,f,c
  2410  0015BC  2A16               	incf	_N_count+1,f,c
  2411  0015BE                     l270:
  2412                           
  2413                           ;main.c: 287: }
  2414                           ;main.c: 289: if (W_count< W_array[i]){
  2415  0015BE  90D8               	bcf	status,0,c
  2416  0015C0  342B               	rlcf	_i,w,c
  2417  0015C2  6ED9               	movwf	fsr2l,c
  2418  0015C4  342C               	rlcf	_i+1,w,c
  2419  0015C6  6EDA               	movwf	fsr2h,c
  2420  0015C8  0E80               	movlw	low _W_array
  2421  0015CA  26D9               	addwf	fsr2l,f,c
  2422  0015CC  0E00               	movlw	high _W_array
  2423  0015CE  22DA               	addwfc	fsr2h,f,c
  2424  0015D0  50DE               	movf	postinc2,w,c
  2425  0015D2  5C13               	subwf	_W_count,w,c
  2426  0015D4  5014               	movf	_W_count+1,w,c
  2427  0015D6  0A80               	xorlw	128
  2428  0015D8  0100               	movlb	0	; () banked
  2429  0015DA  6FFF               	movwf	(??_main+2)& (0+255),b
  2430  0015DC  50DE               	movf	postinc2,w,c
  2431  0015DE  0A80               	xorlw	128
  2432  0015E0  59FF               	subwfb	(??_main+2)& (0+255),w,b
  2433  0015E2  B0D8               	btfsc	status,0,c
  2434  0015E4  D6C5               	goto	l265
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 290: printf(" W:");
  2438  0015E6  0EF1               	movlw	low STR_20
  2439  0015E8  6FF1               	movwf	printf@f& (0+255),b
  2440  0015EA  0EFF               	movlw	high STR_20
  2441  0015EC  6FF2               	movwf	(printf@f+1)& (0+255),b
  2442  0015EE  EC2B  F012         	call	_printf	;wreg free
  2443                           
  2444                           ;main.c: 291: printf("%d", W_count);
  2445  0015F2  0EE8               	movlw	low (STR_26+17)
  2446  0015F4  0100               	movlb	0	; () banked
  2447  0015F6  6FF1               	movwf	printf@f& (0+255),b
  2448  0015F8  0EFE               	movlw	high (STR_26+17)
  2449  0015FA  6FF2               	movwf	(printf@f+1)& (0+255),b
  2450  0015FC  C013  F0F3         	movff	_W_count,?_printf+2
  2451  001600  C014  F0F4         	movff	_W_count+1,?_printf+3
  2452  001604  EC2B  F012         	call	_printf	;wreg free
  2453                           
  2454                           ;main.c: 292: _delay((unsigned long)((800)*(40000000/4000.0)));
  2455  001608  0E29               	movlw	41
  2456  00160A  0100               	movlb	0	; () banked
  2457  00160C  6FFE               	movwf	(??_main+1)& (0+255),b
  2458  00160E  0E96               	movlw	150
  2459  001610  6FFD               	movwf	??_main& (0+255),b
  2460  001612  0E7F               	movlw	127
  2461  001614                     u4487:
  2462  001614  2EE8               	decfsz	wreg,f,c
  2463  001616  D7FE               	bra	u4487
  2464  001618  2FFD               	decfsz	??_main& (0+255),f,b
  2465  00161A  D7FC               	bra	u4487
  2466  00161C  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2467  00161E  D7FA               	bra	u4487
  2468                           
  2469                           ;main.c: 293: W_count++;
  2470  001620  4A13               	infsnz	_W_count,f,c
  2471  001622  2A14               	incf	_W_count+1,f,c
  2472  001624  D6A5               	goto	l265
  2473  001626                     l264:
  2474                           
  2475                           ;main.c: 359: else{
  2476                           ;main.c: 368: initLCD();
  2477  001626  EC3B  F017         	call	_initLCD	;wreg free
  2478                           
  2479                           ;main.c: 369: printf("C");
  2480  00162A  0EFC               	movlw	low STR_23
  2481  00162C  0100               	movlb	0	; () banked
  2482  00162E  6FF1               	movwf	printf@f& (0+255),b
  2483  001630  0EFF               	movlw	high STR_23
  2484  001632  6FF2               	movwf	(printf@f+1)& (0+255),b
  2485  001634  EC2B  F012         	call	_printf	;wreg free
  2486                           
  2487                           ;main.c: 370: printf("%d",i);
  2488  001638  0EE8               	movlw	low (STR_26+17)
  2489  00163A  0100               	movlb	0	; () banked
  2490  00163C  6FF1               	movwf	printf@f& (0+255),b
  2491  00163E  0EFE               	movlw	high (STR_26+17)
  2492  001640  6FF2               	movwf	(printf@f+1)& (0+255),b
  2493  001642  C02B  F0F3         	movff	_i,?_printf+2
  2494  001646  C02C  F0F4         	movff	_i+1,?_printf+3
  2495  00164A  EC2B  F012         	call	_printf	;wreg free
  2496                           
  2497                           ;main.c: 371: printf(":");
  2498  00164E  0EE7               	movlw	low (STR_14+2)
  2499  001650  0100               	movlb	0	; () banked
  2500  001652  6FF1               	movwf	printf@f& (0+255),b
  2501  001654  0EFF               	movlw	high (STR_14+2)
  2502  001656  6FF2               	movwf	(printf@f+1)& (0+255),b
  2503  001658  EC2B  F012         	call	_printf	;wreg free
  2504                           
  2505                           ;main.c: 372: printf("done");
  2506  00165C  0E4E               	movlw	low (STR_41+7)
  2507  00165E  0100               	movlb	0	; () banked
  2508  001660  6FF1               	movwf	printf@f& (0+255),b
  2509  001662  0EFF               	movlw	high (STR_41+7)
  2510  001664  6FF2               	movwf	(printf@f+1)& (0+255),b
  2511  001666  EC2B  F012         	call	_printf	;wreg free
  2512                           
  2513                           ;main.c: 373: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2514  00166A  0E33               	movlw	51
  2515  00166C  0100               	movlb	0	; () banked
  2516  00166E  6FFE               	movwf	(??_main+1)& (0+255),b
  2517  001670  0EBB               	movlw	187
  2518  001672  6FFD               	movwf	??_main& (0+255),b
  2519  001674  0EDF               	movlw	223
  2520  001676                     u4497:
  2521  001676  2EE8               	decfsz	wreg,f,c
  2522  001678  D7FE               	bra	u4497
  2523  00167A  2FFD               	decfsz	??_main& (0+255),f,b
  2524  00167C  D7FC               	bra	u4497
  2525  00167E  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2526  001680  D7FA               	bra	u4497
  2527  001682  D000               	nop2	
  2528  001684                     l273:
  2529  001684  4A2B               	infsnz	_i,f,c
  2530  001686  2A2C               	incf	_i+1,f,c
  2531  001688  502C               	movf	_i+1,w,c
  2532  00168A  E101               	bnz	l5104
  2533  00168C  D633               	goto	L2
  2534  00168E                     u4220:
  2535  00168E                     l5104:
  2536                           
  2537                           ;main.c: 376: }
  2538                           ;main.c: 377: }
  2539                           ;main.c: 382: }
  2540                           ;main.c: 384: store_prev();
  2541  00168E  ECCD  F014         	call	_store_prev	;wreg free
  2542                           
  2543                           ;main.c: 385: mode = 2;
  2544  001692  0E00               	movlw	0
  2545  001694  6E12               	movwf	_mode+1,c
  2546  001696  0E02               	movlw	2
  2547  001698  6E11               	movwf	_mode,c
  2548  00169A                     l254:
  2549                           
  2550                           ;main.c: 386: }
  2551                           ;main.c: 395: if (mode == 2){
  2552  00169A  0E02               	movlw	2
  2553  00169C  1811               	xorwf	_mode,w,c
  2554  00169E  1012               	iorwf	_mode+1,w,c
  2555  0016A0  A4D8               	btfss	status,2,c
  2556  0016A2  EF4E  F007         	goto	l240
  2557                           
  2558                           ;main.c: 396: initLCD();
  2559  0016A6  EC3B  F017         	call	_initLCD	;wreg free
  2560                           
  2561                           ;main.c: 411: servoRotate0();
  2562  0016AA  ECD1  F017         	call	_servoRotate0	;wreg free
  2563                           
  2564                           ;main.c: 412: _delay((unsigned long)((200)*(40000000/4000.0)));
  2565  0016AE  0E0B               	movlw	11
  2566  0016B0  0100               	movlb	0	; () banked
  2567  0016B2  6FFE               	movwf	(??_main+1)& (0+255),b
  2568  0016B4  0E26               	movlw	38
  2569  0016B6  6FFD               	movwf	??_main& (0+255),b
  2570  0016B8  0E5D               	movlw	93
  2571  0016BA                     u4507:
  2572  0016BA  2EE8               	decfsz	wreg,f,c
  2573  0016BC  D7FE               	bra	u4507
  2574  0016BE  2FFD               	decfsz	??_main& (0+255),f,b
  2575  0016C0  D7FC               	bra	u4507
  2576  0016C2  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2577  0016C4  D7FA               	bra	u4507
  2578  0016C6  D000               	nop2	
  2579                           
  2580                           ;main.c: 414: servoRotate180();
  2581  0016C8  EC87  F017         	call	_servoRotate180	;wreg free
  2582                           
  2583                           ;main.c: 415: _delay((unsigned long)((300)*(40000000/4000.0)));
  2584  0016CC  0E10               	movlw	16
  2585  0016CE  0100               	movlb	0	; () banked
  2586  0016D0  6FFE               	movwf	(??_main+1)& (0+255),b
  2587  0016D2  0E39               	movlw	57
  2588  0016D4  6FFD               	movwf	??_main& (0+255),b
  2589  0016D6  0E0D               	movlw	13
  2590  0016D8                     u4517:
  2591  0016D8  2EE8               	decfsz	wreg,f,c
  2592  0016DA  D7FE               	bra	u4517
  2593  0016DC  2FFD               	decfsz	??_main& (0+255),f,b
  2594  0016DE  D7FC               	bra	u4517
  2595  0016E0  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2596  0016E2  D7FA               	bra	u4517
  2597  0016E4  D000               	nop2	
  2598                           
  2599                           ;main.c: 417: B_count = 0;
  2600  0016E6  0E00               	movlw	0
  2601  0016E8  6E1A               	movwf	_B_count+1,c
  2602  0016EA  0E00               	movlw	0
  2603  0016EC  6E19               	movwf	_B_count,c
  2604                           
  2605                           ;main.c: 418: N_count = 0;
  2606  0016EE  0E00               	movlw	0
  2607  0016F0  6E16               	movwf	_N_count+1,c
  2608  0016F2  0E00               	movlw	0
  2609  0016F4  6E15               	movwf	_N_count,c
  2610                           
  2611                           ;main.c: 419: S_count = 0;
  2612  0016F6  0E00               	movlw	0
  2613  0016F8  6E18               	movwf	_S_count+1,c
  2614  0016FA  0E00               	movlw	0
  2615  0016FC  6E17               	movwf	_S_count,c
  2616                           
  2617                           ;main.c: 420: W_count = 0;
  2618  0016FE  0E00               	movlw	0
  2619  001700  6E14               	movwf	_W_count+1,c
  2620  001702  0E00               	movlw	0
  2621  001704  6E13               	movwf	_W_count,c
  2622                           
  2623                           ;main.c: 423: while(motor_counter<20){
  2624  001706  D039               	goto	l275
  2625  001708                     
  2626                           ;main.c: 424: motorStart_0();
  2627  001708  ECB3  F018         	call	_motorStart_0	;wreg free
  2628                           
  2629                           ;main.c: 426: motor_counter++;
  2630  00170C  0100               	movlb	0	; () banked
  2631  00170E  4BCD               	infsnz	_motor_counter& (0+255),f,b
  2632  001710  2BCE               	incf	(_motor_counter+1)& (0+255),f,b
  2633                           
  2634                           ;main.c: 428: if (motor_counter%3 == 0){
  2635  001712  C0CD  F0E5         	movff	_motor_counter,___awmod@dividend
  2636  001716  C0CE  F0E6         	movff	_motor_counter+1,___awmod@dividend+1
  2637  00171A  0E00               	movlw	0
  2638  00171C  6FE8               	movwf	(___awmod@divisor+1)& (0+255),b
  2639  00171E  0E03               	movlw	3
  2640  001720  6FE7               	movwf	___awmod@divisor& (0+255),b
  2641  001722  EC22  F016         	call	___awmod	;wreg free
  2642  001726  0100               	movlb	0	; () banked
  2643  001728  51E5               	movf	?___awmod& (0+255),w,b
  2644  00172A  11E6               	iorwf	(?___awmod+1)& (0+255),w,b
  2645  00172C  A4D8               	btfss	status,2,c
  2646  00172E  D002               	goto	l277
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 429: B_count ++;
  2650  001730  4A19               	infsnz	_B_count,f,c
  2651  001732  2A1A               	incf	_B_count+1,f,c
  2652  001734                     l277:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 431: }
  2656                           ;main.c: 432: printf("remain:%d",B_count);
  2657                           
  2658                           ; BSR set to: 0
  2659  001734  0E75               	movlw	low STR_39
  2660  001736  6FF1               	movwf	printf@f& (0+255),b
  2661  001738  0EFF               	movlw	high STR_39
  2662  00173A  6FF2               	movwf	(printf@f+1)& (0+255),b
  2663  00173C  C019  F0F3         	movff	_B_count,?_printf+2
  2664  001740  C01A  F0F4         	movff	_B_count+1,?_printf+3
  2665  001744  EC2B  F012         	call	_printf	;wreg free
  2666                           
  2667                           ;main.c: 433: _delay((unsigned long)((500)*(40000000/4000.0)));
  2668  001748  0E1A               	movlw	26
  2669  00174A  0100               	movlb	0	; () banked
  2670  00174C  6FFE               	movwf	(??_main+1)& (0+255),b
  2671  00174E  0E5E               	movlw	94
  2672  001750  6FFD               	movwf	??_main& (0+255),b
  2673  001752  0E6E               	movlw	110
  2674  001754                     u4527:
  2675  001754  2EE8               	decfsz	wreg,f,c
  2676  001756  D7FE               	bra	u4527
  2677  001758  2FFD               	decfsz	??_main& (0+255),f,b
  2678  00175A  D7FC               	bra	u4527
  2679  00175C  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2680  00175E  D7FA               	bra	u4527
  2681  001760  F000               	nop	
  2682                           
  2683                           ;main.c: 434: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2684  001762  0E80               	movlw	128
  2685  001764  ECCF  F018         	call	_lcdInst
  2686  001768  0E41               	movlw	65
  2687  00176A  0100               	movlb	0	; () banked
  2688  00176C  6FFD               	movwf	??_main& (0+255),b
  2689  00176E  0EEE               	movlw	238
  2690  001770                     u4537:
  2691  001770  2EE8               	decfsz	wreg,f,c
  2692  001772  D7FE               	bra	u4537
  2693  001774  2FFD               	decfsz	??_main& (0+255),f,b
  2694  001776  D7FC               	bra	u4537
  2695  001778  F000               	nop	
  2696  00177A                     l275:
  2697  00177A  0100               	movlb	0	; () banked
  2698  00177C  BFCE               	btfsc	(_motor_counter+1)& (0+255),7,b
  2699  00177E  D7C4               	goto	l276
  2700  001780  51CE               	movf	(_motor_counter+1)& (0+255),w,b
  2701  001782  E104               	bnz	l5140
  2702  001784  0E14               	movlw	20
  2703  001786  5DCD               	subwf	_motor_counter& (0+255),w,b
  2704  001788  A0D8               	btfss	status,0,c
  2705  00178A  D7BE               	goto	l276
  2706  00178C                     l5140:
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;main.c: 436: }
  2710                           ;main.c: 437: motorStop_0();
  2711  00178C  ECA3  F018         	call	_motorStop_0	;wreg free
  2712                           
  2713                           ;main.c: 439: printf("remain:%d",B_count);
  2714  001790  0E75               	movlw	low STR_39
  2715  001792  0100               	movlb	0	; () banked
  2716  001794  6FF1               	movwf	printf@f& (0+255),b
  2717  001796  0EFF               	movlw	high STR_39
  2718  001798  6FF2               	movwf	(printf@f+1)& (0+255),b
  2719  00179A  C019  F0F3         	movff	_B_count,?_printf+2
  2720  00179E  C01A  F0F4         	movff	_B_count+1,?_printf+3
  2721  0017A2  EC2B  F012         	call	_printf	;wreg free
  2722                           
  2723                           ;main.c: 440: _delay((unsigned long)((3000)*(40000000/4000.0)));
  2724  0017A6  0E99               	movlw	153
  2725  0017A8  0100               	movlb	0	; () banked
  2726  0017AA  6FFE               	movwf	(??_main+1)& (0+255),b
  2727  0017AC  0E31               	movlw	49
  2728  0017AE  6FFD               	movwf	??_main& (0+255),b
  2729  0017B0  0EA2               	movlw	162
  2730  0017B2                     u4547:
  2731  0017B2  2EE8               	decfsz	wreg,f,c
  2732  0017B4  D7FE               	bra	u4547
  2733  0017B6  2FFD               	decfsz	??_main& (0+255),f,b
  2734  0017B8  D7FC               	bra	u4547
  2735  0017BA  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2736  0017BC  D7FA               	bra	u4547
  2737  0017BE  F000               	nop	
  2738                           
  2739                           ;main.c: 441: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2740  0017C0  0E80               	movlw	128
  2741  0017C2  ECCF  F018         	call	_lcdInst
  2742  0017C6  0E41               	movlw	65
  2743  0017C8  0100               	movlb	0	; () banked
  2744  0017CA  6FFD               	movwf	??_main& (0+255),b
  2745  0017CC  0EEE               	movlw	238
  2746  0017CE                     u4557:
  2747  0017CE  2EE8               	decfsz	wreg,f,c
  2748  0017D0  D7FE               	bra	u4557
  2749  0017D2  2FFD               	decfsz	??_main& (0+255),f,b
  2750  0017D4  D7FC               	bra	u4557
  2751  0017D6  F000               	nop	
  2752                           
  2753                           ;main.c: 442: initLCD();
  2754  0017D8  EC3B  F017         	call	_initLCD	;wreg free
  2755                           
  2756                           ;main.c: 443: printf("you're done");
  2757  0017DC  0E47               	movlw	low STR_41
  2758  0017DE  0100               	movlb	0	; () banked
  2759  0017E0  6FF1               	movwf	printf@f& (0+255),b
  2760  0017E2  0EFF               	movlw	high STR_41
  2761  0017E4  6FF2               	movwf	(printf@f+1)& (0+255),b
  2762  0017E6  EC2B  F012         	call	_printf	;wreg free
  2763                           
  2764                           ;main.c: 444: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2765  0017EA  0E33               	movlw	51
  2766  0017EC  0100               	movlb	0	; () banked
  2767  0017EE  6FFE               	movwf	(??_main+1)& (0+255),b
  2768  0017F0  0EBB               	movlw	187
  2769  0017F2  6FFD               	movwf	??_main& (0+255),b
  2770  0017F4  0EDF               	movlw	223
  2771  0017F6                     u4567:
  2772  0017F6  2EE8               	decfsz	wreg,f,c
  2773  0017F8  D7FE               	bra	u4567
  2774  0017FA  2FFD               	decfsz	??_main& (0+255),f,b
  2775  0017FC  D7FC               	bra	u4567
  2776  0017FE  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2777  001800  D7FA               	bra	u4567
  2778  001802  D000               	nop2	
  2779                           
  2780                           ;main.c: 445: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2781  001804  0E80               	movlw	128
  2782  001806  ECCF  F018         	call	_lcdInst
  2783  00180A  0E41               	movlw	65
  2784  00180C  0100               	movlb	0	; () banked
  2785  00180E  6FFD               	movwf	??_main& (0+255),b
  2786  001810  0EEE               	movlw	238
  2787  001812                     u4577:
  2788  001812  2EE8               	decfsz	wreg,f,c
  2789  001814  D7FE               	bra	u4577
  2790  001816  2FFD               	decfsz	??_main& (0+255),f,b
  2791  001818  D7FC               	bra	u4577
  2792  00181A  F000               	nop	
  2793                           
  2794                           ;main.c: 447: for (i = 0; i<8; i++){
  2795  00181C  0E00               	movlw	0
  2796  00181E  6E2C               	movwf	_i+1,c
  2797  001820  0E00               	movlw	0
  2798  001822  6E2B               	movwf	_i,c
  2799  001824                     l5162:
  2800  001824  502C               	movf	_i+1,w,c
  2801  001826  E168               	bnz	l5178
  2802  001828  0E08               	movlw	8
  2803  00182A  5C2B               	subwf	_i,w,c
  2804  00182C  B0D8               	btfsc	status,0,c
  2805  00182E  D064               	goto	u4270
  2806                           
  2807                           ;main.c: 448: printf("%d",i);
  2808  001830  0EE8               	movlw	low (STR_26+17)
  2809  001832  0100               	movlb	0	; () banked
  2810  001834  6FF1               	movwf	printf@f& (0+255),b
  2811  001836  0EFE               	movlw	high (STR_26+17)
  2812  001838  6FF2               	movwf	(printf@f+1)& (0+255),b
  2813  00183A  C02B  F0F3         	movff	_i,?_printf+2
  2814  00183E  C02C  F0F4         	movff	_i+1,?_printf+3
  2815  001842  EC2B  F012         	call	_printf	;wreg free
  2816                           
  2817                           ;main.c: 449: printf(":");
  2818  001846  0EE7               	movlw	low (STR_14+2)
  2819  001848  0100               	movlb	0	; () banked
  2820  00184A  6FF1               	movwf	printf@f& (0+255),b
  2821  00184C  0EFF               	movlw	high (STR_14+2)
  2822  00184E  6FF2               	movwf	(printf@f+1)& (0+255),b
  2823  001850  EC2B  F012         	call	_printf	;wreg free
  2824                           
  2825                           ;main.c: 451: printf("set:");
  2826  001854  0E35               	movlw	low (STR_2+9)
  2827  001856  0100               	movlb	0	; () banked
  2828  001858  6FF1               	movwf	printf@f& (0+255),b
  2829  00185A  0EFF               	movlw	high (STR_2+9)
  2830  00185C  6FF2               	movwf	(printf@f+1)& (0+255),b
  2831  00185E  EC2B  F012         	call	_printf	;wreg free
  2832                           
  2833                           ;main.c: 452: printf(prev_set[i]);
  2834  001862  C02B  F0E5         	movff	_i,___wmul@multiplier
  2835  001866  C02C  F0E6         	movff	_i+1,___wmul@multiplier+1
  2836  00186A  0E00               	movlw	0
  2837  00186C  0100               	movlb	0	; () banked
  2838  00186E  6FE8               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2839  001870  0E05               	movlw	5
  2840  001872  6FE7               	movwf	___wmul@multiplicand& (0+255),b
  2841  001874  EC7C  F018         	call	___wmul	;wreg free
  2842  001878  0E30               	movlw	low _prev_set
  2843  00187A  0100               	movlb	0	; () banked
  2844  00187C  25E5               	addwf	?___wmul& (0+255),w,b
  2845  00187E  6FF1               	movwf	printf@f& (0+255),b
  2846  001880  0E01               	movlw	high _prev_set
  2847  001882  21E6               	addwfc	(?___wmul+1)& (0+255),w,b
  2848  001884  6FF2               	movwf	(printf@f+1)& (0+255),b
  2849  001886  EC2B  F012         	call	_printf	;wreg free
  2850                           
  2851                           ;main.c: 453: printf(",");
  2852  00188A  0EF8               	movlw	low STR_11
  2853  00188C  0100               	movlb	0	; () banked
  2854  00188E  6FF1               	movwf	printf@f& (0+255),b
  2855  001890  0EFF               	movlw	high STR_11
  2856  001892  6FF2               	movwf	(printf@f+1)& (0+255),b
  2857  001894  EC2B  F012         	call	_printf	;wreg free
  2858                           
  2859                           ;main.c: 454: printf("%d",prev_number[i]);
  2860  001898  0EE8               	movlw	low (STR_26+17)
  2861  00189A  0100               	movlb	0	; () banked
  2862  00189C  6FF1               	movwf	printf@f& (0+255),b
  2863  00189E  0EFE               	movlw	high (STR_26+17)
  2864  0018A0  6FF2               	movwf	(printf@f+1)& (0+255),b
  2865  0018A2  90D8               	bcf	status,0,c
  2866  0018A4  342B               	rlcf	_i,w,c
  2867  0018A6  6ED9               	movwf	fsr2l,c
  2868  0018A8  342C               	rlcf	_i+1,w,c
  2869  0018AA  6EDA               	movwf	fsr2h,c
  2870  0018AC  0E10               	movlw	low _prev_number
  2871  0018AE  26D9               	addwf	fsr2l,f,c
  2872  0018B0  0E01               	movlw	high _prev_number
  2873  0018B2  22DA               	addwfc	fsr2h,f,c
  2874  0018B4  CFDE F0F3          	movff	postinc2,?_printf+2
  2875  0018B8  CFDD F0F4          	movff	postdec2,?_printf+3
  2876  0018BC  EC2B  F012         	call	_printf	;wreg free
  2877                           
  2878                           ;main.c: 455: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2879  0018C0  0E33               	movlw	51
  2880  0018C2  0100               	movlb	0	; () banked
  2881  0018C4  6FFE               	movwf	(??_main+1)& (0+255),b
  2882  0018C6  0EBB               	movlw	187
  2883  0018C8  6FFD               	movwf	??_main& (0+255),b
  2884  0018CA  0EDF               	movlw	223
  2885  0018CC                     u4587:
  2886  0018CC  2EE8               	decfsz	wreg,f,c
  2887  0018CE  D7FE               	bra	u4587
  2888  0018D0  2FFD               	decfsz	??_main& (0+255),f,b
  2889  0018D2  D7FC               	bra	u4587
  2890  0018D4  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2891  0018D6  D7FA               	bra	u4587
  2892  0018D8  D000               	nop2	
  2893                           
  2894                           ;main.c: 456: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2895  0018DA  0E80               	movlw	128
  2896  0018DC  ECCF  F018         	call	_lcdInst
  2897  0018E0  0E41               	movlw	65
  2898  0018E2  0100               	movlb	0	; () banked
  2899  0018E4  6FFD               	movwf	??_main& (0+255),b
  2900  0018E6  0EEE               	movlw	238
  2901  0018E8                     u4597:
  2902  0018E8  2EE8               	decfsz	wreg,f,c
  2903  0018EA  D7FE               	bra	u4597
  2904  0018EC  2FFD               	decfsz	??_main& (0+255),f,b
  2905  0018EE  D7FC               	bra	u4597
  2906  0018F0  F000               	nop	
  2907  0018F2  4A2B               	infsnz	_i,f,c
  2908  0018F4  2A2C               	incf	_i+1,f,c
  2909  0018F6  D796               	goto	l5162
  2910  0018F8                     u4270:
  2911  0018F8                     l5178:
  2912                           
  2913                           ;main.c: 461: operation = 1;
  2914  0018F8  0E00               	movlw	0
  2915  0018FA  0100               	movlb	0	; () banked
  2916  0018FC  6FCC               	movwf	(_operation+1)& (0+255),b
  2917  0018FE  0E01               	movlw	1
  2918  001900  6FCB               	movwf	_operation& (0+255),b
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;main.c: 462: printf("1: operation time");
  2922  001902  0EEB               	movlw	low STR_47
  2923  001904  6FF1               	movwf	printf@f& (0+255),b
  2924  001906  0EFE               	movlw	high STR_47
  2925  001908  6FF2               	movwf	(printf@f+1)& (0+255),b
  2926  00190A  EC2B  F012         	call	_printf	;wreg free
  2927                           
  2928                           ;main.c: 463: lcdInst(0xC0);;
  2929  00190E  0EC0               	movlw	192
  2930  001910  ECCF  F018         	call	_lcdInst
  2931                           
  2932                           ;main.c: 464: printf("2: restart");
  2933  001914  0E6A               	movlw	low STR_48
  2934  001916  0100               	movlb	0	; () banked
  2935  001918  6FF1               	movwf	printf@f& (0+255),b
  2936  00191A  0EFF               	movlw	high STR_48
  2937  00191C  6FF2               	movwf	(printf@f+1)& (0+255),b
  2938  00191E  EC2B  F012         	call	_printf	;wreg free
  2939                           
  2940                           ;main.c: 467: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2941  001922  0E33               	movlw	51
  2942  001924  0100               	movlb	0	; () banked
  2943  001926  6FFE               	movwf	(??_main+1)& (0+255),b
  2944  001928  0EBB               	movlw	187
  2945  00192A  6FFD               	movwf	??_main& (0+255),b
  2946  00192C  0EDF               	movlw	223
  2947  00192E                     u4607:
  2948  00192E  2EE8               	decfsz	wreg,f,c
  2949  001930  D7FE               	bra	u4607
  2950  001932  2FFD               	decfsz	??_main& (0+255),f,b
  2951  001934  D7FC               	bra	u4607
  2952  001936  2FFE               	decfsz	(??_main+1)& (0+255),f,b
  2953  001938  D7FA               	bra	u4607
  2954  00193A  D000               	nop2	
  2955                           
  2956                           ;main.c: 468: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2957  00193C  0E80               	movlw	128
  2958  00193E  ECCF  F018         	call	_lcdInst
  2959  001942  0E41               	movlw	65
  2960  001944  0100               	movlb	0	; () banked
  2961  001946  6FFD               	movwf	??_main& (0+255),b
  2962  001948  0EEE               	movlw	238
  2963  00194A                     u4617:
  2964  00194A  2EE8               	decfsz	wreg,f,c
  2965  00194C  D7FE               	bra	u4617
  2966  00194E  2FFD               	decfsz	??_main& (0+255),f,b
  2967  001950  D7FC               	bra	u4617
  2968  001952  F000               	nop	
  2969                           
  2970                           ;main.c: 470: if(operation_time == 1){
  2971  001954  0100               	movlb	0	; () banked
  2972  001956  05C9               	decf	_operation_time& (0+255),w,b
  2973  001958  11CA               	iorwf	(_operation_time+1)& (0+255),w,b
  2974  00195A  A4D8               	btfss	status,2,c
  2975  00195C  D7CD               	goto	u4270
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 472: }
  2979                           ;main.c: 473: }
  2980                           ;main.c: 474: initialize();
  2981                           
  2982                           ; BSR set to: 0
  2983                           
  2984                           ; BSR set to: 0
  2985                           
  2986                           ; BSR set to: 0
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;main.c: 471: break;
  2990  00195E  EC30  F014         	call	_initialize	;wreg free
  2991                           
  2992                           ;main.c: 475: mode = 0;
  2993  001962  0E00               	movlw	0
  2994  001964  6E12               	movwf	_mode+1,c
  2995  001966  0E00               	movlw	0
  2996  001968  6E11               	movwf	_mode,c
  2997  00196A  EF4E  F007         	goto	l240
  2998  00196E                     __end_of_main:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           intcon	equ	0xFF2
  3005                           intcon3	equ	0xFF0
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _store_prev *****************
  3015 ;; Defined at:
  3016 ;;		line 324 in file "keypad.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  i               2   14[BANK0 ] int 
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;Total ram usage:        2 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    5
  3037 ;; This function calls:
  3038 ;;		___wmul
  3039 ;;		_strncpy
  3040 ;; This function is called by:
  3041 ;;		_main
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text1
  3046  00299A                     __ptext1:
  3047                           	opt stack 0
  3048  00299A                     _store_prev:
  3049                           	opt stack 25
  3050                           
  3051                           ;keypad.c: 325: for (int i = 0; i<8; i++){
  3052                           
  3053                           ;incstack = 0
  3054  00299A  0E00               	movlw	0
  3055  00299C  0100               	movlb	0	; () banked
  3056  00299E  6FF4               	movwf	(store_prev@i+1)& (0+255),b
  3057  0029A0  0E00               	movlw	0
  3058  0029A2  6FF3               	movwf	store_prev@i& (0+255),b
  3059  0029A4                     l4758:
  3060                           
  3061                           ; BSR set to: 0
  3062  0029A4  BFF4               	btfsc	(store_prev@i+1)& (0+255),7,b
  3063  0029A6  D006               	goto	l619
  3064  0029A8  51F4               	movf	(store_prev@i+1)& (0+255),w,b
  3065  0029AA  E146               	bnz	l621
  3066  0029AC  0E08               	movlw	8
  3067  0029AE  5DF3               	subwf	store_prev@i& (0+255),w,b
  3068  0029B0  B0D8               	btfsc	status,0,c
  3069  0029B2  0012               	return	
  3070  0029B4                     l619:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;keypad.c: 326: strncpy(prev_set[i],final_set[i],5);
  3074                           
  3075                           ; BSR set to: 0
  3076  0029B4  C0F3  F0E5         	movff	store_prev@i,___wmul@multiplier
  3077  0029B8  C0F4  F0E6         	movff	store_prev@i+1,___wmul@multiplier+1
  3078  0029BC  0E00               	movlw	0
  3079  0029BE  6FE8               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3080  0029C0  0E05               	movlw	5
  3081  0029C2  6FE7               	movwf	___wmul@multiplicand& (0+255),b
  3082  0029C4  EC7C  F018         	call	___wmul	;wreg free
  3083  0029C8  0E30               	movlw	low _prev_set
  3084  0029CA  0100               	movlb	0	; () banked
  3085  0029CC  25E5               	addwf	?___wmul& (0+255),w,b
  3086  0029CE  6FEB               	movwf	strncpy@to& (0+255),b
  3087  0029D0  0E01               	movlw	high _prev_set
  3088  0029D2  21E6               	addwfc	(?___wmul+1)& (0+255),w,b
  3089  0029D4  6FEC               	movwf	(strncpy@to+1)& (0+255),b
  3090  0029D6  C0F3  F0E5         	movff	store_prev@i,___wmul@multiplier
  3091  0029DA  C0F4  F0E6         	movff	store_prev@i+1,___wmul@multiplier+1
  3092  0029DE  0E00               	movlw	0
  3093  0029E0  6FE8               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3094  0029E2  0E05               	movlw	5
  3095  0029E4  6FE7               	movwf	___wmul@multiplicand& (0+255),b
  3096  0029E6  EC7C  F018         	call	___wmul	;wreg free
  3097  0029EA  0E58               	movlw	low _final_set
  3098  0029EC  0100               	movlb	0	; () banked
  3099  0029EE  25E5               	addwf	?___wmul& (0+255),w,b
  3100  0029F0  6FED               	movwf	strncpy@from& (0+255),b
  3101  0029F2  0E01               	movlw	high _final_set
  3102  0029F4  21E6               	addwfc	(?___wmul+1)& (0+255),w,b
  3103  0029F6  6FEE               	movwf	(strncpy@from+1)& (0+255),b
  3104  0029F8  0E00               	movlw	0
  3105  0029FA  6FF0               	movwf	(strncpy@size+1)& (0+255),b
  3106  0029FC  0E05               	movlw	5
  3107  0029FE  6FEF               	movwf	strncpy@size& (0+255),b
  3108  002A00  EC8E  F016         	call	_strncpy	;wreg free
  3109                           
  3110                           ;keypad.c: 327: prev_number[i] = final_number[i];
  3111  002A04  90D8               	bcf	status,0,c
  3112  002A06  0100               	movlb	0	; () banked
  3113  002A08  35F3               	rlcf	store_prev@i& (0+255),w,b
  3114  002A0A  6ED9               	movwf	fsr2l,c
  3115  002A0C  35F4               	rlcf	(store_prev@i+1)& (0+255),w,b
  3116  002A0E  6EDA               	movwf	fsr2h,c
  3117  002A10  0E20               	movlw	low _final_number
  3118  002A12  26D9               	addwf	fsr2l,f,c
  3119  002A14  0E01               	movlw	high _final_number
  3120  002A16  22DA               	addwfc	fsr2h,f,c
  3121  002A18  90D8               	bcf	status,0,c
  3122  002A1A  35F3               	rlcf	store_prev@i& (0+255),w,b
  3123  002A1C  6EE1               	movwf	fsr1l,c
  3124  002A1E  35F4               	rlcf	(store_prev@i+1)& (0+255),w,b
  3125  002A20  6EE2               	movwf	fsr1h,c
  3126  002A22  0E10               	movlw	low _prev_number
  3127  002A24  26E1               	addwf	fsr1l,f,c
  3128  002A26  0E01               	movlw	high _prev_number
  3129  002A28  22E2               	addwfc	fsr1h,f,c
  3130  002A2A  CFDE FFE6          	movff	postinc2,postinc1
  3131  002A2E  CFDD FFE5          	movff	postdec2,postdec1
  3132                           
  3133                           ; BSR set to: 0
  3134  002A32  4BF3               	infsnz	store_prev@i& (0+255),f,b
  3135  002A34  2BF4               	incf	(store_prev@i+1)& (0+255),f,b
  3136  002A36  D7B6               	goto	l4758
  3137  002A38                     l621:
  3138                           
  3139                           ; BSR set to: 0
  3140  002A38  0012               	return		;funcret
  3141  002A3A                     __end_of_store_prev:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           intcon	equ	0xFF2
  3148                           intcon3	equ	0xFF0
  3149                           postinc0	equ	0xFEE
  3150                           wreg	equ	0xFE8
  3151                           postinc1	equ	0xFE6
  3152                           postdec1	equ	0xFE5
  3153                           fsr1h	equ	0xFE2
  3154                           fsr1l	equ	0xFE1
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function _strncpy *****************
  3162 ;; Defined at:
  3163 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strncpy.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  to              2    6[BANK0 ] PTR unsigned char 
  3166 ;;		 -> prev_set(40), 
  3167 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  3168 ;;		 -> final_set(40), 
  3169 ;;  size            2   10[BANK0 ] unsigned int 
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;  cp              2   12[BANK0 ] PTR unsigned char 
  3172 ;;		 -> prev_set(40), 
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  2    6[BANK0 ] PTR unsigned char 
  3175 ;; Registers used:
  3176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3182 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;Total ram usage:        8 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    4
  3189 ;; This function calls:
  3190 ;;		Nothing
  3191 ;; This function is called by:
  3192 ;;		_store_prev
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text2
  3197  002D1C                     __ptext2:
  3198                           	opt stack 0
  3199  002D1C                     _strncpy:
  3200                           	opt stack 25
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;incstack = 0
  3204  002D1C  C0EB  F0F1         	movff	strncpy@to,strncpy@cp
  3205  002D20  C0EC  F0F2         	movff	strncpy@to+1,strncpy@cp+1
  3206  002D24  D015               	goto	l1238
  3207  002D26  0100               	movlb	0	; () banked
  3208  002D28  07EF               	decf	strncpy@size& (0+255),f,b
  3209  002D2A  A0D8               	btfss	status,0,c
  3210  002D2C  07F0               	decf	(strncpy@size+1)& (0+255),f,b
  3211                           
  3212                           ; BSR set to: 0
  3213  002D2E  C0ED  FFD9         	movff	strncpy@from,fsr2l
  3214  002D32  C0EE  FFDA         	movff	strncpy@from+1,fsr2h
  3215  002D36  4BED               	infsnz	strncpy@from& (0+255),f,b
  3216  002D38  2BEE               	incf	(strncpy@from+1)& (0+255),f,b
  3217  002D3A  C0F1  FFE1         	movff	strncpy@cp,fsr1l
  3218  002D3E  C0F2  FFE2         	movff	strncpy@cp+1,fsr1h
  3219  002D42  4BF1               	infsnz	strncpy@cp& (0+255),f,b
  3220  002D44  2BF2               	incf	(strncpy@cp+1)& (0+255),f,b
  3221  002D46  CFDF FFE7          	movff	indf2,indf1
  3222  002D4A  50E7               	movf	indf1,w,c
  3223  002D4C  B4D8               	btfsc	status,2,c
  3224  002D4E  D00E               	goto	l1240
  3225  002D50                     l1238:
  3226                           
  3227                           ; BSR set to: 0
  3228                           
  3229                           ; BSR set to: 0
  3230  002D50  0100               	movlb	0	; () banked
  3231  002D52  51EF               	movf	strncpy@size& (0+255),w,b
  3232  002D54  11F0               	iorwf	(strncpy@size+1)& (0+255),w,b
  3233  002D56  B4D8               	btfsc	status,2,c
  3234  002D58  D009               	goto	l1240
  3235  002D5A  D7E5               	goto	l1237
  3236  002D5C                     l4604:
  3237                           
  3238                           ; BSR set to: 0
  3239  002D5C  C0F1  FFD9         	movff	strncpy@cp,fsr2l
  3240  002D60  C0F2  FFDA         	movff	strncpy@cp+1,fsr2h
  3241  002D64  0E00               	movlw	0
  3242  002D66  6EDF               	movwf	indf2,c
  3243                           
  3244                           ; BSR set to: 0
  3245  002D68  4BF1               	infsnz	strncpy@cp& (0+255),f,b
  3246  002D6A  2BF2               	incf	(strncpy@cp+1)& (0+255),f,b
  3247  002D6C                     l1240:
  3248                           
  3249                           ; BSR set to: 0
  3250                           
  3251                           ; BSR set to: 0
  3252  002D6C  07EF               	decf	strncpy@size& (0+255),f,b
  3253  002D6E  A0D8               	btfss	status,0,c
  3254  002D70  07F0               	decf	(strncpy@size+1)& (0+255),f,b
  3255  002D72  29EF               	incf	strncpy@size& (0+255),w,b
  3256  002D74  E1F3               	bnz	l4604
  3257  002D76  29F0               	incf	(strncpy@size+1)& (0+255),w,b
  3258  002D78  B4D8               	btfsc	status,2,c
  3259  002D7A  0012               	return	
  3260  002D7C  D7EF               	goto	l1241
  3261  002D7E                     __end_of_strncpy:
  3262                           	opt stack 0
  3263                           tblptru	equ	0xFF8
  3264                           tblptrh	equ	0xFF7
  3265                           tblptrl	equ	0xFF6
  3266                           tablat	equ	0xFF5
  3267                           intcon	equ	0xFF2
  3268                           intcon3	equ	0xFF0
  3269                           postinc0	equ	0xFEE
  3270                           wreg	equ	0xFE8
  3271                           indf1	equ	0xFE7
  3272                           postinc1	equ	0xFE6
  3273                           postdec1	equ	0xFE5
  3274                           fsr1h	equ	0xFE2
  3275                           fsr1l	equ	0xFE1
  3276                           indf2	equ	0xFDF
  3277                           postinc2	equ	0xFDE
  3278                           postdec2	equ	0xFDD
  3279                           fsr2h	equ	0xFDA
  3280                           fsr2l	equ	0xFD9
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function ___wmul *****************
  3284 ;; Defined at:
  3285 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3288 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  product         2    4[BANK0 ] unsigned int 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  2    0[BANK0 ] unsigned int 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0, prodl, prodh
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3300 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;Total ram usage:        6 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    4
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_main
  3311 ;;		_store_prev
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text3
  3316  0030F8                     __ptext3:
  3317                           	opt stack 0
  3318  0030F8                     ___wmul:
  3319                           	opt stack 25
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;incstack = 0
  3323  0030F8  0100               	movlb	0	; () banked
  3324  0030FA  51E5               	movf	___wmul@multiplier& (0+255),w,b
  3325  0030FC  03E7               	mulwf	___wmul@multiplicand& (0+255),b
  3326  0030FE  CFF3 F0E9          	movff	prodl,___wmul@product
  3327  003102  CFF4 F0EA          	movff	prodh,___wmul@product+1
  3328  003106  51E5               	movf	___wmul@multiplier& (0+255),w,b
  3329  003108  03E8               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3330  00310A  50F3               	movf	prodl,w,c
  3331  00310C  27EA               	addwf	(___wmul@product+1)& (0+255),f,b
  3332  00310E  51E6               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3333  003110  03E7               	mulwf	___wmul@multiplicand& (0+255),b
  3334  003112  50F3               	movf	prodl,w,c
  3335  003114  27EA               	addwf	(___wmul@product+1)& (0+255),f,b
  3336                           
  3337                           ; BSR set to: 0
  3338  003116  C0E9  F0E5         	movff	___wmul@product,?___wmul
  3339  00311A  C0EA  F0E6         	movff	___wmul@product+1,?___wmul+1
  3340  00311E  0012               	return	
  3341  003120                     __end_of___wmul:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           prodh	equ	0xFF4
  3348                           prodl	equ	0xFF3
  3349                           intcon	equ	0xFF2
  3350                           intcon3	equ	0xFF0
  3351                           postinc0	equ	0xFEE
  3352                           wreg	equ	0xFE8
  3353                           indf1	equ	0xFE7
  3354                           postinc1	equ	0xFE6
  3355                           postdec1	equ	0xFE5
  3356                           fsr1h	equ	0xFE2
  3357                           fsr1l	equ	0xFE1
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function _read_IR *****************
  3366 ;; Defined at:
  3367 ;;		line 339 in file "DCmotor.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  input           1    7[BANK0 ] unsigned char 
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  2    3[BANK0 ] int 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3381 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;Total ram usage:        5 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    5
  3388 ;; This function calls:
  3389 ;;		_servoRotate0
  3390 ;;		_servoRotate180
  3391 ;; This function is called by:
  3392 ;;		_main
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           	psect	text4
  3397  002B44                     __ptext4:
  3398                           	opt stack 0
  3399  002B44                     _read_IR:
  3400                           	opt stack 25
  3401                           
  3402                           ;DCmotor.c: 342: servoRotate180();
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;incstack = 0
  3406                           ;DCmotor.c: 340: while(1){
  3407  002B44  EC87  F017         	call	_servoRotate180	;wreg free
  3408                           
  3409                           ;DCmotor.c: 343: _delay((unsigned long)((200)*(40000000/4000.0)));
  3410  002B48  0E0B               	movlw	11
  3411  002B4A  0100               	movlb	0	; () banked
  3412  002B4C  6FEB               	movwf	(??_read_IR+1)& (0+255),b
  3413  002B4E  0E26               	movlw	38
  3414  002B50  6FEA               	movwf	??_read_IR& (0+255),b
  3415  002B52  0E5D               	movlw	93
  3416  002B54                     u4627:
  3417  002B54  2EE8               	decfsz	wreg,f,c
  3418  002B56  D7FE               	bra	u4627
  3419  002B58  2FEA               	decfsz	??_read_IR& (0+255),f,b
  3420  002B5A  D7FC               	bra	u4627
  3421  002B5C  2FEB               	decfsz	(??_read_IR+1)& (0+255),f,b
  3422  002B5E  D7FA               	bra	u4627
  3423  002B60  D000               	nop2	
  3424                           
  3425                           ;DCmotor.c: 344: servoRotate0();
  3426  002B62  ECD1  F017         	call	_servoRotate0	;wreg free
  3427                           
  3428                           ;DCmotor.c: 345: _delay((unsigned long)((200)*(40000000/4000.0)));
  3429  002B66  0E0B               	movlw	11
  3430  002B68  0100               	movlb	0	; () banked
  3431  002B6A  6FEB               	movwf	(??_read_IR+1)& (0+255),b
  3432  002B6C  0E26               	movlw	38
  3433  002B6E  6FEA               	movwf	??_read_IR& (0+255),b
  3434  002B70  0E5D               	movlw	93
  3435  002B72                     u4637:
  3436  002B72  2EE8               	decfsz	wreg,f,c
  3437  002B74  D7FE               	bra	u4637
  3438  002B76  2FEA               	decfsz	??_read_IR& (0+255),f,b
  3439  002B78  D7FC               	bra	u4637
  3440  002B7A  2FEB               	decfsz	(??_read_IR+1)& (0+255),f,b
  3441  002B7C  D7FA               	bra	u4637
  3442  002B7E  D000               	nop2	
  3443                           
  3444                           ;DCmotor.c: 346: TRISAbits.RA4 = 1;
  3445  002B80  8892               	bsf	3986,4,c	;volatile
  3446                           
  3447                           ;DCmotor.c: 347: unsigned char input = PORTAbits.RA4;
  3448  002B82  0E00               	movlw	0
  3449  002B84  B880               	btfsc	3968,4,c	;volatile
  3450  002B86  0E01               	movlw	1
  3451  002B88  0100               	movlb	0	; () banked
  3452  002B8A  6FEC               	movwf	read_IR@input& (0+255),b
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;DCmotor.c: 352: if (array[input] == '1'){
  3456  002B8C  51EC               	movf	read_IR@input& (0+255),w,b
  3457  002B8E  0D01               	mullw	1
  3458  002B90  0E6A               	movlw	low _array
  3459  002B92  24F3               	addwf	prodl,w,c
  3460  002B94  6EF6               	movwf	tblptrl,c
  3461  002B96  0EFE               	movlw	high _array
  3462  002B98  20F4               	addwfc	prodh,w,c
  3463  002B9A  6EF7               	movwf	tblptrh,c
  3464  002B9C                     	if	1	;There are 3 active tblptr bytes
  3465  002B9C  6AF8               	clrf	tblptru,c
  3466  002B9E  0E00               	movlw	low (__mediumconst shr (0+16))
  3467  002BA0  22F8               	addwfc	tblptru,f,c
  3468  002BA2                     	endif
  3469  002BA2  0008               	tblrd		*
  3470  002BA4  50F5               	movf	tablat,w,c
  3471  002BA6  0A31               	xorlw	49
  3472  002BA8  A4D8               	btfss	status,2,c
  3473  002BAA  D009               	goto	l481
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;DCmotor.c: 353: white_tape = 1;
  3477  002BAC  0E00               	movlw	0
  3478  002BAE  6E6E               	movwf	_white_tape+1,c
  3479  002BB0  0E01               	movlw	1
  3480  002BB2  6E6D               	movwf	_white_tape,c
  3481                           
  3482                           ;DCmotor.c: 354: return 1;
  3483  002BB4  0E00               	movlw	0
  3484  002BB6  6FE9               	movwf	(?_read_IR+1)& (0+255),b
  3485  002BB8  0E01               	movlw	1
  3486  002BBA  6FE8               	movwf	?_read_IR& (0+255),b
  3487                           
  3488                           ; BSR set to: 0
  3489  002BBC  0012               	return	
  3490  002BBE                     l481:
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;DCmotor.c: 356: else{
  3494                           ;DCmotor.c: 357: return 0;
  3495                           
  3496                           ; BSR set to: 0
  3497  002BBE  0E00               	movlw	0
  3498  002BC0  6FE9               	movwf	(?_read_IR+1)& (0+255),b
  3499  002BC2  0E00               	movlw	0
  3500  002BC4  D7FA               	goto	L3
  3501  002BC6                     __end_of_read_IR:
  3502                           	opt stack 0
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           intcon	equ	0xFF2
  3510                           intcon3	equ	0xFF0
  3511                           postinc0	equ	0xFEE
  3512                           wreg	equ	0xFE8
  3513                           indf1	equ	0xFE7
  3514                           postinc1	equ	0xFE6
  3515                           postdec1	equ	0xFE5
  3516                           fsr1h	equ	0xFE2
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _servoRotate180 *****************
  3526 ;; Defined at:
  3527 ;;		line 106 in file "DCmotor.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  i               2    1[BANK0 ] unsigned int 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      void 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;Total ram usage:        3 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    4
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_main
  3552 ;;		_read_IR
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text5
  3557  002F0E                     __ptext5:
  3558                           	opt stack 0
  3559  002F0E                     _servoRotate180:
  3560                           	opt stack 26
  3561                           
  3562                           ;DCmotor.c: 108: unsigned int i;
  3563                           ;DCmotor.c: 109: for(i=0;i<50;i++)
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;incstack = 0
  3567  002F0E  0E00               	movlw	0
  3568  002F10  0100               	movlb	0	; () banked
  3569  002F12  6FE7               	movwf	(servoRotate180@i+1)& (0+255),b
  3570  002F14  0E00               	movlw	0
  3571  002F16  6FE6               	movwf	servoRotate180@i& (0+255),b
  3572  002F18                     l4582:
  3573                           
  3574                           ; BSR set to: 0
  3575  002F18  51E7               	movf	(servoRotate180@i+1)& (0+255),w,b
  3576  002F1A  E11D               	bnz	l399
  3577  002F1C  0E32               	movlw	50
  3578  002F1E  5DE6               	subwf	servoRotate180@i& (0+255),w,b
  3579  002F20  B0D8               	btfsc	status,0,c
  3580  002F22  0012               	return	
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;DCmotor.c: 110: {
  3584                           ;DCmotor.c: 111: LATDbits.LATD1 = 1;
  3585                           
  3586                           ; BSR set to: 0
  3587  002F24  828C               	bsf	3980,1,c	;volatile
  3588                           
  3589                           ;DCmotor.c: 112: TRISDbits.RD1 = 0;
  3590  002F26  9295               	bcf	3989,1,c	;volatile
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;DCmotor.c: 113: _delay((unsigned long)((2200)*(40000000/4000000.0)));
  3594  002F28  0E1D               	movlw	29
  3595  002F2A  0100               	movlb	0	; () banked
  3596  002F2C  6FE5               	movwf	??_servoRotate180& (0+255),b
  3597  002F2E  0E91               	movlw	145
  3598  002F30                     u4647:
  3599  002F30  2EE8               	decfsz	wreg,f,c
  3600  002F32  D7FE               	bra	u4647
  3601  002F34  2FE5               	decfsz	??_servoRotate180& (0+255),f,b
  3602  002F36  D7FC               	bra	u4647
  3603                           
  3604                           ;DCmotor.c: 114: LATDbits.LATD1 = 0;
  3605  002F38  928C               	bcf	3980,1,c	;volatile
  3606                           
  3607                           ;DCmotor.c: 115: TRISDbits.RD1 = 0;
  3608  002F3A  9295               	bcf	3989,1,c	;volatile
  3609                           
  3610                           ;DCmotor.c: 116: _delay((unsigned long)((17800)*(40000000/4000000.0)));
  3611  002F3C  0EE8               	movlw	232
  3612  002F3E  0100               	movlb	0	; () banked
  3613  002F40  6FE5               	movwf	??_servoRotate180& (0+255),b
  3614  002F42  0E29               	movlw	41
  3615  002F44                     u4657:
  3616  002F44  2EE8               	decfsz	wreg,f,c
  3617  002F46  D7FE               	bra	u4657
  3618  002F48  2FE5               	decfsz	??_servoRotate180& (0+255),f,b
  3619  002F4A  D7FC               	bra	u4657
  3620  002F4C  D000               	nop2	
  3621  002F4E  0100               	movlb	0	; () banked
  3622  002F50  4BE6               	infsnz	servoRotate180@i& (0+255),f,b
  3623  002F52  2BE7               	incf	(servoRotate180@i+1)& (0+255),f,b
  3624  002F54  D7E1               	goto	l4582
  3625  002F56                     l399:
  3626                           
  3627                           ; BSR set to: 0
  3628  002F56  0012               	return		;funcret
  3629  002F58                     __end_of_servoRotate180:
  3630                           	opt stack 0
  3631                           tblptru	equ	0xFF8
  3632                           tblptrh	equ	0xFF7
  3633                           tblptrl	equ	0xFF6
  3634                           tablat	equ	0xFF5
  3635                           prodh	equ	0xFF4
  3636                           prodl	equ	0xFF3
  3637                           intcon	equ	0xFF2
  3638                           intcon3	equ	0xFF0
  3639                           postinc0	equ	0xFEE
  3640                           wreg	equ	0xFE8
  3641                           indf1	equ	0xFE7
  3642                           postinc1	equ	0xFE6
  3643                           postdec1	equ	0xFE5
  3644                           fsr1h	equ	0xFE2
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function _servoRotate0 *****************
  3654 ;; Defined at:
  3655 ;;		line 124 in file "DCmotor.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;		None
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      void 
  3662 ;; Registers used:
  3663 ;;		wreg, status,2, status,0
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;Total ram usage:        1 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    4
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_main
  3680 ;;		_read_IR
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text6
  3685  002FA2                     __ptext6:
  3686                           	opt stack 0
  3687  002FA2                     _servoRotate0:
  3688                           	opt stack 26
  3689                           
  3690                           ;DCmotor.c: 126: for (i = 0; i<50; i++){
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;incstack = 0
  3694  002FA2  0E00               	movlw	0
  3695  002FA4  6E2C               	movwf	_i+1,c
  3696  002FA6  0E00               	movlw	0
  3697  002FA8  6E2B               	movwf	_i,c
  3698  002FAA                     l4568:
  3699  002FAA  502C               	movf	_i+1,w,c
  3700  002FAC  E11D               	bnz	l404
  3701  002FAE  0E32               	movlw	50
  3702  002FB0  5C2B               	subwf	_i,w,c
  3703  002FB2  B0D8               	btfsc	status,0,c
  3704  002FB4  0012               	return	
  3705                           
  3706                           ;DCmotor.c: 127: LATDbits.LATD1 = 1;
  3707  002FB6  828C               	bsf	3980,1,c	;volatile
  3708                           
  3709                           ;DCmotor.c: 128: TRISDbits.RD1 = 0;
  3710  002FB8  9295               	bcf	3989,1,c	;volatile
  3711                           
  3712                           ;DCmotor.c: 129: _delay((unsigned long)((800)*(40000000/4000000.0)));
  3713  002FBA  0E0B               	movlw	11
  3714  002FBC  0100               	movlb	0	; () banked
  3715  002FBE  6FE5               	movwf	??_servoRotate0& (0+255),b
  3716  002FC0  0E62               	movlw	98
  3717  002FC2                     u4667:
  3718  002FC2  2EE8               	decfsz	wreg,f,c
  3719  002FC4  D7FE               	bra	u4667
  3720  002FC6  2FE5               	decfsz	??_servoRotate0& (0+255),f,b
  3721  002FC8  D7FC               	bra	u4667
  3722  002FCA  F000               	nop	
  3723                           
  3724                           ;DCmotor.c: 130: LATDbits.LATD1 = 0;
  3725  002FCC  928C               	bcf	3980,1,c	;volatile
  3726                           
  3727                           ;DCmotor.c: 131: TRISDbits.RD1 = 0;
  3728  002FCE  9295               	bcf	3989,1,c	;volatile
  3729                           
  3730                           ;DCmotor.c: 132: _delay((unsigned long)((19200)*(40000000/4000000.0)));
  3731  002FD0  0EFA               	movlw	250
  3732  002FD2  0100               	movlb	0	; () banked
  3733  002FD4  6FE5               	movwf	??_servoRotate0& (0+255),b
  3734  002FD6  0E58               	movlw	88
  3735  002FD8                     u4677:
  3736  002FD8  2EE8               	decfsz	wreg,f,c
  3737  002FDA  D7FE               	bra	u4677
  3738  002FDC  2FE5               	decfsz	??_servoRotate0& (0+255),f,b
  3739  002FDE  D7FC               	bra	u4677
  3740  002FE0  F000               	nop	
  3741  002FE2  4A2B               	infsnz	_i,f,c
  3742  002FE4  2A2C               	incf	_i+1,f,c
  3743  002FE6  D7E1               	goto	l4568
  3744  002FE8                     l404:
  3745  002FE8  0012               	return		;funcret
  3746  002FEA                     __end_of_servoRotate0:
  3747                           	opt stack 0
  3748                           tblptru	equ	0xFF8
  3749                           tblptrh	equ	0xFF7
  3750                           tblptrl	equ	0xFF6
  3751                           tablat	equ	0xFF5
  3752                           prodh	equ	0xFF4
  3753                           prodl	equ	0xFF3
  3754                           intcon	equ	0xFF2
  3755                           intcon3	equ	0xFF0
  3756                           postinc0	equ	0xFEE
  3757                           wreg	equ	0xFE8
  3758                           indf1	equ	0xFE7
  3759                           postinc1	equ	0xFE6
  3760                           postdec1	equ	0xFE5
  3761                           fsr1h	equ	0xFE2
  3762                           fsr1l	equ	0xFE1
  3763                           indf2	equ	0xFDF
  3764                           postinc2	equ	0xFDE
  3765                           postdec2	equ	0xFDD
  3766                           fsr2h	equ	0xFDA
  3767                           fsr2l	equ	0xFD9
  3768                           status	equ	0xFD8
  3769                           
  3770 ;; *************** function _printf *****************
  3771 ;; Defined at:
  3772 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  3775 ;;		 -> STR_64(9), STR_63(12), STR_61(7), STR_59(3), 
  3776 ;;		 -> STR_58(11), STR_56(3), STR_55(9), STR_50(15), 
  3777 ;;		 -> STR_49(13), STR_48(11), STR_47(18), STR_46(3), 
  3778 ;;		 -> STR_45(2), prev_set(40), STR_44(5), STR_43(2), 
  3779 ;;		 -> STR_42(3), STR_41(12), STR_40(10), STR_39(10), 
  3780 ;;		 -> STR_38(5), STR_37(2), STR_36(3), STR_35(2), 
  3781 ;;		 -> STR_34(3), STR_33(4), STR_32(3), STR_31(4), 
  3782 ;;		 -> STR_30(3), STR_29(4), STR_28(3), STR_27(3), 
  3783 ;;		 -> STR_26(20), STR_25(2), STR_24(3), STR_23(2), 
  3784 ;;		 -> STR_22(3), STR_21(3), STR_20(4), STR_19(3), 
  3785 ;;		 -> STR_18(4), STR_17(3), STR_16(4), STR_15(3), 
  3786 ;;		 -> STR_14(4), STR_13(3), STR_12(3), STR_11(2), 
  3787 ;;		 -> STR_10(3), STR_9(2), STR_8(3), STR_7(5), 
  3788 ;;		 -> STR_6(17), STR_5(6), STR_4(8), STR_3(3), 
  3789 ;;		 -> STR_2(14), STR_1(15), 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  tmpval          4    0        struct .
  3792 ;;  val             2    6[BANK1 ] unsigned int 
  3793 ;;  cp              2    4[BANK1 ] PTR const unsigned char 
  3794 ;;		 -> STR_85(7), number(2), final_set(40), current_set(5), 
  3795 ;;  ap              2    2[BANK1 ] PTR void [1]
  3796 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3797 ;;  len             2    0        unsigned int 
  3798 ;;  c               1    8[BANK1 ] char 
  3799 ;;  prec            1    1[BANK1 ] char 
  3800 ;;  flag            1    0[BANK1 ] unsigned char 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  2   12[BANK0 ] int 
  3803 ;; Registers used:
  3804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3810 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Totals:         0      12       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;Total ram usage:       21 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    6
  3817 ;; This function calls:
  3818 ;;		___lwdiv
  3819 ;;		___lwmod
  3820 ;;		_putch
  3821 ;; This function is called by:
  3822 ;;		_main
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text7
  3827  002456                     __ptext7:
  3828                           	opt stack 0
  3829  002456                     _printf:
  3830                           	opt stack 24
  3831                           
  3832                           ;doprnt.c: 466: va_list ap;
  3833                           ;doprnt.c: 499: signed char c;
  3834                           ;doprnt.c: 506: signed char prec;
  3835                           ;doprnt.c: 508: unsigned char flag;
  3836                           ;doprnt.c: 523: union {
  3837                           ;doprnt.c: 524: unsigned long vd;
  3838                           ;doprnt.c: 525: double integ;
  3839                           ;doprnt.c: 526: } tmpval;
  3840                           ;doprnt.c: 528: unsigned int val;
  3841                           ;doprnt.c: 529: unsigned len;
  3842                           ;doprnt.c: 530: const char * cp;
  3843                           ;doprnt.c: 533: *ap = __va_start();
  3844                           
  3845                           ;incstack = 0
  3846  002456  0EF3               	movlw	low (?_printf+2)
  3847  002458  0101               	movlb	1	; () banked
  3848  00245A  6F82               	movwf	printf@ap& (0+255),b
  3849  00245C  0E00               	movlw	high (?_printf+2)
  3850  00245E  6F83               	movwf	(printf@ap+1)& (0+255),b
  3851                           
  3852                           ;doprnt.c: 536: while(c = *f++) {
  3853  002460  D0E6               	goto	u3800
  3854  002462                     
  3855                           ; BSR set to: 1
  3856                           ;doprnt.c: 538: if(c != '%')
  3857                           
  3858                           ; BSR set to: 1
  3859  002462  0E25               	movlw	37
  3860  002464  1988               	xorwf	printf@c& (0+255),w,b
  3861  002466  B4D8               	btfsc	status,2,c
  3862  002468  D004               	goto	l634
  3863                           
  3864                           ; BSR set to: 1
  3865                           ;doprnt.c: 540: {
  3866                           ;doprnt.c: 541: (putch(c) );
  3867  00246A  5188               	movf	printf@c& (0+255),w,b
  3868  00246C  ECC3  F018         	call	_putch
  3869                           
  3870                           ;doprnt.c: 542: continue;
  3871  002470  D0DE               	goto	u3800
  3872  002472                     l634:
  3873                           
  3874                           ;doprnt.c: 543: }
  3875                           ;doprnt.c: 548: flag = 0;
  3876  002472  0E00               	movlw	0
  3877  002474  0101               	movlb	1	; () banked
  3878  002476  6F80               	movwf	printf@flag& (0+255),b
  3879                           
  3880                           ;doprnt.c: 635: switch(c = *f++) {
  3881  002478  D045               	goto	l635
  3882  00247A                     
  3883                           ; BSR set to: 1
  3884                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3885                           
  3886                           ; BSR set to: 1
  3887  00247A  C182  FFD9         	movff	printf@ap,fsr2l
  3888  00247E  C183  FFDA         	movff	printf@ap+1,fsr2h
  3889  002482  CFDE F184          	movff	postinc2,printf@cp
  3890  002486  CFDD F185          	movff	postdec2,printf@cp+1
  3891                           
  3892                           ; BSR set to: 1
  3893  00248A  0E02               	movlw	2
  3894  00248C  2782               	addwf	printf@ap& (0+255),f,b
  3895  00248E  0E00               	movlw	0
  3896  002490  2383               	addwfc	(printf@ap+1)& (0+255),f,b
  3897                           
  3898                           ; BSR set to: 1
  3899                           ;doprnt.c: 740: if(!cp)
  3900  002492  5184               	movf	printf@cp& (0+255),w,b
  3901  002494  1185               	iorwf	(printf@cp+1)& (0+255),w,b
  3902  002496  A4D8               	btfss	status,2,c
  3903  002498  D01B               	goto	l643
  3904                           
  3905                           ; BSR set to: 1
  3906                           ;doprnt.c: 741: cp = "(null)";
  3907  00249A  0E99               	movlw	low STR_85
  3908  00249C  6F84               	movwf	printf@cp& (0+255),b
  3909  00249E  0EFF               	movlw	high STR_85
  3910  0024A0  6F85               	movwf	(printf@cp+1)& (0+255),b
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;doprnt.c: 777: while(*cp)
  3914  0024A2  D016               	goto	l643
  3915  0024A4                     
  3916                           ;doprnt.c: 778: (putch(*cp++) );
  3917                           
  3918                           ; BSR set to: 1
  3919  0024A4  C184  FFF6         	movff	printf@cp,tblptrl
  3920  0024A8  C185  FFF7         	movff	printf@cp+1,tblptrh
  3921  0024AC  0E00               	movlw	low (__mediumconst shr (0+16))
  3922  0024AE  6EF8               	movwf	tblptru,c
  3923  0024B0  0E0F               	movlw	(high __ramtop+-1)
  3924  0024B2  64F7               	cpfsgt	tblptrh,c
  3925  0024B4  D003               	bra	u3717
  3926  0024B6  0008               	tblrd		*
  3927  0024B8  50F5               	movf	tablat,w,c
  3928  0024BA  D005               	bra	u3710
  3929  0024BC                     u3717:
  3930  0024BC  CFF6 FFE9          	movff	tblptrl,fsr0l
  3931  0024C0  CFF7 FFEA          	movff	tblptrh,fsr0h
  3932  0024C4  50EF               	movf	indf0,w,c
  3933  0024C6                     u3710:
  3934  0024C6  ECC3  F018         	call	_putch
  3935  0024CA  0101               	movlb	1	; () banked
  3936  0024CC  4B84               	infsnz	printf@cp& (0+255),f,b
  3937  0024CE  2B85               	incf	(printf@cp+1)& (0+255),f,b
  3938  0024D0                     l643:
  3939                           
  3940                           ; BSR set to: 1
  3941                           
  3942                           ; BSR set to: 1
  3943  0024D0  C184  FFF6         	movff	printf@cp,tblptrl
  3944  0024D4  C185  FFF7         	movff	printf@cp+1,tblptrh
  3945  0024D8  0E00               	movlw	low (__mediumconst shr (0+16))
  3946  0024DA  6EF8               	movwf	tblptru,c
  3947  0024DC  0E0F               	movlw	(high __ramtop+-1)
  3948  0024DE  64F7               	cpfsgt	tblptrh,c
  3949  0024E0  D003               	bra	u3727
  3950  0024E2  0008               	tblrd		*
  3951  0024E4  50F5               	movf	tablat,w,c
  3952  0024E6  D005               	bra	u3720
  3953  0024E8                     u3727:
  3954  0024E8  CFF6 FFE9          	movff	tblptrl,fsr0l
  3955  0024EC  CFF7 FFEA          	movff	tblptrh,fsr0h
  3956  0024F0  50EF               	movf	indf0,w,c
  3957  0024F2                     u3720:
  3958  0024F2  0900               	iorlw	0
  3959  0024F4  B4D8               	btfsc	status,2,c
  3960  0024F6  D09B               	goto	u3800
  3961  0024F8  D7D5               	goto	l644
  3962  0024FA                     
  3963                           ;doprnt.c: 809: (putch(c) );
  3964  0024FA  0101               	movlb	1	; () banked
  3965  0024FC  5188               	movf	printf@c& (0+255),w,b
  3966  0024FE  ECC3  F018         	call	_putch
  3967                           
  3968                           ;doprnt.c: 810: continue;
  3969  002502  D095               	goto	u3800
  3970  002504                     l635:
  3971  002504  0100               	movlb	0	; () banked
  3972  002506  51F1               	movf	printf@f& (0+255),w,b
  3973  002508  6FFB               	movwf	??_printf& (0+255),b
  3974  00250A  51F2               	movf	(printf@f+1)& (0+255),w,b
  3975  00250C  6FFC               	movwf	(??_printf+1)& (0+255),b
  3976  00250E  4BF1               	infsnz	printf@f& (0+255),f,b
  3977  002510  2BF2               	incf	(printf@f+1)& (0+255),f,b
  3978  002512  C0FB  FFF6         	movff	??_printf,tblptrl
  3979  002516  C0FC  FFF7         	movff	??_printf+1,tblptrh
  3980  00251A  0E00               	movlw	low (__mediumconst shr (0+16))
  3981  00251C  6EF8               	movwf	tblptru,c
  3982  00251E  0E0F               	movlw	(high __ramtop+-1)
  3983  002520  64F7               	cpfsgt	tblptrh,c
  3984  002522  D003               	bra	u3747
  3985  002524  0008               	tblrd		*
  3986  002526  50F5               	movf	tablat,w,c
  3987  002528  D005               	bra	u3740
  3988  00252A                     u3747:
  3989  00252A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3990  00252E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3991  002532  50EF               	movf	indf0,w,c
  3992  002534                     u3740:
  3993  002534  0101               	movlb	1	; () banked
  3994  002536  6F88               	movwf	printf@c& (0+255),b
  3995  002538  5188               	movf	printf@c& (0+255),w,b
  3996                           
  3997                           ; Switch size 1, requested type "space"
  3998                           ; Number of cases is 4, Range of values is 0 to 115
  3999                           ; switch strategies available:
  4000                           ; Name         Instructions Cycles
  4001                           ; simple_byte           13     7 (average)
  4002                           ;	Chosen strategy is simple_byte
  4003  00253A  0A00               	xorlw	0	; case 0
  4004  00253C  B4D8               	btfsc	status,2,c
  4005  00253E  0012               	return	
  4006  002540  0A64               	xorlw	100	; case 100
  4007  002542  B4D8               	btfsc	status,2,c
  4008  002544  D007               	goto	l640
  4009  002546  0A0D               	xorlw	13	; case 105
  4010  002548  B4D8               	btfsc	status,2,c
  4011  00254A  D004               	goto	l640
  4012  00254C  0A1A               	xorlw	26	; case 115
  4013  00254E  B4D8               	btfsc	status,2,c
  4014  002550  D794               	goto	l641
  4015  002552  D7D3               	goto	l646
  4016  002554                     l640:
  4017                           
  4018                           ;doprnt.c: 1253: {
  4019                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4020                           
  4021                           ; BSR set to: 1
  4022  002554  C182  FFD9         	movff	printf@ap,fsr2l
  4023  002558  C183  FFDA         	movff	printf@ap+1,fsr2h
  4024  00255C  CFDE F186          	movff	postinc2,printf@val
  4025  002560  CFDD F187          	movff	postdec2,printf@val+1
  4026  002564  0E02               	movlw	2
  4027  002566  0101               	movlb	1	; () banked
  4028  002568  2782               	addwf	printf@ap& (0+255),f,b
  4029  00256A  0E00               	movlw	0
  4030  00256C  2383               	addwfc	(printf@ap+1)& (0+255),f,b
  4031                           
  4032                           ; BSR set to: 1
  4033                           ;doprnt.c: 1261: if((int)val < 0) {
  4034  00256E  AF87               	btfss	(printf@val+1)& (0+255),7,b
  4035  002570  D006               	goto	l647
  4036                           
  4037                           ; BSR set to: 1
  4038                           ;doprnt.c: 1262: flag |= 0x03;
  4039  002572  0E03               	movlw	3
  4040  002574  1380               	iorwf	printf@flag& (0+255),f,b
  4041                           
  4042                           ; BSR set to: 1
  4043                           ;doprnt.c: 1263: val = -val;
  4044  002576  6D86               	negf	printf@val& (0+255),b
  4045  002578  1F87               	comf	(printf@val+1)& (0+255),f,b
  4046  00257A  B0D8               	btfsc	status,0,c
  4047  00257C  2B87               	incf	(printf@val+1)& (0+255),f,b
  4048  00257E                     l647:
  4049                           
  4050                           ; BSR set to: 1
  4051                           ;doprnt.c: 1264: }
  4052                           ;doprnt.c: 1266: }
  4053                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4054                           
  4055                           ; BSR set to: 1
  4056  00257E  0E01               	movlw	1
  4057  002580  6F88               	movwf	printf@c& (0+255),b
  4058  002582                     l4710:
  4059                           
  4060                           ; BSR set to: 1
  4061  002582  0E05               	movlw	5
  4062  002584  1988               	xorwf	printf@c& (0+255),w,b
  4063  002586  B4D8               	btfsc	status,2,c
  4064  002588  D015               	goto	u3780
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;doprnt.c: 1306: if(val < dpowers[c])
  4068                           
  4069                           ; BSR set to: 1
  4070                           
  4071                           ; BSR set to: 1
  4072  00258A  5188               	movf	printf@c& (0+255),w,b
  4073  00258C  0D02               	mullw	2
  4074  00258E  0E60               	movlw	low _dpowers
  4075  002590  24F3               	addwf	prodl,w,c
  4076  002592  6EF6               	movwf	tblptrl,c
  4077  002594  0EFE               	movlw	high _dpowers
  4078  002596  20F4               	addwfc	prodh,w,c
  4079  002598  6EF7               	movwf	tblptrh,c
  4080  00259A                     	if	1	;There are 3 active tblptr bytes
  4081  00259A  6AF8               	clrf	tblptru,c
  4082  00259C  0E00               	movlw	low (__mediumconst shr (0+16))
  4083  00259E  22F8               	addwfc	tblptru,f,c
  4084  0025A0                     	endif
  4085  0025A0  0009               	tblrd		*+
  4086  0025A2  50F5               	movf	tablat,w,c
  4087  0025A4  5D86               	subwf	printf@val& (0+255),w,b
  4088  0025A6  0009               	tblrd		*+
  4089  0025A8  50F5               	movf	tablat,w,c
  4090  0025AA  5987               	subwfb	(printf@val+1)& (0+255),w,b
  4091  0025AC  A0D8               	btfss	status,0,c
  4092  0025AE  D002               	goto	u3780
  4093                           
  4094                           ; BSR set to: 1
  4095                           
  4096                           ; BSR set to: 1
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;doprnt.c: 1307: break;
  4100  0025B0  2B88               	incf	printf@c& (0+255),f,b
  4101  0025B2  D7E7               	goto	l4710
  4102  0025B4                     u3780:
  4103                           
  4104                           ; BSR set to: 1
  4105                           ;doprnt.c: 1422: {
  4106                           ;doprnt.c: 1438: if(flag & 0x03)
  4107                           
  4108                           ; BSR set to: 1
  4109  0025B4  C180  F0FB         	movff	printf@flag,??_printf
  4110  0025B8  0E03               	movlw	3
  4111  0025BA  0100               	movlb	0	; () banked
  4112  0025BC  17FB               	andwf	??_printf& (0+255),f,b
  4113  0025BE  B4D8               	btfsc	status,2,c
  4114  0025C0  D003               	goto	l651
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;doprnt.c: 1439: (putch('-') );
  4118  0025C2  0E2D               	movlw	45
  4119  0025C4  ECC3  F018         	call	_putch
  4120  0025C8                     l651:
  4121                           
  4122                           ;doprnt.c: 1469: }
  4123                           ;doprnt.c: 1472: prec = c;
  4124  0025C8  C188  F181         	movff	printf@c,printf@prec
  4125                           
  4126                           ;doprnt.c: 1474: while(prec--) {
  4127  0025CC  D02B               	goto	l652
  4128  0025CE                     
  4129                           ;doprnt.c: 1478: {
  4130                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4131  0025CE  0101               	movlb	1	; () banked
  4132  0025D0  5181               	movf	printf@prec& (0+255),w,b
  4133  0025D2  0D02               	mullw	2
  4134  0025D4  0E60               	movlw	low _dpowers
  4135  0025D6  24F3               	addwf	prodl,w,c
  4136  0025D8  6EF6               	movwf	tblptrl,c
  4137  0025DA  0EFE               	movlw	high _dpowers
  4138  0025DC  20F4               	addwfc	prodh,w,c
  4139  0025DE  6EF7               	movwf	tblptrh,c
  4140  0025E0                     	if	1	;There are 3 active tblptr bytes
  4141  0025E0  6AF8               	clrf	tblptru,c
  4142  0025E2  0E00               	movlw	low (__mediumconst shr (0+16))
  4143  0025E4  22F8               	addwfc	tblptru,f,c
  4144  0025E6                     	endif
  4145  0025E6  0009               	tblrd		*+
  4146  0025E8  CFF5 F0E7          	movff	tablat,___lwdiv@divisor
  4147  0025EC  000A               	tblrd		*-
  4148  0025EE  CFF5 F0E8          	movff	tablat,___lwdiv@divisor+1
  4149  0025F2  C186  F0E5         	movff	printf@val,___lwdiv@dividend
  4150  0025F6  C187  F0E6         	movff	printf@val+1,___lwdiv@dividend+1
  4151  0025FA  ECBF  F016         	call	___lwdiv	;wreg free
  4152  0025FE  C0E5  F0EC         	movff	?___lwdiv,___lwmod@dividend
  4153  002602  C0E6  F0ED         	movff	?___lwdiv+1,___lwmod@dividend+1
  4154  002606  0E00               	movlw	0
  4155  002608  0100               	movlb	0	; () banked
  4156  00260A  6FEF               	movwf	(___lwmod@divisor+1)& (0+255),b
  4157  00260C  0E0A               	movlw	10
  4158  00260E  6FEE               	movwf	___lwmod@divisor& (0+255),b
  4159  002610  EC18  F018         	call	___lwmod	;wreg free
  4160  002614  0100               	movlb	0	; () banked
  4161  002616  51EC               	movf	?___lwmod& (0+255),w,b
  4162  002618  0F30               	addlw	48
  4163  00261A  0101               	movlb	1	; () banked
  4164  00261C  6F88               	movwf	printf@c& (0+255),b
  4165                           
  4166                           ; BSR set to: 1
  4167                           ;doprnt.c: 1523: }
  4168                           ;doprnt.c: 1524: (putch(c) );
  4169  00261E  5188               	movf	printf@c& (0+255),w,b
  4170  002620  ECC3  F018         	call	_putch
  4171  002624                     l652:
  4172  002624  0101               	movlb	1	; () banked
  4173  002626  0781               	decf	printf@prec& (0+255),f,b
  4174  002628  2981               	incf	printf@prec& (0+255),w,b
  4175  00262A  A4D8               	btfss	status,2,c
  4176  00262C  D7D0               	goto	l653
  4177  00262E                     u3800:
  4178                           
  4179                           ; BSR set to: 1
  4180                           
  4181                           ; BSR set to: 1
  4182  00262E  0100               	movlb	0	; () banked
  4183  002630  51F1               	movf	printf@f& (0+255),w,b
  4184  002632  6FFB               	movwf	??_printf& (0+255),b
  4185  002634  51F2               	movf	(printf@f+1)& (0+255),w,b
  4186  002636  6FFC               	movwf	(??_printf+1)& (0+255),b
  4187  002638  4BF1               	infsnz	printf@f& (0+255),f,b
  4188  00263A  2BF2               	incf	(printf@f+1)& (0+255),f,b
  4189  00263C  C0FB  FFF6         	movff	??_printf,tblptrl
  4190  002640  C0FC  FFF7         	movff	??_printf+1,tblptrh
  4191  002644  0E00               	movlw	low (__mediumconst shr (0+16))
  4192  002646  6EF8               	movwf	tblptru,c
  4193  002648  0E0F               	movlw	(high __ramtop+-1)
  4194  00264A  64F7               	cpfsgt	tblptrh,c
  4195  00264C  D003               	bra	u3817
  4196  00264E  0008               	tblrd		*
  4197  002650  50F5               	movf	tablat,w,c
  4198  002652  D005               	bra	u3810
  4199  002654                     u3817:
  4200  002654  CFF6 FFE9          	movff	tblptrl,fsr0l
  4201  002658  CFF7 FFEA          	movff	tblptrh,fsr0h
  4202  00265C  50EF               	movf	indf0,w,c
  4203  00265E                     u3810:
  4204  00265E  0101               	movlb	1	; () banked
  4205  002660  6F88               	movwf	printf@c& (0+255),b
  4206  002662  5188               	movf	printf@c& (0+255),w,b
  4207  002664  B4D8               	btfsc	status,2,c
  4208  002666  0012               	return	
  4209  002668  D6FC               	goto	l633
  4210  00266A                     __end_of_printf:
  4211                           	opt stack 0
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           prodh	equ	0xFF4
  4217                           prodl	equ	0xFF3
  4218                           intcon	equ	0xFF2
  4219                           intcon3	equ	0xFF0
  4220                           indf0	equ	0xFEF
  4221                           postinc0	equ	0xFEE
  4222                           fsr0h	equ	0xFEA
  4223                           fsr0l	equ	0xFE9
  4224                           wreg	equ	0xFE8
  4225                           indf1	equ	0xFE7
  4226                           postinc1	equ	0xFE6
  4227                           postdec1	equ	0xFE5
  4228                           fsr1h	equ	0xFE2
  4229                           fsr1l	equ	0xFE1
  4230                           indf2	equ	0xFDF
  4231                           postinc2	equ	0xFDE
  4232                           postdec2	equ	0xFDD
  4233                           fsr2h	equ	0xFDA
  4234                           fsr2l	equ	0xFD9
  4235                           status	equ	0xFD8
  4236                           
  4237 ;; *************** function _putch *****************
  4238 ;; Defined at:
  4239 ;;		line 24 in file "lcd.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  data            1    wreg     unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  data            1    2[BANK0 ] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      void 
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, status,0, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;Total ram usage:        1 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    5
  4260 ;; This function calls:
  4261 ;;		_lcdNibble
  4262 ;; This function is called by:
  4263 ;;		_main
  4264 ;;		_printf
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text8
  4269  003186                     __ptext8:
  4270                           	opt stack 0
  4271  003186                     _putch:
  4272                           	opt stack 25
  4273                           
  4274                           ; BSR set to: 1
  4275                           ;incstack = 0
  4276                           ;putch@data stored from wreg
  4277  003186  0100               	movlb	0	; () banked
  4278  003188  6FE7               	movwf	putch@data& (0+255),b
  4279                           
  4280                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4281  00318A  848C               	bsf	3980,2,c	;volatile
  4282                           
  4283                           ;lcd.c: 33: lcdNibble(data);
  4284  00318C  0100               	movlb	0	; () banked
  4285  00318E  51E7               	movf	putch@data& (0+255),w,b
  4286  003190  EC60  F015         	call	_lcdNibble
  4287                           
  4288                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4289  003194  0EC8               	movlw	200
  4290  003196                     u4687:
  4291  003196  D000               	nop2	
  4292  003198  2EE8               	decfsz	wreg,f,c
  4293  00319A  D7FD               	bra	u4687
  4294  00319C  0012               	return		;funcret
  4295  00319E                     __end_of_putch:
  4296                           	opt stack 0
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           prodh	equ	0xFF4
  4302                           prodl	equ	0xFF3
  4303                           intcon	equ	0xFF2
  4304                           intcon3	equ	0xFF0
  4305                           indf0	equ	0xFEF
  4306                           postinc0	equ	0xFEE
  4307                           fsr0h	equ	0xFEA
  4308                           fsr0l	equ	0xFE9
  4309                           wreg	equ	0xFE8
  4310                           indf1	equ	0xFE7
  4311                           postinc1	equ	0xFE6
  4312                           postdec1	equ	0xFE5
  4313                           fsr1h	equ	0xFE2
  4314                           fsr1l	equ	0xFE1
  4315                           indf2	equ	0xFDF
  4316                           postinc2	equ	0xFDE
  4317                           postdec2	equ	0xFDD
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function ___lwmod *****************
  4323 ;; Defined at:
  4324 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  dividend        2    7[BANK0 ] unsigned int 
  4327 ;;  divisor         2    9[BANK0 ] unsigned int 
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  counter         1   11[BANK0 ] unsigned char 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  2    7[BANK0 ] unsigned int 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;Total ram usage:        5 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    4
  4346 ;; This function calls:
  4347 ;;		Nothing
  4348 ;; This function is called by:
  4349 ;;		_printf
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           	psect	text9
  4354  003030                     __ptext9:
  4355                           	opt stack 0
  4356  003030                     ___lwmod:
  4357                           	opt stack 25
  4358                           
  4359                           ;incstack = 0
  4360  003030  0100               	movlb	0	; () banked
  4361  003032  51EE               	movf	___lwmod@divisor& (0+255),w,b
  4362  003034  11EF               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4363  003036  B4D8               	btfsc	status,2,c
  4364  003038  D018               	goto	l1075
  4365                           
  4366                           ; BSR set to: 0
  4367  00303A  0E01               	movlw	1
  4368  00303C  6FF0               	movwf	___lwmod@counter& (0+255),b
  4369  00303E  D004               	goto	l1070
  4370  003040                     
  4371                           ; BSR set to: 0
  4372                           
  4373                           ; BSR set to: 0
  4374  003040  90D8               	bcf	status,0,c
  4375  003042  37EE               	rlcf	___lwmod@divisor& (0+255),f,b
  4376  003044  37EF               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4377  003046  2BF0               	incf	___lwmod@counter& (0+255),f,b
  4378  003048                     l1070:
  4379                           
  4380                           ; BSR set to: 0
  4381                           
  4382                           ; BSR set to: 0
  4383  003048  AFEF               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4384  00304A  D7FA               	goto	l1071
  4385  00304C                     u3670:
  4386                           
  4387                           ; BSR set to: 0
  4388                           
  4389                           ; BSR set to: 0
  4390                           
  4391                           ; BSR set to: 0
  4392  00304C  51EE               	movf	___lwmod@divisor& (0+255),w,b
  4393  00304E  5DEC               	subwf	___lwmod@dividend& (0+255),w,b
  4394  003050  51EF               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4395  003052  59ED               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4396  003054  A0D8               	btfss	status,0,c
  4397  003056  D004               	goto	l1074
  4398                           
  4399                           ; BSR set to: 0
  4400  003058  51EE               	movf	___lwmod@divisor& (0+255),w,b
  4401  00305A  5FEC               	subwf	___lwmod@dividend& (0+255),f,b
  4402  00305C  51EF               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4403  00305E  5BED               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4404  003060                     l1074:
  4405                           
  4406                           ; BSR set to: 0
  4407                           
  4408                           ; BSR set to: 0
  4409  003060  90D8               	bcf	status,0,c
  4410  003062  33EF               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4411  003064  33EE               	rrcf	___lwmod@divisor& (0+255),f,b
  4412                           
  4413                           ; BSR set to: 0
  4414  003066  2FF0               	decfsz	___lwmod@counter& (0+255),f,b
  4415  003068  D7F1               	goto	u3670
  4416  00306A                     l1075:
  4417                           
  4418                           ; BSR set to: 0
  4419                           
  4420                           ; BSR set to: 0
  4421  00306A  C0EC  F0EC         	movff	___lwmod@dividend,?___lwmod
  4422  00306E  C0ED  F0ED         	movff	___lwmod@dividend+1,?___lwmod+1
  4423                           
  4424                           ; BSR set to: 0
  4425  003072  0012               	return		;funcret
  4426  003074                     __end_of___lwmod:
  4427                           	opt stack 0
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           intcon	equ	0xFF2
  4435                           intcon3	equ	0xFF0
  4436                           indf0	equ	0xFEF
  4437                           postinc0	equ	0xFEE
  4438                           fsr0h	equ	0xFEA
  4439                           fsr0l	equ	0xFE9
  4440                           wreg	equ	0xFE8
  4441                           indf1	equ	0xFE7
  4442                           postinc1	equ	0xFE6
  4443                           postdec1	equ	0xFE5
  4444                           fsr1h	equ	0xFE2
  4445                           fsr1l	equ	0xFE1
  4446                           indf2	equ	0xFDF
  4447                           postinc2	equ	0xFDE
  4448                           postdec2	equ	0xFDD
  4449                           fsr2h	equ	0xFDA
  4450                           fsr2l	equ	0xFD9
  4451                           status	equ	0xFD8
  4452                           
  4453 ;; *************** function ___lwdiv *****************
  4454 ;; Defined at:
  4455 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  dividend        2    0[BANK0 ] unsigned int 
  4458 ;;  divisor         2    2[BANK0 ] unsigned int 
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  quotient        2    5[BANK0 ] unsigned int 
  4461 ;;  counter         1    4[BANK0 ] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  2    0[BANK0 ] unsigned int 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2, status,0
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4471 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;Total ram usage:        7 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    4
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_printf
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text10
  4486  002D7E                     __ptext10:
  4487                           	opt stack 0
  4488  002D7E                     ___lwdiv:
  4489                           	opt stack 25
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;incstack = 0
  4493  002D7E  0E00               	movlw	0
  4494  002D80  0100               	movlb	0	; () banked
  4495  002D82  6FEB               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4496  002D84  0E00               	movlw	0
  4497  002D86  6FEA               	movwf	___lwdiv@quotient& (0+255),b
  4498                           
  4499                           ; BSR set to: 0
  4500  002D88  51E7               	movf	___lwdiv@divisor& (0+255),w,b
  4501  002D8A  11E8               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4502  002D8C  B4D8               	btfsc	status,2,c
  4503  002D8E  D01C               	goto	l1065
  4504                           
  4505                           ; BSR set to: 0
  4506  002D90  0E01               	movlw	1
  4507  002D92  6FE9               	movwf	___lwdiv@counter& (0+255),b
  4508  002D94  D004               	goto	l1060
  4509  002D96                     
  4510                           ; BSR set to: 0
  4511                           
  4512                           ; BSR set to: 0
  4513  002D96  90D8               	bcf	status,0,c
  4514  002D98  37E7               	rlcf	___lwdiv@divisor& (0+255),f,b
  4515  002D9A  37E8               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4516  002D9C  2BE9               	incf	___lwdiv@counter& (0+255),f,b
  4517  002D9E                     l1060:
  4518                           
  4519                           ; BSR set to: 0
  4520                           
  4521                           ; BSR set to: 0
  4522  002D9E  AFE8               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4523  002DA0  D7FA               	goto	l1061
  4524  002DA2                     u3640:
  4525                           
  4526                           ; BSR set to: 0
  4527                           
  4528                           ; BSR set to: 0
  4529                           
  4530                           ; BSR set to: 0
  4531  002DA2  90D8               	bcf	status,0,c
  4532  002DA4  37EA               	rlcf	___lwdiv@quotient& (0+255),f,b
  4533  002DA6  37EB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4534                           
  4535                           ; BSR set to: 0
  4536  002DA8  51E7               	movf	___lwdiv@divisor& (0+255),w,b
  4537  002DAA  5DE5               	subwf	___lwdiv@dividend& (0+255),w,b
  4538  002DAC  51E8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4539  002DAE  59E6               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4540  002DB0  A0D8               	btfss	status,0,c
  4541  002DB2  D005               	goto	l1064
  4542                           
  4543                           ; BSR set to: 0
  4544  002DB4  51E7               	movf	___lwdiv@divisor& (0+255),w,b
  4545  002DB6  5FE5               	subwf	___lwdiv@dividend& (0+255),f,b
  4546  002DB8  51E8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4547  002DBA  5BE6               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4548                           
  4549                           ; BSR set to: 0
  4550  002DBC  81EA               	bsf	___lwdiv@quotient& (0+255),0,b
  4551  002DBE                     l1064:
  4552                           
  4553                           ; BSR set to: 0
  4554                           
  4555                           ; BSR set to: 0
  4556  002DBE  90D8               	bcf	status,0,c
  4557  002DC0  33E8               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4558  002DC2  33E7               	rrcf	___lwdiv@divisor& (0+255),f,b
  4559                           
  4560                           ; BSR set to: 0
  4561  002DC4  2FE9               	decfsz	___lwdiv@counter& (0+255),f,b
  4562  002DC6  D7ED               	goto	u3640
  4563  002DC8                     l1065:
  4564                           
  4565                           ; BSR set to: 0
  4566                           
  4567                           ; BSR set to: 0
  4568  002DC8  C0EA  F0E5         	movff	___lwdiv@quotient,?___lwdiv
  4569  002DCC  C0EB  F0E6         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4570                           
  4571                           ; BSR set to: 0
  4572  002DD0  0012               	return		;funcret
  4573  002DD2                     __end_of___lwdiv:
  4574                           	opt stack 0
  4575                           tblptru	equ	0xFF8
  4576                           tblptrh	equ	0xFF7
  4577                           tblptrl	equ	0xFF6
  4578                           tablat	equ	0xFF5
  4579                           prodh	equ	0xFF4
  4580                           prodl	equ	0xFF3
  4581                           intcon	equ	0xFF2
  4582                           intcon3	equ	0xFF0
  4583                           indf0	equ	0xFEF
  4584                           postinc0	equ	0xFEE
  4585                           fsr0h	equ	0xFEA
  4586                           fsr0l	equ	0xFE9
  4587                           wreg	equ	0xFE8
  4588                           indf1	equ	0xFE7
  4589                           postinc1	equ	0xFE6
  4590                           postdec1	equ	0xFE5
  4591                           fsr1h	equ	0xFE2
  4592                           fsr1l	equ	0xFE1
  4593                           indf2	equ	0xFDF
  4594                           postinc2	equ	0xFDE
  4595                           postdec2	equ	0xFDD
  4596                           fsr2h	equ	0xFDA
  4597                           fsr2l	equ	0xFD9
  4598                           status	equ	0xFD8
  4599                           
  4600 ;; *************** function _motorStop_0 *****************
  4601 ;; Defined at:
  4602 ;;		line 32 in file "DCmotor.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;Total ram usage:        2 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    4
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_main
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           	psect	text11
  4631  003146                     __ptext11:
  4632                           	opt stack 0
  4633  003146                     _motorStop_0:
  4634                           	opt stack 26
  4635                           
  4636                           ;DCmotor.c: 33: LATCbits.LATC0 = 0;
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;incstack = 0
  4640  003146  908B               	bcf	3979,0,c	;volatile
  4641                           
  4642                           ;DCmotor.c: 34: TRISCbits.RC0 = 0;
  4643  003148  9094               	bcf	3988,0,c	;volatile
  4644                           
  4645                           ;DCmotor.c: 36: _delay((unsigned long)((200)*(40000000/4000.0)));
  4646  00314A  0E0B               	movlw	11
  4647  00314C  0100               	movlb	0	; () banked
  4648  00314E  6FE6               	movwf	(??_motorStop_0+1)& (0+255),b
  4649  003150  0E26               	movlw	38
  4650  003152  6FE5               	movwf	??_motorStop_0& (0+255),b
  4651  003154  0E5D               	movlw	93
  4652  003156                     u4697:
  4653  003156  2EE8               	decfsz	wreg,f,c
  4654  003158  D7FE               	bra	u4697
  4655  00315A  2FE5               	decfsz	??_motorStop_0& (0+255),f,b
  4656  00315C  D7FC               	bra	u4697
  4657  00315E  2FE6               	decfsz	(??_motorStop_0+1)& (0+255),f,b
  4658  003160  D7FA               	bra	u4697
  4659  003162  D000               	nop2	
  4660  003164  0012               	return		;funcret
  4661  003166                     __end_of_motorStop_0:
  4662                           	opt stack 0
  4663                           tblptru	equ	0xFF8
  4664                           tblptrh	equ	0xFF7
  4665                           tblptrl	equ	0xFF6
  4666                           tablat	equ	0xFF5
  4667                           prodh	equ	0xFF4
  4668                           prodl	equ	0xFF3
  4669                           intcon	equ	0xFF2
  4670                           intcon3	equ	0xFF0
  4671                           indf0	equ	0xFEF
  4672                           postinc0	equ	0xFEE
  4673                           fsr0h	equ	0xFEA
  4674                           fsr0l	equ	0xFE9
  4675                           wreg	equ	0xFE8
  4676                           indf1	equ	0xFE7
  4677                           postinc1	equ	0xFE6
  4678                           postdec1	equ	0xFE5
  4679                           fsr1h	equ	0xFE2
  4680                           fsr1l	equ	0xFE1
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           postdec2	equ	0xFDD
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function _motorStart_0 *****************
  4689 ;; Defined at:
  4690 ;;		line 23 in file "DCmotor.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;		None
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;		None
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  1    wreg      void 
  4697 ;; Registers used:
  4698 ;;		wreg
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;Total ram usage:        2 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:    4
  4711 ;; This function calls:
  4712 ;;		Nothing
  4713 ;; This function is called by:
  4714 ;;		_main
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           	psect	text12
  4719  003166                     __ptext12:
  4720                           	opt stack 0
  4721  003166                     _motorStart_0:
  4722                           	opt stack 26
  4723                           
  4724                           ;DCmotor.c: 25: LATCbits.LATC0 = 1;
  4725                           
  4726                           ;incstack = 0
  4727  003166  808B               	bsf	3979,0,c	;volatile
  4728                           
  4729                           ;DCmotor.c: 26: TRISCbits.RC0 = 0;
  4730  003168  9094               	bcf	3988,0,c	;volatile
  4731                           
  4732                           ;DCmotor.c: 28: _delay((unsigned long)((200)*(40000000/4000.0)));
  4733  00316A  0E0B               	movlw	11
  4734  00316C  0100               	movlb	0	; () banked
  4735  00316E  6FE6               	movwf	(??_motorStart_0+1)& (0+255),b
  4736  003170  0E26               	movlw	38
  4737  003172  6FE5               	movwf	??_motorStart_0& (0+255),b
  4738  003174  0E5D               	movlw	93
  4739  003176                     u4707:
  4740  003176  2EE8               	decfsz	wreg,f,c
  4741  003178  D7FE               	bra	u4707
  4742  00317A  2FE5               	decfsz	??_motorStart_0& (0+255),f,b
  4743  00317C  D7FC               	bra	u4707
  4744  00317E  2FE6               	decfsz	(??_motorStart_0+1)& (0+255),f,b
  4745  003180  D7FA               	bra	u4707
  4746  003182  D000               	nop2	
  4747  003184  0012               	return		;funcret
  4748  003186                     __end_of_motorStart_0:
  4749                           	opt stack 0
  4750                           tblptru	equ	0xFF8
  4751                           tblptrh	equ	0xFF7
  4752                           tblptrl	equ	0xFF6
  4753                           tablat	equ	0xFF5
  4754                           prodh	equ	0xFF4
  4755                           prodl	equ	0xFF3
  4756                           intcon	equ	0xFF2
  4757                           intcon3	equ	0xFF0
  4758                           indf0	equ	0xFEF
  4759                           postinc0	equ	0xFEE
  4760                           fsr0h	equ	0xFEA
  4761                           fsr0l	equ	0xFE9
  4762                           wreg	equ	0xFE8
  4763                           indf1	equ	0xFE7
  4764                           postinc1	equ	0xFE6
  4765                           postdec1	equ	0xFE5
  4766                           fsr1h	equ	0xFE2
  4767                           fsr1l	equ	0xFE1
  4768                           indf2	equ	0xFDF
  4769                           postinc2	equ	0xFDE
  4770                           postdec2	equ	0xFDD
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function _initialize *****************
  4776 ;; Defined at:
  4777 ;;		line 848 in file "main.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;		None
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;		None
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  1    wreg      void 
  4784 ;; Registers used:
  4785 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;Total ram usage:        0 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    4
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_main
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text13
  4806  002860                     __ptext13:
  4807                           	opt stack 0
  4808  002860                     _initialize:
  4809                           	opt stack 26
  4810                           
  4811                           ;main.c: 849: white_tape = 0;
  4812                           
  4813                           ;incstack = 0
  4814  002860  0E00               	movlw	0
  4815  002862  6E6E               	movwf	_white_tape+1,c
  4816  002864  0E00               	movlw	0
  4817  002866  6E6D               	movwf	_white_tape,c
  4818                           
  4819                           ;main.c: 850: mode = 0;
  4820  002868  0E00               	movlw	0
  4821  00286A  6E12               	movwf	_mode+1,c
  4822  00286C  0E00               	movlw	0
  4823  00286E  6E11               	movwf	_mode,c
  4824                           
  4825                           ;main.c: 851: state = 0;
  4826  002870  0E00               	movlw	0
  4827  002872  6E2A               	movwf	_state+1,c
  4828  002874  0E00               	movlw	0
  4829  002876  6E29               	movwf	_state,c
  4830                           
  4831                           ;main.c: 852: assembly_step = 0;
  4832  002878  0E00               	movlw	0
  4833  00287A  6E28               	movwf	_assembly_step+1,c
  4834  00287C  0E00               	movlw	0
  4835  00287E  6E27               	movwf	_assembly_step,c
  4836                           
  4837                           ;main.c: 853: counter_step = 0;
  4838  002880  0E00               	movlw	0
  4839  002882  6E26               	movwf	_counter_step+1,c
  4840  002884  0E00               	movlw	0
  4841  002886  6E25               	movwf	_counter_step,c
  4842                           
  4843                           ;main.c: 855: valid = 0;
  4844  002888  0E00               	movlw	0
  4845  00288A  0100               	movlb	0	; () banked
  4846  00288C  6FD4               	movwf	(_valid+1)& (0+255),b
  4847  00288E  0E00               	movlw	0
  4848  002890  6FD3               	movwf	_valid& (0+255),b
  4849                           
  4850                           ;main.c: 856: number = 0;
  4851  002892  0E00               	movlw	0
  4852  002894  6E36               	movwf	_number+1,c
  4853  002896  0E00               	movlw	0
  4854  002898  6E35               	movwf	_number,c
  4855                           
  4856                           ;main.c: 857: total_number=0;
  4857  00289A  0E00               	movlw	0
  4858  00289C  6FD2               	movwf	(_total_number+1)& (0+255),b
  4859  00289E  0E00               	movlw	0
  4860  0028A0  6FD1               	movwf	_total_number& (0+255),b
  4861                           
  4862                           ;main.c: 859: B=0,N=0,S=0,W=0;
  4863  0028A2  0E00               	movlw	0
  4864  0028A4  6E22               	movwf	_B+1,c
  4865  0028A6  0E00               	movlw	0
  4866  0028A8  6E21               	movwf	_B,c
  4867  0028AA  0E00               	movlw	0
  4868  0028AC  6E20               	movwf	_N+1,c
  4869  0028AE  0E00               	movlw	0
  4870  0028B0  6E1F               	movwf	_N,c
  4871  0028B2  0E00               	movlw	0
  4872  0028B4  6E1E               	movwf	_S+1,c
  4873  0028B6  0E00               	movlw	0
  4874  0028B8  6E1D               	movwf	_S,c
  4875  0028BA  0E00               	movlw	0
  4876  0028BC  6E1C               	movwf	_W+1,c
  4877  0028BE  0E00               	movlw	0
  4878  0028C0  6E1B               	movwf	_W,c
  4879                           
  4880                           ;main.c: 861: B_count= 0;
  4881  0028C2  0E00               	movlw	0
  4882  0028C4  6E1A               	movwf	_B_count+1,c
  4883  0028C6  0E00               	movlw	0
  4884  0028C8  6E19               	movwf	_B_count,c
  4885                           
  4886                           ;main.c: 862: S_count= 0;
  4887  0028CA  0E00               	movlw	0
  4888  0028CC  6E18               	movwf	_S_count+1,c
  4889  0028CE  0E00               	movlw	0
  4890  0028D0  6E17               	movwf	_S_count,c
  4891                           
  4892                           ;main.c: 863: N_count= 0;
  4893  0028D2  0E00               	movlw	0
  4894  0028D4  6E16               	movwf	_N_count+1,c
  4895  0028D6  0E00               	movlw	0
  4896  0028D8  6E15               	movwf	_N_count,c
  4897                           
  4898                           ;main.c: 864: W_count= 0;
  4899  0028DA  0E00               	movlw	0
  4900  0028DC  6E14               	movwf	_W_count+1,c
  4901  0028DE  0E00               	movlw	0
  4902  0028E0  6E13               	movwf	_W_count,c
  4903                           
  4904                           ;main.c: 866: for (i=0;i<8;i++){
  4905  0028E2  0E00               	movlw	0
  4906  0028E4  6E2C               	movwf	_i+1,c
  4907  0028E6  0E00               	movlw	0
  4908  0028E8  6E2B               	movwf	_i,c
  4909  0028EA                     l4780:
  4910                           
  4911                           ; BSR set to: 0
  4912  0028EA  502C               	movf	_i+1,w,c
  4913  0028EC  E155               	bnz	l342
  4914  0028EE  0E08               	movlw	8
  4915  0028F0  5C2B               	subwf	_i,w,c
  4916  0028F2  B0D8               	btfsc	status,0,c
  4917  0028F4  0012               	return	
  4918                           
  4919                           ;main.c: 867: compartment_array[i] = 0;
  4920                           
  4921                           ; BSR set to: 0
  4922                           
  4923                           ; BSR set to: 0
  4924  0028F6  90D8               	bcf	status,0,c
  4925  0028F8  342B               	rlcf	_i,w,c
  4926  0028FA  6ED9               	movwf	fsr2l,c
  4927  0028FC  342C               	rlcf	_i+1,w,c
  4928  0028FE  6EDA               	movwf	fsr2h,c
  4929  002900  0EB0               	movlw	low _compartment_array
  4930  002902  26D9               	addwf	fsr2l,f,c
  4931  002904  0E00               	movlw	high _compartment_array
  4932  002906  22DA               	addwfc	fsr2h,f,c
  4933  002908  0E00               	movlw	0
  4934  00290A  6EDE               	movwf	postinc2,c
  4935  00290C  0E00               	movlw	0
  4936  00290E  6EDD               	movwf	postdec2,c
  4937                           
  4938                           ;main.c: 868: compartment_number[i] = 0;
  4939  002910  90D8               	bcf	status,0,c
  4940  002912  342B               	rlcf	_i,w,c
  4941  002914  6ED9               	movwf	fsr2l,c
  4942  002916  342C               	rlcf	_i+1,w,c
  4943  002918  6EDA               	movwf	fsr2h,c
  4944  00291A  0E01               	movlw	low _compartment_number
  4945  00291C  26D9               	addwf	fsr2l,f,c
  4946  00291E  0E00               	movlw	high _compartment_number
  4947  002920  22DA               	addwfc	fsr2h,f,c
  4948  002922  0E00               	movlw	0
  4949  002924  6EDE               	movwf	postinc2,c
  4950  002926  0E00               	movlw	0
  4951  002928  6EDD               	movwf	postdec2,c
  4952                           
  4953                           ;main.c: 869: B_array[i] = 0;
  4954  00292A  90D8               	bcf	status,0,c
  4955  00292C  342B               	rlcf	_i,w,c
  4956  00292E  6ED9               	movwf	fsr2l,c
  4957  002930  342C               	rlcf	_i+1,w,c
  4958  002932  6EDA               	movwf	fsr2h,c
  4959  002934  0EA0               	movlw	low _B_array
  4960  002936  26D9               	addwf	fsr2l,f,c
  4961  002938  0E00               	movlw	high _B_array
  4962  00293A  22DA               	addwfc	fsr2h,f,c
  4963  00293C  0E00               	movlw	0
  4964  00293E  6EDE               	movwf	postinc2,c
  4965  002940  0E00               	movlw	0
  4966  002942  6EDD               	movwf	postdec2,c
  4967                           
  4968                           ;main.c: 870: N_array[i] = 0;
  4969  002944  90D8               	bcf	status,0,c
  4970  002946  342B               	rlcf	_i,w,c
  4971  002948  6ED9               	movwf	fsr2l,c
  4972  00294A  342C               	rlcf	_i+1,w,c
  4973  00294C  6EDA               	movwf	fsr2h,c
  4974  00294E  0E90               	movlw	low _N_array
  4975  002950  26D9               	addwf	fsr2l,f,c
  4976  002952  0E00               	movlw	high _N_array
  4977  002954  22DA               	addwfc	fsr2h,f,c
  4978  002956  0E00               	movlw	0
  4979  002958  6EDE               	movwf	postinc2,c
  4980  00295A  0E00               	movlw	0
  4981  00295C  6EDD               	movwf	postdec2,c
  4982                           
  4983                           ;main.c: 871: S_array[i] = 0;
  4984  00295E  90D8               	bcf	status,0,c
  4985  002960  342B               	rlcf	_i,w,c
  4986  002962  6ED9               	movwf	fsr2l,c
  4987  002964  342C               	rlcf	_i+1,w,c
  4988  002966  6EDA               	movwf	fsr2h,c
  4989  002968  0E00               	movlw	low _S_array
  4990  00296A  26D9               	addwf	fsr2l,f,c
  4991  00296C  0E01               	movlw	high _S_array
  4992  00296E  22DA               	addwfc	fsr2h,f,c
  4993  002970  0E00               	movlw	0
  4994  002972  6EDE               	movwf	postinc2,c
  4995  002974  0E00               	movlw	0
  4996  002976  6EDD               	movwf	postdec2,c
  4997                           
  4998                           ;main.c: 872: W_array[i] = 0;
  4999  002978  90D8               	bcf	status,0,c
  5000  00297A  342B               	rlcf	_i,w,c
  5001  00297C  6ED9               	movwf	fsr2l,c
  5002  00297E  342C               	rlcf	_i+1,w,c
  5003  002980  6EDA               	movwf	fsr2h,c
  5004  002982  0E80               	movlw	low _W_array
  5005  002984  26D9               	addwf	fsr2l,f,c
  5006  002986  0E00               	movlw	high _W_array
  5007  002988  22DA               	addwfc	fsr2h,f,c
  5008  00298A  0E00               	movlw	0
  5009  00298C  6EDE               	movwf	postinc2,c
  5010  00298E  0E00               	movlw	0
  5011  002990  6EDD               	movwf	postdec2,c
  5012  002992  4A2B               	infsnz	_i,f,c
  5013  002994  2A2C               	incf	_i+1,f,c
  5014  002996  D7A9               	goto	l4780
  5015  002998                     l342:
  5016  002998  0012               	return		;funcret
  5017  00299A                     __end_of_initialize:
  5018                           	opt stack 0
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           intcon	equ	0xFF2
  5026                           intcon3	equ	0xFF0
  5027                           indf0	equ	0xFEF
  5028                           postinc0	equ	0xFEE
  5029                           fsr0h	equ	0xFEA
  5030                           fsr0l	equ	0xFE9
  5031                           wreg	equ	0xFE8
  5032                           indf1	equ	0xFE7
  5033                           postinc1	equ	0xFE6
  5034                           postdec1	equ	0xFE5
  5035                           fsr1h	equ	0xFE2
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function _initLCD *****************
  5045 ;; Defined at:
  5046 ;;		line 60 in file "lcd.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;		None
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      void 
  5053 ;; Registers used:
  5054 ;;		wreg, status,2, status,0, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;Total ram usage:        1 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    6
  5067 ;; This function calls:
  5068 ;;		_lcdInst
  5069 ;; This function is called by:
  5070 ;;		_main
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           	psect	text14
  5075  002E76                     __ptext14:
  5076                           	opt stack 0
  5077  002E76                     _initLCD:
  5078                           	opt stack 24
  5079                           
  5080                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  5081                           
  5082                           ;incstack = 0
  5083  002E76  0EC3               	movlw	195
  5084  002E78  0100               	movlb	0	; () banked
  5085  002E7A  6FE8               	movwf	??_initLCD& (0+255),b
  5086  002E7C  0ECD               	movlw	205
  5087  002E7E                     u4717:
  5088  002E7E  2EE8               	decfsz	wreg,f,c
  5089  002E80  D7FE               	bra	u4717
  5090  002E82  2FE8               	decfsz	??_initLCD& (0+255),f,b
  5091  002E84  D7FC               	bra	u4717
  5092                           
  5093                           ;lcd.c: 69: lcdInst(0b00110011);
  5094  002E86  0E33               	movlw	51
  5095  002E88  ECCF  F018         	call	_lcdInst
  5096                           
  5097                           ;lcd.c: 70: lcdInst(0b00110010);
  5098  002E8C  0E32               	movlw	50
  5099  002E8E  ECCF  F018         	call	_lcdInst
  5100                           
  5101                           ;lcd.c: 71: lcdInst(0b00101000);
  5102  002E92  0E28               	movlw	40
  5103  002E94  ECCF  F018         	call	_lcdInst
  5104                           
  5105                           ;lcd.c: 72: lcdInst(0b00001111);
  5106  002E98  0E0F               	movlw	15
  5107  002E9A  ECCF  F018         	call	_lcdInst
  5108                           
  5109                           ;lcd.c: 73: lcdInst(0b00000110);
  5110  002E9E  0E06               	movlw	6
  5111  002EA0  ECCF  F018         	call	_lcdInst
  5112                           
  5113                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5114  002EA4  0E01               	movlw	1
  5115  002EA6  ECCF  F018         	call	_lcdInst
  5116  002EAA  0EC3               	movlw	195
  5117  002EAC  0100               	movlb	0	; () banked
  5118  002EAE  6FE8               	movwf	??_initLCD& (0+255),b
  5119  002EB0  0ECD               	movlw	205
  5120  002EB2                     u4727:
  5121  002EB2  2EE8               	decfsz	wreg,f,c
  5122  002EB4  D7FE               	bra	u4727
  5123  002EB6  2FE8               	decfsz	??_initLCD& (0+255),f,b
  5124  002EB8  D7FC               	bra	u4727
  5125                           
  5126                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5127  002EBA  0E0F               	movlw	15
  5128  002EBC  ECCF  F018         	call	_lcdInst
  5129  002EC0  0012               	return		;funcret
  5130  002EC2                     __end_of_initLCD:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodh	equ	0xFF4
  5137                           prodl	equ	0xFF3
  5138                           intcon	equ	0xFF2
  5139                           intcon3	equ	0xFF0
  5140                           indf0	equ	0xFEF
  5141                           postinc0	equ	0xFEE
  5142                           fsr0h	equ	0xFEA
  5143                           fsr0l	equ	0xFE9
  5144                           wreg	equ	0xFE8
  5145                           indf1	equ	0xFE7
  5146                           postinc1	equ	0xFE6
  5147                           postdec1	equ	0xFE5
  5148                           fsr1h	equ	0xFE2
  5149                           fsr1l	equ	0xFE1
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _lcdInst *****************
  5158 ;; Defined at:
  5159 ;;		line 11 in file "lcd.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  data            1    wreg     unsigned char 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  data            1    2[BANK0 ] unsigned char 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      void 
  5166 ;; Registers used:
  5167 ;;		wreg, status,2, status,0, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;Total ram usage:        1 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    5
  5180 ;; This function calls:
  5181 ;;		_lcdNibble
  5182 ;; This function is called by:
  5183 ;;		_initLCD
  5184 ;;		_main
  5185 ;;		_lcd_set_cursor
  5186 ;;		_lcd_shift_cursor
  5187 ;;		_lcd_shift_display
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text15
  5192  00319E                     __ptext15:
  5193                           	opt stack 0
  5194  00319E                     _lcdInst:
  5195                           	opt stack 25
  5196                           
  5197                           ;incstack = 0
  5198                           ;lcdInst@data stored from wreg
  5199  00319E  0100               	movlb	0	; () banked
  5200  0031A0  6FE7               	movwf	lcdInst@data& (0+255),b
  5201                           
  5202                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5203  0031A2  948C               	bcf	3980,2,c	;volatile
  5204                           
  5205                           ;lcd.c: 20: lcdNibble(data);
  5206  0031A4  0100               	movlb	0	; () banked
  5207  0031A6  51E7               	movf	lcdInst@data& (0+255),w,b
  5208  0031A8  EC60  F015         	call	_lcdNibble
  5209                           
  5210                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5211  0031AC  0EC8               	movlw	200
  5212  0031AE                     u4737:
  5213  0031AE  D000               	nop2	
  5214  0031B0  2EE8               	decfsz	wreg,f,c
  5215  0031B2  D7FD               	bra	u4737
  5216  0031B4  0012               	return		;funcret
  5217  0031B6                     __end_of_lcdInst:
  5218                           	opt stack 0
  5219                           tblptru	equ	0xFF8
  5220                           tblptrh	equ	0xFF7
  5221                           tblptrl	equ	0xFF6
  5222                           tablat	equ	0xFF5
  5223                           prodh	equ	0xFF4
  5224                           prodl	equ	0xFF3
  5225                           intcon	equ	0xFF2
  5226                           intcon3	equ	0xFF0
  5227                           indf0	equ	0xFEF
  5228                           postinc0	equ	0xFEE
  5229                           fsr0h	equ	0xFEA
  5230                           fsr0l	equ	0xFE9
  5231                           wreg	equ	0xFE8
  5232                           indf1	equ	0xFE7
  5233                           postinc1	equ	0xFE6
  5234                           postdec1	equ	0xFE5
  5235                           fsr1h	equ	0xFE2
  5236                           fsr1l	equ	0xFE1
  5237                           indf2	equ	0xFDF
  5238                           postinc2	equ	0xFDE
  5239                           postdec2	equ	0xFDD
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _lcdNibble *****************
  5245 ;; Defined at:
  5246 ;;		line 37 in file "lcd.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  data            1    wreg     unsigned char 
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  data            1    1[BANK0 ] unsigned char 
  5251 ;;  temp            1    0[BANK0 ] unsigned char 
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, status,0
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5265 ;;Total ram usage:        2 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    4
  5268 ;; This function calls:
  5269 ;;		Nothing
  5270 ;; This function is called by:
  5271 ;;		_lcdInst
  5272 ;;		_putch
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           	psect	text16
  5277  002AC0                     __ptext16:
  5278                           	opt stack 0
  5279  002AC0                     _lcdNibble:
  5280                           	opt stack 25
  5281                           
  5282                           ;incstack = 0
  5283                           ;lcdNibble@data stored from wreg
  5284  002AC0  0100               	movlb	0	; () banked
  5285  002AC2  6FE6               	movwf	lcdNibble@data& (0+255),b
  5286                           
  5287                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  5288  002AC4  0100               	movlb	0	; () banked
  5289  002AC6  51E6               	movf	lcdNibble@data& (0+255),w,b
  5290  002AC8  0BF0               	andlw	240
  5291  002ACA  6FE5               	movwf	lcdNibble@temp& (0+255),b
  5292                           
  5293                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  5294  002ACC  508C               	movf	3980,w,c	;volatile
  5295  002ACE  0B0F               	andlw	15
  5296  002AD0  6E8C               	movwf	3980,c	;volatile
  5297                           
  5298                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  5299  002AD2  51E5               	movf	lcdNibble@temp& (0+255),w,b
  5300  002AD4  108C               	iorwf	3980,w,c	;volatile
  5301  002AD6  6E8C               	movwf	3980,c	;volatile
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5305  002AD8  0E00               	movlw	0
  5306  002ADA  BEF2               	btfsc	intcon,7,c	;volatile
  5307  002ADC  0E01               	movlw	1
  5308  002ADE  6E2F               	movwf	_LCDinterruptState,c
  5309                           
  5310                           ; BSR set to: 0
  5311  002AE0  9EF2               	bcf	intcon,7,c	;volatile
  5312                           
  5313                           ; BSR set to: 0
  5314  002AE2  868C               	bsf	3980,3,c	;volatile
  5315                           
  5316                           ; BSR set to: 0
  5317  002AE4  0E53               	movlw	83
  5318  002AE6                     u4747:
  5319  002AE6  2EE8               	decfsz	wreg,f,c
  5320  002AE8  D7FE               	bra	u4747
  5321  002AEA  F000               	nop	
  5322  002AEC  968C               	bcf	3980,3,c	;volatile
  5323  002AEE  0EC8               	movlw	200
  5324  002AF0                     u4757:
  5325  002AF0  D000               	nop2	
  5326  002AF2  2EE8               	decfsz	wreg,f,c
  5327  002AF4  D7FD               	bra	u4757
  5328  002AF6  B02F               	btfsc	_LCDinterruptState,0,c
  5329  002AF8  D002               	bra	u3545
  5330  002AFA  9EF2               	bcf	intcon,7,c	;volatile
  5331  002AFC  D001               	bra	u3546
  5332  002AFE                     u3545:
  5333  002AFE  8EF2               	bsf	intcon,7,c	;volatile
  5334  002B00                     u3546:
  5335                           
  5336                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  5337  002B00  0100               	movlb	0	; () banked
  5338  002B02  39E6               	swapf	lcdNibble@data& (0+255),w,b
  5339  002B04  0BF0               	andlw	240
  5340  002B06  6FE6               	movwf	lcdNibble@data& (0+255),b
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  5344  002B08  51E6               	movf	lcdNibble@data& (0+255),w,b
  5345  002B0A  0BF0               	andlw	240
  5346  002B0C  6FE5               	movwf	lcdNibble@temp& (0+255),b
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  5350  002B0E  508C               	movf	3980,w,c	;volatile
  5351  002B10  0B0F               	andlw	15
  5352  002B12  6E8C               	movwf	3980,c	;volatile
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  5356  002B14  51E5               	movf	lcdNibble@temp& (0+255),w,b
  5357  002B16  108C               	iorwf	3980,w,c	;volatile
  5358  002B18  6E8C               	movwf	3980,c	;volatile
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5362  002B1A  0E00               	movlw	0
  5363  002B1C  BEF2               	btfsc	intcon,7,c	;volatile
  5364  002B1E  0E01               	movlw	1
  5365  002B20  6E2F               	movwf	_LCDinterruptState,c
  5366                           
  5367                           ; BSR set to: 0
  5368  002B22  9EF2               	bcf	intcon,7,c	;volatile
  5369                           
  5370                           ; BSR set to: 0
  5371  002B24  868C               	bsf	3980,3,c	;volatile
  5372                           
  5373                           ; BSR set to: 0
  5374  002B26  0E53               	movlw	83
  5375  002B28                     u4767:
  5376  002B28  2EE8               	decfsz	wreg,f,c
  5377  002B2A  D7FE               	bra	u4767
  5378  002B2C  F000               	nop	
  5379  002B2E  968C               	bcf	3980,3,c	;volatile
  5380  002B30  0EC8               	movlw	200
  5381  002B32                     u4777:
  5382  002B32  D000               	nop2	
  5383  002B34  2EE8               	decfsz	wreg,f,c
  5384  002B36  D7FD               	bra	u4777
  5385  002B38  B02F               	btfsc	_LCDinterruptState,0,c
  5386  002B3A  D002               	bra	u3555
  5387  002B3C  9EF2               	bcf	intcon,7,c	;volatile
  5388  002B3E  D001               	bra	u3556
  5389  002B40                     u3555:
  5390  002B40  8EF2               	bsf	intcon,7,c	;volatile
  5391  002B42                     u3556:
  5392  002B42  0012               	return		;funcret
  5393  002B44                     __end_of_lcdNibble:
  5394                           	opt stack 0
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           intcon3	equ	0xFF0
  5403                           indf0	equ	0xFEF
  5404                           postinc0	equ	0xFEE
  5405                           fsr0h	equ	0xFEA
  5406                           fsr0l	equ	0xFE9
  5407                           wreg	equ	0xFE8
  5408                           indf1	equ	0xFE7
  5409                           postinc1	equ	0xFE6
  5410                           postdec1	equ	0xFE5
  5411                           fsr1h	equ	0xFE2
  5412                           fsr1l	equ	0xFE1
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           fsr2h	equ	0xFDA
  5417                           fsr2l	equ	0xFD9
  5418                           status	equ	0xFD8
  5419                           
  5420 ;; *************** function ___awmod *****************
  5421 ;; Defined at:
  5422 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  dividend        2    0[BANK0 ] int 
  5425 ;;  divisor         2    2[BANK0 ] int 
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;  sign            1    5[BANK0 ] unsigned char 
  5428 ;;  counter         1    4[BANK0 ] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  2    0[BANK0 ] int 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5438 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;Total ram usage:        6 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    4
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text17
  5453  002C44                     __ptext17:
  5454                           	opt stack 0
  5455  002C44                     ___awmod:
  5456                           	opt stack 26
  5457                           
  5458                           ;incstack = 0
  5459  002C44  0E00               	movlw	0
  5460  002C46  0100               	movlb	0	; () banked
  5461  002C48  6FEA               	movwf	___awmod@sign& (0+255),b
  5462                           
  5463                           ; BSR set to: 0
  5464  002C4A  AFE6               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5465  002C4C  D006               	goto	l837
  5466                           
  5467                           ; BSR set to: 0
  5468  002C4E  6DE5               	negf	___awmod@dividend& (0+255),b
  5469  002C50  1FE6               	comf	(___awmod@dividend+1)& (0+255),f,b
  5470  002C52  B0D8               	btfsc	status,0,c
  5471  002C54  2BE6               	incf	(___awmod@dividend+1)& (0+255),f,b
  5472                           
  5473                           ; BSR set to: 0
  5474  002C56  0E01               	movlw	1
  5475  002C58  6FEA               	movwf	___awmod@sign& (0+255),b
  5476  002C5A                     l837:
  5477                           
  5478                           ; BSR set to: 0
  5479                           
  5480                           ; BSR set to: 0
  5481  002C5A  AFE8               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5482  002C5C  D004               	goto	l838
  5483                           
  5484                           ; BSR set to: 0
  5485  002C5E  6DE7               	negf	___awmod@divisor& (0+255),b
  5486  002C60  1FE8               	comf	(___awmod@divisor+1)& (0+255),f,b
  5487  002C62  B0D8               	btfsc	status,0,c
  5488  002C64  2BE8               	incf	(___awmod@divisor+1)& (0+255),f,b
  5489  002C66                     l838:
  5490                           
  5491                           ; BSR set to: 0
  5492                           
  5493                           ; BSR set to: 0
  5494  002C66  51E7               	movf	___awmod@divisor& (0+255),w,b
  5495  002C68  11E8               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5496  002C6A  B4D8               	btfsc	status,2,c
  5497  002C6C  D018               	goto	l845
  5498                           
  5499                           ; BSR set to: 0
  5500  002C6E  0E01               	movlw	1
  5501  002C70  6FE9               	movwf	___awmod@counter& (0+255),b
  5502  002C72  D004               	goto	l840
  5503  002C74                     
  5504                           ; BSR set to: 0
  5505                           
  5506                           ; BSR set to: 0
  5507  002C74  90D8               	bcf	status,0,c
  5508  002C76  37E7               	rlcf	___awmod@divisor& (0+255),f,b
  5509  002C78  37E8               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5510  002C7A  2BE9               	incf	___awmod@counter& (0+255),f,b
  5511  002C7C                     l840:
  5512                           
  5513                           ; BSR set to: 0
  5514                           
  5515                           ; BSR set to: 0
  5516  002C7C  AFE8               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5517  002C7E  D7FA               	goto	l841
  5518  002C80                     u3910:
  5519                           
  5520                           ; BSR set to: 0
  5521                           
  5522                           ; BSR set to: 0
  5523                           
  5524                           ; BSR set to: 0
  5525  002C80  51E7               	movf	___awmod@divisor& (0+255),w,b
  5526  002C82  5DE5               	subwf	___awmod@dividend& (0+255),w,b
  5527  002C84  51E8               	movf	(___awmod@divisor+1)& (0+255),w,b
  5528  002C86  59E6               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5529  002C88  A0D8               	btfss	status,0,c
  5530  002C8A  D004               	goto	l844
  5531                           
  5532                           ; BSR set to: 0
  5533  002C8C  51E7               	movf	___awmod@divisor& (0+255),w,b
  5534  002C8E  5FE5               	subwf	___awmod@dividend& (0+255),f,b
  5535  002C90  51E8               	movf	(___awmod@divisor+1)& (0+255),w,b
  5536  002C92  5BE6               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5537  002C94                     l844:
  5538                           
  5539                           ; BSR set to: 0
  5540                           
  5541                           ; BSR set to: 0
  5542  002C94  90D8               	bcf	status,0,c
  5543  002C96  33E8               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5544  002C98  33E7               	rrcf	___awmod@divisor& (0+255),f,b
  5545                           
  5546                           ; BSR set to: 0
  5547  002C9A  2FE9               	decfsz	___awmod@counter& (0+255),f,b
  5548  002C9C  D7F1               	goto	u3910
  5549  002C9E                     l845:
  5550                           
  5551                           ; BSR set to: 0
  5552                           
  5553                           ; BSR set to: 0
  5554                           
  5555                           ; BSR set to: 0
  5556  002C9E  51EA               	movf	___awmod@sign& (0+255),w,b
  5557  002CA0  B4D8               	btfsc	status,2,c
  5558  002CA2  D004               	goto	l846
  5559                           
  5560                           ; BSR set to: 0
  5561  002CA4  6DE5               	negf	___awmod@dividend& (0+255),b
  5562  002CA6  1FE6               	comf	(___awmod@dividend+1)& (0+255),f,b
  5563  002CA8  B0D8               	btfsc	status,0,c
  5564  002CAA  2BE6               	incf	(___awmod@dividend+1)& (0+255),f,b
  5565  002CAC                     l846:
  5566                           
  5567                           ; BSR set to: 0
  5568                           
  5569                           ; BSR set to: 0
  5570  002CAC  C0E5  F0E5         	movff	___awmod@dividend,?___awmod
  5571  002CB0  C0E6  F0E6         	movff	___awmod@dividend+1,?___awmod+1
  5572  002CB4  0012               	return	
  5573  002CB6                     __end_of___awmod:
  5574                           	opt stack 0
  5575                           tblptru	equ	0xFF8
  5576                           tblptrh	equ	0xFF7
  5577                           tblptrl	equ	0xFF6
  5578                           tablat	equ	0xFF5
  5579                           prodh	equ	0xFF4
  5580                           prodl	equ	0xFF3
  5581                           intcon	equ	0xFF2
  5582                           intcon3	equ	0xFF0
  5583                           indf0	equ	0xFEF
  5584                           postinc0	equ	0xFEE
  5585                           fsr0h	equ	0xFEA
  5586                           fsr0l	equ	0xFE9
  5587                           wreg	equ	0xFE8
  5588                           indf1	equ	0xFE7
  5589                           postinc1	equ	0xFE6
  5590                           postdec1	equ	0xFE5
  5591                           fsr1h	equ	0xFE2
  5592                           fsr1l	equ	0xFE1
  5593                           indf2	equ	0xFDF
  5594                           postinc2	equ	0xFDE
  5595                           postdec2	equ	0xFDD
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function _interruptHandler *****************
  5601 ;; Defined at:
  5602 ;;		line 508 in file "main.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;		None
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  i               2   50[COMRAM] int 
  5607 ;;  temp            1   53[COMRAM] unsigned char 
  5608 ;;  keypress        1   52[COMRAM] unsigned char 
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      void 
  5611 ;; Registers used:
  5612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;Total ram usage:       27 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    3
  5625 ;; This function calls:
  5626 ;;		_check
  5627 ;;		_generate_compartment_array
  5628 ;;		_is_valid
  5629 ;;		_strcat
  5630 ;;		_strcpy
  5631 ;;		_strncmp
  5632 ;;		i2___wmul
  5633 ;;		i2_initLCD
  5634 ;;		i2_lcdInst
  5635 ;;		i2_printf
  5636 ;;		i2_putch
  5637 ;; This function is called by:
  5638 ;;		Interrupt level 2
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	intcode
  5643  000008                     __pintcode:
  5644                           	opt stack 0
  5645  000008                     _interruptHandler:
  5646                           	opt stack 24
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;incstack = 0
  5650  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5651  00000A  EDB7  F00C         	call	int_func,f	;refresh shadow registers
  5652                           tblptru	equ	0xFF8
  5653                           tblptrh	equ	0xFF7
  5654                           tblptrl	equ	0xFF6
  5655                           tablat	equ	0xFF5
  5656                           prodh	equ	0xFF4
  5657                           prodl	equ	0xFF3
  5658                           intcon	equ	0xFF2
  5659                           intcon3	equ	0xFF0
  5660                           indf0	equ	0xFEF
  5661                           postinc0	equ	0xFEE
  5662                           fsr0h	equ	0xFEA
  5663                           fsr0l	equ	0xFE9
  5664                           wreg	equ	0xFE8
  5665                           indf1	equ	0xFE7
  5666                           postinc1	equ	0xFE6
  5667                           postdec1	equ	0xFE5
  5668                           fsr1h	equ	0xFE2
  5669                           fsr1l	equ	0xFE1
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           postdec2	equ	0xFDD
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677                           	psect	intcode_body
  5678  00196E                     __pintcode_body:
  5679                           	opt stack 24
  5680  00196E                     int_func:
  5681                           	opt stack 24
  5682  00196E  0006               	pop		; remove dummy address from shadow register refresh
  5683  001970  CFFA F057          	movff	pclath,??_interruptHandler+5
  5684  001974  CFFB F058          	movff	pclatu,??_interruptHandler+6
  5685  001978  CFE9 F059          	movff	fsr0l,??_interruptHandler+7
  5686  00197C  CFEA F05A          	movff	fsr0h,??_interruptHandler+8
  5687  001980  CFE1 F05B          	movff	fsr1l,??_interruptHandler+9
  5688  001984  CFE2 F05C          	movff	fsr1h,??_interruptHandler+10
  5689  001988  CFD9 F05D          	movff	fsr2l,??_interruptHandler+11
  5690  00198C  CFDA F05E          	movff	fsr2h,??_interruptHandler+12
  5691  001990  CFF3 F05F          	movff	prodl,??_interruptHandler+13
  5692  001994  CFF4 F060          	movff	prodh,??_interruptHandler+14
  5693  001998  CFF6 F061          	movff	tblptrl,??_interruptHandler+15
  5694  00199C  CFF7 F062          	movff	tblptrh,??_interruptHandler+16
  5695  0019A0  CFF8 F063          	movff	tblptru,??_interruptHandler+17
  5696  0019A4  CFF5 F064          	movff	tablat,??_interruptHandler+18
  5697  0019A8  C06F  F065         	movff	btemp,??_interruptHandler+19
  5698  0019AC  C070  F066         	movff	btemp+1,??_interruptHandler+20
  5699  0019B0  C071  F067         	movff	btemp+2,??_interruptHandler+21
  5700  0019B4  C072  F068         	movff	btemp+3,??_interruptHandler+22
  5701                           
  5702                           ;main.c: 519: if(INT1IF){
  5703  0019B8  A0F0               	btfss	intcon3,0,c	;volatile
  5704  0019BA  D3F1               	goto	i2l4494
  5705                           
  5706                           ;main.c: 525: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5707  0019BC  3881               	swapf	3969,w,c	;volatile
  5708  0019BE  0B0F               	andlw	15
  5709  0019C0  0B0F               	andlw	15
  5710  0019C2  6E6B               	movwf	interruptHandler@keypress,c
  5711                           
  5712                           ;main.c: 527: char temp = keys[keypress];
  5713  0019C4  506B               	movf	interruptHandler@keypress,w,c
  5714  0019C6  0D01               	mullw	1
  5715  0019C8  0E4F               	movlw	low _keys
  5716  0019CA  24F3               	addwf	prodl,w,c
  5717  0019CC  6EF6               	movwf	tblptrl,c
  5718  0019CE  0EFE               	movlw	high _keys
  5719  0019D0  20F4               	addwfc	prodh,w,c
  5720  0019D2  6EF7               	movwf	tblptrh,c
  5721  0019D4                     	if	1	;There are 3 active tblptr bytes
  5722  0019D4  6AF8               	clrf	tblptru,c
  5723  0019D6  0E00               	movlw	low (__mediumconst shr (0+16))
  5724  0019D8  22F8               	addwfc	tblptru,f,c
  5725  0019DA                     	endif
  5726  0019DA  0008               	tblrd		*
  5727  0019DC  CFF5 F06C          	movff	tablat,interruptHandler@temp
  5728                           
  5729                           ;main.c: 530: if(temp == 'A'){
  5730  0019E0  0E41               	movlw	65
  5731  0019E2  186C               	xorwf	interruptHandler@temp,w,c
  5732  0019E4  A4D8               	btfss	status,2,c
  5733  0019E6  D005               	goto	i2l293
  5734                           
  5735                           ;main.c: 531: state = prev_state;
  5736  0019E8  C023  F029         	movff	_prev_state,_state
  5737  0019EC  C024  F02A         	movff	_prev_state+1,_state+1
  5738  0019F0  D3D5               	goto	L10
  5739  0019F2                     i2l293:
  5740                           
  5741                           ;main.c: 534: }
  5742                           ;main.c: 538: if(operation == 1){
  5743  0019F2  0100               	movlb	0	; () banked
  5744  0019F4  05CB               	decf	_operation& (0+255),w,b
  5745  0019F6  11CC               	iorwf	(_operation+1)& (0+255),w,b
  5746  0019F8  A4D8               	btfss	status,2,c
  5747  0019FA  D021               	goto	i2l297
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;main.c: 539: if (temp == '1'){
  5751  0019FC  0E31               	movlw	49
  5752  0019FE  186C               	xorwf	interruptHandler@temp,w,c
  5753  001A00  A4D8               	btfss	status,2,c
  5754  001A02  D014               	goto	i2l296
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;main.c: 542: printf("display time");
  5758  001A04  0E3A               	movlw	low STR_49
  5759  001A06  6E43               	movwf	i2printf@f,c
  5760  001A08  0EFF               	movlw	high STR_49
  5761  001A0A  6E44               	movwf	i2printf@f+1,c
  5762  001A0C  EC35  F013         	call	i2_printf	;wreg free
  5763                           
  5764                           ;main.c: 543: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5765  001A10  0E33               	movlw	51
  5766  001A12  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  5767  001A14  0EBB               	movlw	187
  5768  001A16  6E52               	movwf	??_interruptHandler& (0+255),c
  5769  001A18  0EE0               	movlw	224
  5770  001A1A                     i2u478_47:
  5771  001A1A  2EE8               	decfsz	wreg,f,c
  5772  001A1C  D7FE               	bra	i2u478_47
  5773  001A1E  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  5774  001A20  D7FC               	bra	i2u478_47
  5775  001A22  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  5776  001A24  D7FA               	bra	i2u478_47
  5777                           
  5778                           ;main.c: 545: operation_time = 1;
  5779  001A26  0E00               	movlw	0
  5780  001A28  0100               	movlb	0	; () banked
  5781  001A2A  D005               	goto	L4
  5782  001A2C                     i2l296:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;main.c: 548: }
  5786                           ;main.c: 549: if (temp == '2'){
  5787                           
  5788                           ; BSR set to: 0
  5789  001A2C  0E32               	movlw	50
  5790  001A2E  186C               	xorwf	interruptHandler@temp,w,c
  5791  001A30  A4D8               	btfss	status,2,c
  5792  001A32  D005               	goto	i2l297
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;main.c: 550: operation_time = 1;
  5796  001A34  0E00               	movlw	0
  5797  001A36                     L4:
  5798  001A36  6FCA               	movwf	(_operation_time+1)& (0+255),b
  5799  001A38  0E01               	movlw	1
  5800  001A3A  6FC9               	movwf	_operation_time& (0+255),b
  5801  001A3C  D3AF               	goto	L10
  5802  001A3E                     i2l297:
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;main.c: 553: }
  5806                           ;main.c: 555: }
  5807                           ;main.c: 580: if (state == 0){
  5808                           
  5809                           ; BSR set to: 0
  5810                           
  5811                           ; BSR set to: 0
  5812  001A3E  5029               	movf	_state,w,c
  5813  001A40  102A               	iorwf	_state+1,w,c
  5814  001A42  A4D8               	btfss	status,2,c
  5815  001A44  D0C9               	goto	i2l298
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;main.c: 582: if(temp == '4'){
  5819  001A46  0E34               	movlw	52
  5820  001A48  186C               	xorwf	interruptHandler@temp,w,c
  5821  001A4A  A4D8               	btfss	status,2,c
  5822  001A4C  D01F               	goto	i2l299
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;main.c: 583: assembly_step = 4;
  5826  001A4E  0E00               	movlw	0
  5827  001A50  6E28               	movwf	_assembly_step+1,c
  5828  001A52  0E04               	movlw	4
  5829  001A54  6E27               	movwf	_assembly_step,c
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;main.c: 584: prev_state = state;
  5833  001A56  C029  F023         	movff	_state,_prev_state
  5834  001A5A  C02A  F024         	movff	_state+1,_prev_state+1
  5835                           
  5836                           ;main.c: 585: state = 1;
  5837  001A5E  0E00               	movlw	0
  5838  001A60  6E2A               	movwf	_state+1,c
  5839  001A62  0E01               	movlw	1
  5840  001A64  6E29               	movwf	_state,c
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;main.c: 586: lcdInst(0xC0);;
  5844  001A66  0EC0               	movlw	192
  5845  001A68  ECE5  F018         	call	i2_lcdInst
  5846                           
  5847                           ;main.c: 587: putch(keys[keypress]);
  5848  001A6C  506B               	movf	interruptHandler@keypress,w,c
  5849  001A6E  0D01               	mullw	1
  5850  001A70  0E4F               	movlw	low _keys
  5851  001A72  24F3               	addwf	prodl,w,c
  5852  001A74  6EF6               	movwf	tblptrl,c
  5853  001A76  0EFE               	movlw	high _keys
  5854  001A78  20F4               	addwfc	prodh,w,c
  5855  001A7A  6EF7               	movwf	tblptrh,c
  5856  001A7C                     	if	1	;There are 3 active tblptr bytes
  5857  001A7C  6AF8               	clrf	tblptru,c
  5858  001A7E  0E00               	movlw	low (__mediumconst shr (0+16))
  5859  001A80  22F8               	addwfc	tblptru,f,c
  5860  001A82                     	endif
  5861  001A82  0008               	tblrd		*
  5862  001A84  50F5               	movf	tablat,w,c
  5863  001A86  ECDB  F018         	call	i2_putch
  5864                           
  5865                           ;main.c: 589: }
  5866  001A8A  D09F               	goto	i2l308
  5867  001A8C                     i2l299:
  5868                           
  5869                           ;main.c: 590: else if(temp == '5'){
  5870  001A8C  0E35               	movlw	53
  5871  001A8E  186C               	xorwf	interruptHandler@temp,w,c
  5872  001A90  A4D8               	btfss	status,2,c
  5873  001A92  D01F               	goto	i2l301
  5874                           
  5875                           ;main.c: 591: assembly_step = 5;
  5876  001A94  0E00               	movlw	0
  5877  001A96  6E28               	movwf	_assembly_step+1,c
  5878  001A98  0E05               	movlw	5
  5879  001A9A  6E27               	movwf	_assembly_step,c
  5880                           
  5881                           ;main.c: 592: prev_state = state;
  5882  001A9C  C029  F023         	movff	_state,_prev_state
  5883  001AA0  C02A  F024         	movff	_state+1,_prev_state+1
  5884                           
  5885                           ;main.c: 593: state = 1;
  5886  001AA4  0E00               	movlw	0
  5887  001AA6  6E2A               	movwf	_state+1,c
  5888  001AA8  0E01               	movlw	1
  5889  001AAA  6E29               	movwf	_state,c
  5890                           
  5891                           ;main.c: 594: lcdInst(0xC0);;
  5892  001AAC  0EC0               	movlw	192
  5893  001AAE  ECE5  F018         	call	i2_lcdInst
  5894                           
  5895                           ;main.c: 595: putch(keys[keypress]);
  5896  001AB2  506B               	movf	interruptHandler@keypress,w,c
  5897  001AB4  0D01               	mullw	1
  5898  001AB6  0E4F               	movlw	low _keys
  5899  001AB8  24F3               	addwf	prodl,w,c
  5900  001ABA  6EF6               	movwf	tblptrl,c
  5901  001ABC  0EFE               	movlw	high _keys
  5902  001ABE  20F4               	addwfc	prodh,w,c
  5903  001AC0  6EF7               	movwf	tblptrh,c
  5904  001AC2                     	if	1	;There are 3 active tblptr bytes
  5905  001AC2  6AF8               	clrf	tblptru,c
  5906  001AC4  0E00               	movlw	low (__mediumconst shr (0+16))
  5907  001AC6  22F8               	addwfc	tblptru,f,c
  5908  001AC8                     	endif
  5909  001AC8  0008               	tblrd		*
  5910  001ACA  50F5               	movf	tablat,w,c
  5911  001ACC  ECDB  F018         	call	i2_putch
  5912                           
  5913                           ;main.c: 597: }
  5914  001AD0  D07C               	goto	i2l308
  5915  001AD2                     i2l301:
  5916                           
  5917                           ;main.c: 598: else if (temp == '6') {
  5918  001AD2  0E36               	movlw	54
  5919  001AD4  186C               	xorwf	interruptHandler@temp,w,c
  5920  001AD6  A4D8               	btfss	status,2,c
  5921  001AD8  D01F               	goto	i2l303
  5922                           
  5923                           ;main.c: 599: assembly_step = 6;
  5924  001ADA  0E00               	movlw	0
  5925  001ADC  6E28               	movwf	_assembly_step+1,c
  5926  001ADE  0E06               	movlw	6
  5927  001AE0  6E27               	movwf	_assembly_step,c
  5928                           
  5929                           ;main.c: 600: prev_state = state;
  5930  001AE2  C029  F023         	movff	_state,_prev_state
  5931  001AE6  C02A  F024         	movff	_state+1,_prev_state+1
  5932                           
  5933                           ;main.c: 601: state = 1;
  5934  001AEA  0E00               	movlw	0
  5935  001AEC  6E2A               	movwf	_state+1,c
  5936  001AEE  0E01               	movlw	1
  5937  001AF0  6E29               	movwf	_state,c
  5938                           
  5939                           ;main.c: 602: lcdInst(0xC0);;
  5940  001AF2  0EC0               	movlw	192
  5941  001AF4  ECE5  F018         	call	i2_lcdInst
  5942                           
  5943                           ;main.c: 603: putch(keys[keypress]);
  5944  001AF8  506B               	movf	interruptHandler@keypress,w,c
  5945  001AFA  0D01               	mullw	1
  5946  001AFC  0E4F               	movlw	low _keys
  5947  001AFE  24F3               	addwf	prodl,w,c
  5948  001B00  6EF6               	movwf	tblptrl,c
  5949  001B02  0EFE               	movlw	high _keys
  5950  001B04  20F4               	addwfc	prodh,w,c
  5951  001B06  6EF7               	movwf	tblptrh,c
  5952  001B08                     	if	1	;There are 3 active tblptr bytes
  5953  001B08  6AF8               	clrf	tblptru,c
  5954  001B0A  0E00               	movlw	low (__mediumconst shr (0+16))
  5955  001B0C  22F8               	addwfc	tblptru,f,c
  5956  001B0E                     	endif
  5957  001B0E  0008               	tblrd		*
  5958  001B10  50F5               	movf	tablat,w,c
  5959  001B12  ECDB  F018         	call	i2_putch
  5960                           
  5961                           ;main.c: 604: }
  5962  001B16  D059               	goto	i2l308
  5963  001B18                     i2l303:
  5964                           
  5965                           ;main.c: 605: else if (temp == '7'){
  5966  001B18  0E37               	movlw	55
  5967  001B1A  186C               	xorwf	interruptHandler@temp,w,c
  5968  001B1C  A4D8               	btfss	status,2,c
  5969  001B1E  D01F               	goto	i2l305
  5970                           
  5971                           ;main.c: 606: assembly_step = 7;
  5972  001B20  0E00               	movlw	0
  5973  001B22  6E28               	movwf	_assembly_step+1,c
  5974  001B24  0E07               	movlw	7
  5975  001B26  6E27               	movwf	_assembly_step,c
  5976                           
  5977                           ;main.c: 607: prev_state = state;
  5978  001B28  C029  F023         	movff	_state,_prev_state
  5979  001B2C  C02A  F024         	movff	_state+1,_prev_state+1
  5980                           
  5981                           ;main.c: 608: state = 1;
  5982  001B30  0E00               	movlw	0
  5983  001B32  6E2A               	movwf	_state+1,c
  5984  001B34  0E01               	movlw	1
  5985  001B36  6E29               	movwf	_state,c
  5986                           
  5987                           ;main.c: 609: lcdInst(0xC0);;
  5988  001B38  0EC0               	movlw	192
  5989  001B3A  ECE5  F018         	call	i2_lcdInst
  5990                           
  5991                           ;main.c: 610: putch(keys[keypress]);
  5992  001B3E  506B               	movf	interruptHandler@keypress,w,c
  5993  001B40  0D01               	mullw	1
  5994  001B42  0E4F               	movlw	low _keys
  5995  001B44  24F3               	addwf	prodl,w,c
  5996  001B46  6EF6               	movwf	tblptrl,c
  5997  001B48  0EFE               	movlw	high _keys
  5998  001B4A  20F4               	addwfc	prodh,w,c
  5999  001B4C  6EF7               	movwf	tblptrh,c
  6000  001B4E                     	if	1	;There are 3 active tblptr bytes
  6001  001B4E  6AF8               	clrf	tblptru,c
  6002  001B50  0E00               	movlw	low (__mediumconst shr (0+16))
  6003  001B52  22F8               	addwfc	tblptru,f,c
  6004  001B54                     	endif
  6005  001B54  0008               	tblrd		*
  6006  001B56  50F5               	movf	tablat,w,c
  6007  001B58  ECDB  F018         	call	i2_putch
  6008                           
  6009                           ;main.c: 612: }
  6010  001B5C  D036               	goto	i2l308
  6011  001B5E                     i2l305:
  6012                           
  6013                           ;main.c: 613: else if (temp == '8'){
  6014  001B5E  0E38               	movlw	56
  6015  001B60  186C               	xorwf	interruptHandler@temp,w,c
  6016  001B62  A4D8               	btfss	status,2,c
  6017  001B64  D01F               	goto	i2l307
  6018                           
  6019                           ;main.c: 614: assembly_step = 8;
  6020  001B66  0E00               	movlw	0
  6021  001B68  6E28               	movwf	_assembly_step+1,c
  6022  001B6A  0E08               	movlw	8
  6023  001B6C  6E27               	movwf	_assembly_step,c
  6024                           
  6025                           ;main.c: 615: prev_state = state;
  6026  001B6E  C029  F023         	movff	_state,_prev_state
  6027  001B72  C02A  F024         	movff	_state+1,_prev_state+1
  6028                           
  6029                           ;main.c: 616: state = 1;
  6030  001B76  0E00               	movlw	0
  6031  001B78  6E2A               	movwf	_state+1,c
  6032  001B7A  0E01               	movlw	1
  6033  001B7C  6E29               	movwf	_state,c
  6034                           
  6035                           ;main.c: 617: lcdInst(0xC0);;
  6036  001B7E  0EC0               	movlw	192
  6037  001B80  ECE5  F018         	call	i2_lcdInst
  6038                           
  6039                           ;main.c: 618: putch(keys[keypress]);
  6040  001B84  506B               	movf	interruptHandler@keypress,w,c
  6041  001B86  0D01               	mullw	1
  6042  001B88  0E4F               	movlw	low _keys
  6043  001B8A  24F3               	addwf	prodl,w,c
  6044  001B8C  6EF6               	movwf	tblptrl,c
  6045  001B8E  0EFE               	movlw	high _keys
  6046  001B90  20F4               	addwfc	prodh,w,c
  6047  001B92  6EF7               	movwf	tblptrh,c
  6048  001B94                     	if	1	;There are 3 active tblptr bytes
  6049  001B94  6AF8               	clrf	tblptru,c
  6050  001B96  0E00               	movlw	low (__mediumconst shr (0+16))
  6051  001B98  22F8               	addwfc	tblptru,f,c
  6052  001B9A                     	endif
  6053  001B9A  0008               	tblrd		*
  6054  001B9C  50F5               	movf	tablat,w,c
  6055  001B9E  ECDB  F018         	call	i2_putch
  6056                           
  6057                           ;main.c: 620: }
  6058  001BA2  D013               	goto	i2l308
  6059  001BA4                     i2l307:
  6060                           
  6061                           ;main.c: 621: else{
  6062                           ;main.c: 627: initLCD();
  6063  001BA4  EC61  F017         	call	i2_initLCD	;wreg free
  6064                           
  6065                           ;main.c: 628: printf("Wrong number! ");
  6066  001BA8  0E0E               	movlw	low STR_50
  6067  001BAA  6E43               	movwf	i2printf@f,c
  6068  001BAC  0EFF               	movlw	high STR_50
  6069  001BAE  6E44               	movwf	i2printf@f+1,c
  6070  001BB0  EC35  F013         	call	i2_printf	;wreg free
  6071                           
  6072                           ;main.c: 629: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6073  001BB4  0E33               	movlw	51
  6074  001BB6  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6075  001BB8  0EBB               	movlw	187
  6076  001BBA  6E52               	movwf	??_interruptHandler& (0+255),c
  6077  001BBC  0EE0               	movlw	224
  6078  001BBE                     i2u479_47:
  6079  001BBE  2EE8               	decfsz	wreg,f,c
  6080  001BC0  D7FE               	bra	i2u479_47
  6081  001BC2  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6082  001BC4  D7FC               	bra	i2u479_47
  6083  001BC6  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6084  001BC8  D7FA               	bra	i2u479_47
  6085  001BCA                     i2l308:
  6086                           
  6087                           ;main.c: 631: }
  6088                           ;main.c: 637: generate_compartment_array(assembly_step);
  6089  001BCA  C027  F037         	movff	_assembly_step,generate_compartment_array@step
  6090  001BCE  C028  F038         	movff	_assembly_step+1,generate_compartment_array@step+1
  6091  001BD2  ECF5  F010         	call	_generate_compartment_array	;wreg free
  6092  001BD6  D2E2               	goto	L10
  6093  001BD8                     i2l298:
  6094                           
  6095                           ;main.c: 644: }
  6096                           ;main.c: 652: if(state == 1){
  6097  001BD8  0429               	decf	_state,w,c
  6098  001BDA  102A               	iorwf	_state+1,w,c
  6099  001BDC  A4D8               	btfss	status,2,c
  6100  001BDE  D1A7               	goto	i2l309
  6101                           
  6102                           ;main.c: 659: if (temp == 'A'){
  6103  001BE0  0E41               	movlw	65
  6104  001BE2  186C               	xorwf	interruptHandler@temp,w,c
  6105  001BE4  A4D8               	btfss	status,2,c
  6106  001BE6  D004               	goto	i2l310
  6107                           
  6108                           ;main.c: 660: state = prev_state;
  6109  001BE8  C023  F029         	movff	_prev_state,_state
  6110  001BEC  C024  F02A         	movff	_prev_state+1,_state+1
  6111  001BF0                     i2l310:
  6112                           
  6113                           ;main.c: 661: }
  6114                           ;main.c: 663: if (temp == '1'){
  6115  001BF0  0E31               	movlw	49
  6116  001BF2  186C               	xorwf	interruptHandler@temp,w,c
  6117  001BF4  A4D8               	btfss	status,2,c
  6118  001BF6  D01D               	goto	i2l311
  6119                           
  6120                           ;main.c: 664: lcdInst(0xC0);;
  6121  001BF8  0EC0               	movlw	192
  6122  001BFA  ECE5  F018         	call	i2_lcdInst
  6123                           
  6124                           ;main.c: 665: putch('B');
  6125  001BFE  0E42               	movlw	66
  6126  001C00  ECDB  F018         	call	i2_putch
  6127                           
  6128                           ;main.c: 666: strcpy(temp_set,"B");
  6129  001C04  0EDB               	movlw	low _temp_set
  6130  001C06  6E3D               	movwf	strcpy@to,c
  6131  001C08  0E00               	movlw	high _temp_set
  6132  001C0A  6E3E               	movwf	strcpy@to+1,c
  6133  001C0C  0EFA               	movlw	low STR_51
  6134  001C0E  6E3F               	movwf	strcpy@from,c
  6135  001C10  0EFF               	movlw	high STR_51
  6136  001C12  6E40               	movwf	strcpy@from+1,c
  6137  001C14  ECF5  F017         	call	_strcpy	;wreg free
  6138                           
  6139                           ;main.c: 667: strcat(current_set,temp_set);
  6140  001C18  0EE0               	movlw	low _current_set
  6141  001C1A  6E37               	movwf	strcat@to,c
  6142  001C1C  0E00               	movlw	high _current_set
  6143  001C1E  6E38               	movwf	strcat@to+1,c
  6144  001C20  0EDB               	movlw	low _temp_set
  6145  001C22  6E39               	movwf	strcat@from,c
  6146  001C24  0E00               	movlw	high _temp_set
  6147  001C26  6E3A               	movwf	strcat@from+1,c
  6148  001C28  EC5B  F018         	call	_strcat	;wreg free
  6149                           
  6150                           ;main.c: 668: counter++;
  6151  001C2C  0100               	movlb	0	; () banked
  6152  001C2E  4BD7               	infsnz	_counter& (0+255),f,b
  6153  001C30  2BD8               	incf	(_counter+1)& (0+255),f,b
  6154  001C32                     i2l311:
  6155                           
  6156                           ;main.c: 669: }
  6157                           ;main.c: 671: if(temp == '2'){
  6158                           
  6159                           ; BSR set to: 0
  6160  001C32  0E32               	movlw	50
  6161  001C34  186C               	xorwf	interruptHandler@temp,w,c
  6162  001C36  A4D8               	btfss	status,2,c
  6163  001C38  D01D               	goto	i2l312
  6164                           
  6165                           ;main.c: 672: lcdInst(0xC0);;
  6166  001C3A  0EC0               	movlw	192
  6167  001C3C  ECE5  F018         	call	i2_lcdInst
  6168                           
  6169                           ;main.c: 673: putch('N');
  6170  001C40  0E4E               	movlw	78
  6171  001C42  ECDB  F018         	call	i2_putch
  6172                           
  6173                           ;main.c: 674: strcpy(temp_set,"N");
  6174  001C46  0EDB               	movlw	low _temp_set
  6175  001C48  6E3D               	movwf	strcpy@to,c
  6176  001C4A  0E00               	movlw	high _temp_set
  6177  001C4C  6E3E               	movwf	strcpy@to+1,c
  6178  001C4E  0ED7               	movlw	low (STR_72+2)
  6179  001C50  6E3F               	movwf	strcpy@from,c
  6180  001C52  0EFF               	movlw	high (STR_72+2)
  6181  001C54  6E40               	movwf	strcpy@from+1,c
  6182  001C56  ECF5  F017         	call	_strcpy	;wreg free
  6183                           
  6184                           ;main.c: 675: strcat(current_set,temp_set);
  6185  001C5A  0EE0               	movlw	low _current_set
  6186  001C5C  6E37               	movwf	strcat@to,c
  6187  001C5E  0E00               	movlw	high _current_set
  6188  001C60  6E38               	movwf	strcat@to+1,c
  6189  001C62  0EDB               	movlw	low _temp_set
  6190  001C64  6E39               	movwf	strcat@from,c
  6191  001C66  0E00               	movlw	high _temp_set
  6192  001C68  6E3A               	movwf	strcat@from+1,c
  6193  001C6A  EC5B  F018         	call	_strcat	;wreg free
  6194                           
  6195                           ;main.c: 676: counter++;
  6196  001C6E  0100               	movlb	0	; () banked
  6197  001C70  4BD7               	infsnz	_counter& (0+255),f,b
  6198  001C72  2BD8               	incf	(_counter+1)& (0+255),f,b
  6199  001C74                     i2l312:
  6200                           
  6201                           ;main.c: 677: }
  6202                           ;main.c: 679: if(temp == '3'){
  6203                           
  6204                           ; BSR set to: 0
  6205  001C74  0E33               	movlw	51
  6206  001C76  186C               	xorwf	interruptHandler@temp,w,c
  6207  001C78  A4D8               	btfss	status,2,c
  6208  001C7A  D01D               	goto	i2l313
  6209                           
  6210                           ;main.c: 680: lcdInst(0xC0);;
  6211  001C7C  0EC0               	movlw	192
  6212  001C7E  ECE5  F018         	call	i2_lcdInst
  6213                           
  6214                           ;main.c: 681: putch('S');
  6215  001C82  0E53               	movlw	83
  6216  001C84  ECDB  F018         	call	i2_putch
  6217                           
  6218                           ;main.c: 683: strcpy(temp_set,"S");
  6219  001C88  0EDB               	movlw	low _temp_set
  6220  001C8A  6E3D               	movwf	strcpy@to,c
  6221  001C8C  0E00               	movlw	high _temp_set
  6222  001C8E  6E3E               	movwf	strcpy@to+1,c
  6223  001C90  0EDB               	movlw	low (STR_73+2)
  6224  001C92  6E3F               	movwf	strcpy@from,c
  6225  001C94  0EFF               	movlw	high (STR_73+2)
  6226  001C96  6E40               	movwf	strcpy@from+1,c
  6227  001C98  ECF5  F017         	call	_strcpy	;wreg free
  6228                           
  6229                           ;main.c: 684: strcat(current_set,temp_set);
  6230  001C9C  0EE0               	movlw	low _current_set
  6231  001C9E  6E37               	movwf	strcat@to,c
  6232  001CA0  0E00               	movlw	high _current_set
  6233  001CA2  6E38               	movwf	strcat@to+1,c
  6234  001CA4  0EDB               	movlw	low _temp_set
  6235  001CA6  6E39               	movwf	strcat@from,c
  6236  001CA8  0E00               	movlw	high _temp_set
  6237  001CAA  6E3A               	movwf	strcat@from+1,c
  6238  001CAC  EC5B  F018         	call	_strcat	;wreg free
  6239                           
  6240                           ;main.c: 685: counter++;
  6241  001CB0  0100               	movlb	0	; () banked
  6242  001CB2  4BD7               	infsnz	_counter& (0+255),f,b
  6243  001CB4  2BD8               	incf	(_counter+1)& (0+255),f,b
  6244  001CB6                     i2l313:
  6245                           
  6246                           ;main.c: 686: }
  6247                           ;main.c: 687: if (temp == '4'){
  6248                           
  6249                           ; BSR set to: 0
  6250  001CB6  0E34               	movlw	52
  6251  001CB8  186C               	xorwf	interruptHandler@temp,w,c
  6252  001CBA  A4D8               	btfss	status,2,c
  6253  001CBC  D01D               	goto	i2l314
  6254                           
  6255                           ;main.c: 688: lcdInst(0xC0);;
  6256  001CBE  0EC0               	movlw	192
  6257  001CC0  ECE5  F018         	call	i2_lcdInst
  6258                           
  6259                           ;main.c: 689: putch('W');
  6260  001CC4  0E57               	movlw	87
  6261  001CC6  ECDB  F018         	call	i2_putch
  6262                           
  6263                           ;main.c: 691: strcpy(temp_set,"W");
  6264  001CCA  0EDB               	movlw	low _temp_set
  6265  001CCC  6E3D               	movwf	strcpy@to,c
  6266  001CCE  0E00               	movlw	high _temp_set
  6267  001CD0  6E3E               	movwf	strcpy@to+1,c
  6268  001CD2  0EDF               	movlw	low (STR_74+2)
  6269  001CD4  6E3F               	movwf	strcpy@from,c
  6270  001CD6  0EFF               	movlw	high (STR_74+2)
  6271  001CD8  6E40               	movwf	strcpy@from+1,c
  6272  001CDA  ECF5  F017         	call	_strcpy	;wreg free
  6273                           
  6274                           ;main.c: 692: strcat(current_set,temp_set);
  6275  001CDE  0EE0               	movlw	low _current_set
  6276  001CE0  6E37               	movwf	strcat@to,c
  6277  001CE2  0E00               	movlw	high _current_set
  6278  001CE4  6E38               	movwf	strcat@to+1,c
  6279  001CE6  0EDB               	movlw	low _temp_set
  6280  001CE8  6E39               	movwf	strcat@from,c
  6281  001CEA  0E00               	movlw	high _temp_set
  6282  001CEC  6E3A               	movwf	strcat@from+1,c
  6283  001CEE  EC5B  F018         	call	_strcat	;wreg free
  6284                           
  6285                           ;main.c: 694: counter++;
  6286  001CF2  0100               	movlb	0	; () banked
  6287  001CF4  4BD7               	infsnz	_counter& (0+255),f,b
  6288  001CF6  2BD8               	incf	(_counter+1)& (0+255),f,b
  6289  001CF8                     i2l314:
  6290                           
  6291                           ;main.c: 695: }
  6292                           ;main.c: 697: if (keys[keypress] == '*'){
  6293                           
  6294                           ; BSR set to: 0
  6295  001CF8  506B               	movf	interruptHandler@keypress,w,c
  6296  001CFA  0D01               	mullw	1
  6297  001CFC  0E4F               	movlw	low _keys
  6298  001CFE  24F3               	addwf	prodl,w,c
  6299  001D00  6EF6               	movwf	tblptrl,c
  6300  001D02  0EFE               	movlw	high _keys
  6301  001D04  20F4               	addwfc	prodh,w,c
  6302  001D06  6EF7               	movwf	tblptrh,c
  6303  001D08                     	if	1	;There are 3 active tblptr bytes
  6304  001D08  6AF8               	clrf	tblptru,c
  6305  001D0A  0E00               	movlw	low (__mediumconst shr (0+16))
  6306  001D0C  22F8               	addwfc	tblptru,f,c
  6307  001D0E                     	endif
  6308  001D0E  0008               	tblrd		*
  6309  001D10  50F5               	movf	tablat,w,c
  6310  001D12  0A2A               	xorlw	42
  6311  001D14  A4D8               	btfss	status,2,c
  6312  001D16  D0DE               	goto	i2l315
  6313                           
  6314                           ;main.c: 700: _delay((unsigned long)((500)*(40000000/4000.0)));
  6315  001D18  0E1A               	movlw	26
  6316  001D1A  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6317  001D1C  0E5E               	movlw	94
  6318  001D1E  6E52               	movwf	??_interruptHandler& (0+255),c
  6319  001D20  0E6E               	movlw	110
  6320  001D22                     i2u480_47:
  6321  001D22  2EE8               	decfsz	wreg,f,c
  6322  001D24  D7FE               	bra	i2u480_47
  6323  001D26  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6324  001D28  D7FC               	bra	i2u480_47
  6325  001D2A  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6326  001D2C  D7FA               	bra	i2u480_47
  6327  001D2E  D000               	nop2	
  6328                           
  6329                           ;main.c: 701: counter ++;
  6330  001D30  0100               	movlb	0	; () banked
  6331  001D32  4BD7               	infsnz	_counter& (0+255),f,b
  6332  001D34  2BD8               	incf	(_counter+1)& (0+255),f,b
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;main.c: 702: for (int i=0;i<20;i++){
  6336  001D36  0E00               	movlw	0
  6337  001D38  6E6A               	movwf	interruptHandler@i+1,c
  6338  001D3A  0E00               	movlw	0
  6339  001D3C  6E69               	movwf	interruptHandler@i,c
  6340                           
  6341                           ; BSR set to: 0
  6342  001D3E  BE6A               	btfsc	interruptHandler@i+1,7,c
  6343  001D40  D008               	goto	i2l316
  6344  001D42  506A               	movf	interruptHandler@i+1,w,c
  6345  001D44  E105               	bnz	i2u341_40
  6346  001D46  0E14               	movlw	20
  6347  001D48  5C69               	subwf	interruptHandler@i,w,c
  6348  001D4A  B0D8               	btfsc	status,0,c
  6349  001D4C  D08A               	goto	i2u343_40
  6350  001D4E  D001               	goto	i2l316
  6351  001D50                     i2u341_40:
  6352                           
  6353                           ; BSR set to: 0
  6354  001D50  D088               	goto	i2u343_40
  6355  001D52                     i2l316:
  6356                           
  6357                           ;main.c: 703: if (strncmp(current_set,strs[i],4) == 0){
  6358                           
  6359                           ; BSR set to: 0
  6360  001D52  0EE0               	movlw	low _current_set
  6361  001D54  6E3D               	movwf	strncmp@s1,c
  6362  001D56  0E00               	movlw	high _current_set
  6363  001D58  6E3E               	movwf	strncmp@s1+1,c
  6364  001D5A  C069  F037         	movff	interruptHandler@i,i2___wmul@multiplier
  6365  001D5E  C06A  F038         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
  6366  001D62  0E00               	movlw	0
  6367  001D64  6E3A               	movwf	i2___wmul@multiplicand+1,c
  6368  001D66  0E05               	movlw	5
  6369  001D68  6E39               	movwf	i2___wmul@multiplicand,c
  6370  001D6A  EC90  F018         	call	i2___wmul	;wreg free
  6371  001D6E  0E73               	movlw	low _strs
  6372  001D70  2437               	addwf	?i2___wmul,w,c
  6373  001D72  6E3F               	movwf	strncmp@s2,c
  6374  001D74  0EFE               	movlw	high _strs
  6375  001D76  2038               	addwfc	?i2___wmul+1,w,c
  6376  001D78  6E40               	movwf	strncmp@s2+1,c
  6377  001D7A  0E00               	movlw	0
  6378  001D7C  6E42               	movwf	strncmp@len+1,c
  6379  001D7E  0E04               	movlw	4
  6380  001D80  6E41               	movwf	strncmp@len,c
  6381  001D82  EC1D  F015         	call	_strncmp	;wreg free
  6382  001D86  503D               	movf	?_strncmp,w,c
  6383  001D88  103E               	iorwf	?_strncmp+1,w,c
  6384  001D8A  A4D8               	btfss	status,2,c
  6385  001D8C  D063               	goto	i2l318
  6386                           
  6387                           ;main.c: 704: strcpy(final_set[counter_step],current_set);
  6388  001D8E  C025  F037         	movff	_counter_step,i2___wmul@multiplier
  6389  001D92  C026  F038         	movff	_counter_step+1,i2___wmul@multiplier+1
  6390  001D96  0E00               	movlw	0
  6391  001D98  6E3A               	movwf	i2___wmul@multiplicand+1,c
  6392  001D9A  0E05               	movlw	5
  6393  001D9C  6E39               	movwf	i2___wmul@multiplicand,c
  6394  001D9E  EC90  F018         	call	i2___wmul	;wreg free
  6395  001DA2  0E58               	movlw	low _final_set
  6396  001DA4  2437               	addwf	?i2___wmul,w,c
  6397  001DA6  6E3D               	movwf	strcpy@to,c
  6398  001DA8  0E01               	movlw	high _final_set
  6399  001DAA  2038               	addwfc	?i2___wmul+1,w,c
  6400  001DAC  6E3E               	movwf	strcpy@to+1,c
  6401  001DAE  0EE0               	movlw	low _current_set
  6402  001DB0  6E3F               	movwf	strcpy@from,c
  6403  001DB2  0E00               	movlw	high _current_set
  6404  001DB4  6E40               	movwf	strcpy@from+1,c
  6405  001DB6  ECF5  F017         	call	_strcpy	;wreg free
  6406                           
  6407                           ;main.c: 705: strcpy(current_set2,current_set);
  6408  001DBA  0E30               	movlw	low _current_set2
  6409  001DBC  6E3D               	movwf	strcpy@to,c
  6410  001DBE  0E00               	movlw	high _current_set2
  6411  001DC0  6E3E               	movwf	strcpy@to+1,c
  6412  001DC2  0EE0               	movlw	low _current_set
  6413  001DC4  6E3F               	movwf	strcpy@from,c
  6414  001DC6  0E00               	movlw	high _current_set
  6415  001DC8  6E40               	movwf	strcpy@from+1,c
  6416  001DCA  ECF5  F017         	call	_strcpy	;wreg free
  6417                           
  6418                           ;main.c: 708: valid = 1;
  6419  001DCE  0E00               	movlw	0
  6420  001DD0  0100               	movlb	0	; () banked
  6421  001DD2  6FD4               	movwf	(_valid+1)& (0+255),b
  6422  001DD4  0E01               	movlw	1
  6423  001DD6  6FD3               	movwf	_valid& (0+255),b
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;main.c: 709: state = 2;
  6427  001DD8  0E00               	movlw	0
  6428  001DDA  6E2A               	movwf	_state+1,c
  6429  001DDC  0E02               	movlw	2
  6430  001DDE  6E29               	movwf	_state,c
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;main.c: 711: initLCD();
  6434  001DE0  EC61  F017         	call	i2_initLCD	;wreg free
  6435                           
  6436                           ;main.c: 712: printf("correct!");
  6437  001DE4  0E7F               	movlw	low STR_55
  6438  001DE6  6E43               	movwf	i2printf@f,c
  6439  001DE8  0EFF               	movlw	high STR_55
  6440  001DEA  6E44               	movwf	i2printf@f+1,c
  6441  001DEC  EC35  F013         	call	i2_printf	;wreg free
  6442                           
  6443                           ;main.c: 713: _delay((unsigned long)((500)*(40000000/4000.0)));
  6444  001DF0  0E1A               	movlw	26
  6445  001DF2  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6446  001DF4  0E5E               	movlw	94
  6447  001DF6  6E52               	movwf	??_interruptHandler& (0+255),c
  6448  001DF8  0E6E               	movlw	110
  6449  001DFA                     i2u481_47:
  6450  001DFA  2EE8               	decfsz	wreg,f,c
  6451  001DFC  D7FE               	bra	i2u481_47
  6452  001DFE  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6453  001E00  D7FC               	bra	i2u481_47
  6454  001E02  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6455  001E04  D7FA               	bra	i2u481_47
  6456  001E06  D000               	nop2	
  6457                           
  6458                           ;main.c: 715: printf("%s",current_set);
  6459  001E08  0EF5               	movlw	low STR_3
  6460  001E0A  6E43               	movwf	i2printf@f,c
  6461  001E0C  0EFF               	movlw	high STR_3
  6462  001E0E  6E44               	movwf	i2printf@f+1,c
  6463  001E10  0EE0               	movlw	low _current_set
  6464  001E12  6E45               	movwf	?i2_printf+2,c
  6465  001E14  0E00               	movlw	high _current_set
  6466  001E16  6E46               	movwf	?i2_printf+3,c
  6467  001E18  EC35  F013         	call	i2_printf	;wreg free
  6468                           
  6469                           ;main.c: 717: strcpy(current_set,"");
  6470  001E1C  0EE0               	movlw	low _current_set
  6471  001E1E  6E3D               	movwf	strcpy@to,c
  6472  001E20  0E00               	movlw	high _current_set
  6473  001E22  6E3E               	movwf	strcpy@to+1,c
  6474  001E24  0E1C               	movlw	low (STR_50+14)
  6475  001E26  6E3F               	movwf	strcpy@from,c
  6476  001E28  0EFF               	movlw	high (STR_50+14)
  6477  001E2A  6E40               	movwf	strcpy@from+1,c
  6478  001E2C  ECF5  F017         	call	_strcpy	;wreg free
  6479                           
  6480                           ;main.c: 718: _delay((unsigned long)((500)*(40000000/4000.0)));
  6481  001E30  0E1A               	movlw	26
  6482  001E32  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6483  001E34  0E5E               	movlw	94
  6484  001E36  6E52               	movwf	??_interruptHandler& (0+255),c
  6485  001E38  0E6E               	movlw	110
  6486  001E3A                     i2u482_47:
  6487  001E3A  2EE8               	decfsz	wreg,f,c
  6488  001E3C  D7FE               	bra	i2u482_47
  6489  001E3E  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6490  001E40  D7FC               	bra	i2u482_47
  6491  001E42  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6492  001E44  D7FA               	bra	i2u482_47
  6493  001E46  D000               	nop2	
  6494                           
  6495                           ;main.c: 719: counter = 0;
  6496  001E48  0E00               	movlw	0
  6497  001E4A  0100               	movlb	0	; () banked
  6498  001E4C  6FD8               	movwf	(_counter+1)& (0+255),b
  6499  001E4E  0E00               	movlw	0
  6500  001E50  6FD7               	movwf	_counter& (0+255),b
  6501                           
  6502                           ;main.c: 720: break;
  6503  001E52  D007               	goto	i2u343_40
  6504  001E54                     i2l318:
  6505                           
  6506                           ; BSR set to: 0
  6507  001E54  4A69               	infsnz	interruptHandler@i,f,c
  6508  001E56  2A6A               	incf	interruptHandler@i+1,f,c
  6509  001E58  BE6A               	btfsc	interruptHandler@i+1,7,c
  6510  001E5A  D77B               	goto	i2l316
  6511  001E5C  506A               	movf	interruptHandler@i+1,w,c
  6512  001E5E  E101               	bnz	i2l4380
  6513  001E60  D772               	goto	L5
  6514  001E62                     i2u343_40:
  6515  001E62                     i2l4380:
  6516                           
  6517                           ;main.c: 722: }
  6518                           ;main.c: 723: }
  6519                           ;main.c: 724: if (valid != 1){
  6520  001E62  0100               	movlb	0	; () banked
  6521  001E64  05D3               	decf	_valid& (0+255),w,b
  6522  001E66  11D4               	iorwf	(_valid+1)& (0+255),w,b
  6523  001E68  B4D8               	btfsc	status,2,c
  6524  001E6A  D030               	goto	i2l319
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;main.c: 726: initLCD();
  6528  001E6C  EC61  F017         	call	i2_initLCD	;wreg free
  6529                           
  6530                           ;main.c: 727: printf("wrong set!");
  6531  001E70  0E5F               	movlw	low STR_58
  6532  001E72  6E43               	movwf	i2printf@f,c
  6533  001E74  0EFF               	movlw	high STR_58
  6534  001E76  6E44               	movwf	i2printf@f+1,c
  6535  001E78  EC35  F013         	call	i2_printf	;wreg free
  6536                           
  6537                           ;main.c: 728: printf("%s",current_set);
  6538  001E7C  0EF5               	movlw	low STR_3
  6539  001E7E  6E43               	movwf	i2printf@f,c
  6540  001E80  0EFF               	movlw	high STR_3
  6541  001E82  6E44               	movwf	i2printf@f+1,c
  6542  001E84  0EE0               	movlw	low _current_set
  6543  001E86  6E45               	movwf	?i2_printf+2,c
  6544  001E88  0E00               	movlw	high _current_set
  6545  001E8A  6E46               	movwf	?i2_printf+3,c
  6546  001E8C  EC35  F013         	call	i2_printf	;wreg free
  6547                           
  6548                           ;main.c: 729: strcpy(current_set,"");
  6549  001E90  0EE0               	movlw	low _current_set
  6550  001E92  6E3D               	movwf	strcpy@to,c
  6551  001E94  0E00               	movlw	high _current_set
  6552  001E96  6E3E               	movwf	strcpy@to+1,c
  6553  001E98  0E1C               	movlw	low (STR_50+14)
  6554  001E9A  6E3F               	movwf	strcpy@from,c
  6555  001E9C  0EFF               	movlw	high (STR_50+14)
  6556  001E9E  6E40               	movwf	strcpy@from+1,c
  6557  001EA0  ECF5  F017         	call	_strcpy	;wreg free
  6558                           
  6559                           ;main.c: 730: _delay((unsigned long)((300)*(40000000/4000.0)));
  6560  001EA4  0E10               	movlw	16
  6561  001EA6  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6562  001EA8  0E39               	movlw	57
  6563  001EAA  6E52               	movwf	??_interruptHandler& (0+255),c
  6564  001EAC  0E0E               	movlw	14
  6565  001EAE                     i2u483_47:
  6566  001EAE  2EE8               	decfsz	wreg,f,c
  6567  001EB0  D7FE               	bra	i2u483_47
  6568  001EB2  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6569  001EB4  D7FC               	bra	i2u483_47
  6570  001EB6  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6571  001EB8  D7FA               	bra	i2u483_47
  6572                           
  6573                           ;main.c: 731: counter = 0;
  6574  001EBA  0E00               	movlw	0
  6575  001EBC  0100               	movlb	0	; () banked
  6576  001EBE  6FD8               	movwf	(_counter+1)& (0+255),b
  6577  001EC0  0E00               	movlw	0
  6578  001EC2  6FD7               	movwf	_counter& (0+255),b
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;main.c: 732: valid = 0;
  6582  001EC4  0E00               	movlw	0
  6583  001EC6  6FD4               	movwf	(_valid+1)& (0+255),b
  6584  001EC8  0E00               	movlw	0
  6585  001ECA  6FD3               	movwf	_valid& (0+255),b
  6586  001ECC                     i2l319:
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;main.c: 733: }
  6590                           ;main.c: 734: valid = 0;
  6591                           
  6592                           ; BSR set to: 0
  6593  001ECC  0E00               	movlw	0
  6594  001ECE  6FD4               	movwf	(_valid+1)& (0+255),b
  6595  001ED0  0E00               	movlw	0
  6596  001ED2  6FD3               	movwf	_valid& (0+255),b
  6597  001ED4                     i2l315:
  6598                           
  6599                           ;main.c: 736: }
  6600                           ;main.c: 739: if (counter >= 5){
  6601                           
  6602                           ; BSR set to: 0
  6603  001ED4  0100               	movlb	0	; () banked
  6604  001ED6  BFD8               	btfsc	(_counter+1)& (0+255),7,b
  6605  001ED8  D161               	goto	L10
  6606  001EDA  51D8               	movf	(_counter+1)& (0+255),w,b
  6607  001EDC  E104               	bnz	i2u345_40
  6608  001EDE  0E05               	movlw	5
  6609  001EE0  5DD7               	subwf	_counter& (0+255),w,b
  6610  001EE2  A0D8               	btfss	status,0,c
  6611  001EE4  D15B               	goto	L10
  6612  001EE6                     i2u345_40:
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;main.c: 741: initLCD();
  6616  001EE6  EC61  F017         	call	i2_initLCD	;wreg free
  6617                           
  6618                           ;main.c: 742: printf("wrong!");
  6619  001EEA  0EA0               	movlw	low STR_61
  6620  001EEC  6E43               	movwf	i2printf@f,c
  6621  001EEE  0EFF               	movlw	high STR_61
  6622  001EF0  6E44               	movwf	i2printf@f+1,c
  6623  001EF2  EC35  F013         	call	i2_printf	;wreg free
  6624                           
  6625                           ;main.c: 744: _delay((unsigned long)((500)*(40000000/4000.0)));
  6626  001EF6  0E1A               	movlw	26
  6627  001EF8  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6628  001EFA  0E5E               	movlw	94
  6629  001EFC  6E52               	movwf	??_interruptHandler& (0+255),c
  6630  001EFE  0E6E               	movlw	110
  6631  001F00                     i2u484_47:
  6632  001F00  2EE8               	decfsz	wreg,f,c
  6633  001F02  D7FE               	bra	i2u484_47
  6634  001F04  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6635  001F06  D7FC               	bra	i2u484_47
  6636  001F08  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6637  001F0A  D7FA               	bra	i2u484_47
  6638  001F0C  D000               	nop2	
  6639                           
  6640                           ;main.c: 746: strcpy(current_set,"");
  6641  001F0E  0EE0               	movlw	low _current_set
  6642  001F10  6E3D               	movwf	strcpy@to,c
  6643  001F12  0E00               	movlw	high _current_set
  6644  001F14  6E3E               	movwf	strcpy@to+1,c
  6645  001F16  0E1C               	movlw	low (STR_50+14)
  6646  001F18  6E3F               	movwf	strcpy@from,c
  6647  001F1A  0EFF               	movlw	high (STR_50+14)
  6648  001F1C  6E40               	movwf	strcpy@from+1,c
  6649  001F1E  ECF5  F017         	call	_strcpy	;wreg free
  6650                           
  6651                           ;main.c: 749: counter = 0;
  6652  001F22  0E00               	movlw	0
  6653  001F24  0100               	movlb	0	; () banked
  6654  001F26  6FD8               	movwf	(_counter+1)& (0+255),b
  6655  001F28  0E00               	movlw	0
  6656  001F2A  6FD7               	movwf	_counter& (0+255),b
  6657                           
  6658                           ; BSR set to: 0
  6659  001F2C  D137               	goto	L10
  6660  001F2E                     i2l309:
  6661                           
  6662                           ;main.c: 754: }
  6663                           ;main.c: 759: if (state ==2){
  6664                           
  6665                           ; BSR set to: 0
  6666  001F2E  0E02               	movlw	2
  6667  001F30  1829               	xorwf	_state,w,c
  6668  001F32  102A               	iorwf	_state+1,w,c
  6669  001F34  A4D8               	btfss	status,2,c
  6670  001F36  D11D               	goto	i2l337
  6671                           
  6672                           ;main.c: 760: counter = 0;
  6673  001F38  0E00               	movlw	0
  6674  001F3A  0100               	movlb	0	; () banked
  6675  001F3C  6FD8               	movwf	(_counter+1)& (0+255),b
  6676  001F3E  0E00               	movlw	0
  6677  001F40  6FD7               	movwf	_counter& (0+255),b
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;main.c: 762: lcdInst(0xC0);;
  6681  001F42  0EC0               	movlw	192
  6682  001F44  ECE5  F018         	call	i2_lcdInst
  6683                           
  6684                           ;main.c: 763: putch(keys[keypress]);
  6685  001F48  506B               	movf	interruptHandler@keypress,w,c
  6686  001F4A  0D01               	mullw	1
  6687  001F4C  0E4F               	movlw	low _keys
  6688  001F4E  24F3               	addwf	prodl,w,c
  6689  001F50  6EF6               	movwf	tblptrl,c
  6690  001F52  0EFE               	movlw	high _keys
  6691  001F54  20F4               	addwfc	prodh,w,c
  6692  001F56  6EF7               	movwf	tblptrh,c
  6693  001F58                     	if	1	;There are 3 active tblptr bytes
  6694  001F58  6AF8               	clrf	tblptru,c
  6695  001F5A  0E00               	movlw	low (__mediumconst shr (0+16))
  6696  001F5C  22F8               	addwfc	tblptru,f,c
  6697  001F5E                     	endif
  6698  001F5E  0008               	tblrd		*
  6699  001F60  50F5               	movf	tablat,w,c
  6700  001F62  ECDB  F018         	call	i2_putch
  6701                           
  6702                           ;main.c: 765: _delay((unsigned long)((500)*(40000000/4000.0)));
  6703  001F66  0E1A               	movlw	26
  6704  001F68  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6705  001F6A  0E5E               	movlw	94
  6706  001F6C  6E52               	movwf	??_interruptHandler& (0+255),c
  6707  001F6E  0E6E               	movlw	110
  6708  001F70                     i2u485_47:
  6709  001F70  2EE8               	decfsz	wreg,f,c
  6710  001F72  D7FE               	bra	i2u485_47
  6711  001F74  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6712  001F76  D7FC               	bra	i2u485_47
  6713  001F78  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6714  001F7A  D7FA               	bra	i2u485_47
  6715  001F7C  D000               	nop2	
  6716                           
  6717                           ;main.c: 767: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
  6718  001F7E  506B               	movf	interruptHandler@keypress,w,c
  6719  001F80  0D01               	mullw	1
  6720  001F82  0E4F               	movlw	low _keys
  6721  001F84  24F3               	addwf	prodl,w,c
  6722  001F86  6EF6               	movwf	tblptrl,c
  6723  001F88  0EFE               	movlw	high _keys
  6724  001F8A  20F4               	addwfc	prodh,w,c
  6725  001F8C  6EF7               	movwf	tblptrh,c
  6726  001F8E                     	if	1	;There are 3 active tblptr bytes
  6727  001F8E  6AF8               	clrf	tblptru,c
  6728  001F90  0E00               	movlw	low (__mediumconst shr (0+16))
  6729  001F92  22F8               	addwfc	tblptru,f,c
  6730  001F94                     	endif
  6731  001F94  0008               	tblrd		*
  6732  001F96  50F5               	movf	tablat,w,c
  6733  001F98  0A31               	xorlw	49
  6734  001F9A  B4D8               	btfsc	status,2,c
  6735  001F9C  D05A               	goto	i2l325
  6736  001F9E  506B               	movf	interruptHandler@keypress,w,c
  6737  001FA0  0D01               	mullw	1
  6738  001FA2  0E4F               	movlw	low _keys
  6739  001FA4  24F3               	addwf	prodl,w,c
  6740  001FA6  6EF6               	movwf	tblptrl,c
  6741  001FA8  0EFE               	movlw	high _keys
  6742  001FAA  20F4               	addwfc	prodh,w,c
  6743  001FAC  6EF7               	movwf	tblptrh,c
  6744  001FAE                     	if	1	;There are 3 active tblptr bytes
  6745  001FAE  6AF8               	clrf	tblptru,c
  6746  001FB0  0E00               	movlw	low (__mediumconst shr (0+16))
  6747  001FB2  22F8               	addwfc	tblptru,f,c
  6748  001FB4                     	endif
  6749  001FB4  0008               	tblrd		*
  6750  001FB6  50F5               	movf	tablat,w,c
  6751  001FB8  0A32               	xorlw	50
  6752  001FBA  B4D8               	btfsc	status,2,c
  6753  001FBC  D04A               	goto	i2l325
  6754  001FBE  506B               	movf	interruptHandler@keypress,w,c
  6755  001FC0  0D01               	mullw	1
  6756  001FC2  0E4F               	movlw	low _keys
  6757  001FC4  24F3               	addwf	prodl,w,c
  6758  001FC6  6EF6               	movwf	tblptrl,c
  6759  001FC8  0EFE               	movlw	high _keys
  6760  001FCA  20F4               	addwfc	prodh,w,c
  6761  001FCC  6EF7               	movwf	tblptrh,c
  6762  001FCE                     	if	1	;There are 3 active tblptr bytes
  6763  001FCE  6AF8               	clrf	tblptru,c
  6764  001FD0  0E00               	movlw	low (__mediumconst shr (0+16))
  6765  001FD2  22F8               	addwfc	tblptru,f,c
  6766  001FD4                     	endif
  6767  001FD4  0008               	tblrd		*
  6768  001FD6  50F5               	movf	tablat,w,c
  6769  001FD8  0A33               	xorlw	51
  6770  001FDA  B4D8               	btfsc	status,2,c
  6771  001FDC  D03A               	goto	i2l325
  6772  001FDE  506B               	movf	interruptHandler@keypress,w,c
  6773  001FE0  0D01               	mullw	1
  6774  001FE2  0E4F               	movlw	low _keys
  6775  001FE4  24F3               	addwf	prodl,w,c
  6776  001FE6  6EF6               	movwf	tblptrl,c
  6777  001FE8  0EFE               	movlw	high _keys
  6778  001FEA  20F4               	addwfc	prodh,w,c
  6779  001FEC  6EF7               	movwf	tblptrh,c
  6780  001FEE                     	if	1	;There are 3 active tblptr bytes
  6781  001FEE  6AF8               	clrf	tblptru,c
  6782  001FF0  0E00               	movlw	low (__mediumconst shr (0+16))
  6783  001FF2  22F8               	addwfc	tblptru,f,c
  6784  001FF4                     	endif
  6785  001FF4  0008               	tblrd		*
  6786  001FF6  50F5               	movf	tablat,w,c
  6787  001FF8  0A34               	xorlw	52
  6788  001FFA  B4D8               	btfsc	status,2,c
  6789  001FFC  D02A               	goto	i2l325
  6790  001FFE  D0B9               	goto	i2l337
  6791  002000                     
  6792                           ;main.c: 771: number = 1;
  6793  002000  0E00               	movlw	0
  6794  002002  6E36               	movwf	_number+1,c
  6795  002004  0E01               	movlw	1
  6796  002006  D00F               	goto	L9
  6797  002008                     
  6798                           ;main.c: 774: number = 2;
  6799  002008  0E00               	movlw	0
  6800  00200A  6E36               	movwf	_number+1,c
  6801  00200C  0E02               	movlw	2
  6802  00200E  D00B               	goto	L9
  6803  002010                     
  6804                           ;main.c: 777: number = 3;
  6805  002010  0E00               	movlw	0
  6806  002012  6E36               	movwf	_number+1,c
  6807  002014  0E03               	movlw	3
  6808  002016  D007               	goto	L9
  6809  002018                     
  6810                           ;main.c: 780: number = 4;
  6811  002018  0E00               	movlw	0
  6812  00201A  6E36               	movwf	_number+1,c
  6813  00201C  0E04               	movlw	4
  6814  00201E  D003               	goto	L9
  6815  002020                     
  6816                           ;main.c: 783: number = 5;
  6817  002020  0E00               	movlw	0
  6818  002022  6E36               	movwf	_number+1,c
  6819  002024  0E05               	movlw	5
  6820  002026                     L9:
  6821  002026  6E35               	movwf	_number,c
  6822                           
  6823                           ;main.c: 784: break;
  6824  002028  D031               	goto	i2l327
  6825  00202A                     
  6826                           ;main.c: 786: initLCD();
  6827  00202A  EC61  F017         	call	i2_initLCD	;wreg free
  6828                           
  6829                           ;main.c: 787: printf("Wrong input");
  6830  00202E  0E53               	movlw	low STR_63
  6831  002030  6E43               	movwf	i2printf@f,c
  6832  002032  0EFF               	movlw	high STR_63
  6833  002034  6E44               	movwf	i2printf@f+1,c
  6834  002036  EC35  F013         	call	i2_printf	;wreg free
  6835                           
  6836                           ;main.c: 788: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6837  00203A  0E33               	movlw	51
  6838  00203C  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6839  00203E  0EBB               	movlw	187
  6840  002040  6E52               	movwf	??_interruptHandler& (0+255),c
  6841  002042  0EE0               	movlw	224
  6842  002044                     i2u486_47:
  6843  002044  2EE8               	decfsz	wreg,f,c
  6844  002046  D7FE               	bra	i2u486_47
  6845  002048  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6846  00204A  D7FC               	bra	i2u486_47
  6847  00204C  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6848  00204E  D7FA               	bra	i2u486_47
  6849                           
  6850                           ;main.c: 789: }
  6851  002050  D01D               	goto	i2l327
  6852  002052                     i2l325:
  6853  002052  506B               	movf	interruptHandler@keypress,w,c
  6854  002054  0D01               	mullw	1
  6855  002056  0E4F               	movlw	low _keys
  6856  002058  24F3               	addwf	prodl,w,c
  6857  00205A  6EF6               	movwf	tblptrl,c
  6858  00205C  0EFE               	movlw	high _keys
  6859  00205E  20F4               	addwfc	prodh,w,c
  6860  002060  6EF7               	movwf	tblptrh,c
  6861  002062                     	if	1	;There are 3 active tblptr bytes
  6862  002062  6AF8               	clrf	tblptru,c
  6863  002064  0E00               	movlw	low (__mediumconst shr (0+16))
  6864  002066  22F8               	addwfc	tblptru,f,c
  6865  002068                     	endif
  6866  002068  0008               	tblrd		*
  6867  00206A  50F5               	movf	tablat,w,c
  6868                           
  6869                           ; Switch size 1, requested type "space"
  6870                           ; Number of cases is 5, Range of values is 49 to 53
  6871                           ; switch strategies available:
  6872                           ; Name         Instructions Cycles
  6873                           ; simple_byte           16     9 (average)
  6874                           ;	Chosen strategy is simple_byte
  6875  00206C  0A31               	xorlw	49	; case 49
  6876  00206E  B4D8               	btfsc	status,2,c
  6877  002070  D7C7               	goto	i2l326
  6878  002072  0A03               	xorlw	3	; case 50
  6879  002074  B4D8               	btfsc	status,2,c
  6880  002076  D7C8               	goto	i2l328
  6881  002078  0A01               	xorlw	1	; case 51
  6882  00207A  B4D8               	btfsc	status,2,c
  6883  00207C  D7C9               	goto	i2l329
  6884  00207E  0A07               	xorlw	7	; case 52
  6885  002080  B4D8               	btfsc	status,2,c
  6886  002082  D7CA               	goto	i2l330
  6887  002084  0A01               	xorlw	1	; case 53
  6888  002086  B4D8               	btfsc	status,2,c
  6889  002088  D7CB               	goto	i2l331
  6890  00208A  D7CF               	goto	i2l332
  6891  00208C                     i2l327:
  6892                           
  6893                           ;main.c: 792: is_valid();
  6894  00208C  EC09  F000         	call	_is_valid	;wreg free
  6895                           
  6896                           ;main.c: 794: if ( check() == 0){
  6897  002090  EC5B  F016         	call	_check	;wreg free
  6898  002094  5037               	movf	?_check,w,c
  6899  002096  1038               	iorwf	?_check+1,w,c
  6900  002098  A4D8               	btfss	status,2,c
  6901  00209A  D028               	goto	i2l333
  6902                           
  6903                           ;main.c: 795: initLCD();
  6904  00209C  EC61  F017         	call	i2_initLCD	;wreg free
  6905                           
  6906                           ;main.c: 796: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6907  0020A0  0E80               	movlw	128
  6908  0020A2  ECE5  F018         	call	i2_lcdInst
  6909  0020A6  0E41               	movlw	65
  6910  0020A8  6E52               	movwf	??_interruptHandler& (0+255),c
  6911  0020AA  0EEE               	movlw	238
  6912  0020AC                     i2u487_47:
  6913  0020AC  2EE8               	decfsz	wreg,f,c
  6914  0020AE  D7FE               	bra	i2u487_47
  6915  0020B0  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6916  0020B2  D7FC               	bra	i2u487_47
  6917  0020B4  D000               	nop2	
  6918                           
  6919                           ;main.c: 797: printf("TOO MANY");
  6920  0020B6  0E88               	movlw	low STR_64
  6921  0020B8  6E43               	movwf	i2printf@f,c
  6922  0020BA  0EFF               	movlw	high STR_64
  6923  0020BC  6E44               	movwf	i2printf@f+1,c
  6924  0020BE  EC35  F013         	call	i2_printf	;wreg free
  6925                           
  6926                           ;main.c: 799: _delay((unsigned long)((500)*(40000000/4000.0)));
  6927  0020C2  0E1A               	movlw	26
  6928  0020C4  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6929  0020C6  0E5E               	movlw	94
  6930  0020C8  6E52               	movwf	??_interruptHandler& (0+255),c
  6931  0020CA  0E6E               	movlw	110
  6932  0020CC                     i2u488_47:
  6933  0020CC  2EE8               	decfsz	wreg,f,c
  6934  0020CE  D7FE               	bra	i2u488_47
  6935  0020D0  2E52               	decfsz	??_interruptHandler& (0+255),f,c
  6936  0020D2  D7FC               	bra	i2u488_47
  6937  0020D4  2E53               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6938  0020D6  D7FA               	bra	i2u488_47
  6939  0020D8  D000               	nop2	
  6940                           
  6941                           ;main.c: 800: state = 2;
  6942  0020DA  0E00               	movlw	0
  6943  0020DC  6E2A               	movwf	_state+1,c
  6944  0020DE  0E02               	movlw	2
  6945  0020E0  6E29               	movwf	_state,c
  6946                           
  6947                           ;main.c: 801: number = 0;
  6948  0020E2  0E00               	movlw	0
  6949  0020E4  6E36               	movwf	_number+1,c
  6950  0020E6  0E00               	movlw	0
  6951  0020E8  6E35               	movwf	_number,c
  6952                           
  6953                           ;main.c: 802: }
  6954  0020EA  D043               	goto	i2l337
  6955  0020EC                     i2l333:
  6956                           
  6957                           ;main.c: 805: else if (counter_step >= assembly_step-1){
  6958  0020EC  0EFF               	movlw	255
  6959  0020EE  6E52               	movwf	??_interruptHandler& (0+255),c
  6960  0020F0  0EFF               	movlw	255
  6961  0020F2  6E53               	movwf	(??_interruptHandler+1)& (0+255),c
  6962  0020F4  C027  F054         	movff	_assembly_step,??_interruptHandler+2
  6963  0020F8  C028  F055         	movff	_assembly_step+1,??_interruptHandler+3
  6964  0020FC  5052               	movf	??_interruptHandler,w,c
  6965  0020FE  2654               	addwf	??_interruptHandler+2,f,c
  6966  002100  5053               	movf	??_interruptHandler+1,w,c
  6967  002102  2255               	addwfc	??_interruptHandler+3,f,c
  6968  002104  5054               	movf	??_interruptHandler+2,w,c
  6969  002106  5C25               	subwf	_counter_step,w,c
  6970  002108  5026               	movf	_counter_step+1,w,c
  6971  00210A  0A80               	xorlw	128
  6972  00210C  6E56               	movwf	(??_interruptHandler+4)& (0+255),c
  6973  00210E  5055               	movf	??_interruptHandler+3,w,c
  6974  002110  0A80               	xorlw	128
  6975  002112  5856               	subwfb	(??_interruptHandler+4)& (0+255),w,c
  6976  002114  A0D8               	btfss	status,0,c
  6977  002116  D012               	goto	i2l335
  6978                           
  6979                           ;main.c: 806: final_number[counter_step] = number;
  6980  002118  90D8               	bcf	status,0,c
  6981  00211A  3425               	rlcf	_counter_step,w,c
  6982  00211C  6ED9               	movwf	fsr2l,c
  6983  00211E  3426               	rlcf	_counter_step+1,w,c
  6984  002120  6EDA               	movwf	fsr2h,c
  6985  002122  0E20               	movlw	low _final_number
  6986  002124  26D9               	addwf	fsr2l,f,c
  6987  002126  0E01               	movlw	high _final_number
  6988  002128  22DA               	addwfc	fsr2h,f,c
  6989  00212A  C035  FFDE         	movff	_number,postinc2
  6990  00212E  C036  FFDD         	movff	_number+1,postdec2
  6991                           
  6992                           ;main.c: 807: state = 3;
  6993  002132  0E00               	movlw	0
  6994  002134  6E2A               	movwf	_state+1,c
  6995  002136  0E03               	movlw	3
  6996  002138  6E29               	movwf	_state,c
  6997                           
  6998                           ;main.c: 808: }
  6999  00213A  D01B               	goto	i2l337
  7000  00213C                     i2l335:
  7001                           
  7002                           ;main.c: 809: else if ( check() == 1){
  7003  00213C  EC5B  F016         	call	_check	;wreg free
  7004  002140  0437               	decf	?_check,w,c
  7005  002142  1038               	iorwf	?_check+1,w,c
  7006  002144  A4D8               	btfss	status,2,c
  7007  002146  D015               	goto	i2l337
  7008                           
  7009                           ;main.c: 810: state = 1;
  7010  002148  0E00               	movlw	0
  7011  00214A  6E2A               	movwf	_state+1,c
  7012  00214C  0E01               	movlw	1
  7013  00214E  6E29               	movwf	_state,c
  7014                           
  7015                           ;main.c: 811: initLCD();
  7016  002150  EC61  F017         	call	i2_initLCD	;wreg free
  7017                           
  7018                           ;main.c: 814: final_number[counter_step] = number;
  7019  002154  90D8               	bcf	status,0,c
  7020  002156  3425               	rlcf	_counter_step,w,c
  7021  002158  6ED9               	movwf	fsr2l,c
  7022  00215A  3426               	rlcf	_counter_step+1,w,c
  7023  00215C  6EDA               	movwf	fsr2h,c
  7024  00215E  0E20               	movlw	low _final_number
  7025  002160  26D9               	addwf	fsr2l,f,c
  7026  002162  0E01               	movlw	high _final_number
  7027  002164  22DA               	addwfc	fsr2h,f,c
  7028  002166  C035  FFDE         	movff	_number,postinc2
  7029  00216A  C036  FFDD         	movff	_number+1,postdec2
  7030                           
  7031                           ;main.c: 815: counter_step++;
  7032  00216E  4A25               	infsnz	_counter_step,f,c
  7033  002170  2A26               	incf	_counter_step+1,f,c
  7034  002172                     i2l337:
  7035                           
  7036                           ;main.c: 816: }
  7037                           ;main.c: 819: }
  7038                           ;main.c: 821: }
  7039                           ;main.c: 828: B=0;N=0;S=0;W=0;
  7040  002172  0E00               	movlw	0
  7041  002174  6E22               	movwf	_B+1,c
  7042  002176  0E00               	movlw	0
  7043  002178  6E21               	movwf	_B,c
  7044  00217A  0E00               	movlw	0
  7045  00217C  6E20               	movwf	_N+1,c
  7046  00217E  0E00               	movlw	0
  7047  002180  6E1F               	movwf	_N,c
  7048  002182  0E00               	movlw	0
  7049  002184  6E1E               	movwf	_S+1,c
  7050  002186  0E00               	movlw	0
  7051  002188  6E1D               	movwf	_S,c
  7052  00218A  0E00               	movlw	0
  7053  00218C  6E1C               	movwf	_W+1,c
  7054  00218E  0E00               	movlw	0
  7055  002190  6E1B               	movwf	_W,c
  7056                           
  7057                           ;main.c: 829: total_number = 0;
  7058  002192  0E00               	movlw	0
  7059  002194  0100               	movlb	0	; () banked
  7060  002196  6FD2               	movwf	(_total_number+1)& (0+255),b
  7061  002198  0E00               	movlw	0
  7062  00219A  6FD1               	movwf	_total_number& (0+255),b
  7063  00219C                     L10:
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;main.c: 831: INT1IF = 0;
  7067  00219C  90F0               	bcf	intcon3,0,c	;volatile
  7068  00219E                     i2l4494:
  7069                           
  7070                           ; BSR set to: 0
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;main.c: 832: return;
  7074  00219E  C068  F072         	movff	??_interruptHandler+22,btemp+3
  7075  0021A2  C067  F071         	movff	??_interruptHandler+21,btemp+2
  7076  0021A6  C066  F070         	movff	??_interruptHandler+20,btemp+1
  7077  0021AA  C065  F06F         	movff	??_interruptHandler+19,btemp
  7078  0021AE  C064  FFF5         	movff	??_interruptHandler+18,tablat
  7079  0021B2  C063  FFF8         	movff	??_interruptHandler+17,tblptru
  7080  0021B6  C062  FFF7         	movff	??_interruptHandler+16,tblptrh
  7081  0021BA  C061  FFF6         	movff	??_interruptHandler+15,tblptrl
  7082  0021BE  C060  FFF4         	movff	??_interruptHandler+14,prodh
  7083  0021C2  C05F  FFF3         	movff	??_interruptHandler+13,prodl
  7084  0021C6  C05E  FFDA         	movff	??_interruptHandler+12,fsr2h
  7085  0021CA  C05D  FFD9         	movff	??_interruptHandler+11,fsr2l
  7086  0021CE  C05C  FFE2         	movff	??_interruptHandler+10,fsr1h
  7087  0021D2  C05B  FFE1         	movff	??_interruptHandler+9,fsr1l
  7088  0021D6  C05A  FFEA         	movff	??_interruptHandler+8,fsr0h
  7089  0021DA  C059  FFE9         	movff	??_interruptHandler+7,fsr0l
  7090  0021DE  C058  FFFB         	movff	??_interruptHandler+6,pclatu
  7091  0021E2  C057  FFFA         	movff	??_interruptHandler+5,pclath
  7092  0021E6  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7093  0021E8  0011               	retfie		f
  7094  0021EA                     __end_of_interruptHandler:
  7095                           	opt stack 0
  7096                           pclatu	equ	0xFFB
  7097                           pclath	equ	0xFFA
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon3	equ	0xFF0
  7106                           indf0	equ	0xFEF
  7107                           postinc0	equ	0xFEE
  7108                           fsr0h	equ	0xFEA
  7109                           fsr0l	equ	0xFE9
  7110                           wreg	equ	0xFE8
  7111                           indf1	equ	0xFE7
  7112                           postinc1	equ	0xFE6
  7113                           postdec1	equ	0xFE5
  7114                           fsr1h	equ	0xFE2
  7115                           fsr1l	equ	0xFE1
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function i2_printf *****************
  7124 ;; Defined at:
  7125 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7128 ;;		 -> STR_64(9), STR_63(12), STR_61(7), STR_59(3), 
  7129 ;;		 -> STR_58(11), STR_56(3), STR_55(9), STR_50(15), 
  7130 ;;		 -> STR_49(13), STR_48(11), STR_47(18), STR_46(3), 
  7131 ;;		 -> STR_45(2), prev_set(40), STR_44(5), STR_43(2), 
  7132 ;;		 -> STR_42(3), STR_41(12), STR_40(10), STR_39(10), 
  7133 ;;		 -> STR_38(5), STR_37(2), STR_36(3), STR_35(2), 
  7134 ;;		 -> STR_34(3), STR_33(4), STR_32(3), STR_31(4), 
  7135 ;;		 -> STR_30(3), STR_29(4), STR_28(3), STR_27(3), 
  7136 ;;		 -> STR_26(20), STR_25(2), STR_24(3), STR_23(2), 
  7137 ;;		 -> STR_22(3), STR_21(3), STR_20(4), STR_19(3), 
  7138 ;;		 -> STR_18(4), STR_17(3), STR_16(4), STR_15(3), 
  7139 ;;		 -> STR_14(4), STR_13(3), STR_12(3), STR_11(2), 
  7140 ;;		 -> STR_10(3), STR_9(2), STR_8(3), STR_7(5), 
  7141 ;;		 -> STR_6(17), STR_5(6), STR_4(8), STR_3(3), 
  7142 ;;		 -> STR_2(14), STR_1(15), 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  printf          4    0        struct .
  7145 ;;  printf          2   24[COMRAM] unsigned int 
  7146 ;;  printf          2   22[COMRAM] PTR const unsigned char 
  7147 ;;		 -> STR_85(7), number(2), final_set(40), current_set(5), 
  7148 ;;  printf          2   20[COMRAM] PTR void [1]
  7149 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7150 ;;  printf          2    0        unsigned int 
  7151 ;;  printf          1   26[COMRAM] char 
  7152 ;;  printf          1   19[COMRAM] char 
  7153 ;;  printf          1   18[COMRAM] unsigned char 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  2   12[COMRAM] int 
  7156 ;; Registers used:
  7157 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7163 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;Total ram usage:       15 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    2
  7170 ;; This function calls:
  7171 ;;		i2___lwdiv
  7172 ;;		i2___lwmod
  7173 ;;		i2_putch
  7174 ;; This function is called by:
  7175 ;;		_interruptHandler
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text19
  7180  00266A                     __ptext19:
  7181                           	opt stack 0
  7182  00266A                     i2_printf:
  7183                           	opt stack 24
  7184                           
  7185                           ;doprnt.c: 466: va_list ap;
  7186                           ;doprnt.c: 499: signed char c;
  7187                           ;doprnt.c: 506: signed char prec;
  7188                           ;doprnt.c: 508: unsigned char flag;
  7189                           ;doprnt.c: 523: union {
  7190                           ;doprnt.c: 524: unsigned long vd;
  7191                           ;doprnt.c: 525: double integ;
  7192                           ;doprnt.c: 526: } tmpval;
  7193                           ;doprnt.c: 528: unsigned int val;
  7194                           ;doprnt.c: 529: unsigned len;
  7195                           ;doprnt.c: 530: const char * cp;
  7196                           ;doprnt.c: 533: *ap = __va_start();
  7197                           
  7198                           ;incstack = 0
  7199  00266A  0E45               	movlw	low (?i2_printf+2)
  7200  00266C  6E4B               	movwf	i2printf@ap,c
  7201  00266E  0E00               	movlw	high (?i2_printf+2)
  7202  002670  6E4C               	movwf	i2printf@ap+1,c
  7203                           
  7204                           ;doprnt.c: 536: while(c = *f++) {
  7205  002672  D0DA               	goto	i2u285_40
  7206  002674                     
  7207                           ;doprnt.c: 538: if(c != '%')
  7208  002674  0E25               	movlw	37
  7209  002676  1851               	xorwf	i2printf@c,w,c
  7210  002678  B4D8               	btfsc	status,2,c
  7211  00267A  D004               	goto	i2l634
  7212                           
  7213                           ;doprnt.c: 540: {
  7214                           ;doprnt.c: 541: (putch(c) );
  7215  00267C  5051               	movf	i2printf@c,w,c
  7216  00267E  ECDB  F018         	call	i2_putch
  7217                           
  7218                           ;doprnt.c: 542: continue;
  7219  002682  D0D2               	goto	i2u285_40
  7220  002684                     i2l634:
  7221                           
  7222                           ;doprnt.c: 543: }
  7223                           ;doprnt.c: 548: flag = 0;
  7224  002684  0E00               	movlw	0
  7225  002686  6E49               	movwf	i2printf@flag,c
  7226                           
  7227                           ;doprnt.c: 635: switch(c = *f++) {
  7228  002688  D043               	goto	i2l635
  7229  00268A                     
  7230                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7231  00268A  C04B  FFD9         	movff	i2printf@ap,fsr2l
  7232  00268E  C04C  FFDA         	movff	i2printf@ap+1,fsr2h
  7233  002692  CFDE F04D          	movff	postinc2,i2printf@cp
  7234  002696  CFDD F04E          	movff	postdec2,i2printf@cp+1
  7235  00269A  0E02               	movlw	2
  7236  00269C  264B               	addwf	i2printf@ap,f,c
  7237  00269E  0E00               	movlw	0
  7238  0026A0  224C               	addwfc	i2printf@ap+1,f,c
  7239                           
  7240                           ;doprnt.c: 740: if(!cp)
  7241  0026A2  504D               	movf	i2printf@cp,w,c
  7242  0026A4  104E               	iorwf	i2printf@cp+1,w,c
  7243  0026A6  A4D8               	btfss	status,2,c
  7244  0026A8  D01A               	goto	i2l643
  7245                           
  7246                           ;doprnt.c: 741: cp = "(null)";
  7247  0026AA  0E99               	movlw	low STR_85
  7248  0026AC  6E4D               	movwf	i2printf@cp,c
  7249  0026AE  0EFF               	movlw	high STR_85
  7250  0026B0  6E4E               	movwf	i2printf@cp+1,c
  7251                           
  7252                           ;doprnt.c: 777: while(*cp)
  7253  0026B2  D015               	goto	i2l643
  7254  0026B4                     
  7255                           ;doprnt.c: 778: (putch(*cp++) );
  7256  0026B4  C04D  FFF6         	movff	i2printf@cp,tblptrl
  7257  0026B8  C04E  FFF7         	movff	i2printf@cp+1,tblptrh
  7258  0026BC  0E00               	movlw	low (__mediumconst shr (0+16))
  7259  0026BE  6EF8               	movwf	tblptru,c
  7260  0026C0  0E0F               	movlw	(high __ramtop+-1)
  7261  0026C2  64F7               	cpfsgt	tblptrh,c
  7262  0026C4  D003               	bra	i2u276_47
  7263  0026C6  0008               	tblrd		*
  7264  0026C8  50F5               	movf	tablat,w,c
  7265  0026CA  D005               	bra	i2u276_40
  7266  0026CC                     i2u276_47:
  7267  0026CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  7268  0026D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  7269  0026D4  50EF               	movf	indf0,w,c
  7270  0026D6                     i2u276_40:
  7271  0026D6  ECDB  F018         	call	i2_putch
  7272  0026DA  4A4D               	infsnz	i2printf@cp,f,c
  7273  0026DC  2A4E               	incf	i2printf@cp+1,f,c
  7274  0026DE                     i2l643:
  7275  0026DE  C04D  FFF6         	movff	i2printf@cp,tblptrl
  7276  0026E2  C04E  FFF7         	movff	i2printf@cp+1,tblptrh
  7277  0026E6  0E00               	movlw	low (__mediumconst shr (0+16))
  7278  0026E8  6EF8               	movwf	tblptru,c
  7279  0026EA  0E0F               	movlw	(high __ramtop+-1)
  7280  0026EC  64F7               	cpfsgt	tblptrh,c
  7281  0026EE  D003               	bra	i2u277_47
  7282  0026F0  0008               	tblrd		*
  7283  0026F2  50F5               	movf	tablat,w,c
  7284  0026F4  D005               	bra	i2u277_40
  7285  0026F6                     i2u277_47:
  7286  0026F6  CFF6 FFE9          	movff	tblptrl,fsr0l
  7287  0026FA  CFF7 FFEA          	movff	tblptrh,fsr0h
  7288  0026FE  50EF               	movf	indf0,w,c
  7289  002700                     i2u277_40:
  7290  002700  0900               	iorlw	0
  7291  002702  B4D8               	btfsc	status,2,c
  7292  002704  D091               	goto	i2u285_40
  7293  002706  D7D6               	goto	i2l644
  7294  002708                     
  7295                           ;doprnt.c: 809: (putch(c) );
  7296  002708  5051               	movf	i2printf@c,w,c
  7297  00270A  ECDB  F018         	call	i2_putch
  7298                           
  7299                           ;doprnt.c: 810: continue;
  7300  00270E  D08C               	goto	i2u285_40
  7301  002710                     i2l635:
  7302  002710  5043               	movf	i2printf@f,w,c
  7303  002712  6E47               	movwf	??i2_printf& (0+255),c
  7304  002714  5044               	movf	i2printf@f+1,w,c
  7305  002716  6E48               	movwf	(??i2_printf+1)& (0+255),c
  7306  002718  4A43               	infsnz	i2printf@f,f,c
  7307  00271A  2A44               	incf	i2printf@f+1,f,c
  7308  00271C  C047  FFF6         	movff	??i2_printf,tblptrl
  7309  002720  C048  FFF7         	movff	??i2_printf+1,tblptrh
  7310  002724  0E00               	movlw	low (__mediumconst shr (0+16))
  7311  002726  6EF8               	movwf	tblptru,c
  7312  002728  0E0F               	movlw	(high __ramtop+-1)
  7313  00272A  64F7               	cpfsgt	tblptrh,c
  7314  00272C  D003               	bra	i2u279_47
  7315  00272E  0008               	tblrd		*
  7316  002730  50F5               	movf	tablat,w,c
  7317  002732  D005               	bra	i2u279_40
  7318  002734                     i2u279_47:
  7319  002734  CFF6 FFE9          	movff	tblptrl,fsr0l
  7320  002738  CFF7 FFEA          	movff	tblptrh,fsr0h
  7321  00273C  50EF               	movf	indf0,w,c
  7322  00273E                     i2u279_40:
  7323  00273E  6E51               	movwf	i2printf@c,c
  7324  002740  5051               	movf	i2printf@c,w,c
  7325                           
  7326                           ; Switch size 1, requested type "space"
  7327                           ; Number of cases is 4, Range of values is 0 to 115
  7328                           ; switch strategies available:
  7329                           ; Name         Instructions Cycles
  7330                           ; simple_byte           13     7 (average)
  7331                           ;	Chosen strategy is simple_byte
  7332  002742  0A00               	xorlw	0	; case 0
  7333  002744  B4D8               	btfsc	status,2,c
  7334  002746  0012               	return	
  7335  002748  0A64               	xorlw	100	; case 100
  7336  00274A  B4D8               	btfsc	status,2,c
  7337  00274C  D007               	goto	i2l640
  7338  00274E  0A0D               	xorlw	13	; case 105
  7339  002750  B4D8               	btfsc	status,2,c
  7340  002752  D004               	goto	i2l640
  7341  002754  0A1A               	xorlw	26	; case 115
  7342  002756  B4D8               	btfsc	status,2,c
  7343  002758  D798               	goto	i2l641
  7344  00275A  D7D6               	goto	i2l646
  7345  00275C                     i2l640:
  7346                           
  7347                           ;doprnt.c: 1253: {
  7348                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7349  00275C  C04B  FFD9         	movff	i2printf@ap,fsr2l
  7350  002760  C04C  FFDA         	movff	i2printf@ap+1,fsr2h
  7351  002764  CFDE F04F          	movff	postinc2,i2printf@val
  7352  002768  CFDD F050          	movff	postdec2,i2printf@val+1
  7353  00276C  0E02               	movlw	2
  7354  00276E  264B               	addwf	i2printf@ap,f,c
  7355  002770  0E00               	movlw	0
  7356  002772  224C               	addwfc	i2printf@ap+1,f,c
  7357                           
  7358                           ;doprnt.c: 1261: if((int)val < 0) {
  7359  002774  AE50               	btfss	i2printf@val+1,7,c
  7360  002776  D006               	goto	i2l647
  7361                           
  7362                           ;doprnt.c: 1262: flag |= 0x03;
  7363  002778  0E03               	movlw	3
  7364  00277A  1249               	iorwf	i2printf@flag,f,c
  7365                           
  7366                           ;doprnt.c: 1263: val = -val;
  7367  00277C  6C4F               	negf	i2printf@val,c
  7368  00277E  1E50               	comf	i2printf@val+1,f,c
  7369  002780  B0D8               	btfsc	status,0,c
  7370  002782  2A50               	incf	i2printf@val+1,f,c
  7371  002784                     i2l647:
  7372                           
  7373                           ;doprnt.c: 1264: }
  7374                           ;doprnt.c: 1266: }
  7375                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7376  002784  0E01               	movlw	1
  7377  002786  6E51               	movwf	i2printf@c,c
  7378  002788                     i2l3798:
  7379  002788  0E05               	movlw	5
  7380  00278A  1851               	xorwf	i2printf@c,w,c
  7381  00278C  B4D8               	btfsc	status,2,c
  7382  00278E  D015               	goto	i2u283_40
  7383                           
  7384                           ;doprnt.c: 1306: if(val < dpowers[c])
  7385  002790  5051               	movf	i2printf@c,w,c
  7386  002792  0D02               	mullw	2
  7387  002794  0E60               	movlw	low _dpowers
  7388  002796  24F3               	addwf	prodl,w,c
  7389  002798  6EF6               	movwf	tblptrl,c
  7390  00279A  0EFE               	movlw	high _dpowers
  7391  00279C  20F4               	addwfc	prodh,w,c
  7392  00279E  6EF7               	movwf	tblptrh,c
  7393  0027A0                     	if	1	;There are 3 active tblptr bytes
  7394  0027A0  6AF8               	clrf	tblptru,c
  7395  0027A2  0E00               	movlw	low (__mediumconst shr (0+16))
  7396  0027A4  22F8               	addwfc	tblptru,f,c
  7397  0027A6                     	endif
  7398  0027A6  0009               	tblrd		*+
  7399  0027A8  50F5               	movf	tablat,w,c
  7400  0027AA  5C4F               	subwf	i2printf@val,w,c
  7401  0027AC  0009               	tblrd		*+
  7402  0027AE  50F5               	movf	tablat,w,c
  7403  0027B0  5850               	subwfb	i2printf@val+1,w,c
  7404  0027B2  A0D8               	btfss	status,0,c
  7405  0027B4  D002               	goto	i2u283_40
  7406                           
  7407                           ;doprnt.c: 1307: break;
  7408  0027B6  2A51               	incf	i2printf@c,f,c
  7409  0027B8  D7E7               	goto	i2l3798
  7410  0027BA                     i2u283_40:
  7411                           
  7412                           ;doprnt.c: 1422: {
  7413                           ;doprnt.c: 1438: if(flag & 0x03)
  7414  0027BA  C049  F047         	movff	i2printf@flag,??i2_printf
  7415  0027BE  0E03               	movlw	3
  7416  0027C0  1647               	andwf	??i2_printf,f,c
  7417  0027C2  B4D8               	btfsc	status,2,c
  7418  0027C4  D003               	goto	i2l651
  7419                           
  7420                           ;doprnt.c: 1439: (putch('-') );
  7421  0027C6  0E2D               	movlw	45
  7422  0027C8  ECDB  F018         	call	i2_putch
  7423  0027CC                     i2l651:
  7424                           
  7425                           ;doprnt.c: 1469: }
  7426                           ;doprnt.c: 1472: prec = c;
  7427  0027CC  C051  F04A         	movff	i2printf@c,i2printf@prec
  7428                           
  7429                           ;doprnt.c: 1474: while(prec--) {
  7430  0027D0  D027               	goto	i2l652
  7431  0027D2                     
  7432                           ;doprnt.c: 1478: {
  7433                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7434  0027D2  504A               	movf	i2printf@prec,w,c
  7435  0027D4  0D02               	mullw	2
  7436  0027D6  0E60               	movlw	low _dpowers
  7437  0027D8  24F3               	addwf	prodl,w,c
  7438  0027DA  6EF6               	movwf	tblptrl,c
  7439  0027DC  0EFE               	movlw	high _dpowers
  7440  0027DE  20F4               	addwfc	prodh,w,c
  7441  0027E0  6EF7               	movwf	tblptrh,c
  7442  0027E2                     	if	1	;There are 3 active tblptr bytes
  7443  0027E2  6AF8               	clrf	tblptru,c
  7444  0027E4  0E00               	movlw	low (__mediumconst shr (0+16))
  7445  0027E6  22F8               	addwfc	tblptru,f,c
  7446  0027E8                     	endif
  7447  0027E8  0009               	tblrd		*+
  7448  0027EA  CFF5 F039          	movff	tablat,i2___lwdiv@divisor
  7449  0027EE  000A               	tblrd		*-
  7450  0027F0  CFF5 F03A          	movff	tablat,i2___lwdiv@divisor+1
  7451  0027F4  C04F  F037         	movff	i2printf@val,i2___lwdiv@dividend
  7452  0027F8  C050  F038         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7453  0027FC  EC12  F017         	call	i2___lwdiv	;wreg free
  7454  002800  C037  F03E         	movff	?i2___lwdiv,i2___lwmod@dividend
  7455  002804  C038  F03F         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7456  002808  0E00               	movlw	0
  7457  00280A  6E41               	movwf	i2___lwmod@divisor+1,c
  7458  00280C  0E0A               	movlw	10
  7459  00280E  6E40               	movwf	i2___lwmod@divisor,c
  7460  002810  EC3A  F018         	call	i2___lwmod	;wreg free
  7461  002814  503E               	movf	?i2___lwmod,w,c
  7462  002816  0F30               	addlw	48
  7463  002818  6E51               	movwf	i2printf@c,c
  7464                           
  7465                           ;doprnt.c: 1523: }
  7466                           ;doprnt.c: 1524: (putch(c) );
  7467  00281A  5051               	movf	i2printf@c,w,c
  7468  00281C  ECDB  F018         	call	i2_putch
  7469  002820                     i2l652:
  7470  002820  064A               	decf	i2printf@prec,f,c
  7471  002822  284A               	incf	i2printf@prec,w,c
  7472  002824  A4D8               	btfss	status,2,c
  7473  002826  D7D5               	goto	i2l653
  7474  002828                     i2u285_40:
  7475  002828  5043               	movf	i2printf@f,w,c
  7476  00282A  6E47               	movwf	??i2_printf& (0+255),c
  7477  00282C  5044               	movf	i2printf@f+1,w,c
  7478  00282E  6E48               	movwf	(??i2_printf+1)& (0+255),c
  7479  002830  4A43               	infsnz	i2printf@f,f,c
  7480  002832  2A44               	incf	i2printf@f+1,f,c
  7481  002834  C047  FFF6         	movff	??i2_printf,tblptrl
  7482  002838  C048  FFF7         	movff	??i2_printf+1,tblptrh
  7483  00283C  0E00               	movlw	low (__mediumconst shr (0+16))
  7484  00283E  6EF8               	movwf	tblptru,c
  7485  002840  0E0F               	movlw	(high __ramtop+-1)
  7486  002842  64F7               	cpfsgt	tblptrh,c
  7487  002844  D003               	bra	i2u286_47
  7488  002846  0008               	tblrd		*
  7489  002848  50F5               	movf	tablat,w,c
  7490  00284A  D005               	bra	i2u286_40
  7491  00284C                     i2u286_47:
  7492  00284C  CFF6 FFE9          	movff	tblptrl,fsr0l
  7493  002850  CFF7 FFEA          	movff	tblptrh,fsr0h
  7494  002854  50EF               	movf	indf0,w,c
  7495  002856                     i2u286_40:
  7496  002856  6E51               	movwf	i2printf@c,c
  7497  002858  5051               	movf	i2printf@c,w,c
  7498  00285A  B4D8               	btfsc	status,2,c
  7499  00285C  0012               	return	
  7500  00285E  D70A               	goto	i2l633
  7501  002860                     __end_ofi2_printf:
  7502                           	opt stack 0
  7503                           pclatu	equ	0xFFB
  7504                           pclath	equ	0xFFA
  7505                           tblptru	equ	0xFF8
  7506                           tblptrh	equ	0xFF7
  7507                           tblptrl	equ	0xFF6
  7508                           tablat	equ	0xFF5
  7509                           prodh	equ	0xFF4
  7510                           prodl	equ	0xFF3
  7511                           intcon	equ	0xFF2
  7512                           intcon3	equ	0xFF0
  7513                           indf0	equ	0xFEF
  7514                           postinc0	equ	0xFEE
  7515                           fsr0h	equ	0xFEA
  7516                           fsr0l	equ	0xFE9
  7517                           wreg	equ	0xFE8
  7518                           indf1	equ	0xFE7
  7519                           postinc1	equ	0xFE6
  7520                           postdec1	equ	0xFE5
  7521                           fsr1h	equ	0xFE2
  7522                           fsr1l	equ	0xFE1
  7523                           indf2	equ	0xFDF
  7524                           postinc2	equ	0xFDE
  7525                           postdec2	equ	0xFDD
  7526                           fsr2h	equ	0xFDA
  7527                           fsr2l	equ	0xFD9
  7528                           status	equ	0xFD8
  7529                           
  7530 ;; *************** function i2_putch *****************
  7531 ;; Defined at:
  7532 ;;		line 24 in file "lcd.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;  data            1    wreg     unsigned char 
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;  data            1    2[COMRAM] unsigned char 
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  1    wreg      void 
  7539 ;; Registers used:
  7540 ;;		wreg, status,2, status,0, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;Total ram usage:        1 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; Hardware stack levels required when called:    1
  7553 ;; This function calls:
  7554 ;;		i2_lcdNibble
  7555 ;; This function is called by:
  7556 ;;		_interruptHandler
  7557 ;;		i2_printf
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           	psect	text20
  7562  0031B6                     __ptext20:
  7563                           	opt stack 0
  7564  0031B6                     i2_putch:
  7565                           	opt stack 25
  7566                           
  7567                           ;incstack = 0
  7568                           ;i2putch@data stored from wreg
  7569  0031B6  6E39               	movwf	i2putch@data,c
  7570                           
  7571                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7572  0031B8  848C               	bsf	3980,2,c	;volatile
  7573                           
  7574                           ;lcd.c: 33: lcdNibble(data);
  7575  0031BA  5039               	movf	i2putch@data,w,c
  7576  0031BC  ECE3  F015         	call	i2_lcdNibble
  7577                           
  7578                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7579  0031C0  0EC8               	movlw	200
  7580  0031C2                     i2u489_47:
  7581  0031C2  D000               	nop2	
  7582  0031C4  2EE8               	decfsz	wreg,f,c
  7583  0031C6  D7FD               	bra	i2u489_47
  7584  0031C8  0012               	return		;funcret
  7585  0031CA                     __end_ofi2_putch:
  7586                           	opt stack 0
  7587                           pclatu	equ	0xFFB
  7588                           pclath	equ	0xFFA
  7589                           tblptru	equ	0xFF8
  7590                           tblptrh	equ	0xFF7
  7591                           tblptrl	equ	0xFF6
  7592                           tablat	equ	0xFF5
  7593                           prodh	equ	0xFF4
  7594                           prodl	equ	0xFF3
  7595                           intcon	equ	0xFF2
  7596                           intcon3	equ	0xFF0
  7597                           indf0	equ	0xFEF
  7598                           postinc0	equ	0xFEE
  7599                           fsr0h	equ	0xFEA
  7600                           fsr0l	equ	0xFE9
  7601                           wreg	equ	0xFE8
  7602                           indf1	equ	0xFE7
  7603                           postinc1	equ	0xFE6
  7604                           postdec1	equ	0xFE5
  7605                           fsr1h	equ	0xFE2
  7606                           fsr1l	equ	0xFE1
  7607                           indf2	equ	0xFDF
  7608                           postinc2	equ	0xFDE
  7609                           postdec2	equ	0xFDD
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function i2___lwmod *****************
  7615 ;; Defined at:
  7616 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;  dividend        2    7[COMRAM] unsigned int 
  7619 ;;  divisor         2    9[COMRAM] unsigned int 
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  2    7[COMRAM] unsigned int 
  7624 ;; Registers used:
  7625 ;;		wreg, status,2, status,0
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7631 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7635 ;;Total ram usage:        5 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		i2_printf
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text21
  7645  003074                     __ptext21:
  7646                           	opt stack 0
  7647  003074                     i2___lwmod:
  7648                           	opt stack 25
  7649                           
  7650                           ;incstack = 0
  7651  003074  5040               	movf	i2___lwmod@divisor,w,c
  7652  003076  1041               	iorwf	i2___lwmod@divisor+1,w,c
  7653  003078  B4D8               	btfsc	status,2,c
  7654  00307A  D018               	goto	i2l1075
  7655  00307C  0E01               	movlw	1
  7656  00307E  6E42               	movwf	i2___lwmod@counter,c
  7657  003080  D004               	goto	i2l1070
  7658  003082  90D8               	bcf	status,0,c
  7659  003084  3640               	rlcf	i2___lwmod@divisor,f,c
  7660  003086  3641               	rlcf	i2___lwmod@divisor+1,f,c
  7661  003088  2A42               	incf	i2___lwmod@counter,f,c
  7662  00308A                     i2l1070:
  7663  00308A  AE41               	btfss	i2___lwmod@divisor+1,7,c
  7664  00308C  D7FA               	goto	i2l1071
  7665  00308E                     i2u215_40:
  7666  00308E  5040               	movf	i2___lwmod@divisor,w,c
  7667  003090  5C3E               	subwf	i2___lwmod@dividend,w,c
  7668  003092  5041               	movf	i2___lwmod@divisor+1,w,c
  7669  003094  583F               	subwfb	i2___lwmod@dividend+1,w,c
  7670  003096  A0D8               	btfss	status,0,c
  7671  003098  D004               	goto	i2l1074
  7672  00309A  5040               	movf	i2___lwmod@divisor,w,c
  7673  00309C  5E3E               	subwf	i2___lwmod@dividend,f,c
  7674  00309E  5041               	movf	i2___lwmod@divisor+1,w,c
  7675  0030A0  5A3F               	subwfb	i2___lwmod@dividend+1,f,c
  7676  0030A2                     i2l1074:
  7677  0030A2  90D8               	bcf	status,0,c
  7678  0030A4  3241               	rrcf	i2___lwmod@divisor+1,f,c
  7679  0030A6  3240               	rrcf	i2___lwmod@divisor,f,c
  7680  0030A8  2E42               	decfsz	i2___lwmod@counter,f,c
  7681  0030AA  D7F1               	goto	i2u215_40
  7682  0030AC                     i2l1075:
  7683  0030AC  C03E  F03E         	movff	i2___lwmod@dividend,?i2___lwmod
  7684  0030B0  C03F  F03F         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7685  0030B4  0012               	return		;funcret
  7686  0030B6                     __end_ofi2___lwmod:
  7687                           	opt stack 0
  7688                           pclatu	equ	0xFFB
  7689                           pclath	equ	0xFFA
  7690                           tblptru	equ	0xFF8
  7691                           tblptrh	equ	0xFF7
  7692                           tblptrl	equ	0xFF6
  7693                           tablat	equ	0xFF5
  7694                           prodh	equ	0xFF4
  7695                           prodl	equ	0xFF3
  7696                           intcon	equ	0xFF2
  7697                           intcon3	equ	0xFF0
  7698                           indf0	equ	0xFEF
  7699                           postinc0	equ	0xFEE
  7700                           fsr0h	equ	0xFEA
  7701                           fsr0l	equ	0xFE9
  7702                           wreg	equ	0xFE8
  7703                           indf1	equ	0xFE7
  7704                           postinc1	equ	0xFE6
  7705                           postdec1	equ	0xFE5
  7706                           fsr1h	equ	0xFE2
  7707                           fsr1l	equ	0xFE1
  7708                           indf2	equ	0xFDF
  7709                           postinc2	equ	0xFDE
  7710                           postdec2	equ	0xFDD
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function i2___lwdiv *****************
  7716 ;; Defined at:
  7717 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;  dividend        2    0[COMRAM] unsigned int 
  7720 ;;  divisor         2    2[COMRAM] unsigned int 
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7723 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7724 ;; Return value:  Size  Location     Type
  7725 ;;                  2    0[COMRAM] unsigned int 
  7726 ;; Registers used:
  7727 ;;		wreg, status,2, status,0
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7733 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7737 ;;Total ram usage:        7 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		i2_printf
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           	psect	text22
  7747  002E24                     __ptext22:
  7748                           	opt stack 0
  7749  002E24                     i2___lwdiv:
  7750                           	opt stack 25
  7751                           
  7752                           ;incstack = 0
  7753  002E24  0E00               	movlw	0
  7754  002E26  6E3C               	movwf	i2___lwdiv@quotient+1,c
  7755  002E28  0E00               	movlw	0
  7756  002E2A  6E3B               	movwf	i2___lwdiv@quotient,c
  7757  002E2C  5039               	movf	i2___lwdiv@divisor,w,c
  7758  002E2E  103A               	iorwf	i2___lwdiv@divisor+1,w,c
  7759  002E30  B4D8               	btfsc	status,2,c
  7760  002E32  D01C               	goto	i2l1065
  7761  002E34  0E01               	movlw	1
  7762  002E36  6E3D               	movwf	i2___lwdiv@counter,c
  7763  002E38  D004               	goto	i2l1060
  7764  002E3A  90D8               	bcf	status,0,c
  7765  002E3C  3639               	rlcf	i2___lwdiv@divisor,f,c
  7766  002E3E  363A               	rlcf	i2___lwdiv@divisor+1,f,c
  7767  002E40  2A3D               	incf	i2___lwdiv@counter,f,c
  7768  002E42                     i2l1060:
  7769  002E42  AE3A               	btfss	i2___lwdiv@divisor+1,7,c
  7770  002E44  D7FA               	goto	i2l1061
  7771  002E46                     i2u212_40:
  7772  002E46  90D8               	bcf	status,0,c
  7773  002E48  363B               	rlcf	i2___lwdiv@quotient,f,c
  7774  002E4A  363C               	rlcf	i2___lwdiv@quotient+1,f,c
  7775  002E4C  5039               	movf	i2___lwdiv@divisor,w,c
  7776  002E4E  5C37               	subwf	i2___lwdiv@dividend,w,c
  7777  002E50  503A               	movf	i2___lwdiv@divisor+1,w,c
  7778  002E52  5838               	subwfb	i2___lwdiv@dividend+1,w,c
  7779  002E54  A0D8               	btfss	status,0,c
  7780  002E56  D005               	goto	i2l1064
  7781  002E58  5039               	movf	i2___lwdiv@divisor,w,c
  7782  002E5A  5E37               	subwf	i2___lwdiv@dividend,f,c
  7783  002E5C  503A               	movf	i2___lwdiv@divisor+1,w,c
  7784  002E5E  5A38               	subwfb	i2___lwdiv@dividend+1,f,c
  7785  002E60  803B               	bsf	i2___lwdiv@quotient,0,c
  7786  002E62                     i2l1064:
  7787  002E62  90D8               	bcf	status,0,c
  7788  002E64  323A               	rrcf	i2___lwdiv@divisor+1,f,c
  7789  002E66  3239               	rrcf	i2___lwdiv@divisor,f,c
  7790  002E68  2E3D               	decfsz	i2___lwdiv@counter,f,c
  7791  002E6A  D7ED               	goto	i2u212_40
  7792  002E6C                     i2l1065:
  7793  002E6C  C03B  F037         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7794  002E70  C03C  F038         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7795  002E74  0012               	return		;funcret
  7796  002E76                     __end_ofi2___lwdiv:
  7797                           	opt stack 0
  7798                           pclatu	equ	0xFFB
  7799                           pclath	equ	0xFFA
  7800                           tblptru	equ	0xFF8
  7801                           tblptrh	equ	0xFF7
  7802                           tblptrl	equ	0xFF6
  7803                           tablat	equ	0xFF5
  7804                           prodh	equ	0xFF4
  7805                           prodl	equ	0xFF3
  7806                           intcon	equ	0xFF2
  7807                           intcon3	equ	0xFF0
  7808                           indf0	equ	0xFEF
  7809                           postinc0	equ	0xFEE
  7810                           fsr0h	equ	0xFEA
  7811                           fsr0l	equ	0xFE9
  7812                           wreg	equ	0xFE8
  7813                           indf1	equ	0xFE7
  7814                           postinc1	equ	0xFE6
  7815                           postdec1	equ	0xFE5
  7816                           fsr1h	equ	0xFE2
  7817                           fsr1l	equ	0xFE1
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           fsr2h	equ	0xFDA
  7822                           fsr2l	equ	0xFD9
  7823                           status	equ	0xFD8
  7824                           
  7825 ;; *************** function i2_initLCD *****************
  7826 ;; Defined at:
  7827 ;;		line 60 in file "lcd.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;		None
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;		None
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		wreg, status,2, status,0, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;Total ram usage:        1 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    2
  7848 ;; This function calls:
  7849 ;;		i2_lcdInst
  7850 ;; This function is called by:
  7851 ;;		_interruptHandler
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           	psect	text23
  7856  002EC2                     __ptext23:
  7857                           	opt stack 0
  7858  002EC2                     i2_initLCD:
  7859                           	opt stack 24
  7860                           
  7861                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  7862                           
  7863                           ;incstack = 0
  7864  002EC2  0EC3               	movlw	195
  7865  002EC4  6E3A               	movwf	??i2_initLCD& (0+255),c
  7866  002EC6  0ECD               	movlw	205
  7867  002EC8                     i2u490_47:
  7868  002EC8  2EE8               	decfsz	wreg,f,c
  7869  002ECA  D7FE               	bra	i2u490_47
  7870  002ECC  2E3A               	decfsz	??i2_initLCD& (0+255),f,c
  7871  002ECE  D7FC               	bra	i2u490_47
  7872  002ED0  F000               	nop	
  7873                           
  7874                           ;lcd.c: 69: lcdInst(0b00110011);
  7875  002ED2  0E33               	movlw	51
  7876  002ED4  ECE5  F018         	call	i2_lcdInst
  7877                           
  7878                           ;lcd.c: 70: lcdInst(0b00110010);
  7879  002ED8  0E32               	movlw	50
  7880  002EDA  ECE5  F018         	call	i2_lcdInst
  7881                           
  7882                           ;lcd.c: 71: lcdInst(0b00101000);
  7883  002EDE  0E28               	movlw	40
  7884  002EE0  ECE5  F018         	call	i2_lcdInst
  7885                           
  7886                           ;lcd.c: 72: lcdInst(0b00001111);
  7887  002EE4  0E0F               	movlw	15
  7888  002EE6  ECE5  F018         	call	i2_lcdInst
  7889                           
  7890                           ;lcd.c: 73: lcdInst(0b00000110);
  7891  002EEA  0E06               	movlw	6
  7892  002EEC  ECE5  F018         	call	i2_lcdInst
  7893                           
  7894                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7895  002EF0  0E01               	movlw	1
  7896  002EF2  ECE5  F018         	call	i2_lcdInst
  7897  002EF6  0EC3               	movlw	195
  7898  002EF8  6E3A               	movwf	??i2_initLCD& (0+255),c
  7899  002EFA  0ECD               	movlw	205
  7900  002EFC                     i2u491_47:
  7901  002EFC  2EE8               	decfsz	wreg,f,c
  7902  002EFE  D7FE               	bra	i2u491_47
  7903  002F00  2E3A               	decfsz	??i2_initLCD& (0+255),f,c
  7904  002F02  D7FC               	bra	i2u491_47
  7905  002F04  F000               	nop	
  7906                           
  7907                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  7908  002F06  0E0F               	movlw	15
  7909  002F08  ECE5  F018         	call	i2_lcdInst
  7910  002F0C  0012               	return		;funcret
  7911  002F0E                     __end_ofi2_initLCD:
  7912                           	opt stack 0
  7913                           pclatu	equ	0xFFB
  7914                           pclath	equ	0xFFA
  7915                           tblptru	equ	0xFF8
  7916                           tblptrh	equ	0xFF7
  7917                           tblptrl	equ	0xFF6
  7918                           tablat	equ	0xFF5
  7919                           prodh	equ	0xFF4
  7920                           prodl	equ	0xFF3
  7921                           intcon	equ	0xFF2
  7922                           intcon3	equ	0xFF0
  7923                           indf0	equ	0xFEF
  7924                           postinc0	equ	0xFEE
  7925                           fsr0h	equ	0xFEA
  7926                           fsr0l	equ	0xFE9
  7927                           wreg	equ	0xFE8
  7928                           indf1	equ	0xFE7
  7929                           postinc1	equ	0xFE6
  7930                           postdec1	equ	0xFE5
  7931                           fsr1h	equ	0xFE2
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940 ;; *************** function i2_lcdInst *****************
  7941 ;; Defined at:
  7942 ;;		line 11 in file "lcd.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  data            1    wreg     unsigned char 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  data            1    2[COMRAM] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  1    wreg      void 
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;Total ram usage:        1 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    1
  7963 ;; This function calls:
  7964 ;;		i2_lcdNibble
  7965 ;; This function is called by:
  7966 ;;		_interruptHandler
  7967 ;;		i2_initLCD
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text24
  7972  0031CA                     __ptext24:
  7973                           	opt stack 0
  7974  0031CA                     i2_lcdInst:
  7975                           	opt stack 25
  7976                           
  7977                           ;incstack = 0
  7978                           ;i2lcdInst@data stored from wreg
  7979  0031CA  6E39               	movwf	i2lcdInst@data,c
  7980                           
  7981                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  7982  0031CC  948C               	bcf	3980,2,c	;volatile
  7983                           
  7984                           ;lcd.c: 20: lcdNibble(data);
  7985  0031CE  5039               	movf	i2lcdInst@data,w,c
  7986  0031D0  ECE3  F015         	call	i2_lcdNibble
  7987                           
  7988                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7989  0031D4  0EC8               	movlw	200
  7990  0031D6                     i2u492_47:
  7991  0031D6  D000               	nop2	
  7992  0031D8  2EE8               	decfsz	wreg,f,c
  7993  0031DA  D7FD               	bra	i2u492_47
  7994  0031DC  0012               	return		;funcret
  7995  0031DE                     __end_ofi2_lcdInst:
  7996                           	opt stack 0
  7997                           pclatu	equ	0xFFB
  7998                           pclath	equ	0xFFA
  7999                           tblptru	equ	0xFF8
  8000                           tblptrh	equ	0xFF7
  8001                           tblptrl	equ	0xFF6
  8002                           tablat	equ	0xFF5
  8003                           prodh	equ	0xFF4
  8004                           prodl	equ	0xFF3
  8005                           intcon	equ	0xFF2
  8006                           intcon3	equ	0xFF0
  8007                           indf0	equ	0xFEF
  8008                           postinc0	equ	0xFEE
  8009                           fsr0h	equ	0xFEA
  8010                           fsr0l	equ	0xFE9
  8011                           wreg	equ	0xFE8
  8012                           indf1	equ	0xFE7
  8013                           postinc1	equ	0xFE6
  8014                           postdec1	equ	0xFE5
  8015                           fsr1h	equ	0xFE2
  8016                           fsr1l	equ	0xFE1
  8017                           indf2	equ	0xFDF
  8018                           postinc2	equ	0xFDE
  8019                           postdec2	equ	0xFDD
  8020                           fsr2h	equ	0xFDA
  8021                           fsr2l	equ	0xFD9
  8022                           status	equ	0xFD8
  8023                           
  8024 ;; *************** function i2_lcdNibble *****************
  8025 ;; Defined at:
  8026 ;;		line 37 in file "lcd.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;  data            1    wreg     unsigned char 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  data            1    1[COMRAM] unsigned char 
  8031 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      void 
  8034 ;; Registers used:
  8035 ;;		wreg, status,2, status,0
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;Total ram usage:        2 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; This function calls:
  8048 ;;		Nothing
  8049 ;; This function is called by:
  8050 ;;		i2_lcdInst
  8051 ;;		i2_putch
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text25
  8056  002BC6                     __ptext25:
  8057                           	opt stack 0
  8058  002BC6                     i2_lcdNibble:
  8059                           	opt stack 25
  8060                           
  8061                           ;incstack = 0
  8062                           ;i2lcdNibble@data stored from wreg
  8063  002BC6  6E38               	movwf	i2lcdNibble@data,c
  8064                           
  8065                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  8066  002BC8  5038               	movf	i2lcdNibble@data,w,c
  8067  002BCA  0BF0               	andlw	240
  8068  002BCC  6E37               	movwf	i2lcdNibble@temp,c
  8069                           
  8070                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  8071  002BCE  508C               	movf	3980,w,c	;volatile
  8072  002BD0  0B0F               	andlw	15
  8073  002BD2  6E8C               	movwf	3980,c	;volatile
  8074                           
  8075                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  8076  002BD4  5037               	movf	i2lcdNibble@temp,w,c
  8077  002BD6  108C               	iorwf	3980,w,c	;volatile
  8078  002BD8  6E8C               	movwf	3980,c	;volatile
  8079                           
  8080                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8081  002BDA  0E00               	movlw	0
  8082  002BDC  BEF2               	btfsc	intcon,7,c	;volatile
  8083  002BDE  0E01               	movlw	1
  8084  002BE0  6E2F               	movwf	_LCDinterruptState,c
  8085  002BE2  9EF2               	bcf	intcon,7,c	;volatile
  8086  002BE4  868C               	bsf	3980,3,c	;volatile
  8087  002BE6  0E53               	movlw	83
  8088  002BE8                     i2u493_47:
  8089  002BE8  2EE8               	decfsz	wreg,f,c
  8090  002BEA  D7FE               	bra	i2u493_47
  8091  002BEC  F000               	nop	
  8092  002BEE  968C               	bcf	3980,3,c	;volatile
  8093  002BF0  0EC8               	movlw	200
  8094  002BF2                     i2u494_47:
  8095  002BF2  D000               	nop2	
  8096  002BF4  2EE8               	decfsz	wreg,f,c
  8097  002BF6  D7FD               	bra	i2u494_47
  8098  002BF8  B02F               	btfsc	_LCDinterruptState,0,c
  8099  002BFA  D002               	bra	i2u194_45
  8100  002BFC  9EF2               	bcf	intcon,7,c	;volatile
  8101  002BFE  D001               	bra	i2u194_46
  8102  002C00                     i2u194_45:
  8103  002C00  8EF2               	bsf	intcon,7,c	;volatile
  8104  002C02                     i2u194_46:
  8105                           
  8106                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  8107  002C02  3838               	swapf	i2lcdNibble@data,w,c
  8108  002C04  0BF0               	andlw	240
  8109  002C06  6E38               	movwf	i2lcdNibble@data,c
  8110                           
  8111                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  8112  002C08  5038               	movf	i2lcdNibble@data,w,c
  8113  002C0A  0BF0               	andlw	240
  8114  002C0C  6E37               	movwf	i2lcdNibble@temp,c
  8115                           
  8116                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  8117  002C0E  508C               	movf	3980,w,c	;volatile
  8118  002C10  0B0F               	andlw	15
  8119  002C12  6E8C               	movwf	3980,c	;volatile
  8120                           
  8121                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  8122  002C14  5037               	movf	i2lcdNibble@temp,w,c
  8123  002C16  108C               	iorwf	3980,w,c	;volatile
  8124  002C18  6E8C               	movwf	3980,c	;volatile
  8125                           
  8126                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8127  002C1A  0E00               	movlw	0
  8128  002C1C  BEF2               	btfsc	intcon,7,c	;volatile
  8129  002C1E  0E01               	movlw	1
  8130  002C20  6E2F               	movwf	_LCDinterruptState,c
  8131  002C22  9EF2               	bcf	intcon,7,c	;volatile
  8132  002C24  868C               	bsf	3980,3,c	;volatile
  8133  002C26  0E53               	movlw	83
  8134  002C28                     i2u495_47:
  8135  002C28  2EE8               	decfsz	wreg,f,c
  8136  002C2A  D7FE               	bra	i2u495_47
  8137  002C2C  F000               	nop	
  8138  002C2E  968C               	bcf	3980,3,c	;volatile
  8139  002C30  0EC8               	movlw	200
  8140  002C32                     i2u496_47:
  8141  002C32  D000               	nop2	
  8142  002C34  2EE8               	decfsz	wreg,f,c
  8143  002C36  D7FD               	bra	i2u496_47
  8144  002C38  B02F               	btfsc	_LCDinterruptState,0,c
  8145  002C3A  D002               	bra	i2u195_45
  8146  002C3C  9EF2               	bcf	intcon,7,c	;volatile
  8147  002C3E  D001               	bra	i2u195_46
  8148  002C40                     i2u195_45:
  8149  002C40  8EF2               	bsf	intcon,7,c	;volatile
  8150  002C42                     i2u195_46:
  8151  002C42  0012               	return		;funcret
  8152  002C44                     __end_ofi2_lcdNibble:
  8153                           	opt stack 0
  8154                           pclatu	equ	0xFFB
  8155                           pclath	equ	0xFFA
  8156                           tblptru	equ	0xFF8
  8157                           tblptrh	equ	0xFF7
  8158                           tblptrl	equ	0xFF6
  8159                           tablat	equ	0xFF5
  8160                           prodh	equ	0xFF4
  8161                           prodl	equ	0xFF3
  8162                           intcon	equ	0xFF2
  8163                           intcon3	equ	0xFF0
  8164                           indf0	equ	0xFEF
  8165                           postinc0	equ	0xFEE
  8166                           fsr0h	equ	0xFEA
  8167                           fsr0l	equ	0xFE9
  8168                           wreg	equ	0xFE8
  8169                           indf1	equ	0xFE7
  8170                           postinc1	equ	0xFE6
  8171                           postdec1	equ	0xFE5
  8172                           fsr1h	equ	0xFE2
  8173                           fsr1l	equ	0xFE1
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181 ;; *************** function _strncmp *****************
  8182 ;; Defined at:
  8183 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  s1              2    6[COMRAM] PTR const unsigned char 
  8186 ;;		 -> current_set(5), 
  8187 ;;  s2              2    8[COMRAM] PTR const unsigned char 
  8188 ;;		 -> strs(100), 
  8189 ;;  len             2   10[COMRAM] unsigned int 
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;		None
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  2    6[COMRAM] int 
  8194 ;; Registers used:
  8195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8201 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;Total ram usage:        9 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; This function calls:
  8208 ;;		Nothing
  8209 ;; This function is called by:
  8210 ;;		_interruptHandler
  8211 ;; This function uses a non-reentrant model
  8212 ;;
  8213                           
  8214                           	psect	text26
  8215  002A3A                     __ptext26:
  8216                           	opt stack 0
  8217  002A3A                     _strncmp:
  8218                           	opt stack 26
  8219                           
  8220                           ;incstack = 0
  8221  002A3A  D035               	goto	i2l1227
  8222  002A3C                     i2l3444:
  8223  002A3C  C03D  FFD9         	movff	strncmp@s1,fsr2l
  8224  002A40  C03E  FFDA         	movff	strncmp@s1+1,fsr2h
  8225  002A44  50DF               	movf	indf2,w,c
  8226  002A46  B4D8               	btfsc	status,2,c
  8227  002A48  D010               	goto	i2u241_40
  8228  002A4A  C03D  FFD9         	movff	strncmp@s1,fsr2l
  8229  002A4E  C03E  FFDA         	movff	strncmp@s1+1,fsr2h
  8230  002A52  50DF               	movf	indf2,w,c
  8231  002A54  6E43               	movwf	??_strncmp& (0+255),c
  8232  002A56  C03F  FFF6         	movff	strncmp@s2,tblptrl
  8233  002A5A  C040  FFF7         	movff	strncmp@s2+1,tblptrh
  8234  002A5E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8235  002A5E  6AF8               	clrf	tblptru,c
  8236  002A60                     	endif
  8237  002A60                     	if	0	;tblptru may be non-zero
  8238  002A60                     	endif
  8239  002A60  0008               	tblrd		*
  8240  002A62  50F5               	movf	tablat,w,c
  8241  002A64  1843               	xorwf	??_strncmp,w,c
  8242  002A66  B4D8               	btfsc	status,2,c
  8243  002A68  D01A               	goto	i2l1229
  8244  002A6A                     i2u241_40:
  8245  002A6A  C03F  FFF6         	movff	strncmp@s2,tblptrl
  8246  002A6E  C040  FFF7         	movff	strncmp@s2+1,tblptrh
  8247  002A72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8248  002A72  6AF8               	clrf	tblptru,c
  8249  002A74                     	endif
  8250  002A74                     	if	0	;tblptru may be non-zero
  8251  002A74                     	endif
  8252  002A74  0008               	tblrd		*
  8253  002A76  50F5               	movf	tablat,w,c
  8254  002A78  6E43               	movwf	??_strncmp& (0+255),c
  8255  002A7A  6A44               	clrf	(??_strncmp+1)& (0+255),c
  8256  002A7C  1E43               	comf	??_strncmp,f,c
  8257  002A7E  1E44               	comf	??_strncmp+1,f,c
  8258  002A80  4A43               	infsnz	??_strncmp,f,c
  8259  002A82  2A44               	incf	??_strncmp+1,f,c
  8260  002A84  C03D  FFD9         	movff	strncmp@s1,fsr2l
  8261  002A88  C03E  FFDA         	movff	strncmp@s1+1,fsr2h
  8262  002A8C  50DF               	movf	indf2,w,c
  8263  002A8E  6E45               	movwf	(??_strncmp+2)& (0+255),c
  8264  002A90  5045               	movf	??_strncmp+2,w,c
  8265  002A92  2443               	addwf	??_strncmp,w,c
  8266  002A94  6E3D               	movwf	?_strncmp,c
  8267  002A96  0E00               	movlw	0
  8268  002A98  2044               	addwfc	??_strncmp+1,w,c
  8269  002A9A  6E3E               	movwf	?_strncmp+1,c
  8270  002A9C  0012               	return	
  8271  002A9E                     i2l1229:
  8272  002A9E  4A3D               	infsnz	strncmp@s1,f,c
  8273  002AA0  2A3E               	incf	strncmp@s1+1,f,c
  8274  002AA2  4A3F               	infsnz	strncmp@s2,f,c
  8275  002AA4  2A40               	incf	strncmp@s2+1,f,c
  8276  002AA6                     i2l1227:
  8277  002AA6  0641               	decf	strncmp@len,f,c
  8278  002AA8  A0D8               	btfss	status,0,c
  8279  002AAA  0642               	decf	strncmp@len+1,f,c
  8280  002AAC  2841               	incf	strncmp@len,w,c
  8281  002AAE  E1C6               	bnz	i2l3444
  8282  002AB0  2842               	incf	strncmp@len+1,w,c
  8283  002AB2  A4D8               	btfss	status,2,c
  8284  002AB4  D7C3               	goto	i2l1228
  8285  002AB6  0E00               	movlw	0
  8286  002AB8  6E3E               	movwf	?_strncmp+1,c
  8287  002ABA  0E00               	movlw	0
  8288  002ABC  6E3D               	movwf	?_strncmp,c
  8289  002ABE  0012               	return	
  8290  002AC0                     __end_of_strncmp:
  8291                           	opt stack 0
  8292                           pclatu	equ	0xFFB
  8293                           pclath	equ	0xFFA
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           prodh	equ	0xFF4
  8299                           prodl	equ	0xFF3
  8300                           intcon	equ	0xFF2
  8301                           intcon3	equ	0xFF0
  8302                           indf0	equ	0xFEF
  8303                           postinc0	equ	0xFEE
  8304                           fsr0h	equ	0xFEA
  8305                           fsr0l	equ	0xFE9
  8306                           wreg	equ	0xFE8
  8307                           indf1	equ	0xFE7
  8308                           postinc1	equ	0xFE6
  8309                           postdec1	equ	0xFE5
  8310                           fsr1h	equ	0xFE2
  8311                           fsr1l	equ	0xFE1
  8312                           indf2	equ	0xFDF
  8313                           postinc2	equ	0xFDE
  8314                           postdec2	equ	0xFDD
  8315                           fsr2h	equ	0xFDA
  8316                           fsr2l	equ	0xFD9
  8317                           status	equ	0xFD8
  8318                           
  8319 ;; *************** function _strcpy *****************
  8320 ;; Defined at:
  8321 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;  to              2    6[COMRAM] PTR unsigned char 
  8324 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
  8325 ;;  from            2    8[COMRAM] PTR const unsigned char 
  8326 ;;		 -> STR_62(1), STR_60(1), STR_57(1), STR_54(2), 
  8327 ;;		 -> STR_53(2), STR_52(2), STR_51(2), current_set(5), 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  cp              2   10[COMRAM] PTR unsigned char 
  8330 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  2    6[COMRAM] PTR unsigned char 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;Total ram usage:        6 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; This function calls:
  8347 ;;		Nothing
  8348 ;; This function is called by:
  8349 ;;		_interruptHandler
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           	psect	text27
  8354  002FEA                     __ptext27:
  8355                           	opt stack 0
  8356  002FEA                     _strcpy:
  8357                           	opt stack 26
  8358                           
  8359                           ;incstack = 0
  8360  002FEA  C03D  F041         	movff	strcpy@to,strcpy@cp
  8361  002FEE  C03E  F042         	movff	strcpy@to+1,strcpy@cp+1
  8362  002FF2  D004               	goto	i2l1221
  8363  002FF4  4A41               	infsnz	strcpy@cp,f,c
  8364  002FF6  2A42               	incf	strcpy@cp+1,f,c
  8365  002FF8  4A3F               	infsnz	strcpy@from,f,c
  8366  002FFA  2A40               	incf	strcpy@from+1,f,c
  8367  002FFC                     i2l1221:
  8368  002FFC  C03F  FFF6         	movff	strcpy@from,tblptrl
  8369  003000  C040  FFF7         	movff	strcpy@from+1,tblptrh
  8370  003004  0E00               	movlw	low (__mediumconst shr (0+16))
  8371  003006  6EF8               	movwf	tblptru,c
  8372  003008  C041  FFD9         	movff	strcpy@cp,fsr2l
  8373  00300C  C042  FFDA         	movff	strcpy@cp+1,fsr2h
  8374  003010  0E0F               	movlw	(high __ramtop+-1)
  8375  003012  64F7               	cpfsgt	tblptrh,c
  8376  003014  D003               	bra	i2u236_47
  8377  003016  0008               	tblrd		*
  8378  003018  50F5               	movf	tablat,w,c
  8379  00301A  D005               	bra	i2u236_40
  8380  00301C                     i2u236_47:
  8381  00301C  CFF6 FFE9          	movff	tblptrl,fsr0l
  8382  003020  CFF7 FFEA          	movff	tblptrh,fsr0h
  8383  003024  50EF               	movf	indf0,w,c
  8384  003026                     i2u236_40:
  8385  003026  6EDF               	movwf	indf2,c
  8386  003028  50DF               	movf	indf2,w,c
  8387  00302A  B4D8               	btfsc	status,2,c
  8388  00302C  0012               	return	
  8389  00302E  D7E2               	goto	i2l1222
  8390  003030                     __end_of_strcpy:
  8391                           	opt stack 0
  8392                           pclatu	equ	0xFFB
  8393                           pclath	equ	0xFFA
  8394                           tblptru	equ	0xFF8
  8395                           tblptrh	equ	0xFF7
  8396                           tblptrl	equ	0xFF6
  8397                           tablat	equ	0xFF5
  8398                           prodh	equ	0xFF4
  8399                           prodl	equ	0xFF3
  8400                           intcon	equ	0xFF2
  8401                           intcon3	equ	0xFF0
  8402                           indf0	equ	0xFEF
  8403                           postinc0	equ	0xFEE
  8404                           fsr0h	equ	0xFEA
  8405                           fsr0l	equ	0xFE9
  8406                           wreg	equ	0xFE8
  8407                           indf1	equ	0xFE7
  8408                           postinc1	equ	0xFE6
  8409                           postdec1	equ	0xFE5
  8410                           fsr1h	equ	0xFE2
  8411                           fsr1l	equ	0xFE1
  8412                           indf2	equ	0xFDF
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           fsr2h	equ	0xFDA
  8416                           fsr2l	equ	0xFD9
  8417                           status	equ	0xFD8
  8418                           
  8419 ;; *************** function _strcat *****************
  8420 ;; Defined at:
  8421 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;  to              2    0[COMRAM] PTR unsigned char 
  8424 ;;		 -> current_set(5), 
  8425 ;;  from            2    2[COMRAM] PTR const unsigned char 
  8426 ;;		 -> temp_set(5), 
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  cp              2    4[COMRAM] PTR unsigned char 
  8429 ;;		 -> current_set(5), 
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  2    0[COMRAM] PTR unsigned char 
  8432 ;; Registers used:
  8433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8434 ;; Tracked objects:
  8435 ;;		On entry : 0/0
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8439 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;Total ram usage:        6 bytes
  8444 ;; Hardware stack levels used:    1
  8445 ;; This function calls:
  8446 ;;		Nothing
  8447 ;; This function is called by:
  8448 ;;		_interruptHandler
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452                           	psect	text28
  8453  0030B6                     __ptext28:
  8454                           	opt stack 0
  8455  0030B6                     _strcat:
  8456                           	opt stack 26
  8457                           
  8458                           ;incstack = 0
  8459  0030B6  C037  F03B         	movff	strcat@to,strcat@cp
  8460  0030BA  C038  F03C         	movff	strcat@to+1,strcat@cp+1
  8461  0030BE  D002               	goto	i2l1204
  8462  0030C0  4A3B               	infsnz	strcat@cp,f,c
  8463  0030C2  2A3C               	incf	strcat@cp+1,f,c
  8464  0030C4                     i2l1204:
  8465  0030C4  C03B  FFD9         	movff	strcat@cp,fsr2l
  8466  0030C8  C03C  FFDA         	movff	strcat@cp+1,fsr2h
  8467  0030CC  50DF               	movf	indf2,w,c
  8468  0030CE  B4D8               	btfsc	status,2,c
  8469  0030D0  D005               	goto	i2l1207
  8470  0030D2  D7F6               	goto	i2l1205
  8471  0030D4  4A3B               	infsnz	strcat@cp,f,c
  8472  0030D6  2A3C               	incf	strcat@cp+1,f,c
  8473  0030D8  4A39               	infsnz	strcat@from,f,c
  8474  0030DA  2A3A               	incf	strcat@from+1,f,c
  8475  0030DC                     i2l1207:
  8476  0030DC  C039  FFD9         	movff	strcat@from,fsr2l
  8477  0030E0  C03A  FFDA         	movff	strcat@from+1,fsr2h
  8478  0030E4  C03B  FFE1         	movff	strcat@cp,fsr1l
  8479  0030E8  C03C  FFE2         	movff	strcat@cp+1,fsr1h
  8480  0030EC  CFDF FFE7          	movff	indf2,indf1
  8481  0030F0  50E7               	movf	indf1,w,c
  8482  0030F2  B4D8               	btfsc	status,2,c
  8483  0030F4  0012               	return	
  8484  0030F6  D7EE               	goto	i2l1208
  8485  0030F8                     __end_of_strcat:
  8486                           	opt stack 0
  8487                           pclatu	equ	0xFFB
  8488                           pclath	equ	0xFFA
  8489                           tblptru	equ	0xFF8
  8490                           tblptrh	equ	0xFF7
  8491                           tblptrl	equ	0xFF6
  8492                           tablat	equ	0xFF5
  8493                           prodh	equ	0xFF4
  8494                           prodl	equ	0xFF3
  8495                           intcon	equ	0xFF2
  8496                           intcon3	equ	0xFF0
  8497                           indf0	equ	0xFEF
  8498                           postinc0	equ	0xFEE
  8499                           fsr0h	equ	0xFEA
  8500                           fsr0l	equ	0xFE9
  8501                           wreg	equ	0xFE8
  8502                           indf1	equ	0xFE7
  8503                           postinc1	equ	0xFE6
  8504                           postdec1	equ	0xFE5
  8505                           fsr1h	equ	0xFE2
  8506                           fsr1l	equ	0xFE1
  8507                           indf2	equ	0xFDF
  8508                           postinc2	equ	0xFDE
  8509                           postdec2	equ	0xFDD
  8510                           fsr2h	equ	0xFDA
  8511                           fsr2l	equ	0xFD9
  8512                           status	equ	0xFD8
  8513                           
  8514 ;; *************** function _is_valid *****************
  8515 ;; Defined at:
  8516 ;;		line 12 in file "keypad.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;		None
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;		None
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  2  121[None  ] int 
  8523 ;; Registers used:
  8524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;Total ram usage:        2 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    1
  8537 ;; This function calls:
  8538 ;;		_strcmp
  8539 ;;		i2___wmul
  8540 ;; This function is called by:
  8541 ;;		_interruptHandler
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	text29
  8546  000012                     __ptext29:
  8547                           	opt stack 0
  8548  000012                     _is_valid:
  8549                           	opt stack 25
  8550                           
  8551                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
  8552                           
  8553                           ;incstack = 0
  8554  000012  0E30               	movlw	low _current_set2
  8555  000014  6E37               	movwf	strcmp@s1,c
  8556  000016  0E00               	movlw	high _current_set2
  8557  000018  6E38               	movwf	strcmp@s1+1,c
  8558  00001A  0EFA               	movlw	low STR_51
  8559  00001C  6E39               	movwf	strcmp@s2,c
  8560  00001E  0EFF               	movlw	high STR_51
  8561  000020  6E3A               	movwf	strcmp@s2+1,c
  8562  000022  ECAC  F017         	call	_strcmp	;wreg free
  8563  000026  5037               	movf	?_strcmp,w,c
  8564  000028  1038               	iorwf	?_strcmp+1,w,c
  8565  00002A  A4D8               	btfss	status,2,c
  8566  00002C  D023               	goto	i2l560
  8567                           
  8568                           ;keypad.c: 17: B=1*number;
  8569  00002E  C035  F021         	movff	_number,_B
  8570  000032  C036  F022         	movff	_number+1,_B+1
  8571                           
  8572                           ;keypad.c: 18: total_number = 1*number;
  8573  000036  C035  F0D1         	movff	_number,_total_number
  8574  00003A  C036  F0D2         	movff	_number+1,_total_number+1
  8575                           
  8576                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
  8577  00003E  90D8               	bcf	status,0,c
  8578  000040  3425               	rlcf	_counter_step,w,c
  8579  000042  6ED9               	movwf	fsr2l,c
  8580  000044  3426               	rlcf	_counter_step+1,w,c
  8581  000046  6EDA               	movwf	fsr2h,c
  8582  000048  0E01               	movlw	low _compartment_number
  8583  00004A  26D9               	addwf	fsr2l,f,c
  8584  00004C  0E00               	movlw	high _compartment_number
  8585  00004E  22DA               	addwfc	fsr2h,f,c
  8586  000050  CFDE F03D          	movff	postinc2,??_is_valid
  8587  000054  CFDD F03E          	movff	postdec2,??_is_valid+1
  8588  000058  90D8               	bcf	status,0,c
  8589  00005A  363D               	rlcf	??_is_valid,f,c
  8590  00005C  363E               	rlcf	??_is_valid+1,f,c
  8591  00005E  0EA0               	movlw	low _B_array
  8592  000060  243D               	addwf	??_is_valid,w,c
  8593  000062  6ED9               	movwf	fsr2l,c
  8594  000064  0E00               	movlw	high _B_array
  8595  000066  203E               	addwfc	??_is_valid+1,w,c
  8596  000068  6EDA               	movwf	fsr2h,c
  8597  00006A  C021  FFDE         	movff	_B,postinc2
  8598  00006E  C022  FFDD         	movff	_B+1,postdec2
  8599                           
  8600                           ;keypad.c: 22: }
  8601  000072  0012               	return	
  8602  000074                     i2l560:
  8603                           
  8604                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
  8605  000074  0E30               	movlw	low _current_set2
  8606  000076  6E37               	movwf	strcmp@s1,c
  8607  000078  0E00               	movlw	high _current_set2
  8608  00007A  6E38               	movwf	strcmp@s1+1,c
  8609  00007C  0ED7               	movlw	low (STR_72+2)
  8610  00007E  6E39               	movwf	strcmp@s2,c
  8611  000080  0EFF               	movlw	high (STR_72+2)
  8612  000082  6E3A               	movwf	strcmp@s2+1,c
  8613  000084  ECAC  F017         	call	_strcmp	;wreg free
  8614  000088  5037               	movf	?_strcmp,w,c
  8615  00008A  1038               	iorwf	?_strcmp+1,w,c
  8616  00008C  A4D8               	btfss	status,2,c
  8617  00008E  D023               	goto	i2l562
  8618                           
  8619                           ;keypad.c: 25: N=1*number;
  8620  000090  C035  F01F         	movff	_number,_N
  8621  000094  C036  F020         	movff	_number+1,_N+1
  8622                           
  8623                           ;keypad.c: 26: total_number = 1*number;
  8624  000098  C035  F0D1         	movff	_number,_total_number
  8625  00009C  C036  F0D2         	movff	_number+1,_total_number+1
  8626                           
  8627                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
  8628  0000A0  90D8               	bcf	status,0,c
  8629  0000A2  3425               	rlcf	_counter_step,w,c
  8630  0000A4  6ED9               	movwf	fsr2l,c
  8631  0000A6  3426               	rlcf	_counter_step+1,w,c
  8632  0000A8  6EDA               	movwf	fsr2h,c
  8633  0000AA  0E01               	movlw	low _compartment_number
  8634  0000AC  26D9               	addwf	fsr2l,f,c
  8635  0000AE  0E00               	movlw	high _compartment_number
  8636  0000B0  22DA               	addwfc	fsr2h,f,c
  8637  0000B2  CFDE F03D          	movff	postinc2,??_is_valid
  8638  0000B6  CFDD F03E          	movff	postdec2,??_is_valid+1
  8639  0000BA  90D8               	bcf	status,0,c
  8640  0000BC  363D               	rlcf	??_is_valid,f,c
  8641  0000BE  363E               	rlcf	??_is_valid+1,f,c
  8642  0000C0  0E90               	movlw	low _N_array
  8643  0000C2  243D               	addwf	??_is_valid,w,c
  8644  0000C4  6ED9               	movwf	fsr2l,c
  8645  0000C6  0E00               	movlw	high _N_array
  8646  0000C8  203E               	addwfc	??_is_valid+1,w,c
  8647  0000CA  6EDA               	movwf	fsr2h,c
  8648  0000CC  C01F  FFDE         	movff	_N,postinc2
  8649  0000D0  C020  FFDD         	movff	_N+1,postdec2
  8650                           
  8651                           ;keypad.c: 28: }
  8652  0000D4  0012               	return	
  8653  0000D6                     i2l562:
  8654                           
  8655                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
  8656  0000D6  0E30               	movlw	low _current_set2
  8657  0000D8  6E37               	movwf	strcmp@s1,c
  8658  0000DA  0E00               	movlw	high _current_set2
  8659  0000DC  6E38               	movwf	strcmp@s1+1,c
  8660  0000DE  0EDB               	movlw	low (STR_73+2)
  8661  0000E0  6E39               	movwf	strcmp@s2,c
  8662  0000E2  0EFF               	movlw	high (STR_73+2)
  8663  0000E4  6E3A               	movwf	strcmp@s2+1,c
  8664  0000E6  ECAC  F017         	call	_strcmp	;wreg free
  8665  0000EA  5037               	movf	?_strcmp,w,c
  8666  0000EC  1038               	iorwf	?_strcmp+1,w,c
  8667  0000EE  A4D8               	btfss	status,2,c
  8668  0000F0  D023               	goto	i2l564
  8669                           
  8670                           ;keypad.c: 30: S=1*number;
  8671  0000F2  C035  F01D         	movff	_number,_S
  8672  0000F6  C036  F01E         	movff	_number+1,_S+1
  8673                           
  8674                           ;keypad.c: 31: total_number = 1*number;
  8675  0000FA  C035  F0D1         	movff	_number,_total_number
  8676  0000FE  C036  F0D2         	movff	_number+1,_total_number+1
  8677                           
  8678                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
  8679  000102  90D8               	bcf	status,0,c
  8680  000104  3425               	rlcf	_counter_step,w,c
  8681  000106  6ED9               	movwf	fsr2l,c
  8682  000108  3426               	rlcf	_counter_step+1,w,c
  8683  00010A  6EDA               	movwf	fsr2h,c
  8684  00010C  0E01               	movlw	low _compartment_number
  8685  00010E  26D9               	addwf	fsr2l,f,c
  8686  000110  0E00               	movlw	high _compartment_number
  8687  000112  22DA               	addwfc	fsr2h,f,c
  8688  000114  CFDE F03D          	movff	postinc2,??_is_valid
  8689  000118  CFDD F03E          	movff	postdec2,??_is_valid+1
  8690  00011C  90D8               	bcf	status,0,c
  8691  00011E  363D               	rlcf	??_is_valid,f,c
  8692  000120  363E               	rlcf	??_is_valid+1,f,c
  8693  000122  0E00               	movlw	low _S_array
  8694  000124  243D               	addwf	??_is_valid,w,c
  8695  000126  6ED9               	movwf	fsr2l,c
  8696  000128  0E01               	movlw	high _S_array
  8697  00012A  203E               	addwfc	??_is_valid+1,w,c
  8698  00012C  6EDA               	movwf	fsr2h,c
  8699  00012E  C01D  FFDE         	movff	_S,postinc2
  8700  000132  C01E  FFDD         	movff	_S+1,postdec2
  8701                           
  8702                           ;keypad.c: 33: }
  8703  000136  0012               	return	
  8704  000138                     i2l564:
  8705                           
  8706                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
  8707  000138  0E30               	movlw	low _current_set2
  8708  00013A  6E37               	movwf	strcmp@s1,c
  8709  00013C  0E00               	movlw	high _current_set2
  8710  00013E  6E38               	movwf	strcmp@s1+1,c
  8711  000140  0EDF               	movlw	low (STR_74+2)
  8712  000142  6E39               	movwf	strcmp@s2,c
  8713  000144  0EFF               	movlw	high (STR_74+2)
  8714  000146  6E3A               	movwf	strcmp@s2+1,c
  8715  000148  ECAC  F017         	call	_strcmp	;wreg free
  8716  00014C  5037               	movf	?_strcmp,w,c
  8717  00014E  1038               	iorwf	?_strcmp+1,w,c
  8718  000150  A4D8               	btfss	status,2,c
  8719  000152  D023               	goto	i2l566
  8720                           
  8721                           ;keypad.c: 35: W=1*number;
  8722  000154  C035  F01B         	movff	_number,_W
  8723  000158  C036  F01C         	movff	_number+1,_W+1
  8724                           
  8725                           ;keypad.c: 36: total_number = 1*number;
  8726  00015C  C035  F0D1         	movff	_number,_total_number
  8727  000160  C036  F0D2         	movff	_number+1,_total_number+1
  8728                           
  8729                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
  8730  000164  90D8               	bcf	status,0,c
  8731  000166  3425               	rlcf	_counter_step,w,c
  8732  000168  6ED9               	movwf	fsr2l,c
  8733  00016A  3426               	rlcf	_counter_step+1,w,c
  8734  00016C  6EDA               	movwf	fsr2h,c
  8735  00016E  0E01               	movlw	low _compartment_number
  8736  000170  26D9               	addwf	fsr2l,f,c
  8737  000172  0E00               	movlw	high _compartment_number
  8738  000174  22DA               	addwfc	fsr2h,f,c
  8739  000176  CFDE F03D          	movff	postinc2,??_is_valid
  8740  00017A  CFDD F03E          	movff	postdec2,??_is_valid+1
  8741  00017E  90D8               	bcf	status,0,c
  8742  000180  363D               	rlcf	??_is_valid,f,c
  8743  000182  363E               	rlcf	??_is_valid+1,f,c
  8744  000184  0E80               	movlw	low _W_array
  8745  000186  243D               	addwf	??_is_valid,w,c
  8746  000188  6ED9               	movwf	fsr2l,c
  8747  00018A  0E00               	movlw	high _W_array
  8748  00018C  203E               	addwfc	??_is_valid+1,w,c
  8749  00018E  6EDA               	movwf	fsr2h,c
  8750  000190  C01B  FFDE         	movff	_W,postinc2
  8751  000194  C01C  FFDD         	movff	_W+1,postdec2
  8752                           
  8753                           ;keypad.c: 38: }
  8754  000198  0012               	return	
  8755  00019A                     i2l566:
  8756                           
  8757                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
  8758  00019A  0E30               	movlw	low _current_set2
  8759  00019C  6E37               	movwf	strcmp@s1,c
  8760  00019E  0E00               	movlw	high _current_set2
  8761  0001A0  6E38               	movwf	strcmp@s1+1,c
  8762  0001A2  0ED6               	movlw	low (STR_72+1)
  8763  0001A4  6E39               	movwf	strcmp@s2,c
  8764  0001A6  0EFF               	movlw	high (STR_72+1)
  8765  0001A8  6E3A               	movwf	strcmp@s2+1,c
  8766  0001AA  ECAC  F017         	call	_strcmp	;wreg free
  8767  0001AE  5037               	movf	?_strcmp,w,c
  8768  0001B0  1038               	iorwf	?_strcmp+1,w,c
  8769  0001B2  A4D8               	btfss	status,2,c
  8770  0001B4  D043               	goto	i2l568
  8771                           
  8772                           ;keypad.c: 40: B = 1*number;
  8773  0001B6  C035  F021         	movff	_number,_B
  8774  0001BA  C036  F022         	movff	_number+1,_B+1
  8775                           
  8776                           ;keypad.c: 42: N = 1*number;
  8777  0001BE  C035  F01F         	movff	_number,_N
  8778  0001C2  C036  F020         	movff	_number+1,_N+1
  8779                           
  8780                           ;keypad.c: 43: total_number = 2*number;
  8781  0001C6  90D8               	bcf	status,0,c
  8782  0001C8  3435               	rlcf	_number,w,c
  8783  0001CA  0100               	movlb	0	; () banked
  8784  0001CC  6FD1               	movwf	_total_number& (0+255),b
  8785  0001CE  3436               	rlcf	_number+1,w,c
  8786  0001D0  6FD2               	movwf	(_total_number+1)& (0+255),b
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
  8790  0001D2  90D8               	bcf	status,0,c
  8791  0001D4  3425               	rlcf	_counter_step,w,c
  8792  0001D6  6ED9               	movwf	fsr2l,c
  8793  0001D8  3426               	rlcf	_counter_step+1,w,c
  8794  0001DA  6EDA               	movwf	fsr2h,c
  8795  0001DC  0E01               	movlw	low _compartment_number
  8796  0001DE  26D9               	addwf	fsr2l,f,c
  8797  0001E0  0E00               	movlw	high _compartment_number
  8798  0001E2  22DA               	addwfc	fsr2h,f,c
  8799  0001E4  CFDE F03D          	movff	postinc2,??_is_valid
  8800  0001E8  CFDD F03E          	movff	postdec2,??_is_valid+1
  8801  0001EC  90D8               	bcf	status,0,c
  8802  0001EE  363D               	rlcf	??_is_valid,f,c
  8803  0001F0  363E               	rlcf	??_is_valid+1,f,c
  8804  0001F2  0EA0               	movlw	low _B_array
  8805  0001F4  243D               	addwf	??_is_valid,w,c
  8806  0001F6  6ED9               	movwf	fsr2l,c
  8807  0001F8  0E00               	movlw	high _B_array
  8808  0001FA  203E               	addwfc	??_is_valid+1,w,c
  8809  0001FC  6EDA               	movwf	fsr2h,c
  8810  0001FE  C021  FFDE         	movff	_B,postinc2
  8811  000202  C022  FFDD         	movff	_B+1,postdec2
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
  8815  000206  90D8               	bcf	status,0,c
  8816  000208  3425               	rlcf	_counter_step,w,c
  8817  00020A  6ED9               	movwf	fsr2l,c
  8818  00020C  3426               	rlcf	_counter_step+1,w,c
  8819  00020E  6EDA               	movwf	fsr2h,c
  8820  000210  0E01               	movlw	low _compartment_number
  8821  000212  26D9               	addwf	fsr2l,f,c
  8822  000214  0E00               	movlw	high _compartment_number
  8823  000216  22DA               	addwfc	fsr2h,f,c
  8824  000218  CFDE F03D          	movff	postinc2,??_is_valid
  8825  00021C  CFDD F03E          	movff	postdec2,??_is_valid+1
  8826  000220  90D8               	bcf	status,0,c
  8827  000222  363D               	rlcf	??_is_valid,f,c
  8828  000224  363E               	rlcf	??_is_valid+1,f,c
  8829  000226  0E90               	movlw	low _N_array
  8830  000228  243D               	addwf	??_is_valid,w,c
  8831  00022A  6ED9               	movwf	fsr2l,c
  8832  00022C  0E00               	movlw	high _N_array
  8833  00022E  203E               	addwfc	??_is_valid+1,w,c
  8834  000230  6EDA               	movwf	fsr2h,c
  8835  000232  C01F  FFDE         	movff	_N,postinc2
  8836  000236  C020  FFDD         	movff	_N+1,postdec2
  8837                           
  8838                           ;keypad.c: 47: }
  8839  00023A  0012               	return	
  8840  00023C                     i2l568:
  8841                           
  8842                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
  8843                           
  8844                           ; BSR set to: 0
  8845  00023C  0E30               	movlw	low _current_set2
  8846  00023E  6E37               	movwf	strcmp@s1,c
  8847  000240  0E00               	movlw	high _current_set2
  8848  000242  6E38               	movwf	strcmp@s1+1,c
  8849  000244  0EDA               	movlw	low (STR_73+1)
  8850  000246  6E39               	movwf	strcmp@s2,c
  8851  000248  0EFF               	movlw	high (STR_73+1)
  8852  00024A  6E3A               	movwf	strcmp@s2+1,c
  8853  00024C  ECAC  F017         	call	_strcmp	;wreg free
  8854  000250  5037               	movf	?_strcmp,w,c
  8855  000252  1038               	iorwf	?_strcmp+1,w,c
  8856  000254  A4D8               	btfss	status,2,c
  8857  000256  D043               	goto	i2l570
  8858                           
  8859                           ;keypad.c: 49: B = 1*number;
  8860  000258  C035  F021         	movff	_number,_B
  8861  00025C  C036  F022         	movff	_number+1,_B+1
  8862                           
  8863                           ;keypad.c: 51: S = 1*number;
  8864  000260  C035  F01D         	movff	_number,_S
  8865  000264  C036  F01E         	movff	_number+1,_S+1
  8866                           
  8867                           ;keypad.c: 52: total_number = 2*number;
  8868  000268  90D8               	bcf	status,0,c
  8869  00026A  3435               	rlcf	_number,w,c
  8870  00026C  0100               	movlb	0	; () banked
  8871  00026E  6FD1               	movwf	_total_number& (0+255),b
  8872  000270  3436               	rlcf	_number+1,w,c
  8873  000272  6FD2               	movwf	(_total_number+1)& (0+255),b
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
  8877  000274  90D8               	bcf	status,0,c
  8878  000276  3425               	rlcf	_counter_step,w,c
  8879  000278  6ED9               	movwf	fsr2l,c
  8880  00027A  3426               	rlcf	_counter_step+1,w,c
  8881  00027C  6EDA               	movwf	fsr2h,c
  8882  00027E  0E01               	movlw	low _compartment_number
  8883  000280  26D9               	addwf	fsr2l,f,c
  8884  000282  0E00               	movlw	high _compartment_number
  8885  000284  22DA               	addwfc	fsr2h,f,c
  8886  000286  CFDE F03D          	movff	postinc2,??_is_valid
  8887  00028A  CFDD F03E          	movff	postdec2,??_is_valid+1
  8888  00028E  90D8               	bcf	status,0,c
  8889  000290  363D               	rlcf	??_is_valid,f,c
  8890  000292  363E               	rlcf	??_is_valid+1,f,c
  8891  000294  0EA0               	movlw	low _B_array
  8892  000296  243D               	addwf	??_is_valid,w,c
  8893  000298  6ED9               	movwf	fsr2l,c
  8894  00029A  0E00               	movlw	high _B_array
  8895  00029C  203E               	addwfc	??_is_valid+1,w,c
  8896  00029E  6EDA               	movwf	fsr2h,c
  8897  0002A0  C021  FFDE         	movff	_B,postinc2
  8898  0002A4  C022  FFDD         	movff	_B+1,postdec2
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
  8902  0002A8  90D8               	bcf	status,0,c
  8903  0002AA  3425               	rlcf	_counter_step,w,c
  8904  0002AC  6ED9               	movwf	fsr2l,c
  8905  0002AE  3426               	rlcf	_counter_step+1,w,c
  8906  0002B0  6EDA               	movwf	fsr2h,c
  8907  0002B2  0E01               	movlw	low _compartment_number
  8908  0002B4  26D9               	addwf	fsr2l,f,c
  8909  0002B6  0E00               	movlw	high _compartment_number
  8910  0002B8  22DA               	addwfc	fsr2h,f,c
  8911  0002BA  CFDE F03D          	movff	postinc2,??_is_valid
  8912  0002BE  CFDD F03E          	movff	postdec2,??_is_valid+1
  8913  0002C2  90D8               	bcf	status,0,c
  8914  0002C4  363D               	rlcf	??_is_valid,f,c
  8915  0002C6  363E               	rlcf	??_is_valid+1,f,c
  8916  0002C8  0E00               	movlw	low _S_array
  8917  0002CA  243D               	addwf	??_is_valid,w,c
  8918  0002CC  6ED9               	movwf	fsr2l,c
  8919  0002CE  0E01               	movlw	high _S_array
  8920  0002D0  203E               	addwfc	??_is_valid+1,w,c
  8921  0002D2  6EDA               	movwf	fsr2h,c
  8922  0002D4  C01D  FFDE         	movff	_S,postinc2
  8923  0002D8  C01E  FFDD         	movff	_S+1,postdec2
  8924                           
  8925                           ;keypad.c: 57: }
  8926  0002DC  0012               	return	
  8927  0002DE                     i2l570:
  8928                           
  8929                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
  8930                           
  8931                           ; BSR set to: 0
  8932  0002DE  0E30               	movlw	low _current_set2
  8933  0002E0  6E37               	movwf	strcmp@s1,c
  8934  0002E2  0E00               	movlw	high _current_set2
  8935  0002E4  6E38               	movwf	strcmp@s1+1,c
  8936  0002E6  0EDE               	movlw	low (STR_74+1)
  8937  0002E8  6E39               	movwf	strcmp@s2,c
  8938  0002EA  0EFF               	movlw	high (STR_74+1)
  8939  0002EC  6E3A               	movwf	strcmp@s2+1,c
  8940  0002EE  ECAC  F017         	call	_strcmp	;wreg free
  8941  0002F2  5037               	movf	?_strcmp,w,c
  8942  0002F4  1038               	iorwf	?_strcmp+1,w,c
  8943  0002F6  A4D8               	btfss	status,2,c
  8944  0002F8  D043               	goto	i2l572
  8945                           
  8946                           ;keypad.c: 60: B = 1*number;
  8947  0002FA  C035  F021         	movff	_number,_B
  8948  0002FE  C036  F022         	movff	_number+1,_B+1
  8949                           
  8950                           ;keypad.c: 62: W = 1*number;
  8951  000302  C035  F01B         	movff	_number,_W
  8952  000306  C036  F01C         	movff	_number+1,_W+1
  8953                           
  8954                           ;keypad.c: 63: total_number = 2*number;
  8955  00030A  90D8               	bcf	status,0,c
  8956  00030C  3435               	rlcf	_number,w,c
  8957  00030E  0100               	movlb	0	; () banked
  8958  000310  6FD1               	movwf	_total_number& (0+255),b
  8959  000312  3436               	rlcf	_number+1,w,c
  8960  000314  6FD2               	movwf	(_total_number+1)& (0+255),b
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
  8964  000316  90D8               	bcf	status,0,c
  8965  000318  3425               	rlcf	_counter_step,w,c
  8966  00031A  6ED9               	movwf	fsr2l,c
  8967  00031C  3426               	rlcf	_counter_step+1,w,c
  8968  00031E  6EDA               	movwf	fsr2h,c
  8969  000320  0E01               	movlw	low _compartment_number
  8970  000322  26D9               	addwf	fsr2l,f,c
  8971  000324  0E00               	movlw	high _compartment_number
  8972  000326  22DA               	addwfc	fsr2h,f,c
  8973  000328  CFDE F03D          	movff	postinc2,??_is_valid
  8974  00032C  CFDD F03E          	movff	postdec2,??_is_valid+1
  8975  000330  90D8               	bcf	status,0,c
  8976  000332  363D               	rlcf	??_is_valid,f,c
  8977  000334  363E               	rlcf	??_is_valid+1,f,c
  8978  000336  0EA0               	movlw	low _B_array
  8979  000338  243D               	addwf	??_is_valid,w,c
  8980  00033A  6ED9               	movwf	fsr2l,c
  8981  00033C  0E00               	movlw	high _B_array
  8982  00033E  203E               	addwfc	??_is_valid+1,w,c
  8983  000340  6EDA               	movwf	fsr2h,c
  8984  000342  C021  FFDE         	movff	_B,postinc2
  8985  000346  C022  FFDD         	movff	_B+1,postdec2
  8986                           
  8987                           ; BSR set to: 0
  8988                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
  8989  00034A  90D8               	bcf	status,0,c
  8990  00034C  3425               	rlcf	_counter_step,w,c
  8991  00034E  6ED9               	movwf	fsr2l,c
  8992  000350  3426               	rlcf	_counter_step+1,w,c
  8993  000352  6EDA               	movwf	fsr2h,c
  8994  000354  0E01               	movlw	low _compartment_number
  8995  000356  26D9               	addwf	fsr2l,f,c
  8996  000358  0E00               	movlw	high _compartment_number
  8997  00035A  22DA               	addwfc	fsr2h,f,c
  8998  00035C  CFDE F03D          	movff	postinc2,??_is_valid
  8999  000360  CFDD F03E          	movff	postdec2,??_is_valid+1
  9000  000364  90D8               	bcf	status,0,c
  9001  000366  363D               	rlcf	??_is_valid,f,c
  9002  000368  363E               	rlcf	??_is_valid+1,f,c
  9003  00036A  0E80               	movlw	low _W_array
  9004  00036C  243D               	addwf	??_is_valid,w,c
  9005  00036E  6ED9               	movwf	fsr2l,c
  9006  000370  0E00               	movlw	high _W_array
  9007  000372  203E               	addwfc	??_is_valid+1,w,c
  9008  000374  6EDA               	movwf	fsr2h,c
  9009  000376  C01B  FFDE         	movff	_W,postinc2
  9010  00037A  C01C  FFDD         	movff	_W+1,postdec2
  9011                           
  9012                           ;keypad.c: 67: }
  9013  00037E  0012               	return	
  9014  000380                     i2l572:
  9015                           
  9016                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
  9017                           
  9018                           ; BSR set to: 0
  9019  000380  0E30               	movlw	low _current_set2
  9020  000382  6E37               	movwf	strcmp@s1,c
  9021  000384  0E00               	movlw	high _current_set2
  9022  000386  6E38               	movwf	strcmp@s1+1,c
  9023  000388  0ED5               	movlw	low STR_72
  9024  00038A  6E39               	movwf	strcmp@s2,c
  9025  00038C  0EFF               	movlw	high STR_72
  9026  00038E  6E3A               	movwf	strcmp@s2+1,c
  9027  000390  ECAC  F017         	call	_strcmp	;wreg free
  9028  000394  5037               	movf	?_strcmp,w,c
  9029  000396  1038               	iorwf	?_strcmp+1,w,c
  9030  000398  A4D8               	btfss	status,2,c
  9031  00039A  D04C               	goto	i2l574
  9032                           
  9033                           ;keypad.c: 69: B = 2*number;
  9034  00039C  90D8               	bcf	status,0,c
  9035  00039E  3435               	rlcf	_number,w,c
  9036  0003A0  6E21               	movwf	_B,c
  9037  0003A2  3436               	rlcf	_number+1,w,c
  9038  0003A4  6E22               	movwf	_B+1,c
  9039                           
  9040                           ;keypad.c: 71: N = 1*number;
  9041  0003A6  C035  F01F         	movff	_number,_N
  9042  0003AA  C036  F020         	movff	_number+1,_N+1
  9043                           
  9044                           ;keypad.c: 72: total_number = 3*number;
  9045  0003AE  C035  F037         	movff	_number,i2___wmul@multiplier
  9046  0003B2  C036  F038         	movff	_number+1,i2___wmul@multiplier+1
  9047  0003B6  0E00               	movlw	0
  9048  0003B8  6E3A               	movwf	i2___wmul@multiplicand+1,c
  9049  0003BA  0E03               	movlw	3
  9050  0003BC  6E39               	movwf	i2___wmul@multiplicand,c
  9051  0003BE  EC90  F018         	call	i2___wmul	;wreg free
  9052  0003C2  C037  F0D1         	movff	?i2___wmul,_total_number
  9053  0003C6  C038  F0D2         	movff	?i2___wmul+1,_total_number+1
  9054                           
  9055                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
  9056  0003CA  90D8               	bcf	status,0,c
  9057  0003CC  3425               	rlcf	_counter_step,w,c
  9058  0003CE  6ED9               	movwf	fsr2l,c
  9059  0003D0  3426               	rlcf	_counter_step+1,w,c
  9060  0003D2  6EDA               	movwf	fsr2h,c
  9061  0003D4  0E01               	movlw	low _compartment_number
  9062  0003D6  26D9               	addwf	fsr2l,f,c
  9063  0003D8  0E00               	movlw	high _compartment_number
  9064  0003DA  22DA               	addwfc	fsr2h,f,c
  9065  0003DC  CFDE F03D          	movff	postinc2,??_is_valid
  9066  0003E0  CFDD F03E          	movff	postdec2,??_is_valid+1
  9067  0003E4  90D8               	bcf	status,0,c
  9068  0003E6  363D               	rlcf	??_is_valid,f,c
  9069  0003E8  363E               	rlcf	??_is_valid+1,f,c
  9070  0003EA  0EA0               	movlw	low _B_array
  9071  0003EC  243D               	addwf	??_is_valid,w,c
  9072  0003EE  6ED9               	movwf	fsr2l,c
  9073  0003F0  0E00               	movlw	high _B_array
  9074  0003F2  203E               	addwfc	??_is_valid+1,w,c
  9075  0003F4  6EDA               	movwf	fsr2h,c
  9076  0003F6  C021  FFDE         	movff	_B,postinc2
  9077  0003FA  C022  FFDD         	movff	_B+1,postdec2
  9078                           
  9079                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
  9080  0003FE  90D8               	bcf	status,0,c
  9081  000400  3425               	rlcf	_counter_step,w,c
  9082  000402  6ED9               	movwf	fsr2l,c
  9083  000404  3426               	rlcf	_counter_step+1,w,c
  9084  000406  6EDA               	movwf	fsr2h,c
  9085  000408  0E01               	movlw	low _compartment_number
  9086  00040A  26D9               	addwf	fsr2l,f,c
  9087  00040C  0E00               	movlw	high _compartment_number
  9088  00040E  22DA               	addwfc	fsr2h,f,c
  9089  000410  CFDE F03D          	movff	postinc2,??_is_valid
  9090  000414  CFDD F03E          	movff	postdec2,??_is_valid+1
  9091  000418  90D8               	bcf	status,0,c
  9092  00041A  363D               	rlcf	??_is_valid,f,c
  9093  00041C  363E               	rlcf	??_is_valid+1,f,c
  9094  00041E  0E90               	movlw	low _N_array
  9095  000420  243D               	addwf	??_is_valid,w,c
  9096  000422  6ED9               	movwf	fsr2l,c
  9097  000424  0E00               	movlw	high _N_array
  9098  000426  203E               	addwfc	??_is_valid+1,w,c
  9099  000428  6EDA               	movwf	fsr2h,c
  9100  00042A  C01F  FFDE         	movff	_N,postinc2
  9101  00042E  C020  FFDD         	movff	_N+1,postdec2
  9102                           
  9103                           ;keypad.c: 76: }
  9104  000432  0012               	return	
  9105  000434                     i2l574:
  9106                           
  9107                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
  9108  000434  0E30               	movlw	low _current_set2
  9109  000436  6E37               	movwf	strcmp@s1,c
  9110  000438  0E00               	movlw	high _current_set2
  9111  00043A  6E38               	movwf	strcmp@s1+1,c
  9112  00043C  0ED9               	movlw	low STR_73
  9113  00043E  6E39               	movwf	strcmp@s2,c
  9114  000440  0EFF               	movlw	high STR_73
  9115  000442  6E3A               	movwf	strcmp@s2+1,c
  9116  000444  ECAC  F017         	call	_strcmp	;wreg free
  9117  000448  5037               	movf	?_strcmp,w,c
  9118  00044A  1038               	iorwf	?_strcmp+1,w,c
  9119  00044C  A4D8               	btfss	status,2,c
  9120  00044E  D04C               	goto	i2l576
  9121                           
  9122                           ;keypad.c: 78: B = 2*number;
  9123  000450  90D8               	bcf	status,0,c
  9124  000452  3435               	rlcf	_number,w,c
  9125  000454  6E21               	movwf	_B,c
  9126  000456  3436               	rlcf	_number+1,w,c
  9127  000458  6E22               	movwf	_B+1,c
  9128                           
  9129                           ;keypad.c: 80: S = 1*number;
  9130  00045A  C035  F01D         	movff	_number,_S
  9131  00045E  C036  F01E         	movff	_number+1,_S+1
  9132                           
  9133                           ;keypad.c: 81: total_number = 3*number;
  9134  000462  C035  F037         	movff	_number,i2___wmul@multiplier
  9135  000466  C036  F038         	movff	_number+1,i2___wmul@multiplier+1
  9136  00046A  0E00               	movlw	0
  9137  00046C  6E3A               	movwf	i2___wmul@multiplicand+1,c
  9138  00046E  0E03               	movlw	3
  9139  000470  6E39               	movwf	i2___wmul@multiplicand,c
  9140  000472  EC90  F018         	call	i2___wmul	;wreg free
  9141  000476  C037  F0D1         	movff	?i2___wmul,_total_number
  9142  00047A  C038  F0D2         	movff	?i2___wmul+1,_total_number+1
  9143                           
  9144                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
  9145  00047E  90D8               	bcf	status,0,c
  9146  000480  3425               	rlcf	_counter_step,w,c
  9147  000482  6ED9               	movwf	fsr2l,c
  9148  000484  3426               	rlcf	_counter_step+1,w,c
  9149  000486  6EDA               	movwf	fsr2h,c
  9150  000488  0E01               	movlw	low _compartment_number
  9151  00048A  26D9               	addwf	fsr2l,f,c
  9152  00048C  0E00               	movlw	high _compartment_number
  9153  00048E  22DA               	addwfc	fsr2h,f,c
  9154  000490  CFDE F03D          	movff	postinc2,??_is_valid
  9155  000494  CFDD F03E          	movff	postdec2,??_is_valid+1
  9156  000498  90D8               	bcf	status,0,c
  9157  00049A  363D               	rlcf	??_is_valid,f,c
  9158  00049C  363E               	rlcf	??_is_valid+1,f,c
  9159  00049E  0EA0               	movlw	low _B_array
  9160  0004A0  243D               	addwf	??_is_valid,w,c
  9161  0004A2  6ED9               	movwf	fsr2l,c
  9162  0004A4  0E00               	movlw	high _B_array
  9163  0004A6  203E               	addwfc	??_is_valid+1,w,c
  9164  0004A8  6EDA               	movwf	fsr2h,c
  9165  0004AA  C021  FFDE         	movff	_B,postinc2
  9166  0004AE  C022  FFDD         	movff	_B+1,postdec2
  9167                           
  9168                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
  9169  0004B2  90D8               	bcf	status,0,c
  9170  0004B4  3425               	rlcf	_counter_step,w,c
  9171  0004B6  6ED9               	movwf	fsr2l,c
  9172  0004B8  3426               	rlcf	_counter_step+1,w,c
  9173  0004BA  6EDA               	movwf	fsr2h,c
  9174  0004BC  0E01               	movlw	low _compartment_number
  9175  0004BE  26D9               	addwf	fsr2l,f,c
  9176  0004C0  0E00               	movlw	high _compartment_number
  9177  0004C2  22DA               	addwfc	fsr2h,f,c
  9178  0004C4  CFDE F03D          	movff	postinc2,??_is_valid
  9179  0004C8  CFDD F03E          	movff	postdec2,??_is_valid+1
  9180  0004CC  90D8               	bcf	status,0,c
  9181  0004CE  363D               	rlcf	??_is_valid,f,c
  9182  0004D0  363E               	rlcf	??_is_valid+1,f,c
  9183  0004D2  0E00               	movlw	low _S_array
  9184  0004D4  243D               	addwf	??_is_valid,w,c
  9185  0004D6  6ED9               	movwf	fsr2l,c
  9186  0004D8  0E01               	movlw	high _S_array
  9187  0004DA  203E               	addwfc	??_is_valid+1,w,c
  9188  0004DC  6EDA               	movwf	fsr2h,c
  9189  0004DE  C01D  FFDE         	movff	_S,postinc2
  9190  0004E2  C01E  FFDD         	movff	_S+1,postdec2
  9191                           
  9192                           ;keypad.c: 85: }
  9193  0004E6  0012               	return	
  9194  0004E8                     i2l576:
  9195                           
  9196                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
  9197  0004E8  0E30               	movlw	low _current_set2
  9198  0004EA  6E37               	movwf	strcmp@s1,c
  9199  0004EC  0E00               	movlw	high _current_set2
  9200  0004EE  6E38               	movwf	strcmp@s1+1,c
  9201  0004F0  0EDD               	movlw	low STR_74
  9202  0004F2  6E39               	movwf	strcmp@s2,c
  9203  0004F4  0EFF               	movlw	high STR_74
  9204  0004F6  6E3A               	movwf	strcmp@s2+1,c
  9205  0004F8  ECAC  F017         	call	_strcmp	;wreg free
  9206  0004FC  5037               	movf	?_strcmp,w,c
  9207  0004FE  1038               	iorwf	?_strcmp+1,w,c
  9208  000500  A4D8               	btfss	status,2,c
  9209  000502  D04C               	goto	i2l578
  9210                           
  9211                           ;keypad.c: 87: B = 2*number;
  9212  000504  90D8               	bcf	status,0,c
  9213  000506  3435               	rlcf	_number,w,c
  9214  000508  6E21               	movwf	_B,c
  9215  00050A  3436               	rlcf	_number+1,w,c
  9216  00050C  6E22               	movwf	_B+1,c
  9217                           
  9218                           ;keypad.c: 89: W = 1*number;
  9219  00050E  C035  F01B         	movff	_number,_W
  9220  000512  C036  F01C         	movff	_number+1,_W+1
  9221                           
  9222                           ;keypad.c: 90: total_number = 3*number;
  9223  000516  C035  F037         	movff	_number,i2___wmul@multiplier
  9224  00051A  C036  F038         	movff	_number+1,i2___wmul@multiplier+1
  9225  00051E  0E00               	movlw	0
  9226  000520  6E3A               	movwf	i2___wmul@multiplicand+1,c
  9227  000522  0E03               	movlw	3
  9228  000524  6E39               	movwf	i2___wmul@multiplicand,c
  9229  000526  EC90  F018         	call	i2___wmul	;wreg free
  9230  00052A  C037  F0D1         	movff	?i2___wmul,_total_number
  9231  00052E  C038  F0D2         	movff	?i2___wmul+1,_total_number+1
  9232                           
  9233                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
  9234  000532  90D8               	bcf	status,0,c
  9235  000534  3425               	rlcf	_counter_step,w,c
  9236  000536  6ED9               	movwf	fsr2l,c
  9237  000538  3426               	rlcf	_counter_step+1,w,c
  9238  00053A  6EDA               	movwf	fsr2h,c
  9239  00053C  0E01               	movlw	low _compartment_number
  9240  00053E  26D9               	addwf	fsr2l,f,c
  9241  000540  0E00               	movlw	high _compartment_number
  9242  000542  22DA               	addwfc	fsr2h,f,c
  9243  000544  CFDE F03D          	movff	postinc2,??_is_valid
  9244  000548  CFDD F03E          	movff	postdec2,??_is_valid+1
  9245  00054C  90D8               	bcf	status,0,c
  9246  00054E  363D               	rlcf	??_is_valid,f,c
  9247  000550  363E               	rlcf	??_is_valid+1,f,c
  9248  000552  0EA0               	movlw	low _B_array
  9249  000554  243D               	addwf	??_is_valid,w,c
  9250  000556  6ED9               	movwf	fsr2l,c
  9251  000558  0E00               	movlw	high _B_array
  9252  00055A  203E               	addwfc	??_is_valid+1,w,c
  9253  00055C  6EDA               	movwf	fsr2h,c
  9254  00055E  C021  FFDE         	movff	_B,postinc2
  9255  000562  C022  FFDD         	movff	_B+1,postdec2
  9256                           
  9257                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
  9258  000566  90D8               	bcf	status,0,c
  9259  000568  3425               	rlcf	_counter_step,w,c
  9260  00056A  6ED9               	movwf	fsr2l,c
  9261  00056C  3426               	rlcf	_counter_step+1,w,c
  9262  00056E  6EDA               	movwf	fsr2h,c
  9263  000570  0E01               	movlw	low _compartment_number
  9264  000572  26D9               	addwf	fsr2l,f,c
  9265  000574  0E00               	movlw	high _compartment_number
  9266  000576  22DA               	addwfc	fsr2h,f,c
  9267  000578  CFDE F03D          	movff	postinc2,??_is_valid
  9268  00057C  CFDD F03E          	movff	postdec2,??_is_valid+1
  9269  000580  90D8               	bcf	status,0,c
  9270  000582  363D               	rlcf	??_is_valid,f,c
  9271  000584  363E               	rlcf	??_is_valid+1,f,c
  9272  000586  0E80               	movlw	low _W_array
  9273  000588  243D               	addwf	??_is_valid,w,c
  9274  00058A  6ED9               	movwf	fsr2l,c
  9275  00058C  0E00               	movlw	high _W_array
  9276  00058E  203E               	addwfc	??_is_valid+1,w,c
  9277  000590  6EDA               	movwf	fsr2h,c
  9278  000592  C01B  FFDE         	movff	_W,postinc2
  9279  000596  C01C  FFDD         	movff	_W+1,postdec2
  9280                           
  9281                           ;keypad.c: 94: }
  9282  00059A  0012               	return	
  9283  00059C                     i2l578:
  9284                           
  9285                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
  9286  00059C  0E30               	movlw	low _current_set2
  9287  00059E  6E37               	movwf	strcmp@s1,c
  9288  0005A0  0E00               	movlw	high _current_set2
  9289  0005A2  6E38               	movwf	strcmp@s1+1,c
  9290  0005A4  0EB3               	movlw	low (STR_81+1)
  9291  0005A6  6E39               	movwf	strcmp@s2,c
  9292  0005A8  0EFF               	movlw	high (STR_81+1)
  9293  0005AA  6E3A               	movwf	strcmp@s2+1,c
  9294  0005AC  ECAC  F017         	call	_strcmp	;wreg free
  9295  0005B0  5037               	movf	?_strcmp,w,c
  9296  0005B2  1038               	iorwf	?_strcmp+1,w,c
  9297  0005B4  A4D8               	btfss	status,2,c
  9298  0005B6  D069               	goto	i2l580
  9299                           
  9300                           ;keypad.c: 96: B = 1*number;
  9301  0005B8  C035  F021         	movff	_number,_B
  9302  0005BC  C036  F022         	movff	_number+1,_B+1
  9303                           
  9304                           ;keypad.c: 97: W = 1*number;
  9305  0005C0  C035  F01B         	movff	_number,_W
  9306  0005C4  C036  F01C         	movff	_number+1,_W+1
  9307                           
  9308                           ;keypad.c: 98: N = 1*number;
  9309  0005C8  C035  F01F         	movff	_number,_N
  9310  0005CC  C036  F020         	movff	_number+1,_N+1
  9311                           
  9312                           ;keypad.c: 99: total_number = 3*number;
  9313  0005D0  C035  F037         	movff	_number,i2___wmul@multiplier
  9314  0005D4  C036  F038         	movff	_number+1,i2___wmul@multiplier+1
  9315  0005D8  0E00               	movlw	0
  9316  0005DA  6E3A               	movwf	i2___wmul@multiplicand+1,c
  9317  0005DC  0E03               	movlw	3
  9318  0005DE  6E39               	movwf	i2___wmul@multiplicand,c
  9319  0005E0  EC90  F018         	call	i2___wmul	;wreg free
  9320  0005E4  C037  F0D1         	movff	?i2___wmul,_total_number
  9321  0005E8  C038  F0D2         	movff	?i2___wmul+1,_total_number+1
  9322                           
  9323                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
  9324  0005EC  90D8               	bcf	status,0,c
  9325  0005EE  3425               	rlcf	_counter_step,w,c
  9326  0005F0  6ED9               	movwf	fsr2l,c
  9327  0005F2  3426               	rlcf	_counter_step+1,w,c
  9328  0005F4  6EDA               	movwf	fsr2h,c
  9329  0005F6  0E01               	movlw	low _compartment_number
  9330  0005F8  26D9               	addwf	fsr2l,f,c
  9331  0005FA  0E00               	movlw	high _compartment_number
  9332  0005FC  22DA               	addwfc	fsr2h,f,c
  9333  0005FE  CFDE F03D          	movff	postinc2,??_is_valid
  9334  000602  CFDD F03E          	movff	postdec2,??_is_valid+1
  9335  000606  90D8               	bcf	status,0,c
  9336  000608  363D               	rlcf	??_is_valid,f,c
  9337  00060A  363E               	rlcf	??_is_valid+1,f,c
  9338  00060C  0EA0               	movlw	low _B_array
  9339  00060E  243D               	addwf	??_is_valid,w,c
  9340  000610  6ED9               	movwf	fsr2l,c
  9341  000612  0E00               	movlw	high _B_array
  9342  000614  203E               	addwfc	??_is_valid+1,w,c
  9343  000616  6EDA               	movwf	fsr2h,c
  9344  000618  C021  FFDE         	movff	_B,postinc2
  9345  00061C  C022  FFDD         	movff	_B+1,postdec2
  9346                           
  9347                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
  9348  000620  90D8               	bcf	status,0,c
  9349  000622  3425               	rlcf	_counter_step,w,c
  9350  000624  6ED9               	movwf	fsr2l,c
  9351  000626  3426               	rlcf	_counter_step+1,w,c
  9352  000628  6EDA               	movwf	fsr2h,c
  9353  00062A  0E01               	movlw	low _compartment_number
  9354  00062C  26D9               	addwf	fsr2l,f,c
  9355  00062E  0E00               	movlw	high _compartment_number
  9356  000630  22DA               	addwfc	fsr2h,f,c
  9357  000632  CFDE F03D          	movff	postinc2,??_is_valid
  9358  000636  CFDD F03E          	movff	postdec2,??_is_valid+1
  9359  00063A  90D8               	bcf	status,0,c
  9360  00063C  363D               	rlcf	??_is_valid,f,c
  9361  00063E  363E               	rlcf	??_is_valid+1,f,c
  9362  000640  0E80               	movlw	low _W_array
  9363  000642  243D               	addwf	??_is_valid,w,c
  9364  000644  6ED9               	movwf	fsr2l,c
  9365  000646  0E00               	movlw	high _W_array
  9366  000648  203E               	addwfc	??_is_valid+1,w,c
  9367  00064A  6EDA               	movwf	fsr2h,c
  9368  00064C  C01B  FFDE         	movff	_W,postinc2
  9369  000650  C01C  FFDD         	movff	_W+1,postdec2
  9370                           
  9371                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
  9372  000654  90D8               	bcf	status,0,c
  9373  000656  3425               	rlcf	_counter_step,w,c
  9374  000658  6ED9               	movwf	fsr2l,c
  9375  00065A  3426               	rlcf	_counter_step+1,w,c
  9376  00065C  6EDA               	movwf	fsr2h,c
  9377  00065E  0E01               	movlw	low _compartment_number
  9378  000660  26D9               	addwf	fsr2l,f,c
  9379  000662  0E00               	movlw	high _compartment_number
  9380  000664  22DA               	addwfc	fsr2h,f,c
  9381  000666  CFDE F03D          	movff	postinc2,??_is_valid
  9382  00066A  CFDD F03E          	movff	postdec2,??_is_valid+1
  9383  00066E  90D8               	bcf	status,0,c
  9384  000670  363D               	rlcf	??_is_valid,f,c
  9385  000672  363E               	rlcf	??_is_valid+1,f,c
  9386  000674  0E90               	movlw	low _N_array
  9387  000676  243D               	addwf	??_is_valid,w,c
  9388  000678  6ED9               	movwf	fsr2l,c
  9389  00067A  0E00               	movlw	high _N_array
  9390  00067C  203E               	addwfc	??_is_valid+1,w,c
  9391  00067E  6EDA               	movwf	fsr2h,c
  9392  000680  C01F  FFDE         	movff	_N,postinc2
  9393  000684  C020  FFDD         	movff	_N+1,postdec2
  9394                           
  9395                           ;keypad.c: 105: }
  9396  000688  0012               	return	
  9397  00068A                     i2l580:
  9398                           
  9399                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
  9400  00068A  0E30               	movlw	low _current_set2
  9401  00068C  6E37               	movwf	strcmp@s1,c
  9402  00068E  0E00               	movlw	high _current_set2
  9403  000690  6E38               	movwf	strcmp@s1+1,c
  9404  000692  0EBD               	movlw	low (STR_80+1)
  9405  000694  6E39               	movwf	strcmp@s2,c
  9406  000696  0EFF               	movlw	high (STR_80+1)
  9407  000698  6E3A               	movwf	strcmp@s2+1,c
  9408  00069A  ECAC  F017         	call	_strcmp	;wreg free
  9409  00069E  5037               	movf	?_strcmp,w,c
  9410  0006A0  1038               	iorwf	?_strcmp+1,w,c
  9411  0006A2  A4D8               	btfss	status,2,c
  9412  0006A4  D069               	goto	i2l582
  9413                           
  9414                           ;keypad.c: 107: B = 1*number;
  9415  0006A6  C035  F021         	movff	_number,_B
  9416  0006AA  C036  F022         	movff	_number+1,_B+1
  9417                           
  9418                           ;keypad.c: 108: S = 1*number;
  9419  0006AE  C035  F01D         	movff	_number,_S
  9420  0006B2  C036  F01E         	movff	_number+1,_S+1
  9421                           
  9422                           ;keypad.c: 109: N = 1*number;
  9423  0006B6  C035  F01F         	movff	_number,_N
  9424  0006BA  C036  F020         	movff	_number+1,_N+1
  9425                           
  9426                           ;keypad.c: 110: total_number = 3*number;
  9427  0006BE  C035  F037         	movff	_number,i2___wmul@multiplier
  9428  0006C2  C036  F038         	movff	_number+1,i2___wmul@multiplier+1
  9429  0006C6  0E00               	movlw	0
  9430  0006C8  6E3A               	movwf	i2___wmul@multiplicand+1,c
  9431  0006CA  0E03               	movlw	3
  9432  0006CC  6E39               	movwf	i2___wmul@multiplicand,c
  9433  0006CE  EC90  F018         	call	i2___wmul	;wreg free
  9434  0006D2  C037  F0D1         	movff	?i2___wmul,_total_number
  9435  0006D6  C038  F0D2         	movff	?i2___wmul+1,_total_number+1
  9436                           
  9437                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
  9438  0006DA  90D8               	bcf	status,0,c
  9439  0006DC  3425               	rlcf	_counter_step,w,c
  9440  0006DE  6ED9               	movwf	fsr2l,c
  9441  0006E0  3426               	rlcf	_counter_step+1,w,c
  9442  0006E2  6EDA               	movwf	fsr2h,c
  9443  0006E4  0E01               	movlw	low _compartment_number
  9444  0006E6  26D9               	addwf	fsr2l,f,c
  9445  0006E8  0E00               	movlw	high _compartment_number
  9446  0006EA  22DA               	addwfc	fsr2h,f,c
  9447  0006EC  CFDE F03D          	movff	postinc2,??_is_valid
  9448  0006F0  CFDD F03E          	movff	postdec2,??_is_valid+1
  9449  0006F4  90D8               	bcf	status,0,c
  9450  0006F6  363D               	rlcf	??_is_valid,f,c
  9451  0006F8  363E               	rlcf	??_is_valid+1,f,c
  9452  0006FA  0EA0               	movlw	low _B_array
  9453  0006FC  243D               	addwf	??_is_valid,w,c
  9454  0006FE  6ED9               	movwf	fsr2l,c
  9455  000700  0E00               	movlw	high _B_array
  9456  000702  203E               	addwfc	??_is_valid+1,w,c
  9457  000704  6EDA               	movwf	fsr2h,c
  9458  000706  C021  FFDE         	movff	_B,postinc2
  9459  00070A  C022  FFDD         	movff	_B+1,postdec2
  9460                           
  9461                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
  9462  00070E  90D8               	bcf	status,0,c
  9463  000710  3425               	rlcf	_counter_step,w,c
  9464  000712  6ED9               	movwf	fsr2l,c
  9465  000714  3426               	rlcf	_counter_step+1,w,c
  9466  000716  6EDA               	movwf	fsr2h,c
  9467  000718  0E01               	movlw	low _compartment_number
  9468  00071A  26D9               	addwf	fsr2l,f,c
  9469  00071C  0E00               	movlw	high _compartment_number
  9470  00071E  22DA               	addwfc	fsr2h,f,c
  9471  000720  CFDE F03D          	movff	postinc2,??_is_valid
  9472  000724  CFDD F03E          	movff	postdec2,??_is_valid+1
  9473  000728  90D8               	bcf	status,0,c
  9474  00072A  363D               	rlcf	??_is_valid,f,c
  9475  00072C  363E               	rlcf	??_is_valid+1,f,c
  9476  00072E  0E00               	movlw	low _S_array
  9477  000730  243D               	addwf	??_is_valid,w,c
  9478  000732  6ED9               	movwf	fsr2l,c
  9479  000734  0E01               	movlw	high _S_array
  9480  000736  203E               	addwfc	??_is_valid+1,w,c
  9481  000738  6EDA               	movwf	fsr2h,c
  9482  00073A  C01D  FFDE         	movff	_S,postinc2
  9483  00073E  C01E  FFDD         	movff	_S+1,postdec2
  9484                           
  9485                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
  9486  000742  90D8               	bcf	status,0,c
  9487  000744  3425               	rlcf	_counter_step,w,c
  9488  000746  6ED9               	movwf	fsr2l,c
  9489  000748  3426               	rlcf	_counter_step+1,w,c
  9490  00074A  6EDA               	movwf	fsr2h,c
  9491  00074C  0E01               	movlw	low _compartment_number
  9492  00074E  26D9               	addwf	fsr2l,f,c
  9493  000750  0E00               	movlw	high _compartment_number
  9494  000752  22DA               	addwfc	fsr2h,f,c
  9495  000754  CFDE F03D          	movff	postinc2,??_is_valid
  9496  000758  CFDD F03E          	movff	postdec2,??_is_valid+1
  9497  00075C  90D8               	bcf	status,0,c
  9498  00075E  363D               	rlcf	??_is_valid,f,c
  9499  000760  363E               	rlcf	??_is_valid+1,f,c
  9500  000762  0E90               	movlw	low _N_array
  9501  000764  243D               	addwf	??_is_valid,w,c
  9502  000766  6ED9               	movwf	fsr2l,c
  9503  000768  0E00               	movlw	high _N_array
  9504  00076A  203E               	addwfc	??_is_valid+1,w,c
  9505  00076C  6EDA               	movwf	fsr2h,c
  9506  00076E  C01F  FFDE         	movff	_N,postinc2
  9507  000772  C020  FFDD         	movff	_N+1,postdec2
  9508                           
  9509                           ;keypad.c: 116: }
  9510  000776  0012               	return	
  9511  000778                     i2l582:
  9512                           
  9513                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
  9514  000778  0E30               	movlw	low _current_set2
  9515  00077A  6E37               	movwf	strcmp@s1,c
  9516  00077C  0E00               	movlw	high _current_set2
  9517  00077E  6E38               	movwf	strcmp@s1+1,c
  9518  000780  0EE1               	movlw	low STR_77
  9519  000782  6E39               	movwf	strcmp@s2,c
  9520  000784  0EFF               	movlw	high STR_77
  9521  000786  6E3A               	movwf	strcmp@s2+1,c
  9522  000788  ECAC  F017         	call	_strcmp	;wreg free
  9523  00078C  5037               	movf	?_strcmp,w,c
  9524  00078E  1038               	iorwf	?_strcmp+1,w,c
  9525  000790  A4D8               	btfss	status,2,c
  9526  000792  D04C               	goto	i2l584
  9527                           
  9528                           ;keypad.c: 118: B = 1*number;
  9529  000794  C035  F021         	movff	_number,_B
  9530  000798  C036  F022         	movff	_number+1,_B+1
  9531                           
  9532                           ;keypad.c: 119: W = 2*number;
  9533  00079C  90D8               	bcf	status,0,c
  9534  00079E  3435               	rlcf	_number,w,c
  9535  0007A0  6E1B               	movwf	_W,c
  9536  0007A2  3436               	rlcf	_number+1,w,c
  9537  0007A4  6E1C               	movwf	_W+1,c
  9538                           
  9539                           ;keypad.c: 120: total_number = 3*number;
  9540  0007A6  C035  F037         	movff	_number,i2___wmul@multiplier
  9541  0007AA  C036  F038         	movff	_number+1,i2___wmul@multiplier+1
  9542  0007AE  0E00               	movlw	0
  9543  0007B0  6E3A               	movwf	i2___wmul@multiplicand+1,c
  9544  0007B2  0E03               	movlw	3
  9545  0007B4  6E39               	movwf	i2___wmul@multiplicand,c
  9546  0007B6  EC90  F018         	call	i2___wmul	;wreg free
  9547  0007BA  C037  F0D1         	movff	?i2___wmul,_total_number
  9548  0007BE  C038  F0D2         	movff	?i2___wmul+1,_total_number+1
  9549                           
  9550                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
  9551  0007C2  90D8               	bcf	status,0,c
  9552  0007C4  3425               	rlcf	_counter_step,w,c
  9553  0007C6  6ED9               	movwf	fsr2l,c
  9554  0007C8  3426               	rlcf	_counter_step+1,w,c
  9555  0007CA  6EDA               	movwf	fsr2h,c
  9556  0007CC  0E01               	movlw	low _compartment_number
  9557  0007CE  26D9               	addwf	fsr2l,f,c
  9558  0007D0  0E00               	movlw	high _compartment_number
  9559  0007D2  22DA               	addwfc	fsr2h,f,c
  9560  0007D4  CFDE F03D          	movff	postinc2,??_is_valid
  9561  0007D8  CFDD F03E          	movff	postdec2,??_is_valid+1
  9562  0007DC  90D8               	bcf	status,0,c
  9563  0007DE  363D               	rlcf	??_is_valid,f,c
  9564  0007E0  363E               	rlcf	??_is_valid+1,f,c
  9565  0007E2  0EA0               	movlw	low _B_array
  9566  0007E4  243D               	addwf	??_is_valid,w,c
  9567  0007E6  6ED9               	movwf	fsr2l,c
  9568  0007E8  0E00               	movlw	high _B_array
  9569  0007EA  203E               	addwfc	??_is_valid+1,w,c
  9570  0007EC  6EDA               	movwf	fsr2h,c
  9571  0007EE  C021  FFDE         	movff	_B,postinc2
  9572  0007F2  C022  FFDD         	movff	_B+1,postdec2
  9573                           
  9574                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
  9575  0007F6  90D8               	bcf	status,0,c
  9576  0007F8  3425               	rlcf	_counter_step,w,c
  9577  0007FA  6ED9               	movwf	fsr2l,c
  9578  0007FC  3426               	rlcf	_counter_step+1,w,c
  9579  0007FE  6EDA               	movwf	fsr2h,c
  9580  000800  0E01               	movlw	low _compartment_number
  9581  000802  26D9               	addwf	fsr2l,f,c
  9582  000804  0E00               	movlw	high _compartment_number
  9583  000806  22DA               	addwfc	fsr2h,f,c
  9584  000808  CFDE F03D          	movff	postinc2,??_is_valid
  9585  00080C  CFDD F03E          	movff	postdec2,??_is_valid+1
  9586  000810  90D8               	bcf	status,0,c
  9587  000812  363D               	rlcf	??_is_valid,f,c
  9588  000814  363E               	rlcf	??_is_valid+1,f,c
  9589  000816  0E80               	movlw	low _W_array
  9590  000818  243D               	addwf	??_is_valid,w,c
  9591  00081A  6ED9               	movwf	fsr2l,c
  9592  00081C  0E00               	movlw	high _W_array
  9593  00081E  203E               	addwfc	??_is_valid+1,w,c
  9594  000820  6EDA               	movwf	fsr2h,c
  9595  000822  C01B  FFDE         	movff	_W,postinc2
  9596  000826  C01C  FFDD         	movff	_W+1,postdec2
  9597                           
  9598                           ;keypad.c: 124: }
  9599  00082A  0012               	return	
  9600  00082C                     i2l584:
  9601                           
  9602                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
  9603  00082C  0E30               	movlw	low _current_set2
  9604  00082E  6E37               	movwf	strcmp@s1,c
  9605  000830  0E00               	movlw	high _current_set2
  9606  000832  6E38               	movwf	strcmp@s1+1,c
  9607  000834  0EC1               	movlw	low STR_78
  9608  000836  6E39               	movwf	strcmp@s2,c
  9609  000838  0EFF               	movlw	high STR_78
  9610  00083A  6E3A               	movwf	strcmp@s2+1,c
  9611  00083C  ECAC  F017         	call	_strcmp	;wreg free
  9612  000840  5037               	movf	?_strcmp,w,c
  9613  000842  1038               	iorwf	?_strcmp+1,w,c
  9614  000844  A4D8               	btfss	status,2,c
  9615  000846  D06A               	goto	i2l586
  9616                           
  9617                           ;keypad.c: 126: B = 1*number;
  9618  000848  C035  F021         	movff	_number,_B
  9619  00084C  C036  F022         	movff	_number+1,_B+1
  9620                           
  9621                           ;keypad.c: 127: N = 1*number;
  9622  000850  C035  F01F         	movff	_number,_N
  9623  000854  C036  F020         	movff	_number+1,_N+1
  9624                           
  9625                           ;keypad.c: 128: W = 2*number;
  9626  000858  90D8               	bcf	status,0,c
  9627  00085A  3435               	rlcf	_number,w,c
  9628  00085C  6E1B               	movwf	_W,c
  9629  00085E  3436               	rlcf	_number+1,w,c
  9630  000860  6E1C               	movwf	_W+1,c
  9631                           
  9632                           ;keypad.c: 129: total_number = 4*number;
  9633  000862  C035  F03D         	movff	_number,??_is_valid
  9634  000866  C036  F03E         	movff	_number+1,??_is_valid+1
  9635  00086A  90D8               	bcf	status,0,c
  9636  00086C  363D               	rlcf	??_is_valid,f,c
  9637  00086E  363E               	rlcf	??_is_valid+1,f,c
  9638  000870  90D8               	bcf	status,0,c
  9639  000872  363D               	rlcf	??_is_valid,f,c
  9640  000874  363E               	rlcf	??_is_valid+1,f,c
  9641  000876  C03D  F0D1         	movff	??_is_valid,_total_number
  9642  00087A  C03E  F0D2         	movff	??_is_valid+1,_total_number+1
  9643                           
  9644                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
  9645  00087E  90D8               	bcf	status,0,c
  9646  000880  3425               	rlcf	_counter_step,w,c
  9647  000882  6ED9               	movwf	fsr2l,c
  9648  000884  3426               	rlcf	_counter_step+1,w,c
  9649  000886  6EDA               	movwf	fsr2h,c
  9650  000888  0E01               	movlw	low _compartment_number
  9651  00088A  26D9               	addwf	fsr2l,f,c
  9652  00088C  0E00               	movlw	high _compartment_number
  9653  00088E  22DA               	addwfc	fsr2h,f,c
  9654  000890  CFDE F03D          	movff	postinc2,??_is_valid
  9655  000894  CFDD F03E          	movff	postdec2,??_is_valid+1
  9656  000898  90D8               	bcf	status,0,c
  9657  00089A  363D               	rlcf	??_is_valid,f,c
  9658  00089C  363E               	rlcf	??_is_valid+1,f,c
  9659  00089E  0EA0               	movlw	low _B_array
  9660  0008A0  243D               	addwf	??_is_valid,w,c
  9661  0008A2  6ED9               	movwf	fsr2l,c
  9662  0008A4  0E00               	movlw	high _B_array
  9663  0008A6  203E               	addwfc	??_is_valid+1,w,c
  9664  0008A8  6EDA               	movwf	fsr2h,c
  9665  0008AA  C021  FFDE         	movff	_B,postinc2
  9666  0008AE  C022  FFDD         	movff	_B+1,postdec2
  9667                           
  9668                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
  9669  0008B2  90D8               	bcf	status,0,c
  9670  0008B4  3425               	rlcf	_counter_step,w,c
  9671  0008B6  6ED9               	movwf	fsr2l,c
  9672  0008B8  3426               	rlcf	_counter_step+1,w,c
  9673  0008BA  6EDA               	movwf	fsr2h,c
  9674  0008BC  0E01               	movlw	low _compartment_number
  9675  0008BE  26D9               	addwf	fsr2l,f,c
  9676  0008C0  0E00               	movlw	high _compartment_number
  9677  0008C2  22DA               	addwfc	fsr2h,f,c
  9678  0008C4  CFDE F03D          	movff	postinc2,??_is_valid
  9679  0008C8  CFDD F03E          	movff	postdec2,??_is_valid+1
  9680  0008CC  90D8               	bcf	status,0,c
  9681  0008CE  363D               	rlcf	??_is_valid,f,c
  9682  0008D0  363E               	rlcf	??_is_valid+1,f,c
  9683  0008D2  0E90               	movlw	low _N_array
  9684  0008D4  243D               	addwf	??_is_valid,w,c
  9685  0008D6  6ED9               	movwf	fsr2l,c
  9686  0008D8  0E00               	movlw	high _N_array
  9687  0008DA  203E               	addwfc	??_is_valid+1,w,c
  9688  0008DC  6EDA               	movwf	fsr2h,c
  9689  0008DE  C01F  FFDE         	movff	_N,postinc2
  9690  0008E2  C020  FFDD         	movff	_N+1,postdec2
  9691                           
  9692                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
  9693  0008E6  90D8               	bcf	status,0,c
  9694  0008E8  3425               	rlcf	_counter_step,w,c
  9695  0008EA  6ED9               	movwf	fsr2l,c
  9696  0008EC  3426               	rlcf	_counter_step+1,w,c
  9697  0008EE  6EDA               	movwf	fsr2h,c
  9698  0008F0  0E01               	movlw	low _compartment_number
  9699  0008F2  26D9               	addwf	fsr2l,f,c
  9700  0008F4  0E00               	movlw	high _compartment_number
  9701  0008F6  22DA               	addwfc	fsr2h,f,c
  9702  0008F8  CFDE F03D          	movff	postinc2,??_is_valid
  9703  0008FC  CFDD F03E          	movff	postdec2,??_is_valid+1
  9704  000900  90D8               	bcf	status,0,c
  9705  000902  363D               	rlcf	??_is_valid,f,c
  9706  000904  363E               	rlcf	??_is_valid+1,f,c
  9707  000906  0E80               	movlw	low _W_array
  9708  000908  243D               	addwf	??_is_valid,w,c
  9709  00090A  6ED9               	movwf	fsr2l,c
  9710  00090C  0E00               	movlw	high _W_array
  9711  00090E  203E               	addwfc	??_is_valid+1,w,c
  9712  000910  6EDA               	movwf	fsr2h,c
  9713  000912  C01B  FFDE         	movff	_W,postinc2
  9714  000916  C01C  FFDD         	movff	_W+1,postdec2
  9715                           
  9716                           ;keypad.c: 134: }
  9717  00091A  0012               	return	
  9718  00091C                     i2l586:
  9719                           
  9720                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
  9721  00091C  0E30               	movlw	low _current_set2
  9722  00091E  6E37               	movwf	strcmp@s1,c
  9723  000920  0E00               	movlw	high _current_set2
  9724  000922  6E38               	movwf	strcmp@s1+1,c
  9725  000924  0EC6               	movlw	low STR_79
  9726  000926  6E39               	movwf	strcmp@s2,c
  9727  000928  0EFF               	movlw	high STR_79
  9728  00092A  6E3A               	movwf	strcmp@s2+1,c
  9729  00092C  ECAC  F017         	call	_strcmp	;wreg free
  9730  000930  5037               	movf	?_strcmp,w,c
  9731  000932  1038               	iorwf	?_strcmp+1,w,c
  9732  000934  A4D8               	btfss	status,2,c
  9733  000936  D06A               	goto	i2l588
  9734                           
  9735                           ;keypad.c: 136: B = 1*number;
  9736  000938  C035  F021         	movff	_number,_B
  9737  00093C  C036  F022         	movff	_number+1,_B+1
  9738                           
  9739                           ;keypad.c: 137: S = 1*number;
  9740  000940  C035  F01D         	movff	_number,_S
  9741  000944  C036  F01E         	movff	_number+1,_S+1
  9742                           
  9743                           ;keypad.c: 138: W = 2*number;
  9744  000948  90D8               	bcf	status,0,c
  9745  00094A  3435               	rlcf	_number,w,c
  9746  00094C  6E1B               	movwf	_W,c
  9747  00094E  3436               	rlcf	_number+1,w,c
  9748  000950  6E1C               	movwf	_W+1,c
  9749                           
  9750                           ;keypad.c: 139: total_number = 4*number;
  9751  000952  C035  F03D         	movff	_number,??_is_valid
  9752  000956  C036  F03E         	movff	_number+1,??_is_valid+1
  9753  00095A  90D8               	bcf	status,0,c
  9754  00095C  363D               	rlcf	??_is_valid,f,c
  9755  00095E  363E               	rlcf	??_is_valid+1,f,c
  9756  000960  90D8               	bcf	status,0,c
  9757  000962  363D               	rlcf	??_is_valid,f,c
  9758  000964  363E               	rlcf	??_is_valid+1,f,c
  9759  000966  C03D  F0D1         	movff	??_is_valid,_total_number
  9760  00096A  C03E  F0D2         	movff	??_is_valid+1,_total_number+1
  9761                           
  9762                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
  9763  00096E  90D8               	bcf	status,0,c
  9764  000970  3425               	rlcf	_counter_step,w,c
  9765  000972  6ED9               	movwf	fsr2l,c
  9766  000974  3426               	rlcf	_counter_step+1,w,c
  9767  000976  6EDA               	movwf	fsr2h,c
  9768  000978  0E01               	movlw	low _compartment_number
  9769  00097A  26D9               	addwf	fsr2l,f,c
  9770  00097C  0E00               	movlw	high _compartment_number
  9771  00097E  22DA               	addwfc	fsr2h,f,c
  9772  000980  CFDE F03D          	movff	postinc2,??_is_valid
  9773  000984  CFDD F03E          	movff	postdec2,??_is_valid+1
  9774  000988  90D8               	bcf	status,0,c
  9775  00098A  363D               	rlcf	??_is_valid,f,c
  9776  00098C  363E               	rlcf	??_is_valid+1,f,c
  9777  00098E  0EA0               	movlw	low _B_array
  9778  000990  243D               	addwf	??_is_valid,w,c
  9779  000992  6ED9               	movwf	fsr2l,c
  9780  000994  0E00               	movlw	high _B_array
  9781  000996  203E               	addwfc	??_is_valid+1,w,c
  9782  000998  6EDA               	movwf	fsr2h,c
  9783  00099A  C021  FFDE         	movff	_B,postinc2
  9784  00099E  C022  FFDD         	movff	_B+1,postdec2
  9785                           
  9786                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
  9787  0009A2  90D8               	bcf	status,0,c
  9788  0009A4  3425               	rlcf	_counter_step,w,c
  9789  0009A6  6ED9               	movwf	fsr2l,c
  9790  0009A8  3426               	rlcf	_counter_step+1,w,c
  9791  0009AA  6EDA               	movwf	fsr2h,c
  9792  0009AC  0E01               	movlw	low _compartment_number
  9793  0009AE  26D9               	addwf	fsr2l,f,c
  9794  0009B0  0E00               	movlw	high _compartment_number
  9795  0009B2  22DA               	addwfc	fsr2h,f,c
  9796  0009B4  CFDE F03D          	movff	postinc2,??_is_valid
  9797  0009B8  CFDD F03E          	movff	postdec2,??_is_valid+1
  9798  0009BC  90D8               	bcf	status,0,c
  9799  0009BE  363D               	rlcf	??_is_valid,f,c
  9800  0009C0  363E               	rlcf	??_is_valid+1,f,c
  9801  0009C2  0E00               	movlw	low _S_array
  9802  0009C4  243D               	addwf	??_is_valid,w,c
  9803  0009C6  6ED9               	movwf	fsr2l,c
  9804  0009C8  0E01               	movlw	high _S_array
  9805  0009CA  203E               	addwfc	??_is_valid+1,w,c
  9806  0009CC  6EDA               	movwf	fsr2h,c
  9807  0009CE  C01D  FFDE         	movff	_S,postinc2
  9808  0009D2  C01E  FFDD         	movff	_S+1,postdec2
  9809                           
  9810                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
  9811  0009D6  90D8               	bcf	status,0,c
  9812  0009D8  3425               	rlcf	_counter_step,w,c
  9813  0009DA  6ED9               	movwf	fsr2l,c
  9814  0009DC  3426               	rlcf	_counter_step+1,w,c
  9815  0009DE  6EDA               	movwf	fsr2h,c
  9816  0009E0  0E01               	movlw	low _compartment_number
  9817  0009E2  26D9               	addwf	fsr2l,f,c
  9818  0009E4  0E00               	movlw	high _compartment_number
  9819  0009E6  22DA               	addwfc	fsr2h,f,c
  9820  0009E8  CFDE F03D          	movff	postinc2,??_is_valid
  9821  0009EC  CFDD F03E          	movff	postdec2,??_is_valid+1
  9822  0009F0  90D8               	bcf	status,0,c
  9823  0009F2  363D               	rlcf	??_is_valid,f,c
  9824  0009F4  363E               	rlcf	??_is_valid+1,f,c
  9825  0009F6  0E80               	movlw	low _W_array
  9826  0009F8  243D               	addwf	??_is_valid,w,c
  9827  0009FA  6ED9               	movwf	fsr2l,c
  9828  0009FC  0E00               	movlw	high _W_array
  9829  0009FE  203E               	addwfc	??_is_valid+1,w,c
  9830  000A00  6EDA               	movwf	fsr2h,c
  9831  000A02  C01B  FFDE         	movff	_W,postinc2
  9832  000A06  C01C  FFDD         	movff	_W+1,postdec2
  9833                           
  9834                           ;keypad.c: 145: }
  9835  000A0A  0012               	return	
  9836  000A0C                     i2l588:
  9837                           
  9838                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
  9839  000A0C  0E30               	movlw	low _current_set2
  9840  000A0E  6E37               	movwf	strcmp@s1,c
  9841  000A10  0E00               	movlw	high _current_set2
  9842  000A12  6E38               	movwf	strcmp@s1+1,c
  9843  000A14  0EBC               	movlw	low STR_80
  9844  000A16  6E39               	movwf	strcmp@s2,c
  9845  000A18  0EFF               	movlw	high STR_80
  9846  000A1A  6E3A               	movwf	strcmp@s2+1,c
  9847  000A1C  ECAC  F017         	call	_strcmp	;wreg free
  9848  000A20  5037               	movf	?_strcmp,w,c
  9849  000A22  1038               	iorwf	?_strcmp+1,w,c
  9850  000A24  A4D8               	btfss	status,2,c
  9851  000A26  D06A               	goto	i2l590
  9852                           
  9853                           ;keypad.c: 147: B = 2*number;
  9854  000A28  90D8               	bcf	status,0,c
  9855  000A2A  3435               	rlcf	_number,w,c
  9856  000A2C  6E21               	movwf	_B,c
  9857  000A2E  3436               	rlcf	_number+1,w,c
  9858  000A30  6E22               	movwf	_B+1,c
  9859                           
  9860                           ;keypad.c: 148: S = 1*number;
  9861  000A32  C035  F01D         	movff	_number,_S
  9862  000A36  C036  F01E         	movff	_number+1,_S+1
  9863                           
  9864                           ;keypad.c: 149: W = number;
  9865  000A3A  C035  F01B         	movff	_number,_W
  9866  000A3E  C036  F01C         	movff	_number+1,_W+1
  9867                           
  9868                           ;keypad.c: 150: total_number = 4*number;
  9869  000A42  C035  F03D         	movff	_number,??_is_valid
  9870  000A46  C036  F03E         	movff	_number+1,??_is_valid+1
  9871  000A4A  90D8               	bcf	status,0,c
  9872  000A4C  363D               	rlcf	??_is_valid,f,c
  9873  000A4E  363E               	rlcf	??_is_valid+1,f,c
  9874  000A50  90D8               	bcf	status,0,c
  9875  000A52  363D               	rlcf	??_is_valid,f,c
  9876  000A54  363E               	rlcf	??_is_valid+1,f,c
  9877  000A56  C03D  F0D1         	movff	??_is_valid,_total_number
  9878  000A5A  C03E  F0D2         	movff	??_is_valid+1,_total_number+1
  9879                           
  9880                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
  9881  000A5E  90D8               	bcf	status,0,c
  9882  000A60  3425               	rlcf	_counter_step,w,c
  9883  000A62  6ED9               	movwf	fsr2l,c
  9884  000A64  3426               	rlcf	_counter_step+1,w,c
  9885  000A66  6EDA               	movwf	fsr2h,c
  9886  000A68  0E01               	movlw	low _compartment_number
  9887  000A6A  26D9               	addwf	fsr2l,f,c
  9888  000A6C  0E00               	movlw	high _compartment_number
  9889  000A6E  22DA               	addwfc	fsr2h,f,c
  9890  000A70  CFDE F03D          	movff	postinc2,??_is_valid
  9891  000A74  CFDD F03E          	movff	postdec2,??_is_valid+1
  9892  000A78  90D8               	bcf	status,0,c
  9893  000A7A  363D               	rlcf	??_is_valid,f,c
  9894  000A7C  363E               	rlcf	??_is_valid+1,f,c
  9895  000A7E  0EA0               	movlw	low _B_array
  9896  000A80  243D               	addwf	??_is_valid,w,c
  9897  000A82  6ED9               	movwf	fsr2l,c
  9898  000A84  0E00               	movlw	high _B_array
  9899  000A86  203E               	addwfc	??_is_valid+1,w,c
  9900  000A88  6EDA               	movwf	fsr2h,c
  9901  000A8A  C021  FFDE         	movff	_B,postinc2
  9902  000A8E  C022  FFDD         	movff	_B+1,postdec2
  9903                           
  9904                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
  9905  000A92  90D8               	bcf	status,0,c
  9906  000A94  3425               	rlcf	_counter_step,w,c
  9907  000A96  6ED9               	movwf	fsr2l,c
  9908  000A98  3426               	rlcf	_counter_step+1,w,c
  9909  000A9A  6EDA               	movwf	fsr2h,c
  9910  000A9C  0E01               	movlw	low _compartment_number
  9911  000A9E  26D9               	addwf	fsr2l,f,c
  9912  000AA0  0E00               	movlw	high _compartment_number
  9913  000AA2  22DA               	addwfc	fsr2h,f,c
  9914  000AA4  CFDE F03D          	movff	postinc2,??_is_valid
  9915  000AA8  CFDD F03E          	movff	postdec2,??_is_valid+1
  9916  000AAC  90D8               	bcf	status,0,c
  9917  000AAE  363D               	rlcf	??_is_valid,f,c
  9918  000AB0  363E               	rlcf	??_is_valid+1,f,c
  9919  000AB2  0E00               	movlw	low _S_array
  9920  000AB4  243D               	addwf	??_is_valid,w,c
  9921  000AB6  6ED9               	movwf	fsr2l,c
  9922  000AB8  0E01               	movlw	high _S_array
  9923  000ABA  203E               	addwfc	??_is_valid+1,w,c
  9924  000ABC  6EDA               	movwf	fsr2h,c
  9925  000ABE  C01D  FFDE         	movff	_S,postinc2
  9926  000AC2  C01E  FFDD         	movff	_S+1,postdec2
  9927                           
  9928                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
  9929  000AC6  90D8               	bcf	status,0,c
  9930  000AC8  3425               	rlcf	_counter_step,w,c
  9931  000ACA  6ED9               	movwf	fsr2l,c
  9932  000ACC  3426               	rlcf	_counter_step+1,w,c
  9933  000ACE  6EDA               	movwf	fsr2h,c
  9934  000AD0  0E01               	movlw	low _compartment_number
  9935  000AD2  26D9               	addwf	fsr2l,f,c
  9936  000AD4  0E00               	movlw	high _compartment_number
  9937  000AD6  22DA               	addwfc	fsr2h,f,c
  9938  000AD8  CFDE F03D          	movff	postinc2,??_is_valid
  9939  000ADC  CFDD F03E          	movff	postdec2,??_is_valid+1
  9940  000AE0  90D8               	bcf	status,0,c
  9941  000AE2  363D               	rlcf	??_is_valid,f,c
  9942  000AE4  363E               	rlcf	??_is_valid+1,f,c
  9943  000AE6  0E80               	movlw	low _W_array
  9944  000AE8  243D               	addwf	??_is_valid,w,c
  9945  000AEA  6ED9               	movwf	fsr2l,c
  9946  000AEC  0E00               	movlw	high _W_array
  9947  000AEE  203E               	addwfc	??_is_valid+1,w,c
  9948  000AF0  6EDA               	movwf	fsr2h,c
  9949  000AF2  C01B  FFDE         	movff	_W,postinc2
  9950  000AF6  C01C  FFDD         	movff	_W+1,postdec2
  9951                           
  9952                           ;keypad.c: 155: }
  9953  000AFA  0012               	return	
  9954  000AFC                     i2l590:
  9955                           
  9956                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
  9957  000AFC  0E30               	movlw	low _current_set2
  9958  000AFE  6E37               	movwf	strcmp@s1,c
  9959  000B00  0E00               	movlw	high _current_set2
  9960  000B02  6E38               	movwf	strcmp@s1+1,c
  9961  000B04  0EB2               	movlw	low STR_81
  9962  000B06  6E39               	movwf	strcmp@s2,c
  9963  000B08  0EFF               	movlw	high STR_81
  9964  000B0A  6E3A               	movwf	strcmp@s2+1,c
  9965  000B0C  ECAC  F017         	call	_strcmp	;wreg free
  9966  000B10  5037               	movf	?_strcmp,w,c
  9967  000B12  1038               	iorwf	?_strcmp+1,w,c
  9968  000B14  A4D8               	btfss	status,2,c
  9969  000B16  D06A               	goto	i2l592
  9970                           
  9971                           ;keypad.c: 157: B = 2*number;
  9972  000B18  90D8               	bcf	status,0,c
  9973  000B1A  3435               	rlcf	_number,w,c
  9974  000B1C  6E21               	movwf	_B,c
  9975  000B1E  3436               	rlcf	_number+1,w,c
  9976  000B20  6E22               	movwf	_B+1,c
  9977                           
  9978                           ;keypad.c: 158: N = 1*number;
  9979  000B22  C035  F01F         	movff	_number,_N
  9980  000B26  C036  F020         	movff	_number+1,_N+1
  9981                           
  9982                           ;keypad.c: 159: W = 1*number;
  9983  000B2A  C035  F01B         	movff	_number,_W
  9984  000B2E  C036  F01C         	movff	_number+1,_W+1
  9985                           
  9986                           ;keypad.c: 160: total_number = 4*number;
  9987  000B32  C035  F03D         	movff	_number,??_is_valid
  9988  000B36  C036  F03E         	movff	_number+1,??_is_valid+1
  9989  000B3A  90D8               	bcf	status,0,c
  9990  000B3C  363D               	rlcf	??_is_valid,f,c
  9991  000B3E  363E               	rlcf	??_is_valid+1,f,c
  9992  000B40  90D8               	bcf	status,0,c
  9993  000B42  363D               	rlcf	??_is_valid,f,c
  9994  000B44  363E               	rlcf	??_is_valid+1,f,c
  9995  000B46  C03D  F0D1         	movff	??_is_valid,_total_number
  9996  000B4A  C03E  F0D2         	movff	??_is_valid+1,_total_number+1
  9997                           
  9998                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
  9999  000B4E  90D8               	bcf	status,0,c
 10000  000B50  3425               	rlcf	_counter_step,w,c
 10001  000B52  6ED9               	movwf	fsr2l,c
 10002  000B54  3426               	rlcf	_counter_step+1,w,c
 10003  000B56  6EDA               	movwf	fsr2h,c
 10004  000B58  0E01               	movlw	low _compartment_number
 10005  000B5A  26D9               	addwf	fsr2l,f,c
 10006  000B5C  0E00               	movlw	high _compartment_number
 10007  000B5E  22DA               	addwfc	fsr2h,f,c
 10008  000B60  CFDE F03D          	movff	postinc2,??_is_valid
 10009  000B64  CFDD F03E          	movff	postdec2,??_is_valid+1
 10010  000B68  90D8               	bcf	status,0,c
 10011  000B6A  363D               	rlcf	??_is_valid,f,c
 10012  000B6C  363E               	rlcf	??_is_valid+1,f,c
 10013  000B6E  0EA0               	movlw	low _B_array
 10014  000B70  243D               	addwf	??_is_valid,w,c
 10015  000B72  6ED9               	movwf	fsr2l,c
 10016  000B74  0E00               	movlw	high _B_array
 10017  000B76  203E               	addwfc	??_is_valid+1,w,c
 10018  000B78  6EDA               	movwf	fsr2h,c
 10019  000B7A  C021  FFDE         	movff	_B,postinc2
 10020  000B7E  C022  FFDD         	movff	_B+1,postdec2
 10021                           
 10022                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 10023  000B82  90D8               	bcf	status,0,c
 10024  000B84  3425               	rlcf	_counter_step,w,c
 10025  000B86  6ED9               	movwf	fsr2l,c
 10026  000B88  3426               	rlcf	_counter_step+1,w,c
 10027  000B8A  6EDA               	movwf	fsr2h,c
 10028  000B8C  0E01               	movlw	low _compartment_number
 10029  000B8E  26D9               	addwf	fsr2l,f,c
 10030  000B90  0E00               	movlw	high _compartment_number
 10031  000B92  22DA               	addwfc	fsr2h,f,c
 10032  000B94  CFDE F03D          	movff	postinc2,??_is_valid
 10033  000B98  CFDD F03E          	movff	postdec2,??_is_valid+1
 10034  000B9C  90D8               	bcf	status,0,c
 10035  000B9E  363D               	rlcf	??_is_valid,f,c
 10036  000BA0  363E               	rlcf	??_is_valid+1,f,c
 10037  000BA2  0E90               	movlw	low _N_array
 10038  000BA4  243D               	addwf	??_is_valid,w,c
 10039  000BA6  6ED9               	movwf	fsr2l,c
 10040  000BA8  0E00               	movlw	high _N_array
 10041  000BAA  203E               	addwfc	??_is_valid+1,w,c
 10042  000BAC  6EDA               	movwf	fsr2h,c
 10043  000BAE  C01F  FFDE         	movff	_N,postinc2
 10044  000BB2  C020  FFDD         	movff	_N+1,postdec2
 10045                           
 10046                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 10047  000BB6  90D8               	bcf	status,0,c
 10048  000BB8  3425               	rlcf	_counter_step,w,c
 10049  000BBA  6ED9               	movwf	fsr2l,c
 10050  000BBC  3426               	rlcf	_counter_step+1,w,c
 10051  000BBE  6EDA               	movwf	fsr2h,c
 10052  000BC0  0E01               	movlw	low _compartment_number
 10053  000BC2  26D9               	addwf	fsr2l,f,c
 10054  000BC4  0E00               	movlw	high _compartment_number
 10055  000BC6  22DA               	addwfc	fsr2h,f,c
 10056  000BC8  CFDE F03D          	movff	postinc2,??_is_valid
 10057  000BCC  CFDD F03E          	movff	postdec2,??_is_valid+1
 10058  000BD0  90D8               	bcf	status,0,c
 10059  000BD2  363D               	rlcf	??_is_valid,f,c
 10060  000BD4  363E               	rlcf	??_is_valid+1,f,c
 10061  000BD6  0E80               	movlw	low _W_array
 10062  000BD8  243D               	addwf	??_is_valid,w,c
 10063  000BDA  6ED9               	movwf	fsr2l,c
 10064  000BDC  0E00               	movlw	high _W_array
 10065  000BDE  203E               	addwfc	??_is_valid+1,w,c
 10066  000BE0  6EDA               	movwf	fsr2h,c
 10067  000BE2  C01B  FFDE         	movff	_W,postinc2
 10068  000BE6  C01C  FFDD         	movff	_W+1,postdec2
 10069                           
 10070                           ;keypad.c: 165: }
 10071  000BEA  0012               	return	
 10072  000BEC                     i2l592:
 10073                           
 10074                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 10075  000BEC  0E30               	movlw	low _current_set2
 10076  000BEE  6E37               	movwf	strcmp@s1,c
 10077  000BF0  0E00               	movlw	high _current_set2
 10078  000BF2  6E38               	movwf	strcmp@s1+1,c
 10079  000BF4  0EB7               	movlw	low STR_82
 10080  000BF6  6E39               	movwf	strcmp@s2,c
 10081  000BF8  0EFF               	movlw	high STR_82
 10082  000BFA  6E3A               	movwf	strcmp@s2+1,c
 10083  000BFC  ECAC  F017         	call	_strcmp	;wreg free
 10084  000C00  5037               	movf	?_strcmp,w,c
 10085  000C02  1038               	iorwf	?_strcmp+1,w,c
 10086  000C04  A4D8               	btfss	status,2,c
 10087  000C06  D06A               	goto	i2l594
 10088                           
 10089                           ;keypad.c: 167: B = 1*number;
 10090  000C08  C035  F021         	movff	_number,_B
 10091  000C0C  C036  F022         	movff	_number+1,_B+1
 10092                           
 10093                           ;keypad.c: 168: N = 2*number;
 10094  000C10  90D8               	bcf	status,0,c
 10095  000C12  3435               	rlcf	_number,w,c
 10096  000C14  6E1F               	movwf	_N,c
 10097  000C16  3436               	rlcf	_number+1,w,c
 10098  000C18  6E20               	movwf	_N+1,c
 10099                           
 10100                           ;keypad.c: 169: W = 1*number;
 10101  000C1A  C035  F01B         	movff	_number,_W
 10102  000C1E  C036  F01C         	movff	_number+1,_W+1
 10103                           
 10104                           ;keypad.c: 170: total_number = 4*number;
 10105  000C22  C035  F03D         	movff	_number,??_is_valid
 10106  000C26  C036  F03E         	movff	_number+1,??_is_valid+1
 10107  000C2A  90D8               	bcf	status,0,c
 10108  000C2C  363D               	rlcf	??_is_valid,f,c
 10109  000C2E  363E               	rlcf	??_is_valid+1,f,c
 10110  000C30  90D8               	bcf	status,0,c
 10111  000C32  363D               	rlcf	??_is_valid,f,c
 10112  000C34  363E               	rlcf	??_is_valid+1,f,c
 10113  000C36  C03D  F0D1         	movff	??_is_valid,_total_number
 10114  000C3A  C03E  F0D2         	movff	??_is_valid+1,_total_number+1
 10115                           
 10116                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 10117  000C3E  90D8               	bcf	status,0,c
 10118  000C40  3425               	rlcf	_counter_step,w,c
 10119  000C42  6ED9               	movwf	fsr2l,c
 10120  000C44  3426               	rlcf	_counter_step+1,w,c
 10121  000C46  6EDA               	movwf	fsr2h,c
 10122  000C48  0E01               	movlw	low _compartment_number
 10123  000C4A  26D9               	addwf	fsr2l,f,c
 10124  000C4C  0E00               	movlw	high _compartment_number
 10125  000C4E  22DA               	addwfc	fsr2h,f,c
 10126  000C50  CFDE F03D          	movff	postinc2,??_is_valid
 10127  000C54  CFDD F03E          	movff	postdec2,??_is_valid+1
 10128  000C58  90D8               	bcf	status,0,c
 10129  000C5A  363D               	rlcf	??_is_valid,f,c
 10130  000C5C  363E               	rlcf	??_is_valid+1,f,c
 10131  000C5E  0EA0               	movlw	low _B_array
 10132  000C60  243D               	addwf	??_is_valid,w,c
 10133  000C62  6ED9               	movwf	fsr2l,c
 10134  000C64  0E00               	movlw	high _B_array
 10135  000C66  203E               	addwfc	??_is_valid+1,w,c
 10136  000C68  6EDA               	movwf	fsr2h,c
 10137  000C6A  C021  FFDE         	movff	_B,postinc2
 10138  000C6E  C022  FFDD         	movff	_B+1,postdec2
 10139                           
 10140                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 10141  000C72  90D8               	bcf	status,0,c
 10142  000C74  3425               	rlcf	_counter_step,w,c
 10143  000C76  6ED9               	movwf	fsr2l,c
 10144  000C78  3426               	rlcf	_counter_step+1,w,c
 10145  000C7A  6EDA               	movwf	fsr2h,c
 10146  000C7C  0E01               	movlw	low _compartment_number
 10147  000C7E  26D9               	addwf	fsr2l,f,c
 10148  000C80  0E00               	movlw	high _compartment_number
 10149  000C82  22DA               	addwfc	fsr2h,f,c
 10150  000C84  CFDE F03D          	movff	postinc2,??_is_valid
 10151  000C88  CFDD F03E          	movff	postdec2,??_is_valid+1
 10152  000C8C  90D8               	bcf	status,0,c
 10153  000C8E  363D               	rlcf	??_is_valid,f,c
 10154  000C90  363E               	rlcf	??_is_valid+1,f,c
 10155  000C92  0E90               	movlw	low _N_array
 10156  000C94  243D               	addwf	??_is_valid,w,c
 10157  000C96  6ED9               	movwf	fsr2l,c
 10158  000C98  0E00               	movlw	high _N_array
 10159  000C9A  203E               	addwfc	??_is_valid+1,w,c
 10160  000C9C  6EDA               	movwf	fsr2h,c
 10161  000C9E  C01F  FFDE         	movff	_N,postinc2
 10162  000CA2  C020  FFDD         	movff	_N+1,postdec2
 10163                           
 10164                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 10165  000CA6  90D8               	bcf	status,0,c
 10166  000CA8  3425               	rlcf	_counter_step,w,c
 10167  000CAA  6ED9               	movwf	fsr2l,c
 10168  000CAC  3426               	rlcf	_counter_step+1,w,c
 10169  000CAE  6EDA               	movwf	fsr2h,c
 10170  000CB0  0E01               	movlw	low _compartment_number
 10171  000CB2  26D9               	addwf	fsr2l,f,c
 10172  000CB4  0E00               	movlw	high _compartment_number
 10173  000CB6  22DA               	addwfc	fsr2h,f,c
 10174  000CB8  CFDE F03D          	movff	postinc2,??_is_valid
 10175  000CBC  CFDD F03E          	movff	postdec2,??_is_valid+1
 10176  000CC0  90D8               	bcf	status,0,c
 10177  000CC2  363D               	rlcf	??_is_valid,f,c
 10178  000CC4  363E               	rlcf	??_is_valid+1,f,c
 10179  000CC6  0E80               	movlw	low _W_array
 10180  000CC8  243D               	addwf	??_is_valid,w,c
 10181  000CCA  6ED9               	movwf	fsr2l,c
 10182  000CCC  0E00               	movlw	high _W_array
 10183  000CCE  203E               	addwfc	??_is_valid+1,w,c
 10184  000CD0  6EDA               	movwf	fsr2h,c
 10185  000CD2  C01B  FFDE         	movff	_W,postinc2
 10186  000CD6  C01C  FFDD         	movff	_W+1,postdec2
 10187                           
 10188                           ;keypad.c: 175: }
 10189  000CDA  0012               	return	
 10190  000CDC                     i2l594:
 10191                           
 10192                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 10193  000CDC  0E30               	movlw	low _current_set2
 10194  000CDE  6E37               	movwf	strcmp@s1,c
 10195  000CE0  0E00               	movlw	high _current_set2
 10196  000CE2  6E38               	movwf	strcmp@s1+1,c
 10197  000CE4  0EAD               	movlw	low STR_83
 10198  000CE6  6E39               	movwf	strcmp@s2,c
 10199  000CE8  0EFF               	movlw	high STR_83
 10200  000CEA  6E3A               	movwf	strcmp@s2+1,c
 10201  000CEC  ECAC  F017         	call	_strcmp	;wreg free
 10202  000CF0  5037               	movf	?_strcmp,w,c
 10203  000CF2  1038               	iorwf	?_strcmp+1,w,c
 10204  000CF4  A4D8               	btfss	status,2,c
 10205  000CF6  D055               	goto	i2l596
 10206                           
 10207                           ;keypad.c: 177: B = 1*number;
 10208  000CF8  C035  F021         	movff	_number,_B
 10209  000CFC  C036  F022         	movff	_number+1,_B+1
 10210                           
 10211                           ;keypad.c: 178: N = 3*number;
 10212  000D00  C035  F037         	movff	_number,i2___wmul@multiplier
 10213  000D04  C036  F038         	movff	_number+1,i2___wmul@multiplier+1
 10214  000D08  0E00               	movlw	0
 10215  000D0A  6E3A               	movwf	i2___wmul@multiplicand+1,c
 10216  000D0C  0E03               	movlw	3
 10217  000D0E  6E39               	movwf	i2___wmul@multiplicand,c
 10218  000D10  EC90  F018         	call	i2___wmul	;wreg free
 10219  000D14  C037  F01F         	movff	?i2___wmul,_N
 10220  000D18  C038  F020         	movff	?i2___wmul+1,_N+1
 10221                           
 10222                           ;keypad.c: 179: total_number = 4*number;
 10223  000D1C  C035  F03D         	movff	_number,??_is_valid
 10224  000D20  C036  F03E         	movff	_number+1,??_is_valid+1
 10225  000D24  90D8               	bcf	status,0,c
 10226  000D26  363D               	rlcf	??_is_valid,f,c
 10227  000D28  363E               	rlcf	??_is_valid+1,f,c
 10228  000D2A  90D8               	bcf	status,0,c
 10229  000D2C  363D               	rlcf	??_is_valid,f,c
 10230  000D2E  363E               	rlcf	??_is_valid+1,f,c
 10231  000D30  C03D  F0D1         	movff	??_is_valid,_total_number
 10232  000D34  C03E  F0D2         	movff	??_is_valid+1,_total_number+1
 10233                           
 10234                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 10235  000D38  90D8               	bcf	status,0,c
 10236  000D3A  3425               	rlcf	_counter_step,w,c
 10237  000D3C  6ED9               	movwf	fsr2l,c
 10238  000D3E  3426               	rlcf	_counter_step+1,w,c
 10239  000D40  6EDA               	movwf	fsr2h,c
 10240  000D42  0E01               	movlw	low _compartment_number
 10241  000D44  26D9               	addwf	fsr2l,f,c
 10242  000D46  0E00               	movlw	high _compartment_number
 10243  000D48  22DA               	addwfc	fsr2h,f,c
 10244  000D4A  CFDE F03D          	movff	postinc2,??_is_valid
 10245  000D4E  CFDD F03E          	movff	postdec2,??_is_valid+1
 10246  000D52  90D8               	bcf	status,0,c
 10247  000D54  363D               	rlcf	??_is_valid,f,c
 10248  000D56  363E               	rlcf	??_is_valid+1,f,c
 10249  000D58  0EA0               	movlw	low _B_array
 10250  000D5A  243D               	addwf	??_is_valid,w,c
 10251  000D5C  6ED9               	movwf	fsr2l,c
 10252  000D5E  0E00               	movlw	high _B_array
 10253  000D60  203E               	addwfc	??_is_valid+1,w,c
 10254  000D62  6EDA               	movwf	fsr2h,c
 10255  000D64  C021  FFDE         	movff	_B,postinc2
 10256  000D68  C022  FFDD         	movff	_B+1,postdec2
 10257                           
 10258                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 10259  000D6C  90D8               	bcf	status,0,c
 10260  000D6E  3425               	rlcf	_counter_step,w,c
 10261  000D70  6ED9               	movwf	fsr2l,c
 10262  000D72  3426               	rlcf	_counter_step+1,w,c
 10263  000D74  6EDA               	movwf	fsr2h,c
 10264  000D76  0E01               	movlw	low _compartment_number
 10265  000D78  26D9               	addwf	fsr2l,f,c
 10266  000D7A  0E00               	movlw	high _compartment_number
 10267  000D7C  22DA               	addwfc	fsr2h,f,c
 10268  000D7E  CFDE F03D          	movff	postinc2,??_is_valid
 10269  000D82  CFDD F03E          	movff	postdec2,??_is_valid+1
 10270  000D86  90D8               	bcf	status,0,c
 10271  000D88  363D               	rlcf	??_is_valid,f,c
 10272  000D8A  363E               	rlcf	??_is_valid+1,f,c
 10273  000D8C  0E90               	movlw	low _N_array
 10274  000D8E  243D               	addwf	??_is_valid,w,c
 10275  000D90  6ED9               	movwf	fsr2l,c
 10276  000D92  0E00               	movlw	high _N_array
 10277  000D94  203E               	addwfc	??_is_valid+1,w,c
 10278  000D96  6EDA               	movwf	fsr2h,c
 10279  000D98  C01F  FFDE         	movff	_N,postinc2
 10280  000D9C  C020  FFDD         	movff	_N+1,postdec2
 10281                           
 10282                           ;keypad.c: 184: }
 10283  000DA0  0012               	return	
 10284  000DA2                     i2l596:
 10285                           
 10286                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 10287  000DA2  0E30               	movlw	low _current_set2
 10288  000DA4  6E37               	movwf	strcmp@s1,c
 10289  000DA6  0E00               	movlw	high _current_set2
 10290  000DA8  6E38               	movwf	strcmp@s1+1,c
 10291  000DAA  0ECB               	movlw	low STR_84
 10292  000DAC  6E39               	movwf	strcmp@s2,c
 10293  000DAE  0EFF               	movlw	high STR_84
 10294  000DB0  6E3A               	movwf	strcmp@s2+1,c
 10295  000DB2  ECAC  F017         	call	_strcmp	;wreg free
 10296  000DB6  5037               	movf	?_strcmp,w,c
 10297  000DB8  1038               	iorwf	?_strcmp+1,w,c
 10298  000DBA  A4D8               	btfss	status,2,c
 10299  000DBC  0012               	return	
 10300                           
 10301                           ;keypad.c: 186: B = 1*number;
 10302  000DBE  C035  F021         	movff	_number,_B
 10303  000DC2  C036  F022         	movff	_number+1,_B+1
 10304                           
 10305                           ;keypad.c: 187: W = 3*number;
 10306  000DC6  C035  F037         	movff	_number,i2___wmul@multiplier
 10307  000DCA  C036  F038         	movff	_number+1,i2___wmul@multiplier+1
 10308  000DCE  0E00               	movlw	0
 10309  000DD0  6E3A               	movwf	i2___wmul@multiplicand+1,c
 10310  000DD2  0E03               	movlw	3
 10311  000DD4  6E39               	movwf	i2___wmul@multiplicand,c
 10312  000DD6  EC90  F018         	call	i2___wmul	;wreg free
 10313  000DDA  C037  F01B         	movff	?i2___wmul,_W
 10314  000DDE  C038  F01C         	movff	?i2___wmul+1,_W+1
 10315                           
 10316                           ;keypad.c: 188: total_number = 4*number;
 10317  000DE2  C035  F03D         	movff	_number,??_is_valid
 10318  000DE6  C036  F03E         	movff	_number+1,??_is_valid+1
 10319  000DEA  90D8               	bcf	status,0,c
 10320  000DEC  363D               	rlcf	??_is_valid,f,c
 10321  000DEE  363E               	rlcf	??_is_valid+1,f,c
 10322  000DF0  90D8               	bcf	status,0,c
 10323  000DF2  363D               	rlcf	??_is_valid,f,c
 10324  000DF4  363E               	rlcf	??_is_valid+1,f,c
 10325  000DF6  C03D  F0D1         	movff	??_is_valid,_total_number
 10326  000DFA  C03E  F0D2         	movff	??_is_valid+1,_total_number+1
 10327                           
 10328                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 10329  000DFE  90D8               	bcf	status,0,c
 10330  000E00  3425               	rlcf	_counter_step,w,c
 10331  000E02  6ED9               	movwf	fsr2l,c
 10332  000E04  3426               	rlcf	_counter_step+1,w,c
 10333  000E06  6EDA               	movwf	fsr2h,c
 10334  000E08  0E01               	movlw	low _compartment_number
 10335  000E0A  26D9               	addwf	fsr2l,f,c
 10336  000E0C  0E00               	movlw	high _compartment_number
 10337  000E0E  22DA               	addwfc	fsr2h,f,c
 10338  000E10  CFDE F03D          	movff	postinc2,??_is_valid
 10339  000E14  CFDD F03E          	movff	postdec2,??_is_valid+1
 10340  000E18  90D8               	bcf	status,0,c
 10341  000E1A  363D               	rlcf	??_is_valid,f,c
 10342  000E1C  363E               	rlcf	??_is_valid+1,f,c
 10343  000E1E  0EA0               	movlw	low _B_array
 10344  000E20  243D               	addwf	??_is_valid,w,c
 10345  000E22  6ED9               	movwf	fsr2l,c
 10346  000E24  0E00               	movlw	high _B_array
 10347  000E26  203E               	addwfc	??_is_valid+1,w,c
 10348  000E28  6EDA               	movwf	fsr2h,c
 10349  000E2A  C021  FFDE         	movff	_B,postinc2
 10350  000E2E  C022  FFDD         	movff	_B+1,postdec2
 10351                           
 10352                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 10353  000E32  90D8               	bcf	status,0,c
 10354  000E34  3425               	rlcf	_counter_step,w,c
 10355  000E36  6ED9               	movwf	fsr2l,c
 10356  000E38  3426               	rlcf	_counter_step+1,w,c
 10357  000E3A  6EDA               	movwf	fsr2h,c
 10358  000E3C  0E01               	movlw	low _compartment_number
 10359  000E3E  26D9               	addwf	fsr2l,f,c
 10360  000E40  0E00               	movlw	high _compartment_number
 10361  000E42  22DA               	addwfc	fsr2h,f,c
 10362  000E44  CFDE F03D          	movff	postinc2,??_is_valid
 10363  000E48  CFDD F03E          	movff	postdec2,??_is_valid+1
 10364  000E4C  90D8               	bcf	status,0,c
 10365  000E4E  363D               	rlcf	??_is_valid,f,c
 10366  000E50  363E               	rlcf	??_is_valid+1,f,c
 10367  000E52  0E80               	movlw	low _W_array
 10368  000E54  243D               	addwf	??_is_valid,w,c
 10369  000E56  6ED9               	movwf	fsr2l,c
 10370  000E58  0E00               	movlw	high _W_array
 10371  000E5A  203E               	addwfc	??_is_valid+1,w,c
 10372  000E5C  6EDA               	movwf	fsr2h,c
 10373  000E5E  C01B  FFDE         	movff	_W,postinc2
 10374  000E62  C01C  FFDD         	movff	_W+1,postdec2
 10375  000E66  0012               	return	
 10376  000E68                     __end_of_is_valid:
 10377                           	opt stack 0
 10378                           pclatu	equ	0xFFB
 10379                           pclath	equ	0xFFA
 10380                           tblptru	equ	0xFF8
 10381                           tblptrh	equ	0xFF7
 10382                           tblptrl	equ	0xFF6
 10383                           tablat	equ	0xFF5
 10384                           prodh	equ	0xFF4
 10385                           prodl	equ	0xFF3
 10386                           intcon	equ	0xFF2
 10387                           intcon3	equ	0xFF0
 10388                           indf0	equ	0xFEF
 10389                           postinc0	equ	0xFEE
 10390                           fsr0h	equ	0xFEA
 10391                           fsr0l	equ	0xFE9
 10392                           wreg	equ	0xFE8
 10393                           indf1	equ	0xFE7
 10394                           postinc1	equ	0xFE6
 10395                           postdec1	equ	0xFE5
 10396                           fsr1h	equ	0xFE2
 10397                           fsr1l	equ	0xFE1
 10398                           indf2	equ	0xFDF
 10399                           postinc2	equ	0xFDE
 10400                           postdec2	equ	0xFDD
 10401                           fsr2h	equ	0xFDA
 10402                           fsr2l	equ	0xFD9
 10403                           status	equ	0xFD8
 10404                           
 10405 ;; *************** function i2___wmul *****************
 10406 ;; Defined at:
 10407 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;  multiplier      2    0[COMRAM] unsigned int 
 10410 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  __wmul          2    4[COMRAM] unsigned int 
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  2    0[COMRAM] unsigned int 
 10415 ;; Registers used:
 10416 ;;		wreg, status,2, status,0, prodl, prodh
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10422 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10423 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10426 ;;Total ram usage:        6 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; This function calls:
 10429 ;;		Nothing
 10430 ;; This function is called by:
 10431 ;;		_interruptHandler
 10432 ;;		_is_valid
 10433 ;; This function uses a non-reentrant model
 10434 ;;
 10435                           
 10436                           	psect	text30
 10437  003120                     __ptext30:
 10438                           	opt stack 0
 10439  003120                     i2___wmul:
 10440                           	opt stack 26
 10441                           
 10442                           ;incstack = 0
 10443  003120  5037               	movf	i2___wmul@multiplier,w,c
 10444  003122  0239               	mulwf	i2___wmul@multiplicand,c
 10445  003124  CFF3 F03B          	movff	prodl,i2___wmul@product
 10446  003128  CFF4 F03C          	movff	prodh,i2___wmul@product+1
 10447  00312C  5037               	movf	i2___wmul@multiplier,w,c
 10448  00312E  023A               	mulwf	i2___wmul@multiplicand+1,c
 10449  003130  50F3               	movf	prodl,w,c
 10450  003132  263C               	addwf	i2___wmul@product+1,f,c
 10451  003134  5038               	movf	i2___wmul@multiplier+1,w,c
 10452  003136  0239               	mulwf	i2___wmul@multiplicand,c
 10453  003138  50F3               	movf	prodl,w,c
 10454  00313A  263C               	addwf	i2___wmul@product+1,f,c
 10455  00313C  C03B  F037         	movff	i2___wmul@product,?i2___wmul
 10456  003140  C03C  F038         	movff	i2___wmul@product+1,?i2___wmul+1
 10457  003144  0012               	return	
 10458  003146                     __end_ofi2___wmul:
 10459                           	opt stack 0
 10460                           pclatu	equ	0xFFB
 10461                           pclath	equ	0xFFA
 10462                           tblptru	equ	0xFF8
 10463                           tblptrh	equ	0xFF7
 10464                           tblptrl	equ	0xFF6
 10465                           tablat	equ	0xFF5
 10466                           prodh	equ	0xFF4
 10467                           prodl	equ	0xFF3
 10468                           intcon	equ	0xFF2
 10469                           intcon3	equ	0xFF0
 10470                           indf0	equ	0xFEF
 10471                           postinc0	equ	0xFEE
 10472                           fsr0h	equ	0xFEA
 10473                           fsr0l	equ	0xFE9
 10474                           wreg	equ	0xFE8
 10475                           indf1	equ	0xFE7
 10476                           postinc1	equ	0xFE6
 10477                           postdec1	equ	0xFE5
 10478                           fsr1h	equ	0xFE2
 10479                           fsr1l	equ	0xFE1
 10480                           indf2	equ	0xFDF
 10481                           postinc2	equ	0xFDE
 10482                           postdec2	equ	0xFDD
 10483                           fsr2h	equ	0xFDA
 10484                           fsr2l	equ	0xFD9
 10485                           status	equ	0xFD8
 10486                           
 10487 ;; *************** function _strcmp *****************
 10488 ;; Defined at:
 10489 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 10490 ;; Parameters:    Size  Location     Type
 10491 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 10492 ;;		 -> current_set2(5), 
 10493 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 10494 ;;		 -> STR_84(5), STR_83(5), STR_82(5), STR_81(5), 
 10495 ;;		 -> STR_80(5), STR_79(5), STR_78(5), STR_77(4), 
 10496 ;;		 -> STR_76(4), STR_75(4), STR_74(4), STR_73(4), 
 10497 ;;		 -> STR_72(4), STR_71(3), STR_70(3), STR_69(3), 
 10498 ;;		 -> STR_68(2), STR_67(2), STR_66(2), STR_65(2), 
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;  r               1    5[COMRAM] char 
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  2    0[COMRAM] int 
 10503 ;; Registers used:
 10504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;Total ram usage:        6 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_is_valid
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           	psect	text31
 10524  002F58                     __ptext31:
 10525                           	opt stack 0
 10526  002F58                     _strcmp:
 10527                           	opt stack 25
 10528                           
 10529                           ;incstack = 0
 10530  002F58  D004               	goto	i2l1213
 10531  002F5A  4A37               	infsnz	strcmp@s1,f,c
 10532  002F5C  2A38               	incf	strcmp@s1+1,f,c
 10533  002F5E  4A39               	infsnz	strcmp@s2,f,c
 10534  002F60  2A3A               	incf	strcmp@s2+1,f,c
 10535  002F62                     i2l1213:
 10536  002F62  C037  FFD9         	movff	strcmp@s1,fsr2l
 10537  002F66  C038  FFDA         	movff	strcmp@s1+1,fsr2h
 10538  002F6A  50DF               	movf	indf2,w,c
 10539  002F6C  6E3B               	movwf	??_strcmp& (0+255),c
 10540  002F6E  C039  FFF6         	movff	strcmp@s2,tblptrl
 10541  002F72  C03A  FFF7         	movff	strcmp@s2+1,tblptrh
 10542  002F76                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10543  002F76  6AF8               	clrf	tblptru,c
 10544  002F78                     	endif
 10545  002F78                     	if	0	;tblptru may be non-zero
 10546  002F78                     	endif
 10547  002F78  0008               	tblrd		*
 10548  002F7A  50F5               	movf	tablat,w,c
 10549  002F7C  0800               	sublw	0
 10550  002F7E  243B               	addwf	??_strcmp,w,c
 10551  002F80  6E3C               	movwf	strcmp@r,c
 10552  002F82  503C               	movf	strcmp@r,w,c
 10553  002F84  A4D8               	btfss	status,2,c
 10554  002F86  D007               	goto	i2u201_40
 10555  002F88  C037  FFD9         	movff	strcmp@s1,fsr2l
 10556  002F8C  C038  FFDA         	movff	strcmp@s1+1,fsr2h
 10557  002F90  50DF               	movf	indf2,w,c
 10558  002F92  A4D8               	btfss	status,2,c
 10559  002F94  D7E2               	goto	i2l1214
 10560  002F96                     i2u201_40:
 10561  002F96  503C               	movf	strcmp@r,w,c
 10562  002F98  6E37               	movwf	?_strcmp,c
 10563  002F9A  6A38               	clrf	?_strcmp+1,c
 10564  002F9C  BE37               	btfsc	?_strcmp,7,c
 10565  002F9E  0638               	decf	?_strcmp+1,f,c
 10566  002FA0  0012               	return	
 10567  002FA2                     __end_of_strcmp:
 10568                           	opt stack 0
 10569                           pclatu	equ	0xFFB
 10570                           pclath	equ	0xFFA
 10571                           tblptru	equ	0xFF8
 10572                           tblptrh	equ	0xFF7
 10573                           tblptrl	equ	0xFF6
 10574                           tablat	equ	0xFF5
 10575                           prodh	equ	0xFF4
 10576                           prodl	equ	0xFF3
 10577                           intcon	equ	0xFF2
 10578                           intcon3	equ	0xFF0
 10579                           indf0	equ	0xFEF
 10580                           postinc0	equ	0xFEE
 10581                           fsr0h	equ	0xFEA
 10582                           fsr0l	equ	0xFE9
 10583                           wreg	equ	0xFE8
 10584                           indf1	equ	0xFE7
 10585                           postinc1	equ	0xFE6
 10586                           postdec1	equ	0xFE5
 10587                           fsr1h	equ	0xFE2
 10588                           fsr1l	equ	0xFE1
 10589                           indf2	equ	0xFDF
 10590                           postinc2	equ	0xFDE
 10591                           postdec2	equ	0xFDD
 10592                           fsr2h	equ	0xFDA
 10593                           fsr2l	equ	0xFD9
 10594                           status	equ	0xFD8
 10595                           
 10596 ;; *************** function _generate_compartment_array *****************
 10597 ;; Defined at:
 10598 ;;		line 220 in file "keypad.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;  step            2    0[COMRAM] int 
 10601 ;; Auto vars:     Size  Location     Type
 10602 ;;		None
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  1    wreg      void 
 10605 ;; Registers used:
 10606 ;;		wreg, status,2, status,0
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10615 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10616 ;;Total ram usage:        4 bytes
 10617 ;; Hardware stack levels used:    1
 10618 ;; This function calls:
 10619 ;;		Nothing
 10620 ;; This function is called by:
 10621 ;;		_interruptHandler
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           	psect	text32
 10626  0021EA                     __ptext32:
 10627                           	opt stack 0
 10628  0021EA                     _generate_compartment_array:
 10629                           	opt stack 26
 10630                           
 10631                           ;keypad.c: 222: switch(step){
 10632                           
 10633                           ;incstack = 0
 10634  0021EA  D11C               	goto	i2l608
 10635  0021EC                     
 10636                           ;keypad.c: 224: compartment_array[1] = 1;
 10637  0021EC  0E00               	movlw	0
 10638  0021EE  0100               	movlb	0	; () banked
 10639  0021F0  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10640  0021F2  0E01               	movlw	1
 10641  0021F4  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10642                           
 10643                           ;keypad.c: 225: compartment_array[3] = 1;
 10644  0021F6  0E00               	movlw	0
 10645  0021F8  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10646  0021FA  0E01               	movlw	1
 10647  0021FC  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10648                           
 10649                           ;keypad.c: 226: compartment_array[5] = 1;
 10650  0021FE  0E00               	movlw	0
 10651  002200  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10652  002202  0E01               	movlw	1
 10653  002204  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10654                           
 10655                           ;keypad.c: 227: compartment_array[7] = 1;
 10656  002206  0E00               	movlw	0
 10657  002208  6FBF               	movwf	(_compartment_array+15)& (0+255),b
 10658  00220A  0E01               	movlw	1
 10659  00220C  6FBE               	movwf	(_compartment_array+14)& (0+255),b
 10660                           
 10661                           ;keypad.c: 230: compartment_number[0] = 1;
 10662  00220E  0E00               	movlw	0
 10663  002210  6E02               	movwf	_compartment_number+1,c
 10664  002212  0E01               	movlw	1
 10665  002214  6E01               	movwf	_compartment_number,c
 10666                           
 10667                           ;keypad.c: 231: compartment_number[1] = 3;
 10668  002216  0E00               	movlw	0
 10669  002218  6E04               	movwf	_compartment_number+3,c
 10670  00221A  0E03               	movlw	3
 10671  00221C  6E03               	movwf	_compartment_number+2,c
 10672                           
 10673                           ;keypad.c: 232: compartment_number[2] = 5;
 10674  00221E  0E00               	movlw	0
 10675  002220  6E06               	movwf	_compartment_number+5,c
 10676  002222  0E05               	movlw	5
 10677  002224  6E05               	movwf	_compartment_number+4,c
 10678                           
 10679                           ;keypad.c: 233: compartment_number[3] = 7;
 10680  002226  0E00               	movlw	0
 10681  002228  6E08               	movwf	_compartment_number+7,c
 10682  00222A  0E07               	movlw	7
 10683  00222C  6E07               	movwf	_compartment_number+6,c
 10684                           
 10685                           ;keypad.c: 235: break;
 10686  00222E  0012               	return	
 10687  002230                     
 10688                           ;keypad.c: 237: compartment_array[0] = 1;
 10689                           
 10690                           ; BSR set to: 0
 10691  002230  0E00               	movlw	0
 10692  002232  0100               	movlb	0	; () banked
 10693  002234  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10694  002236  0E01               	movlw	1
 10695  002238  6FB0               	movwf	_compartment_array& (0+255),b
 10696                           
 10697                           ;keypad.c: 238: compartment_array[1] = 1;
 10698  00223A  0E00               	movlw	0
 10699  00223C  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10700  00223E  0E01               	movlw	1
 10701  002240  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10702                           
 10703                           ;keypad.c: 239: compartment_array[3] = 1;
 10704  002242  0E00               	movlw	0
 10705  002244  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10706  002246  0E01               	movlw	1
 10707  002248  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10708                           
 10709                           ;keypad.c: 240: compartment_array[4] = 1;
 10710  00224A  0E00               	movlw	0
 10711  00224C  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10712  00224E  0E01               	movlw	1
 10713  002250  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10714                           
 10715                           ;keypad.c: 241: compartment_array[6] = 1;
 10716  002252  0E00               	movlw	0
 10717  002254  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10718  002256  0E01               	movlw	1
 10719  002258  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10720                           
 10721                           ;keypad.c: 245: compartment_number[0] = 0;
 10722  00225A  0E00               	movlw	0
 10723  00225C  6E02               	movwf	_compartment_number+1,c
 10724  00225E  0E00               	movlw	0
 10725  002260  6E01               	movwf	_compartment_number,c
 10726                           
 10727                           ;keypad.c: 246: compartment_number[1] = 1;
 10728  002262  0E00               	movlw	0
 10729  002264  6E04               	movwf	_compartment_number+3,c
 10730  002266  0E01               	movlw	1
 10731  002268  6E03               	movwf	_compartment_number+2,c
 10732                           
 10733                           ;keypad.c: 247: compartment_number[2] = 3;
 10734  00226A  0E00               	movlw	0
 10735  00226C  6E06               	movwf	_compartment_number+5,c
 10736  00226E  0E03               	movlw	3
 10737  002270  6E05               	movwf	_compartment_number+4,c
 10738                           
 10739                           ;keypad.c: 248: compartment_number[3] = 4;
 10740  002272  0E00               	movlw	0
 10741  002274  6E08               	movwf	_compartment_number+7,c
 10742  002276  0E04               	movlw	4
 10743  002278  6E07               	movwf	_compartment_number+6,c
 10744                           
 10745                           ;keypad.c: 249: compartment_number[4] = 6;
 10746  00227A  0E00               	movlw	0
 10747  00227C  6E0A               	movwf	_compartment_number+9,c
 10748  00227E  0E06               	movlw	6
 10749  002280  6E09               	movwf	_compartment_number+8,c
 10750                           
 10751                           ;keypad.c: 251: break;
 10752  002282  0012               	return	
 10753  002284                     
 10754                           ;keypad.c: 254: compartment_array[0] = 1;
 10755                           
 10756                           ; BSR set to: 0
 10757  002284  0E00               	movlw	0
 10758  002286  0100               	movlb	0	; () banked
 10759  002288  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10760  00228A  0E01               	movlw	1
 10761  00228C  6FB0               	movwf	_compartment_array& (0+255),b
 10762                           
 10763                           ;keypad.c: 255: compartment_array[1] = 1;
 10764  00228E  0E00               	movlw	0
 10765  002290  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10766  002292  0E01               	movlw	1
 10767  002294  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10768                           
 10769                           ;keypad.c: 256: compartment_array[2] = 1;
 10770  002296  0E00               	movlw	0
 10771  002298  6FB5               	movwf	(_compartment_array+5)& (0+255),b
 10772  00229A  0E01               	movlw	1
 10773  00229C  6FB4               	movwf	(_compartment_array+4)& (0+255),b
 10774                           
 10775                           ;keypad.c: 257: compartment_array[4] = 1;
 10776  00229E  0E00               	movlw	0
 10777  0022A0  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10778  0022A2  0E01               	movlw	1
 10779  0022A4  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10780                           
 10781                           ;keypad.c: 258: compartment_array[5] = 1;
 10782  0022A6  0E00               	movlw	0
 10783  0022A8  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10784  0022AA  0E01               	movlw	1
 10785  0022AC  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10786                           
 10787                           ;keypad.c: 259: compartment_array[6] = 1;
 10788  0022AE  0E00               	movlw	0
 10789  0022B0  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10790  0022B2  0E01               	movlw	1
 10791  0022B4  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10792                           
 10793                           ;keypad.c: 262: compartment_number[0] = 0;
 10794  0022B6  0E00               	movlw	0
 10795  0022B8  6E02               	movwf	_compartment_number+1,c
 10796  0022BA  0E00               	movlw	0
 10797  0022BC  6E01               	movwf	_compartment_number,c
 10798                           
 10799                           ;keypad.c: 263: compartment_number[1] = 1;
 10800  0022BE  0E00               	movlw	0
 10801  0022C0  6E04               	movwf	_compartment_number+3,c
 10802  0022C2  0E01               	movlw	1
 10803  0022C4  6E03               	movwf	_compartment_number+2,c
 10804                           
 10805                           ;keypad.c: 264: compartment_number[2] = 2;
 10806  0022C6  0E00               	movlw	0
 10807  0022C8  6E06               	movwf	_compartment_number+5,c
 10808  0022CA  0E02               	movlw	2
 10809  0022CC  6E05               	movwf	_compartment_number+4,c
 10810                           
 10811                           ;keypad.c: 265: compartment_number[3] = 4;
 10812  0022CE  0E00               	movlw	0
 10813  0022D0  6E08               	movwf	_compartment_number+7,c
 10814  0022D2  0E04               	movlw	4
 10815  0022D4  6E07               	movwf	_compartment_number+6,c
 10816                           
 10817                           ;keypad.c: 266: compartment_number[4] = 5;
 10818  0022D6  0E00               	movlw	0
 10819  0022D8  6E0A               	movwf	_compartment_number+9,c
 10820  0022DA  0E05               	movlw	5
 10821  0022DC  6E09               	movwf	_compartment_number+8,c
 10822                           
 10823                           ;keypad.c: 267: compartment_number[5] = 6;
 10824  0022DE  0E00               	movlw	0
 10825  0022E0  6E0C               	movwf	_compartment_number+11,c
 10826  0022E2  0E06               	movlw	6
 10827  0022E4  6E0B               	movwf	_compartment_number+10,c
 10828                           
 10829                           ;keypad.c: 269: break;
 10830  0022E6  0012               	return	
 10831  0022E8                     
 10832                           ;keypad.c: 271: compartment_array[0] = 1;
 10833                           
 10834                           ; BSR set to: 0
 10835  0022E8  0E00               	movlw	0
 10836  0022EA  0100               	movlb	0	; () banked
 10837  0022EC  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10838  0022EE  0E01               	movlw	1
 10839  0022F0  6FB0               	movwf	_compartment_array& (0+255),b
 10840                           
 10841                           ;keypad.c: 272: compartment_array[1] = 1;
 10842  0022F2  0E00               	movlw	0
 10843  0022F4  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10844  0022F6  0E01               	movlw	1
 10845  0022F8  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10846                           
 10847                           ;keypad.c: 273: compartment_array[2] = 1;
 10848  0022FA  0E00               	movlw	0
 10849  0022FC  6FB5               	movwf	(_compartment_array+5)& (0+255),b
 10850  0022FE  0E01               	movlw	1
 10851  002300  6FB4               	movwf	(_compartment_array+4)& (0+255),b
 10852                           
 10853                           ;keypad.c: 274: compartment_array[3] = 1;
 10854  002302  0E00               	movlw	0
 10855  002304  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10856  002306  0E01               	movlw	1
 10857  002308  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10858                           
 10859                           ;keypad.c: 275: compartment_array[4] = 1;
 10860  00230A  0E00               	movlw	0
 10861  00230C  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10862  00230E  0E01               	movlw	1
 10863  002310  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10864                           
 10865                           ;keypad.c: 276: compartment_array[5] = 1;
 10866  002312  0E00               	movlw	0
 10867  002314  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10868  002316  0E01               	movlw	1
 10869  002318  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10870                           
 10871                           ;keypad.c: 277: compartment_array[6] = 1;
 10872  00231A  0E00               	movlw	0
 10873  00231C  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10874  00231E  0E01               	movlw	1
 10875  002320  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10876                           
 10877                           ;keypad.c: 280: compartment_number[0] = 0;
 10878  002322  0E00               	movlw	0
 10879  002324  6E02               	movwf	_compartment_number+1,c
 10880  002326  0E00               	movlw	0
 10881  002328  6E01               	movwf	_compartment_number,c
 10882                           
 10883                           ;keypad.c: 281: compartment_number[1] = 1;
 10884  00232A  0E00               	movlw	0
 10885  00232C  6E04               	movwf	_compartment_number+3,c
 10886  00232E  0E01               	movlw	1
 10887  002330  6E03               	movwf	_compartment_number+2,c
 10888                           
 10889                           ;keypad.c: 282: compartment_number[2] = 2;
 10890  002332  0E00               	movlw	0
 10891  002334  6E06               	movwf	_compartment_number+5,c
 10892  002336  0E02               	movlw	2
 10893  002338  6E05               	movwf	_compartment_number+4,c
 10894                           
 10895                           ;keypad.c: 283: compartment_number[3] = 3;
 10896  00233A  0E00               	movlw	0
 10897  00233C  6E08               	movwf	_compartment_number+7,c
 10898  00233E  0E03               	movlw	3
 10899  002340  6E07               	movwf	_compartment_number+6,c
 10900                           
 10901                           ;keypad.c: 284: compartment_number[4] = 4;
 10902  002342  0E00               	movlw	0
 10903  002344  6E0A               	movwf	_compartment_number+9,c
 10904  002346  0E04               	movlw	4
 10905  002348  6E09               	movwf	_compartment_number+8,c
 10906                           
 10907                           ;keypad.c: 285: compartment_number[5] = 5;
 10908  00234A  0E00               	movlw	0
 10909  00234C  6E0C               	movwf	_compartment_number+11,c
 10910  00234E  0E05               	movlw	5
 10911  002350  6E0B               	movwf	_compartment_number+10,c
 10912                           
 10913                           ;keypad.c: 286: compartment_number[6] = 6;
 10914  002352  0E00               	movlw	0
 10915  002354  6E0E               	movwf	_compartment_number+13,c
 10916  002356  0E06               	movlw	6
 10917  002358  6E0D               	movwf	_compartment_number+12,c
 10918                           
 10919                           ;keypad.c: 288: break;
 10920  00235A  0012               	return	
 10921  00235C                     
 10922                           ;keypad.c: 290: compartment_array[0] = 1;
 10923                           
 10924                           ; BSR set to: 0
 10925  00235C  0E00               	movlw	0
 10926  00235E  0100               	movlb	0	; () banked
 10927  002360  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10928  002362  0E01               	movlw	1
 10929  002364  6FB0               	movwf	_compartment_array& (0+255),b
 10930                           
 10931                           ;keypad.c: 291: compartment_array[1] = 1;
 10932  002366  0E00               	movlw	0
 10933  002368  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10934  00236A  0E01               	movlw	1
 10935  00236C  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10936                           
 10937                           ;keypad.c: 292: compartment_array[2] = 1;
 10938  00236E  0E00               	movlw	0
 10939  002370  6FB5               	movwf	(_compartment_array+5)& (0+255),b
 10940  002372  0E01               	movlw	1
 10941  002374  6FB4               	movwf	(_compartment_array+4)& (0+255),b
 10942                           
 10943                           ;keypad.c: 293: compartment_array[3] = 1;
 10944  002376  0E00               	movlw	0
 10945  002378  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10946  00237A  0E01               	movlw	1
 10947  00237C  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10948                           
 10949                           ;keypad.c: 294: compartment_array[4] = 1;
 10950  00237E  0E00               	movlw	0
 10951  002380  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10952  002382  0E01               	movlw	1
 10953  002384  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10954                           
 10955                           ;keypad.c: 295: compartment_array[5] = 1;
 10956  002386  0E00               	movlw	0
 10957  002388  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10958  00238A  0E01               	movlw	1
 10959  00238C  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10960                           
 10961                           ;keypad.c: 296: compartment_array[6] = 1;
 10962  00238E  0E00               	movlw	0
 10963  002390  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10964  002392  0E01               	movlw	1
 10965  002394  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10966                           
 10967                           ;keypad.c: 297: compartment_array[7] = 1;
 10968  002396  0E00               	movlw	0
 10969  002398  6FBF               	movwf	(_compartment_array+15)& (0+255),b
 10970  00239A  0E01               	movlw	1
 10971  00239C  6FBE               	movwf	(_compartment_array+14)& (0+255),b
 10972                           
 10973                           ;keypad.c: 300: compartment_number[0] = 0;
 10974  00239E  0E00               	movlw	0
 10975  0023A0  6E02               	movwf	_compartment_number+1,c
 10976  0023A2  0E00               	movlw	0
 10977  0023A4  6E01               	movwf	_compartment_number,c
 10978                           
 10979                           ;keypad.c: 301: compartment_number[1] = 1;
 10980  0023A6  0E00               	movlw	0
 10981  0023A8  6E04               	movwf	_compartment_number+3,c
 10982  0023AA  0E01               	movlw	1
 10983  0023AC  6E03               	movwf	_compartment_number+2,c
 10984                           
 10985                           ;keypad.c: 302: compartment_number[2] = 2;
 10986  0023AE  0E00               	movlw	0
 10987  0023B0  6E06               	movwf	_compartment_number+5,c
 10988  0023B2  0E02               	movlw	2
 10989  0023B4  6E05               	movwf	_compartment_number+4,c
 10990                           
 10991                           ;keypad.c: 303: compartment_number[3] = 3;
 10992  0023B6  0E00               	movlw	0
 10993  0023B8  6E08               	movwf	_compartment_number+7,c
 10994  0023BA  0E03               	movlw	3
 10995  0023BC  6E07               	movwf	_compartment_number+6,c
 10996                           
 10997                           ;keypad.c: 304: compartment_number[4] = 4;
 10998  0023BE  0E00               	movlw	0
 10999  0023C0  6E0A               	movwf	_compartment_number+9,c
 11000  0023C2  0E04               	movlw	4
 11001  0023C4  6E09               	movwf	_compartment_number+8,c
 11002                           
 11003                           ;keypad.c: 305: compartment_number[5] = 5;
 11004  0023C6  0E00               	movlw	0
 11005  0023C8  6E0C               	movwf	_compartment_number+11,c
 11006  0023CA  0E05               	movlw	5
 11007  0023CC  6E0B               	movwf	_compartment_number+10,c
 11008                           
 11009                           ;keypad.c: 306: compartment_number[6] = 6;
 11010  0023CE  0E00               	movlw	0
 11011  0023D0  6E0E               	movwf	_compartment_number+13,c
 11012  0023D2  0E06               	movlw	6
 11013  0023D4  6E0D               	movwf	_compartment_number+12,c
 11014                           
 11015                           ;keypad.c: 307: compartment_number[7] = 7;
 11016  0023D6  0E00               	movlw	0
 11017  0023D8  6E10               	movwf	_compartment_number+15,c
 11018  0023DA  0E07               	movlw	7
 11019  0023DC  6E0F               	movwf	_compartment_number+14,c
 11020                           
 11021                           ;keypad.c: 309: break;
 11022  0023DE  0012               	return	
 11023  0023E0                     
 11024                           ;keypad.c: 311: compartment_array[0] = 0;
 11025                           
 11026                           ; BSR set to: 0
 11027  0023E0  0E00               	movlw	0
 11028  0023E2  0100               	movlb	0	; () banked
 11029  0023E4  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 11030  0023E6  0E00               	movlw	0
 11031  0023E8  6FB0               	movwf	_compartment_array& (0+255),b
 11032                           
 11033                           ;keypad.c: 312: compartment_array[1] = 0;
 11034  0023EA  0E00               	movlw	0
 11035  0023EC  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 11036  0023EE  0E00               	movlw	0
 11037  0023F0  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 11038                           
 11039                           ;keypad.c: 313: compartment_array[2] = 0;
 11040  0023F2  0E00               	movlw	0
 11041  0023F4  6FB5               	movwf	(_compartment_array+5)& (0+255),b
 11042  0023F6  0E00               	movlw	0
 11043  0023F8  6FB4               	movwf	(_compartment_array+4)& (0+255),b
 11044                           
 11045                           ;keypad.c: 314: compartment_array[3] = 0;
 11046  0023FA  0E00               	movlw	0
 11047  0023FC  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 11048  0023FE  0E00               	movlw	0
 11049  002400  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 11050                           
 11051                           ;keypad.c: 315: compartment_array[4] = 0;
 11052  002402  0E00               	movlw	0
 11053  002404  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 11054  002406  0E00               	movlw	0
 11055  002408  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 11056                           
 11057                           ;keypad.c: 316: compartment_array[5] = 0;
 11058  00240A  0E00               	movlw	0
 11059  00240C  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 11060  00240E  0E00               	movlw	0
 11061  002410  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 11062                           
 11063                           ;keypad.c: 317: compartment_array[6] = 0;
 11064  002412  0E00               	movlw	0
 11065  002414  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 11066  002416  0E00               	movlw	0
 11067  002418  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 11068                           
 11069                           ;keypad.c: 318: compartment_array[7] = 0;
 11070  00241A  0E00               	movlw	0
 11071  00241C  6FBF               	movwf	(_compartment_array+15)& (0+255),b
 11072  00241E  0E00               	movlw	0
 11073  002420  6FBE               	movwf	(_compartment_array+14)& (0+255),b
 11074                           
 11075                           ;keypad.c: 320: }
 11076  002422  0012               	return	
 11077  002424                     i2l608:
 11078                           
 11079                           ; BSR set to: 0
 11080  002424  C037  F039         	movff	generate_compartment_array@step,??_generate_compartment_array
 11081  002428  C038  F03A         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
 11082                           
 11083                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11084                           ; Switch size 1, requested type "space"
 11085                           ; Number of cases is 1, Range of values is 0 to 0
 11086                           ; switch strategies available:
 11087                           ; Name         Instructions Cycles
 11088                           ; simple_byte            4     3 (average)
 11089                           ;	Chosen strategy is simple_byte
 11090  00242C  503A               	movf	??_generate_compartment_array+1,w,c
 11091  00242E  0A00               	xorlw	0	; case 0
 11092  002430  A4D8               	btfss	status,2,c
 11093  002432  D7D6               	goto	i2l615
 11094                           
 11095                           ; Switch size 1, requested type "space"
 11096                           ; Number of cases is 5, Range of values is 4 to 8
 11097                           ; switch strategies available:
 11098                           ; Name         Instructions Cycles
 11099                           ; simple_byte           16     9 (average)
 11100                           ;	Chosen strategy is simple_byte
 11101  002434  5039               	movf	??_generate_compartment_array,w,c
 11102  002436  0A04               	xorlw	4	; case 4
 11103  002438  B4D8               	btfsc	status,2,c
 11104  00243A  D6D8               	goto	i2l609
 11105  00243C  0A01               	xorlw	1	; case 5
 11106  00243E  B4D8               	btfsc	status,2,c
 11107  002440  D6F7               	goto	i2l611
 11108  002442  0A03               	xorlw	3	; case 6
 11109  002444  B4D8               	btfsc	status,2,c
 11110  002446  D71E               	goto	i2l612
 11111  002448  0A01               	xorlw	1	; case 7
 11112  00244A  B4D8               	btfsc	status,2,c
 11113  00244C  D74D               	goto	i2l613
 11114  00244E  0A0F               	xorlw	15	; case 8
 11115  002450  B4D8               	btfsc	status,2,c
 11116  002452  D784               	goto	i2l614
 11117  002454  D7C5               	goto	i2l615
 11118  002456                     __end_of_generate_compartment_array:
 11119                           	opt stack 0
 11120                           pclatu	equ	0xFFB
 11121                           pclath	equ	0xFFA
 11122                           tblptru	equ	0xFF8
 11123                           tblptrh	equ	0xFF7
 11124                           tblptrl	equ	0xFF6
 11125                           tablat	equ	0xFF5
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           intcon	equ	0xFF2
 11129                           intcon3	equ	0xFF0
 11130                           indf0	equ	0xFEF
 11131                           postinc0	equ	0xFEE
 11132                           fsr0h	equ	0xFEA
 11133                           fsr0l	equ	0xFE9
 11134                           wreg	equ	0xFE8
 11135                           indf1	equ	0xFE7
 11136                           postinc1	equ	0xFE6
 11137                           postdec1	equ	0xFE5
 11138                           fsr1h	equ	0xFE2
 11139                           fsr1l	equ	0xFE1
 11140                           indf2	equ	0xFDF
 11141                           postinc2	equ	0xFDE
 11142                           postdec2	equ	0xFDD
 11143                           fsr2h	equ	0xFDA
 11144                           fsr2l	equ	0xFD9
 11145                           status	equ	0xFD8
 11146                           
 11147 ;; *************** function _check *****************
 11148 ;; Defined at:
 11149 ;;		line 208 in file "keypad.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;		None
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;		None
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  2    0[COMRAM] int 
 11156 ;; Registers used:
 11157 ;;		wreg, status,2, status,0
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11166 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;Total ram usage:        2 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; This function calls:
 11170 ;;		Nothing
 11171 ;; This function is called by:
 11172 ;;		_interruptHandler
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           	psect	text33
 11177  002CB6                     __ptext33:
 11178                           	opt stack 0
 11179  002CB6                     _check:
 11180                           	opt stack 26
 11181                           
 11182                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 11183                           
 11184                           ;incstack = 0
 11185  002CB6  BE22               	btfsc	_B+1,7,c
 11186  002CB8  D006               	goto	i2u263_40
 11187  002CBA  5022               	movf	_B+1,w,c
 11188  002CBC  E125               	bnz	i2l3698
 11189  002CBE  0E03               	movlw	3
 11190  002CC0  5C21               	subwf	_B,w,c
 11191  002CC2  B0D8               	btfsc	status,0,c
 11192  002CC4  D021               	goto	i2u267_40
 11193  002CC6                     i2u263_40:
 11194  002CC6  BE20               	btfsc	_N+1,7,c
 11195  002CC8  D006               	goto	i2u264_40
 11196  002CCA  5020               	movf	_N+1,w,c
 11197  002CCC  E11D               	bnz	i2l3698
 11198  002CCE  0E04               	movlw	4
 11199  002CD0  5C1F               	subwf	_N,w,c
 11200  002CD2  B0D8               	btfsc	status,0,c
 11201  002CD4  D019               	goto	i2u267_40
 11202  002CD6                     i2u264_40:
 11203  002CD6  BE1E               	btfsc	_S+1,7,c
 11204  002CD8  D006               	goto	i2u265_40
 11205  002CDA  501E               	movf	_S+1,w,c
 11206  002CDC  E115               	bnz	i2l3698
 11207  002CDE  0E03               	movlw	3
 11208  002CE0  5C1D               	subwf	_S,w,c
 11209  002CE2  B0D8               	btfsc	status,0,c
 11210  002CE4  D011               	goto	i2u267_40
 11211  002CE6                     i2u265_40:
 11212  002CE6  BE1C               	btfsc	_W+1,7,c
 11213  002CE8  D006               	goto	i2u266_40
 11214  002CEA  501C               	movf	_W+1,w,c
 11215  002CEC  E10D               	bnz	i2l3698
 11216  002CEE  0E05               	movlw	5
 11217  002CF0  5C1B               	subwf	_W,w,c
 11218  002CF2  B0D8               	btfsc	status,0,c
 11219  002CF4  D009               	goto	i2u267_40
 11220  002CF6                     i2u266_40:
 11221  002CF6  0100               	movlb	0	; () banked
 11222  002CF8  BFD2               	btfsc	(_total_number+1)& (0+255),7,b
 11223  002CFA  D00B               	goto	i2l602
 11224  002CFC  51D2               	movf	(_total_number+1)& (0+255),w,b
 11225  002CFE  E104               	bnz	i2l3698
 11226  002D00  0E05               	movlw	5
 11227  002D02  5DD1               	subwf	_total_number& (0+255),w,b
 11228  002D04  A0D8               	btfss	status,0,c
 11229  002D06  D005               	goto	i2l602
 11230  002D08                     i2u267_40:
 11231  002D08                     i2l3698:
 11232                           
 11233                           ;keypad.c: 213: return 0;
 11234  002D08  0E00               	movlw	0
 11235  002D0A  6E38               	movwf	?_check+1,c
 11236  002D0C  0E00               	movlw	0
 11237  002D0E  6E37               	movwf	?_check,c
 11238  002D10  0012               	return	
 11239  002D12                     i2l602:
 11240                           
 11241                           ;keypad.c: 214: }
 11242                           ;keypad.c: 215: return 1;
 11243  002D12  0E00               	movlw	0
 11244  002D14  6E38               	movwf	?_check+1,c
 11245  002D16  0E01               	movlw	1
 11246  002D18  6E37               	movwf	?_check,c
 11247  002D1A  0012               	return	
 11248  002D1C                     __end_of_check:
 11249                           	opt stack 0
 11250                           pclatu	equ	0xFFB
 11251                           pclath	equ	0xFFA
 11252                           tblptru	equ	0xFF8
 11253                           tblptrh	equ	0xFF7
 11254                           tblptrl	equ	0xFF6
 11255                           tablat	equ	0xFF5
 11256                           prodh	equ	0xFF4
 11257                           prodl	equ	0xFF3
 11258                           intcon	equ	0xFF2
 11259                           intcon3	equ	0xFF0
 11260                           indf0	equ	0xFEF
 11261                           postinc0	equ	0xFEE
 11262                           fsr0h	equ	0xFEA
 11263                           fsr0l	equ	0xFE9
 11264                           wreg	equ	0xFE8
 11265                           indf1	equ	0xFE7
 11266                           postinc1	equ	0xFE6
 11267                           postdec1	equ	0xFE5
 11268                           fsr1h	equ	0xFE2
 11269                           fsr1l	equ	0xFE1
 11270                           indf2	equ	0xFDF
 11271                           postinc2	equ	0xFDE
 11272                           postdec2	equ	0xFDD
 11273                           fsr2h	equ	0xFDA
 11274                           fsr2l	equ	0xFD9
 11275                           status	equ	0xFD8
 11276                           pclatu	equ	0xFFB
 11277                           pclath	equ	0xFFA
 11278                           tblptru	equ	0xFF8
 11279                           tblptrh	equ	0xFF7
 11280                           tblptrl	equ	0xFF6
 11281                           tablat	equ	0xFF5
 11282                           prodh	equ	0xFF4
 11283                           prodl	equ	0xFF3
 11284                           intcon	equ	0xFF2
 11285                           intcon3	equ	0xFF0
 11286                           indf0	equ	0xFEF
 11287                           postinc0	equ	0xFEE
 11288                           fsr0h	equ	0xFEA
 11289                           fsr0l	equ	0xFE9
 11290                           wreg	equ	0xFE8
 11291                           indf1	equ	0xFE7
 11292                           postinc1	equ	0xFE6
 11293                           postdec1	equ	0xFE5
 11294                           fsr1h	equ	0xFE2
 11295                           fsr1l	equ	0xFE1
 11296                           indf2	equ	0xFDF
 11297                           postinc2	equ	0xFDE
 11298                           postdec2	equ	0xFDD
 11299                           fsr2h	equ	0xFDA
 11300                           fsr2l	equ	0xFD9
 11301                           status	equ	0xFD8
 11302                           
 11303                           	psect	rparam
 11304  0000                     pclatu	equ	0xFFB
 11305                           pclath	equ	0xFFA
 11306                           tblptru	equ	0xFF8
 11307                           tblptrh	equ	0xFF7
 11308                           tblptrl	equ	0xFF6
 11309                           tablat	equ	0xFF5
 11310                           prodh	equ	0xFF4
 11311                           prodl	equ	0xFF3
 11312                           intcon	equ	0xFF2
 11313                           intcon3	equ	0xFF0
 11314                           indf0	equ	0xFEF
 11315                           postinc0	equ	0xFEE
 11316                           fsr0h	equ	0xFEA
 11317                           fsr0l	equ	0xFE9
 11318                           wreg	equ	0xFE8
 11319                           indf1	equ	0xFE7
 11320                           postinc1	equ	0xFE6
 11321                           postdec1	equ	0xFE5
 11322                           fsr1h	equ	0xFE2
 11323                           fsr1l	equ	0xFE1
 11324                           indf2	equ	0xFDF
 11325                           postinc2	equ	0xFDE
 11326                           postdec2	equ	0xFDD
 11327                           fsr2h	equ	0xFDA
 11328                           fsr2l	equ	0xFD9
 11329                           status	equ	0xFD8
 11330                           
 11331                           	psect	temp
 11332  00006F                     btemp:
 11333                           	opt stack 0
 11334  00006F                     	ds	1
 11335  0000                     int$flags	set	btemp
 11336  0000                     wtemp6	set	btemp+1
 11337                           pclatu	equ	0xFFB
 11338                           pclath	equ	0xFFA
 11339                           tblptru	equ	0xFF8
 11340                           tblptrh	equ	0xFF7
 11341                           tblptrl	equ	0xFF6
 11342                           tablat	equ	0xFF5
 11343                           prodh	equ	0xFF4
 11344                           prodl	equ	0xFF3
 11345                           intcon	equ	0xFF2
 11346                           intcon3	equ	0xFF0
 11347                           indf0	equ	0xFEF
 11348                           postinc0	equ	0xFEE
 11349                           fsr0h	equ	0xFEA
 11350                           fsr0l	equ	0xFE9
 11351                           wreg	equ	0xFE8
 11352                           indf1	equ	0xFE7
 11353                           postinc1	equ	0xFE6
 11354                           postdec1	equ	0xFE5
 11355                           fsr1h	equ	0xFE2
 11356                           fsr1l	equ	0xFE1
 11357                           indf2	equ	0xFDF
 11358                           postinc2	equ	0xFDE
 11359                           postdec2	equ	0xFDD
 11360                           fsr2h	equ	0xFDA
 11361                           fsr2l	equ	0xFD9
 11362                           status	equ	0xFD8


Data Sizes:
    Strings     295
    Constant    136
    Data        2
    BSS         483
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     54     110
    BANK0           128     27     128
    BANK1           256      9     137
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_62(CODE[1]), STR_60(CODE[1]), STR_57(CODE[1]), STR_54(CODE[2]), 
		 -> STR_53(CODE[2]), STR_52(CODE[2]), STR_51(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK0[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK0[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_84(CODE[5]), STR_83(CODE[5]), STR_82(CODE[5]), STR_81(CODE[5]), 
		 -> STR_80(CODE[5]), STR_79(CODE[5]), STR_78(CODE[5]), STR_77(CODE[4]), 
		 -> STR_76(CODE[4]), STR_75(CODE[4]), STR_74(CODE[4]), STR_73(CODE[4]), 
		 -> STR_72(CODE[4]), STR_71(CODE[3]), STR_70(CODE[3]), STR_69(CODE[3]), 
		 -> STR_68(CODE[2]), STR_67(CODE[2]), STR_66(CODE[2]), STR_65(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK0[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_64(CODE[9]), STR_63(CODE[12]), STR_61(CODE[7]), STR_59(CODE[3]), 
		 -> STR_58(CODE[11]), STR_56(CODE[3]), STR_55(CODE[9]), STR_50(CODE[15]), 
		 -> STR_49(CODE[13]), STR_48(CODE[11]), STR_47(CODE[18]), STR_46(CODE[3]), 
		 -> STR_45(CODE[2]), prev_set(BANK1[40]), STR_44(CODE[5]), STR_43(CODE[2]), 
		 -> STR_42(CODE[3]), STR_41(CODE[12]), STR_40(CODE[10]), STR_39(CODE[10]), 
		 -> STR_38(CODE[5]), STR_37(CODE[2]), STR_36(CODE[3]), STR_35(CODE[2]), 
		 -> STR_34(CODE[3]), STR_33(CODE[4]), STR_32(CODE[3]), STR_31(CODE[4]), 
		 -> STR_30(CODE[3]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[20]), STR_25(CODE[2]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[4]), STR_19(CODE[3]), 
		 -> STR_18(CODE[4]), STR_17(CODE[3]), STR_16(CODE[4]), STR_15(CODE[3]), 
		 -> STR_14(CODE[4]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[2]), 
		 -> STR_10(CODE[3]), STR_9(CODE[2]), STR_8(CODE[3]), STR_7(CODE[5]), 
		 -> STR_6(CODE[17]), STR_5(CODE[6]), STR_4(CODE[8]), STR_3(CODE[3]), 
		 -> STR_2(CODE[14]), STR_1(CODE[15]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_85(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK0[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _store_prev->_strncpy
    _strncpy->___wmul
    _read_IR->_servoRotate180
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   12811
                                             24 BANK0      3     3      0
                            ___awmod
                             ___wmul
                            _initLCD
                         _initialize
                            _lcdInst
                       _motorStart_0
                        _motorStop_0
                             _printf
                              _putch
                            _read_IR
                       _servoRotate0
                     _servoRotate180
                         _store_prev
 ---------------------------------------------------------------------------------
 (1) _store_prev                                           2     2      0    2722
                                             14 BANK0      2     2      0
                             ___wmul
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _strncpy                                              8     2      6     472
                                              6 BANK0      8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2058
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _read_IR                                              5     3      2     102
                                              3 BANK0      5     3      2
                       _servoRotate0
                     _servoRotate180
 ---------------------------------------------------------------------------------
 (1) _servoRotate180                                       3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate0                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    6663
                                             12 BANK0     12     2     10
                                              0 BANK1      9     9      0
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                              _putch
                            _read_IR (ARG)
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     613
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0    9435
                                             27 COMRAM    27    27      0
                              _check
         _generate_compartment_array
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                           i2___wmul
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            21    17      4    1294
                                             12 COMRAM    15    11      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    3808
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     677
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _generate_compartment_array                           4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   ___wmul
   _initLCD
     _lcdInst
       _lcdNibble
   _initialize
   _lcdInst
     _lcdNibble
   _motorStart_0
   _motorStop_0
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul (ARG)
     _putch (ARG)
       _lcdNibble
     _read_IR (ARG)
       _servoRotate0
       _servoRotate180
   _putch
     _lcdNibble
   _read_IR
     _servoRotate0
     _servoRotate180
   _servoRotate0
   _servoRotate180
   _store_prev
     ___wmul
     _strncpy
       ___wmul (ARG)

 _interruptHandler (ROOT)
   _check
   _generate_compartment_array
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2___wmul
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      9      89       7       53.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1B      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     36      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     23F      34        0.0%
DATA                 0      0     23F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 27 16:39:32 2018

                                  _B 0021                                    _N 001F  
                                  _S 001D                                    _W 001B  
                                  _i 002B                          __CFG_CPD$ON 000000  
                ___wmul@multiplicand 00E7                   i2___lwdiv@dividend 0037  
                        __CFG_BORV$3 000000                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l240 0E9C  
                                l250 10F0                                  l242 0EA8  
                                l243 0EF6                                  l404 2FE8  
                                l252 1226                                  l244 0F46  
                                l245 0F7C                                  l342 2998  
                                l254 169A                                  l270 15BE  
                                l262 1300                                  l255 12A2  
                                l247 10CC                                  l264 1626  
                                l256 123E                                  l248 0FEE  
                                l273 1684                                  l265 1370  
                                l266 148A                                  l275 177A  
                                l276 1708                                  l268 14F2  
                                l621 2A38                                  l277 1734  
                                l269 1558                                  l640 2554  
                                l641 247A                                  l633 2462  
                                l481 2BBE                                  l634 2472  
                                l651 25C8                                  l635 2504  
                                l643 24D0                                  l619 29B4  
                                l652 2624                                  l644 24A4  
                                l653 25CE                                  l646 24FA  
                                l647 257E                                  l399 2F56  
                                l840 2C7C                                  l841 2C74  
                                l844 2C94                                  l845 2C9E  
                                l837 2C5A                                  l846 2CAC  
                                l838 2C66                         __CFG_CPB$OFF 000000  
                       ___awmod@sign 00EA                        _assembly_step 0027  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                       __CFG_WDT$OFF 000000                                 l1060 2D9E  
                               l1061 2D96                                 l1070 3048  
                               l1071 3040                                 l1064 2DBE  
                               l1240 2D6C                                 l1065 2DC8  
                               l1241 2D5C                                 l1074 3060  
                               l1075 306A                                 l1237 2D26  
                               l1238 2D50                                 l5104 168E  
                               l5140 178C                                 l5162 1824  
                               l4604 2D5C                                 l4710 2582  
                               l5178 18F8                                 l4582 2F18  
                               l4568 2FAA                                 l4780 28EA  
                               l4758 29A4                                 l4980 121E  
                               _ADON 007E10                                 STR_1 FF1D  
                               STR_2 FF2C                                 STR_3 FFF5  
                               STR_4 FF91                                 STR_5 FFA7  
                               STR_6 FEFD                                 STR_7 FFD0  
                               STR_8 FEE8                                 STR_9 FFE7  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u4120 12FE  
                               u4220 168E                                 u4060 10EE  
                               u4070 121E                                 u4307 0EE2  
                               u4317 0F38                                 u3710 24C6  
                               u4270 18F8                                 u4407 12BC  
                               u4327 0F6E                                 u3640 2DA2  
                               u3800 262E                                 u3720 24F2  
                               u3545 2AFE                                 u4417 12D6  
                               u4337 0FA4                                 u3546 2B00  
                               u3810 265E                                 u3555 2B40  
                               u4507 16BA                                 u4427 1360  
                               u4347 0FD6                                 u3556 2B42  
                               u3740 2534                                 u3717 24BC  
                               u4517 16D8                                 u4437 137E  
                               u4357 109A                                 u3910 2C80  
                               u3670 304C                                 u3727 24E8  
                               u4607 192E                                 u4527 1754  
                               u4447 145A                                 u4367 10BA  
                               u3817 2654                                 u4617 194A  
                               u4537 1770                                 u4457 14E4  
                               u4377 1200                                 u4297 0EBE  
                               u4707 3176                                 u3747 252A  
                               u4627 2B54                                 u4547 17B2  
                               u4467 1548                                 u4387 1264  
                               u3780 25B4                                 u4717 2E7E  
                               u4637 2B72                                 u4557 17CE  
                               u4477 15AE                                 u4397 1280  
                               u4727 2EB2                                 u4647 2F30  
                               u4567 17F6                                 u4487 1614  
                               u4737 31AE                                 u4657 2F44  
                               u4577 1812                                 u4497 1676  
                               u4747 2AE6                                 u4667 2FC2  
                               u4587 18CC                                 u4757 2AF0  
                               u4677 2FD8                                 u4597 18E8  
                               u4767 2B28                                 u4687 3196  
                               u4777 2B32                                 u4697 3156  
                               _main 0E68             __end_of_interruptHandler 21EA  
                               _mode 0011                                 _keys FE4F  
                               _temp 002D                                 _time 00C0  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                 i2___lwdiv@quotient 003B                                 indf0 000FEF  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 006F                                 _strs FE73  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                    servoRotate180@i 00E6                      __end_ofi2_putch 31CA  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
                        i2_lcdNibble 2BC6                     __end_of_LCD_LEFT FE6E  
                       _total_number 00D1       generate_compartment_array@step 0037  
                              ?_main 0037                                STR_10 FFF5  
                              STR_11 FFF8                                STR_12 FEE8  
                              STR_20 FFF1                                STR_21 FEE8  
                              STR_13 FEE8                                STR_30 FEE8  
                              STR_22 FEE8                                STR_14 FFE5  
                              STR_31 FFE9                                STR_15 FEE8  
                              STR_23 FFFC                                STR_32 FEE8  
                              STR_24 FEE8                                STR_40 FF75  
                              STR_16 FFE9                                STR_25 FFE7  
                              STR_33 FFF1                                STR_17 FEE8  
                              STR_41 FF47                                STR_42 FEE8  
                              STR_34 FEE8                                STR_18 FFED  
                              STR_50 FF0E                                STR_26 FED7  
                              STR_43 FFE7                                STR_27 FFE6  
                              STR_35 FFFC                                STR_19 FEE8  
                              STR_51 FFFA                                STR_60 FF1C  
                              STR_44 FF35                                STR_52 FFD7  
                              STR_36 FEE8                                STR_28 FEE8  
                    __end_of___awmod 2CB6                                STR_45 FFF8  
                              STR_37 FFE7                                STR_29 FFED  
                              STR_53 FFDB                                STR_61 FFA0  
                              STR_62 FF1C                                STR_70 FFDA  
                              STR_54 FFDF                                STR_46 FEE8  
                              STR_38 FF4E                                STR_71 FFDE  
                              STR_55 FF7F                                STR_39 FF75  
                              STR_63 FF53                                STR_47 FEEB  
                              STR_56 FFF5                                STR_72 FFD5  
                              STR_80 FFBC                                STR_64 FF88  
                              STR_48 FF6A                                STR_57 FF1C  
                              STR_65 FFFA                                STR_73 FFD9  
                              STR_81 FFB2                                STR_49 FF3A  
                              STR_66 FFD7                                STR_74 FFDD  
                              STR_82 FFB7                                STR_58 FF5F  
                              STR_67 FFDB                                STR_75 FFB3  
                              STR_59 FFF5                                STR_83 FFAD  
                              STR_68 FFDF                                STR_76 FFBD  
                              STR_84 FFCB                                STR_69 FFD6  
                              STR_77 FFE1                                STR_85 FF99  
                              STR_78 FFC1                                STR_79 FFC6  
                    __end_of___lwdiv 2DD2                      __end_of___lwmod 3074  
                              i2l301 1AD2                                i2l310 1BF0  
                              i2l311 1C32                                i2l303 1B18  
                              i2l312 1C74                                i2l313 1CB6  
                              i2l305 1B5E                                i2l330 2018  
                              i2l314 1CF8                                i2l331 2020  
                              i2l315 1ED4                                i2l307 1BA4  
                              i2l332 202A                                i2l316 1D52  
                              i2l308 1BCA                                i2l333 20EC  
                              i2l325 2052                                i2l309 1F2E  
                              i2l326 2000                                i2l318 1E54  
                              i2l335 213C                                i2l327 208C  
                              i2l319 1ECC                                i2l328 2008  
                              i2l337 2172                                i2l329 2010  
                              i2l602 2D12                                i2l611 2230  
                              i2l612 2284                                i2l613 22E8  
                              i2l293 19F2                                i2l614 235C  
                              i2l615 23E0                                i2l608 2424  
                              i2l560 0074                                i2l640 275C  
                              i2l296 1A2C                                i2l609 21EC  
                              i2l641 268A                                i2l633 2674  
                              i2l297 1A3E                                i2l570 02DE  
                              i2l562 00D6                                i2l634 2684  
                              i2l298 1BD8                                i2l651 27CC  
                              i2l635 2710                                i2l643 26DE  
                              i2l299 1A8C                                i2l580 068A  
                              i2l572 0380                                i2l564 0138  
                              i2l652 2820                                i2l644 26B4  
                              i2l653 27D2                                i2l590 0AFC  
                              i2l582 0778                                i2l574 0434  
                              i2l566 019A                                i2l646 2708  
                              i2l647 2784                                i2l592 0BEC  
                              i2l584 082C                                i2l576 04E8  
                              i2l568 023C                                i2l594 0CDC  
                              i2l586 091C                                i2l578 059C  
                              i2l596 0DA2                                i2l588 0A0C  
                              _PORTB 000F81                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                      __end_of_lcdInst 31B6  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 2EC2                                _check 2CB6  
                     __CFG_EBTRB$OFF 000000                                _angle 00D9  
                    __end_of_dpowers FE6A                                _array FE6A  
                    __end_of_read_IR 2BC6                                _error 00D5  
                              _valid 00D3                                _state 0029  
                              _putch 3186                    _compartment_array 00B0  
                              pclath 000FFA                                tablat 000FF5  
                  _LCDinterruptState 002F                     __end_ofi2___wmul 3146  
                              status 000FD8                                wtemp6 0070  
                    __end_of_strncmp 2AC0                      __end_of_strncpy 2D7E  
                   ??_servoRotate180 00E5                       __CFG_PBADEN$ON 000000  
                   __end_ofi2_printf 2860                   __size_ofi2___lwdiv 0052  
                 __size_ofi2___lwmod 0042                      __initialization 2DD2  
                 __size_ofi2_lcdInst 0014                         __end_of_main 196E  
                       __end_of_keys FE60                           i2printf@ap 004B  
                         i2printf@cp 004D                         __end_of_strs FED7  
                 __size_ofi2_initLCD 004C                       __CFG_OSC$HSPLL 000000  
                  __end_of_LCD_RIGHT FE6F                               ??_main 00FD  
                      __activetblptr 000003                               ?_check 0037  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                    i2lcdNibble@data 0038                               ?_putch 0037  
                    i2lcdNibble@temp 0037                               _INT1IE 007F83  
                             _INT1IF 007F80                               i2l1204 30C4  
                             i2l1060 2E42                               i2l1213 2F62  
                             i2l1205 30C0                               i2l1221 2FFC  
                             i2l1061 2E3A                               i2l1214 2F5A  
                             i2l1222 2FF4                               i2l1070 308A  
                             i2l1207 30DC                               i2l1071 3082  
                             i2l1208 30D4                               i2l1064 2E62  
                             i2l1065 2E6C                               i2l1074 30A2  
                             i2l1227 2AA6                               i2l1075 30AC  
                             i2l1228 2A3C                               i2l1229 2A9E  
                             i2l3444 2A3C                               i2l4380 1E62  
                             i2l4494 219E                               i2l3698 2D08  
                             i2l3798 2788                            ??i2_putch 0039  
                     __CFG_XINST$OFF 000000                               ___wmul 30F8  
                     __CFG_STVREN$ON 000000                            ??___awmod 00E9  
                          ??___lwdiv 00E9                            ??___lwmod 00F0  
                   __end_of_is_valid 0E68                               clear_0 2DF0  
                             clear_1 2DFC                               clear_2 2E08  
                             clear_3 2E14                         ?_motorStop_0 0037  
                    ___awmod@divisor 00E7                               _number 0035  
                    ___awmod@counter 00E9                            ??_lcdInst 00E7  
                             _printf 2456                               _strcat 30B6  
                             _strcmp 2F58                               _strcpy 2FEA  
                          ??_initLCD 00E8                            ??_read_IR 00EA  
                 _compartment_number 0001                         __pdataCOMRAM 006D  
                  __end_ofi2___lwdiv 2E76                         __mediumconst FE4E  
                  __end_ofi2___lwmod 30B6                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                  __end_ofi2_lcdInst 31DE                            ??_strncmp 0043  
                          ??_strncpy 00F1                    __end_ofi2_initLCD 2F0E  
                         __accesstop 0080              __end_of__initialization 2E1A  
                      ___rparam_used 000001                   i2___lwmod@dividend 003E  
                     __pcstackCOMRAM 0037                        __end_of_check 2D1C  
                      __end_of_array FE6D                        __end_of_putch 319E  
                        i2printf@val 004F                            ?i2___wmul 0037  
                 __size_of_lcdNibble 0084                          i2putch@data 0039  
                          ?i2_printf 0043                              ??_check 0039  
                            ??_putch 00E7                           __pbssBANK0 0080  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                  ?_interruptHandler 0037                   ??_interruptHandler 0052  
                       ?i2_lcdNibble 0037                              ?___wmul 00E5  
                            ?_printf 00F1                              ?_strcat 0037  
                            ?_strcmp 0037                              ?_strcpy 003D  
                         ??i2___wmul 003B                         read_IR@input 00EC  
                         ??i2_printf 0047                 lcd@LCDinterruptState 002E  
                            _B_array 00A0                              _B_count 0019  
                            i2_putch 31B6                            ?_is_valid 0037  
                            _N_array 0090                              _N_count 0015  
                  __end_of_lcdNibble 2B44                              _S_array 0100  
                            _S_count 0017                              __Hparam 0000  
                            __Lparam 0000                              _W_array 0080  
                            _W_count 0013                              ___awmod 2C44  
                    __size_of___wmul 0028                              ___lwdiv 2D7E  
                            ___lwmod 3030             interruptHandler@keypress 006B  
                            __pcinit 2DD2                              __ramtop 1000  
                         _initialize 2860                              _lcdInst 319E  
                            __ptext0 0E68                              __ptext1 299A  
                            __ptext2 2D1C                              __ptext3 30F8  
                            __ptext4 2B44                              __ptext5 2F0E  
                            __ptext6 2FA2                              __ptext7 2456  
                            __ptext8 3186                              __ptext9 3030  
                    __size_of_printf 0214                      __size_of_strcat 0042  
                    __size_of_strcmp 004A                      __size_of_strcpy 0046  
                            _initLCD 2E76                              _counter 00D7  
               __size_of_motorStop_0 0020                              _dpowers FE60  
                            _read_IR 2B44                     ___awmod@dividend 00E5  
                      ?_motorStart_0 0037                            _LCD_RIGHT FE6E  
                            _strncmp 2A3A                       __pintcode_body 196E  
                            _strncpy 2D1C                 end_of_initialization 2E1A  
              __end_of_LCD_SIZE_HORZ FE71                __end_of_LCD_SIZE_VERT FE70  
       ??_generate_compartment_array 0039                         _final_number 0120  
                            int_func 196E                  i2___wmul@multiplier 0037  
                         ??_is_valid 003D                       _operation_time 00C9  
                      ?_servoRotate0 0037                              printf@c 0188  
                            printf@f 00F1                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                            strcmp@r 003C                            _PORTAbits 000F80  
                         _prev_state 0023                       ??_motorStart_0 00E5  
__size_of_generate_compartment_array 026C                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                         _white_tape 006D                    i2___lwdiv@divisor 0039  
                          i2___lwdiv 2E24                            i2___lwmod 3074  
                  i2___lwdiv@counter 003D                            i2_lcdInst 31CA  
                          i2_initLCD 2EC2                       ??_servoRotate0 00E5  
                         _store_prev 299A                       __end_of___wmul 3120  
               __size_ofi2_lcdNibble 007E              __size_of_servoRotate180 004A  
                      __pidataCOMRAM 31DE                          ?_initialize 0037  
                      i2lcdInst@data 0039                     i2___wmul@product 003B  
                     __end_of_printf 266A                       __end_of_strcat 30F8  
                     __end_of_strcmp 2FA2                         i2printf@flag 0049  
                     __end_of_strcpy 3030                         i2printf@prec 004A  
                start_initialization 2DD2                    __size_ofi2___wmul 0026  
                          i2printf@c 0051                            i2printf@f 0043  
                         ?i2___lwdiv 0037                           ?i2___lwmod 003E  
                  __size_ofi2_printf 01F6                           ?i2_lcdInst 0037  
                       _counter_test 00C7                         _counter_step 0025  
                         ?i2_initLCD 0037                    interruptHandler@i 0069  
                           ??___wmul 00E9                     __CFG_LPT1OSC$OFF 000000  
                           ??_printf 00FB            __size_of_interruptHandler 21E2  
                           ??_strcat 003B                             ??_strcmp 003B  
                           ??_strcpy 0041                          __pbssCOMRAM 0001  
                        _change_mode 00CF                        __pcstackBANK0 00E5  
                      __pcstackBANK1 0180                    i2___lwmod@divisor 0040  
                  i2___lwmod@counter 0042   __end_of_generate_compartment_array 2456  
         _generate_compartment_array 21EA                             ?i2_putch 0037  
                __size_of_initialize 013A                         _current_set2 0030  
               __end_of_motorStart_0 3186                    __size_of_is_valid 0E56  
                   ___lwdiv@dividend 00E5                    __CFG_CCP2MX$PORTC 000000  
                        ?_store_prev 0037                            __pintcode 0008  
                      __pmediumconst FE4E                            _lcdNibble 2AC0  
                           ?___awmod 00E5                             ?___lwdiv 00E5  
                           ?___lwmod 00EC                            _final_set 0158  
                           ?_lcdInst 0037                             ?_initLCD 0037  
                           ?_read_IR 00E8                 __end_of_servoRotate0 2FEA  
                     __size_of_check 0066                     ___lwdiv@quotient 00EA  
                           ?_strncmp 003D                          store_prev@i 00F3  
                           ?_strncpy 00EB                          ??i2___lwdiv 003B  
                        ??i2___lwmod 0042                       __size_of_putch 0018  
                           _LCD_LEFT FE6D                          ??i2_lcdInst 0039  
                     ___wmul@product 00E9                             _LATCbits 000F8B  
                           _LATDbits 000F8C                          ??i2_initLCD 003A  
                        strncpy@from 00ED                          strncpy@size 00EF  
                           i2u201_40 2F96                             i2u212_40 2E46  
                           i2u215_40 308E                             i2u241_40 2A6A  
                           i2u236_40 3026                             i2u236_47 301C  
                           i2u341_40 1D50                             i2u263_40 2CC6  
                           i2u343_40 1E62                             i2u264_40 2CD6  
                           i2u265_40 2CE6                             i2u345_40 1EE6  
                           i2u266_40 2CF6                             i2u194_45 2C00  
                           i2u194_46 2C02                             i2u267_40 2D08  
                           i2u283_40 27BA                             i2u195_45 2C40  
                           i2u195_46 2C42                             i2u276_40 26D6  
                           i2u276_47 26CC                             i2u285_40 2828  
                           i2u277_40 2700                             i2u277_47 26F6  
                           i2u286_40 2856                             i2u286_47 284C  
                           i2u279_40 273E                             i2u279_47 2734  
                          _operation 00CB                             i2u480_47 1D22  
                           i2u481_47 1DFA                             i2u490_47 2EC8  
                           i2u482_47 1E3A                             i2u491_47 2EFC  
                           i2u483_47 1EAE                             i2u492_47 31D6  
                           i2u484_47 1F00                             i2u493_47 2BE8  
                           i2u485_47 1F70                             i2u494_47 2BF2  
                           i2u486_47 2044                             i2u478_47 1A1A  
                           i2u495_47 2C28                             i2u487_47 20AC  
                           i2u479_47 1BBE                             i2u496_47 2C32  
                           i2u488_47 20CC                             i2u489_47 31C2  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0037  
                     _servoRotate180 2F0E                        ??_motorStop_0 00E5  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 00E5  
                           i2___wmul 3120                        lcdNibble@data 00E6  
                         printf@flag 0180                        lcdNibble@temp 00E5  
                         printf@prec 0181                             i2_printf 266A  
                     _LCD_HORZ_LIMIT FE72                  __size_of_store_prev 00A0  
               interruptHandler@temp 006C                     __size_ofi2_putch 0014  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000               __end_of_servoRotate180 2F58  
                   __size_of___awmod 0072                i2___wmul@multiplicand 0039  
                      _motor_counter 00CD                     __size_of___lwdiv 0054  
                   __size_of___lwmod 0044                         ??_initialize 00E5  
                   _interruptHandler 0008                     __size_of_lcdInst 0018  
                   __size_of_initLCD 004C                          _current_set 00E0  
                         strcat@from 0039               __end_of_LCD_HORZ_LIMIT FE73  
                   __size_of_read_IR 0082                  __end_of_motorStop_0 3166  
                    ___lwdiv@divisor 00E7                      ___lwdiv@counter 00E9  
                           __ptext10 2D7E                             __ptext11 3146  
                           __ptext20 31B6                             __ptext12 3166  
                           __ptext21 3074                             __ptext13 2860  
                           __ptext30 3120                             __ptext22 2E24  
                           __ptext14 2E76                             __ptext31 2F58  
                           __ptext23 2EC2                             __ptext15 319E  
                           __ptext32 21EA                             __ptext24 31CA  
                           __ptext16 2AC0                             __ptext33 2CB6  
                           __ptext25 2BC6                             __ptext17 2C44  
                           __ptext26 2A3A                             __ptext27 2FEA  
                           __ptext19 266A                             __ptext28 30B6  
                           __ptext29 0012                             _fastener 0200  
                     _LCD_VERT_LIMIT FE71                     __size_of_strncmp 0086  
                   __size_of_strncpy 0062                           strcpy@from 003F  
              __size_of_motorStart_0 0020                        __size_of_main 0B06  
                           _is_valid 0012                           strncmp@len 0041  
                 __end_of_initialize 299A                             _temp_set 00DB  
                      ??i2_lcdNibble 0037                          ??_lcdNibble 00E5  
                           _prev_set 0130                      ?_servoRotate180 0037  
                           int$flags 006F                            printf@val 0186  
              __size_of_servoRotate0 0048                            putch@data 00E7  
                         _INTCONbits 000FF2                         _motorStart_0 3166  
             __end_of_LCD_VERT_LIMIT FE72                             intlevel2 0000  
        ?_generate_compartment_array 0037                        _LCD_SIZE_HORZ FE70  
                   ___lwmod@dividend 00EC                        _LCD_SIZE_VERT FE6F  
                          strncmp@s1 003D                            strncmp@s2 003F  
                          strncpy@cp 00F1                            strncpy@to 00EB  
                       ??_store_prev 00F3                         _servoRotate0 2FA2  
                           printf@ap 0182                             printf@cp 0184  
                        lcdInst@data 00E7                          _motorStop_0 3146  
                __end_ofi2_lcdNibble 2C44                             strcat@cp 003B  
                           strcat@to 0037                             strcmp@s1 0037  
                           strcmp@s2 0039                      ___lwmod@divisor 00EE  
                           strcpy@cp 0041                             strcpy@to 003D  
                    ___lwmod@counter 00F0                          _prev_number 0110  
                 __end_of_store_prev 2A3A  
