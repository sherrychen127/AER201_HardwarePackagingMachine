

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 14:19:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           ; Version 1.45
    73                           ; Generated 16/11/2017 GMT
    74                           ; 
    75                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F4620 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataBANK0
   108  004890                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _close_handle
   112  004890  0E                 	db	14
   113                           
   114                           ;initializer for _servo_ramp
   115  004891  0D                 	db	13
   116                           
   117                           ;initializer for _motorStop_3
   118  004892  0C                 	db	12
   119                           
   120                           ;initializer for _motorStart_3
   121  004893  0B                 	db	11
   122                           
   123                           ;initializer for _motorStop_2
   124  004894  0A                 	db	10
   125                           
   126                           ;initializer for _motorStart_2
   127  004895  39                 	db	57
   128                           
   129                           ;initializer for _motorStop_1
   130  004896  38                 	db	56
   131                           
   132                           ;initializer for _motorStart_1
   133  004897  37                 	db	55
   134                           
   135                           ;initializer for _motorStop_0
   136  004898  36                 	db	54
   137                           
   138                           ;initializer for _motorStart_0
   139  004899  35                 	db	53
   140                           
   141                           ;initializer for _S_dispense
   142  00489A  34                 	db	52
   143                           
   144                           ;initializer for _N_dispense
   145  00489B  33                 	db	51
   146                           
   147                           ;initializer for _B_dispense
   148  00489C  32                 	db	50
   149                           
   150                           ;initializer for _rotate_1compartment
   151  00489D  31                 	db	49
   152                           
   153                           ;initializer for _rotate_gear
   154  00489E  30                 	db	48
   155                           
   156                           	psect	idataBANK1
   157  00489F                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _W_max
   161  00489F  0004               	dw	4
   162                           
   163                           ;initializer for _S_max
   164  0048A1  0004               	dw	4
   165                           
   166                           ;initializer for _N_max
   167  0048A3  0004               	dw	4
   168                           
   169                           ;initializer for _B_max
   170  0048A5  0004               	dw	4
   171                           
   172                           ;initializer for _init_position
   173  0048A7  0005               	dw	5
   174                           
   175                           	psect	mediumconst
   176  00FC92                     __pmediumconst:
   177                           	opt stack 0
   178  00FC92  00                 	db	0
   179  00FC93                     _keys:
   180                           	opt stack 0
   181  00FC93  31                 	db	49
   182  00FC94  32                 	db	50
   183  00FC95  33                 	db	51
   184  00FC96  41                 	db	65
   185  00FC97  34                 	db	52
   186  00FC98  35                 	db	53
   187  00FC99  36                 	db	54
   188  00FC9A  42                 	db	66
   189  00FC9B  37                 	db	55
   190  00FC9C  38                 	db	56
   191  00FC9D  39                 	db	57
   192  00FC9E  43                 	db	67
   193  00FC9F  2A                 	db	42
   194  00FCA0  30                 	db	48
   195  00FCA1  23                 	db	35
   196  00FCA2  44                 	db	68
   197  00FCA3  00                 	db	0
   198  00FCA4                     __end_of_keys:
   199                           	opt stack 0
   200  00FCA4                     _dpowers:
   201                           	opt stack 0
   202  00FCA4  0001               	dw	1
   203  00FCA6  000A               	dw	10
   204  00FCA8  0064               	dw	100
   205  00FCAA  03E8               	dw	1000
   206  00FCAC  2710               	dw	10000
   207  00FCAE                     __end_of_dpowers:
   208                           	opt stack 0
   209  00FCAE                     _hexpowers:
   210                           	opt stack 0
   211  00FCAE  0001               	dw	1
   212  00FCB0  0010               	dw	16
   213  00FCB2  0100               	dw	256
   214  00FCB4  1000               	dw	4096
   215  00FCB6                     __end_of_hexpowers:
   216                           	opt stack 0
   217  00FCB6                     _happynewyear:
   218                           	opt stack 0
   219  00FCB6  45                 	db	69
   220  00FCB7  14                 	db	20
   221  00FCB8  14                 	db	20
   222  00FCB9  00                 	db	0
   223  00FCBA  11                 	db	17
   224  00FCBB  03                 	db	3
   225  00FCBC  18                 	db	24
   226  00FCBD                     __end_of_happynewyear:
   227                           	opt stack 0
   228  00FCBD                     _array:
   229                           	opt stack 0
   230  00FCBD  30                 	db	48
   231  00FCBE  31                 	db	49
   232  00FCBF  00                 	db	0
   233  00FCC0                     __end_of_array:
   234                           	opt stack 0
   235  00FCC0                     _LCD_LEFT:
   236                           	opt stack 0
   237  00FCC0  00                 	db	0
   238  00FCC1                     __end_of_LCD_LEFT:
   239                           	opt stack 0
   240  00FCC1                     _LCD_RIGHT:
   241                           	opt stack 0
   242  00FCC1  01                 	db	1
   243  00FCC2                     __end_of_LCD_RIGHT:
   244                           	opt stack 0
   245  00FCC2                     _LCD_SIZE_VERT:
   246                           	opt stack 0
   247  00FCC2  02                 	db	2
   248  00FCC3                     __end_of_LCD_SIZE_VERT:
   249                           	opt stack 0
   250  00FCC3                     _LCD_SIZE_HORZ:
   251                           	opt stack 0
   252  00FCC3  10                 	db	16
   253  00FCC4                     __end_of_LCD_SIZE_HORZ:
   254                           	opt stack 0
   255  00FCC4                     _LCD_VERT_LIMIT:
   256                           	opt stack 0
   257  00FCC4  02                 	db	2
   258  00FCC5                     __end_of_LCD_VERT_LIMIT:
   259                           	opt stack 0
   260  00FCC5                     _LCD_HORZ_LIMIT:
   261                           	opt stack 0
   262  00FCC5  28                 	db	40
   263  00FCC6                     __end_of_LCD_HORZ_LIMIT:
   264                           	opt stack 0
   265  00FCC6                     _strs:
   266                           	opt stack 0
   267  00FCC6  42                 	db	66
   268  00FCC7  00                 	db	0
   269  00FCC8  00                 	db	0
   270  00FCC9  00                 	db	0
   271  00FCCA  00                 	db	0
   272  00FCCB  4E                 	db	78
   273  00FCCC  00                 	db	0
   274  00FCCD  00                 	db	0
   275  00FCCE  00                 	db	0
   276  00FCCF  00                 	db	0
   277  00FCD0  53                 	db	83
   278  00FCD1  00                 	db	0
   279  00FCD2  00                 	db	0
   280  00FCD3  00                 	db	0
   281  00FCD4  00                 	db	0
   282  00FCD5  57                 	db	87
   283  00FCD6  00                 	db	0
   284  00FCD7  00                 	db	0
   285  00FCD8  00                 	db	0
   286  00FCD9  00                 	db	0
   287  00FCDA  42                 	db	66
   288  00FCDB  4E                 	db	78
   289  00FCDC  00                 	db	0
   290  00FCDD  00                 	db	0
   291  00FCDE  00                 	db	0
   292  00FCDF  42                 	db	66
   293  00FCE0  53                 	db	83
   294  00FCE1  00                 	db	0
   295  00FCE2  00                 	db	0
   296  00FCE3  00                 	db	0
   297  00FCE4  42                 	db	66
   298  00FCE5  57                 	db	87
   299  00FCE6  00                 	db	0
   300  00FCE7  00                 	db	0
   301  00FCE8  00                 	db	0
   302  00FCE9  42                 	db	66
   303  00FCEA  42                 	db	66
   304  00FCEB  4E                 	db	78
   305  00FCEC  00                 	db	0
   306  00FCED  00                 	db	0
   307  00FCEE  42                 	db	66
   308  00FCEF  42                 	db	66
   309  00FCF0  53                 	db	83
   310  00FCF1  00                 	db	0
   311  00FCF2  00                 	db	0
   312  00FCF3  42                 	db	66
   313  00FCF4  42                 	db	66
   314  00FCF5  57                 	db	87
   315  00FCF6  00                 	db	0
   316  00FCF7  00                 	db	0
   317  00FCF8  42                 	db	66
   318  00FCF9  4E                 	db	78
   319  00FCFA  57                 	db	87
   320  00FCFB  00                 	db	0
   321  00FCFC  00                 	db	0
   322  00FCFD  42                 	db	66
   323  00FCFE  53                 	db	83
   324  00FCFF  57                 	db	87
   325  00FD00  00                 	db	0
   326  00FD01  00                 	db	0
   327  00FD02  42                 	db	66
   328  00FD03  57                 	db	87
   329  00FD04  57                 	db	87
   330  00FD05  00                 	db	0
   331  00FD06  00                 	db	0
   332  00FD07  42                 	db	66
   333  00FD08  4E                 	db	78
   334  00FD09  57                 	db	87
   335  00FD0A  57                 	db	87
   336  00FD0B  00                 	db	0
   337  00FD0C  42                 	db	66
   338  00FD0D  53                 	db	83
   339  00FD0E  57                 	db	87
   340  00FD0F  57                 	db	87
   341  00FD10  00                 	db	0
   342  00FD11  42                 	db	66
   343  00FD12  42                 	db	66
   344  00FD13  53                 	db	83
   345  00FD14  57                 	db	87
   346  00FD15  00                 	db	0
   347  00FD16  42                 	db	66
   348  00FD17  42                 	db	66
   349  00FD18  4E                 	db	78
   350  00FD19  57                 	db	87
   351  00FD1A  00                 	db	0
   352  00FD1B  42                 	db	66
   353  00FD1C  4E                 	db	78
   354  00FD1D  4E                 	db	78
   355  00FD1E  57                 	db	87
   356  00FD1F  00                 	db	0
   357  00FD20  42                 	db	66
   358  00FD21  4E                 	db	78
   359  00FD22  4E                 	db	78
   360  00FD23  4E                 	db	78
   361  00FD24  00                 	db	0
   362  00FD25  42                 	db	66
   363  00FD26  57                 	db	87
   364  00FD27  57                 	db	87
   365  00FD28  57                 	db	87
   366  00FD29  00                 	db	0
   367  00FD2A                     __end_of_strs:
   368                           	opt stack 0
   369  0000                     _SSPBUF	set	4041
   370  0000                     _SSPCON2bits	set	4037
   371  0000                     _SSPADD	set	4040
   372  0000                     _SSPCON2	set	4037
   373  0000                     _SSPCON1	set	4038
   374  0000                     _SSPSTAT	set	4039
   375  0000                     _TRISCbits	set	3988
   376  0000                     _SSPCON1bits	set	4038
   377  0000                     _PORTAbits	set	3968
   378  0000                     _TRISAbits	set	3986
   379  0000                     _TRISDbits	set	3989
   380  0000                     _ADRESL	set	4035
   381  0000                     _ADRESH	set	4036
   382  0000                     _ADCON0bits	set	4034
   383  0000                     _PORTB	set	3969
   384  0000                     _ADCON1	set	4033
   385  0000                     _ADCON0	set	4034
   386  0000                     _TRISE	set	3990
   387  0000                     _TRISD	set	3989
   388  0000                     _TRISC	set	3988
   389  0000                     _TRISB	set	3987
   390  0000                     _TRISA	set	3986
   391  0000                     _LATE	set	3981
   392  0000                     _LATC	set	3979
   393  0000                     _LATB	set	3978
   394  0000                     _LATA	set	3977
   395  0000                     _INTCONbits	set	4082
   396  0000                     _LATD	set	3980
   397  0000                     _LATDbits	set	3980
   398  0000                     _ADON	set	32272
   399  0000                     _INT1IF	set	32640
   400  0000                     _INT1IE	set	32643
   401  00FD2A                     STR_30:
   402  00FD2A  73                 	db	115	;'s'
   403  00FD2B  70                 	db	112	;'p'
   404  00FD2C  61                 	db	97	;'a'
   405  00FD2D  63                 	db	99	;'c'
   406  00FD2E  65                 	db	101	;'e'
   407  00FD2F  72                 	db	114	;'r'
   408  00FD30  73                 	db	115	;'s'
   409  00FD31  20                 	db	32
   410  00FD32  64                 	db	100	;'d'
   411  00FD33  69                 	db	105	;'i'
   412  00FD34  73                 	db	115	;'s'
   413  00FD35  70                 	db	112	;'p'
   414  00FD36  65                 	db	101	;'e'
   415  00FD37  6E                 	db	110	;'n'
   416  00FD38  73                 	db	115	;'s'
   417  00FD39  65                 	db	101	;'e'
   418  00FD3A  64                 	db	100	;'d'
   419  00FD3B  3A                 	db	58	;':'
   420  00FD3C  25                 	db	37
   421  00FD3D  64                 	db	100	;'d'
   422  00FD3E  00                 	db	0
   423  00FD3F                     STR_33:
   424  00FD3F  57                 	db	87	;'W'
   425  00FD40  61                 	db	97	;'a'
   426  00FD41  73                 	db	115	;'s'
   427  00FD42  68                 	db	104	;'h'
   428  00FD43  65                 	db	101	;'e'
   429  00FD44  72                 	db	114	;'r'
   430  00FD45  20                 	db	32
   431  00FD46  64                 	db	100	;'d'
   432  00FD47  69                 	db	105	;'i'
   433  00FD48  73                 	db	115	;'s'
   434  00FD49  70                 	db	112	;'p'
   435  00FD4A  65                 	db	101	;'e'
   436  00FD4B  6E                 	db	110	;'n'
   437  00FD4C  73                 	db	115	;'s'
   438  00FD4D  65                 	db	101	;'e'
   439  00FD4E  64                 	db	100	;'d'
   440  00FD4F  3A                 	db	58	;':'
   441  00FD50  25                 	db	37
   442  00FD51  64                 	db	100	;'d'
   443  00FD52  00                 	db	0
   444  00FD53                     STR_59:
   445  00FD53  43                 	db	67	;'C'
   446  00FD54  25                 	db	37
   447  00FD55  64                 	db	100	;'d'
   448  00FD56  3A                 	db	58	;':'
   449  00FD57  42                 	db	66	;'B'
   450  00FD58  25                 	db	37
   451  00FD59  64                 	db	100	;'d'
   452  00FD5A  2C                 	db	44
   453  00FD5B  4E                 	db	78	;'N'
   454  00FD5C  25                 	db	37
   455  00FD5D  64                 	db	100	;'d'
   456  00FD5E  2C                 	db	44
   457  00FD5F  53                 	db	83	;'S'
   458  00FD60  25                 	db	37
   459  00FD61  64                 	db	100	;'d'
   460  00FD62  2C                 	db	44
   461  00FD63  57                 	db	87	;'W'
   462  00FD64  25                 	db	37
   463  00FD65  64                 	db	100	;'d'
   464  00FD66  00                 	db	0
   465  00FD67                     STR_24:
   466  00FD67  62                 	db	98	;'b'
   467  00FD68  6F                 	db	111	;'o'
   468  00FD69  6C                 	db	108	;'l'
   469  00FD6A  74                 	db	116	;'t'
   470  00FD6B  73                 	db	115	;'s'
   471  00FD6C  20                 	db	32
   472  00FD6D  64                 	db	100	;'d'
   473  00FD6E  69                 	db	105	;'i'
   474  00FD6F  73                 	db	115	;'s'
   475  00FD70  70                 	db	112	;'p'
   476  00FD71  65                 	db	101	;'e'
   477  00FD72  6E                 	db	110	;'n'
   478  00FD73  73                 	db	115	;'s'
   479  00FD74  65                 	db	101	;'e'
   480  00FD75  64                 	db	100	;'d'
   481  00FD76  3A                 	db	58	;':'
   482  00FD77  25                 	db	37
   483  00FD78  64                 	db	100	;'d'
   484  00FD79  00                 	db	0
   485  00FD7A                     STR_50:
   486  00FD7A  20                 	db	32
   487  00FD7B  32                 	db	50	;'2'
   488  00FD7C  3A                 	db	58	;':'
   489  00FD7D  20                 	db	32
   490  00FD7E  4F                 	db	79	;'O'
   491  00FD7F  70                 	db	112	;'p'
   492  00FD80  65                 	db	101	;'e'
   493  00FD81  72                 	db	114	;'r'
   494  00FD82  61                 	db	97	;'a'
   495  00FD83  74                 	db	116	;'t'
   496  00FD84  69                 	db	105	;'i'
   497  00FD85  6F                 	db	111	;'o'
   498  00FD86  6E                 	db	110	;'n'
   499  00FD87  20                 	db	32
   500  00FD88  54                 	db	84	;'T'
   501  00FD89  69                 	db	105	;'i'
   502  00FD8A  6D                 	db	109	;'m'
   503  00FD8B  65                 	db	101	;'e'
   504  00FD8C  00                 	db	0
   505  00FD8D                     STR_27:
   506  00FD8D  6E                 	db	110	;'n'
   507  00FD8E  75                 	db	117	;'u'
   508  00FD8F  74                 	db	116	;'t'
   509  00FD90  73                 	db	115	;'s'
   510  00FD91  20                 	db	32
   511  00FD92  64                 	db	100	;'d'
   512  00FD93  69                 	db	105	;'i'
   513  00FD94  73                 	db	115	;'s'
   514  00FD95  70                 	db	112	;'p'
   515  00FD96  65                 	db	101	;'e'
   516  00FD97  6E                 	db	110	;'n'
   517  00FD98  73                 	db	115	;'s'
   518  00FD99  65                 	db	101	;'e'
   519  00FD9A  64                 	db	100	;'d'
   520  00FD9B  3A                 	db	58	;':'
   521  00FD9C  25                 	db	37
   522  00FD9D  64                 	db	100	;'d'
   523  00FD9E  00                 	db	0
   524  00FD9F                     STR_108:
   525  00FD9F  30                 	db	48	;'0'
   526  00FDA0  31                 	db	49	;'1'
   527  00FDA1  32                 	db	50	;'2'
   528  00FDA2  33                 	db	51	;'3'
   529  00FDA3  34                 	db	52	;'4'
   530  00FDA4  35                 	db	53	;'5'
   531  00FDA5  36                 	db	54	;'6'
   532  00FDA6  37                 	db	55	;'7'
   533  00FDA7  38                 	db	56	;'8'
   534  00FDA8  39                 	db	57	;'9'
   535  00FDA9  61                 	db	97	;'a'
   536  00FDAA  62                 	db	98	;'b'
   537  00FDAB  63                 	db	99	;'c'
   538  00FDAC  64                 	db	100	;'d'
   539  00FDAD  65                 	db	101	;'e'
   540  00FDAE  66                 	db	102	;'f'
   541  00FDAF  00                 	db	0
   542  00FDB0                     STR_46:
   543  00FDB0  53                 	db	83	;'S'
   544  00FDB1  70                 	db	112	;'p'
   545  00FDB2  61                 	db	97	;'a'
   546  00FDB3  63                 	db	99	;'c'
   547  00FDB4  65                 	db	101	;'e'
   548  00FDB5  72                 	db	114	;'r'
   549  00FDB6  5F                 	db	95	;'_'
   550  00FDB7  72                 	db	114	;'r'
   551  00FDB8  65                 	db	101	;'e'
   552  00FDB9  6D                 	db	109	;'m'
   553  00FDBA  61                 	db	97	;'a'
   554  00FDBB  69                 	db	105	;'i'
   555  00FDBC  6E                 	db	110	;'n'
   556  00FDBD  3A                 	db	58	;':'
   557  00FDBE  25                 	db	37
   558  00FDBF  64                 	db	100	;'d'
   559  00FDC0  00                 	db	0
   560  00FDC1                     STR_47:
   561  00FDC1  57                 	db	87	;'W'
   562  00FDC2  61                 	db	97	;'a'
   563  00FDC3  73                 	db	115	;'s'
   564  00FDC4  68                 	db	104	;'h'
   565  00FDC5  65                 	db	101	;'e'
   566  00FDC6  72                 	db	114	;'r'
   567  00FDC7  5F                 	db	95	;'_'
   568  00FDC8  72                 	db	114	;'r'
   569  00FDC9  65                 	db	101	;'e'
   570  00FDCA  6D                 	db	109	;'m'
   571  00FDCB  61                 	db	97	;'a'
   572  00FDCC  69                 	db	105	;'i'
   573  00FDCD  6E                 	db	110	;'n'
   574  00FDCE  3A                 	db	58	;':'
   575  00FDCF  25                 	db	37
   576  00FDD0  64                 	db	100	;'d'
   577  00FDD1  00                 	db	0
   578  00FDD2                     STR_8:
   579  00FDD2  61                 	db	97	;'a'
   580  00FDD3  73                 	db	115	;'s'
   581  00FDD4  73                 	db	115	;'s'
   582  00FDD5  65                 	db	101	;'e'
   583  00FDD6  6D                 	db	109	;'m'
   584  00FDD7  62                 	db	98	;'b'
   585  00FDD8  6C                 	db	108	;'l'
   586  00FDD9  79                 	db	121	;'y'
   587  00FDDA  20                 	db	32
   588  00FDDB  73                 	db	115	;'s'
   589  00FDDC  74                 	db	116	;'t'
   590  00FDDD  65                 	db	101	;'e'
   591  00FDDE  70                 	db	112	;'p'
   592  00FDDF  3A                 	db	58	;':'
   593  00FDE0  25                 	db	37
   594  00FDE1  64                 	db	100	;'d'
   595  00FDE2  00                 	db	0
   596  00FDE3                     STR_49:
   597  00FDE3  31                 	db	49	;'1'
   598  00FDE4  3A                 	db	58	;':'
   599  00FDE5  20                 	db	32
   600  00FDE6  44                 	db	68	;'D'
   601  00FDE7  61                 	db	97	;'a'
   602  00FDE8  74                 	db	116	;'t'
   603  00FDE9  65                 	db	101	;'e'
   604  00FDEA  20                 	db	32
   605  00FDEB  61                 	db	97	;'a'
   606  00FDEC  6E                 	db	110	;'n'
   607  00FDED  64                 	db	100	;'d'
   608  00FDEE  20                 	db	32
   609  00FDEF  54                 	db	84	;'T'
   610  00FDF0  69                 	db	105	;'i'
   611  00FDF1  6D                 	db	109	;'m'
   612  00FDF2  65                 	db	101	;'e'
   613  00FDF3  00                 	db	0
   614  00FDF4                     STR_56:
   615  00FDF4  6F                 	db	111	;'o'
   616  00FDF5  70                 	db	112	;'p'
   617  00FDF6  65                 	db	101	;'e'
   618  00FDF7  72                 	db	114	;'r'
   619  00FDF8  61                 	db	97	;'a'
   620  00FDF9  74                 	db	116	;'t'
   621  00FDFA  69                 	db	105	;'i'
   622  00FDFB  6F                 	db	111	;'o'
   623  00FDFC  6E                 	db	110	;'n'
   624  00FDFD  20                 	db	32
   625  00FDFE  74                 	db	116	;'t'
   626  00FDFF  69                 	db	105	;'i'
   627  00FE00  6D                 	db	109	;'m'
   628  00FE01  65                 	db	101	;'e'
   629  00FE02  3A                 	db	58	;':'
   630  00FE03  00                 	db	0
   631  00FE04                     STR_1:
   632  00FE04  31                 	db	49	;'1'
   633  00FE05  3A                 	db	58	;':'
   634  00FE06  64                 	db	100	;'d'
   635  00FE07  61                 	db	97	;'a'
   636  00FE08  74                 	db	116	;'t'
   637  00FE09  65                 	db	101	;'e'
   638  00FE0A  20                 	db	32
   639  00FE0B  61                 	db	97	;'a'
   640  00FE0C  6E                 	db	110	;'n'
   641  00FE0D  64                 	db	100	;'d'
   642  00FE0E  20                 	db	32
   643  00FE0F  74                 	db	116	;'t'
   644  00FE10  69                 	db	105	;'i'
   645  00FE11  6D                 	db	109	;'m'
   646  00FE12  65                 	db	101	;'e'
   647  00FE13  00                 	db	0
   648  00FE14                     STR_16:
   649  00FE14  73                 	db	115	;'s'
   650  00FE15  74                 	db	116	;'t'
   651  00FE16  61                 	db	97	;'a'
   652  00FE17  72                 	db	114	;'r'
   653  00FE18  74                 	db	116	;'t'
   654  00FE19  20                 	db	32
   655  00FE1A  6F                 	db	111	;'o'
   656  00FE1B  70                 	db	112	;'p'
   657  00FE1C  65                 	db	101	;'e'
   658  00FE1D  72                 	db	114	;'r'
   659  00FE1E  61                 	db	97	;'a'
   660  00FE1F  74                 	db	116	;'t'
   661  00FE20  69                 	db	105	;'i'
   662  00FE21  6F                 	db	111	;'o'
   663  00FE22  6E                 	db	110	;'n'
   664  00FE23  00                 	db	0
   665  00FE24                     STR_71:
   666  00FE24  57                 	db	87	;'W'
   667  00FE25  72                 	db	114	;'r'
   668  00FE26  6F                 	db	111	;'o'
   669  00FE27  6E                 	db	110	;'n'
   670  00FE28  67                 	db	103	;'g'
   671  00FE29  20                 	db	32
   672  00FE2A  6E                 	db	110	;'n'
   673  00FE2B  75                 	db	117	;'u'
   674  00FE2C  6D                 	db	109	;'m'
   675  00FE2D  62                 	db	98	;'b'
   676  00FE2E  65                 	db	101	;'e'
   677  00FE2F  72                 	db	114	;'r'
   678  00FE30  21                 	db	33
   679  00FE31  20                 	db	32
   680  00FE32  00                 	db	0
   681  00FE33                     STR_3:
   682  00FE33  61                 	db	97	;'a'
   683  00FE34  73                 	db	115	;'s'
   684  00FE35  73                 	db	115	;'s'
   685  00FE36  65                 	db	101	;'e'
   686  00FE37  6D                 	db	109	;'m'
   687  00FE38  62                 	db	98	;'b'
   688  00FE39  6C                 	db	108	;'l'
   689  00FE3A  79                 	db	121	;'y'
   690  00FE3B  20                 	db	32
   691  00FE3C  73                 	db	115	;'s'
   692  00FE3D  74                 	db	116	;'t'
   693  00FE3E  65                 	db	101	;'e'
   694  00FE3F  70                 	db	112	;'p'
   695  00FE40  3A                 	db	58	;':'
   696  00FE41  00                 	db	0
   697  00FE42                     STR_60:
   698  00FE42  42                 	db	66	;'B'
   699  00FE43  20                 	db	32
   700  00FE44  64                 	db	100	;'d'
   701  00FE45  69                 	db	105	;'i'
   702  00FE46  73                 	db	115	;'s'
   703  00FE47  70                 	db	112	;'p'
   704  00FE48  65                 	db	101	;'e'
   705  00FE49  6E                 	db	110	;'n'
   706  00FE4A  73                 	db	115	;'s'
   707  00FE4B  65                 	db	101	;'e'
   708  00FE4C  64                 	db	100	;'d'
   709  00FE4D  3A                 	db	58	;':'
   710  00FE4E  25                 	db	37
   711  00FE4F  64                 	db	100	;'d'
   712  00FE50  00                 	db	0
   713  00FE51                     STR_61:
   714  00FE51  4E                 	db	78	;'N'
   715  00FE52  20                 	db	32
   716  00FE53  64                 	db	100	;'d'
   717  00FE54  69                 	db	105	;'i'
   718  00FE55  73                 	db	115	;'s'
   719  00FE56  70                 	db	112	;'p'
   720  00FE57  65                 	db	101	;'e'
   721  00FE58  6E                 	db	110	;'n'
   722  00FE59  73                 	db	115	;'s'
   723  00FE5A  65                 	db	101	;'e'
   724  00FE5B  64                 	db	100	;'d'
   725  00FE5C  3A                 	db	58	;':'
   726  00FE5D  25                 	db	37
   727  00FE5E  64                 	db	100	;'d'
   728  00FE5F  00                 	db	0
   729  00FE60                     STR_62:
   730  00FE60  53                 	db	83	;'S'
   731  00FE61  20                 	db	32
   732  00FE62  64                 	db	100	;'d'
   733  00FE63  69                 	db	105	;'i'
   734  00FE64  73                 	db	115	;'s'
   735  00FE65  70                 	db	112	;'p'
   736  00FE66  65                 	db	101	;'e'
   737  00FE67  6E                 	db	110	;'n'
   738  00FE68  73                 	db	115	;'s'
   739  00FE69  65                 	db	101	;'e'
   740  00FE6A  64                 	db	100	;'d'
   741  00FE6B  3A                 	db	58	;':'
   742  00FE6C  25                 	db	37
   743  00FE6D  64                 	db	100	;'d'
   744  00FE6E  00                 	db	0
   745  00FE6F                     STR_63:
   746  00FE6F  57                 	db	87	;'W'
   747  00FE70  20                 	db	32
   748  00FE71  64                 	db	100	;'d'
   749  00FE72  69                 	db	105	;'i'
   750  00FE73  73                 	db	115	;'s'
   751  00FE74  70                 	db	112	;'p'
   752  00FE75  65                 	db	101	;'e'
   753  00FE76  6E                 	db	110	;'n'
   754  00FE77  73                 	db	115	;'s'
   755  00FE78  65                 	db	101	;'e'
   756  00FE79  64                 	db	100	;'d'
   757  00FE7A  3A                 	db	58	;':'
   758  00FE7B  25                 	db	37
   759  00FE7C  64                 	db	100	;'d'
   760  00FE7D  00                 	db	0
   761  00FE7E                     STR_44:
   762  00FE7E  42                 	db	66	;'B'
   763  00FE7F  6F                 	db	111	;'o'
   764  00FE80  6C                 	db	108	;'l'
   765  00FE81  74                 	db	116	;'t'
   766  00FE82  5F                 	db	95	;'_'
   767  00FE83  72                 	db	114	;'r'
   768  00FE84  65                 	db	101	;'e'
   769  00FE85  6D                 	db	109	;'m'
   770  00FE86  61                 	db	97	;'a'
   771  00FE87  69                 	db	105	;'i'
   772  00FE88  6E                 	db	110	;'n'
   773  00FE89  3A                 	db	58	;':'
   774  00FE8A  25                 	db	37
   775  00FE8B  64                 	db	100	;'d'
   776  00FE8C  00                 	db	0
   777  00FE8D                     STR_21:
   778  00FE8D  70                 	db	112	;'p'
   779  00FE8E  72                 	db	114	;'r'
   780  00FE8F  6F                 	db	111	;'o'
   781  00FE90  63                 	db	99	;'c'
   782  00FE91  65                 	db	101	;'e'
   783  00FE92  73                 	db	115	;'s'
   784  00FE93  73                 	db	115	;'s'
   785  00FE94  69                 	db	105	;'i'
   786  00FE95  6E                 	db	110	;'n'
   787  00FE96  67                 	db	103	;'g'
   788  00FE97  20                 	db	32
   789  00FE98  43                 	db	67	;'C'
   790  00FE99  25                 	db	37
   791  00FE9A  64                 	db	100	;'d'
   792  00FE9B  00                 	db	0
   793  00FE9C                     STR_52:
   794  00FE9C  25                 	db	37
   795  00FE9D  30                 	db	48	;'0'
   796  00FE9E  32                 	db	50	;'2'
   797  00FE9F  78                 	db	120	;'x'
   798  00FEA0  2F                 	db	47
   799  00FEA1  25                 	db	37
   800  00FEA2  30                 	db	48	;'0'
   801  00FEA3  32                 	db	50	;'2'
   802  00FEA4  78                 	db	120	;'x'
   803  00FEA5  2F                 	db	47
   804  00FEA6  25                 	db	37
   805  00FEA7  30                 	db	48	;'0'
   806  00FEA8  32                 	db	50	;'2'
   807  00FEA9  78                 	db	120	;'x'
   808  00FEAA  00                 	db	0
   809  00FEAB                     STR_53:
   810  00FEAB  25                 	db	37
   811  00FEAC  30                 	db	48	;'0'
   812  00FEAD  32                 	db	50	;'2'
   813  00FEAE  78                 	db	120	;'x'
   814  00FEAF  3A                 	db	58	;':'
   815  00FEB0  25                 	db	37
   816  00FEB1  30                 	db	48	;'0'
   817  00FEB2  32                 	db	50	;'2'
   818  00FEB3  78                 	db	120	;'x'
   819  00FEB4  3A                 	db	58	;':'
   820  00FEB5  25                 	db	37
   821  00FEB6  30                 	db	48	;'0'
   822  00FEB7  32                 	db	50	;'2'
   823  00FEB8  78                 	db	120	;'x'
   824  00FEB9  00                 	db	0
   825  00FEBA                     STR_15:
   826  00FEBA  63                 	db	99	;'c'
   827  00FEBB  68                 	db	104	;'h'
   828  00FEBC  61                 	db	97	;'a'
   829  00FEBD  6E                 	db	110	;'n'
   830  00FEBE  67                 	db	103	;'g'
   831  00FEBF  65                 	db	101	;'e'
   832  00FEC0  20                 	db	32
   833  00FEC1  6D                 	db	109	;'m'
   834  00FEC2  6F                 	db	111	;'o'
   835  00FEC3  64                 	db	100	;'d'
   836  00FEC4  65                 	db	101	;'e'
   837  00FEC5  20                 	db	32
   838  00FEC6  32                 	db	50	;'2'
   839  00FEC7  00                 	db	0
   840  00FEC8                     STR_4:
   841  00FEC8  66                 	db	102	;'f'
   842  00FEC9  61                 	db	97	;'a'
   843  00FECA  73                 	db	115	;'s'
   844  00FECB  74                 	db	116	;'t'
   845  00FECC  65                 	db	101	;'e'
   846  00FECD  6E                 	db	110	;'n'
   847  00FECE  65                 	db	101	;'e'
   848  00FECF  72                 	db	114	;'r'
   849  00FED0  20                 	db	32
   850  00FED1  73                 	db	115	;'s'
   851  00FED2  65                 	db	101	;'e'
   852  00FED3  74                 	db	116	;'t'
   853  00FED4  3A                 	db	58	;':'
   854  00FED5  00                 	db	0
   855  00FED6                     STR_45:
   856  00FED6  4E                 	db	78	;'N'
   857  00FED7  75                 	db	117	;'u'
   858  00FED8  74                 	db	116	;'t'
   859  00FED9  5F                 	db	95	;'_'
   860  00FEDA  72                 	db	114	;'r'
   861  00FEDB  65                 	db	101	;'e'
   862  00FEDC  6D                 	db	109	;'m'
   863  00FEDD  61                 	db	97	;'a'
   864  00FEDE  69                 	db	105	;'i'
   865  00FEDF  6E                 	db	110	;'n'
   866  00FEE0  3A                 	db	58	;':'
   867  00FEE1  25                 	db	37
   868  00FEE2  64                 	db	100	;'d'
   869  00FEE3  00                 	db	0
   870  00FEE4                     STR_2:
   871  00FEE4  32                 	db	50	;'2'
   872  00FEE5  3A                 	db	58	;':'
   873  00FEE6  69                 	db	105	;'i'
   874  00FEE7  6E                 	db	110	;'n'
   875  00FEE8  73                 	db	115	;'s'
   876  00FEE9  74                 	db	116	;'t'
   877  00FEEA  72                 	db	114	;'r'
   878  00FEEB  75                 	db	117	;'u'
   879  00FEEC  63                 	db	99	;'c'
   880  00FEED  74                 	db	116	;'t'
   881  00FEEE  69                 	db	105	;'i'
   882  00FEEF  6F                 	db	111	;'o'
   883  00FEF0  6E                 	db	110	;'n'
   884  00FEF1  00                 	db	0
   885  00FEF2                     STR_22:
   886  00FEF2  42                 	db	66	;'B'
   887  00FEF3  5F                 	db	95	;'_'
   888  00FEF4  63                 	db	99	;'c'
   889  00FEF5  6F                 	db	111	;'o'
   890  00FEF6  75                 	db	117	;'u'
   891  00FEF7  6E                 	db	110	;'n'
   892  00FEF8  74                 	db	116	;'t'
   893  00FEF9  65                 	db	101	;'e'
   894  00FEFA  72                 	db	114	;'r'
   895  00FEFB  3A                 	db	58	;':'
   896  00FEFC  25                 	db	37
   897  00FEFD  64                 	db	100	;'d'
   898  00FEFE  00                 	db	0
   899  00FEFF                     STR_25:
   900  00FEFF  4E                 	db	78	;'N'
   901  00FF00  5F                 	db	95	;'_'
   902  00FF01  63                 	db	99	;'c'
   903  00FF02  6F                 	db	111	;'o'
   904  00FF03  75                 	db	117	;'u'
   905  00FF04  6E                 	db	110	;'n'
   906  00FF05  74                 	db	116	;'t'
   907  00FF06  65                 	db	101	;'e'
   908  00FF07  72                 	db	114	;'r'
   909  00FF08  3A                 	db	58	;':'
   910  00FF09  25                 	db	37
   911  00FF0A  64                 	db	100	;'d'
   912  00FF0B  00                 	db	0
   913  00FF0C                     STR_28:
   914  00FF0C  53                 	db	83	;'S'
   915  00FF0D  5F                 	db	95	;'_'
   916  00FF0E  63                 	db	99	;'c'
   917  00FF0F  6F                 	db	111	;'o'
   918  00FF10  75                 	db	117	;'u'
   919  00FF11  6E                 	db	110	;'n'
   920  00FF12  74                 	db	116	;'t'
   921  00FF13  65                 	db	101	;'e'
   922  00FF14  72                 	db	114	;'r'
   923  00FF15  3A                 	db	58	;':'
   924  00FF16  25                 	db	37
   925  00FF17  64                 	db	100	;'d'
   926  00FF18  00                 	db	0
   927  00FF19                     STR_57:
   928  00FF19  25                 	db	37
   929  00FF1A  64                 	db	100	;'d'
   930  00FF1B  6D                 	db	109	;'m'
   931  00FF1C  69                 	db	105	;'i'
   932  00FF1D  6E                 	db	110	;'n'
   933  00FF1E  20                 	db	32
   934  00FF1F  25                 	db	37
   935  00FF20  64                 	db	100	;'d'
   936  00FF21  73                 	db	115	;'s'
   937  00FF22  65                 	db	101	;'e'
   938  00FF23  63                 	db	99	;'c'
   939  00FF24  73                 	db	115	;'s'
   940  00FF25  00                 	db	0
   941  00FF26                     STR_20:
   942  00FF26  43                 	db	67	;'C'
   943  00FF27  30                 	db	48	;'0'
   944  00FF28  20                 	db	32
   945  00FF29  69                 	db	105	;'i'
   946  00FF2A  73                 	db	115	;'s'
   947  00FF2B  20                 	db	32
   948  00FF2C  66                 	db	102	;'f'
   949  00FF2D  6F                 	db	111	;'o'
   950  00FF2E  75                 	db	117	;'u'
   951  00FF2F  6E                 	db	110	;'n'
   952  00FF30  64                 	db	100	;'d'
   953  00FF31  00                 	db	0
   954  00FF32                     STR_48:
   955  00FF32  79                 	db	121	;'y'
   956  00FF33  6F                 	db	111	;'o'
   957  00FF34  75                 	db	117	;'u'
   958  00FF35  27                 	db	39
   959  00FF36  72                 	db	114	;'r'
   960  00FF37  65                 	db	101	;'e'
   961  00FF38  20                 	db	32
   962  00FF39  64                 	db	100	;'d'
   963  00FF3A  6F                 	db	111	;'o'
   964  00FF3B  6E                 	db	110	;'n'
   965  00FF3C  65                 	db	101	;'e'
   966  00FF3D  00                 	db	0
   967  00FF3E                     STR_84:
   968  00FF3E  57                 	db	87	;'W'
   969  00FF3F  72                 	db	114	;'r'
   970  00FF40  6F                 	db	111	;'o'
   971  00FF41  6E                 	db	110	;'n'
   972  00FF42  67                 	db	103	;'g'
   973  00FF43  20                 	db	32
   974  00FF44  69                 	db	105	;'i'
   975  00FF45  6E                 	db	110	;'n'
   976  00FF46  70                 	db	112	;'p'
   977  00FF47  75                 	db	117	;'u'
   978  00FF48  74                 	db	116	;'t'
   979  00FF49  00                 	db	0
   980  00FF4A                     STR_79:
   981  00FF4A  77                 	db	119	;'w'
   982  00FF4B  72                 	db	114	;'r'
   983  00FF4C  6F                 	db	111	;'o'
   984  00FF4D  6E                 	db	110	;'n'
   985  00FF4E  67                 	db	103	;'g'
   986  00FF4F  20                 	db	32
   987  00FF50  73                 	db	115	;'s'
   988  00FF51  65                 	db	101	;'e'
   989  00FF52  74                 	db	116	;'t'
   990  00FF53  21                 	db	33
   991  00FF54  00                 	db	0
   992  00FF55                     STR_23:
   993  00FF55  42                 	db	66	;'B'
   994  00FF56  5F                 	db	95	;'_'
   995  00FF57  63                 	db	99	;'c'
   996  00FF58  6F                 	db	111	;'o'
   997  00FF59  75                 	db	117	;'u'
   998  00FF5A  6E                 	db	110	;'n'
   999  00FF5B  74                 	db	116	;'t'
  1000  00FF5C  3A                 	db	58	;':'
  1001  00FF5D  25                 	db	37
  1002  00FF5E  64                 	db	100	;'d'
  1003  00FF5F  00                 	db	0
  1004  00FF60                     STR_26:
  1005  00FF60  4E                 	db	78	;'N'
  1006  00FF61  5F                 	db	95	;'_'
  1007  00FF62  63                 	db	99	;'c'
  1008  00FF63  6F                 	db	111	;'o'
  1009  00FF64  75                 	db	117	;'u'
  1010  00FF65  6E                 	db	110	;'n'
  1011  00FF66  74                 	db	116	;'t'
  1012  00FF67  3A                 	db	58	;':'
  1013  00FF68  25                 	db	37
  1014  00FF69  64                 	db	100	;'d'
  1015  00FF6A  00                 	db	0
  1016  00FF6B                     STR_29:
  1017  00FF6B  53                 	db	83	;'S'
  1018  00FF6C  5F                 	db	95	;'_'
  1019  00FF6D  63                 	db	99	;'c'
  1020  00FF6E  6F                 	db	111	;'o'
  1021  00FF6F  75                 	db	117	;'u'
  1022  00FF70  6E                 	db	110	;'n'
  1023  00FF71  74                 	db	116	;'t'
  1024  00FF72  3A                 	db	58	;':'
  1025  00FF73  25                 	db	37
  1026  00FF74  64                 	db	100	;'d'
  1027  00FF75  00                 	db	0
  1028  00FF76                     STR_51:
  1029  00FF76  33                 	db	51	;'3'
  1030  00FF77  3A                 	db	58	;':'
  1031  00FF78  73                 	db	115	;'s'
  1032  00FF79  75                 	db	117	;'u'
  1033  00FF7A  6D                 	db	109	;'m'
  1034  00FF7B  6D                 	db	109	;'m'
  1035  00FF7C  61                 	db	97	;'a'
  1036  00FF7D  72                 	db	114	;'r'
  1037  00FF7E  79                 	db	121	;'y'
  1038  00FF7F  00                 	db	0
  1039  00FF80                     STR_76:
  1040  00FF80  63                 	db	99	;'c'
  1041  00FF81  6F                 	db	111	;'o'
  1042  00FF82  72                 	db	114	;'r'
  1043  00FF83  72                 	db	114	;'r'
  1044  00FF84  65                 	db	101	;'e'
  1045  00FF85  63                 	db	99	;'c'
  1046  00FF86  74                 	db	116	;'t'
  1047  00FF87  21                 	db	33
  1048  00FF88  00                 	db	0
  1049  00FF89                     STR_69:
  1050  00FF89  30                 	db	48	;'0'
  1051  00FF8A  30                 	db	48	;'0'
  1052  00FF8B  3A                 	db	58	;':'
  1053  00FF8C  30                 	db	48	;'0'
  1054  00FF8D  34                 	db	52	;'4'
  1055  00FF8E  3A                 	db	58	;':'
  1056  00FF8F  30                 	db	48	;'0'
  1057  00FF90  33                 	db	51	;'3'
  1058  00FF91  00                 	db	0
  1059  00FF92                     STR_85:
  1060  00FF92  54                 	db	84	;'T'
  1061  00FF93  4F                 	db	79	;'O'
  1062  00FF94  4F                 	db	79	;'O'
  1063  00FF95  20                 	db	32
  1064  00FF96  4D                 	db	77	;'M'
  1065  00FF97  41                 	db	65	;'A'
  1066  00FF98  4E                 	db	78	;'N'
  1067  00FF99  59                 	db	89	;'Y'
  1068  00FF9A  00                 	db	0
  1069  00FF9B                     STR_34:
  1070  00FF9B  64                 	db	100	;'d'
  1071  00FF9C  6F                 	db	111	;'o'
  1072  00FF9D  6E                 	db	110	;'n'
  1073  00FF9E  65                 	db	101	;'e'
  1074  00FF9F  20                 	db	32
  1075  00FFA0  43                 	db	67	;'C'
  1076  00FFA1  25                 	db	37
  1077  00FFA2  64                 	db	100	;'d'
  1078  00FFA3  00                 	db	0
  1079  00FFA4                     STR_6:
  1080  00FFA4  6E                 	db	110	;'n'
  1081  00FFA5  75                 	db	117	;'u'
  1082  00FFA6  6D                 	db	109	;'m'
  1083  00FFA7  62                 	db	98	;'b'
  1084  00FFA8  65                 	db	101	;'e'
  1085  00FFA9  72                 	db	114	;'r'
  1086  00FFAA  3A                 	db	58	;':'
  1087  00FFAB  00                 	db	0
  1088  00FFAC                     STR_107:
  1089  00FFAC  28                 	db	40
  1090  00FFAD  6E                 	db	110	;'n'
  1091  00FFAE  75                 	db	117	;'u'
  1092  00FFAF  6C                 	db	108	;'l'
  1093  00FFB0  6C                 	db	108	;'l'
  1094  00FFB1  29                 	db	41
  1095  00FFB2  00                 	db	0
  1096  00FFB3                     STR_82:
  1097  00FFB3  77                 	db	119	;'w'
  1098  00FFB4  72                 	db	114	;'r'
  1099  00FFB5  6F                 	db	111	;'o'
  1100  00FFB6  6E                 	db	110	;'n'
  1101  00FFB7  67                 	db	103	;'g'
  1102  00FFB8  21                 	db	33
  1103  00FFB9  00                 	db	0
  1104  00FFBA                     STR_7:
  1105  00FFBA  44                 	db	68	;'D'
  1106  00FFBB  6F                 	db	111	;'o'
  1107  00FFBC  6E                 	db	110	;'n'
  1108  00FFBD  65                 	db	101	;'e'
  1109  00FFBE  21                 	db	33
  1110  00FFBF  00                 	db	0
  1111  00FFC0                     STR_105:
  1112  00FFC0  42                 	db	66	;'B'
  1113  00FFC1  4E                 	db	78	;'N'
  1114  00FFC2  4E                 	db	78	;'N'
  1115  00FFC3  4E                 	db	78	;'N'
  1116  00FFC4  00                 	db	0
  1117  00FFC5                     STR_103:
  1118  00FFC5  42                 	db	66	;'B'
  1119  00FFC6  42                 	db	66	;'B'
  1120  00FFC7  4E                 	db	78	;'N'
  1121  00FFC8  57                 	db	87	;'W'
  1122  00FFC9  00                 	db	0
  1123  00FFCA                     STR_104:
  1124  00FFCA  42                 	db	66	;'B'
  1125  00FFCB  4E                 	db	78	;'N'
  1126  00FFCC  4E                 	db	78	;'N'
  1127  00FFCD  57                 	db	87	;'W'
  1128  00FFCE  00                 	db	0
  1129  00FFCF                     STR_102:
  1130  00FFCF  42                 	db	66	;'B'
  1131  00FFD0  42                 	db	66	;'B'
  1132  00FFD1  53                 	db	83	;'S'
  1133  00FFD2  57                 	db	87	;'W'
  1134  00FFD3  00                 	db	0
  1135  00FFD4                     STR_100:
  1136  00FFD4  42                 	db	66	;'B'
  1137  00FFD5  4E                 	db	78	;'N'
  1138  00FFD6  57                 	db	87	;'W'
  1139  00FFD7  57                 	db	87	;'W'
  1140  00FFD8  00                 	db	0
  1141  00FFD9                     STR_101:
  1142  00FFD9  42                 	db	66	;'B'
  1143  00FFDA  53                 	db	83	;'S'
  1144  00FFDB  57                 	db	87	;'W'
  1145  00FFDC  57                 	db	87	;'W'
  1146  00FFDD  00                 	db	0
  1147  00FFDE                     STR_106:
  1148  00FFDE  42                 	db	66	;'B'
  1149  00FFDF  57                 	db	87	;'W'
  1150  00FFE0  57                 	db	87	;'W'
  1151  00FFE1  57                 	db	87	;'W'
  1152  00FFE2  00                 	db	0
  1153  00FFE3                     STR_9:
  1154  00FFE3  73                 	db	115	;'s'
  1155  00FFE4  74                 	db	116	;'t'
  1156  00FFE5  65                 	db	101	;'e'
  1157  00FFE6  70                 	db	112	;'p'
  1158  00FFE7  00                 	db	0
  1159  00FFE8                     STR_94:
  1160  00FFE8  42                 	db	66	;'B'
  1161  00FFE9  42                 	db	66	;'B'
  1162  00FFEA  4E                 	db	78	;'N'
  1163  00FFEB  00                 	db	0
  1164  00FFEC                     STR_95:
  1165  00FFEC  42                 	db	66	;'B'
  1166  00FFED  42                 	db	66	;'B'
  1167  00FFEE  53                 	db	83	;'S'
  1168  00FFEF  00                 	db	0
  1169  00FFF0                     STR_96:
  1170  00FFF0  42                 	db	66	;'B'
  1171  00FFF1  42                 	db	66	;'B'
  1172  00FFF2  57                 	db	87	;'W'
  1173  00FFF3  00                 	db	0
  1174  00FFF4                     STR_99:
  1175  00FFF4  42                 	db	66	;'B'
  1176  00FFF5  57                 	db	87	;'W'
  1177  00FFF6  57                 	db	87	;'W'
  1178  00FFF7  00                 	db	0
  1179  00FFF8                     STR_5:
  1180  00FFF8  25                 	db	37
  1181  00FFF9  73                 	db	115	;'s'
  1182  00FFFA  00                 	db	0
  1183  00FFFB                     STR_13:
  1184  00FFFB  2C                 	db	44
  1185  00FFFC  00                 	db	0
  1186  00FFFD                     STR_72:
  1187  00FFFD  42                 	db	66	;'B'
  1188  00FFFE  00                 	db	0
  1189  0000                     
  1190                           ; #config settings
  1191  00FFFF  00                 	db	0	; dummy byte at the end
  1192  0000                     
  1193                           	psect	cinit
  1194  004234                     __pcinit:
  1195                           	opt stack 0
  1196  004234                     start_initialization:
  1197                           	opt stack 0
  1198  004234                     __initialization:
  1199                           	opt stack 0
  1200                           
  1201                           ; Initialize objects allocated to BANK1 (10 bytes)
  1202                           ; load TBLPTR registers with __pidataBANK1
  1203  004234  0E9F               	movlw	low __pidataBANK1
  1204  004236  6EF6               	movwf	tblptrl,c
  1205  004238  0E48               	movlw	high __pidataBANK1
  1206  00423A  6EF7               	movwf	tblptrh,c
  1207  00423C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1208  00423E  6EF8               	movwf	tblptru,c
  1209  004240  EE01  F0D3         	lfsr	0,__pdataBANK1
  1210  004244  EE10 F00A          	lfsr	1,10
  1211  004248                     copy_data0:
  1212  004248  0009               	tblrd		*+
  1213  00424A  CFF5 FFEE          	movff	tablat,postinc0
  1214  00424E  50E5               	movf	postdec1,w,c
  1215  004250  50E1               	movf	fsr1l,w,c
  1216  004252  E1FA               	bnz	copy_data0
  1217                           
  1218                           ; Initialize objects allocated to BANK0 (15 bytes)
  1219                           ; load TBLPTR registers with __pidataBANK0
  1220  004254  0E90               	movlw	low __pidataBANK0
  1221  004256  6EF6               	movwf	tblptrl,c
  1222  004258  0E48               	movlw	high __pidataBANK0
  1223  00425A  6EF7               	movwf	tblptrh,c
  1224  00425C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1225  00425E  6EF8               	movwf	tblptru,c
  1226  004260  EE00  F0F0         	lfsr	0,__pdataBANK0
  1227  004264  EE10 F00F          	lfsr	1,15
  1228  004268                     copy_data1:
  1229  004268  0009               	tblrd		*+
  1230  00426A  CFF5 FFEE          	movff	tablat,postinc0
  1231  00426E  50E5               	movf	postdec1,w,c
  1232  004270  50E1               	movf	fsr1l,w,c
  1233  004272  E1FA               	bnz	copy_data1
  1234                           
  1235                           ; Clear objects allocated to BANK2 (200 bytes)
  1236  004274  EE02  F000         	lfsr	0,__pbssBANK2
  1237  004278  0EC8               	movlw	200
  1238  00427A                     clear_0:
  1239  00427A  6AEE               	clrf	postinc0,c
  1240  00427C  06E8               	decf	wreg,f,c
  1241  00427E  E1FD               	bnz	clear_0
  1242                           
  1243                           ; Clear objects allocated to BANK1 (211 bytes)
  1244  004280  EE01  F000         	lfsr	0,__pbssBANK1
  1245  004284  0ED3               	movlw	211
  1246  004286                     clear_1:
  1247  004286  6AEE               	clrf	postinc0,c
  1248  004288  06E8               	decf	wreg,f,c
  1249  00428A  E1FD               	bnz	clear_1
  1250                           
  1251                           ; Clear objects allocated to BANK0 (72 bytes)
  1252  00428C  EE00  F080         	lfsr	0,__pbssBANK0
  1253  004290  0E48               	movlw	72
  1254  004292                     clear_2:
  1255  004292  6AEE               	clrf	postinc0,c
  1256  004294  06E8               	decf	wreg,f,c
  1257  004296  E1FD               	bnz	clear_2
  1258                           
  1259                           ; Clear objects allocated to COMRAM (57 bytes)
  1260  004298  EE00  F046         	lfsr	0,__pbssCOMRAM
  1261  00429C  0E39               	movlw	57
  1262  00429E                     clear_3:
  1263  00429E  6AEE               	clrf	postinc0,c
  1264  0042A0  06E8               	decf	wreg,f,c
  1265  0042A2  E1FD               	bnz	clear_3
  1266  0042A4                     end_of_initialization:
  1267                           	opt stack 0
  1268  0042A4                     __end_of__initialization:
  1269                           	opt stack 0
  1270  0042A4  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1271  0042A6  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1272  0042A8  0100               	movlb	0
  1273  0042AA  EF00  F008         	goto	_main	;jump to C main() function
  1274                           tblptru	equ	0xFF8
  1275                           tblptrh	equ	0xFF7
  1276                           tblptrl	equ	0xFF6
  1277                           tablat	equ	0xFF5
  1278                           postinc0	equ	0xFEE
  1279                           wreg	equ	0xFE8
  1280                           postdec1	equ	0xFE5
  1281                           fsr1l	equ	0xFE1
  1282                           
  1283                           	psect	bssCOMRAM
  1284  000046                     __pbssCOMRAM:
  1285                           	opt stack 0
  1286  000046                     _compartment_number:
  1287                           	opt stack 0
  1288  000046                     	ds	16
  1289  000056                     _time:
  1290                           	opt stack 0
  1291  000056                     	ds	7
  1292  00005D                     _B_total_dispensed:
  1293                           	opt stack 0
  1294  00005D                     	ds	2
  1295  00005F                     _W:
  1296                           	opt stack 0
  1297  00005F                     	ds	2
  1298  000061                     _S:
  1299                           	opt stack 0
  1300  000061                     	ds	2
  1301  000063                     _N:
  1302                           	opt stack 0
  1303  000063                     	ds	2
  1304  000065                     _B:
  1305                           	opt stack 0
  1306  000065                     	ds	2
  1307  000067                     _prev_state:
  1308                           	opt stack 0
  1309  000067                     	ds	2
  1310  000069                     _total_number:
  1311                           	opt stack 0
  1312  000069                     	ds	2
  1313  00006B                     _valid:
  1314                           	opt stack 0
  1315  00006B                     	ds	2
  1316  00006D                     _counter_step:
  1317                           	opt stack 0
  1318  00006D                     	ds	2
  1319  00006F                     _counter:
  1320                           	opt stack 0
  1321  00006F                     	ds	2
  1322  000071                     _operationTime:
  1323                           	opt stack 0
  1324  000071                     	ds	2
  1325  000073                     _operation:
  1326                           	opt stack 0
  1327  000073                     	ds	2
  1328  000075                     _j:
  1329                           	opt stack 0
  1330  000075                     	ds	1
  1331  000076                     _temp:
  1332                           	opt stack 0
  1333  000076                     	ds	1
  1334  000077                     	ds	1
  1335  000078                     _current_set2:
  1336                           	opt stack 0
  1337  000078                     	ds	5
  1338  00007D                     _number:
  1339                           	opt stack 0
  1340  00007D                     	ds	2
  1341                           tblptru	equ	0xFF8
  1342                           tblptrh	equ	0xFF7
  1343                           tblptrl	equ	0xFF6
  1344                           tablat	equ	0xFF5
  1345                           postinc0	equ	0xFEE
  1346                           wreg	equ	0xFE8
  1347                           postdec1	equ	0xFE5
  1348                           fsr1l	equ	0xFE1
  1349                           
  1350                           	psect	bssBANK0
  1351  000080                     __pbssBANK0:
  1352                           	opt stack 0
  1353  000080                     _compartment_array:
  1354                           	opt stack 0
  1355  000080                     	ds	16
  1356  000090                     _W_total_dispensed:
  1357                           	opt stack 0
  1358  000090                     	ds	2
  1359  000092                     _S_total_dispensed:
  1360                           	opt stack 0
  1361  000092                     	ds	2
  1362  000094                     _N_total_dispensed:
  1363                           	opt stack 0
  1364  000094                     	ds	2
  1365  000096                     _S_spacingTime:
  1366                           	opt stack 0
  1367  000096                     	ds	2
  1368  000098                     _N_spacingTime:
  1369                           	opt stack 0
  1370  000098                     	ds	2
  1371  00009A                     _B_spacingTime:
  1372                           	opt stack 0
  1373  00009A                     	ds	2
  1374  00009C                     _W_remain:
  1375                           	opt stack 0
  1376  00009C                     	ds	2
  1377  00009E                     _S_remain:
  1378                           	opt stack 0
  1379  00009E                     	ds	2
  1380  0000A0                     _N_remain:
  1381                           	opt stack 0
  1382  0000A0                     	ds	2
  1383  0000A2                     _B_remain:
  1384                           	opt stack 0
  1385  0000A2                     	ds	2
  1386  0000A4                     _W_counter:
  1387                           	opt stack 0
  1388  0000A4                     	ds	2
  1389  0000A6                     _N_counter:
  1390                           	opt stack 0
  1391  0000A6                     	ds	2
  1392  0000A8                     _S_counter:
  1393                           	opt stack 0
  1394  0000A8                     	ds	2
  1395  0000AA                     _B_counter:
  1396                           	opt stack 0
  1397  0000AA                     	ds	2
  1398  0000AC                     _assembly_step:
  1399                           	opt stack 0
  1400  0000AC                     	ds	2
  1401  0000AE                     _state:
  1402                           	opt stack 0
  1403  0000AE                     	ds	2
  1404  0000B0                     _compartment_pos:
  1405                           	opt stack 0
  1406  0000B0                     	ds	2
  1407  0000B2                     _prev:
  1408                           	opt stack 0
  1409  0000B2                     	ds	2
  1410  0000B4                     _gear_counter:
  1411                           	opt stack 0
  1412  0000B4                     	ds	2
  1413  0000B6                     _operation_done:
  1414                           	opt stack 0
  1415  0000B6                     	ds	2
  1416  0000B8                     _change_mode:
  1417                           	opt stack 0
  1418  0000B8                     	ds	2
  1419  0000BA                     _mode:
  1420                           	opt stack 0
  1421  0000BA                     	ds	2
  1422  0000BC                     _white_tape:
  1423                           	opt stack 0
  1424  0000BC                     	ds	2
  1425  0000BE                     _i:
  1426                           	opt stack 0
  1427  0000BE                     	ds	2
  1428  0000C0                     _nuts_data:
  1429                           	opt stack 0
  1430  0000C0                     	ds	1
  1431  0000C1                     _openHandle_data:
  1432                           	opt stack 0
  1433  0000C1                     	ds	1
  1434  0000C2                     _LCDinterruptState:
  1435                           	opt stack 0
  1436  0000C2                     	ds	1
  1437  0000C3                     _current_set:
  1438                           	opt stack 0
  1439  0000C3                     	ds	5
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           postdec1	equ	0xFE5
  1447                           fsr1l	equ	0xFE1
  1448                           
  1449                           	psect	dataBANK0
  1450  0000F0                     __pdataBANK0:
  1451                           	opt stack 0
  1452  0000F0                     _close_handle:
  1453                           	opt stack 0
  1454  0000F0                     	ds	1
  1455  0000F1                     _servo_ramp:
  1456                           	opt stack 0
  1457  0000F1                     	ds	1
  1458  0000F2                     _motorStop_3:
  1459                           	opt stack 0
  1460  0000F2                     	ds	1
  1461  0000F3                     _motorStart_3:
  1462                           	opt stack 0
  1463  0000F3                     	ds	1
  1464  0000F4                     _motorStop_2:
  1465                           	opt stack 0
  1466  0000F4                     	ds	1
  1467  0000F5                     _motorStart_2:
  1468                           	opt stack 0
  1469  0000F5                     	ds	1
  1470  0000F6                     _motorStop_1:
  1471                           	opt stack 0
  1472  0000F6                     	ds	1
  1473  0000F7                     _motorStart_1:
  1474                           	opt stack 0
  1475  0000F7                     	ds	1
  1476  0000F8                     _motorStop_0:
  1477                           	opt stack 0
  1478  0000F8                     	ds	1
  1479  0000F9                     _motorStart_0:
  1480                           	opt stack 0
  1481  0000F9                     	ds	1
  1482  0000FA                     _S_dispense:
  1483                           	opt stack 0
  1484  0000FA                     	ds	1
  1485  0000FB                     _N_dispense:
  1486                           	opt stack 0
  1487  0000FB                     	ds	1
  1488  0000FC                     _B_dispense:
  1489                           	opt stack 0
  1490  0000FC                     	ds	1
  1491  0000FD                     _rotate_1compartment:
  1492                           	opt stack 0
  1493  0000FD                     	ds	1
  1494  0000FE                     _rotate_gear:
  1495                           	opt stack 0
  1496  0000FE                     	ds	1
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           postdec1	equ	0xFE5
  1504                           fsr1l	equ	0xFE1
  1505                           
  1506                           	psect	bssBANK1
  1507  000100                     __pbssBANK1:
  1508                           	opt stack 0
  1509  000100                     _W_array:
  1510                           	opt stack 0
  1511  000100                     	ds	16
  1512  000110                     _N_array:
  1513                           	opt stack 0
  1514  000110                     	ds	16
  1515  000120                     _S_array:
  1516                           	opt stack 0
  1517  000120                     	ds	16
  1518  000130                     _B_array:
  1519                           	opt stack 0
  1520  000130                     	ds	16
  1521  000140                     _prev_number:
  1522                           	opt stack 0
  1523  000140                     	ds	16
  1524  000150                     _final_number:
  1525                           	opt stack 0
  1526  000150                     	ds	16
  1527  000160                     _final_time:
  1528                           	opt stack 0
  1529  000160                     	ds	2
  1530  000162                     _sec_final:
  1531                           	opt stack 0
  1532  000162                     	ds	2
  1533  000164                     _min_final:
  1534                           	opt stack 0
  1535  000164                     	ds	2
  1536  000166                     _hr_final:
  1537                           	opt stack 0
  1538  000166                     	ds	2
  1539  000168                     _initial_time:
  1540                           	opt stack 0
  1541  000168                     	ds	2
  1542  00016A                     _sec_initial:
  1543                           	opt stack 0
  1544  00016A                     	ds	2
  1545  00016C                     _min_initial:
  1546                           	opt stack 0
  1547  00016C                     	ds	2
  1548  00016E                     _hr_initial:
  1549                           	opt stack 0
  1550  00016E                     	ds	2
  1551  000170                     _W_done:
  1552                           	opt stack 0
  1553  000170                     	ds	2
  1554  000172                     _S_done:
  1555                           	opt stack 0
  1556  000172                     	ds	2
  1557  000174                     _N_done:
  1558                           	opt stack 0
  1559  000174                     	ds	2
  1560  000176                     _B_done:
  1561                           	opt stack 0
  1562  000176                     	ds	2
  1563  000178                     _W_spacingTime:
  1564                           	opt stack 0
  1565  000178                     	ds	2
  1566  00017A                     _error:
  1567                           	opt stack 0
  1568  00017A                     	ds	2
  1569  00017C                     _angle:
  1570                           	opt stack 0
  1571  00017C                     	ds	2
  1572  00017E                     _prev_set:
  1573                           	opt stack 0
  1574  00017E                     	ds	40
  1575  0001A6                     _final_set:
  1576                           	opt stack 0
  1577  0001A6                     	ds	40
  1578  0001CE                     _temp_set:
  1579                           	opt stack 0
  1580  0001CE                     	ds	5
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           postdec1	equ	0xFE5
  1588                           fsr1l	equ	0xFE1
  1589                           
  1590                           	psect	dataBANK1
  1591  0001D3                     __pdataBANK1:
  1592                           	opt stack 0
  1593  0001D3                     _W_max:
  1594                           	opt stack 0
  1595  0001D3                     	ds	2
  1596  0001D5                     _S_max:
  1597                           	opt stack 0
  1598  0001D5                     	ds	2
  1599  0001D7                     _N_max:
  1600                           	opt stack 0
  1601  0001D7                     	ds	2
  1602  0001D9                     _B_max:
  1603                           	opt stack 0
  1604  0001D9                     	ds	2
  1605  0001DB                     _init_position:
  1606                           	opt stack 0
  1607  0001DB                     	ds	2
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1l	equ	0xFE1
  1616                           
  1617                           	psect	bssBANK2
  1618  000200                     __pbssBANK2:
  1619                           	opt stack 0
  1620  000200                     _fastener:
  1621                           	opt stack 0
  1622  000200                     	ds	200
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1l	equ	0xFE1
  1631                           
  1632                           	psect	cstackBANK0
  1633  0000C8                     __pcstackBANK0:
  1634                           	opt stack 0
  1635  0000C8                     ??_isdigit:
  1636  0000C8                     ??_I2C_Master_Wait:
  1637  0000C8                     ?_readADC:
  1638                           	opt stack 0
  1639  0000C8                     ?___awdiv:
  1640                           	opt stack 0
  1641  0000C8                     ?___lwdiv:
  1642                           	opt stack 0
  1643  0000C8                     ?___lldiv:
  1644                           	opt stack 0
  1645  0000C8                     lcdNibble@temp:
  1646                           	opt stack 0
  1647  0000C8                     generate_compartment_array@step:
  1648                           	opt stack 0
  1649  0000C8                     ___awdiv@dividend:
  1650                           	opt stack 0
  1651  0000C8                     ___lwdiv@dividend:
  1652                           	opt stack 0
  1653  0000C8                     ___lldiv@dividend:
  1654                           	opt stack 0
  1655                           
  1656                           ; 4 bytes @ 0x0
  1657  0000C8                     	ds	1
  1658  0000C9                     lcdNibble@data:
  1659                           	opt stack 0
  1660  0000C9                     I2C_Master_Read@ackBit:
  1661                           	opt stack 0
  1662  0000C9                     _isdigit$1307:
  1663                           	opt stack 0
  1664  0000C9                     I2C_Master_Write@byteToWrite:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x1
  1668  0000C9                     	ds	1
  1669  0000CA                     ??_generate_compartment_array:
  1670  0000CA                     ??_readADC:
  1671  0000CA                     lcdInst@data:
  1672                           	opt stack 0
  1673  0000CA                     putch@data:
  1674                           	opt stack 0
  1675  0000CA                     I2C_Master_Read@receivedByte:
  1676                           	opt stack 0
  1677  0000CA                     isdigit@c:
  1678                           	opt stack 0
  1679  0000CA                     ___awdiv@divisor:
  1680                           	opt stack 0
  1681  0000CA                     ___lwdiv@divisor:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x2
  1685  0000CA                     	ds	1
  1686  0000CB                     ??_initLCD:
  1687  0000CB                     I2C_sendData@char_data:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x3
  1691  0000CB                     	ds	1
  1692  0000CC                     readADC@channel:
  1693                           	opt stack 0
  1694  0000CC                     ___awdiv@counter:
  1695                           	opt stack 0
  1696  0000CC                     ___lwdiv@quotient:
  1697                           	opt stack 0
  1698  0000CC                     ___lldiv@divisor:
  1699                           	opt stack 0
  1700                           
  1701                           ; 4 bytes @ 0x4
  1702  0000CC                     	ds	1
  1703  0000CD                     ___awdiv@sign:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x5
  1707  0000CD                     	ds	1
  1708  0000CE                     ___lwdiv@counter:
  1709                           	opt stack 0
  1710  0000CE                     ___awdiv@quotient:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x6
  1714  0000CE                     	ds	1
  1715  0000CF                     ?___lwmod:
  1716                           	opt stack 0
  1717  0000CF                     ___lwmod@dividend:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x7
  1721  0000CF                     	ds	1
  1722  0000D0                     ?___wmul:
  1723                           	opt stack 0
  1724  0000D0                     ___wmul@multiplier:
  1725                           	opt stack 0
  1726  0000D0                     ___lldiv@quotient:
  1727                           	opt stack 0
  1728                           
  1729                           ; 4 bytes @ 0x8
  1730  0000D0                     	ds	1
  1731  0000D1                     ___lwmod@divisor:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x9
  1735  0000D1                     	ds	1
  1736  0000D2                     ___wmul@multiplicand:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0xA
  1740  0000D2                     	ds	1
  1741  0000D3                     ___lwmod@counter:
  1742                           	opt stack 0
  1743                           
  1744                           ; 1 bytes @ 0xB
  1745  0000D3                     	ds	1
  1746  0000D4                     ___lldiv@counter:
  1747                           	opt stack 0
  1748  0000D4                     ___wmul@product:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0xC
  1752  0000D4                     	ds	1
  1753  0000D5                     I2C_Master_Init@clockFreq:
  1754                           	opt stack 0
  1755                           
  1756                           ; 4 bytes @ 0xD
  1757  0000D5                     	ds	1
  1758  0000D6                     ??_get_RTC_initial:
  1759  0000D6                     ??_get_RTC_final:
  1760  0000D6                     ?_printf:
  1761                           	opt stack 0
  1762  0000D6                     printf@f:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0xE
  1766  0000D6                     	ds	3
  1767  0000D9                     ??_I2C_Master_Init:
  1768                           
  1769                           ; 1 bytes @ 0x11
  1770  0000D9                     	ds	1
  1771  0000DA                     ??_printf:
  1772                           
  1773                           ; 1 bytes @ 0x12
  1774  0000DA                     	ds	4
  1775  0000DE                     printf@idx:
  1776                           	opt stack 0
  1777                           
  1778                           ; 1 bytes @ 0x16
  1779  0000DE                     	ds	1
  1780  0000DF                     printf@prec:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0x17
  1784  0000DF                     	ds	1
  1785  0000E0                     printf@cp:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x18
  1789  0000E0                     	ds	2
  1790  0000E2                     printf@ap:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x1A
  1794  0000E2                     	ds	2
  1795  0000E4                     printf@len:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x1C
  1799  0000E4                     	ds	2
  1800  0000E6                     printf@val:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x1E
  1804  0000E6                     	ds	2
  1805  0000E8                     printf@flag:
  1806                           	opt stack 0
  1807                           
  1808                           ; 1 bytes @ 0x20
  1809  0000E8                     	ds	1
  1810  0000E9                     printf@width:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x21
  1814  0000E9                     	ds	2
  1815  0000EB                     printf@c:
  1816                           	opt stack 0
  1817                           
  1818                           ; 1 bytes @ 0x23
  1819  0000EB                     	ds	1
  1820  0000EC                     ??_main:
  1821                           
  1822                           ; 1 bytes @ 0x24
  1823  0000EC                     	ds	2
  1824  0000EE                     _main$1696:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x26
  1828  0000EE                     	ds	2
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1l	equ	0xFE1
  1837                           
  1838                           	psect	cstackCOMRAM
  1839  000001                     __pcstackCOMRAM:
  1840                           	opt stack 0
  1841  000001                     ??i2_I2C_Master_Wait:
  1842  000001                     ??i2_isdigit:
  1843  000001                     ?_check:
  1844                           	opt stack 0
  1845  000001                     ?_strcmp:
  1846                           	opt stack 0
  1847  000001                     ?___awmod:
  1848                           	opt stack 0
  1849  000001                     ?i2___wmul:
  1850                           	opt stack 0
  1851  000001                     ?i2___awdiv:
  1852                           	opt stack 0
  1853  000001                     ?i2___lwdiv:
  1854                           	opt stack 0
  1855  000001                     ?i2___lldiv:
  1856                           	opt stack 0
  1857  000001                     i2lcdNibble@temp:
  1858                           	opt stack 0
  1859  000001                     ___awmod@dividend:
  1860                           	opt stack 0
  1861  000001                     strcat@to:
  1862                           	opt stack 0
  1863  000001                     strcmp@s1:
  1864                           	opt stack 0
  1865  000001                     i2generate_compartment_array@step:
  1866                           	opt stack 0
  1867  000001                     i2___wmul@multiplier:
  1868                           	opt stack 0
  1869  000001                     i2___awdiv@dividend:
  1870                           	opt stack 0
  1871  000001                     i2___lwdiv@dividend:
  1872                           	opt stack 0
  1873  000001                     i2___lldiv@dividend:
  1874                           	opt stack 0
  1875                           
  1876                           ; 4 bytes @ 0x0
  1877  000001                     	ds	1
  1878  000002                     i2lcdNibble@data:
  1879                           	opt stack 0
  1880  000002                     i2I2C_Master_Read@ackBit:
  1881                           	opt stack 0
  1882  000002                     i2_isdigit$1307:
  1883                           	opt stack 0
  1884  000002                     i2I2C_Master_Write@byteToWrite:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x1
  1888  000002                     	ds	1
  1889  000003                     ??i2_generate_compartment_array:
  1890  000003                     i2lcdInst@data:
  1891                           	opt stack 0
  1892  000003                     i2putch@data:
  1893                           	opt stack 0
  1894  000003                     i2I2C_Master_Read@receivedByte:
  1895                           	opt stack 0
  1896  000003                     i2isdigit@c:
  1897                           	opt stack 0
  1898  000003                     ___awmod@divisor:
  1899                           	opt stack 0
  1900  000003                     strcat@from:
  1901                           	opt stack 0
  1902  000003                     strcmp@s2:
  1903                           	opt stack 0
  1904  000003                     i2___wmul@multiplicand:
  1905                           	opt stack 0
  1906  000003                     i2___awdiv@divisor:
  1907                           	opt stack 0
  1908  000003                     i2___lwdiv@divisor:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x2
  1912  000003                     	ds	1
  1913  000004                     ??i2_initLCD:
  1914  000004                     
  1915                           ; 1 bytes @ 0x3
  1916  000004                     	ds	1
  1917  000005                     ??_strcmp:
  1918  000005                     ___awmod@counter:
  1919                           	opt stack 0
  1920  000005                     i2___awdiv@counter:
  1921                           	opt stack 0
  1922  000005                     strcat@cp:
  1923                           	opt stack 0
  1924  000005                     i2___wmul@product:
  1925                           	opt stack 0
  1926  000005                     i2___lwdiv@quotient:
  1927                           	opt stack 0
  1928  000005                     i2___lldiv@divisor:
  1929                           	opt stack 0
  1930                           
  1931                           ; 4 bytes @ 0x4
  1932  000005                     	ds	1
  1933  000006                     ___awmod@sign:
  1934                           	opt stack 0
  1935  000006                     strcmp@r:
  1936                           	opt stack 0
  1937  000006                     i2___awdiv@sign:
  1938                           	opt stack 0
  1939                           
  1940                           ; 1 bytes @ 0x5
  1941  000006                     	ds	1
  1942  000007                     ??_is_valid:
  1943  000007                     ?_strncmp:
  1944                           	opt stack 0
  1945  000007                     i2___lwdiv@counter:
  1946                           	opt stack 0
  1947  000007                     strcpy@to:
  1948                           	opt stack 0
  1949  000007                     strncmp@s1:
  1950                           	opt stack 0
  1951  000007                     i2___awdiv@quotient:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x6
  1955  000007                     	ds	1
  1956  000008                     ?i2___lwmod:
  1957                           	opt stack 0
  1958  000008                     i2___lwmod@dividend:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x7
  1962  000008                     	ds	1
  1963  000009                     strcpy@from:
  1964                           	opt stack 0
  1965  000009                     strncmp@s2:
  1966                           	opt stack 0
  1967  000009                     i2___lldiv@quotient:
  1968                           	opt stack 0
  1969                           
  1970                           ; 4 bytes @ 0x8
  1971  000009                     	ds	1
  1972  00000A                     i2___lwmod@divisor:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x9
  1976  00000A                     	ds	1
  1977  00000B                     strcpy@cp:
  1978                           	opt stack 0
  1979  00000B                     strncmp@len:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0xA
  1983  00000B                     	ds	1
  1984  00000C                     i2___lwmod@counter:
  1985                           	opt stack 0
  1986                           
  1987                           ; 1 bytes @ 0xB
  1988  00000C                     	ds	1
  1989  00000D                     ??_strncmp:
  1990  00000D                     ?i2_printf:
  1991                           	opt stack 0
  1992  00000D                     i2___lldiv@counter:
  1993                           	opt stack 0
  1994  00000D                     i2printf@f:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0xC
  1998  00000D                     	ds	1
  1999  00000E                     i2I2C_Master_Init@clockFreq:
  2000                           	opt stack 0
  2001                           
  2002                           ; 4 bytes @ 0xD
  2003  00000E                     	ds	4
  2004  000012                     ??i2_I2C_Master_Init:
  2005                           
  2006                           ; 1 bytes @ 0x11
  2007  000012                     	ds	7
  2008  000019                     ??i2_printf:
  2009                           
  2010                           ; 1 bytes @ 0x18
  2011  000019                     	ds	4
  2012  00001D                     i2printf@idx:
  2013                           	opt stack 0
  2014                           
  2015                           ; 1 bytes @ 0x1C
  2016  00001D                     	ds	1
  2017  00001E                     i2printf@prec:
  2018                           	opt stack 0
  2019                           
  2020                           ; 1 bytes @ 0x1D
  2021  00001E                     	ds	1
  2022  00001F                     i2printf@cp:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x1E
  2026  00001F                     	ds	2
  2027  000021                     i2printf@ap:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x20
  2031  000021                     	ds	2
  2032  000023                     i2printf@len:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x22
  2036  000023                     	ds	2
  2037  000025                     i2printf@val:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x24
  2041  000025                     	ds	2
  2042  000027                     i2printf@flag:
  2043                           	opt stack 0
  2044                           
  2045                           ; 1 bytes @ 0x26
  2046  000027                     	ds	1
  2047  000028                     i2printf@width:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x27
  2051  000028                     	ds	2
  2052  00002A                     i2printf@c:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0x29
  2056  00002A                     	ds	1
  2057  00002B                     ??_interruptHandler:
  2058                           
  2059                           ; 1 bytes @ 0x2A
  2060  00002B                     	ds	23
  2061  000042                     interruptHandler@i:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x41
  2065  000042                     	ds	2
  2066  000044                     interruptHandler@keypress:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x43
  2070  000044                     	ds	1
  2071  000045                     interruptHandler@temp:
  2072                           	opt stack 0
  2073                           
  2074                           ; 1 bytes @ 0x44
  2075  000045                     	ds	1
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           postdec1	equ	0xFE5
  2083                           fsr1l	equ	0xFE1
  2084                           
  2085 ;;
  2086 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2087 ;;
  2088 ;; *************** function _main *****************
  2089 ;; Defined at:
  2090 ;;		line 65 in file "main.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;Total ram usage:        4 bytes
  2109 ;; Hardware stack levels required when called:    7
  2110 ;; This function calls:
  2111 ;;		_I2C_Master_Init
  2112 ;;		_I2C_Master_Read
  2113 ;;		_I2C_Master_Start
  2114 ;;		_I2C_Master_Stop
  2115 ;;		_I2C_Master_Write
  2116 ;;		_I2C_sendData
  2117 ;;		___wmul
  2118 ;;		_generate_compartment_array
  2119 ;;		_get_RTC_final
  2120 ;;		_get_RTC_initial
  2121 ;;		_initLCD
  2122 ;;		_initialize
  2123 ;;		_lcdInst
  2124 ;;		_printf
  2125 ;;		_readADC
  2126 ;; This function is called by:
  2127 ;;		Startup code after reset
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text0
  2132  001000                     __ptext0:
  2133                           	opt stack 0
  2134  001000                     _main:
  2135                           	opt stack 24
  2136                           
  2137                           ;main.c: 74: LATA = 0x00;
  2138                           
  2139                           ;incstack = 0
  2140  001000  0E00               	movlw	0
  2141  001002  6E89               	movwf	3977,c	;volatile
  2142                           
  2143                           ;main.c: 75: LATB = 0x00;
  2144  001004  0E00               	movlw	0
  2145  001006  6E8A               	movwf	3978,c	;volatile
  2146                           
  2147                           ;main.c: 76: LATC = 0x00;
  2148  001008  0E00               	movlw	0
  2149  00100A  6E8B               	movwf	3979,c	;volatile
  2150                           
  2151                           ;main.c: 77: LATD = 0x00;
  2152  00100C  0E00               	movlw	0
  2153  00100E  6E8C               	movwf	3980,c	;volatile
  2154                           
  2155                           ;main.c: 78: LATE = 0x00;
  2156  001010  0E00               	movlw	0
  2157  001012  6E8D               	movwf	3981,c	;volatile
  2158                           
  2159                           ;main.c: 82: TRISA = 0xFF;
  2160  001014  6892               	setf	3986,c	;volatile
  2161                           
  2162                           ;main.c: 83: TRISB = 0xFF;
  2163  001016  6893               	setf	3987,c	;volatile
  2164                           
  2165                           ;main.c: 84: TRISC = 0x00;
  2166  001018  0E00               	movlw	0
  2167  00101A  6E94               	movwf	3988,c	;volatile
  2168                           
  2169                           ;main.c: 85: TRISD = 0x00;
  2170  00101C  0E00               	movlw	0
  2171  00101E  6E95               	movwf	3989,c	;volatile
  2172                           
  2173                           ;main.c: 86: TRISE = 0x00;
  2174  001020  0E00               	movlw	0
  2175  001022  6E96               	movwf	3990,c	;volatile
  2176                           
  2177                           ;main.c: 89: ADCON0 = 0x00;
  2178  001024  0E00               	movlw	0
  2179  001026  6EC2               	movwf	4034,c	;volatile
  2180                           
  2181                           ;main.c: 90: ADCON1 = 0b00001111;
  2182  001028  0E0F               	movlw	15
  2183  00102A  6EC1               	movwf	4033,c	;volatile
  2184                           
  2185                           ;main.c: 93: INT1IE = 1;
  2186  00102C  86F0               	bsf	intcon3,3,c	;volatile
  2187                           
  2188                           ;main.c: 94: (INTCONbits.GIE = 1);
  2189  00102E  8EF2               	bsf	intcon,7,c	;volatile
  2190                           
  2191                           ;main.c: 97: initLCD();
  2192  001030  EC72  F022         	call	_initLCD	;wreg free
  2193  001034                     
  2194                           ;main.c: 102: if (mode == 0){
  2195  001034  0100               	movlb	0	; () banked
  2196  001036  51BA               	movf	_mode& (0+255),w,b
  2197  001038  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2198  00103A  A4D8               	btfss	status,2,c
  2199  00103C  D032               	goto	l350
  2200  00103E                     u4130:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;main.c: 104: printf("1:date and time");
  2204                           
  2205                           ; BSR set to: 0
  2206                           
  2207                           ;main.c: 103: while(1){
  2208  00103E  0E04               	movlw	low STR_1
  2209  001040  6FD6               	movwf	printf@f& (0+255),b
  2210  001042  0EFE               	movlw	high STR_1
  2211  001044  6FD7               	movwf	(printf@f+1)& (0+255),b
  2212  001046  ECC0  F016         	call	_printf	;wreg free
  2213                           
  2214                           ;main.c: 105: lcdInst(0xC0);;
  2215  00104A  0EC0               	movlw	192
  2216  00104C  EC15  F024         	call	_lcdInst
  2217                           
  2218                           ;main.c: 106: printf("2:instruction");
  2219  001050  0EE4               	movlw	low STR_2
  2220  001052  0100               	movlb	0	; () banked
  2221  001054  6FD6               	movwf	printf@f& (0+255),b
  2222  001056  0EFE               	movlw	high STR_2
  2223  001058  6FD7               	movwf	(printf@f+1)& (0+255),b
  2224  00105A  ECC0  F016         	call	_printf	;wreg free
  2225                           
  2226                           ;main.c: 107: _delay((unsigned long)((300)*(40000000/4000.0)));
  2227  00105E  0E10               	movlw	16
  2228  001060  0100               	movlb	0	; () banked
  2229  001062  6FED               	movwf	(??_main+1)& (0+255),b
  2230  001064  0E39               	movlw	57
  2231  001066  6FEC               	movwf	??_main& (0+255),b
  2232  001068  0E0D               	movlw	13
  2233  00106A                     u5107:
  2234  00106A  2EE8               	decfsz	wreg,f,c
  2235  00106C  D7FE               	bra	u5107
  2236  00106E  2FEC               	decfsz	??_main& (0+255),f,b
  2237  001070  D7FC               	bra	u5107
  2238  001072  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2239  001074  D7FA               	bra	u5107
  2240  001076  D000               	nop2	
  2241                           
  2242                           ;main.c: 108: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2243  001078  0E80               	movlw	128
  2244  00107A  EC15  F024         	call	_lcdInst
  2245  00107E  0E41               	movlw	65
  2246  001080  0100               	movlb	0	; () banked
  2247  001082  6FEC               	movwf	??_main& (0+255),b
  2248  001084  0EEE               	movlw	238
  2249  001086                     u5117:
  2250  001086  2EE8               	decfsz	wreg,f,c
  2251  001088  D7FE               	bra	u5117
  2252  00108A  2FEC               	decfsz	??_main& (0+255),f,b
  2253  00108C  D7FC               	bra	u5117
  2254  00108E  F000               	nop	
  2255                           
  2256                           ;main.c: 109: if (change_mode == 1){
  2257  001090  0100               	movlb	0	; () banked
  2258  001092  05B8               	decf	_change_mode& (0+255),w,b
  2259  001094  11B9               	iorwf	(_change_mode+1)& (0+255),w,b
  2260  001096  A4D8               	btfss	status,2,c
  2261  001098  D7D2               	goto	u4130
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 110: mode = 1;
  2265  00109A  0E00               	movlw	0
  2266  00109C  6FBB               	movwf	(_mode+1)& (0+255),b
  2267  00109E  0E01               	movlw	1
  2268  0010A0  6FBA               	movwf	_mode& (0+255),b
  2269  0010A2                     l350:
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 112: }
  2273                           ;main.c: 113: }
  2274                           ;main.c: 115: }
  2275                           ;main.c: 118: if (mode == 1){
  2276                           
  2277                           ; BSR set to: 0
  2278                           
  2279                           ; BSR set to: 0
  2280  0010A2  05BA               	decf	_mode& (0+255),w,b
  2281  0010A4  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2282  0010A6  A4D8               	btfss	status,2,c
  2283  0010A8  D128               	goto	l352
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 120: initLCD();
  2287  0010AA  EC72  F022         	call	_initLCD	;wreg free
  2288  0010AE                     
  2289                           ;main.c: 123: if (state == 0){
  2290  0010AE  0100               	movlb	0	; () banked
  2291  0010B0  51AE               	movf	_state& (0+255),w,b
  2292  0010B2  11AF               	iorwf	(_state+1)& (0+255),w,b
  2293  0010B4  A4D8               	btfss	status,2,c
  2294  0010B6  D023               	goto	l354
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;main.c: 125: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2298  0010B8  0E80               	movlw	128
  2299  0010BA  EC15  F024         	call	_lcdInst
  2300  0010BE  0E41               	movlw	65
  2301  0010C0  0100               	movlb	0	; () banked
  2302  0010C2  6FEC               	movwf	??_main& (0+255),b
  2303  0010C4  0EEE               	movlw	238
  2304  0010C6                     u5127:
  2305  0010C6  2EE8               	decfsz	wreg,f,c
  2306  0010C8  D7FE               	bra	u5127
  2307  0010CA  2FEC               	decfsz	??_main& (0+255),f,b
  2308  0010CC  D7FC               	bra	u5127
  2309  0010CE  F000               	nop	
  2310                           
  2311                           ;main.c: 126: printf("assembly step:");
  2312  0010D0  0E33               	movlw	low STR_3
  2313  0010D2  0100               	movlb	0	; () banked
  2314  0010D4  6FD6               	movwf	printf@f& (0+255),b
  2315  0010D6  0EFE               	movlw	high STR_3
  2316  0010D8  6FD7               	movwf	(printf@f+1)& (0+255),b
  2317  0010DA  ECC0  F016         	call	_printf	;wreg free
  2318                           
  2319                           ;main.c: 127: _delay((unsigned long)((500)*(40000000/4000.0)));
  2320  0010DE  0E1A               	movlw	26
  2321  0010E0  0100               	movlb	0	; () banked
  2322  0010E2  6FED               	movwf	(??_main+1)& (0+255),b
  2323  0010E4  0E5E               	movlw	94
  2324  0010E6  6FEC               	movwf	??_main& (0+255),b
  2325  0010E8  0E6E               	movlw	110
  2326  0010EA                     u5137:
  2327  0010EA  2EE8               	decfsz	wreg,f,c
  2328  0010EC  D7FE               	bra	u5137
  2329  0010EE  2FEC               	decfsz	??_main& (0+255),f,b
  2330  0010F0  D7FC               	bra	u5137
  2331  0010F2  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2332  0010F4  D7FA               	bra	u5137
  2333  0010F6  F000               	nop	
  2334                           
  2335                           ;main.c: 128: lcdInst(0xC0);;
  2336  0010F8  0EC0               	movlw	192
  2337  0010FA  EC15  F024         	call	_lcdInst
  2338  0010FE                     l354:
  2339                           
  2340                           ;main.c: 129: }
  2341                           ;main.c: 130: if (state ==1){
  2342  0010FE  0100               	movlb	0	; () banked
  2343  001100  05AE               	decf	_state& (0+255),w,b
  2344  001102  11AF               	iorwf	(_state+1)& (0+255),w,b
  2345  001104  A4D8               	btfss	status,2,c
  2346  001106  D024               	goto	l355
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;main.c: 131: initLCD();
  2350  001108  EC72  F022         	call	_initLCD	;wreg free
  2351                           
  2352                           ;main.c: 132: printf("fastener set:");
  2353  00110C  0EC8               	movlw	low STR_4
  2354  00110E  0100               	movlb	0	; () banked
  2355  001110  6FD6               	movwf	printf@f& (0+255),b
  2356  001112  0EFE               	movlw	high STR_4
  2357  001114  6FD7               	movwf	(printf@f+1)& (0+255),b
  2358  001116  ECC0  F016         	call	_printf	;wreg free
  2359                           
  2360                           ;main.c: 133: lcdInst(0xC0);;
  2361  00111A  0EC0               	movlw	192
  2362  00111C  EC15  F024         	call	_lcdInst
  2363                           
  2364                           ;main.c: 134: printf("%s",current_set);
  2365  001120  0EF8               	movlw	low STR_5
  2366  001122  0100               	movlb	0	; () banked
  2367  001124  6FD6               	movwf	printf@f& (0+255),b
  2368  001126  0EFF               	movlw	high STR_5
  2369  001128  6FD7               	movwf	(printf@f+1)& (0+255),b
  2370  00112A  0EC3               	movlw	low _current_set
  2371  00112C  6FD8               	movwf	(?_printf+2)& (0+255),b
  2372  00112E  0E00               	movlw	high _current_set
  2373  001130  6FD9               	movwf	(?_printf+3)& (0+255),b
  2374  001132  ECC0  F016         	call	_printf	;wreg free
  2375                           
  2376                           ;main.c: 135: _delay((unsigned long)((500)*(40000000/4000.0)));
  2377  001136  0E1A               	movlw	26
  2378  001138  0100               	movlb	0	; () banked
  2379  00113A  6FED               	movwf	(??_main+1)& (0+255),b
  2380  00113C  0E5E               	movlw	94
  2381  00113E  6FEC               	movwf	??_main& (0+255),b
  2382  001140  0E6E               	movlw	110
  2383  001142                     u5147:
  2384  001142  2EE8               	decfsz	wreg,f,c
  2385  001144  D7FE               	bra	u5147
  2386  001146  2FEC               	decfsz	??_main& (0+255),f,b
  2387  001148  D7FC               	bra	u5147
  2388  00114A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2389  00114C  D7FA               	bra	u5147
  2390  00114E  F000               	nop	
  2391  001150                     l355:
  2392                           
  2393                           ;main.c: 136: }
  2394                           ;main.c: 138: if (state == 2){
  2395  001150  0E02               	movlw	2
  2396  001152  0100               	movlb	0	; () banked
  2397  001154  19AE               	xorwf	_state& (0+255),w,b
  2398  001156  11AF               	iorwf	(_state+1)& (0+255),w,b
  2399  001158  A4D8               	btfss	status,2,c
  2400  00115A  D016               	goto	l356
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;main.c: 139: initLCD();
  2404  00115C  EC72  F022         	call	_initLCD	;wreg free
  2405                           
  2406                           ;main.c: 140: printf("number:");
  2407  001160  0EA4               	movlw	low STR_6
  2408  001162  0100               	movlb	0	; () banked
  2409  001164  6FD6               	movwf	printf@f& (0+255),b
  2410  001166  0EFF               	movlw	high STR_6
  2411  001168  6FD7               	movwf	(printf@f+1)& (0+255),b
  2412  00116A  ECC0  F016         	call	_printf	;wreg free
  2413                           
  2414                           ;main.c: 141: _delay((unsigned long)((500)*(40000000/4000.0)));
  2415  00116E  0E1A               	movlw	26
  2416  001170  0100               	movlb	0	; () banked
  2417  001172  6FED               	movwf	(??_main+1)& (0+255),b
  2418  001174  0E5E               	movlw	94
  2419  001176  6FEC               	movwf	??_main& (0+255),b
  2420  001178  0E6E               	movlw	110
  2421  00117A                     u5157:
  2422  00117A  2EE8               	decfsz	wreg,f,c
  2423  00117C  D7FE               	bra	u5157
  2424  00117E  2FEC               	decfsz	??_main& (0+255),f,b
  2425  001180  D7FC               	bra	u5157
  2426  001182  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2427  001184  D7FA               	bra	u5157
  2428  001186  F000               	nop	
  2429  001188                     l356:
  2430                           
  2431                           ;main.c: 142: }
  2432                           ;main.c: 144: if (state == 3){
  2433  001188  0E03               	movlw	3
  2434  00118A  0100               	movlb	0	; () banked
  2435  00118C  19AE               	xorwf	_state& (0+255),w,b
  2436  00118E  11AF               	iorwf	(_state+1)& (0+255),w,b
  2437  001190  A4D8               	btfss	status,2,c
  2438  001192  D78D               	goto	l353
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;main.c: 145: initLCD();
  2442  001194  EC72  F022         	call	_initLCD	;wreg free
  2443                           
  2444                           ;main.c: 146: printf("Done!");
  2445  001198  0EBA               	movlw	low STR_7
  2446  00119A  0100               	movlb	0	; () banked
  2447  00119C  6FD6               	movwf	printf@f& (0+255),b
  2448  00119E  0EFF               	movlw	high STR_7
  2449  0011A0  6FD7               	movwf	(printf@f+1)& (0+255),b
  2450  0011A2  ECC0  F016         	call	_printf	;wreg free
  2451                           
  2452                           ;main.c: 147: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2453  0011A6  0E33               	movlw	51
  2454  0011A8  0100               	movlb	0	; () banked
  2455  0011AA  6FED               	movwf	(??_main+1)& (0+255),b
  2456  0011AC  0EBB               	movlw	187
  2457  0011AE  6FEC               	movwf	??_main& (0+255),b
  2458  0011B0  0EDF               	movlw	223
  2459  0011B2                     u5167:
  2460  0011B2  2EE8               	decfsz	wreg,f,c
  2461  0011B4  D7FE               	bra	u5167
  2462  0011B6  2FEC               	decfsz	??_main& (0+255),f,b
  2463  0011B8  D7FC               	bra	u5167
  2464  0011BA  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2465  0011BC  D7FA               	bra	u5167
  2466  0011BE  D000               	nop2	
  2467                           
  2468                           ;main.c: 148: initLCD();
  2469  0011C0  EC72  F022         	call	_initLCD	;wreg free
  2470                           
  2471                           ;main.c: 149: printf("assembly step:%d",assembly_step);
  2472  0011C4  0ED2               	movlw	low STR_8
  2473  0011C6  0100               	movlb	0	; () banked
  2474  0011C8  6FD6               	movwf	printf@f& (0+255),b
  2475  0011CA  0EFD               	movlw	high STR_8
  2476  0011CC  6FD7               	movwf	(printf@f+1)& (0+255),b
  2477  0011CE  C0AC  F0D8         	movff	_assembly_step,?_printf+2
  2478  0011D2  C0AD  F0D9         	movff	_assembly_step+1,?_printf+3
  2479  0011D6  ECC0  F016         	call	_printf	;wreg free
  2480                           
  2481                           ;main.c: 150: _delay((unsigned long)((600)*(40000000/4000.0)));
  2482  0011DA  0E1F               	movlw	31
  2483  0011DC  0100               	movlb	0	; () banked
  2484  0011DE  6FED               	movwf	(??_main+1)& (0+255),b
  2485  0011E0  0E71               	movlw	113
  2486  0011E2  6FEC               	movwf	??_main& (0+255),b
  2487  0011E4  0E1E               	movlw	30
  2488  0011E6                     u5177:
  2489  0011E6  2EE8               	decfsz	wreg,f,c
  2490  0011E8  D7FE               	bra	u5177
  2491  0011EA  2FEC               	decfsz	??_main& (0+255),f,b
  2492  0011EC  D7FC               	bra	u5177
  2493  0011EE  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2494  0011F0  D7FA               	bra	u5177
  2495  0011F2  F000               	nop	
  2496                           
  2497                           ;main.c: 151: for ( i=0; i<assembly_step; i++){
  2498  0011F4  0E00               	movlw	0
  2499  0011F6  0100               	movlb	0	; () banked
  2500  0011F8  6FBF               	movwf	(_i+1)& (0+255),b
  2501  0011FA  0E00               	movlw	0
  2502  0011FC  6FBE               	movwf	_i& (0+255),b
  2503  0011FE  D067               	goto	l358
  2504  001200                     
  2505                           ; BSR set to: 0
  2506                           ;main.c: 153: initLCD();
  2507                           
  2508                           ; BSR set to: 0
  2509  001200  EC72  F022         	call	_initLCD	;wreg free
  2510                           
  2511                           ;main.c: 155: printf("step");
  2512  001204  0EE3               	movlw	low STR_9
  2513  001206  0100               	movlb	0	; () banked
  2514  001208  6FD6               	movwf	printf@f& (0+255),b
  2515  00120A  0EFF               	movlw	high STR_9
  2516  00120C  6FD7               	movwf	(printf@f+1)& (0+255),b
  2517  00120E  ECC0  F016         	call	_printf	;wreg free
  2518                           
  2519                           ;main.c: 156: printf("%d", i+1);
  2520  001212  0E4E               	movlw	low (STR_60+12)
  2521  001214  0100               	movlb	0	; () banked
  2522  001216  6FD6               	movwf	printf@f& (0+255),b
  2523  001218  0EFE               	movlw	high (STR_60+12)
  2524  00121A  6FD7               	movwf	(printf@f+1)& (0+255),b
  2525  00121C  0E01               	movlw	1
  2526  00121E  25BE               	addwf	_i& (0+255),w,b
  2527  001220  6FD8               	movwf	(?_printf+2)& (0+255),b
  2528  001222  0E00               	movlw	0
  2529  001224  21BF               	addwfc	(_i+1)& (0+255),w,b
  2530  001226  6FD9               	movwf	(?_printf+3)& (0+255),b
  2531  001228  ECC0  F016         	call	_printf	;wreg free
  2532                           
  2533                           ;main.c: 157: printf(":");
  2534  00122C  0E02               	movlw	low (STR_56+14)
  2535  00122E  0100               	movlb	0	; () banked
  2536  001230  6FD6               	movwf	printf@f& (0+255),b
  2537  001232  0EFE               	movlw	high (STR_56+14)
  2538  001234  6FD7               	movwf	(printf@f+1)& (0+255),b
  2539  001236  ECC0  F016         	call	_printf	;wreg free
  2540                           
  2541                           ;main.c: 158: printf("%s", final_set[i]);
  2542  00123A  C0BE  F0D0         	movff	_i,___wmul@multiplier
  2543  00123E  C0BF  F0D1         	movff	_i+1,___wmul@multiplier+1
  2544  001242  0E00               	movlw	0
  2545  001244  0100               	movlb	0	; () banked
  2546  001246  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2547  001248  0E05               	movlw	5
  2548  00124A  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  2549  00124C  EC9C  F023         	call	___wmul	;wreg free
  2550  001250  0EA6               	movlw	low _final_set
  2551  001252  0100               	movlb	0	; () banked
  2552  001254  25D0               	addwf	?___wmul& (0+255),w,b
  2553  001256  6FEE               	movwf	_main$1696& (0+255),b
  2554  001258  0E01               	movlw	high _final_set
  2555  00125A  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  2556  00125C  6FEF               	movwf	(_main$1696+1)& (0+255),b
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;main.c: 158: printf("%s", final_set[i]);
  2560  00125E  0EF8               	movlw	low STR_5
  2561  001260  6FD6               	movwf	printf@f& (0+255),b
  2562  001262  0EFF               	movlw	high STR_5
  2563  001264  6FD7               	movwf	(printf@f+1)& (0+255),b
  2564  001266  C0EE  F0D8         	movff	_main$1696,?_printf+2
  2565  00126A  C0EF  F0D9         	movff	_main$1696+1,?_printf+3
  2566  00126E  ECC0  F016         	call	_printf	;wreg free
  2567                           
  2568                           ;main.c: 159: printf(",");
  2569  001272  0EFB               	movlw	low STR_13
  2570  001274  0100               	movlb	0	; () banked
  2571  001276  6FD6               	movwf	printf@f& (0+255),b
  2572  001278  0EFF               	movlw	high STR_13
  2573  00127A  6FD7               	movwf	(printf@f+1)& (0+255),b
  2574  00127C  ECC0  F016         	call	_printf	;wreg free
  2575                           
  2576                           ;main.c: 160: printf("%d",final_number[i]);
  2577  001280  0E4E               	movlw	low (STR_60+12)
  2578  001282  0100               	movlb	0	; () banked
  2579  001284  6FD6               	movwf	printf@f& (0+255),b
  2580  001286  0EFE               	movlw	high (STR_60+12)
  2581  001288  6FD7               	movwf	(printf@f+1)& (0+255),b
  2582  00128A  90D8               	bcf	status,0,c
  2583  00128C  35BE               	rlcf	_i& (0+255),w,b
  2584  00128E  6ED9               	movwf	fsr2l,c
  2585  001290  35BF               	rlcf	(_i+1)& (0+255),w,b
  2586  001292  6EDA               	movwf	fsr2h,c
  2587  001294  0E50               	movlw	low _final_number
  2588  001296  26D9               	addwf	fsr2l,f,c
  2589  001298  0E01               	movlw	high _final_number
  2590  00129A  22DA               	addwfc	fsr2h,f,c
  2591  00129C  CFDE F0D8          	movff	postinc2,?_printf+2
  2592  0012A0  CFDD F0D9          	movff	postdec2,?_printf+3
  2593  0012A4  ECC0  F016         	call	_printf	;wreg free
  2594                           
  2595                           ;main.c: 161: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2596  0012A8  0E33               	movlw	51
  2597  0012AA  0100               	movlb	0	; () banked
  2598  0012AC  6FED               	movwf	(??_main+1)& (0+255),b
  2599  0012AE  0EBB               	movlw	187
  2600  0012B0  6FEC               	movwf	??_main& (0+255),b
  2601  0012B2  0EDF               	movlw	223
  2602  0012B4                     u5187:
  2603  0012B4  2EE8               	decfsz	wreg,f,c
  2604  0012B6  D7FE               	bra	u5187
  2605  0012B8  2FEC               	decfsz	??_main& (0+255),f,b
  2606  0012BA  D7FC               	bra	u5187
  2607  0012BC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2608  0012BE  D7FA               	bra	u5187
  2609  0012C0  D000               	nop2	
  2610                           
  2611                           ;main.c: 162: lcdInst(0xC0);;
  2612  0012C2  0EC0               	movlw	192
  2613  0012C4  EC15  F024         	call	_lcdInst
  2614  0012C8  0100               	movlb	0	; () banked
  2615  0012CA  4BBE               	infsnz	_i& (0+255),f,b
  2616  0012CC  2BBF               	incf	(_i+1)& (0+255),f,b
  2617  0012CE                     l358:
  2618                           
  2619                           ; BSR set to: 0
  2620                           
  2621                           ; BSR set to: 0
  2622  0012CE  51AC               	movf	_assembly_step& (0+255),w,b
  2623  0012D0  5DBE               	subwf	_i& (0+255),w,b
  2624  0012D2  51AD               	movf	(_assembly_step+1)& (0+255),w,b
  2625  0012D4  59BF               	subwfb	(_i+1)& (0+255),w,b
  2626  0012D6  A0D8               	btfss	status,0,c
  2627  0012D8  D793               	goto	l359
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;main.c: 167: }
  2631                           ;main.c: 168: mode = 2;
  2632                           
  2633                           ; BSR set to: 0
  2634  0012DA  0E00               	movlw	0
  2635  0012DC  6FBB               	movwf	(_mode+1)& (0+255),b
  2636  0012DE  0E02               	movlw	2
  2637  0012E0  6FBA               	movwf	_mode& (0+255),b
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 169: printf("change mode 2");
  2641  0012E2  0EBA               	movlw	low STR_15
  2642  0012E4  6FD6               	movwf	printf@f& (0+255),b
  2643  0012E6  0EFE               	movlw	high STR_15
  2644  0012E8  6FD7               	movwf	(printf@f+1)& (0+255),b
  2645  0012EA  ECC0  F016         	call	_printf	;wreg free
  2646                           
  2647                           ;main.c: 192: }
  2648                           ;main.c: 194: }
  2649                           ;main.c: 195: generate_compartment_array(assembly_step);
  2650                           
  2651                           ;main.c: 190: break;
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 189: printf("change mode 2");
  2655                           
  2656                           ;main.c: 188: mode = 2;
  2657                           
  2658                           ;main.c: 182: get_RTC_initial();
  2659                           
  2660                           ;main.c: 177: printf("change mode 2");
  2661                           
  2662                           ;main.c: 176: initLCD();
  2663                           
  2664                           ;main.c: 173: printf("start operation");
  2665                           
  2666                           ;main.c: 172: initLCD();
  2667                           
  2668                           ;main.c: 170: break;
  2669  0012EE  C0AC  F0C8         	movff	_assembly_step,generate_compartment_array@step
  2670  0012F2  C0AD  F0C9         	movff	_assembly_step+1,generate_compartment_array@step+1
  2671  0012F6  EC27  F01C         	call	_generate_compartment_array	;wreg free
  2672  0012FA                     l352:
  2673                           
  2674                           ;main.c: 199: }
  2675                           ;main.c: 212: if (mode == 2){
  2676  0012FA  0E02               	movlw	2
  2677  0012FC  0100               	movlb	0	; () banked
  2678  0012FE  19BA               	xorwf	_mode& (0+255),w,b
  2679  001300  11BB               	iorwf	(_mode+1)& (0+255),w,b
  2680  001302  A4D8               	btfss	status,2,c
  2681  001304  D697               	goto	l346
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 214: (INTCONbits.GIE = 0);
  2685  001306  9EF2               	bcf	intcon,7,c	;volatile
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 215: initLCD();
  2689  001308  EC72  F022         	call	_initLCD	;wreg free
  2690                           
  2691                           ;main.c: 216: printf("mode 2");
  2692  00130C  0EC1               	movlw	low (STR_15+7)
  2693  00130E  0100               	movlb	0	; () banked
  2694  001310  6FD6               	movwf	printf@f& (0+255),b
  2695  001312  0EFE               	movlw	high (STR_15+7)
  2696  001314  6FD7               	movwf	(printf@f+1)& (0+255),b
  2697  001316  ECC0  F016         	call	_printf	;wreg free
  2698                           
  2699                           ;main.c: 217: _delay((unsigned long)((200)*(40000000/4000.0)));
  2700  00131A  0E0B               	movlw	11
  2701  00131C  0100               	movlb	0	; () banked
  2702  00131E  6FED               	movwf	(??_main+1)& (0+255),b
  2703  001320  0E26               	movlw	38
  2704  001322  6FEC               	movwf	??_main& (0+255),b
  2705  001324  0E5D               	movlw	93
  2706  001326                     u5197:
  2707  001326  2EE8               	decfsz	wreg,f,c
  2708  001328  D7FE               	bra	u5197
  2709  00132A  2FEC               	decfsz	??_main& (0+255),f,b
  2710  00132C  D7FC               	bra	u5197
  2711  00132E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2712  001330  D7FA               	bra	u5197
  2713  001332  D000               	nop2	
  2714                           
  2715                           ;main.c: 219: I2C_Master_Init(100000);
  2716  001334  0EA0               	movlw	160
  2717  001336  0100               	movlb	0	; () banked
  2718  001338  6FD5               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2719  00133A  0E86               	movlw	134
  2720  00133C  6FD6               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2721  00133E  0E01               	movlw	1
  2722  001340  6FD7               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2723  001342  0E00               	movlw	0
  2724  001344  6FD8               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2725  001346  ECC1  F021         	call	_I2C_Master_Init	;wreg free
  2726                           
  2727                           ;main.c: 220: I2C_Master_Start();
  2728  00134A  EC63  F024         	call	_I2C_Master_Start	;wreg free
  2729                           
  2730                           ;main.c: 223: I2C_Master_Write(0b00010000);
  2731  00134E  0E00               	movlw	0
  2732  001350  0100               	movlb	0	; () banked
  2733  001352  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2734  001354  0E10               	movlw	16
  2735  001356  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2736  001358  EC55  F024         	call	_I2C_Master_Write	;wreg free
  2737                           
  2738                           ;main.c: 224: I2C_Master_Stop();
  2739  00135C  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  2740                           
  2741                           ;main.c: 227: I2C_sendData(rotate_gear);
  2742  001360  0100               	movlb	0	; () banked
  2743  001362  51FE               	movf	_rotate_gear& (0+255),w,b
  2744  001364  ECB0  F023         	call	_I2C_sendData
  2745  001368                     
  2746                           ;main.c: 233: I2C_Master_Start();
  2747  001368  EC63  F024         	call	_I2C_Master_Start	;wreg free
  2748                           
  2749                           ;main.c: 234: I2C_Master_Write(0b00010001);
  2750  00136C  0E00               	movlw	0
  2751  00136E  0100               	movlb	0	; () banked
  2752  001370  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2753  001372  0E11               	movlw	17
  2754  001374  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2755  001376  EC55  F024         	call	_I2C_Master_Write	;wreg free
  2756                           
  2757                           ;main.c: 235: openHandle_data = I2C_Master_Read(1);
  2758  00137A  0E01               	movlw	1
  2759  00137C  EC87  F023         	call	_I2C_Master_Read
  2760  001380  0100               	movlb	0	; () banked
  2761  001382  6FC1               	movwf	_openHandle_data& (0+255),b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 236: I2C_Master_Stop();
  2765  001384  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  2766                           
  2767                           ;main.c: 238: if (openHandle_data == '0'){
  2768  001388  0E30               	movlw	48
  2769  00138A  0100               	movlb	0	; () banked
  2770  00138C  19C1               	xorwf	_openHandle_data& (0+255),w,b
  2771  00138E  A4D8               	btfss	status,2,c
  2772  001390  D7EB               	goto	l364
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;main.c: 239: initLCD();
  2776  001392  EC72  F022         	call	_initLCD	;wreg free
  2777                           
  2778                           ;main.c: 240: printf("C0 is found");
  2779  001396  0E26               	movlw	low STR_20
  2780  001398  0100               	movlb	0	; () banked
  2781  00139A  6FD6               	movwf	printf@f& (0+255),b
  2782  00139C  0EFF               	movlw	high STR_20
  2783  00139E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2784  0013A0  ECC0  F016         	call	_printf	;wreg free
  2785                           
  2786                           ;main.c: 241: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2787  0013A4  0E80               	movlw	128
  2788  0013A6  EC15  F024         	call	_lcdInst
  2789  0013AA  0E41               	movlw	65
  2790  0013AC  0100               	movlb	0	; () banked
  2791  0013AE  6FEC               	movwf	??_main& (0+255),b
  2792  0013B0  0EEE               	movlw	238
  2793  0013B2                     u5207:
  2794  0013B2  2EE8               	decfsz	wreg,f,c
  2795  0013B4  D7FE               	bra	u5207
  2796  0013B6  2FEC               	decfsz	??_main& (0+255),f,b
  2797  0013B8  D7FC               	bra	u5207
  2798  0013BA  F000               	nop	
  2799                           
  2800                           ;main.c: 244: }
  2801                           ;main.c: 245: }
  2802                           ;main.c: 251: I2C_Master_Init(100000);
  2803                           
  2804                           ;main.c: 243: break;
  2805  0013BC  0EA0               	movlw	160
  2806  0013BE  0100               	movlb	0	; () banked
  2807  0013C0  6FD5               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2808  0013C2  0E86               	movlw	134
  2809  0013C4  6FD6               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2810  0013C6  0E01               	movlw	1
  2811  0013C8  6FD7               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2812  0013CA  0E00               	movlw	0
  2813  0013CC  6FD8               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2814  0013CE  ECC1  F021         	call	_I2C_Master_Init	;wreg free
  2815                           
  2816                           ;main.c: 252: I2C_Master_Start();
  2817  0013D2  EC63  F024         	call	_I2C_Master_Start	;wreg free
  2818                           
  2819                           ;main.c: 255: I2C_Master_Write(0b00010000);
  2820  0013D6  0E00               	movlw	0
  2821  0013D8  0100               	movlb	0	; () banked
  2822  0013DA  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2823  0013DC  0E10               	movlw	16
  2824  0013DE  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2825  0013E0  EC55  F024         	call	_I2C_Master_Write	;wreg free
  2826                           
  2827                           ;main.c: 256: I2C_Master_Stop();
  2828  0013E4  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  2829                           
  2830                           ;main.c: 258: I2C_sendData(15);
  2831  0013E8  0E0F               	movlw	15
  2832  0013EA  ECB0  F023         	call	_I2C_sendData
  2833                           
  2834                           ;main.c: 259: _delay((unsigned long)((200)*(40000000/4000.0)));
  2835  0013EE  0E0B               	movlw	11
  2836  0013F0  0100               	movlb	0	; () banked
  2837  0013F2  6FED               	movwf	(??_main+1)& (0+255),b
  2838  0013F4  0E26               	movlw	38
  2839  0013F6  6FEC               	movwf	??_main& (0+255),b
  2840  0013F8  0E5D               	movlw	93
  2841  0013FA                     u5217:
  2842  0013FA  2EE8               	decfsz	wreg,f,c
  2843  0013FC  D7FE               	bra	u5217
  2844  0013FE  2FEC               	decfsz	??_main& (0+255),f,b
  2845  001400  D7FC               	bra	u5217
  2846  001402  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2847  001404  D7FA               	bra	u5217
  2848  001406  D000               	nop2	
  2849                           
  2850                           ;main.c: 261: i = 0;
  2851  001408  0E00               	movlw	0
  2852  00140A  0100               	movlb	0	; () banked
  2853  00140C  6FBF               	movwf	(_i+1)& (0+255),b
  2854  00140E  0E00               	movlw	0
  2855  001410  6FBE               	movwf	_i& (0+255),b
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;main.c: 262: compartment_pos = 0;
  2859  001412  0E00               	movlw	0
  2860  001414  6FB1               	movwf	(_compartment_pos+1)& (0+255),b
  2861  001416  0E00               	movlw	0
  2862  001418  6FB0               	movwf	_compartment_pos& (0+255),b
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;main.c: 266: for (i = 0; i<8; i++){
  2866  00141A  0E00               	movlw	0
  2867  00141C  6FBF               	movwf	(_i+1)& (0+255),b
  2868  00141E  0E00               	movlw	0
  2869  001420  6FBE               	movwf	_i& (0+255),b
  2870                           
  2871                           ; BSR set to: 0
  2872  001422  51BF               	movf	(_i+1)& (0+255),w,b
  2873  001424  E105               	bnz	u4230
  2874  001426  0E08               	movlw	8
  2875  001428  5DBE               	subwf	_i& (0+255),w,b
  2876  00142A  B0D8               	btfsc	status,0,c
  2877  00142C  D2E1               	goto	u4390
  2878  00142E  D001               	goto	l368
  2879  001430                     u4230:
  2880                           
  2881                           ; BSR set to: 0
  2882  001430  D2DF               	goto	u4390
  2883  001432                     l368:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 268: initLCD();
  2887                           
  2888                           ; BSR set to: 0
  2889  001432  EC72  F022         	call	_initLCD	;wreg free
  2890                           
  2891                           ;main.c: 269: printf("processing C%d",i);
  2892  001436  0E8D               	movlw	low STR_21
  2893  001438  0100               	movlb	0	; () banked
  2894  00143A  6FD6               	movwf	printf@f& (0+255),b
  2895  00143C  0EFE               	movlw	high STR_21
  2896  00143E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2897  001440  C0BE  F0D8         	movff	_i,?_printf+2
  2898  001444  C0BF  F0D9         	movff	_i+1,?_printf+3
  2899  001448  ECC0  F016         	call	_printf	;wreg free
  2900                           
  2901                           ;main.c: 270: _delay((unsigned long)((200)*(40000000/4000.0)));
  2902  00144C  0E0B               	movlw	11
  2903  00144E  0100               	movlb	0	; () banked
  2904  001450  6FED               	movwf	(??_main+1)& (0+255),b
  2905  001452  0E26               	movlw	38
  2906  001454  6FEC               	movwf	??_main& (0+255),b
  2907  001456  0E5D               	movlw	93
  2908  001458                     u5227:
  2909  001458  2EE8               	decfsz	wreg,f,c
  2910  00145A  D7FE               	bra	u5227
  2911  00145C  2FEC               	decfsz	??_main& (0+255),f,b
  2912  00145E  D7FC               	bra	u5227
  2913  001460  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2914  001462  D7FA               	bra	u5227
  2915  001464  D000               	nop2	
  2916                           
  2917                           ;main.c: 273: if (compartment_array[compartment_pos] != 0){
  2918  001466  90D8               	bcf	status,0,c
  2919  001468  0100               	movlb	0	; () banked
  2920  00146A  35B0               	rlcf	_compartment_pos& (0+255),w,b
  2921  00146C  6ED9               	movwf	fsr2l,c
  2922  00146E  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2923  001470  6EDA               	movwf	fsr2h,c
  2924  001472  0E80               	movlw	low _compartment_array
  2925  001474  26D9               	addwf	fsr2l,f,c
  2926  001476  0E00               	movlw	high _compartment_array
  2927  001478  22DA               	addwfc	fsr2h,f,c
  2928  00147A  50DE               	movf	postinc2,w,c
  2929  00147C  10DE               	iorwf	postinc2,w,c
  2930  00147E  B4D8               	btfsc	status,2,c
  2931  001480  D288               	goto	l370
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;main.c: 277: initLCD();
  2935  001482  EC72  F022         	call	_initLCD	;wreg free
  2936                           
  2937                           ;main.c: 279: printf("B_counter:%d",B_counter);
  2938  001486  0EF2               	movlw	low STR_22
  2939  001488  0100               	movlb	0	; () banked
  2940  00148A  6FD6               	movwf	printf@f& (0+255),b
  2941  00148C  0EFE               	movlw	high STR_22
  2942  00148E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2943  001490  C0AA  F0D8         	movff	_B_counter,?_printf+2
  2944  001494  C0AB  F0D9         	movff	_B_counter+1,?_printf+3
  2945  001498  ECC0  F016         	call	_printf	;wreg free
  2946                           
  2947                           ;main.c: 280: B_counter = B_array[compartment_pos];
  2948  00149C  90D8               	bcf	status,0,c
  2949  00149E  0100               	movlb	0	; () banked
  2950  0014A0  35B0               	rlcf	_compartment_pos& (0+255),w,b
  2951  0014A2  6ED9               	movwf	fsr2l,c
  2952  0014A4  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2953  0014A6  6EDA               	movwf	fsr2h,c
  2954  0014A8  0E30               	movlw	low _B_array
  2955  0014AA  26D9               	addwf	fsr2l,f,c
  2956  0014AC  0E01               	movlw	high _B_array
  2957  0014AE  22DA               	addwfc	fsr2h,f,c
  2958  0014B0  CFDE F0AA          	movff	postinc2,_B_counter
  2959  0014B4  CFDD F0AB          	movff	postdec2,_B_counter+1
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 281: if(B_counter != 0){
  2963  0014B8  51AA               	movf	_B_counter& (0+255),w,b
  2964  0014BA  11AB               	iorwf	(_B_counter+1)& (0+255),w,b
  2965  0014BC  B4D8               	btfsc	status,2,c
  2966  0014BE  D047               	goto	l376
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;main.c: 282: I2C_sendData(motorStart_0);
  2970  0014C0  51F9               	movf	_motorStart_0& (0+255),w,b
  2971  0014C2  ECB0  F023         	call	_I2C_sendData
  2972                           
  2973                           ;main.c: 283: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2974  0014C6  0E33               	movlw	51
  2975  0014C8  0100               	movlb	0	; () banked
  2976  0014CA  6FED               	movwf	(??_main+1)& (0+255),b
  2977  0014CC  0EBB               	movlw	187
  2978  0014CE  6FEC               	movwf	??_main& (0+255),b
  2979  0014D0  0EDF               	movlw	223
  2980  0014D2                     u5237:
  2981  0014D2  2EE8               	decfsz	wreg,f,c
  2982  0014D4  D7FE               	bra	u5237
  2983  0014D6  2FEC               	decfsz	??_main& (0+255),f,b
  2984  0014D8  D7FC               	bra	u5237
  2985  0014DA  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2986  0014DC  D7FA               	bra	u5237
  2987  0014DE  D000               	nop2	
  2988                           
  2989                           ;main.c: 284: I2C_sendData(B_dispense);
  2990  0014E0  0100               	movlb	0	; () banked
  2991  0014E2  51FC               	movf	_B_dispense& (0+255),w,b
  2992  0014E4  ECB0  F023         	call	_I2C_sendData
  2993                           
  2994                           ;main.c: 285: }
  2995                           ;main.c: 287: while(B_counter > 0){
  2996  0014E8  D032               	goto	l376
  2997  0014EA                     l5466:
  2998                           
  2999                           ;main.c: 290: I2C_Master_Start();
  3000  0014EA  EC63  F024         	call	_I2C_Master_Start	;wreg free
  3001                           
  3002                           ;main.c: 291: I2C_Master_Write(0b00010001);
  3003  0014EE  0E00               	movlw	0
  3004  0014F0  0100               	movlb	0	; () banked
  3005  0014F2  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3006  0014F4  0E11               	movlw	17
  3007  0014F6  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3008  0014F8  EC55  F024         	call	_I2C_Master_Write	;wreg free
  3009                           
  3010                           ;main.c: 292: nuts_data = I2C_Master_Read(1);
  3011  0014FC  0E01               	movlw	1
  3012  0014FE  EC87  F023         	call	_I2C_Master_Read
  3013  001502  0100               	movlb	0	; () banked
  3014  001504  6FC0               	movwf	_nuts_data& (0+255),b
  3015                           
  3016                           ;main.c: 293: I2C_Master_Stop();
  3017  001506  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  3018                           
  3019                           ;main.c: 294: if (nuts_data == '2'){
  3020  00150A  0E32               	movlw	50
  3021  00150C  0100               	movlb	0	; () banked
  3022  00150E  19C0               	xorwf	_nuts_data& (0+255),w,b
  3023  001510  A4D8               	btfss	status,2,c
  3024  001512  D01D               	goto	l376
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;main.c: 295: B_counter --;
  3028  001514  07AA               	decf	_B_counter& (0+255),f,b
  3029  001516  A0D8               	btfss	status,0,c
  3030  001518  07AB               	decf	(_B_counter+1)& (0+255),f,b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;main.c: 296: initLCD();
  3034  00151A  EC72  F022         	call	_initLCD	;wreg free
  3035                           
  3036                           ;main.c: 297: printf("B_count:%d", B_counter);
  3037  00151E  0E55               	movlw	low STR_23
  3038  001520  0100               	movlb	0	; () banked
  3039  001522  6FD6               	movwf	printf@f& (0+255),b
  3040  001524  0EFF               	movlw	high STR_23
  3041  001526  6FD7               	movwf	(printf@f+1)& (0+255),b
  3042  001528  C0AA  F0D8         	movff	_B_counter,?_printf+2
  3043  00152C  C0AB  F0D9         	movff	_B_counter+1,?_printf+3
  3044  001530  ECC0  F016         	call	_printf	;wreg free
  3045                           
  3046                           ;main.c: 299: if (B_counter ==0){
  3047  001534  0100               	movlb	0	; () banked
  3048  001536  51AA               	movf	_B_counter& (0+255),w,b
  3049  001538  11AB               	iorwf	(_B_counter+1)& (0+255),w,b
  3050  00153A  A4D8               	btfss	status,2,c
  3051  00153C  D004               	goto	l375
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;main.c: 300: I2C_sendData(motorStop_0);
  3055  00153E  51F8               	movf	_motorStop_0& (0+255),w,b
  3056  001540  ECB0  F023         	call	_I2C_sendData
  3057                           
  3058                           ;main.c: 301: }
  3059  001544  D004               	goto	l376
  3060  001546                     l375:
  3061                           
  3062                           ;main.c: 302: else{
  3063                           ;main.c: 303: I2C_sendData(B_dispense);
  3064  001546  0100               	movlb	0	; () banked
  3065  001548  51FC               	movf	_B_dispense& (0+255),w,b
  3066  00154A  ECB0  F023         	call	_I2C_sendData
  3067  00154E                     l376:
  3068  00154E  0100               	movlb	0	; () banked
  3069  001550  BFAB               	btfsc	(_B_counter+1)& (0+255),7,b
  3070  001552  D005               	goto	u4280
  3071  001554  51AB               	movf	(_B_counter+1)& (0+255),w,b
  3072  001556  E1C9               	bnz	l5466
  3073  001558  05AA               	decf	_B_counter& (0+255),w,b
  3074  00155A  B0D8               	btfsc	status,0,c
  3075  00155C  D7C6               	goto	l373
  3076  00155E                     u4280:
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 304: }
  3080                           ;main.c: 305: }
  3081                           ;main.c: 306: }
  3082                           ;main.c: 310: initLCD();
  3083                           
  3084                           ; BSR set to: 0
  3085  00155E  EC72  F022         	call	_initLCD	;wreg free
  3086                           
  3087                           ;main.c: 312: printf("bolts dispensed:%d",B_array[compartment_pos]);
  3088  001562  0E67               	movlw	low STR_24
  3089  001564  0100               	movlb	0	; () banked
  3090  001566  6FD6               	movwf	printf@f& (0+255),b
  3091  001568  0EFD               	movlw	high STR_24
  3092  00156A  6FD7               	movwf	(printf@f+1)& (0+255),b
  3093  00156C  90D8               	bcf	status,0,c
  3094  00156E  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3095  001570  6ED9               	movwf	fsr2l,c
  3096  001572  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3097  001574  6EDA               	movwf	fsr2h,c
  3098  001576  0E30               	movlw	low _B_array
  3099  001578  26D9               	addwf	fsr2l,f,c
  3100  00157A  0E01               	movlw	high _B_array
  3101  00157C  22DA               	addwfc	fsr2h,f,c
  3102  00157E  CFDE F0D8          	movff	postinc2,?_printf+2
  3103  001582  CFDD F0D9          	movff	postdec2,?_printf+3
  3104  001586  ECC0  F016         	call	_printf	;wreg free
  3105                           
  3106                           ;main.c: 313: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3107  00158A  0E33               	movlw	51
  3108  00158C  0100               	movlb	0	; () banked
  3109  00158E  6FED               	movwf	(??_main+1)& (0+255),b
  3110  001590  0EBB               	movlw	187
  3111  001592  6FEC               	movwf	??_main& (0+255),b
  3112  001594  0EDF               	movlw	223
  3113  001596                     u5247:
  3114  001596  2EE8               	decfsz	wreg,f,c
  3115  001598  D7FE               	bra	u5247
  3116  00159A  2FEC               	decfsz	??_main& (0+255),f,b
  3117  00159C  D7FC               	bra	u5247
  3118  00159E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3119  0015A0  D7FA               	bra	u5247
  3120  0015A2  D000               	nop2	
  3121                           
  3122                           ;main.c: 314: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3123  0015A4  0E99               	movlw	153
  3124  0015A6  0100               	movlb	0	; () banked
  3125  0015A8  6FED               	movwf	(??_main+1)& (0+255),b
  3126  0015AA  0E31               	movlw	49
  3127  0015AC  6FEC               	movwf	??_main& (0+255),b
  3128  0015AE  0EA2               	movlw	162
  3129  0015B0                     u5257:
  3130  0015B0  2EE8               	decfsz	wreg,f,c
  3131  0015B2  D7FE               	bra	u5257
  3132  0015B4  2FEC               	decfsz	??_main& (0+255),f,b
  3133  0015B6  D7FC               	bra	u5257
  3134  0015B8  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3135  0015BA  D7FA               	bra	u5257
  3136  0015BC  F000               	nop	
  3137                           
  3138                           ;main.c: 315: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3139  0015BE  0E80               	movlw	128
  3140  0015C0  EC15  F024         	call	_lcdInst
  3141  0015C4  0E41               	movlw	65
  3142  0015C6  0100               	movlb	0	; () banked
  3143  0015C8  6FEC               	movwf	??_main& (0+255),b
  3144  0015CA  0EEE               	movlw	238
  3145  0015CC                     u5267:
  3146  0015CC  2EE8               	decfsz	wreg,f,c
  3147  0015CE  D7FE               	bra	u5267
  3148  0015D0  2FEC               	decfsz	??_main& (0+255),f,b
  3149  0015D2  D7FC               	bra	u5267
  3150  0015D4  F000               	nop	
  3151                           
  3152                           ;main.c: 316: B_counter = 0;
  3153  0015D6  0E00               	movlw	0
  3154  0015D8  0100               	movlb	0	; () banked
  3155  0015DA  6FAB               	movwf	(_B_counter+1)& (0+255),b
  3156  0015DC  0E00               	movlw	0
  3157  0015DE  6FAA               	movwf	_B_counter& (0+255),b
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;main.c: 325: initLCD();
  3161  0015E0  EC72  F022         	call	_initLCD	;wreg free
  3162                           
  3163                           ;main.c: 327: printf("N_counter:%d",N_counter);
  3164  0015E4  0EFF               	movlw	low STR_25
  3165  0015E6  0100               	movlb	0	; () banked
  3166  0015E8  6FD6               	movwf	printf@f& (0+255),b
  3167  0015EA  0EFE               	movlw	high STR_25
  3168  0015EC  6FD7               	movwf	(printf@f+1)& (0+255),b
  3169  0015EE  C0A6  F0D8         	movff	_N_counter,?_printf+2
  3170  0015F2  C0A7  F0D9         	movff	_N_counter+1,?_printf+3
  3171  0015F6  ECC0  F016         	call	_printf	;wreg free
  3172                           
  3173                           ;main.c: 328: N_counter = N_array[compartment_pos];
  3174  0015FA  90D8               	bcf	status,0,c
  3175  0015FC  0100               	movlb	0	; () banked
  3176  0015FE  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3177  001600  6ED9               	movwf	fsr2l,c
  3178  001602  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3179  001604  6EDA               	movwf	fsr2h,c
  3180  001606  0E10               	movlw	low _N_array
  3181  001608  26D9               	addwf	fsr2l,f,c
  3182  00160A  0E01               	movlw	high _N_array
  3183  00160C  22DA               	addwfc	fsr2h,f,c
  3184  00160E  CFDE F0A6          	movff	postinc2,_N_counter
  3185  001612  CFDD F0A7          	movff	postdec2,_N_counter+1
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 329: if(N_counter != 0){
  3189  001616  51A6               	movf	_N_counter& (0+255),w,b
  3190  001618  11A7               	iorwf	(_N_counter+1)& (0+255),w,b
  3191  00161A  B4D8               	btfsc	status,2,c
  3192  00161C  D03A               	goto	l383
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;main.c: 330: I2C_sendData(motorStart_1);
  3196  00161E  51F7               	movf	_motorStart_1& (0+255),w,b
  3197  001620  ECB0  F023         	call	_I2C_sendData
  3198                           
  3199                           ;main.c: 331: I2C_sendData(N_dispense);
  3200  001624  0100               	movlb	0	; () banked
  3201  001626  51FB               	movf	_N_dispense& (0+255),w,b
  3202  001628  ECB0  F023         	call	_I2C_sendData
  3203                           
  3204                           ;main.c: 332: }
  3205                           ;main.c: 334: while(N_counter > 0){
  3206  00162C  D032               	goto	l383
  3207  00162E                     l5508:
  3208                           
  3209                           ;main.c: 337: I2C_Master_Start();
  3210  00162E  EC63  F024         	call	_I2C_Master_Start	;wreg free
  3211                           
  3212                           ;main.c: 338: I2C_Master_Write(0b00010001);
  3213  001632  0E00               	movlw	0
  3214  001634  0100               	movlb	0	; () banked
  3215  001636  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3216  001638  0E11               	movlw	17
  3217  00163A  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3218  00163C  EC55  F024         	call	_I2C_Master_Write	;wreg free
  3219                           
  3220                           ;main.c: 339: nuts_data = I2C_Master_Read(1);
  3221  001640  0E01               	movlw	1
  3222  001642  EC87  F023         	call	_I2C_Master_Read
  3223  001646  0100               	movlb	0	; () banked
  3224  001648  6FC0               	movwf	_nuts_data& (0+255),b
  3225                           
  3226                           ;main.c: 340: I2C_Master_Stop();
  3227  00164A  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  3228                           
  3229                           ;main.c: 341: if (nuts_data == '3'){
  3230  00164E  0E33               	movlw	51
  3231  001650  0100               	movlb	0	; () banked
  3232  001652  19C0               	xorwf	_nuts_data& (0+255),w,b
  3233  001654  A4D8               	btfss	status,2,c
  3234  001656  D01D               	goto	l383
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 342: N_counter --;
  3238  001658  07A6               	decf	_N_counter& (0+255),f,b
  3239  00165A  A0D8               	btfss	status,0,c
  3240  00165C  07A7               	decf	(_N_counter+1)& (0+255),f,b
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;main.c: 343: initLCD();
  3244  00165E  EC72  F022         	call	_initLCD	;wreg free
  3245                           
  3246                           ;main.c: 344: printf("N_count:%d", N_counter);
  3247  001662  0E60               	movlw	low STR_26
  3248  001664  0100               	movlb	0	; () banked
  3249  001666  6FD6               	movwf	printf@f& (0+255),b
  3250  001668  0EFF               	movlw	high STR_26
  3251  00166A  6FD7               	movwf	(printf@f+1)& (0+255),b
  3252  00166C  C0A6  F0D8         	movff	_N_counter,?_printf+2
  3253  001670  C0A7  F0D9         	movff	_N_counter+1,?_printf+3
  3254  001674  ECC0  F016         	call	_printf	;wreg free
  3255                           
  3256                           ;main.c: 346: if (N_counter ==0){
  3257  001678  0100               	movlb	0	; () banked
  3258  00167A  51A6               	movf	_N_counter& (0+255),w,b
  3259  00167C  11A7               	iorwf	(_N_counter+1)& (0+255),w,b
  3260  00167E  A4D8               	btfss	status,2,c
  3261  001680  D004               	goto	l382
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 347: I2C_sendData(motorStop_1);
  3265  001682  51F6               	movf	_motorStop_1& (0+255),w,b
  3266  001684  ECB0  F023         	call	_I2C_sendData
  3267                           
  3268                           ;main.c: 348: }
  3269  001688  D004               	goto	l383
  3270  00168A                     l382:
  3271                           
  3272                           ;main.c: 349: else{
  3273                           ;main.c: 350: I2C_sendData(N_dispense);
  3274  00168A  0100               	movlb	0	; () banked
  3275  00168C  51FB               	movf	_N_dispense& (0+255),w,b
  3276  00168E  ECB0  F023         	call	_I2C_sendData
  3277  001692                     l383:
  3278  001692  0100               	movlb	0	; () banked
  3279  001694  BFA7               	btfsc	(_N_counter+1)& (0+255),7,b
  3280  001696  D005               	goto	u4320
  3281  001698  51A7               	movf	(_N_counter+1)& (0+255),w,b
  3282  00169A  E1C9               	bnz	l5508
  3283  00169C  05A6               	decf	_N_counter& (0+255),w,b
  3284  00169E  B0D8               	btfsc	status,0,c
  3285  0016A0  D7C6               	goto	l380
  3286  0016A2                     u4320:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 351: }
  3290                           ;main.c: 352: }
  3291                           ;main.c: 353: }
  3292                           ;main.c: 357: initLCD();
  3293                           
  3294                           ; BSR set to: 0
  3295  0016A2  EC72  F022         	call	_initLCD	;wreg free
  3296                           
  3297                           ;main.c: 359: printf("nuts dispensed:%d",N_array[compartment_pos]);
  3298  0016A6  0E8D               	movlw	low STR_27
  3299  0016A8  0100               	movlb	0	; () banked
  3300  0016AA  6FD6               	movwf	printf@f& (0+255),b
  3301  0016AC  0EFD               	movlw	high STR_27
  3302  0016AE  6FD7               	movwf	(printf@f+1)& (0+255),b
  3303  0016B0  90D8               	bcf	status,0,c
  3304  0016B2  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3305  0016B4  6ED9               	movwf	fsr2l,c
  3306  0016B6  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3307  0016B8  6EDA               	movwf	fsr2h,c
  3308  0016BA  0E10               	movlw	low _N_array
  3309  0016BC  26D9               	addwf	fsr2l,f,c
  3310  0016BE  0E01               	movlw	high _N_array
  3311  0016C0  22DA               	addwfc	fsr2h,f,c
  3312  0016C2  CFDE F0D8          	movff	postinc2,?_printf+2
  3313  0016C6  CFDD F0D9          	movff	postdec2,?_printf+3
  3314  0016CA  ECC0  F016         	call	_printf	;wreg free
  3315                           
  3316                           ;main.c: 360: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3317  0016CE  0E33               	movlw	51
  3318  0016D0  0100               	movlb	0	; () banked
  3319  0016D2  6FED               	movwf	(??_main+1)& (0+255),b
  3320  0016D4  0EBB               	movlw	187
  3321  0016D6  6FEC               	movwf	??_main& (0+255),b
  3322  0016D8  0EDF               	movlw	223
  3323  0016DA                     u5277:
  3324  0016DA  2EE8               	decfsz	wreg,f,c
  3325  0016DC  D7FE               	bra	u5277
  3326  0016DE  2FEC               	decfsz	??_main& (0+255),f,b
  3327  0016E0  D7FC               	bra	u5277
  3328  0016E2  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3329  0016E4  D7FA               	bra	u5277
  3330  0016E6  D000               	nop2	
  3331                           
  3332                           ;main.c: 361: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3333  0016E8  0E99               	movlw	153
  3334  0016EA  0100               	movlb	0	; () banked
  3335  0016EC  6FED               	movwf	(??_main+1)& (0+255),b
  3336  0016EE  0E31               	movlw	49
  3337  0016F0  6FEC               	movwf	??_main& (0+255),b
  3338  0016F2  0EA2               	movlw	162
  3339  0016F4                     u5287:
  3340  0016F4  2EE8               	decfsz	wreg,f,c
  3341  0016F6  D7FE               	bra	u5287
  3342  0016F8  2FEC               	decfsz	??_main& (0+255),f,b
  3343  0016FA  D7FC               	bra	u5287
  3344  0016FC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3345  0016FE  D7FA               	bra	u5287
  3346  001700  F000               	nop	
  3347                           
  3348                           ;main.c: 362: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3349  001702  0E80               	movlw	128
  3350  001704  EC15  F024         	call	_lcdInst
  3351  001708  0E41               	movlw	65
  3352  00170A  0100               	movlb	0	; () banked
  3353  00170C  6FEC               	movwf	??_main& (0+255),b
  3354  00170E  0EEE               	movlw	238
  3355  001710                     u5297:
  3356  001710  2EE8               	decfsz	wreg,f,c
  3357  001712  D7FE               	bra	u5297
  3358  001714  2FEC               	decfsz	??_main& (0+255),f,b
  3359  001716  D7FC               	bra	u5297
  3360  001718  F000               	nop	
  3361                           
  3362                           ;main.c: 363: N_counter = 0;
  3363  00171A  0E00               	movlw	0
  3364  00171C  0100               	movlb	0	; () banked
  3365  00171E  6FA7               	movwf	(_N_counter+1)& (0+255),b
  3366  001720  0E00               	movlw	0
  3367  001722  6FA6               	movwf	_N_counter& (0+255),b
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 373: initLCD();
  3371  001724  EC72  F022         	call	_initLCD	;wreg free
  3372                           
  3373                           ;main.c: 375: printf("S_counter:%d",S_counter);
  3374  001728  0E0C               	movlw	low STR_28
  3375  00172A  0100               	movlb	0	; () banked
  3376  00172C  6FD6               	movwf	printf@f& (0+255),b
  3377  00172E  0EFF               	movlw	high STR_28
  3378  001730  6FD7               	movwf	(printf@f+1)& (0+255),b
  3379  001732  C0A8  F0D8         	movff	_S_counter,?_printf+2
  3380  001736  C0A9  F0D9         	movff	_S_counter+1,?_printf+3
  3381  00173A  ECC0  F016         	call	_printf	;wreg free
  3382                           
  3383                           ;main.c: 376: S_counter = S_array[compartment_pos];
  3384  00173E  90D8               	bcf	status,0,c
  3385  001740  0100               	movlb	0	; () banked
  3386  001742  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3387  001744  6ED9               	movwf	fsr2l,c
  3388  001746  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3389  001748  6EDA               	movwf	fsr2h,c
  3390  00174A  0E20               	movlw	low _S_array
  3391  00174C  26D9               	addwf	fsr2l,f,c
  3392  00174E  0E01               	movlw	high _S_array
  3393  001750  22DA               	addwfc	fsr2h,f,c
  3394  001752  CFDE F0A8          	movff	postinc2,_S_counter
  3395  001756  CFDD F0A9          	movff	postdec2,_S_counter+1
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;main.c: 377: if(S_counter != 0){
  3399  00175A  51A8               	movf	_S_counter& (0+255),w,b
  3400  00175C  11A9               	iorwf	(_S_counter+1)& (0+255),w,b
  3401  00175E  B4D8               	btfsc	status,2,c
  3402  001760  D03A               	goto	l390
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;main.c: 378: I2C_sendData(motorStart_2);
  3406  001762  51F5               	movf	_motorStart_2& (0+255),w,b
  3407  001764  ECB0  F023         	call	_I2C_sendData
  3408                           
  3409                           ;main.c: 379: I2C_sendData(S_dispense);
  3410  001768  0100               	movlb	0	; () banked
  3411  00176A  51FA               	movf	_S_dispense& (0+255),w,b
  3412  00176C  ECB0  F023         	call	_I2C_sendData
  3413                           
  3414                           ;main.c: 380: }
  3415                           ;main.c: 382: while(S_counter > 0){
  3416  001770  D032               	goto	l390
  3417  001772                     l5550:
  3418                           
  3419                           ;main.c: 385: I2C_Master_Start();
  3420  001772  EC63  F024         	call	_I2C_Master_Start	;wreg free
  3421                           
  3422                           ;main.c: 386: I2C_Master_Write(0b00010001);
  3423  001776  0E00               	movlw	0
  3424  001778  0100               	movlb	0	; () banked
  3425  00177A  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3426  00177C  0E11               	movlw	17
  3427  00177E  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3428  001780  EC55  F024         	call	_I2C_Master_Write	;wreg free
  3429                           
  3430                           ;main.c: 387: nuts_data = I2C_Master_Read(1);
  3431  001784  0E01               	movlw	1
  3432  001786  EC87  F023         	call	_I2C_Master_Read
  3433  00178A  0100               	movlb	0	; () banked
  3434  00178C  6FC0               	movwf	_nuts_data& (0+255),b
  3435                           
  3436                           ;main.c: 388: I2C_Master_Stop();
  3437  00178E  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  3438                           
  3439                           ;main.c: 389: if (nuts_data == '4'){
  3440  001792  0E34               	movlw	52
  3441  001794  0100               	movlb	0	; () banked
  3442  001796  19C0               	xorwf	_nuts_data& (0+255),w,b
  3443  001798  A4D8               	btfss	status,2,c
  3444  00179A  D01D               	goto	l390
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;main.c: 390: S_counter --;
  3448  00179C  07A8               	decf	_S_counter& (0+255),f,b
  3449  00179E  A0D8               	btfss	status,0,c
  3450  0017A0  07A9               	decf	(_S_counter+1)& (0+255),f,b
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main.c: 391: initLCD();
  3454  0017A2  EC72  F022         	call	_initLCD	;wreg free
  3455                           
  3456                           ;main.c: 392: printf("S_count:%d", S_counter);
  3457  0017A6  0E6B               	movlw	low STR_29
  3458  0017A8  0100               	movlb	0	; () banked
  3459  0017AA  6FD6               	movwf	printf@f& (0+255),b
  3460  0017AC  0EFF               	movlw	high STR_29
  3461  0017AE  6FD7               	movwf	(printf@f+1)& (0+255),b
  3462  0017B0  C0A8  F0D8         	movff	_S_counter,?_printf+2
  3463  0017B4  C0A9  F0D9         	movff	_S_counter+1,?_printf+3
  3464  0017B8  ECC0  F016         	call	_printf	;wreg free
  3465                           
  3466                           ;main.c: 394: if (S_counter ==0){
  3467  0017BC  0100               	movlb	0	; () banked
  3468  0017BE  51A8               	movf	_S_counter& (0+255),w,b
  3469  0017C0  11A9               	iorwf	(_S_counter+1)& (0+255),w,b
  3470  0017C2  A4D8               	btfss	status,2,c
  3471  0017C4  D004               	goto	l389
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;main.c: 395: I2C_sendData(motorStop_2);
  3475  0017C6  51F4               	movf	_motorStop_2& (0+255),w,b
  3476  0017C8  ECB0  F023         	call	_I2C_sendData
  3477                           
  3478                           ;main.c: 396: }
  3479  0017CC  D004               	goto	l390
  3480  0017CE                     l389:
  3481                           
  3482                           ;main.c: 397: else{
  3483                           ;main.c: 398: I2C_sendData(S_dispense);
  3484  0017CE  0100               	movlb	0	; () banked
  3485  0017D0  51FA               	movf	_S_dispense& (0+255),w,b
  3486  0017D2  ECB0  F023         	call	_I2C_sendData
  3487  0017D6                     l390:
  3488  0017D6  0100               	movlb	0	; () banked
  3489  0017D8  BFA9               	btfsc	(_S_counter+1)& (0+255),7,b
  3490  0017DA  D005               	goto	u4360
  3491  0017DC  51A9               	movf	(_S_counter+1)& (0+255),w,b
  3492  0017DE  E1C9               	bnz	l5550
  3493  0017E0  05A8               	decf	_S_counter& (0+255),w,b
  3494  0017E2  B0D8               	btfsc	status,0,c
  3495  0017E4  D7C6               	goto	l387
  3496  0017E6                     u4360:
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;main.c: 399: }
  3500                           ;main.c: 400: }
  3501                           ;main.c: 401: }
  3502                           ;main.c: 405: initLCD();
  3503                           
  3504                           ; BSR set to: 0
  3505  0017E6  EC72  F022         	call	_initLCD	;wreg free
  3506                           
  3507                           ;main.c: 407: printf("spacers dispensed:%d",S_array[compartment_pos]);
  3508  0017EA  0E2A               	movlw	low STR_30
  3509  0017EC  0100               	movlb	0	; () banked
  3510  0017EE  6FD6               	movwf	printf@f& (0+255),b
  3511  0017F0  0EFD               	movlw	high STR_30
  3512  0017F2  6FD7               	movwf	(printf@f+1)& (0+255),b
  3513  0017F4  90D8               	bcf	status,0,c
  3514  0017F6  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3515  0017F8  6ED9               	movwf	fsr2l,c
  3516  0017FA  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3517  0017FC  6EDA               	movwf	fsr2h,c
  3518  0017FE  0E20               	movlw	low _S_array
  3519  001800  26D9               	addwf	fsr2l,f,c
  3520  001802  0E01               	movlw	high _S_array
  3521  001804  22DA               	addwfc	fsr2h,f,c
  3522  001806  CFDE F0D8          	movff	postinc2,?_printf+2
  3523  00180A  CFDD F0D9          	movff	postdec2,?_printf+3
  3524  00180E  ECC0  F016         	call	_printf	;wreg free
  3525                           
  3526                           ;main.c: 408: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3527  001812  0E33               	movlw	51
  3528  001814  0100               	movlb	0	; () banked
  3529  001816  6FED               	movwf	(??_main+1)& (0+255),b
  3530  001818  0EBB               	movlw	187
  3531  00181A  6FEC               	movwf	??_main& (0+255),b
  3532  00181C  0EDF               	movlw	223
  3533  00181E                     u5307:
  3534  00181E  2EE8               	decfsz	wreg,f,c
  3535  001820  D7FE               	bra	u5307
  3536  001822  2FEC               	decfsz	??_main& (0+255),f,b
  3537  001824  D7FC               	bra	u5307
  3538  001826  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3539  001828  D7FA               	bra	u5307
  3540  00182A  D000               	nop2	
  3541                           
  3542                           ;main.c: 409: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3543  00182C  0E99               	movlw	153
  3544  00182E  0100               	movlb	0	; () banked
  3545  001830  6FED               	movwf	(??_main+1)& (0+255),b
  3546  001832  0E31               	movlw	49
  3547  001834  6FEC               	movwf	??_main& (0+255),b
  3548  001836  0EA2               	movlw	162
  3549  001838                     u5317:
  3550  001838  2EE8               	decfsz	wreg,f,c
  3551  00183A  D7FE               	bra	u5317
  3552  00183C  2FEC               	decfsz	??_main& (0+255),f,b
  3553  00183E  D7FC               	bra	u5317
  3554  001840  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3555  001842  D7FA               	bra	u5317
  3556  001844  F000               	nop	
  3557                           
  3558                           ;main.c: 410: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3559  001846  0E80               	movlw	128
  3560  001848  EC15  F024         	call	_lcdInst
  3561  00184C  0E41               	movlw	65
  3562  00184E  0100               	movlb	0	; () banked
  3563  001850  6FEC               	movwf	??_main& (0+255),b
  3564  001852  0EEE               	movlw	238
  3565  001854                     u5327:
  3566  001854  2EE8               	decfsz	wreg,f,c
  3567  001856  D7FE               	bra	u5327
  3568  001858  2FEC               	decfsz	??_main& (0+255),f,b
  3569  00185A  D7FC               	bra	u5327
  3570  00185C  F000               	nop	
  3571                           
  3572                           ;main.c: 411: S_counter = 0;
  3573  00185E  0E00               	movlw	0
  3574  001860  0100               	movlb	0	; () banked
  3575  001862  6FA9               	movwf	(_S_counter+1)& (0+255),b
  3576  001864  0E00               	movlw	0
  3577  001866  6FA8               	movwf	_S_counter& (0+255),b
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;main.c: 421: initLCD();
  3581  001868  EC72  F022         	call	_initLCD	;wreg free
  3582                           
  3583                           ;main.c: 422: printf("%d",W_counter);
  3584  00186C  0E4E               	movlw	low (STR_60+12)
  3585  00186E  0100               	movlb	0	; () banked
  3586  001870  6FD6               	movwf	printf@f& (0+255),b
  3587  001872  0EFE               	movlw	high (STR_60+12)
  3588  001874  6FD7               	movwf	(printf@f+1)& (0+255),b
  3589  001876  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3590  00187A  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3591  00187E  ECC0  F016         	call	_printf	;wreg free
  3592                           
  3593                           ;main.c: 423: _delay((unsigned long)((50)*(40000000/4000.0)));
  3594  001882  0E03               	movlw	3
  3595  001884  0100               	movlb	0	; () banked
  3596  001886  6FED               	movwf	(??_main+1)& (0+255),b
  3597  001888  0E8A               	movlw	138
  3598  00188A  6FEC               	movwf	??_main& (0+255),b
  3599  00188C  0E55               	movlw	85
  3600  00188E                     u5337:
  3601  00188E  2EE8               	decfsz	wreg,f,c
  3602  001890  D7FE               	bra	u5337
  3603  001892  2FEC               	decfsz	??_main& (0+255),f,b
  3604  001894  D7FC               	bra	u5337
  3605  001896  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3606  001898  D7FA               	bra	u5337
  3607  00189A  D000               	nop2	
  3608                           
  3609                           ;main.c: 424: I2C_sendData(motorStart_3);
  3610  00189C  0100               	movlb	0	; () banked
  3611  00189E  51F3               	movf	_motorStart_3& (0+255),w,b
  3612  0018A0  ECB0  F023         	call	_I2C_sendData
  3613  0018A4                     l5590:
  3614                           
  3615                           ;main.c: 428: if (W_counter == W_array[compartment_pos]){
  3616  0018A4  90D8               	bcf	status,0,c
  3617  0018A6  0100               	movlb	0	; () banked
  3618  0018A8  35B0               	rlcf	_compartment_pos& (0+255),w,b
  3619  0018AA  6ED9               	movwf	fsr2l,c
  3620  0018AC  35B1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3621  0018AE  6EDA               	movwf	fsr2h,c
  3622  0018B0  0E00               	movlw	low _W_array
  3623  0018B2  26D9               	addwf	fsr2l,f,c
  3624  0018B4  0E01               	movlw	high _W_array
  3625  0018B6  22DA               	addwfc	fsr2h,f,c
  3626  0018B8  51A4               	movf	_W_counter& (0+255),w,b
  3627  0018BA  18DE               	xorwf	postinc2,w,c
  3628  0018BC  E108               	bnz	l5594
  3629  0018BE  51A5               	movf	(_W_counter+1)& (0+255),w,b
  3630  0018C0  18DE               	xorwf	postinc2,w,c
  3631  0018C2  A4D8               	btfss	status,2,c
  3632  0018C4  D004               	goto	l393
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;main.c: 429: I2C_sendData(motorStop_3);
  3636  0018C6  51F2               	movf	_motorStop_3& (0+255),w,b
  3637  0018C8  ECB0  F023         	call	_I2C_sendData
  3638                           
  3639                           ;main.c: 430: break;
  3640  0018CC  D027               	goto	l394
  3641  0018CE                     l393:
  3642  0018CE                     l5594:
  3643                           
  3644                           ;main.c: 431: }
  3645                           ;main.c: 432: if (readADC(3)<=250 ){
  3646  0018CE  0E03               	movlw	3
  3647  0018D0  EC6A  F023         	call	_readADC
  3648  0018D4  0100               	movlb	0	; () banked
  3649  0018D6  51C9               	movf	(?_readADC+1)& (0+255),w,b
  3650  0018D8  E1E5               	bnz	l5590
  3651  0018DA  0EFB               	movlw	251
  3652  0018DC  5DC8               	subwf	?_readADC& (0+255),w,b
  3653  0018DE  B0D8               	btfsc	status,0,c
  3654  0018E0  D7E1               	goto	l392
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;main.c: 434: W_counter ++;
  3658  0018E2  4BA4               	infsnz	_W_counter& (0+255),f,b
  3659  0018E4  2BA5               	incf	(_W_counter+1)& (0+255),f,b
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;main.c: 435: initLCD();
  3663  0018E6  EC72  F022         	call	_initLCD	;wreg free
  3664                           
  3665                           ;main.c: 436: printf("%d", W_counter);
  3666  0018EA  0E4E               	movlw	low (STR_60+12)
  3667  0018EC  0100               	movlb	0	; () banked
  3668  0018EE  6FD6               	movwf	printf@f& (0+255),b
  3669  0018F0  0EFE               	movlw	high (STR_60+12)
  3670  0018F2  6FD7               	movwf	(printf@f+1)& (0+255),b
  3671  0018F4  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3672  0018F8  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3673  0018FC  ECC0  F016         	call	_printf	;wreg free
  3674                           
  3675                           ;main.c: 437: _delay((unsigned long)((50)*(40000000/4000.0)));
  3676  001900  0E03               	movlw	3
  3677  001902  0100               	movlb	0	; () banked
  3678  001904  6FED               	movwf	(??_main+1)& (0+255),b
  3679  001906  0E8A               	movlw	138
  3680  001908  6FEC               	movwf	??_main& (0+255),b
  3681  00190A  0E55               	movlw	85
  3682  00190C                     u5347:
  3683  00190C  2EE8               	decfsz	wreg,f,c
  3684  00190E  D7FE               	bra	u5347
  3685  001910  2FEC               	decfsz	??_main& (0+255),f,b
  3686  001912  D7FC               	bra	u5347
  3687  001914  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3688  001916  D7FA               	bra	u5347
  3689  001918  D000               	nop2	
  3690  00191A  D7C4               	goto	l392
  3691  00191C                     l394:
  3692                           
  3693                           ;main.c: 438: }
  3694                           ;main.c: 440: }
  3695                           ;main.c: 442: initLCD();
  3696  00191C  EC72  F022         	call	_initLCD	;wreg free
  3697                           
  3698                           ;main.c: 444: printf("Washer dispensed:%d",W_counter);
  3699  001920  0E3F               	movlw	low STR_33
  3700  001922  0100               	movlb	0	; () banked
  3701  001924  6FD6               	movwf	printf@f& (0+255),b
  3702  001926  0EFD               	movlw	high STR_33
  3703  001928  6FD7               	movwf	(printf@f+1)& (0+255),b
  3704  00192A  C0A4  F0D8         	movff	_W_counter,?_printf+2
  3705  00192E  C0A5  F0D9         	movff	_W_counter+1,?_printf+3
  3706  001932  ECC0  F016         	call	_printf	;wreg free
  3707                           
  3708                           ;main.c: 445: _delay((unsigned long)((200)*(40000000/4000.0)));
  3709  001936  0E0B               	movlw	11
  3710  001938  0100               	movlb	0	; () banked
  3711  00193A  6FED               	movwf	(??_main+1)& (0+255),b
  3712  00193C  0E26               	movlw	38
  3713  00193E  6FEC               	movwf	??_main& (0+255),b
  3714  001940  0E5D               	movlw	93
  3715  001942                     u5357:
  3716  001942  2EE8               	decfsz	wreg,f,c
  3717  001944  D7FE               	bra	u5357
  3718  001946  2FEC               	decfsz	??_main& (0+255),f,b
  3719  001948  D7FC               	bra	u5357
  3720  00194A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3721  00194C  D7FA               	bra	u5357
  3722  00194E  D000               	nop2	
  3723                           
  3724                           ;main.c: 446: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3725  001950  0E80               	movlw	128
  3726  001952  EC15  F024         	call	_lcdInst
  3727  001956  0E41               	movlw	65
  3728  001958  0100               	movlb	0	; () banked
  3729  00195A  6FEC               	movwf	??_main& (0+255),b
  3730  00195C  0EEE               	movlw	238
  3731  00195E                     u5367:
  3732  00195E  2EE8               	decfsz	wreg,f,c
  3733  001960  D7FE               	bra	u5367
  3734  001962  2FEC               	decfsz	??_main& (0+255),f,b
  3735  001964  D7FC               	bra	u5367
  3736  001966  F000               	nop	
  3737                           
  3738                           ;main.c: 447: W_counter = 0;
  3739  001968  0E00               	movlw	0
  3740  00196A  0100               	movlb	0	; () banked
  3741  00196C  6FA5               	movwf	(_W_counter+1)& (0+255),b
  3742  00196E  0E00               	movlw	0
  3743  001970  6FA4               	movwf	_W_counter& (0+255),b
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;main.c: 452: B_counter = 0;
  3747  001972  0E00               	movlw	0
  3748  001974  6FAB               	movwf	(_B_counter+1)& (0+255),b
  3749  001976  0E00               	movlw	0
  3750  001978  6FAA               	movwf	_B_counter& (0+255),b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;main.c: 453: N_counter = 0;
  3754  00197A  0E00               	movlw	0
  3755  00197C  6FA7               	movwf	(_N_counter+1)& (0+255),b
  3756  00197E  0E00               	movlw	0
  3757  001980  6FA6               	movwf	_N_counter& (0+255),b
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 454: S_counter = 0;
  3761  001982  0E00               	movlw	0
  3762  001984  6FA9               	movwf	(_S_counter+1)& (0+255),b
  3763  001986  0E00               	movlw	0
  3764  001988  6FA8               	movwf	_S_counter& (0+255),b
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;main.c: 455: W_counter = 0;
  3768  00198A  0E00               	movlw	0
  3769  00198C  6FA5               	movwf	(_W_counter+1)& (0+255),b
  3770  00198E  0E00               	movlw	0
  3771  001990  6FA4               	movwf	_W_counter& (0+255),b
  3772  001992                     l370:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;main.c: 457: }
  3776                           ;main.c: 461: printf("done C%d",compartment_pos);
  3777                           
  3778                           ; BSR set to: 0
  3779  001992  0E9B               	movlw	low STR_34
  3780  001994  6FD6               	movwf	printf@f& (0+255),b
  3781  001996  0EFF               	movlw	high STR_34
  3782  001998  6FD7               	movwf	(printf@f+1)& (0+255),b
  3783  00199A  C0B0  F0D8         	movff	_compartment_pos,?_printf+2
  3784  00199E  C0B1  F0D9         	movff	_compartment_pos+1,?_printf+3
  3785  0019A2  ECC0  F016         	call	_printf	;wreg free
  3786                           
  3787                           ;main.c: 462: I2C_sendData(rotate_1compartment);
  3788  0019A6  0100               	movlb	0	; () banked
  3789  0019A8  51FD               	movf	_rotate_1compartment& (0+255),w,b
  3790  0019AA  ECB0  F023         	call	_I2C_sendData
  3791                           
  3792                           ;main.c: 463: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3793  0019AE  0E99               	movlw	153
  3794  0019B0  0100               	movlb	0	; () banked
  3795  0019B2  6FED               	movwf	(??_main+1)& (0+255),b
  3796  0019B4  0E31               	movlw	49
  3797  0019B6  6FEC               	movwf	??_main& (0+255),b
  3798  0019B8  0EA2               	movlw	162
  3799  0019BA                     u5377:
  3800  0019BA  2EE8               	decfsz	wreg,f,c
  3801  0019BC  D7FE               	bra	u5377
  3802  0019BE  2FEC               	decfsz	??_main& (0+255),f,b
  3803  0019C0  D7FC               	bra	u5377
  3804  0019C2  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3805  0019C4  D7FA               	bra	u5377
  3806  0019C6  F000               	nop	
  3807                           
  3808                           ;main.c: 464: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3809  0019C8  0E66               	movlw	102
  3810  0019CA  0100               	movlb	0	; () banked
  3811  0019CC  6FED               	movwf	(??_main+1)& (0+255),b
  3812  0019CE  0E76               	movlw	118
  3813  0019D0  6FEC               	movwf	??_main& (0+255),b
  3814  0019D2  0EC1               	movlw	193
  3815  0019D4                     u5387:
  3816  0019D4  2EE8               	decfsz	wreg,f,c
  3817  0019D6  D7FE               	bra	u5387
  3818  0019D8  2FEC               	decfsz	??_main& (0+255),f,b
  3819  0019DA  D7FC               	bra	u5387
  3820  0019DC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3821  0019DE  D7FA               	bra	u5387
  3822                           
  3823                           ;main.c: 465: compartment_pos ++;
  3824  0019E0  0100               	movlb	0	; () banked
  3825  0019E2  4BB0               	infsnz	_compartment_pos& (0+255),f,b
  3826  0019E4  2BB1               	incf	(_compartment_pos+1)& (0+255),f,b
  3827                           
  3828                           ; BSR set to: 0
  3829  0019E6  4BBE               	infsnz	_i& (0+255),f,b
  3830  0019E8  2BBF               	incf	(_i+1)& (0+255),f,b
  3831                           
  3832                           ; BSR set to: 0
  3833  0019EA  51BF               	movf	(_i+1)& (0+255),w,b
  3834  0019EC  E101               	bnz	l5638
  3835  0019EE  D51B               	goto	L1
  3836  0019F0                     u4390:
  3837  0019F0                     l5638:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;main.c: 466: }
  3841                           ;main.c: 474: I2C_sendData(servo_ramp);
  3842  0019F0  51F1               	movf	_servo_ramp& (0+255),w,b
  3843  0019F2  ECB0  F023         	call	_I2C_sendData
  3844                           
  3845                           ;main.c: 479: initLCD();
  3846  0019F6  EC72  F022         	call	_initLCD	;wreg free
  3847                           
  3848                           ;main.c: 480: B_spacingTime = 0;
  3849  0019FA  0E00               	movlw	0
  3850  0019FC  0100               	movlb	0	; () banked
  3851  0019FE  6F9B               	movwf	(_B_spacingTime+1)& (0+255),b
  3852  001A00  0E00               	movlw	0
  3853  001A02  6F9A               	movwf	_B_spacingTime& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;main.c: 481: initLCD();
  3857  001A04  EC72  F022         	call	_initLCD	;wreg free
  3858                           
  3859                           ;main.c: 482: printf("%d", B_remain);
  3860  001A08  0E4E               	movlw	low (STR_60+12)
  3861  001A0A  0100               	movlb	0	; () banked
  3862  001A0C  6FD6               	movwf	printf@f& (0+255),b
  3863  001A0E  0EFE               	movlw	high (STR_60+12)
  3864  001A10  6FD7               	movwf	(printf@f+1)& (0+255),b
  3865  001A12  C0A2  F0D8         	movff	_B_remain,?_printf+2
  3866  001A16  C0A3  F0D9         	movff	_B_remain+1,?_printf+3
  3867  001A1A  ECC0  F016         	call	_printf	;wreg free
  3868                           
  3869                           ;main.c: 483: I2C_sendData(motorStart_0);
  3870  001A1E  0100               	movlb	0	; () banked
  3871  001A20  51F9               	movf	_motorStart_0& (0+255),w,b
  3872  001A22  ECB0  F023         	call	_I2C_sendData
  3873  001A26                     
  3874                           ;main.c: 486: if (B_spacingTime >= 30000){
  3875  001A26  0100               	movlb	0	; () banked
  3876  001A28  BF9B               	btfsc	(_B_spacingTime+1)& (0+255),7,b
  3877  001A2A  D00A               	goto	l398
  3878  001A2C  0E30               	movlw	48
  3879  001A2E  5D9A               	subwf	_B_spacingTime& (0+255),w,b
  3880  001A30  0E75               	movlw	117
  3881  001A32  599B               	subwfb	(_B_spacingTime+1)& (0+255),w,b
  3882  001A34  A0D8               	btfss	status,0,c
  3883  001A36  D004               	goto	l398
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;main.c: 487: I2C_sendData(motorStop_0);
  3887  001A38  51F8               	movf	_motorStop_0& (0+255),w,b
  3888  001A3A  ECB0  F023         	call	_I2C_sendData
  3889                           
  3890                           ;main.c: 488: break;
  3891  001A3E  D04E               	goto	l399
  3892  001A40                     l398:
  3893                           
  3894                           ;main.c: 492: else{
  3895                           ;main.c: 493: I2C_sendData(B_dispense);
  3896  001A40  0100               	movlb	0	; () banked
  3897  001A42  51FC               	movf	_B_dispense& (0+255),w,b
  3898  001A44  ECB0  F023         	call	_I2C_sendData
  3899                           
  3900                           ;main.c: 495: I2C_Master_Start();
  3901  001A48  EC63  F024         	call	_I2C_Master_Start	;wreg free
  3902                           
  3903                           ;main.c: 496: I2C_Master_Write(0b00010001);
  3904  001A4C  0E00               	movlw	0
  3905  001A4E  0100               	movlb	0	; () banked
  3906  001A50  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3907  001A52  0E11               	movlw	17
  3908  001A54  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3909  001A56  EC55  F024         	call	_I2C_Master_Write	;wreg free
  3910                           
  3911                           ;main.c: 497: nuts_data = I2C_Master_Read(1);
  3912  001A5A  0E01               	movlw	1
  3913  001A5C  EC87  F023         	call	_I2C_Master_Read
  3914  001A60  0100               	movlb	0	; () banked
  3915  001A62  6FC0               	movwf	_nuts_data& (0+255),b
  3916                           
  3917                           ;main.c: 498: I2C_Master_Stop();
  3918  001A64  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  3919                           
  3920                           ;main.c: 499: if (nuts_data == '2'){
  3921  001A68  0E32               	movlw	50
  3922  001A6A  0100               	movlb	0	; () banked
  3923  001A6C  19C0               	xorwf	_nuts_data& (0+255),w,b
  3924  001A6E  A4D8               	btfss	status,2,c
  3925  001A70  D006               	goto	l401
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;main.c: 500: B_remain++;
  3929  001A72  4BA2               	infsnz	_B_remain& (0+255),f,b
  3930  001A74  2BA3               	incf	(_B_remain+1)& (0+255),f,b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;main.c: 501: B_spacingTime = 0;
  3934  001A76  0E00               	movlw	0
  3935  001A78  6F9B               	movwf	(_B_spacingTime+1)& (0+255),b
  3936  001A7A  0E00               	movlw	0
  3937  001A7C  6F9A               	movwf	_B_spacingTime& (0+255),b
  3938  001A7E                     l401:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;main.c: 502: }
  3942                           ;main.c: 503: B_spacingTime+=200;
  3943                           
  3944                           ; BSR set to: 0
  3945  001A7E  0EC8               	movlw	200
  3946  001A80  279A               	addwf	_B_spacingTime& (0+255),f,b
  3947  001A82  0E00               	movlw	0
  3948  001A84  239B               	addwfc	(_B_spacingTime+1)& (0+255),f,b
  3949                           
  3950                           ;main.c: 507: }
  3951                           ;main.c: 512: printf("%d", B_remain);
  3952                           
  3953                           ; BSR set to: 0
  3954  001A86  0E4E               	movlw	low (STR_60+12)
  3955  001A88  0100               	movlb	0	; () banked
  3956  001A8A  6FD6               	movwf	printf@f& (0+255),b
  3957  001A8C  0EFE               	movlw	high (STR_60+12)
  3958  001A8E  6FD7               	movwf	(printf@f+1)& (0+255),b
  3959  001A90  C0A2  F0D8         	movff	_B_remain,?_printf+2
  3960  001A94  C0A3  F0D9         	movff	_B_remain+1,?_printf+3
  3961  001A98  ECC0  F016         	call	_printf	;wreg free
  3962                           
  3963                           ;main.c: 513: lcdInst(0xC0);;
  3964  001A9C  0EC0               	movlw	192
  3965  001A9E  EC15  F024         	call	_lcdInst
  3966                           
  3967                           ;main.c: 514: printf("%d",B_spacingTime);
  3968  001AA2  0E4E               	movlw	low (STR_60+12)
  3969  001AA4  0100               	movlb	0	; () banked
  3970  001AA6  6FD6               	movwf	printf@f& (0+255),b
  3971  001AA8  0EFE               	movlw	high (STR_60+12)
  3972  001AAA  6FD7               	movwf	(printf@f+1)& (0+255),b
  3973  001AAC  C09A  F0D8         	movff	_B_spacingTime,?_printf+2
  3974  001AB0  C09B  F0D9         	movff	_B_spacingTime+1,?_printf+3
  3975  001AB4  ECC0  F016         	call	_printf	;wreg free
  3976                           
  3977                           ;main.c: 516: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3978  001AB8  0E80               	movlw	128
  3979  001ABA  EC15  F024         	call	_lcdInst
  3980  001ABE  0E41               	movlw	65
  3981  001AC0  0100               	movlb	0	; () banked
  3982  001AC2  6FEC               	movwf	??_main& (0+255),b
  3983  001AC4  0EEE               	movlw	238
  3984  001AC6                     u5397:
  3985  001AC6  2EE8               	decfsz	wreg,f,c
  3986  001AC8  D7FE               	bra	u5397
  3987  001ACA  2FEC               	decfsz	??_main& (0+255),f,b
  3988  001ACC  D7FC               	bra	u5397
  3989  001ACE  F000               	nop	
  3990                           
  3991                           ;main.c: 519: B_spacingTime +=200;
  3992  001AD0  0EC8               	movlw	200
  3993  001AD2  0100               	movlb	0	; () banked
  3994  001AD4  279A               	addwf	_B_spacingTime& (0+255),f,b
  3995  001AD6  0E00               	movlw	0
  3996  001AD8  239B               	addwfc	(_B_spacingTime+1)& (0+255),f,b
  3997                           
  3998                           ; BSR set to: 0
  3999  001ADA  D7A5               	goto	l397
  4000  001ADC                     l399:
  4001                           
  4002                           ;main.c: 522: }
  4003                           ;main.c: 529: initLCD();
  4004                           
  4005                           ; BSR set to: 0
  4006  001ADC  EC72  F022         	call	_initLCD	;wreg free
  4007                           
  4008                           ;main.c: 530: N_spacingTime = 0;
  4009  001AE0  0E00               	movlw	0
  4010  001AE2  0100               	movlb	0	; () banked
  4011  001AE4  6F99               	movwf	(_N_spacingTime+1)& (0+255),b
  4012  001AE6  0E00               	movlw	0
  4013  001AE8  6F98               	movwf	_N_spacingTime& (0+255),b
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;main.c: 531: initLCD();
  4017  001AEA  EC72  F022         	call	_initLCD	;wreg free
  4018                           
  4019                           ;main.c: 532: printf("%d", N_remain);
  4020  001AEE  0E4E               	movlw	low (STR_60+12)
  4021  001AF0  0100               	movlb	0	; () banked
  4022  001AF2  6FD6               	movwf	printf@f& (0+255),b
  4023  001AF4  0EFE               	movlw	high (STR_60+12)
  4024  001AF6  6FD7               	movwf	(printf@f+1)& (0+255),b
  4025  001AF8  C0A0  F0D8         	movff	_N_remain,?_printf+2
  4026  001AFC  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  4027  001B00  ECC0  F016         	call	_printf	;wreg free
  4028                           
  4029                           ;main.c: 533: I2C_sendData(motorStart_1);
  4030  001B04  0100               	movlb	0	; () banked
  4031  001B06  51F7               	movf	_motorStart_1& (0+255),w,b
  4032  001B08  ECB0  F023         	call	_I2C_sendData
  4033  001B0C                     
  4034                           ;main.c: 536: if (N_spacingTime >= 30000){
  4035  001B0C  0100               	movlb	0	; () banked
  4036  001B0E  BF99               	btfsc	(_N_spacingTime+1)& (0+255),7,b
  4037  001B10  D00A               	goto	l404
  4038  001B12  0E30               	movlw	48
  4039  001B14  5D98               	subwf	_N_spacingTime& (0+255),w,b
  4040  001B16  0E75               	movlw	117
  4041  001B18  5999               	subwfb	(_N_spacingTime+1)& (0+255),w,b
  4042  001B1A  A0D8               	btfss	status,0,c
  4043  001B1C  D004               	goto	l404
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;main.c: 537: I2C_sendData(motorStop_1);
  4047  001B1E  51F6               	movf	_motorStop_1& (0+255),w,b
  4048  001B20  ECB0  F023         	call	_I2C_sendData
  4049                           
  4050                           ;main.c: 538: break;
  4051  001B24  D04E               	goto	l405
  4052  001B26                     l404:
  4053                           
  4054                           ;main.c: 542: else{
  4055                           ;main.c: 543: I2C_sendData(N_dispense);
  4056  001B26  0100               	movlb	0	; () banked
  4057  001B28  51FB               	movf	_N_dispense& (0+255),w,b
  4058  001B2A  ECB0  F023         	call	_I2C_sendData
  4059                           
  4060                           ;main.c: 545: I2C_Master_Start();
  4061  001B2E  EC63  F024         	call	_I2C_Master_Start	;wreg free
  4062                           
  4063                           ;main.c: 546: I2C_Master_Write(0b00010001);
  4064  001B32  0E00               	movlw	0
  4065  001B34  0100               	movlb	0	; () banked
  4066  001B36  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4067  001B38  0E11               	movlw	17
  4068  001B3A  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4069  001B3C  EC55  F024         	call	_I2C_Master_Write	;wreg free
  4070                           
  4071                           ;main.c: 547: nuts_data = I2C_Master_Read(1);
  4072  001B40  0E01               	movlw	1
  4073  001B42  EC87  F023         	call	_I2C_Master_Read
  4074  001B46  0100               	movlb	0	; () banked
  4075  001B48  6FC0               	movwf	_nuts_data& (0+255),b
  4076                           
  4077                           ;main.c: 548: I2C_Master_Stop();
  4078  001B4A  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  4079                           
  4080                           ;main.c: 549: if (nuts_data == '3'){
  4081  001B4E  0E33               	movlw	51
  4082  001B50  0100               	movlb	0	; () banked
  4083  001B52  19C0               	xorwf	_nuts_data& (0+255),w,b
  4084  001B54  A4D8               	btfss	status,2,c
  4085  001B56  D006               	goto	l407
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;main.c: 550: N_remain++;
  4089  001B58  4BA0               	infsnz	_N_remain& (0+255),f,b
  4090  001B5A  2BA1               	incf	(_N_remain+1)& (0+255),f,b
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;main.c: 551: N_spacingTime = 0;
  4094  001B5C  0E00               	movlw	0
  4095  001B5E  6F99               	movwf	(_N_spacingTime+1)& (0+255),b
  4096  001B60  0E00               	movlw	0
  4097  001B62  6F98               	movwf	_N_spacingTime& (0+255),b
  4098  001B64                     l407:
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;main.c: 552: }
  4102                           ;main.c: 553: N_spacingTime+=200;
  4103                           
  4104                           ; BSR set to: 0
  4105  001B64  0EC8               	movlw	200
  4106  001B66  2798               	addwf	_N_spacingTime& (0+255),f,b
  4107  001B68  0E00               	movlw	0
  4108  001B6A  2399               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  4109                           
  4110                           ;main.c: 557: }
  4111                           ;main.c: 562: printf("%d", N_remain);
  4112                           
  4113                           ; BSR set to: 0
  4114  001B6C  0E4E               	movlw	low (STR_60+12)
  4115  001B6E  0100               	movlb	0	; () banked
  4116  001B70  6FD6               	movwf	printf@f& (0+255),b
  4117  001B72  0EFE               	movlw	high (STR_60+12)
  4118  001B74  6FD7               	movwf	(printf@f+1)& (0+255),b
  4119  001B76  C0A0  F0D8         	movff	_N_remain,?_printf+2
  4120  001B7A  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  4121  001B7E  ECC0  F016         	call	_printf	;wreg free
  4122                           
  4123                           ;main.c: 563: lcdInst(0xC0);;
  4124  001B82  0EC0               	movlw	192
  4125  001B84  EC15  F024         	call	_lcdInst
  4126                           
  4127                           ;main.c: 564: printf("%d",N_spacingTime);
  4128  001B88  0E4E               	movlw	low (STR_60+12)
  4129  001B8A  0100               	movlb	0	; () banked
  4130  001B8C  6FD6               	movwf	printf@f& (0+255),b
  4131  001B8E  0EFE               	movlw	high (STR_60+12)
  4132  001B90  6FD7               	movwf	(printf@f+1)& (0+255),b
  4133  001B92  C098  F0D8         	movff	_N_spacingTime,?_printf+2
  4134  001B96  C099  F0D9         	movff	_N_spacingTime+1,?_printf+3
  4135  001B9A  ECC0  F016         	call	_printf	;wreg free
  4136                           
  4137                           ;main.c: 566: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4138  001B9E  0E80               	movlw	128
  4139  001BA0  EC15  F024         	call	_lcdInst
  4140  001BA4  0E41               	movlw	65
  4141  001BA6  0100               	movlb	0	; () banked
  4142  001BA8  6FEC               	movwf	??_main& (0+255),b
  4143  001BAA  0EEE               	movlw	238
  4144  001BAC                     u5407:
  4145  001BAC  2EE8               	decfsz	wreg,f,c
  4146  001BAE  D7FE               	bra	u5407
  4147  001BB0  2FEC               	decfsz	??_main& (0+255),f,b
  4148  001BB2  D7FC               	bra	u5407
  4149  001BB4  F000               	nop	
  4150                           
  4151                           ;main.c: 569: N_spacingTime +=200;
  4152  001BB6  0EC8               	movlw	200
  4153  001BB8  0100               	movlb	0	; () banked
  4154  001BBA  2798               	addwf	_N_spacingTime& (0+255),f,b
  4155  001BBC  0E00               	movlw	0
  4156  001BBE  2399               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  4157                           
  4158                           ; BSR set to: 0
  4159  001BC0  D7A5               	goto	l403
  4160  001BC2                     l405:
  4161                           
  4162                           ;main.c: 572: }
  4163                           ;main.c: 578: initLCD();
  4164                           
  4165                           ; BSR set to: 0
  4166  001BC2  EC72  F022         	call	_initLCD	;wreg free
  4167                           
  4168                           ;main.c: 579: S_spacingTime = 0;
  4169  001BC6  0E00               	movlw	0
  4170  001BC8  0100               	movlb	0	; () banked
  4171  001BCA  6F97               	movwf	(_S_spacingTime+1)& (0+255),b
  4172  001BCC  0E00               	movlw	0
  4173  001BCE  6F96               	movwf	_S_spacingTime& (0+255),b
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;main.c: 580: initLCD();
  4177  001BD0  EC72  F022         	call	_initLCD	;wreg free
  4178                           
  4179                           ;main.c: 581: printf("%d", S_remain);
  4180  001BD4  0E4E               	movlw	low (STR_60+12)
  4181  001BD6  0100               	movlb	0	; () banked
  4182  001BD8  6FD6               	movwf	printf@f& (0+255),b
  4183  001BDA  0EFE               	movlw	high (STR_60+12)
  4184  001BDC  6FD7               	movwf	(printf@f+1)& (0+255),b
  4185  001BDE  C09E  F0D8         	movff	_S_remain,?_printf+2
  4186  001BE2  C09F  F0D9         	movff	_S_remain+1,?_printf+3
  4187  001BE6  ECC0  F016         	call	_printf	;wreg free
  4188                           
  4189                           ;main.c: 582: I2C_sendData(motorStart_2);
  4190  001BEA  0100               	movlb	0	; () banked
  4191  001BEC  51F5               	movf	_motorStart_2& (0+255),w,b
  4192  001BEE  ECB0  F023         	call	_I2C_sendData
  4193  001BF2                     
  4194                           ;main.c: 585: if (S_spacingTime >= 30000){
  4195  001BF2  0100               	movlb	0	; () banked
  4196  001BF4  BF97               	btfsc	(_S_spacingTime+1)& (0+255),7,b
  4197  001BF6  D00A               	goto	l410
  4198  001BF8  0E30               	movlw	48
  4199  001BFA  5D96               	subwf	_S_spacingTime& (0+255),w,b
  4200  001BFC  0E75               	movlw	117
  4201  001BFE  5997               	subwfb	(_S_spacingTime+1)& (0+255),w,b
  4202  001C00  A0D8               	btfss	status,0,c
  4203  001C02  D004               	goto	l410
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;main.c: 586: I2C_sendData(motorStop_2);
  4207  001C04  51F4               	movf	_motorStop_2& (0+255),w,b
  4208  001C06  ECB0  F023         	call	_I2C_sendData
  4209                           
  4210                           ;main.c: 587: break;
  4211  001C0A  D04E               	goto	l411
  4212  001C0C                     l410:
  4213                           
  4214                           ;main.c: 591: else{
  4215                           ;main.c: 592: I2C_sendData(S_dispense);
  4216  001C0C  0100               	movlb	0	; () banked
  4217  001C0E  51FA               	movf	_S_dispense& (0+255),w,b
  4218  001C10  ECB0  F023         	call	_I2C_sendData
  4219                           
  4220                           ;main.c: 594: I2C_Master_Start();
  4221  001C14  EC63  F024         	call	_I2C_Master_Start	;wreg free
  4222                           
  4223                           ;main.c: 595: I2C_Master_Write(0b00010001);
  4224  001C18  0E00               	movlw	0
  4225  001C1A  0100               	movlb	0	; () banked
  4226  001C1C  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4227  001C1E  0E11               	movlw	17
  4228  001C20  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4229  001C22  EC55  F024         	call	_I2C_Master_Write	;wreg free
  4230                           
  4231                           ;main.c: 596: nuts_data = I2C_Master_Read(1);
  4232  001C26  0E01               	movlw	1
  4233  001C28  EC87  F023         	call	_I2C_Master_Read
  4234  001C2C  0100               	movlb	0	; () banked
  4235  001C2E  6FC0               	movwf	_nuts_data& (0+255),b
  4236                           
  4237                           ;main.c: 597: I2C_Master_Stop();
  4238  001C30  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  4239                           
  4240                           ;main.c: 598: if (nuts_data == '4'){
  4241  001C34  0E34               	movlw	52
  4242  001C36  0100               	movlb	0	; () banked
  4243  001C38  19C0               	xorwf	_nuts_data& (0+255),w,b
  4244  001C3A  A4D8               	btfss	status,2,c
  4245  001C3C  D006               	goto	l413
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;main.c: 599: S_remain++;
  4249  001C3E  4B9E               	infsnz	_S_remain& (0+255),f,b
  4250  001C40  2B9F               	incf	(_S_remain+1)& (0+255),f,b
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;main.c: 600: S_spacingTime = 0;
  4254  001C42  0E00               	movlw	0
  4255  001C44  6F97               	movwf	(_S_spacingTime+1)& (0+255),b
  4256  001C46  0E00               	movlw	0
  4257  001C48  6F96               	movwf	_S_spacingTime& (0+255),b
  4258  001C4A                     l413:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;main.c: 601: }
  4262                           ;main.c: 602: S_spacingTime+=200;
  4263                           
  4264                           ; BSR set to: 0
  4265  001C4A  0EC8               	movlw	200
  4266  001C4C  2796               	addwf	_S_spacingTime& (0+255),f,b
  4267  001C4E  0E00               	movlw	0
  4268  001C50  2397               	addwfc	(_S_spacingTime+1)& (0+255),f,b
  4269                           
  4270                           ;main.c: 606: }
  4271                           ;main.c: 611: printf("%d", S_remain);
  4272                           
  4273                           ; BSR set to: 0
  4274  001C52  0E4E               	movlw	low (STR_60+12)
  4275  001C54  0100               	movlb	0	; () banked
  4276  001C56  6FD6               	movwf	printf@f& (0+255),b
  4277  001C58  0EFE               	movlw	high (STR_60+12)
  4278  001C5A  6FD7               	movwf	(printf@f+1)& (0+255),b
  4279  001C5C  C09E  F0D8         	movff	_S_remain,?_printf+2
  4280  001C60  C09F  F0D9         	movff	_S_remain+1,?_printf+3
  4281  001C64  ECC0  F016         	call	_printf	;wreg free
  4282                           
  4283                           ;main.c: 612: lcdInst(0xC0);;
  4284  001C68  0EC0               	movlw	192
  4285  001C6A  EC15  F024         	call	_lcdInst
  4286                           
  4287                           ;main.c: 613: printf("%d",S_spacingTime);
  4288  001C6E  0E4E               	movlw	low (STR_60+12)
  4289  001C70  0100               	movlb	0	; () banked
  4290  001C72  6FD6               	movwf	printf@f& (0+255),b
  4291  001C74  0EFE               	movlw	high (STR_60+12)
  4292  001C76  6FD7               	movwf	(printf@f+1)& (0+255),b
  4293  001C78  C096  F0D8         	movff	_S_spacingTime,?_printf+2
  4294  001C7C  C097  F0D9         	movff	_S_spacingTime+1,?_printf+3
  4295  001C80  ECC0  F016         	call	_printf	;wreg free
  4296                           
  4297                           ;main.c: 615: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4298  001C84  0E80               	movlw	128
  4299  001C86  EC15  F024         	call	_lcdInst
  4300  001C8A  0E41               	movlw	65
  4301  001C8C  0100               	movlb	0	; () banked
  4302  001C8E  6FEC               	movwf	??_main& (0+255),b
  4303  001C90  0EEE               	movlw	238
  4304  001C92                     u5417:
  4305  001C92  2EE8               	decfsz	wreg,f,c
  4306  001C94  D7FE               	bra	u5417
  4307  001C96  2FEC               	decfsz	??_main& (0+255),f,b
  4308  001C98  D7FC               	bra	u5417
  4309  001C9A  F000               	nop	
  4310                           
  4311                           ;main.c: 618: S_spacingTime +=200;
  4312  001C9C  0EC8               	movlw	200
  4313  001C9E  0100               	movlb	0	; () banked
  4314  001CA0  2796               	addwf	_S_spacingTime& (0+255),f,b
  4315  001CA2  0E00               	movlw	0
  4316  001CA4  2397               	addwfc	(_S_spacingTime+1)& (0+255),f,b
  4317                           
  4318                           ; BSR set to: 0
  4319  001CA6  D7A5               	goto	l409
  4320  001CA8                     l411:
  4321                           
  4322                           ;main.c: 621: }
  4323                           ;main.c: 631: I2C_sendData(close_handle);
  4324                           
  4325                           ; BSR set to: 0
  4326  001CA8  0100               	movlb	0	; () banked
  4327  001CAA  51F0               	movf	_close_handle& (0+255),w,b
  4328  001CAC  ECB0  F023         	call	_I2C_sendData
  4329                           
  4330                           ;main.c: 636: get_RTC_final();
  4331  001CB0  ECA4  F01E         	call	_get_RTC_final	;wreg free
  4332                           
  4333                           ;main.c: 638: printf("Bolt_remain:%d",B_remain);
  4334  001CB4  0E7E               	movlw	low STR_44
  4335  001CB6  0100               	movlb	0	; () banked
  4336  001CB8  6FD6               	movwf	printf@f& (0+255),b
  4337  001CBA  0EFE               	movlw	high STR_44
  4338  001CBC  6FD7               	movwf	(printf@f+1)& (0+255),b
  4339  001CBE  C0A2  F0D8         	movff	_B_remain,?_printf+2
  4340  001CC2  C0A3  F0D9         	movff	_B_remain+1,?_printf+3
  4341  001CC6  ECC0  F016         	call	_printf	;wreg free
  4342                           
  4343                           ;main.c: 639: _delay((unsigned long)((300)*(40000000/4000.0)));
  4344  001CCA  0E10               	movlw	16
  4345  001CCC  0100               	movlb	0	; () banked
  4346  001CCE  6FED               	movwf	(??_main+1)& (0+255),b
  4347  001CD0  0E39               	movlw	57
  4348  001CD2  6FEC               	movwf	??_main& (0+255),b
  4349  001CD4  0E0D               	movlw	13
  4350  001CD6                     u5427:
  4351  001CD6  2EE8               	decfsz	wreg,f,c
  4352  001CD8  D7FE               	bra	u5427
  4353  001CDA  2FEC               	decfsz	??_main& (0+255),f,b
  4354  001CDC  D7FC               	bra	u5427
  4355  001CDE  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4356  001CE0  D7FA               	bra	u5427
  4357  001CE2  D000               	nop2	
  4358                           
  4359                           ;main.c: 640: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4360  001CE4  0E01               	movlw	1
  4361  001CE6  EC15  F024         	call	_lcdInst
  4362  001CEA  0EC3               	movlw	195
  4363  001CEC  0100               	movlb	0	; () banked
  4364  001CEE  6FEC               	movwf	??_main& (0+255),b
  4365  001CF0  0ECD               	movlw	205
  4366  001CF2                     u5437:
  4367  001CF2  2EE8               	decfsz	wreg,f,c
  4368  001CF4  D7FE               	bra	u5437
  4369  001CF6  2FEC               	decfsz	??_main& (0+255),f,b
  4370  001CF8  D7FC               	bra	u5437
  4371                           
  4372                           ;main.c: 641: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4373  001CFA  0E80               	movlw	128
  4374  001CFC  EC15  F024         	call	_lcdInst
  4375  001D00  0E41               	movlw	65
  4376  001D02  0100               	movlb	0	; () banked
  4377  001D04  6FEC               	movwf	??_main& (0+255),b
  4378  001D06  0EEE               	movlw	238
  4379  001D08                     u5447:
  4380  001D08  2EE8               	decfsz	wreg,f,c
  4381  001D0A  D7FE               	bra	u5447
  4382  001D0C  2FEC               	decfsz	??_main& (0+255),f,b
  4383  001D0E  D7FC               	bra	u5447
  4384  001D10  F000               	nop	
  4385                           
  4386                           ;main.c: 642: printf("Nut_remain:%d",N_remain);
  4387  001D12  0ED6               	movlw	low STR_45
  4388  001D14  0100               	movlb	0	; () banked
  4389  001D16  6FD6               	movwf	printf@f& (0+255),b
  4390  001D18  0EFE               	movlw	high STR_45
  4391  001D1A  6FD7               	movwf	(printf@f+1)& (0+255),b
  4392  001D1C  C0A0  F0D8         	movff	_N_remain,?_printf+2
  4393  001D20  C0A1  F0D9         	movff	_N_remain+1,?_printf+3
  4394  001D24  ECC0  F016         	call	_printf	;wreg free
  4395                           
  4396                           ;main.c: 643: _delay((unsigned long)((300)*(40000000/4000.0)));
  4397  001D28  0E10               	movlw	16
  4398  001D2A  0100               	movlb	0	; () banked
  4399  001D2C  6FED               	movwf	(??_main+1)& (0+255),b
  4400  001D2E  0E39               	movlw	57
  4401  001D30  6FEC               	movwf	??_main& (0+255),b
  4402  001D32  0E0D               	movlw	13
  4403  001D34                     u5457:
  4404  001D34  2EE8               	decfsz	wreg,f,c
  4405  001D36  D7FE               	bra	u5457
  4406  001D38  2FEC               	decfsz	??_main& (0+255),f,b
  4407  001D3A  D7FC               	bra	u5457
  4408  001D3C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4409  001D3E  D7FA               	bra	u5457
  4410  001D40  D000               	nop2	
  4411                           
  4412                           ;main.c: 644: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4413  001D42  0E01               	movlw	1
  4414  001D44  EC15  F024         	call	_lcdInst
  4415  001D48  0EC3               	movlw	195
  4416  001D4A  0100               	movlb	0	; () banked
  4417  001D4C  6FEC               	movwf	??_main& (0+255),b
  4418  001D4E  0ECD               	movlw	205
  4419  001D50                     u5467:
  4420  001D50  2EE8               	decfsz	wreg,f,c
  4421  001D52  D7FE               	bra	u5467
  4422  001D54  2FEC               	decfsz	??_main& (0+255),f,b
  4423  001D56  D7FC               	bra	u5467
  4424                           
  4425                           ;main.c: 645: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4426  001D58  0E80               	movlw	128
  4427  001D5A  EC15  F024         	call	_lcdInst
  4428  001D5E  0E41               	movlw	65
  4429  001D60  0100               	movlb	0	; () banked
  4430  001D62  6FEC               	movwf	??_main& (0+255),b
  4431  001D64  0EEE               	movlw	238
  4432  001D66                     u5477:
  4433  001D66  2EE8               	decfsz	wreg,f,c
  4434  001D68  D7FE               	bra	u5477
  4435  001D6A  2FEC               	decfsz	??_main& (0+255),f,b
  4436  001D6C  D7FC               	bra	u5477
  4437  001D6E  F000               	nop	
  4438                           
  4439                           ;main.c: 646: printf("Spacer_remain:%d",S_remain);
  4440  001D70  0EB0               	movlw	low STR_46
  4441  001D72  0100               	movlb	0	; () banked
  4442  001D74  6FD6               	movwf	printf@f& (0+255),b
  4443  001D76  0EFD               	movlw	high STR_46
  4444  001D78  6FD7               	movwf	(printf@f+1)& (0+255),b
  4445  001D7A  C09E  F0D8         	movff	_S_remain,?_printf+2
  4446  001D7E  C09F  F0D9         	movff	_S_remain+1,?_printf+3
  4447  001D82  ECC0  F016         	call	_printf	;wreg free
  4448                           
  4449                           ;main.c: 647: _delay((unsigned long)((300)*(40000000/4000.0)));
  4450  001D86  0E10               	movlw	16
  4451  001D88  0100               	movlb	0	; () banked
  4452  001D8A  6FED               	movwf	(??_main+1)& (0+255),b
  4453  001D8C  0E39               	movlw	57
  4454  001D8E  6FEC               	movwf	??_main& (0+255),b
  4455  001D90  0E0D               	movlw	13
  4456  001D92                     u5487:
  4457  001D92  2EE8               	decfsz	wreg,f,c
  4458  001D94  D7FE               	bra	u5487
  4459  001D96  2FEC               	decfsz	??_main& (0+255),f,b
  4460  001D98  D7FC               	bra	u5487
  4461  001D9A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4462  001D9C  D7FA               	bra	u5487
  4463  001D9E  D000               	nop2	
  4464                           
  4465                           ;main.c: 648: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4466  001DA0  0E01               	movlw	1
  4467  001DA2  EC15  F024         	call	_lcdInst
  4468  001DA6  0EC3               	movlw	195
  4469  001DA8  0100               	movlb	0	; () banked
  4470  001DAA  6FEC               	movwf	??_main& (0+255),b
  4471  001DAC  0ECD               	movlw	205
  4472  001DAE                     u5497:
  4473  001DAE  2EE8               	decfsz	wreg,f,c
  4474  001DB0  D7FE               	bra	u5497
  4475  001DB2  2FEC               	decfsz	??_main& (0+255),f,b
  4476  001DB4  D7FC               	bra	u5497
  4477                           
  4478                           ;main.c: 649: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4479  001DB6  0E80               	movlw	128
  4480  001DB8  EC15  F024         	call	_lcdInst
  4481  001DBC  0E41               	movlw	65
  4482  001DBE  0100               	movlb	0	; () banked
  4483  001DC0  6FEC               	movwf	??_main& (0+255),b
  4484  001DC2  0EEE               	movlw	238
  4485  001DC4                     u5507:
  4486  001DC4  2EE8               	decfsz	wreg,f,c
  4487  001DC6  D7FE               	bra	u5507
  4488  001DC8  2FEC               	decfsz	??_main& (0+255),f,b
  4489  001DCA  D7FC               	bra	u5507
  4490  001DCC  F000               	nop	
  4491                           
  4492                           ;main.c: 650: printf("Washer_remain:%d",W_remain);
  4493  001DCE  0EC1               	movlw	low STR_47
  4494  001DD0  0100               	movlb	0	; () banked
  4495  001DD2  6FD6               	movwf	printf@f& (0+255),b
  4496  001DD4  0EFD               	movlw	high STR_47
  4497  001DD6  6FD7               	movwf	(printf@f+1)& (0+255),b
  4498  001DD8  C09C  F0D8         	movff	_W_remain,?_printf+2
  4499  001DDC  C09D  F0D9         	movff	_W_remain+1,?_printf+3
  4500  001DE0  ECC0  F016         	call	_printf	;wreg free
  4501                           
  4502                           ;main.c: 651: _delay((unsigned long)((300)*(40000000/4000.0)));
  4503  001DE4  0E10               	movlw	16
  4504  001DE6  0100               	movlb	0	; () banked
  4505  001DE8  6FED               	movwf	(??_main+1)& (0+255),b
  4506  001DEA  0E39               	movlw	57
  4507  001DEC  6FEC               	movwf	??_main& (0+255),b
  4508  001DEE  0E0D               	movlw	13
  4509  001DF0                     u5517:
  4510  001DF0  2EE8               	decfsz	wreg,f,c
  4511  001DF2  D7FE               	bra	u5517
  4512  001DF4  2FEC               	decfsz	??_main& (0+255),f,b
  4513  001DF6  D7FC               	bra	u5517
  4514  001DF8  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4515  001DFA  D7FA               	bra	u5517
  4516  001DFC  D000               	nop2	
  4517                           
  4518                           ;main.c: 652: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4519  001DFE  0E01               	movlw	1
  4520  001E00  EC15  F024         	call	_lcdInst
  4521  001E04  0EC3               	movlw	195
  4522  001E06  0100               	movlb	0	; () banked
  4523  001E08  6FEC               	movwf	??_main& (0+255),b
  4524  001E0A  0ECD               	movlw	205
  4525  001E0C                     u5527:
  4526  001E0C  2EE8               	decfsz	wreg,f,c
  4527  001E0E  D7FE               	bra	u5527
  4528  001E10  2FEC               	decfsz	??_main& (0+255),f,b
  4529  001E12  D7FC               	bra	u5527
  4530                           
  4531                           ;main.c: 653: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4532  001E14  0E80               	movlw	128
  4533  001E16  EC15  F024         	call	_lcdInst
  4534  001E1A  0E41               	movlw	65
  4535  001E1C  0100               	movlb	0	; () banked
  4536  001E1E  6FEC               	movwf	??_main& (0+255),b
  4537  001E20  0EEE               	movlw	238
  4538  001E22                     u5537:
  4539  001E22  2EE8               	decfsz	wreg,f,c
  4540  001E24  D7FE               	bra	u5537
  4541  001E26  2FEC               	decfsz	??_main& (0+255),f,b
  4542  001E28  D7FC               	bra	u5537
  4543  001E2A  F000               	nop	
  4544                           
  4545                           ;main.c: 654: printf("you're done");
  4546  001E2C  0E32               	movlw	low STR_48
  4547  001E2E  0100               	movlb	0	; () banked
  4548  001E30  6FD6               	movwf	printf@f& (0+255),b
  4549  001E32  0EFF               	movlw	high STR_48
  4550  001E34  6FD7               	movwf	(printf@f+1)& (0+255),b
  4551  001E36  ECC0  F016         	call	_printf	;wreg free
  4552                           
  4553                           ;main.c: 655: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4554  001E3A  0E33               	movlw	51
  4555  001E3C  0100               	movlb	0	; () banked
  4556  001E3E  6FED               	movwf	(??_main+1)& (0+255),b
  4557  001E40  0EBB               	movlw	187
  4558  001E42  6FEC               	movwf	??_main& (0+255),b
  4559  001E44  0EDF               	movlw	223
  4560  001E46                     u5547:
  4561  001E46  2EE8               	decfsz	wreg,f,c
  4562  001E48  D7FE               	bra	u5547
  4563  001E4A  2FEC               	decfsz	??_main& (0+255),f,b
  4564  001E4C  D7FC               	bra	u5547
  4565  001E4E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4566  001E50  D7FA               	bra	u5547
  4567  001E52  D000               	nop2	
  4568                           
  4569                           ;main.c: 656: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4570  001E54  0E80               	movlw	128
  4571  001E56  EC15  F024         	call	_lcdInst
  4572  001E5A  0E41               	movlw	65
  4573  001E5C  0100               	movlb	0	; () banked
  4574  001E5E  6FEC               	movwf	??_main& (0+255),b
  4575  001E60  0EEE               	movlw	238
  4576  001E62                     u5557:
  4577  001E62  2EE8               	decfsz	wreg,f,c
  4578  001E64  D7FE               	bra	u5557
  4579  001E66  2FEC               	decfsz	??_main& (0+255),f,b
  4580  001E68  D7FC               	bra	u5557
  4581  001E6A  F000               	nop	
  4582  001E6C                     
  4583                           ;main.c: 680: (INTCONbits.GIE = 1);
  4584  001E6C  8EF2               	bsf	intcon,7,c	;volatile
  4585                           
  4586                           ;main.c: 681: operation = 1;
  4587  001E6E  0E00               	movlw	0
  4588  001E70  6E74               	movwf	_operation+1,c
  4589  001E72  0E01               	movlw	1
  4590  001E74  6E73               	movwf	_operation,c
  4591                           
  4592                           ;main.c: 682: printf("1: Date and Time");
  4593  001E76  0EE3               	movlw	low STR_49
  4594  001E78  0100               	movlb	0	; () banked
  4595  001E7A  6FD6               	movwf	printf@f& (0+255),b
  4596  001E7C  0EFD               	movlw	high STR_49
  4597  001E7E  6FD7               	movwf	(printf@f+1)& (0+255),b
  4598  001E80  ECC0  F016         	call	_printf	;wreg free
  4599                           
  4600                           ;main.c: 683: lcdInst(0xC0);;
  4601  001E84  0EC0               	movlw	192
  4602  001E86  EC15  F024         	call	_lcdInst
  4603                           
  4604                           ;main.c: 684: printf(" 2: Operation Time");
  4605  001E8A  0E7A               	movlw	low STR_50
  4606  001E8C  0100               	movlb	0	; () banked
  4607  001E8E  6FD6               	movwf	printf@f& (0+255),b
  4608  001E90  0EFD               	movlw	high STR_50
  4609  001E92  6FD7               	movwf	(printf@f+1)& (0+255),b
  4610  001E94  ECC0  F016         	call	_printf	;wreg free
  4611                           
  4612                           ;main.c: 685: _delay((unsigned long)((600)*(40000000/4000.0)));
  4613  001E98  0E1F               	movlw	31
  4614  001E9A  0100               	movlb	0	; () banked
  4615  001E9C  6FED               	movwf	(??_main+1)& (0+255),b
  4616  001E9E  0E71               	movlw	113
  4617  001EA0  6FEC               	movwf	??_main& (0+255),b
  4618  001EA2  0E1E               	movlw	30
  4619  001EA4                     u5567:
  4620  001EA4  2EE8               	decfsz	wreg,f,c
  4621  001EA6  D7FE               	bra	u5567
  4622  001EA8  2FEC               	decfsz	??_main& (0+255),f,b
  4623  001EAA  D7FC               	bra	u5567
  4624  001EAC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4625  001EAE  D7FA               	bra	u5567
  4626  001EB0  F000               	nop	
  4627                           
  4628                           ;main.c: 686: initLCD();
  4629  001EB2  EC72  F022         	call	_initLCD	;wreg free
  4630                           
  4631                           ;main.c: 687: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4632  001EB6  0E80               	movlw	128
  4633  001EB8  EC15  F024         	call	_lcdInst
  4634  001EBC  0E41               	movlw	65
  4635  001EBE  0100               	movlb	0	; () banked
  4636  001EC0  6FEC               	movwf	??_main& (0+255),b
  4637  001EC2  0EEE               	movlw	238
  4638  001EC4                     u5577:
  4639  001EC4  2EE8               	decfsz	wreg,f,c
  4640  001EC6  D7FE               	bra	u5577
  4641  001EC8  2FEC               	decfsz	??_main& (0+255),f,b
  4642  001ECA  D7FC               	bra	u5577
  4643  001ECC  F000               	nop	
  4644                           
  4645                           ;main.c: 688: printf("3:summary");
  4646  001ECE  0E76               	movlw	low STR_51
  4647  001ED0  0100               	movlb	0	; () banked
  4648  001ED2  6FD6               	movwf	printf@f& (0+255),b
  4649  001ED4  0EFF               	movlw	high STR_51
  4650  001ED6  6FD7               	movwf	(printf@f+1)& (0+255),b
  4651  001ED8  ECC0  F016         	call	_printf	;wreg free
  4652                           
  4653                           ;main.c: 689: lcdInst(0xC0);;
  4654  001EDC  0EC0               	movlw	192
  4655  001EDE  EC15  F024         	call	_lcdInst
  4656                           
  4657                           ;main.c: 691: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4658  001EE2  0E33               	movlw	51
  4659  001EE4  0100               	movlb	0	; () banked
  4660  001EE6  6FED               	movwf	(??_main+1)& (0+255),b
  4661  001EE8  0EBB               	movlw	187
  4662  001EEA  6FEC               	movwf	??_main& (0+255),b
  4663  001EEC  0EDF               	movlw	223
  4664  001EEE                     u5587:
  4665  001EEE  2EE8               	decfsz	wreg,f,c
  4666  001EF0  D7FE               	bra	u5587
  4667  001EF2  2FEC               	decfsz	??_main& (0+255),f,b
  4668  001EF4  D7FC               	bra	u5587
  4669  001EF6  2FED               	decfsz	(??_main+1)& (0+255),f,b
  4670  001EF8  D7FA               	bra	u5587
  4671  001EFA  D000               	nop2	
  4672                           
  4673                           ;main.c: 692: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4674  001EFC  0E80               	movlw	128
  4675  001EFE  EC15  F024         	call	_lcdInst
  4676  001F02  0E41               	movlw	65
  4677  001F04  0100               	movlb	0	; () banked
  4678  001F06  6FEC               	movwf	??_main& (0+255),b
  4679  001F08  0EEE               	movlw	238
  4680  001F0A                     u5597:
  4681  001F0A  2EE8               	decfsz	wreg,f,c
  4682  001F0C  D7FE               	bra	u5597
  4683  001F0E  2FEC               	decfsz	??_main& (0+255),f,b
  4684  001F10  D7FC               	bra	u5597
  4685  001F12  F000               	nop	
  4686                           
  4687                           ;main.c: 694: if(operation_done == 1){
  4688  001F14  0100               	movlb	0	; () banked
  4689  001F16  05B6               	decf	_operation_done& (0+255),w,b
  4690  001F18  11B7               	iorwf	(_operation_done+1)& (0+255),w,b
  4691  001F1A  A4D8               	btfss	status,2,c
  4692  001F1C  D7A7               	goto	l415
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;main.c: 696: }
  4696                           ;main.c: 697: }
  4697                           ;main.c: 698: initialize();
  4698                           
  4699                           ; BSR set to: 0
  4700                           
  4701                           ; BSR set to: 0
  4702                           
  4703                           ; BSR set to: 0
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;main.c: 695: break;
  4707  001F1E  EC59  F01D         	call	_initialize	;wreg free
  4708                           
  4709                           ;main.c: 699: mode = 0;
  4710  001F22  0E00               	movlw	0
  4711  001F24  0100               	movlb	0	; () banked
  4712  001F26  6FBB               	movwf	(_mode+1)& (0+255),b
  4713  001F28  0E00               	movlw	0
  4714  001F2A  6FBA               	movwf	_mode& (0+255),b
  4715                           
  4716                           ; BSR set to: 0
  4717                           
  4718                           ; BSR set to: 0
  4719  001F2C  EF1A  F008         	goto	l346
  4720  001F30                     __end_of_main:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           intcon	equ	0xFF2
  4727                           intcon3	equ	0xFF0
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           postdec1	equ	0xFE5
  4731                           fsr1l	equ	0xFE1
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _readADC *****************
  4739 ;; Defined at:
  4740 ;;		line 1234 in file "main.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  channel         1    wreg     unsigned char 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  channel         1    4[BANK0 ] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  2    0[BANK0 ] unsigned short 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4754 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;Total ram usage:        5 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    4
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_main
  4765 ;;		_count_gear
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text1
  4770  0046D4                     __ptext1:
  4771                           	opt stack 0
  4772  0046D4                     _readADC:
  4773                           	opt stack 26
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;incstack = 0
  4777                           ;readADC@channel stored from wreg
  4778  0046D4  0100               	movlb	0	; () banked
  4779  0046D6  6FCC               	movwf	readADC@channel& (0+255),b
  4780                           
  4781                           ;main.c: 1243: ADCON0 = (channel & 0x0F) << 2;
  4782  0046D8  C0CC  F0CA         	movff	readADC@channel,??_readADC
  4783  0046DC  0E0F               	movlw	15
  4784  0046DE  0100               	movlb	0	; () banked
  4785  0046E0  17CA               	andwf	??_readADC& (0+255),f,b
  4786  0046E2  90D8               	bcf	status,0,c
  4787  0046E4  37CA               	rlcf	??_readADC& (0+255),f,b
  4788  0046E6  90D8               	bcf	status,0,c
  4789  0046E8  35CA               	rlcf	??_readADC& (0+255),w,b
  4790  0046EA  6EC2               	movwf	4034,c	;volatile
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;main.c: 1244: ADON = 1;
  4794  0046EC  80C2               	bsf	4034,0,c	;volatile
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;main.c: 1245: ADCON0bits.GO = 1;
  4798  0046EE  82C2               	bsf	4034,1,c	;volatile
  4799  0046F0                     
  4800                           ; BSR set to: 0
  4801  0046F0  B2C2               	btfsc	4034,1,c	;volatile
  4802  0046F2  D7FE               	goto	l495
  4803                           
  4804                           ;main.c: 1247: return (ADRESH << 8) | ADRESL;
  4805  0046F4  50C3               	movf	4035,w,c	;volatile
  4806  0046F6  CFC4 F0CA          	movff	4036,??_readADC	;volatile
  4807  0046FA  0100               	movlb	0	; () banked
  4808  0046FC  6BCB               	clrf	(??_readADC+1)& (0+255),b
  4809  0046FE  C0CA  F0CB         	movff	??_readADC,??_readADC+1
  4810  004702  6BCA               	clrf	??_readADC& (0+255),b
  4811  004704  11CA               	iorwf	??_readADC& (0+255),w,b
  4812  004706  6FC8               	movwf	?_readADC& (0+255),b
  4813  004708  51CB               	movf	(??_readADC+1)& (0+255),w,b
  4814  00470A  6FC9               	movwf	(?_readADC+1)& (0+255),b
  4815  00470C  0012               	return	
  4816  00470E                     __end_of_readADC:
  4817                           	opt stack 0
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           intcon	equ	0xFF2
  4823                           intcon3	equ	0xFF0
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _printf *****************
  4835 ;; Defined at:
  4836 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4839 ;;		 -> STR_86(3), STR_85(9), STR_84(12), STR_82(7), 
  4840 ;;		 -> STR_80(3), STR_79(11), STR_77(3), STR_76(9), 
  4841 ;;		 -> STR_71(15), STR_70(12), STR_69(9), STR_68(16), 
  4842 ;;		 -> STR_67(17), STR_66(17), STR_65(14), STR_64(15), 
  4843 ;;		 -> STR_63(15), STR_62(15), STR_61(15), STR_60(15), 
  4844 ;;		 -> STR_59(20), STR_58(17), STR_57(13), STR_56(16), 
  4845 ;;		 -> STR_55(15), STR_54(15), STR_53(15), STR_52(15), 
  4846 ;;		 -> STR_51(10), STR_50(19), STR_49(17), STR_48(12), 
  4847 ;;		 -> STR_47(17), STR_46(17), STR_45(14), STR_44(15), 
  4848 ;;		 -> STR_43(3), STR_42(3), STR_41(3), STR_40(3), 
  4849 ;;		 -> STR_39(3), STR_38(3), STR_37(3), STR_36(3), 
  4850 ;;		 -> STR_35(3), STR_34(9), STR_33(20), STR_32(3), 
  4851 ;;		 -> STR_31(3), STR_30(21), STR_29(11), STR_28(13), 
  4852 ;;		 -> STR_27(18), STR_26(11), STR_25(13), STR_24(19), 
  4853 ;;		 -> STR_23(11), STR_22(13), STR_21(15), STR_20(12), 
  4854 ;;		 -> STR_19(7), STR_18(14), STR_17(14), STR_16(16), 
  4855 ;;		 -> STR_15(14), STR_14(3), STR_13(2), STR_12(3), 
  4856 ;;		 -> STR_11(2), STR_10(3), STR_9(5), STR_8(17), 
  4857 ;;		 -> STR_7(6), STR_6(8), STR_5(3), STR_4(14), 
  4858 ;;		 -> STR_3(15), STR_2(14), STR_1(16), 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  idx             1   22[BANK0 ] unsigned char 
  4861 ;;  tmpval          4    0        struct .
  4862 ;;  width           2   33[BANK0 ] int 
  4863 ;;  val             2   30[BANK0 ] unsigned int 
  4864 ;;  len             2   28[BANK0 ] unsigned int 
  4865 ;;  ap              2   26[BANK0 ] PTR void [1]
  4866 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4867 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  4868 ;;		 -> STR_107(7), number(2), final_set(40), current_set(5), 
  4869 ;;  c               1   35[BANK0 ] char 
  4870 ;;  flag            1   32[BANK0 ] unsigned char 
  4871 ;;  prec            1   23[BANK0 ] char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  2   14[BANK0 ] int 
  4874 ;; Registers used:
  4875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;Total ram usage:       22 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    6
  4888 ;; This function calls:
  4889 ;;		___lwdiv
  4890 ;;		___lwmod
  4891 ;;		___wmul
  4892 ;;		_isdigit
  4893 ;;		_putch
  4894 ;; This function is called by:
  4895 ;;		_main
  4896 ;;		_count_gear
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text2
  4901  002D80                     __ptext2:
  4902                           	opt stack 0
  4903  002D80                     _printf:
  4904                           	opt stack 24
  4905                           
  4906                           ;doprnt.c: 466: va_list ap;
  4907                           ;doprnt.c: 499: signed char c;
  4908                           ;doprnt.c: 501: int width;
  4909                           ;doprnt.c: 506: signed char prec;
  4910                           ;doprnt.c: 508: unsigned char flag;
  4911                           ;doprnt.c: 523: union {
  4912                           ;doprnt.c: 524: unsigned long vd;
  4913                           ;doprnt.c: 525: double integ;
  4914                           ;doprnt.c: 526: } tmpval;
  4915                           ;doprnt.c: 528: unsigned int val;
  4916                           ;doprnt.c: 529: unsigned len;
  4917                           ;doprnt.c: 530: const char * cp;
  4918                           ;doprnt.c: 533: *ap = __va_start();
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;incstack = 0
  4922  002D80  0ED8               	movlw	low (?_printf+2)
  4923  002D82  0100               	movlb	0	; () banked
  4924  002D84  6FE2               	movwf	printf@ap& (0+255),b
  4925  002D86  0E00               	movlw	high (?_printf+2)
  4926  002D88  6FE3               	movwf	(printf@ap+1)& (0+255),b
  4927                           
  4928                           ;doprnt.c: 536: while(c = *f++) {
  4929  002D8A  D20F               	goto	u3210
  4930  002D8C                     
  4931                           ; BSR set to: 0
  4932                           ;doprnt.c: 538: if(c != '%')
  4933                           
  4934                           ; BSR set to: 0
  4935  002D8C  0E25               	movlw	37
  4936  002D8E  19EB               	xorwf	printf@c& (0+255),w,b
  4937  002D90  B4D8               	btfsc	status,2,c
  4938  002D92  D004               	goto	l854
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;doprnt.c: 540: {
  4942                           ;doprnt.c: 541: (putch(c) );
  4943  002D94  51EB               	movf	printf@c& (0+255),w,b
  4944  002D96  EC09  F024         	call	_putch
  4945                           
  4946                           ;doprnt.c: 542: continue;
  4947  002D9A  D207               	goto	u3210
  4948  002D9C                     l854:
  4949                           
  4950                           ;doprnt.c: 543: }
  4951                           ;doprnt.c: 546: width = 0;
  4952  002D9C  0E00               	movlw	0
  4953  002D9E  0100               	movlb	0	; () banked
  4954  002DA0  6FEA               	movwf	(printf@width+1)& (0+255),b
  4955  002DA2  0E00               	movlw	0
  4956  002DA4  6FE9               	movwf	printf@width& (0+255),b
  4957                           
  4958                           ;doprnt.c: 548: flag = 0;
  4959  002DA6  0E00               	movlw	0
  4960  002DA8  6FE8               	movwf	printf@flag& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;doprnt.c: 551: switch(*f) {
  4964                           
  4965                           ;doprnt.c: 550: for(;;) {
  4966  002DAA  D004               	goto	l856
  4967  002DAC                     
  4968                           ;doprnt.c: 580: flag |= 0x04;
  4969                           
  4970                           ; BSR set to: 0
  4971  002DAC  0100               	movlb	0	; () banked
  4972  002DAE  85E8               	bsf	printf@flag& (0+255),2,b
  4973                           
  4974                           ;doprnt.c: 581: f++;
  4975  002DB0  4BD6               	infsnz	printf@f& (0+255),f,b
  4976  002DB2  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4977  002DB4                     l856:
  4978                           
  4979                           ; BSR set to: 0
  4980  002DB4  C0D6  FFF6         	movff	printf@f,tblptrl
  4981  002DB8  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4982  002DBC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4983  002DBC  6AF8               	clrf	tblptru,c
  4984  002DBE                     	endif
  4985  002DBE                     	if	0	;tblptru may be non-zero
  4986  002DBE                     	endif
  4987  002DBE  0008               	tblrd		*
  4988  002DC0  50F5               	movf	tablat,w,c
  4989                           
  4990                           ; Switch size 1, requested type "space"
  4991                           ; Number of cases is 1, Range of values is 48 to 48
  4992                           ; switch strategies available:
  4993                           ; Name         Instructions Cycles
  4994                           ; simple_byte            4     3 (average)
  4995                           ;	Chosen strategy is simple_byte
  4996  002DC2  0A30               	xorlw	48	; case 48
  4997  002DC4  B4D8               	btfsc	status,2,c
  4998  002DC6  D7F2               	goto	l857
  4999                           
  5000                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5001                           
  5002                           ;doprnt.c: 586: }
  5003                           
  5004                           ;doprnt.c: 585: break;
  5005  002DC8  C0D6  FFF6         	movff	printf@f,tblptrl
  5006  002DCC  C0D7  FFF7         	movff	printf@f+1,tblptrh
  5007  002DD0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5008  002DD0  6AF8               	clrf	tblptru,c
  5009  002DD2                     	endif
  5010  002DD2                     	if	0	;tblptru may be non-zero
  5011  002DD2                     	endif
  5012  002DD2  0008               	tblrd		*
  5013  002DD4  50F5               	movf	tablat,w,c
  5014  002DD6  ECE9  F023         	call	_isdigit
  5015  002DDA  A0D8               	btfss	status,0,c
  5016  002DDC  D0AE               	goto	l864
  5017                           
  5018                           ;doprnt.c: 598: width = 0;
  5019  002DDE  0E00               	movlw	0
  5020  002DE0  0100               	movlb	0	; () banked
  5021  002DE2  6FEA               	movwf	(printf@width+1)& (0+255),b
  5022  002DE4  0E00               	movlw	0
  5023  002DE6  6FE9               	movwf	printf@width& (0+255),b
  5024  002DE8                     
  5025                           ;doprnt.c: 600: width *= 10;
  5026                           
  5027                           ; BSR set to: 0
  5028  002DE8  C0E9  F0D0         	movff	printf@width,___wmul@multiplier
  5029  002DEC  C0EA  F0D1         	movff	printf@width+1,___wmul@multiplier+1
  5030  002DF0  0E00               	movlw	0
  5031  002DF2  0100               	movlb	0	; () banked
  5032  002DF4  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5033  002DF6  0E0A               	movlw	10
  5034  002DF8  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  5035  002DFA  EC9C  F023         	call	___wmul	;wreg free
  5036  002DFE  C0D0  F0E9         	movff	?___wmul,printf@width
  5037  002E02  C0D1  F0EA         	movff	?___wmul+1,printf@width+1
  5038                           
  5039                           ;doprnt.c: 601: width += *f++ - '0';
  5040  002E06  0ED0               	movlw	208
  5041  002E08  0100               	movlb	0	; () banked
  5042  002E0A  6FDA               	movwf	??_printf& (0+255),b
  5043  002E0C  0EFF               	movlw	255
  5044  002E0E  6FDB               	movwf	(??_printf+1)& (0+255),b
  5045  002E10  C0D6  FFF6         	movff	printf@f,tblptrl
  5046  002E14  C0D7  FFF7         	movff	printf@f+1,tblptrh
  5047  002E18                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5048  002E18  6AF8               	clrf	tblptru,c
  5049  002E1A                     	endif
  5050  002E1A                     	if	0	;tblptru may be non-zero
  5051  002E1A                     	endif
  5052  002E1A  0008               	tblrd		*
  5053  002E1C  50F5               	movf	tablat,w,c
  5054  002E1E  6FDC               	movwf	(??_printf+2)& (0+255),b
  5055  002E20  6BDD               	clrf	(??_printf+3)& (0+255),b
  5056  002E22  51DA               	movf	??_printf& (0+255),w,b
  5057  002E24  27DC               	addwf	(??_printf+2)& (0+255),f,b
  5058  002E26  51DB               	movf	(??_printf+1)& (0+255),w,b
  5059  002E28  23DD               	addwfc	(??_printf+3)& (0+255),f,b
  5060  002E2A  51DC               	movf	(??_printf+2)& (0+255),w,b
  5061  002E2C  27E9               	addwf	printf@width& (0+255),f,b
  5062  002E2E  51DD               	movf	(??_printf+3)& (0+255),w,b
  5063  002E30  23EA               	addwfc	(printf@width+1)& (0+255),f,b
  5064                           
  5065                           ; BSR set to: 0
  5066  002E32  4BD6               	infsnz	printf@f& (0+255),f,b
  5067  002E34  2BD7               	incf	(printf@f+1)& (0+255),f,b
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5071  002E36  C0D6  FFF6         	movff	printf@f,tblptrl
  5072  002E3A  C0D7  FFF7         	movff	printf@f+1,tblptrh
  5073  002E3E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5074  002E3E  6AF8               	clrf	tblptru,c
  5075  002E40                     	endif
  5076  002E40                     	if	0	;tblptru may be non-zero
  5077  002E40                     	endif
  5078  002E40  0008               	tblrd		*
  5079  002E42  50F5               	movf	tablat,w,c
  5080  002E44  ECE9  F023         	call	_isdigit
  5081  002E48  A0D8               	btfss	status,0,c
  5082  002E4A  D077               	goto	l864
  5083  002E4C  D7CD               	goto	l862
  5084  002E4E                     
  5085                           ;doprnt.c: 721: flag |= 0x80;
  5086  002E4E  0100               	movlb	0	; () banked
  5087  002E50  8FE8               	bsf	printf@flag& (0+255),7,b
  5088                           
  5089                           ;doprnt.c: 723: break;
  5090  002E52  D08F               	goto	l869
  5091  002E54                     
  5092                           ; BSR set to: 0
  5093                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5094                           
  5095                           ; BSR set to: 0
  5096  002E54  C0E2  FFD9         	movff	printf@ap,fsr2l
  5097  002E58  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  5098  002E5C  CFDE F0E0          	movff	postinc2,printf@cp
  5099  002E60  CFDD F0E1          	movff	postdec2,printf@cp+1
  5100                           
  5101                           ; BSR set to: 0
  5102  002E64  0E02               	movlw	2
  5103  002E66  27E2               	addwf	printf@ap& (0+255),f,b
  5104  002E68  0E00               	movlw	0
  5105  002E6A  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;doprnt.c: 740: if(!cp)
  5109  002E6C  51E0               	movf	printf@cp& (0+255),w,b
  5110  002E6E  11E1               	iorwf	(printf@cp+1)& (0+255),w,b
  5111  002E70  A4D8               	btfss	status,2,c
  5112  002E72  D004               	goto	l872
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;doprnt.c: 741: cp = "(null)";
  5116  002E74  0EAC               	movlw	low STR_107
  5117  002E76  6FE0               	movwf	printf@cp& (0+255),b
  5118  002E78  0EFF               	movlw	high STR_107
  5119  002E7A  6FE1               	movwf	(printf@cp+1)& (0+255),b
  5120  002E7C                     l872:
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;doprnt.c: 745: len = 0;
  5124                           
  5125                           ; BSR set to: 0
  5126  002E7C  0E00               	movlw	0
  5127  002E7E  6FE5               	movwf	(printf@len+1)& (0+255),b
  5128  002E80  0E00               	movlw	0
  5129  002E82  6FE4               	movwf	printf@len& (0+255),b
  5130                           
  5131                           ;doprnt.c: 746: while(cp[len])
  5132  002E84  D003               	goto	l873
  5133  002E86                     
  5134                           ;doprnt.c: 747: len++;
  5135                           
  5136                           ; BSR set to: 0
  5137  002E86  0100               	movlb	0	; () banked
  5138  002E88  4BE4               	infsnz	printf@len& (0+255),f,b
  5139  002E8A  2BE5               	incf	(printf@len+1)& (0+255),f,b
  5140  002E8C                     l873:
  5141                           
  5142                           ; BSR set to: 0
  5143                           
  5144                           ; BSR set to: 0
  5145  002E8C  51E4               	movf	printf@len& (0+255),w,b
  5146  002E8E  25E0               	addwf	printf@cp& (0+255),w,b
  5147  002E90  6FDA               	movwf	??_printf& (0+255),b
  5148  002E92  51E5               	movf	(printf@len+1)& (0+255),w,b
  5149  002E94  21E1               	addwfc	(printf@cp+1)& (0+255),w,b
  5150  002E96  6FDB               	movwf	(??_printf+1)& (0+255),b
  5151  002E98  C0DA  FFF6         	movff	??_printf,tblptrl
  5152  002E9C  C0DB  FFF7         	movff	??_printf+1,tblptrh
  5153  002EA0  0E00               	movlw	low (__mediumconst shr (0+16))
  5154  002EA2  6EF8               	movwf	tblptru,c
  5155  002EA4  0E0F               	movlw	(high __ramtop+-1)
  5156  002EA6  64F7               	cpfsgt	tblptrh,c
  5157  002EA8  D003               	bra	u2977
  5158  002EAA  0008               	tblrd		*
  5159  002EAC  50F5               	movf	tablat,w,c
  5160  002EAE  D005               	bra	u2970
  5161  002EB0                     u2977:
  5162  002EB0  CFF6 FFE9          	movff	tblptrl,fsr0l
  5163  002EB4  CFF7 FFEA          	movff	tblptrh,fsr0h
  5164  002EB8  50EF               	movf	indf0,w,c
  5165  002EBA                     u2970:
  5166  002EBA  0900               	iorlw	0
  5167  002EBC  A4D8               	btfss	status,2,c
  5168  002EBE  D7E3               	goto	l874
  5169                           
  5170                           ;doprnt.c: 757: if(width > len)
  5171  002EC0  0100               	movlb	0	; () banked
  5172  002EC2  51E9               	movf	printf@width& (0+255),w,b
  5173  002EC4  5DE4               	subwf	printf@len& (0+255),w,b
  5174  002EC6  51EA               	movf	(printf@width+1)& (0+255),w,b
  5175  002EC8  59E5               	subwfb	(printf@len+1)& (0+255),w,b
  5176  002ECA  B0D8               	btfsc	status,0,c
  5177  002ECC  D005               	goto	l876
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;doprnt.c: 758: width -= len;
  5181  002ECE  51E4               	movf	printf@len& (0+255),w,b
  5182  002ED0  5FE9               	subwf	printf@width& (0+255),f,b
  5183  002ED2  51E5               	movf	(printf@len+1)& (0+255),w,b
  5184  002ED4  5BEA               	subwfb	(printf@width+1)& (0+255),f,b
  5185  002ED6  D008               	goto	l878
  5186  002ED8                     l876:
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;doprnt.c: 759: else
  5190                           ;doprnt.c: 760: width = 0;
  5191                           
  5192                           ; BSR set to: 0
  5193  002ED8  0E00               	movlw	0
  5194  002EDA  6FEA               	movwf	(printf@width+1)& (0+255),b
  5195  002EDC  0E00               	movlw	0
  5196  002EDE  6FE9               	movwf	printf@width& (0+255),b
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;doprnt.c: 764: while(width--)
  5200  002EE0  D003               	goto	l878
  5201  002EE2                     l4440:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;doprnt.c: 765: (putch(' ') );
  5205  002EE2  0E20               	movlw	32
  5206  002EE4  EC09  F024         	call	_putch
  5207  002EE8                     l878:
  5208  002EE8  0100               	movlb	0	; () banked
  5209  002EEA  07E9               	decf	printf@width& (0+255),f,b
  5210  002EEC  A0D8               	btfss	status,0,c
  5211  002EEE  07EA               	decf	(printf@width+1)& (0+255),f,b
  5212  002EF0  29E9               	incf	printf@width& (0+255),w,b
  5213  002EF2  E1F7               	bnz	l4440
  5214  002EF4  29EA               	incf	(printf@width+1)& (0+255),w,b
  5215  002EF6  B4D8               	btfsc	status,2,c
  5216  002EF8  D017               	goto	l881
  5217  002EFA  D7F3               	goto	l879
  5218  002EFC                     l4444:
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 768: (putch(*cp++) );
  5222  002EFC  C0E0  FFF6         	movff	printf@cp,tblptrl
  5223  002F00  C0E1  FFF7         	movff	printf@cp+1,tblptrh
  5224  002F04  0E00               	movlw	low (__mediumconst shr (0+16))
  5225  002F06  6EF8               	movwf	tblptru,c
  5226  002F08  0E0F               	movlw	(high __ramtop+-1)
  5227  002F0A  64F7               	cpfsgt	tblptrh,c
  5228  002F0C  D003               	bra	u3017
  5229  002F0E  0008               	tblrd		*
  5230  002F10  50F5               	movf	tablat,w,c
  5231  002F12  D005               	bra	u3010
  5232  002F14                     u3017:
  5233  002F14  CFF6 FFE9          	movff	tblptrl,fsr0l
  5234  002F18  CFF7 FFEA          	movff	tblptrh,fsr0h
  5235  002F1C  50EF               	movf	indf0,w,c
  5236  002F1E                     u3010:
  5237  002F1E  EC09  F024         	call	_putch
  5238  002F22  0100               	movlb	0	; () banked
  5239  002F24  4BE0               	infsnz	printf@cp& (0+255),f,b
  5240  002F26  2BE1               	incf	(printf@cp+1)& (0+255),f,b
  5241  002F28                     l881:
  5242                           
  5243                           ; BSR set to: 0
  5244                           
  5245                           ; BSR set to: 0
  5246  002F28  07E4               	decf	printf@len& (0+255),f,b
  5247  002F2A  A0D8               	btfss	status,0,c
  5248  002F2C  07E5               	decf	(printf@len+1)& (0+255),f,b
  5249  002F2E  29E4               	incf	printf@len& (0+255),w,b
  5250  002F30  E1E5               	bnz	l4444
  5251  002F32  29E5               	incf	(printf@len+1)& (0+255),w,b
  5252  002F34  B4D8               	btfsc	status,2,c
  5253  002F36  D139               	goto	u3210
  5254  002F38  D7E1               	goto	l882
  5255  002F3A                     l864:
  5256                           
  5257                           ; BSR set to: 0
  5258  002F3A  C0D6  FFF6         	movff	printf@f,tblptrl
  5259  002F3E  C0D7  FFF7         	movff	printf@f+1,tblptrh
  5260  002F42  0100               	movlb	0	; () banked
  5261  002F44  4BD6               	infsnz	printf@f& (0+255),f,b
  5262  002F46  2BD7               	incf	(printf@f+1)& (0+255),f,b
  5263  002F48                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5264  002F48  6AF8               	clrf	tblptru,c
  5265  002F4A                     	endif
  5266  002F4A                     	if	0	;tblptru may be non-zero
  5267  002F4A                     	endif
  5268  002F4A  0008               	tblrd		*
  5269  002F4C  CFF5 F0EB          	movff	tablat,printf@c
  5270  002F50  51EB               	movf	printf@c& (0+255),w,b
  5271                           
  5272                           ; Switch size 1, requested type "space"
  5273                           ; Number of cases is 5, Range of values is 0 to 120
  5274                           ; switch strategies available:
  5275                           ; Name         Instructions Cycles
  5276                           ; simple_byte           16     9 (average)
  5277                           ;	Chosen strategy is simple_byte
  5278  002F52  0A00               	xorlw	0	; case 0
  5279  002F54  B4D8               	btfsc	status,2,c
  5280  002F56  0012               	return	
  5281  002F58  0A64               	xorlw	100	; case 100
  5282  002F5A  B4D8               	btfsc	status,2,c
  5283  002F5C  D00A               	goto	l869
  5284  002F5E  0A0D               	xorlw	13	; case 105
  5285  002F60  B4D8               	btfsc	status,2,c
  5286  002F62  D007               	goto	l869
  5287  002F64  0A1A               	xorlw	26	; case 115
  5288  002F66  B4D8               	btfsc	status,2,c
  5289  002F68  D775               	goto	l871
  5290  002F6A  0A0B               	xorlw	11	; case 120
  5291  002F6C  B4D8               	btfsc	status,2,c
  5292  002F6E  D76F               	goto	l870
  5293  002F70  D11C               	goto	u3210
  5294  002F72                     l869:
  5295                           
  5296                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5297  002F72  0100               	movlb	0	; () banked
  5298  002F74  BFE8               	btfsc	printf@flag& (0+255),7,b
  5299  002F76  D015               	goto	l885
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;doprnt.c: 1253: {
  5303                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5304  002F78  C0E2  FFD9         	movff	printf@ap,fsr2l
  5305  002F7C  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  5306  002F80  CFDE F0E6          	movff	postinc2,printf@val
  5307  002F84  CFDD F0E7          	movff	postdec2,printf@val+1
  5308                           
  5309                           ; BSR set to: 0
  5310  002F88  0E02               	movlw	2
  5311  002F8A  27E2               	addwf	printf@ap& (0+255),f,b
  5312  002F8C  0E00               	movlw	0
  5313  002F8E  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;doprnt.c: 1261: if((int)val < 0) {
  5317  002F90  AFE7               	btfss	(printf@val+1)& (0+255),7,b
  5318  002F92  D04A               	goto	l888
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;doprnt.c: 1262: flag |= 0x03;
  5322  002F94  0E03               	movlw	3
  5323  002F96  13E8               	iorwf	printf@flag& (0+255),f,b
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;doprnt.c: 1263: val = -val;
  5327  002F98  6DE6               	negf	printf@val& (0+255),b
  5328  002F9A  1FE7               	comf	(printf@val+1)& (0+255),f,b
  5329  002F9C  B0D8               	btfsc	status,0,c
  5330  002F9E  2BE7               	incf	(printf@val+1)& (0+255),f,b
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;doprnt.c: 1264: }
  5334                           ;doprnt.c: 1266: }
  5335  002FA0  D043               	goto	l888
  5336  002FA2                     l885:
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;doprnt.c: 1268: else
  5340                           ;doprnt.c: 1273: {
  5341                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5342                           
  5343                           ; BSR set to: 0
  5344  002FA2  C0E2  FFD9         	movff	printf@ap,fsr2l
  5345  002FA6  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  5346  002FAA  CFDE F0E6          	movff	postinc2,printf@val
  5347  002FAE  CFDD F0E7          	movff	postdec2,printf@val+1
  5348                           
  5349                           ; BSR set to: 0
  5350  002FB2  0E02               	movlw	2
  5351  002FB4  27E2               	addwf	printf@ap& (0+255),f,b
  5352  002FB6  0E00               	movlw	0
  5353  002FB8  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;doprnt.c: 1287: }
  5357                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5358  002FBA  D036               	goto	l888
  5359  002FBC                     
  5360                           ; BSR set to: 0
  5361                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5362                           
  5363                           ; BSR set to: 0
  5364  002FBC  0E01               	movlw	1
  5365  002FBE  6FEB               	movwf	printf@c& (0+255),b
  5366  002FC0                     l4470:
  5367                           
  5368                           ; BSR set to: 0
  5369  002FC0  0E05               	movlw	5
  5370  002FC2  19EB               	xorwf	printf@c& (0+255),w,b
  5371  002FC4  B4D8               	btfsc	status,2,c
  5372  002FC6  D038               	goto	l893
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;doprnt.c: 1306: if(val < dpowers[c])
  5376                           
  5377                           ; BSR set to: 0
  5378                           
  5379                           ; BSR set to: 0
  5380  002FC8  51EB               	movf	printf@c& (0+255),w,b
  5381  002FCA  0D02               	mullw	2
  5382  002FCC  0EA4               	movlw	low _dpowers
  5383  002FCE  24F3               	addwf	prodl,w,c
  5384  002FD0  6EF6               	movwf	tblptrl,c
  5385  002FD2  0EFC               	movlw	high _dpowers
  5386  002FD4  20F4               	addwfc	prodh,w,c
  5387  002FD6  6EF7               	movwf	tblptrh,c
  5388  002FD8                     	if	1	;There are 3 active tblptr bytes
  5389  002FD8  6AF8               	clrf	tblptru,c
  5390  002FDA  0E00               	movlw	low (__mediumconst shr (0+16))
  5391  002FDC  22F8               	addwfc	tblptru,f,c
  5392  002FDE                     	endif
  5393  002FDE  0009               	tblrd		*+
  5394  002FE0  50F5               	movf	tablat,w,c
  5395  002FE2  5DE6               	subwf	printf@val& (0+255),w,b
  5396  002FE4  0009               	tblrd		*+
  5397  002FE6  50F5               	movf	tablat,w,c
  5398  002FE8  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  5399  002FEA  A0D8               	btfss	status,0,c
  5400  002FEC  D025               	goto	l893
  5401                           
  5402                           ; BSR set to: 0
  5403                           
  5404                           ; BSR set to: 0
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;doprnt.c: 1307: break;
  5408  002FEE  2BEB               	incf	printf@c& (0+255),f,b
  5409  002FF0  D7E7               	goto	l4470
  5410  002FF2                     
  5411                           ; BSR set to: 0
  5412                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5413                           
  5414                           ; BSR set to: 0
  5415  002FF2  0E01               	movlw	1
  5416  002FF4  6FEB               	movwf	printf@c& (0+255),b
  5417  002FF6                     l4484:
  5418                           
  5419                           ; BSR set to: 0
  5420  002FF6  0E04               	movlw	4
  5421  002FF8  19EB               	xorwf	printf@c& (0+255),w,b
  5422  002FFA  B4D8               	btfsc	status,2,c
  5423  002FFC  D01D               	goto	l893
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5427                           
  5428                           ; BSR set to: 0
  5429                           
  5430                           ; BSR set to: 0
  5431  002FFE  51EB               	movf	printf@c& (0+255),w,b
  5432  003000  0D02               	mullw	2
  5433  003002  0EAE               	movlw	low _hexpowers
  5434  003004  24F3               	addwf	prodl,w,c
  5435  003006  6EF6               	movwf	tblptrl,c
  5436  003008  0EFC               	movlw	high _hexpowers
  5437  00300A  20F4               	addwfc	prodh,w,c
  5438  00300C  6EF7               	movwf	tblptrh,c
  5439  00300E                     	if	1	;There are 3 active tblptr bytes
  5440  00300E  6AF8               	clrf	tblptru,c
  5441  003010  0E00               	movlw	low (__mediumconst shr (0+16))
  5442  003012  22F8               	addwfc	tblptru,f,c
  5443  003014                     	endif
  5444  003014  0009               	tblrd		*+
  5445  003016  50F5               	movf	tablat,w,c
  5446  003018  5DE6               	subwf	printf@val& (0+255),w,b
  5447  00301A  0009               	tblrd		*+
  5448  00301C  50F5               	movf	tablat,w,c
  5449  00301E  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  5450  003020  A0D8               	btfss	status,0,c
  5451  003022  D00A               	goto	l893
  5452                           
  5453                           ; BSR set to: 0
  5454                           
  5455                           ; BSR set to: 0
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;doprnt.c: 1318: break;
  5459  003024  2BEB               	incf	printf@c& (0+255),f,b
  5460  003026  D7E7               	goto	l4484
  5461  003028                     l888:
  5462                           
  5463                           ; BSR set to: 0
  5464                           
  5465                           ; BSR set to: 0
  5466  003028  51E8               	movf	printf@flag& (0+255),w,b
  5467  00302A  0B80               	andlw	128
  5468                           
  5469                           ; Switch size 1, requested type "space"
  5470                           ; Number of cases is 2, Range of values is 0 to 128
  5471                           ; switch strategies available:
  5472                           ; Name         Instructions Cycles
  5473                           ; simple_byte            7     4 (average)
  5474                           ;	Chosen strategy is simple_byte
  5475  00302C  0A00               	xorlw	0	; case 0
  5476  00302E  B4D8               	btfsc	status,2,c
  5477  003030  D7C5               	goto	l889
  5478  003032  0A80               	xorlw	128	; case 128
  5479  003034  B4D8               	btfsc	status,2,c
  5480  003036  D7DD               	goto	l894
  5481  003038                     l893:
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5485                           
  5486                           ; BSR set to: 0
  5487  003038  51E9               	movf	printf@width& (0+255),w,b
  5488  00303A  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5489  00303C  B4D8               	btfsc	status,2,c
  5490  00303E  D009               	goto	l898
  5491                           
  5492                           ; BSR set to: 0
  5493  003040  C0E8  F0DA         	movff	printf@flag,??_printf
  5494  003044  0E03               	movlw	3
  5495  003046  17DA               	andwf	??_printf& (0+255),f,b
  5496  003048  B4D8               	btfsc	status,2,c
  5497  00304A  D003               	goto	l898
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;doprnt.c: 1346: width--;
  5501  00304C  07E9               	decf	printf@width& (0+255),f,b
  5502  00304E  A0D8               	btfss	status,0,c
  5503  003050  07EA               	decf	(printf@width+1)& (0+255),f,b
  5504  003052                     l898:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;doprnt.c: 1381: if(width > c)
  5508                           
  5509                           ; BSR set to: 0
  5510  003052  0E80               	movlw	128
  5511  003054  BFEB               	btfsc	printf@c& (0+255),7,b
  5512  003056  0E7F               	movlw	127
  5513  003058  6FDA               	movwf	??_printf& (0+255),b
  5514  00305A  51E9               	movf	printf@width& (0+255),w,b
  5515  00305C  5DEB               	subwf	printf@c& (0+255),w,b
  5516  00305E  51EA               	movf	(printf@width+1)& (0+255),w,b
  5517  003060  0A80               	xorlw	128
  5518  003062  59DA               	subwfb	??_printf& (0+255),w,b
  5519  003064  B0D8               	btfsc	status,0,c
  5520  003066  D007               	goto	l899
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;doprnt.c: 1382: width -= c;
  5524  003068  51EB               	movf	printf@c& (0+255),w,b
  5525  00306A  5FE9               	subwf	printf@width& (0+255),f,b
  5526  00306C  0E00               	movlw	0
  5527  00306E  BFEB               	btfsc	printf@c& (0+255),7,b
  5528  003070  0EFF               	movlw	255
  5529  003072  5BEA               	subwfb	(printf@width+1)& (0+255),f,b
  5530  003074  D004               	goto	l900
  5531  003076                     l899:
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;doprnt.c: 1383: else
  5535                           ;doprnt.c: 1384: width = 0;
  5536                           
  5537                           ; BSR set to: 0
  5538  003076  0E00               	movlw	0
  5539  003078  6FEA               	movwf	(printf@width+1)& (0+255),b
  5540  00307A  0E00               	movlw	0
  5541  00307C  6FE9               	movwf	printf@width& (0+255),b
  5542  00307E                     l900:
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;doprnt.c: 1387: if(flag & 0x04) {
  5546                           
  5547                           ; BSR set to: 0
  5548  00307E  A5E8               	btfss	printf@flag& (0+255),2,b
  5549  003080  D016               	goto	l901
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;doprnt.c: 1392: if(flag & 0x03)
  5553  003082  C0E8  F0DA         	movff	printf@flag,??_printf
  5554  003086  0E03               	movlw	3
  5555  003088  17DA               	andwf	??_printf& (0+255),f,b
  5556  00308A  B4D8               	btfsc	status,2,c
  5557  00308C  D003               	goto	l902
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;doprnt.c: 1393: (putch('-') );
  5561  00308E  0E2D               	movlw	45
  5562  003090  EC09  F024         	call	_putch
  5563  003094                     l902:
  5564                           
  5565                           ;doprnt.c: 1415: if(width)
  5566  003094  0100               	movlb	0	; () banked
  5567  003096  51E9               	movf	printf@width& (0+255),w,b
  5568  003098  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5569  00309A  B4D8               	btfsc	status,2,c
  5570  00309C  D020               	goto	l910
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;doprnt.c: 1417: (putch('0') );
  5574                           
  5575                           ; BSR set to: 0
  5576                           
  5577                           ;doprnt.c: 1416: do
  5578  00309E  0E30               	movlw	48
  5579  0030A0  EC09  F024         	call	_putch
  5580                           
  5581                           ;doprnt.c: 1418: while(--width);
  5582  0030A4  0100               	movlb	0	; () banked
  5583  0030A6  07E9               	decf	printf@width& (0+255),f,b
  5584  0030A8  A0D8               	btfss	status,0,c
  5585  0030AA  07EA               	decf	(printf@width+1)& (0+255),f,b
  5586  0030AC  D7F4               	goto	L11
  5587  0030AE                     l901:
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;doprnt.c: 1422: {
  5591                           ;doprnt.c: 1424: if(width
  5592                           ;doprnt.c: 1428: )
  5593                           
  5594                           ; BSR set to: 0
  5595  0030AE  51E9               	movf	printf@width& (0+255),w,b
  5596  0030B0  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5597  0030B2  B4D8               	btfsc	status,2,c
  5598  0030B4  D00B               	goto	u3190
  5599  0030B6                     u3180:
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;doprnt.c: 1430: (putch(' ') );
  5603                           
  5604                           ; BSR set to: 0
  5605                           
  5606                           ;doprnt.c: 1429: do
  5607  0030B6  0E20               	movlw	32
  5608  0030B8  EC09  F024         	call	_putch
  5609                           
  5610                           ;doprnt.c: 1431: while(--width);
  5611  0030BC  0100               	movlb	0	; () banked
  5612  0030BE  07E9               	decf	printf@width& (0+255),f,b
  5613  0030C0  A0D8               	btfss	status,0,c
  5614  0030C2  07EA               	decf	(printf@width+1)& (0+255),f,b
  5615  0030C4  51E9               	movf	printf@width& (0+255),w,b
  5616  0030C6  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  5617  0030C8  A4D8               	btfss	status,2,c
  5618  0030CA  D7F5               	goto	u3180
  5619  0030CC                     u3190:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;doprnt.c: 1438: if(flag & 0x03)
  5623                           
  5624                           ; BSR set to: 0
  5625                           
  5626                           ; BSR set to: 0
  5627  0030CC  C0E8  F0DA         	movff	printf@flag,??_printf
  5628  0030D0  0E03               	movlw	3
  5629  0030D2  17DA               	andwf	??_printf& (0+255),f,b
  5630  0030D4  B4D8               	btfsc	status,2,c
  5631  0030D6  D003               	goto	l910
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;doprnt.c: 1439: (putch('-') );
  5635  0030D8  0E2D               	movlw	45
  5636  0030DA  EC09  F024         	call	_putch
  5637  0030DE                     l910:
  5638                           
  5639                           ;doprnt.c: 1469: }
  5640                           ;doprnt.c: 1472: prec = c;
  5641  0030DE  C0EB  F0DF         	movff	printf@c,printf@prec
  5642                           
  5643                           ;doprnt.c: 1474: while(prec--) {
  5644  0030E2  D05E               	goto	l911
  5645  0030E4                     
  5646                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5647  0030E4  0100               	movlb	0	; () banked
  5648  0030E6  51DF               	movf	printf@prec& (0+255),w,b
  5649  0030E8  0D02               	mullw	2
  5650  0030EA  0EA4               	movlw	low _dpowers
  5651  0030EC  24F3               	addwf	prodl,w,c
  5652  0030EE  6EF6               	movwf	tblptrl,c
  5653  0030F0  0EFC               	movlw	high _dpowers
  5654  0030F2  20F4               	addwfc	prodh,w,c
  5655  0030F4  6EF7               	movwf	tblptrh,c
  5656  0030F6                     	if	1	;There are 3 active tblptr bytes
  5657  0030F6  6AF8               	clrf	tblptru,c
  5658  0030F8  0E00               	movlw	low (__mediumconst shr (0+16))
  5659  0030FA  22F8               	addwfc	tblptru,f,c
  5660  0030FC                     	endif
  5661  0030FC  0009               	tblrd		*+
  5662  0030FE  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  5663  003102  000A               	tblrd		*-
  5664  003104  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  5665  003108  C0E6  F0C8         	movff	printf@val,___lwdiv@dividend
  5666  00310C  C0E7  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  5667  003110  EC1F  F022         	call	___lwdiv	;wreg free
  5668  003114  C0C8  F0CF         	movff	?___lwdiv,___lwmod@dividend
  5669  003118  C0C9  F0D0         	movff	?___lwdiv+1,___lwmod@dividend+1
  5670  00311C  0E00               	movlw	0
  5671  00311E  0100               	movlb	0	; () banked
  5672  003120  6FD2               	movwf	(___lwmod@divisor+1)& (0+255),b
  5673  003122  0E0A               	movlw	10
  5674  003124  6FD1               	movwf	___lwmod@divisor& (0+255),b
  5675  003126  EC06  F023         	call	___lwmod	;wreg free
  5676  00312A  0100               	movlb	0	; () banked
  5677  00312C  51CF               	movf	?___lwmod& (0+255),w,b
  5678  00312E  0F30               	addlw	48
  5679  003130  6FEB               	movwf	printf@c& (0+255),b
  5680                           
  5681                           ;doprnt.c: 1491: break;
  5682  003132  D033               	goto	l915
  5683  003134                     
  5684                           ; BSR set to: 0
  5685                           ;doprnt.c: 1499: {
  5686                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5687                           
  5688                           ; BSR set to: 0
  5689  003134  C0E6  F0C8         	movff	printf@val,___lwdiv@dividend
  5690  003138  C0E7  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  5691  00313C  51DF               	movf	printf@prec& (0+255),w,b
  5692  00313E  0D02               	mullw	2
  5693  003140  0EAE               	movlw	low _hexpowers
  5694  003142  24F3               	addwf	prodl,w,c
  5695  003144  6EF6               	movwf	tblptrl,c
  5696  003146  0EFC               	movlw	high _hexpowers
  5697  003148  20F4               	addwfc	prodh,w,c
  5698  00314A  6EF7               	movwf	tblptrh,c
  5699  00314C                     	if	1	;There are 3 active tblptr bytes
  5700  00314C  6AF8               	clrf	tblptru,c
  5701  00314E  0E00               	movlw	low (__mediumconst shr (0+16))
  5702  003150  22F8               	addwfc	tblptru,f,c
  5703  003152                     	endif
  5704  003152  0009               	tblrd		*+
  5705  003154  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  5706  003158  000A               	tblrd		*-
  5707  00315A  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  5708  00315E  EC1F  F022         	call	___lwdiv	;wreg free
  5709  003162  0100               	movlb	0	; () banked
  5710  003164  51C8               	movf	?___lwdiv& (0+255),w,b
  5711  003166  0B0F               	andlw	15
  5712  003168  6FDE               	movwf	printf@idx& (0+255),b
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5716  00316A  51DE               	movf	printf@idx& (0+255),w,b
  5717  00316C  0D01               	mullw	1
  5718  00316E  0E9F               	movlw	low STR_108
  5719  003170  24F3               	addwf	prodl,w,c
  5720  003172  6EF6               	movwf	tblptrl,c
  5721  003174  0EFD               	movlw	high STR_108
  5722  003176  20F4               	addwfc	prodh,w,c
  5723  003178  6EF7               	movwf	tblptrh,c
  5724  00317A                     	if	1	;There are 3 active tblptr bytes
  5725  00317A  6AF8               	clrf	tblptru,c
  5726  00317C  0E00               	movlw	low (__mediumconst shr (0+16))
  5727  00317E  22F8               	addwfc	tblptru,f,c
  5728  003180                     	endif
  5729  003180  0008               	tblrd		*
  5730  003182  CFF5 F0EB          	movff	tablat,printf@c
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;doprnt.c: 1523: }
  5734                           
  5735                           ;doprnt.c: 1508: }
  5736                           ;doprnt.c: 1510: break;
  5737  003186  D009               	goto	l915
  5738  003188                     
  5739                           ; BSR set to: 0
  5740  003188  0100               	movlb	0	; () banked
  5741  00318A  51E8               	movf	printf@flag& (0+255),w,b
  5742  00318C  0B80               	andlw	128
  5743                           
  5744                           ; Switch size 1, requested type "space"
  5745                           ; Number of cases is 2, Range of values is 0 to 128
  5746                           ; switch strategies available:
  5747                           ; Name         Instructions Cycles
  5748                           ; simple_byte            7     4 (average)
  5749                           ;	Chosen strategy is simple_byte
  5750  00318E  0A00               	xorlw	0	; case 0
  5751  003190  B4D8               	btfsc	status,2,c
  5752  003192  D7A8               	goto	l914
  5753  003194  0A80               	xorlw	128	; case 128
  5754  003196  B4D8               	btfsc	status,2,c
  5755  003198  D7CD               	goto	l916
  5756  00319A                     l915:
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;doprnt.c: 1524: (putch(c) );
  5760                           
  5761                           ; BSR set to: 0
  5762  00319A  51EB               	movf	printf@c& (0+255),w,b
  5763  00319C  EC09  F024         	call	_putch
  5764  0031A0                     l911:
  5765  0031A0  0100               	movlb	0	; () banked
  5766  0031A2  07DF               	decf	printf@prec& (0+255),f,b
  5767  0031A4  29DF               	incf	printf@prec& (0+255),w,b
  5768  0031A6  A4D8               	btfss	status,2,c
  5769  0031A8  D7EF               	goto	l913
  5770  0031AA                     u3210:
  5771                           
  5772                           ; BSR set to: 0
  5773                           
  5774                           ; BSR set to: 0
  5775  0031AA  C0D6  FFF6         	movff	printf@f,tblptrl
  5776  0031AE  C0D7  FFF7         	movff	printf@f+1,tblptrh
  5777  0031B2  0100               	movlb	0	; () banked
  5778  0031B4  4BD6               	infsnz	printf@f& (0+255),f,b
  5779  0031B6  2BD7               	incf	(printf@f+1)& (0+255),f,b
  5780  0031B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5781  0031B8  6AF8               	clrf	tblptru,c
  5782  0031BA                     	endif
  5783  0031BA                     	if	0	;tblptru may be non-zero
  5784  0031BA                     	endif
  5785  0031BA  0008               	tblrd		*
  5786  0031BC  CFF5 F0EB          	movff	tablat,printf@c
  5787  0031C0  51EB               	movf	printf@c& (0+255),w,b
  5788  0031C2  B4D8               	btfsc	status,2,c
  5789  0031C4  0012               	return	
  5790  0031C6  D5E2               	goto	l853
  5791  0031C8                     __end_of_printf:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           intcon3	equ	0xFF0
  5801                           indf0	equ	0xFEF
  5802                           postinc0	equ	0xFEE
  5803                           fsr0h	equ	0xFEA
  5804                           fsr0l	equ	0xFE9
  5805                           wreg	equ	0xFE8
  5806                           postdec1	equ	0xFE5
  5807                           fsr1l	equ	0xFE1
  5808                           postinc2	equ	0xFDE
  5809                           postdec2	equ	0xFDD
  5810                           fsr2h	equ	0xFDA
  5811                           fsr2l	equ	0xFD9
  5812                           status	equ	0xFD8
  5813                           
  5814 ;; *************** function _putch *****************
  5815 ;; Defined at:
  5816 ;;		line 24 in file "lcd.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  data            1    wreg     unsigned char 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  data            1    2[BANK0 ] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;Total ram usage:        1 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    5
  5837 ;; This function calls:
  5838 ;;		_lcdNibble
  5839 ;; This function is called by:
  5840 ;;		_printf
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text3
  5845  004812                     __ptext3:
  5846                           	opt stack 0
  5847  004812                     _putch:
  5848                           	opt stack 24
  5849                           
  5850                           ;incstack = 0
  5851                           ;putch@data stored from wreg
  5852  004812  0100               	movlb	0	; () banked
  5853  004814  6FCA               	movwf	putch@data& (0+255),b
  5854                           
  5855                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5856  004816  848C               	bsf	3980,2,c	;volatile
  5857                           
  5858                           ;lcd.c: 33: lcdNibble(data);
  5859  004818  0100               	movlb	0	; () banked
  5860  00481A  51CA               	movf	putch@data& (0+255),w,b
  5861  00481C  EC48  F01F         	call	_lcdNibble
  5862                           
  5863                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5864  004820  0EC8               	movlw	200
  5865  004822                     u5607:
  5866  004822  D000               	nop2	
  5867  004824  2EE8               	decfsz	wreg,f,c
  5868  004826  D7FD               	bra	u5607
  5869  004828  0012               	return		;funcret
  5870  00482A                     __end_of_putch:
  5871                           	opt stack 0
  5872                           tblptru	equ	0xFF8
  5873                           tblptrh	equ	0xFF7
  5874                           tblptrl	equ	0xFF6
  5875                           tablat	equ	0xFF5
  5876                           prodh	equ	0xFF4
  5877                           prodl	equ	0xFF3
  5878                           intcon	equ	0xFF2
  5879                           intcon3	equ	0xFF0
  5880                           indf0	equ	0xFEF
  5881                           postinc0	equ	0xFEE
  5882                           fsr0h	equ	0xFEA
  5883                           fsr0l	equ	0xFE9
  5884                           wreg	equ	0xFE8
  5885                           postdec1	equ	0xFE5
  5886                           fsr1l	equ	0xFE1
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _isdigit *****************
  5894 ;; Defined at:
  5895 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  c               1    wreg     unsigned char 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  c               1    2[BANK0 ] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;		None               void
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;Total ram usage:        3 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    4
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		_printf
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text4
  5924  0047D2                     __ptext4:
  5925                           	opt stack 0
  5926  0047D2                     _isdigit:
  5927                           	opt stack 25
  5928                           
  5929                           ;incstack = 0
  5930                           ;isdigit@c stored from wreg
  5931  0047D2  0100               	movlb	0	; () banked
  5932  0047D4  6FCA               	movwf	isdigit@c& (0+255),b
  5933  0047D6  0E00               	movlw	0
  5934  0047D8  0100               	movlb	0	; () banked
  5935  0047DA  6FC9               	movwf	_isdigit$1307& (0+255),b
  5936                           
  5937                           ; BSR set to: 0
  5938  0047DC  0E3A               	movlw	58
  5939  0047DE  61CA               	cpfslt	isdigit@c& (0+255),b
  5940  0047E0  D005               	goto	l1249
  5941                           
  5942                           ; BSR set to: 0
  5943  0047E2  0E2F               	movlw	47
  5944  0047E4  65CA               	cpfsgt	isdigit@c& (0+255),b
  5945  0047E6  D002               	goto	l1249
  5946                           
  5947                           ; BSR set to: 0
  5948  0047E8  0E01               	movlw	1
  5949  0047EA  6FC9               	movwf	_isdigit$1307& (0+255),b
  5950  0047EC                     l1249:
  5951                           
  5952                           ; BSR set to: 0
  5953                           
  5954                           ; BSR set to: 0
  5955  0047EC  C0C9  F0C8         	movff	_isdigit$1307,??_isdigit
  5956  0047F0  31C8               	rrcf	??_isdigit& (0+255),w,b
  5957  0047F2  0012               	return	
  5958  0047F4                     __end_of_isdigit:
  5959                           	opt stack 0
  5960                           tblptru	equ	0xFF8
  5961                           tblptrh	equ	0xFF7
  5962                           tblptrl	equ	0xFF6
  5963                           tablat	equ	0xFF5
  5964                           prodh	equ	0xFF4
  5965                           prodl	equ	0xFF3
  5966                           intcon	equ	0xFF2
  5967                           intcon3	equ	0xFF0
  5968                           indf0	equ	0xFEF
  5969                           postinc0	equ	0xFEE
  5970                           fsr0h	equ	0xFEA
  5971                           fsr0l	equ	0xFE9
  5972                           wreg	equ	0xFE8
  5973                           postdec1	equ	0xFE5
  5974                           fsr1l	equ	0xFE1
  5975                           postinc2	equ	0xFDE
  5976                           postdec2	equ	0xFDD
  5977                           fsr2h	equ	0xFDA
  5978                           fsr2l	equ	0xFD9
  5979                           status	equ	0xFD8
  5980                           
  5981 ;; *************** function ___lwmod *****************
  5982 ;; Defined at:
  5983 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  dividend        2    7[BANK0 ] unsigned int 
  5986 ;;  divisor         2    9[BANK0 ] unsigned int 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  counter         1   11[BANK0 ] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  2    7[BANK0 ] unsigned int 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5998 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;Total ram usage:        5 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    4
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_printf
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text5
  6013  00460C                     __ptext5:
  6014                           	opt stack 0
  6015  00460C                     ___lwmod:
  6016                           	opt stack 25
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;incstack = 0
  6020  00460C  0100               	movlb	0	; () banked
  6021  00460E  51D1               	movf	___lwmod@divisor& (0+255),w,b
  6022  004610  11D2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6023  004612  B4D8               	btfsc	status,2,c
  6024  004614  D018               	goto	l1343
  6025                           
  6026                           ; BSR set to: 0
  6027  004616  0E01               	movlw	1
  6028  004618  6FD3               	movwf	___lwmod@counter& (0+255),b
  6029  00461A  D004               	goto	l1338
  6030  00461C                     
  6031                           ; BSR set to: 0
  6032                           
  6033                           ; BSR set to: 0
  6034  00461C  90D8               	bcf	status,0,c
  6035  00461E  37D1               	rlcf	___lwmod@divisor& (0+255),f,b
  6036  004620  37D2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6037  004622  2BD3               	incf	___lwmod@counter& (0+255),f,b
  6038  004624                     l1338:
  6039                           
  6040                           ; BSR set to: 0
  6041                           
  6042                           ; BSR set to: 0
  6043  004624  AFD2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6044  004626  D7FA               	goto	l1339
  6045  004628                     u2780:
  6046                           
  6047                           ; BSR set to: 0
  6048                           
  6049                           ; BSR set to: 0
  6050                           
  6051                           ; BSR set to: 0
  6052  004628  51D1               	movf	___lwmod@divisor& (0+255),w,b
  6053  00462A  5DCF               	subwf	___lwmod@dividend& (0+255),w,b
  6054  00462C  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6055  00462E  59D0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6056  004630  A0D8               	btfss	status,0,c
  6057  004632  D004               	goto	l1342
  6058                           
  6059                           ; BSR set to: 0
  6060  004634  51D1               	movf	___lwmod@divisor& (0+255),w,b
  6061  004636  5FCF               	subwf	___lwmod@dividend& (0+255),f,b
  6062  004638  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6063  00463A  5BD0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6064  00463C                     l1342:
  6065                           
  6066                           ; BSR set to: 0
  6067                           
  6068                           ; BSR set to: 0
  6069  00463C  90D8               	bcf	status,0,c
  6070  00463E  33D2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6071  004640  33D1               	rrcf	___lwmod@divisor& (0+255),f,b
  6072                           
  6073                           ; BSR set to: 0
  6074  004642  2FD3               	decfsz	___lwmod@counter& (0+255),f,b
  6075  004644  D7F1               	goto	u2780
  6076  004646                     l1343:
  6077                           
  6078                           ; BSR set to: 0
  6079                           
  6080                           ; BSR set to: 0
  6081  004646  C0CF  F0CF         	movff	___lwmod@dividend,?___lwmod
  6082  00464A  C0D0  F0D0         	movff	___lwmod@dividend+1,?___lwmod+1
  6083                           
  6084                           ; BSR set to: 0
  6085  00464E  0012               	return		;funcret
  6086  004650                     __end_of___lwmod:
  6087                           	opt stack 0
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           prodh	equ	0xFF4
  6093                           prodl	equ	0xFF3
  6094                           intcon	equ	0xFF2
  6095                           intcon3	equ	0xFF0
  6096                           indf0	equ	0xFEF
  6097                           postinc0	equ	0xFEE
  6098                           fsr0h	equ	0xFEA
  6099                           fsr0l	equ	0xFE9
  6100                           wreg	equ	0xFE8
  6101                           postdec1	equ	0xFE5
  6102                           fsr1l	equ	0xFE1
  6103                           postinc2	equ	0xFDE
  6104                           postdec2	equ	0xFDD
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function ___lwdiv *****************
  6110 ;; Defined at:
  6111 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  dividend        2    0[BANK0 ] unsigned int 
  6114 ;;  divisor         2    2[BANK0 ] unsigned int 
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;  quotient        2    4[BANK0 ] unsigned int 
  6117 ;;  counter         1    6[BANK0 ] unsigned char 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  2    0[BANK0 ] unsigned int 
  6120 ;; Registers used:
  6121 ;;		wreg, status,2, status,0
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6127 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;Total ram usage:        7 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    4
  6134 ;; This function calls:
  6135 ;;		Nothing
  6136 ;; This function is called by:
  6137 ;;		_printf
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           	psect	text6
  6142  00443E                     __ptext6:
  6143                           	opt stack 0
  6144  00443E                     ___lwdiv:
  6145                           	opt stack 25
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;incstack = 0
  6149  00443E  0E00               	movlw	0
  6150  004440  0100               	movlb	0	; () banked
  6151  004442  6FCD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6152  004444  0E00               	movlw	0
  6153  004446  6FCC               	movwf	___lwdiv@quotient& (0+255),b
  6154                           
  6155                           ; BSR set to: 0
  6156  004448  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  6157  00444A  11CB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6158  00444C  B4D8               	btfsc	status,2,c
  6159  00444E  D01C               	goto	l1333
  6160                           
  6161                           ; BSR set to: 0
  6162  004450  0E01               	movlw	1
  6163  004452  6FCE               	movwf	___lwdiv@counter& (0+255),b
  6164  004454  D004               	goto	l1328
  6165  004456                     
  6166                           ; BSR set to: 0
  6167                           
  6168                           ; BSR set to: 0
  6169  004456  90D8               	bcf	status,0,c
  6170  004458  37CA               	rlcf	___lwdiv@divisor& (0+255),f,b
  6171  00445A  37CB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6172  00445C  2BCE               	incf	___lwdiv@counter& (0+255),f,b
  6173  00445E                     l1328:
  6174                           
  6175                           ; BSR set to: 0
  6176                           
  6177                           ; BSR set to: 0
  6178  00445E  AFCB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6179  004460  D7FA               	goto	l1329
  6180  004462                     u2750:
  6181                           
  6182                           ; BSR set to: 0
  6183                           
  6184                           ; BSR set to: 0
  6185                           
  6186                           ; BSR set to: 0
  6187  004462  90D8               	bcf	status,0,c
  6188  004464  37CC               	rlcf	___lwdiv@quotient& (0+255),f,b
  6189  004466  37CD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6190                           
  6191                           ; BSR set to: 0
  6192  004468  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  6193  00446A  5DC8               	subwf	___lwdiv@dividend& (0+255),w,b
  6194  00446C  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6195  00446E  59C9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6196  004470  A0D8               	btfss	status,0,c
  6197  004472  D005               	goto	l1332
  6198                           
  6199                           ; BSR set to: 0
  6200  004474  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  6201  004476  5FC8               	subwf	___lwdiv@dividend& (0+255),f,b
  6202  004478  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6203  00447A  5BC9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6204                           
  6205                           ; BSR set to: 0
  6206  00447C  81CC               	bsf	___lwdiv@quotient& (0+255),0,b
  6207  00447E                     l1332:
  6208                           
  6209                           ; BSR set to: 0
  6210                           
  6211                           ; BSR set to: 0
  6212  00447E  90D8               	bcf	status,0,c
  6213  004480  33CB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6214  004482  33CA               	rrcf	___lwdiv@divisor& (0+255),f,b
  6215                           
  6216                           ; BSR set to: 0
  6217  004484  2FCE               	decfsz	___lwdiv@counter& (0+255),f,b
  6218  004486  D7ED               	goto	u2750
  6219  004488                     l1333:
  6220                           
  6221                           ; BSR set to: 0
  6222                           
  6223                           ; BSR set to: 0
  6224  004488  C0CC  F0C8         	movff	___lwdiv@quotient,?___lwdiv
  6225  00448C  C0CD  F0C9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6226                           
  6227                           ; BSR set to: 0
  6228  004490  0012               	return		;funcret
  6229  004492                     __end_of___lwdiv:
  6230                           	opt stack 0
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           intcon3	equ	0xFF0
  6239                           indf0	equ	0xFEF
  6240                           postinc0	equ	0xFEE
  6241                           fsr0h	equ	0xFEA
  6242                           fsr0l	equ	0xFE9
  6243                           wreg	equ	0xFE8
  6244                           postdec1	equ	0xFE5
  6245                           fsr1l	equ	0xFE1
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function _initialize *****************
  6253 ;; Defined at:
  6254 ;;		line 1199 in file "main.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;		None
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      void 
  6261 ;; Registers used:
  6262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;Total ram usage:        0 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    4
  6275 ;; This function calls:
  6276 ;;		Nothing
  6277 ;; This function is called by:
  6278 ;;		_main
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text7
  6283  003AB2                     __ptext7:
  6284                           	opt stack 0
  6285  003AB2                     _initialize:
  6286                           	opt stack 26
  6287                           
  6288                           ;main.c: 1200: white_tape = 0;
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;incstack = 0
  6292  003AB2  0E00               	movlw	0
  6293  003AB4  0100               	movlb	0	; () banked
  6294  003AB6  6FBD               	movwf	(_white_tape+1)& (0+255),b
  6295  003AB8  0E00               	movlw	0
  6296  003ABA  6FBC               	movwf	_white_tape& (0+255),b
  6297                           
  6298                           ;main.c: 1201: mode = 0;
  6299  003ABC  0E00               	movlw	0
  6300  003ABE  6FBB               	movwf	(_mode+1)& (0+255),b
  6301  003AC0  0E00               	movlw	0
  6302  003AC2  6FBA               	movwf	_mode& (0+255),b
  6303                           
  6304                           ;main.c: 1202: state = 0;
  6305  003AC4  0E00               	movlw	0
  6306  003AC6  6FAF               	movwf	(_state+1)& (0+255),b
  6307  003AC8  0E00               	movlw	0
  6308  003ACA  6FAE               	movwf	_state& (0+255),b
  6309                           
  6310                           ;main.c: 1203: assembly_step = 0;
  6311  003ACC  0E00               	movlw	0
  6312  003ACE  6FAD               	movwf	(_assembly_step+1)& (0+255),b
  6313  003AD0  0E00               	movlw	0
  6314  003AD2  6FAC               	movwf	_assembly_step& (0+255),b
  6315                           
  6316                           ;main.c: 1204: counter_step = 0;
  6317  003AD4  0E00               	movlw	0
  6318  003AD6  6E6E               	movwf	_counter_step+1,c
  6319  003AD8  0E00               	movlw	0
  6320  003ADA  6E6D               	movwf	_counter_step,c
  6321                           
  6322                           ;main.c: 1206: valid = 0;
  6323  003ADC  0E00               	movlw	0
  6324  003ADE  6E6C               	movwf	_valid+1,c
  6325  003AE0  0E00               	movlw	0
  6326  003AE2  6E6B               	movwf	_valid,c
  6327                           
  6328                           ;main.c: 1207: number = 0;
  6329  003AE4  0E00               	movlw	0
  6330  003AE6  6E7E               	movwf	_number+1,c
  6331  003AE8  0E00               	movlw	0
  6332  003AEA  6E7D               	movwf	_number,c
  6333                           
  6334                           ;main.c: 1208: total_number=0;
  6335  003AEC  0E00               	movlw	0
  6336  003AEE  6E6A               	movwf	_total_number+1,c
  6337  003AF0  0E00               	movlw	0
  6338  003AF2  6E69               	movwf	_total_number,c
  6339                           
  6340                           ;main.c: 1210: B=0,N=0,S=0,W=0;
  6341  003AF4  0E00               	movlw	0
  6342  003AF6  6E66               	movwf	_B+1,c
  6343  003AF8  0E00               	movlw	0
  6344  003AFA  6E65               	movwf	_B,c
  6345  003AFC  0E00               	movlw	0
  6346  003AFE  6E64               	movwf	_N+1,c
  6347  003B00  0E00               	movlw	0
  6348  003B02  6E63               	movwf	_N,c
  6349  003B04  0E00               	movlw	0
  6350  003B06  6E62               	movwf	_S+1,c
  6351  003B08  0E00               	movlw	0
  6352  003B0A  6E61               	movwf	_S,c
  6353  003B0C  0E00               	movlw	0
  6354  003B0E  6E60               	movwf	_W+1,c
  6355  003B10  0E00               	movlw	0
  6356  003B12  6E5F               	movwf	_W,c
  6357                           
  6358                           ;main.c: 1212: B_counter= 0;
  6359  003B14  0E00               	movlw	0
  6360  003B16  6FAB               	movwf	(_B_counter+1)& (0+255),b
  6361  003B18  0E00               	movlw	0
  6362  003B1A  6FAA               	movwf	_B_counter& (0+255),b
  6363                           
  6364                           ;main.c: 1213: S_counter= 0;
  6365  003B1C  0E00               	movlw	0
  6366  003B1E  6FA9               	movwf	(_S_counter+1)& (0+255),b
  6367  003B20  0E00               	movlw	0
  6368  003B22  6FA8               	movwf	_S_counter& (0+255),b
  6369                           
  6370                           ;main.c: 1214: N_counter= 0;
  6371  003B24  0E00               	movlw	0
  6372  003B26  6FA7               	movwf	(_N_counter+1)& (0+255),b
  6373  003B28  0E00               	movlw	0
  6374  003B2A  6FA6               	movwf	_N_counter& (0+255),b
  6375                           
  6376                           ;main.c: 1215: W_counter= 0;
  6377  003B2C  0E00               	movlw	0
  6378  003B2E  6FA5               	movwf	(_W_counter+1)& (0+255),b
  6379  003B30  0E00               	movlw	0
  6380  003B32  6FA4               	movwf	_W_counter& (0+255),b
  6381                           
  6382                           ;main.c: 1218: initial_time = 0;
  6383  003B34  0E00               	movlw	0
  6384  003B36  0101               	movlb	1	; () banked
  6385  003B38  6F69               	movwf	(_initial_time+1)& (0+255),b
  6386  003B3A  0E00               	movlw	0
  6387  003B3C  6F68               	movwf	_initial_time& (0+255),b
  6388                           
  6389                           ;main.c: 1219: final_time = 0;
  6390  003B3E  0E00               	movlw	0
  6391  003B40  6F61               	movwf	(_final_time+1)& (0+255),b
  6392  003B42  0E00               	movlw	0
  6393  003B44  6F60               	movwf	_final_time& (0+255),b
  6394                           
  6395                           ;main.c: 1221: for (i=0;i<8;i++){
  6396  003B46  0E00               	movlw	0
  6397  003B48  0100               	movlb	0	; () banked
  6398  003B4A  6FBF               	movwf	(_i+1)& (0+255),b
  6399  003B4C  0E00               	movlw	0
  6400  003B4E  6FBE               	movwf	_i& (0+255),b
  6401  003B50                     l4636:
  6402                           
  6403                           ; BSR set to: 0
  6404  003B50  51BF               	movf	(_i+1)& (0+255),w,b
  6405  003B52  E155               	bnz	l491
  6406  003B54  0E08               	movlw	8
  6407  003B56  5DBE               	subwf	_i& (0+255),w,b
  6408  003B58  B0D8               	btfsc	status,0,c
  6409  003B5A  0012               	return	
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;main.c: 1222: compartment_array[i] = 0;
  6413                           
  6414                           ; BSR set to: 0
  6415                           
  6416                           ; BSR set to: 0
  6417  003B5C  90D8               	bcf	status,0,c
  6418  003B5E  35BE               	rlcf	_i& (0+255),w,b
  6419  003B60  6ED9               	movwf	fsr2l,c
  6420  003B62  35BF               	rlcf	(_i+1)& (0+255),w,b
  6421  003B64  6EDA               	movwf	fsr2h,c
  6422  003B66  0E80               	movlw	low _compartment_array
  6423  003B68  26D9               	addwf	fsr2l,f,c
  6424  003B6A  0E00               	movlw	high _compartment_array
  6425  003B6C  22DA               	addwfc	fsr2h,f,c
  6426  003B6E  0E00               	movlw	0
  6427  003B70  6EDE               	movwf	postinc2,c
  6428  003B72  0E00               	movlw	0
  6429  003B74  6EDD               	movwf	postdec2,c
  6430                           
  6431                           ;main.c: 1223: compartment_number[i] = 0;
  6432  003B76  90D8               	bcf	status,0,c
  6433  003B78  35BE               	rlcf	_i& (0+255),w,b
  6434  003B7A  6ED9               	movwf	fsr2l,c
  6435  003B7C  35BF               	rlcf	(_i+1)& (0+255),w,b
  6436  003B7E  6EDA               	movwf	fsr2h,c
  6437  003B80  0E46               	movlw	low _compartment_number
  6438  003B82  26D9               	addwf	fsr2l,f,c
  6439  003B84  0E00               	movlw	high _compartment_number
  6440  003B86  22DA               	addwfc	fsr2h,f,c
  6441  003B88  0E00               	movlw	0
  6442  003B8A  6EDE               	movwf	postinc2,c
  6443  003B8C  0E00               	movlw	0
  6444  003B8E  6EDD               	movwf	postdec2,c
  6445                           
  6446                           ;main.c: 1224: B_array[i] = 0;
  6447  003B90  90D8               	bcf	status,0,c
  6448  003B92  35BE               	rlcf	_i& (0+255),w,b
  6449  003B94  6ED9               	movwf	fsr2l,c
  6450  003B96  35BF               	rlcf	(_i+1)& (0+255),w,b
  6451  003B98  6EDA               	movwf	fsr2h,c
  6452  003B9A  0E30               	movlw	low _B_array
  6453  003B9C  26D9               	addwf	fsr2l,f,c
  6454  003B9E  0E01               	movlw	high _B_array
  6455  003BA0  22DA               	addwfc	fsr2h,f,c
  6456  003BA2  0E00               	movlw	0
  6457  003BA4  6EDE               	movwf	postinc2,c
  6458  003BA6  0E00               	movlw	0
  6459  003BA8  6EDD               	movwf	postdec2,c
  6460                           
  6461                           ;main.c: 1225: N_array[i] = 0;
  6462  003BAA  90D8               	bcf	status,0,c
  6463  003BAC  35BE               	rlcf	_i& (0+255),w,b
  6464  003BAE  6ED9               	movwf	fsr2l,c
  6465  003BB0  35BF               	rlcf	(_i+1)& (0+255),w,b
  6466  003BB2  6EDA               	movwf	fsr2h,c
  6467  003BB4  0E10               	movlw	low _N_array
  6468  003BB6  26D9               	addwf	fsr2l,f,c
  6469  003BB8  0E01               	movlw	high _N_array
  6470  003BBA  22DA               	addwfc	fsr2h,f,c
  6471  003BBC  0E00               	movlw	0
  6472  003BBE  6EDE               	movwf	postinc2,c
  6473  003BC0  0E00               	movlw	0
  6474  003BC2  6EDD               	movwf	postdec2,c
  6475                           
  6476                           ;main.c: 1226: S_array[i] = 0;
  6477  003BC4  90D8               	bcf	status,0,c
  6478  003BC6  35BE               	rlcf	_i& (0+255),w,b
  6479  003BC8  6ED9               	movwf	fsr2l,c
  6480  003BCA  35BF               	rlcf	(_i+1)& (0+255),w,b
  6481  003BCC  6EDA               	movwf	fsr2h,c
  6482  003BCE  0E20               	movlw	low _S_array
  6483  003BD0  26D9               	addwf	fsr2l,f,c
  6484  003BD2  0E01               	movlw	high _S_array
  6485  003BD4  22DA               	addwfc	fsr2h,f,c
  6486  003BD6  0E00               	movlw	0
  6487  003BD8  6EDE               	movwf	postinc2,c
  6488  003BDA  0E00               	movlw	0
  6489  003BDC  6EDD               	movwf	postdec2,c
  6490                           
  6491                           ;main.c: 1227: W_array[i] = 0;
  6492  003BDE  90D8               	bcf	status,0,c
  6493  003BE0  35BE               	rlcf	_i& (0+255),w,b
  6494  003BE2  6ED9               	movwf	fsr2l,c
  6495  003BE4  35BF               	rlcf	(_i+1)& (0+255),w,b
  6496  003BE6  6EDA               	movwf	fsr2h,c
  6497  003BE8  0E00               	movlw	low _W_array
  6498  003BEA  26D9               	addwf	fsr2l,f,c
  6499  003BEC  0E01               	movlw	high _W_array
  6500  003BEE  22DA               	addwfc	fsr2h,f,c
  6501  003BF0  0E00               	movlw	0
  6502  003BF2  6EDE               	movwf	postinc2,c
  6503  003BF4  0E00               	movlw	0
  6504  003BF6  6EDD               	movwf	postdec2,c
  6505                           
  6506                           ; BSR set to: 0
  6507  003BF8  4BBE               	infsnz	_i& (0+255),f,b
  6508  003BFA  2BBF               	incf	(_i+1)& (0+255),f,b
  6509  003BFC  D7A9               	goto	l4636
  6510  003BFE                     l491:
  6511                           
  6512                           ; BSR set to: 0
  6513  003BFE  0012               	return		;funcret
  6514  003C00                     __end_of_initialize:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           intcon	equ	0xFF2
  6523                           intcon3	equ	0xFF0
  6524                           indf0	equ	0xFEF
  6525                           postinc0	equ	0xFEE
  6526                           fsr0h	equ	0xFEA
  6527                           fsr0l	equ	0xFE9
  6528                           wreg	equ	0xFE8
  6529                           postdec1	equ	0xFE5
  6530                           fsr1l	equ	0xFE1
  6531                           postinc2	equ	0xFDE
  6532                           postdec2	equ	0xFDD
  6533                           fsr2h	equ	0xFDA
  6534                           fsr2l	equ	0xFD9
  6535                           status	equ	0xFD8
  6536                           
  6537 ;; *************** function _initLCD *****************
  6538 ;; Defined at:
  6539 ;;		line 60 in file "lcd.c"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;		None
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;		None
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      void 
  6546 ;; Registers used:
  6547 ;;		wreg, status,2, status,0, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;Total ram usage:        1 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    6
  6560 ;; This function calls:
  6561 ;;		_lcdInst
  6562 ;; This function is called by:
  6563 ;;		_main
  6564 ;;		_count_gear
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           	psect	text8
  6569  0044E4                     __ptext8:
  6570                           	opt stack 0
  6571  0044E4                     _initLCD:
  6572                           	opt stack 24
  6573                           
  6574                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;incstack = 0
  6578  0044E4  0EC3               	movlw	195
  6579  0044E6  0100               	movlb	0	; () banked
  6580  0044E8  6FCB               	movwf	??_initLCD& (0+255),b
  6581  0044EA  0ECD               	movlw	205
  6582  0044EC                     u5617:
  6583  0044EC  2EE8               	decfsz	wreg,f,c
  6584  0044EE  D7FE               	bra	u5617
  6585  0044F0  2FCB               	decfsz	??_initLCD& (0+255),f,b
  6586  0044F2  D7FC               	bra	u5617
  6587                           
  6588                           ;lcd.c: 69: lcdInst(0b00110011);
  6589  0044F4  0E33               	movlw	51
  6590  0044F6  EC15  F024         	call	_lcdInst
  6591                           
  6592                           ;lcd.c: 70: lcdInst(0b00110010);
  6593  0044FA  0E32               	movlw	50
  6594  0044FC  EC15  F024         	call	_lcdInst
  6595                           
  6596                           ;lcd.c: 71: lcdInst(0b00101000);
  6597  004500  0E28               	movlw	40
  6598  004502  EC15  F024         	call	_lcdInst
  6599                           
  6600                           ;lcd.c: 72: lcdInst(0b00001111);
  6601  004506  0E0F               	movlw	15
  6602  004508  EC15  F024         	call	_lcdInst
  6603                           
  6604                           ;lcd.c: 73: lcdInst(0b00000110);
  6605  00450C  0E06               	movlw	6
  6606  00450E  EC15  F024         	call	_lcdInst
  6607                           
  6608                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6609  004512  0E01               	movlw	1
  6610  004514  EC15  F024         	call	_lcdInst
  6611  004518  0EC3               	movlw	195
  6612  00451A  0100               	movlb	0	; () banked
  6613  00451C  6FCB               	movwf	??_initLCD& (0+255),b
  6614  00451E  0ECD               	movlw	205
  6615  004520                     u5627:
  6616  004520  2EE8               	decfsz	wreg,f,c
  6617  004522  D7FE               	bra	u5627
  6618  004524  2FCB               	decfsz	??_initLCD& (0+255),f,b
  6619  004526  D7FC               	bra	u5627
  6620                           
  6621                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6622  004528  0E0F               	movlw	15
  6623  00452A  EC15  F024         	call	_lcdInst
  6624  00452E  0012               	return		;funcret
  6625  004530                     __end_of_initLCD:
  6626                           	opt stack 0
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           intcon3	equ	0xFF0
  6635                           indf0	equ	0xFEF
  6636                           postinc0	equ	0xFEE
  6637                           fsr0h	equ	0xFEA
  6638                           fsr0l	equ	0xFE9
  6639                           wreg	equ	0xFE8
  6640                           postdec1	equ	0xFE5
  6641                           fsr1l	equ	0xFE1
  6642                           postinc2	equ	0xFDE
  6643                           postdec2	equ	0xFDD
  6644                           fsr2h	equ	0xFDA
  6645                           fsr2l	equ	0xFD9
  6646                           status	equ	0xFD8
  6647                           
  6648 ;; *************** function _lcdInst *****************
  6649 ;; Defined at:
  6650 ;;		line 11 in file "lcd.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;  data            1    wreg     unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  data            1    2[BANK0 ] unsigned char 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      void 
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;Total ram usage:        1 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    5
  6671 ;; This function calls:
  6672 ;;		_lcdNibble
  6673 ;; This function is called by:
  6674 ;;		_initLCD
  6675 ;;		_main
  6676 ;;		_lcd_set_cursor
  6677 ;;		_lcd_shift_cursor
  6678 ;;		_lcd_shift_display
  6679 ;;		_count_gear
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           	psect	text9
  6684  00482A                     __ptext9:
  6685                           	opt stack 0
  6686  00482A                     _lcdInst:
  6687                           	opt stack 25
  6688                           
  6689                           ;incstack = 0
  6690                           ;lcdInst@data stored from wreg
  6691  00482A  0100               	movlb	0	; () banked
  6692  00482C  6FCA               	movwf	lcdInst@data& (0+255),b
  6693                           
  6694                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  6695  00482E  948C               	bcf	3980,2,c	;volatile
  6696                           
  6697                           ;lcd.c: 20: lcdNibble(data);
  6698  004830  0100               	movlb	0	; () banked
  6699  004832  51CA               	movf	lcdInst@data& (0+255),w,b
  6700  004834  EC48  F01F         	call	_lcdNibble
  6701                           
  6702                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6703  004838  0EC8               	movlw	200
  6704  00483A                     u5637:
  6705  00483A  D000               	nop2	
  6706  00483C  2EE8               	decfsz	wreg,f,c
  6707  00483E  D7FD               	bra	u5637
  6708  004840  0012               	return		;funcret
  6709  004842                     __end_of_lcdInst:
  6710                           	opt stack 0
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           prodh	equ	0xFF4
  6716                           prodl	equ	0xFF3
  6717                           intcon	equ	0xFF2
  6718                           intcon3	equ	0xFF0
  6719                           indf0	equ	0xFEF
  6720                           postinc0	equ	0xFEE
  6721                           fsr0h	equ	0xFEA
  6722                           fsr0l	equ	0xFE9
  6723                           wreg	equ	0xFE8
  6724                           postdec1	equ	0xFE5
  6725                           fsr1l	equ	0xFE1
  6726                           postinc2	equ	0xFDE
  6727                           postdec2	equ	0xFDD
  6728                           fsr2h	equ	0xFDA
  6729                           fsr2l	equ	0xFD9
  6730                           status	equ	0xFD8
  6731                           
  6732 ;; *************** function _lcdNibble *****************
  6733 ;; Defined at:
  6734 ;;		line 37 in file "lcd.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  data            1    wreg     unsigned char 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;  data            1    1[BANK0 ] unsigned char 
  6739 ;;  temp            1    0[BANK0 ] unsigned char 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      void 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6753 ;;Total ram usage:        2 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    4
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_lcdInst
  6760 ;;		_putch
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	text10
  6765  003E90                     __ptext10:
  6766                           	opt stack 0
  6767  003E90                     _lcdNibble:
  6768                           	opt stack 24
  6769                           
  6770                           ;incstack = 0
  6771                           ;lcdNibble@data stored from wreg
  6772  003E90  0100               	movlb	0	; () banked
  6773  003E92  6FC9               	movwf	lcdNibble@data& (0+255),b
  6774                           
  6775                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  6776  003E94  0100               	movlb	0	; () banked
  6777  003E96  51C9               	movf	lcdNibble@data& (0+255),w,b
  6778  003E98  0BF0               	andlw	240
  6779  003E9A  6FC8               	movwf	lcdNibble@temp& (0+255),b
  6780                           
  6781                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  6782  003E9C  508C               	movf	3980,w,c	;volatile
  6783  003E9E  0B0F               	andlw	15
  6784  003EA0  6E8C               	movwf	3980,c	;volatile
  6785                           
  6786                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  6787  003EA2  51C8               	movf	lcdNibble@temp& (0+255),w,b
  6788  003EA4  108C               	iorwf	3980,w,c	;volatile
  6789  003EA6  6E8C               	movwf	3980,c	;volatile
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6793  003EA8  0E00               	movlw	0
  6794  003EAA  BEF2               	btfsc	intcon,7,c	;volatile
  6795  003EAC  0E01               	movlw	1
  6796  003EAE  6FC2               	movwf	_LCDinterruptState& (0+255),b
  6797                           
  6798                           ; BSR set to: 0
  6799  003EB0  9EF2               	bcf	intcon,7,c	;volatile
  6800                           
  6801                           ; BSR set to: 0
  6802  003EB2  868C               	bsf	3980,3,c	;volatile
  6803                           
  6804                           ; BSR set to: 0
  6805  003EB4  0E53               	movlw	83
  6806  003EB6                     u5647:
  6807  003EB6  2EE8               	decfsz	wreg,f,c
  6808  003EB8  D7FE               	bra	u5647
  6809  003EBA  F000               	nop	
  6810  003EBC  968C               	bcf	3980,3,c	;volatile
  6811  003EBE  0EC8               	movlw	200
  6812  003EC0                     u5657:
  6813  003EC0  D000               	nop2	
  6814  003EC2  2EE8               	decfsz	wreg,f,c
  6815  003EC4  D7FD               	bra	u5657
  6816  003EC6  0100               	movlb	0	; () banked
  6817  003EC8  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
  6818  003ECA  D002               	bra	u2545
  6819  003ECC  9EF2               	bcf	intcon,7,c	;volatile
  6820  003ECE  D001               	bra	u2546
  6821  003ED0                     u2545:
  6822  003ED0  8EF2               	bsf	intcon,7,c	;volatile
  6823  003ED2                     u2546:
  6824                           
  6825                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  6826  003ED2  0100               	movlb	0	; () banked
  6827  003ED4  39C9               	swapf	lcdNibble@data& (0+255),w,b
  6828  003ED6  0BF0               	andlw	240
  6829  003ED8  6FC9               	movwf	lcdNibble@data& (0+255),b
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  6833  003EDA  51C9               	movf	lcdNibble@data& (0+255),w,b
  6834  003EDC  0BF0               	andlw	240
  6835  003EDE  6FC8               	movwf	lcdNibble@temp& (0+255),b
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  6839  003EE0  508C               	movf	3980,w,c	;volatile
  6840  003EE2  0B0F               	andlw	15
  6841  003EE4  6E8C               	movwf	3980,c	;volatile
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  6845  003EE6  51C8               	movf	lcdNibble@temp& (0+255),w,b
  6846  003EE8  108C               	iorwf	3980,w,c	;volatile
  6847  003EEA  6E8C               	movwf	3980,c	;volatile
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6851  003EEC  0E00               	movlw	0
  6852  003EEE  BEF2               	btfsc	intcon,7,c	;volatile
  6853  003EF0  0E01               	movlw	1
  6854  003EF2  6FC2               	movwf	_LCDinterruptState& (0+255),b
  6855                           
  6856                           ; BSR set to: 0
  6857  003EF4  9EF2               	bcf	intcon,7,c	;volatile
  6858                           
  6859                           ; BSR set to: 0
  6860  003EF6  868C               	bsf	3980,3,c	;volatile
  6861                           
  6862                           ; BSR set to: 0
  6863  003EF8  0E53               	movlw	83
  6864  003EFA                     u5667:
  6865  003EFA  2EE8               	decfsz	wreg,f,c
  6866  003EFC  D7FE               	bra	u5667
  6867  003EFE  F000               	nop	
  6868  003F00  968C               	bcf	3980,3,c	;volatile
  6869  003F02  0EC8               	movlw	200
  6870  003F04                     u5677:
  6871  003F04  D000               	nop2	
  6872  003F06  2EE8               	decfsz	wreg,f,c
  6873  003F08  D7FD               	bra	u5677
  6874  003F0A  0100               	movlb	0	; () banked
  6875  003F0C  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
  6876  003F0E  D002               	bra	u2555
  6877  003F10  9EF2               	bcf	intcon,7,c	;volatile
  6878  003F12  D001               	bra	u2556
  6879  003F14                     u2555:
  6880  003F14  8EF2               	bsf	intcon,7,c	;volatile
  6881  003F16                     u2556:
  6882  003F16  0012               	return		;funcret
  6883  003F18                     __end_of_lcdNibble:
  6884                           	opt stack 0
  6885                           tblptru	equ	0xFF8
  6886                           tblptrh	equ	0xFF7
  6887                           tblptrl	equ	0xFF6
  6888                           tablat	equ	0xFF5
  6889                           prodh	equ	0xFF4
  6890                           prodl	equ	0xFF3
  6891                           intcon	equ	0xFF2
  6892                           intcon3	equ	0xFF0
  6893                           indf0	equ	0xFEF
  6894                           postinc0	equ	0xFEE
  6895                           fsr0h	equ	0xFEA
  6896                           fsr0l	equ	0xFE9
  6897                           wreg	equ	0xFE8
  6898                           postdec1	equ	0xFE5
  6899                           fsr1l	equ	0xFE1
  6900                           postinc2	equ	0xFDE
  6901                           postdec2	equ	0xFDD
  6902                           fsr2h	equ	0xFDA
  6903                           fsr2l	equ	0xFD9
  6904                           status	equ	0xFD8
  6905                           
  6906 ;; *************** function _get_RTC_initial *****************
  6907 ;; Defined at:
  6908 ;;		line 1333 in file "main.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;		None
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;		None
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  1    wreg      void 
  6915 ;; Registers used:
  6916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;Total ram usage:        1 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    6
  6929 ;; This function calls:
  6930 ;;		_I2C_Master_Read
  6931 ;;		_I2C_Master_Start
  6932 ;;		_I2C_Master_Stop
  6933 ;;		_I2C_Master_Write
  6934 ;;		___awdiv
  6935 ;;		___wmul
  6936 ;; This function is called by:
  6937 ;;		_main
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           	psect	text11
  6942  003C00                     __ptext11:
  6943                           	opt stack 0
  6944  003C00                     _get_RTC_initial:
  6945                           	opt stack 24
  6946                           
  6947                           ;main.c: 1335: I2C_Master_Start();
  6948                           
  6949                           ;incstack = 0
  6950  003C00  EC63  F024         	call	_I2C_Master_Start	;wreg free
  6951                           
  6952                           ;main.c: 1336: I2C_Master_Write(0b11010000);
  6953  003C04  0E00               	movlw	0
  6954  003C06  0100               	movlb	0	; () banked
  6955  003C08  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6956  003C0A  0ED0               	movlw	208
  6957  003C0C  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6958  003C0E  EC55  F024         	call	_I2C_Master_Write	;wreg free
  6959                           
  6960                           ;main.c: 1337: I2C_Master_Write(0x00);
  6961  003C12  0E00               	movlw	0
  6962  003C14  0100               	movlb	0	; () banked
  6963  003C16  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6964  003C18  0E00               	movlw	0
  6965  003C1A  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6966  003C1C  EC55  F024         	call	_I2C_Master_Write	;wreg free
  6967                           
  6968                           ;main.c: 1338: I2C_Master_Stop();
  6969  003C20  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  6970                           
  6971                           ;main.c: 1341: I2C_Master_Start();
  6972  003C24  EC63  F024         	call	_I2C_Master_Start	;wreg free
  6973                           
  6974                           ;main.c: 1342: I2C_Master_Write(0b11010001);
  6975  003C28  0E00               	movlw	0
  6976  003C2A  0100               	movlb	0	; () banked
  6977  003C2C  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6978  003C2E  0ED1               	movlw	209
  6979  003C30  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6980  003C32  EC55  F024         	call	_I2C_Master_Write	;wreg free
  6981                           
  6982                           ;main.c: 1343: for(i = 0; i < 6; i++){
  6983  003C36  0E00               	movlw	0
  6984  003C38  0100               	movlb	0	; () banked
  6985  003C3A  6FBF               	movwf	(_i+1)& (0+255),b
  6986  003C3C  0E00               	movlw	0
  6987  003C3E  6FBE               	movwf	_i& (0+255),b
  6988  003C40                     l4556:
  6989                           
  6990                           ; BSR set to: 0
  6991  003C40  51BF               	movf	(_i+1)& (0+255),w,b
  6992  003C42  E112               	bnz	l4566
  6993  003C44  0E06               	movlw	6
  6994  003C46  5DBE               	subwf	_i& (0+255),w,b
  6995  003C48  B0D8               	btfsc	status,0,c
  6996  003C4A  D00E               	goto	u3240
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;main.c: 1344: time[i] = I2C_Master_Read(0);
  7000                           
  7001                           ; BSR set to: 0
  7002                           
  7003                           ; BSR set to: 0
  7004  003C4C  0E56               	movlw	low _time
  7005  003C4E  25BE               	addwf	_i& (0+255),w,b
  7006  003C50  6ED9               	movwf	fsr2l,c
  7007  003C52  0E00               	movlw	high _time
  7008  003C54  21BF               	addwfc	(_i+1)& (0+255),w,b
  7009  003C56  6EDA               	movwf	fsr2h,c
  7010  003C58  0E00               	movlw	0
  7011  003C5A  EC87  F023         	call	_I2C_Master_Read
  7012  003C5E  6EDF               	movwf	indf2,c
  7013  003C60  0100               	movlb	0	; () banked
  7014  003C62  4BBE               	infsnz	_i& (0+255),f,b
  7015  003C64  2BBF               	incf	(_i+1)& (0+255),f,b
  7016  003C66  D7EC               	goto	l4556
  7017  003C68                     u3240:
  7018  003C68                     l4566:
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;main.c: 1345: }
  7022                           ;main.c: 1346: time[6] = I2C_Master_Read(1);
  7023  003C68  0E01               	movlw	1
  7024  003C6A  EC87  F023         	call	_I2C_Master_Read
  7025  003C6E  6E5C               	movwf	_time+6,c
  7026                           
  7027                           ;main.c: 1347: I2C_Master_Stop();
  7028  003C70  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  7029                           
  7030                           ;main.c: 1349: hr_initial = time[2]/16*10+time[2]%16;
  7031  003C74  C058  F0D6         	movff	_time+2,??_get_RTC_initial
  7032  003C78  0E0F               	movlw	15
  7033  003C7A  0100               	movlb	0	; () banked
  7034  003C7C  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  7035  003C7E  0E00               	movlw	0
  7036  003C80  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7037  003C82  0E10               	movlw	16
  7038  003C84  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7039  003C86  C058  F0C8         	movff	_time+2,___awdiv@dividend
  7040  003C8A  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7041  003C8C  EC8C  F01F         	call	___awdiv	;wreg free
  7042  003C90  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7043  003C94  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7044  003C98  0E00               	movlw	0
  7045  003C9A  0100               	movlb	0	; () banked
  7046  003C9C  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7047  003C9E  0E0A               	movlw	10
  7048  003CA0  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7049  003CA2  EC9C  F023         	call	___wmul	;wreg free
  7050  003CA6  0100               	movlb	0	; () banked
  7051  003CA8  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  7052  003CAA  25D0               	addwf	?___wmul& (0+255),w,b
  7053  003CAC  0101               	movlb	1	; () banked
  7054  003CAE  6F6E               	movwf	_hr_initial& (0+255),b
  7055  003CB0  0100               	movlb	0	; () banked
  7056  003CB2  0E00               	movlw	0
  7057  003CB4  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7058  003CB6  0101               	movlb	1	; () banked
  7059  003CB8  6F6F               	movwf	(_hr_initial+1)& (0+255),b
  7060                           
  7061                           ; BSR set to: 1
  7062                           ;main.c: 1350: min_initial = time[1]/16*10 + time[1]%16;
  7063  003CBA  C057  F0D6         	movff	_time+1,??_get_RTC_initial
  7064  003CBE  0E0F               	movlw	15
  7065  003CC0  0100               	movlb	0	; () banked
  7066  003CC2  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  7067  003CC4  0E00               	movlw	0
  7068  003CC6  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7069  003CC8  0E10               	movlw	16
  7070  003CCA  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7071  003CCC  C057  F0C8         	movff	_time+1,___awdiv@dividend
  7072  003CD0  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7073  003CD2  EC8C  F01F         	call	___awdiv	;wreg free
  7074  003CD6  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7075  003CDA  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7076  003CDE  0E00               	movlw	0
  7077  003CE0  0100               	movlb	0	; () banked
  7078  003CE2  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7079  003CE4  0E0A               	movlw	10
  7080  003CE6  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7081  003CE8  EC9C  F023         	call	___wmul	;wreg free
  7082  003CEC  0100               	movlb	0	; () banked
  7083  003CEE  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  7084  003CF0  25D0               	addwf	?___wmul& (0+255),w,b
  7085  003CF2  0101               	movlb	1	; () banked
  7086  003CF4  6F6C               	movwf	_min_initial& (0+255),b
  7087  003CF6  0100               	movlb	0	; () banked
  7088  003CF8  0E00               	movlw	0
  7089  003CFA  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7090  003CFC  0101               	movlb	1	; () banked
  7091  003CFE  6F6D               	movwf	(_min_initial+1)& (0+255),b
  7092                           
  7093                           ; BSR set to: 1
  7094                           ;main.c: 1351: sec_initial = time[0]/16*10 +time[0]%16;
  7095  003D00  C056  F0D6         	movff	_time,??_get_RTC_initial
  7096  003D04  0E0F               	movlw	15
  7097  003D06  0100               	movlb	0	; () banked
  7098  003D08  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  7099  003D0A  0E00               	movlw	0
  7100  003D0C  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7101  003D0E  0E10               	movlw	16
  7102  003D10  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7103  003D12  C056  F0C8         	movff	_time,___awdiv@dividend
  7104  003D16  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7105  003D18  EC8C  F01F         	call	___awdiv	;wreg free
  7106  003D1C  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7107  003D20  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7108  003D24  0E00               	movlw	0
  7109  003D26  0100               	movlb	0	; () banked
  7110  003D28  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7111  003D2A  0E0A               	movlw	10
  7112  003D2C  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7113  003D2E  EC9C  F023         	call	___wmul	;wreg free
  7114  003D32  0100               	movlb	0	; () banked
  7115  003D34  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  7116  003D36  25D0               	addwf	?___wmul& (0+255),w,b
  7117  003D38  0101               	movlb	1	; () banked
  7118  003D3A  6F6A               	movwf	_sec_initial& (0+255),b
  7119  003D3C  0100               	movlb	0	; () banked
  7120  003D3E  0E00               	movlw	0
  7121  003D40  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7122  003D42  0101               	movlb	1	; () banked
  7123  003D44  6F6B               	movwf	(_sec_initial+1)& (0+255),b
  7124                           
  7125                           ; BSR set to: 1
  7126  003D46  0012               	return		;funcret
  7127  003D48                     __end_of_get_RTC_initial:
  7128                           	opt stack 0
  7129                           tblptru	equ	0xFF8
  7130                           tblptrh	equ	0xFF7
  7131                           tblptrl	equ	0xFF6
  7132                           tablat	equ	0xFF5
  7133                           prodh	equ	0xFF4
  7134                           prodl	equ	0xFF3
  7135                           intcon	equ	0xFF2
  7136                           intcon3	equ	0xFF0
  7137                           indf0	equ	0xFEF
  7138                           postinc0	equ	0xFEE
  7139                           fsr0h	equ	0xFEA
  7140                           fsr0l	equ	0xFE9
  7141                           wreg	equ	0xFE8
  7142                           postdec1	equ	0xFE5
  7143                           fsr1l	equ	0xFE1
  7144                           indf2	equ	0xFDF
  7145                           postinc2	equ	0xFDE
  7146                           postdec2	equ	0xFDD
  7147                           fsr2h	equ	0xFDA
  7148                           fsr2l	equ	0xFD9
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function _get_RTC_final *****************
  7152 ;; Defined at:
  7153 ;;		line 1354 in file "main.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;Total ram usage:        1 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    6
  7174 ;; This function calls:
  7175 ;;		_I2C_Master_Read
  7176 ;;		_I2C_Master_Start
  7177 ;;		_I2C_Master_Stop
  7178 ;;		_I2C_Master_Write
  7179 ;;		___awdiv
  7180 ;;		___wmul
  7181 ;; This function is called by:
  7182 ;;		_main
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text12
  7187  003D48                     __ptext12:
  7188                           	opt stack 0
  7189  003D48                     _get_RTC_final:
  7190                           	opt stack 24
  7191                           
  7192                           ;main.c: 1355: I2C_Master_Start();
  7193                           
  7194                           ; BSR set to: 1
  7195                           ;incstack = 0
  7196  003D48  EC63  F024         	call	_I2C_Master_Start	;wreg free
  7197                           
  7198                           ;main.c: 1356: I2C_Master_Write(0b11010000);
  7199  003D4C  0E00               	movlw	0
  7200  003D4E  0100               	movlb	0	; () banked
  7201  003D50  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  7202  003D52  0ED0               	movlw	208
  7203  003D54  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  7204  003D56  EC55  F024         	call	_I2C_Master_Write	;wreg free
  7205                           
  7206                           ;main.c: 1357: I2C_Master_Write(0x00);
  7207  003D5A  0E00               	movlw	0
  7208  003D5C  0100               	movlb	0	; () banked
  7209  003D5E  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  7210  003D60  0E00               	movlw	0
  7211  003D62  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  7212  003D64  EC55  F024         	call	_I2C_Master_Write	;wreg free
  7213                           
  7214                           ;main.c: 1358: I2C_Master_Stop();
  7215  003D68  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  7216                           
  7217                           ;main.c: 1361: I2C_Master_Start();
  7218  003D6C  EC63  F024         	call	_I2C_Master_Start	;wreg free
  7219                           
  7220                           ;main.c: 1362: I2C_Master_Write(0b11010001);
  7221  003D70  0E00               	movlw	0
  7222  003D72  0100               	movlb	0	; () banked
  7223  003D74  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  7224  003D76  0ED1               	movlw	209
  7225  003D78  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  7226  003D7A  EC55  F024         	call	_I2C_Master_Write	;wreg free
  7227                           
  7228                           ;main.c: 1363: for(i = 0; i < 6; i++){
  7229  003D7E  0E00               	movlw	0
  7230  003D80  0100               	movlb	0	; () banked
  7231  003D82  6FBF               	movwf	(_i+1)& (0+255),b
  7232  003D84  0E00               	movlw	0
  7233  003D86  6FBE               	movwf	_i& (0+255),b
  7234  003D88                     l4616:
  7235                           
  7236                           ; BSR set to: 0
  7237  003D88  51BF               	movf	(_i+1)& (0+255),w,b
  7238  003D8A  E112               	bnz	l4626
  7239  003D8C  0E06               	movlw	6
  7240  003D8E  5DBE               	subwf	_i& (0+255),w,b
  7241  003D90  B0D8               	btfsc	status,0,c
  7242  003D92  D00E               	goto	u3280
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;main.c: 1364: time[i] = I2C_Master_Read(0);
  7246                           
  7247                           ; BSR set to: 0
  7248                           
  7249                           ; BSR set to: 0
  7250  003D94  0E56               	movlw	low _time
  7251  003D96  25BE               	addwf	_i& (0+255),w,b
  7252  003D98  6ED9               	movwf	fsr2l,c
  7253  003D9A  0E00               	movlw	high _time
  7254  003D9C  21BF               	addwfc	(_i+1)& (0+255),w,b
  7255  003D9E  6EDA               	movwf	fsr2h,c
  7256  003DA0  0E00               	movlw	0
  7257  003DA2  EC87  F023         	call	_I2C_Master_Read
  7258  003DA6  6EDF               	movwf	indf2,c
  7259  003DA8  0100               	movlb	0	; () banked
  7260  003DAA  4BBE               	infsnz	_i& (0+255),f,b
  7261  003DAC  2BBF               	incf	(_i+1)& (0+255),f,b
  7262  003DAE  D7EC               	goto	l4616
  7263  003DB0                     u3280:
  7264  003DB0                     l4626:
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;main.c: 1365: }
  7268                           ;main.c: 1366: time[6] = I2C_Master_Read(1);
  7269  003DB0  0E01               	movlw	1
  7270  003DB2  EC87  F023         	call	_I2C_Master_Read
  7271  003DB6  6E5C               	movwf	_time+6,c
  7272                           
  7273                           ;main.c: 1367: I2C_Master_Stop();
  7274  003DB8  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  7275                           
  7276                           ;main.c: 1369: hr_final = time[2]/16*10+time[2]%16;
  7277  003DBC  C058  F0D6         	movff	_time+2,??_get_RTC_final
  7278  003DC0  0E0F               	movlw	15
  7279  003DC2  0100               	movlb	0	; () banked
  7280  003DC4  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  7281  003DC6  0E00               	movlw	0
  7282  003DC8  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7283  003DCA  0E10               	movlw	16
  7284  003DCC  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7285  003DCE  C058  F0C8         	movff	_time+2,___awdiv@dividend
  7286  003DD2  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7287  003DD4  EC8C  F01F         	call	___awdiv	;wreg free
  7288  003DD8  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7289  003DDC  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7290  003DE0  0E00               	movlw	0
  7291  003DE2  0100               	movlb	0	; () banked
  7292  003DE4  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7293  003DE6  0E0A               	movlw	10
  7294  003DE8  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7295  003DEA  EC9C  F023         	call	___wmul	;wreg free
  7296  003DEE  0100               	movlb	0	; () banked
  7297  003DF0  51D6               	movf	??_get_RTC_final& (0+255),w,b
  7298  003DF2  25D0               	addwf	?___wmul& (0+255),w,b
  7299  003DF4  0101               	movlb	1	; () banked
  7300  003DF6  6F66               	movwf	_hr_final& (0+255),b
  7301  003DF8  0100               	movlb	0	; () banked
  7302  003DFA  0E00               	movlw	0
  7303  003DFC  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7304  003DFE  0101               	movlb	1	; () banked
  7305  003E00  6F67               	movwf	(_hr_final+1)& (0+255),b
  7306                           
  7307                           ; BSR set to: 1
  7308                           ;main.c: 1370: min_final = time[1]/16*10 + time[1]%16;
  7309  003E02  C057  F0D6         	movff	_time+1,??_get_RTC_final
  7310  003E06  0E0F               	movlw	15
  7311  003E08  0100               	movlb	0	; () banked
  7312  003E0A  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  7313  003E0C  0E00               	movlw	0
  7314  003E0E  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7315  003E10  0E10               	movlw	16
  7316  003E12  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7317  003E14  C057  F0C8         	movff	_time+1,___awdiv@dividend
  7318  003E18  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7319  003E1A  EC8C  F01F         	call	___awdiv	;wreg free
  7320  003E1E  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7321  003E22  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7322  003E26  0E00               	movlw	0
  7323  003E28  0100               	movlb	0	; () banked
  7324  003E2A  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7325  003E2C  0E0A               	movlw	10
  7326  003E2E  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7327  003E30  EC9C  F023         	call	___wmul	;wreg free
  7328  003E34  0100               	movlb	0	; () banked
  7329  003E36  51D6               	movf	??_get_RTC_final& (0+255),w,b
  7330  003E38  25D0               	addwf	?___wmul& (0+255),w,b
  7331  003E3A  0101               	movlb	1	; () banked
  7332  003E3C  6F64               	movwf	_min_final& (0+255),b
  7333  003E3E  0100               	movlb	0	; () banked
  7334  003E40  0E00               	movlw	0
  7335  003E42  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7336  003E44  0101               	movlb	1	; () banked
  7337  003E46  6F65               	movwf	(_min_final+1)& (0+255),b
  7338                           
  7339                           ; BSR set to: 1
  7340                           ;main.c: 1371: sec_final = time[0]/16*10 + time[0]%16;
  7341  003E48  C056  F0D6         	movff	_time,??_get_RTC_final
  7342  003E4C  0E0F               	movlw	15
  7343  003E4E  0100               	movlb	0	; () banked
  7344  003E50  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  7345  003E52  0E00               	movlw	0
  7346  003E54  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  7347  003E56  0E10               	movlw	16
  7348  003E58  6FCA               	movwf	___awdiv@divisor& (0+255),b
  7349  003E5A  C056  F0C8         	movff	_time,___awdiv@dividend
  7350  003E5E  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  7351  003E60  EC8C  F01F         	call	___awdiv	;wreg free
  7352  003E64  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  7353  003E68  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  7354  003E6C  0E00               	movlw	0
  7355  003E6E  0100               	movlb	0	; () banked
  7356  003E70  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7357  003E72  0E0A               	movlw	10
  7358  003E74  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  7359  003E76  EC9C  F023         	call	___wmul	;wreg free
  7360  003E7A  0100               	movlb	0	; () banked
  7361  003E7C  51D6               	movf	??_get_RTC_final& (0+255),w,b
  7362  003E7E  25D0               	addwf	?___wmul& (0+255),w,b
  7363  003E80  0101               	movlb	1	; () banked
  7364  003E82  6F62               	movwf	_sec_final& (0+255),b
  7365  003E84  0100               	movlb	0	; () banked
  7366  003E86  0E00               	movlw	0
  7367  003E88  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  7368  003E8A  0101               	movlb	1	; () banked
  7369  003E8C  6F63               	movwf	(_sec_final+1)& (0+255),b
  7370                           
  7371                           ; BSR set to: 1
  7372  003E8E  0012               	return		;funcret
  7373  003E90                     __end_of_get_RTC_final:
  7374                           	opt stack 0
  7375                           tblptru	equ	0xFF8
  7376                           tblptrh	equ	0xFF7
  7377                           tblptrl	equ	0xFF6
  7378                           tablat	equ	0xFF5
  7379                           prodh	equ	0xFF4
  7380                           prodl	equ	0xFF3
  7381                           intcon	equ	0xFF2
  7382                           intcon3	equ	0xFF0
  7383                           indf0	equ	0xFEF
  7384                           postinc0	equ	0xFEE
  7385                           fsr0h	equ	0xFEA
  7386                           fsr0l	equ	0xFE9
  7387                           wreg	equ	0xFE8
  7388                           postdec1	equ	0xFE5
  7389                           fsr1l	equ	0xFE1
  7390                           indf2	equ	0xFDF
  7391                           postinc2	equ	0xFDE
  7392                           postdec2	equ	0xFDD
  7393                           fsr2h	equ	0xFDA
  7394                           fsr2l	equ	0xFD9
  7395                           status	equ	0xFD8
  7396                           
  7397 ;; *************** function ___wmul *****************
  7398 ;; Defined at:
  7399 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  multiplier      2    8[BANK0 ] unsigned int 
  7402 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;  product         2   12[BANK0 ] unsigned int 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  2    8[BANK0 ] unsigned int 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0, prodl, prodh
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7414 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;Total ram usage:        6 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; Hardware stack levels required when called:    4
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_main
  7425 ;;		_get_RTC_initial
  7426 ;;		_get_RTC_final
  7427 ;;		_printf
  7428 ;;		_store_prev
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           	psect	text13
  7433  004738                     __ptext13:
  7434                           	opt stack 0
  7435  004738                     ___wmul:
  7436                           	opt stack 25
  7437                           
  7438                           ; BSR set to: 1
  7439                           ;incstack = 0
  7440  004738  0100               	movlb	0	; () banked
  7441  00473A  51D0               	movf	___wmul@multiplier& (0+255),w,b
  7442  00473C  03D2               	mulwf	___wmul@multiplicand& (0+255),b
  7443  00473E  CFF3 F0D4          	movff	prodl,___wmul@product
  7444  004742  CFF4 F0D5          	movff	prodh,___wmul@product+1
  7445  004746  51D0               	movf	___wmul@multiplier& (0+255),w,b
  7446  004748  03D3               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7447  00474A  50F3               	movf	prodl,w,c
  7448  00474C  27D5               	addwf	(___wmul@product+1)& (0+255),f,b
  7449  00474E  51D1               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7450  004750  03D2               	mulwf	___wmul@multiplicand& (0+255),b
  7451  004752  50F3               	movf	prodl,w,c
  7452  004754  27D5               	addwf	(___wmul@product+1)& (0+255),f,b
  7453                           
  7454                           ; BSR set to: 0
  7455  004756  C0D4  F0D0         	movff	___wmul@product,?___wmul
  7456  00475A  C0D5  F0D1         	movff	___wmul@product+1,?___wmul+1
  7457  00475E  0012               	return	
  7458  004760                     __end_of___wmul:
  7459                           	opt stack 0
  7460                           tblptru	equ	0xFF8
  7461                           tblptrh	equ	0xFF7
  7462                           tblptrl	equ	0xFF6
  7463                           tablat	equ	0xFF5
  7464                           prodh	equ	0xFF4
  7465                           prodl	equ	0xFF3
  7466                           intcon	equ	0xFF2
  7467                           intcon3	equ	0xFF0
  7468                           indf0	equ	0xFEF
  7469                           postinc0	equ	0xFEE
  7470                           fsr0h	equ	0xFEA
  7471                           fsr0l	equ	0xFE9
  7472                           wreg	equ	0xFE8
  7473                           postdec1	equ	0xFE5
  7474                           fsr1l	equ	0xFE1
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           fsr2h	equ	0xFDA
  7479                           fsr2l	equ	0xFD9
  7480                           status	equ	0xFD8
  7481                           
  7482 ;; *************** function ___awdiv *****************
  7483 ;; Defined at:
  7484 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;  dividend        2    0[BANK0 ] int 
  7487 ;;  divisor         2    2[BANK0 ] int 
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;  quotient        2    6[BANK0 ] int 
  7490 ;;  sign            1    5[BANK0 ] unsigned char 
  7491 ;;  counter         1    4[BANK0 ] unsigned char 
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  2    0[BANK0 ] int 
  7494 ;; Registers used:
  7495 ;;		wreg, status,2, status,0
  7496 ;; Tracked objects:
  7497 ;;		On entry : 0/0
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7501 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7504 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7505 ;;Total ram usage:        8 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    4
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_get_RTC_initial
  7512 ;;		_get_RTC_final
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           	psect	text14
  7517  003F18                     __ptext14:
  7518                           	opt stack 0
  7519  003F18                     ___awdiv:
  7520                           	opt stack 25
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;incstack = 0
  7524  003F18  0E00               	movlw	0
  7525  003F1A  0100               	movlb	0	; () banked
  7526  003F1C  6FCD               	movwf	___awdiv@sign& (0+255),b
  7527                           
  7528                           ; BSR set to: 0
  7529  003F1E  AFCB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7530  003F20  D006               	goto	l1087
  7531                           
  7532                           ; BSR set to: 0
  7533  003F22  6DCA               	negf	___awdiv@divisor& (0+255),b
  7534  003F24  1FCB               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7535  003F26  B0D8               	btfsc	status,0,c
  7536  003F28  2BCB               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7537                           
  7538                           ; BSR set to: 0
  7539  003F2A  0E01               	movlw	1
  7540  003F2C  6FCD               	movwf	___awdiv@sign& (0+255),b
  7541  003F2E                     l1087:
  7542                           
  7543                           ; BSR set to: 0
  7544                           
  7545                           ; BSR set to: 0
  7546  003F2E  AFC9               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7547  003F30  D006               	goto	l1088
  7548                           
  7549                           ; BSR set to: 0
  7550  003F32  6DC8               	negf	___awdiv@dividend& (0+255),b
  7551  003F34  1FC9               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7552  003F36  B0D8               	btfsc	status,0,c
  7553  003F38  2BC9               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7554                           
  7555                           ; BSR set to: 0
  7556  003F3A  0E01               	movlw	1
  7557  003F3C  1BCD               	xorwf	___awdiv@sign& (0+255),f,b
  7558  003F3E                     l1088:
  7559                           
  7560                           ; BSR set to: 0
  7561                           
  7562                           ; BSR set to: 0
  7563  003F3E  0E00               	movlw	0
  7564  003F40  6FCF               	movwf	(___awdiv@quotient+1)& (0+255),b
  7565  003F42  0E00               	movlw	0
  7566  003F44  6FCE               	movwf	___awdiv@quotient& (0+255),b
  7567                           
  7568                           ; BSR set to: 0
  7569  003F46  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7570  003F48  11CB               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7571  003F4A  B4D8               	btfsc	status,2,c
  7572  003F4C  D01C               	goto	l1095
  7573                           
  7574                           ; BSR set to: 0
  7575  003F4E  0E01               	movlw	1
  7576  003F50  6FCC               	movwf	___awdiv@counter& (0+255),b
  7577  003F52  D004               	goto	l1090
  7578  003F54                     
  7579                           ; BSR set to: 0
  7580                           
  7581                           ; BSR set to: 0
  7582  003F54  90D8               	bcf	status,0,c
  7583  003F56  37CA               	rlcf	___awdiv@divisor& (0+255),f,b
  7584  003F58  37CB               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7585  003F5A  2BCC               	incf	___awdiv@counter& (0+255),f,b
  7586  003F5C                     l1090:
  7587                           
  7588                           ; BSR set to: 0
  7589                           
  7590                           ; BSR set to: 0
  7591  003F5C  AFCB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7592  003F5E  D7FA               	goto	l1091
  7593  003F60                     u2680:
  7594                           
  7595                           ; BSR set to: 0
  7596                           
  7597                           ; BSR set to: 0
  7598                           
  7599                           ; BSR set to: 0
  7600  003F60  90D8               	bcf	status,0,c
  7601  003F62  37CE               	rlcf	___awdiv@quotient& (0+255),f,b
  7602  003F64  37CF               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7603                           
  7604                           ; BSR set to: 0
  7605  003F66  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7606  003F68  5DC8               	subwf	___awdiv@dividend& (0+255),w,b
  7607  003F6A  51CB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7608  003F6C  59C9               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7609  003F6E  A0D8               	btfss	status,0,c
  7610  003F70  D005               	goto	l1094
  7611                           
  7612                           ; BSR set to: 0
  7613  003F72  51CA               	movf	___awdiv@divisor& (0+255),w,b
  7614  003F74  5FC8               	subwf	___awdiv@dividend& (0+255),f,b
  7615  003F76  51CB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7616  003F78  5BC9               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7617                           
  7618                           ; BSR set to: 0
  7619  003F7A  81CE               	bsf	___awdiv@quotient& (0+255),0,b
  7620  003F7C                     l1094:
  7621                           
  7622                           ; BSR set to: 0
  7623                           
  7624                           ; BSR set to: 0
  7625  003F7C  90D8               	bcf	status,0,c
  7626  003F7E  33CB               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7627  003F80  33CA               	rrcf	___awdiv@divisor& (0+255),f,b
  7628                           
  7629                           ; BSR set to: 0
  7630  003F82  2FCC               	decfsz	___awdiv@counter& (0+255),f,b
  7631  003F84  D7ED               	goto	u2680
  7632  003F86                     l1095:
  7633                           
  7634                           ; BSR set to: 0
  7635                           
  7636                           ; BSR set to: 0
  7637                           
  7638                           ; BSR set to: 0
  7639  003F86  51CD               	movf	___awdiv@sign& (0+255),w,b
  7640  003F88  B4D8               	btfsc	status,2,c
  7641  003F8A  D004               	goto	l1096
  7642                           
  7643                           ; BSR set to: 0
  7644  003F8C  6DCE               	negf	___awdiv@quotient& (0+255),b
  7645  003F8E  1FCF               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7646  003F90  B0D8               	btfsc	status,0,c
  7647  003F92  2BCF               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7648  003F94                     l1096:
  7649                           
  7650                           ; BSR set to: 0
  7651                           
  7652                           ; BSR set to: 0
  7653  003F94  C0CE  F0C8         	movff	___awdiv@quotient,?___awdiv
  7654  003F98  C0CF  F0C9         	movff	___awdiv@quotient+1,?___awdiv+1
  7655  003F9C  0012               	return	
  7656  003F9E                     __end_of___awdiv:
  7657                           	opt stack 0
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           intcon	equ	0xFF2
  7665                           intcon3	equ	0xFF0
  7666                           indf0	equ	0xFEF
  7667                           postinc0	equ	0xFEE
  7668                           fsr0h	equ	0xFEA
  7669                           fsr0l	equ	0xFE9
  7670                           wreg	equ	0xFE8
  7671                           postdec1	equ	0xFE5
  7672                           fsr1l	equ	0xFE1
  7673                           indf2	equ	0xFDF
  7674                           postinc2	equ	0xFDE
  7675                           postdec2	equ	0xFDD
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function _I2C_Master_Read *****************
  7681 ;; Defined at:
  7682 ;;		line 120 in file "I2C.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  ackBit          1    wreg     unsigned char 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  ackBit          1    1[BANK0 ] unsigned char 
  7687 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      unsigned char 
  7690 ;; Registers used:
  7691 ;;		wreg, status,2, status,0, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;Total ram usage:        2 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    5
  7704 ;; This function calls:
  7705 ;;		_I2C_Master_Wait
  7706 ;; This function is called by:
  7707 ;;		_main
  7708 ;;		_get_RTC_initial
  7709 ;;		_get_RTC_final
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text15
  7714  00470E                     __ptext15:
  7715                           	opt stack 0
  7716  00470E                     _I2C_Master_Read:
  7717                           	opt stack 24
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;incstack = 0
  7721                           ;I2C_Master_Read@ackBit stored from wreg
  7722  00470E  0100               	movlb	0	; () banked
  7723  004710  6FC9               	movwf	I2C_Master_Read@ackBit& (0+255),b
  7724                           
  7725                           ;I2C.c: 130: unsigned char receivedByte;
  7726                           ;I2C.c: 132: I2C_Master_Wait();
  7727  004712  EC21  F024         	call	_I2C_Master_Wait	;wreg free
  7728                           
  7729                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  7730  004716  86C5               	bsf	4037,3,c	;volatile
  7731                           
  7732                           ;I2C.c: 135: I2C_Master_Wait();
  7733  004718  EC21  F024         	call	_I2C_Master_Wait	;wreg free
  7734                           
  7735                           ;I2C.c: 136: receivedByte = SSPBUF;
  7736  00471C  CFC9 F0CA          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  7737                           
  7738                           ;I2C.c: 138: I2C_Master_Wait();
  7739  004720  EC21  F024         	call	_I2C_Master_Wait	;wreg free
  7740                           
  7741                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  7742  004724  0100               	movlb	0	; () banked
  7743  004726  B1C9               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  7744  004728  D002               	bra	u2605
  7745  00472A  9AC5               	bcf	4037,5,c	;volatile
  7746  00472C  D001               	bra	u2606
  7747  00472E                     u2605:
  7748  00472E  8AC5               	bsf	4037,5,c	;volatile
  7749  004730                     u2606:
  7750                           
  7751                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  7752  004730  88C5               	bsf	4037,4,c	;volatile
  7753                           
  7754                           ;I2C.c: 142: return receivedByte;
  7755  004732  0100               	movlb	0	; () banked
  7756  004734  51CA               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  7757  004736  0012               	return	
  7758  004738                     __end_of_I2C_Master_Read:
  7759                           	opt stack 0
  7760                           tblptru	equ	0xFF8
  7761                           tblptrh	equ	0xFF7
  7762                           tblptrl	equ	0xFF6
  7763                           tablat	equ	0xFF5
  7764                           prodh	equ	0xFF4
  7765                           prodl	equ	0xFF3
  7766                           intcon	equ	0xFF2
  7767                           intcon3	equ	0xFF0
  7768                           indf0	equ	0xFEF
  7769                           postinc0	equ	0xFEE
  7770                           fsr0h	equ	0xFEA
  7771                           fsr0l	equ	0xFE9
  7772                           wreg	equ	0xFE8
  7773                           postdec1	equ	0xFE5
  7774                           fsr1l	equ	0xFE1
  7775                           indf2	equ	0xFDF
  7776                           postinc2	equ	0xFDE
  7777                           postdec2	equ	0xFDD
  7778                           fsr2h	equ	0xFDA
  7779                           fsr2l	equ	0xFD9
  7780                           status	equ	0xFD8
  7781                           
  7782 ;; *************** function _generate_compartment_array *****************
  7783 ;; Defined at:
  7784 ;;		line 220 in file "keypad.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;  step            2    0[BANK0 ] int 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1    wreg      void 
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;Total ram usage:        4 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    4
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_main
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text16
  7813  00384E                     __ptext16:
  7814                           	opt stack 0
  7815  00384E                     _generate_compartment_array:
  7816                           	opt stack 26
  7817                           
  7818                           ;keypad.c: 222: switch(step){
  7819                           
  7820                           ; BSR set to: 0
  7821                           ;incstack = 0
  7822  00384E  D117               	goto	l784
  7823  003850                     
  7824                           ;keypad.c: 224: compartment_array[1] = 1;
  7825  003850  0E00               	movlw	0
  7826  003852  0100               	movlb	0	; () banked
  7827  003854  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7828  003856  0E01               	movlw	1
  7829  003858  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7830                           
  7831                           ;keypad.c: 225: compartment_array[3] = 1;
  7832  00385A  0E00               	movlw	0
  7833  00385C  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7834  00385E  0E01               	movlw	1
  7835  003860  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7836                           
  7837                           ;keypad.c: 226: compartment_array[5] = 1;
  7838  003862  0E00               	movlw	0
  7839  003864  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7840  003866  0E01               	movlw	1
  7841  003868  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7842                           
  7843                           ;keypad.c: 227: compartment_array[7] = 1;
  7844  00386A  0E00               	movlw	0
  7845  00386C  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  7846  00386E  0E01               	movlw	1
  7847  003870  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  7848                           
  7849                           ;keypad.c: 230: compartment_number[0] = 1;
  7850  003872  0E00               	movlw	0
  7851  003874  6E47               	movwf	_compartment_number+1,c
  7852  003876  0E01               	movlw	1
  7853  003878  6E46               	movwf	_compartment_number,c
  7854                           
  7855                           ;keypad.c: 231: compartment_number[1] = 3;
  7856  00387A  0E00               	movlw	0
  7857  00387C  6E49               	movwf	_compartment_number+3,c
  7858  00387E  0E03               	movlw	3
  7859  003880  6E48               	movwf	_compartment_number+2,c
  7860                           
  7861                           ;keypad.c: 232: compartment_number[2] = 5;
  7862  003882  0E00               	movlw	0
  7863  003884  6E4B               	movwf	_compartment_number+5,c
  7864  003886  0E05               	movlw	5
  7865  003888  6E4A               	movwf	_compartment_number+4,c
  7866                           
  7867                           ;keypad.c: 233: compartment_number[3] = 7;
  7868  00388A  0E00               	movlw	0
  7869  00388C  6E4D               	movwf	_compartment_number+7,c
  7870  00388E  0E07               	movlw	7
  7871  003890  6E4C               	movwf	_compartment_number+6,c
  7872                           
  7873                           ;keypad.c: 235: break;
  7874  003892  0012               	return	
  7875  003894                     
  7876                           ; BSR set to: 0
  7877                           ;keypad.c: 237: compartment_array[0] = 1;
  7878                           
  7879                           ; BSR set to: 0
  7880  003894  0E00               	movlw	0
  7881  003896  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7882  003898  0E01               	movlw	1
  7883  00389A  6F80               	movwf	_compartment_array& (0+255),b
  7884                           
  7885                           ;keypad.c: 238: compartment_array[1] = 1;
  7886  00389C  0E00               	movlw	0
  7887  00389E  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7888  0038A0  0E01               	movlw	1
  7889  0038A2  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7890                           
  7891                           ;keypad.c: 239: compartment_array[3] = 1;
  7892  0038A4  0E00               	movlw	0
  7893  0038A6  6F87               	movwf	(_compartment_array+7)& (0+255),b
  7894  0038A8  0E01               	movlw	1
  7895  0038AA  6F86               	movwf	(_compartment_array+6)& (0+255),b
  7896                           
  7897                           ;keypad.c: 240: compartment_array[4] = 1;
  7898  0038AC  0E00               	movlw	0
  7899  0038AE  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7900  0038B0  0E01               	movlw	1
  7901  0038B2  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7902                           
  7903                           ;keypad.c: 241: compartment_array[6] = 1;
  7904  0038B4  0E00               	movlw	0
  7905  0038B6  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7906  0038B8  0E01               	movlw	1
  7907  0038BA  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7908                           
  7909                           ;keypad.c: 245: compartment_number[0] = 0;
  7910  0038BC  0E00               	movlw	0
  7911  0038BE  6E47               	movwf	_compartment_number+1,c
  7912  0038C0  0E00               	movlw	0
  7913  0038C2  6E46               	movwf	_compartment_number,c
  7914                           
  7915                           ;keypad.c: 246: compartment_number[1] = 1;
  7916  0038C4  0E00               	movlw	0
  7917  0038C6  6E49               	movwf	_compartment_number+3,c
  7918  0038C8  0E01               	movlw	1
  7919  0038CA  6E48               	movwf	_compartment_number+2,c
  7920                           
  7921                           ;keypad.c: 247: compartment_number[2] = 3;
  7922  0038CC  0E00               	movlw	0
  7923  0038CE  6E4B               	movwf	_compartment_number+5,c
  7924  0038D0  0E03               	movlw	3
  7925  0038D2  6E4A               	movwf	_compartment_number+4,c
  7926                           
  7927                           ;keypad.c: 248: compartment_number[3] = 4;
  7928  0038D4  0E00               	movlw	0
  7929  0038D6  6E4D               	movwf	_compartment_number+7,c
  7930  0038D8  0E04               	movlw	4
  7931  0038DA  6E4C               	movwf	_compartment_number+6,c
  7932                           
  7933                           ;keypad.c: 249: compartment_number[4] = 6;
  7934  0038DC  0E00               	movlw	0
  7935  0038DE  6E4F               	movwf	_compartment_number+9,c
  7936  0038E0  0E06               	movlw	6
  7937  0038E2  6E4E               	movwf	_compartment_number+8,c
  7938                           
  7939                           ;keypad.c: 251: break;
  7940  0038E4  0012               	return	
  7941  0038E6                     
  7942                           ; BSR set to: 0
  7943                           ;keypad.c: 254: compartment_array[0] = 1;
  7944                           
  7945                           ; BSR set to: 0
  7946  0038E6  0E00               	movlw	0
  7947  0038E8  6F81               	movwf	(_compartment_array+1)& (0+255),b
  7948  0038EA  0E01               	movlw	1
  7949  0038EC  6F80               	movwf	_compartment_array& (0+255),b
  7950                           
  7951                           ;keypad.c: 255: compartment_array[1] = 1;
  7952  0038EE  0E00               	movlw	0
  7953  0038F0  6F83               	movwf	(_compartment_array+3)& (0+255),b
  7954  0038F2  0E01               	movlw	1
  7955  0038F4  6F82               	movwf	(_compartment_array+2)& (0+255),b
  7956                           
  7957                           ;keypad.c: 256: compartment_array[2] = 1;
  7958  0038F6  0E00               	movlw	0
  7959  0038F8  6F85               	movwf	(_compartment_array+5)& (0+255),b
  7960  0038FA  0E01               	movlw	1
  7961  0038FC  6F84               	movwf	(_compartment_array+4)& (0+255),b
  7962                           
  7963                           ;keypad.c: 257: compartment_array[4] = 1;
  7964  0038FE  0E00               	movlw	0
  7965  003900  6F89               	movwf	(_compartment_array+9)& (0+255),b
  7966  003902  0E01               	movlw	1
  7967  003904  6F88               	movwf	(_compartment_array+8)& (0+255),b
  7968                           
  7969                           ;keypad.c: 258: compartment_array[5] = 1;
  7970  003906  0E00               	movlw	0
  7971  003908  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  7972  00390A  0E01               	movlw	1
  7973  00390C  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  7974                           
  7975                           ;keypad.c: 259: compartment_array[6] = 1;
  7976  00390E  0E00               	movlw	0
  7977  003910  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  7978  003912  0E01               	movlw	1
  7979  003914  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  7980                           
  7981                           ;keypad.c: 262: compartment_number[0] = 0;
  7982  003916  0E00               	movlw	0
  7983  003918  6E47               	movwf	_compartment_number+1,c
  7984  00391A  0E00               	movlw	0
  7985  00391C  6E46               	movwf	_compartment_number,c
  7986                           
  7987                           ;keypad.c: 263: compartment_number[1] = 1;
  7988  00391E  0E00               	movlw	0
  7989  003920  6E49               	movwf	_compartment_number+3,c
  7990  003922  0E01               	movlw	1
  7991  003924  6E48               	movwf	_compartment_number+2,c
  7992                           
  7993                           ;keypad.c: 264: compartment_number[2] = 2;
  7994  003926  0E00               	movlw	0
  7995  003928  6E4B               	movwf	_compartment_number+5,c
  7996  00392A  0E02               	movlw	2
  7997  00392C  6E4A               	movwf	_compartment_number+4,c
  7998                           
  7999                           ;keypad.c: 265: compartment_number[3] = 4;
  8000  00392E  0E00               	movlw	0
  8001  003930  6E4D               	movwf	_compartment_number+7,c
  8002  003932  0E04               	movlw	4
  8003  003934  6E4C               	movwf	_compartment_number+6,c
  8004                           
  8005                           ;keypad.c: 266: compartment_number[4] = 5;
  8006  003936  0E00               	movlw	0
  8007  003938  6E4F               	movwf	_compartment_number+9,c
  8008  00393A  0E05               	movlw	5
  8009  00393C  6E4E               	movwf	_compartment_number+8,c
  8010                           
  8011                           ;keypad.c: 267: compartment_number[5] = 6;
  8012  00393E  0E00               	movlw	0
  8013  003940  6E51               	movwf	_compartment_number+11,c
  8014  003942  0E06               	movlw	6
  8015  003944  6E50               	movwf	_compartment_number+10,c
  8016                           
  8017                           ;keypad.c: 269: break;
  8018  003946  0012               	return	
  8019  003948                     
  8020                           ; BSR set to: 0
  8021                           ;keypad.c: 271: compartment_array[0] = 1;
  8022                           
  8023                           ; BSR set to: 0
  8024  003948  0E00               	movlw	0
  8025  00394A  6F81               	movwf	(_compartment_array+1)& (0+255),b
  8026  00394C  0E01               	movlw	1
  8027  00394E  6F80               	movwf	_compartment_array& (0+255),b
  8028                           
  8029                           ;keypad.c: 272: compartment_array[1] = 1;
  8030  003950  0E00               	movlw	0
  8031  003952  6F83               	movwf	(_compartment_array+3)& (0+255),b
  8032  003954  0E01               	movlw	1
  8033  003956  6F82               	movwf	(_compartment_array+2)& (0+255),b
  8034                           
  8035                           ;keypad.c: 273: compartment_array[2] = 1;
  8036  003958  0E00               	movlw	0
  8037  00395A  6F85               	movwf	(_compartment_array+5)& (0+255),b
  8038  00395C  0E01               	movlw	1
  8039  00395E  6F84               	movwf	(_compartment_array+4)& (0+255),b
  8040                           
  8041                           ;keypad.c: 274: compartment_array[3] = 1;
  8042  003960  0E00               	movlw	0
  8043  003962  6F87               	movwf	(_compartment_array+7)& (0+255),b
  8044  003964  0E01               	movlw	1
  8045  003966  6F86               	movwf	(_compartment_array+6)& (0+255),b
  8046                           
  8047                           ;keypad.c: 275: compartment_array[4] = 1;
  8048  003968  0E00               	movlw	0
  8049  00396A  6F89               	movwf	(_compartment_array+9)& (0+255),b
  8050  00396C  0E01               	movlw	1
  8051  00396E  6F88               	movwf	(_compartment_array+8)& (0+255),b
  8052                           
  8053                           ;keypad.c: 276: compartment_array[5] = 1;
  8054  003970  0E00               	movlw	0
  8055  003972  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  8056  003974  0E01               	movlw	1
  8057  003976  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  8058                           
  8059                           ;keypad.c: 277: compartment_array[6] = 1;
  8060  003978  0E00               	movlw	0
  8061  00397A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  8062  00397C  0E01               	movlw	1
  8063  00397E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  8064                           
  8065                           ;keypad.c: 280: compartment_number[0] = 0;
  8066  003980  0E00               	movlw	0
  8067  003982  6E47               	movwf	_compartment_number+1,c
  8068  003984  0E00               	movlw	0
  8069  003986  6E46               	movwf	_compartment_number,c
  8070                           
  8071                           ;keypad.c: 281: compartment_number[1] = 1;
  8072  003988  0E00               	movlw	0
  8073  00398A  6E49               	movwf	_compartment_number+3,c
  8074  00398C  0E01               	movlw	1
  8075  00398E  6E48               	movwf	_compartment_number+2,c
  8076                           
  8077                           ;keypad.c: 282: compartment_number[2] = 2;
  8078  003990  0E00               	movlw	0
  8079  003992  6E4B               	movwf	_compartment_number+5,c
  8080  003994  0E02               	movlw	2
  8081  003996  6E4A               	movwf	_compartment_number+4,c
  8082                           
  8083                           ;keypad.c: 283: compartment_number[3] = 3;
  8084  003998  0E00               	movlw	0
  8085  00399A  6E4D               	movwf	_compartment_number+7,c
  8086  00399C  0E03               	movlw	3
  8087  00399E  6E4C               	movwf	_compartment_number+6,c
  8088                           
  8089                           ;keypad.c: 284: compartment_number[4] = 4;
  8090  0039A0  0E00               	movlw	0
  8091  0039A2  6E4F               	movwf	_compartment_number+9,c
  8092  0039A4  0E04               	movlw	4
  8093  0039A6  6E4E               	movwf	_compartment_number+8,c
  8094                           
  8095                           ;keypad.c: 285: compartment_number[5] = 5;
  8096  0039A8  0E00               	movlw	0
  8097  0039AA  6E51               	movwf	_compartment_number+11,c
  8098  0039AC  0E05               	movlw	5
  8099  0039AE  6E50               	movwf	_compartment_number+10,c
  8100                           
  8101                           ;keypad.c: 286: compartment_number[6] = 6;
  8102  0039B0  0E00               	movlw	0
  8103  0039B2  6E53               	movwf	_compartment_number+13,c
  8104  0039B4  0E06               	movlw	6
  8105  0039B6  6E52               	movwf	_compartment_number+12,c
  8106                           
  8107                           ;keypad.c: 288: break;
  8108  0039B8  0012               	return	
  8109  0039BA                     
  8110                           ; BSR set to: 0
  8111                           ;keypad.c: 290: compartment_array[0] = 1;
  8112                           
  8113                           ; BSR set to: 0
  8114  0039BA  0E00               	movlw	0
  8115  0039BC  6F81               	movwf	(_compartment_array+1)& (0+255),b
  8116  0039BE  0E01               	movlw	1
  8117  0039C0  6F80               	movwf	_compartment_array& (0+255),b
  8118                           
  8119                           ;keypad.c: 291: compartment_array[1] = 1;
  8120  0039C2  0E00               	movlw	0
  8121  0039C4  6F83               	movwf	(_compartment_array+3)& (0+255),b
  8122  0039C6  0E01               	movlw	1
  8123  0039C8  6F82               	movwf	(_compartment_array+2)& (0+255),b
  8124                           
  8125                           ;keypad.c: 292: compartment_array[2] = 1;
  8126  0039CA  0E00               	movlw	0
  8127  0039CC  6F85               	movwf	(_compartment_array+5)& (0+255),b
  8128  0039CE  0E01               	movlw	1
  8129  0039D0  6F84               	movwf	(_compartment_array+4)& (0+255),b
  8130                           
  8131                           ;keypad.c: 293: compartment_array[3] = 1;
  8132  0039D2  0E00               	movlw	0
  8133  0039D4  6F87               	movwf	(_compartment_array+7)& (0+255),b
  8134  0039D6  0E01               	movlw	1
  8135  0039D8  6F86               	movwf	(_compartment_array+6)& (0+255),b
  8136                           
  8137                           ;keypad.c: 294: compartment_array[4] = 1;
  8138  0039DA  0E00               	movlw	0
  8139  0039DC  6F89               	movwf	(_compartment_array+9)& (0+255),b
  8140  0039DE  0E01               	movlw	1
  8141  0039E0  6F88               	movwf	(_compartment_array+8)& (0+255),b
  8142                           
  8143                           ;keypad.c: 295: compartment_array[5] = 1;
  8144  0039E2  0E00               	movlw	0
  8145  0039E4  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  8146  0039E6  0E01               	movlw	1
  8147  0039E8  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  8148                           
  8149                           ;keypad.c: 296: compartment_array[6] = 1;
  8150  0039EA  0E00               	movlw	0
  8151  0039EC  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  8152  0039EE  0E01               	movlw	1
  8153  0039F0  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  8154                           
  8155                           ;keypad.c: 297: compartment_array[7] = 1;
  8156  0039F2  0E00               	movlw	0
  8157  0039F4  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  8158  0039F6  0E01               	movlw	1
  8159  0039F8  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  8160                           
  8161                           ;keypad.c: 300: compartment_number[0] = 0;
  8162  0039FA  0E00               	movlw	0
  8163  0039FC  6E47               	movwf	_compartment_number+1,c
  8164  0039FE  0E00               	movlw	0
  8165  003A00  6E46               	movwf	_compartment_number,c
  8166                           
  8167                           ;keypad.c: 301: compartment_number[1] = 1;
  8168  003A02  0E00               	movlw	0
  8169  003A04  6E49               	movwf	_compartment_number+3,c
  8170  003A06  0E01               	movlw	1
  8171  003A08  6E48               	movwf	_compartment_number+2,c
  8172                           
  8173                           ;keypad.c: 302: compartment_number[2] = 2;
  8174  003A0A  0E00               	movlw	0
  8175  003A0C  6E4B               	movwf	_compartment_number+5,c
  8176  003A0E  0E02               	movlw	2
  8177  003A10  6E4A               	movwf	_compartment_number+4,c
  8178                           
  8179                           ;keypad.c: 303: compartment_number[3] = 3;
  8180  003A12  0E00               	movlw	0
  8181  003A14  6E4D               	movwf	_compartment_number+7,c
  8182  003A16  0E03               	movlw	3
  8183  003A18  6E4C               	movwf	_compartment_number+6,c
  8184                           
  8185                           ;keypad.c: 304: compartment_number[4] = 4;
  8186  003A1A  0E00               	movlw	0
  8187  003A1C  6E4F               	movwf	_compartment_number+9,c
  8188  003A1E  0E04               	movlw	4
  8189  003A20  6E4E               	movwf	_compartment_number+8,c
  8190                           
  8191                           ;keypad.c: 305: compartment_number[5] = 5;
  8192  003A22  0E00               	movlw	0
  8193  003A24  6E51               	movwf	_compartment_number+11,c
  8194  003A26  0E05               	movlw	5
  8195  003A28  6E50               	movwf	_compartment_number+10,c
  8196                           
  8197                           ;keypad.c: 306: compartment_number[6] = 6;
  8198  003A2A  0E00               	movlw	0
  8199  003A2C  6E53               	movwf	_compartment_number+13,c
  8200  003A2E  0E06               	movlw	6
  8201  003A30  6E52               	movwf	_compartment_number+12,c
  8202                           
  8203                           ;keypad.c: 307: compartment_number[7] = 7;
  8204  003A32  0E00               	movlw	0
  8205  003A34  6E55               	movwf	_compartment_number+15,c
  8206  003A36  0E07               	movlw	7
  8207  003A38  6E54               	movwf	_compartment_number+14,c
  8208                           
  8209                           ;keypad.c: 309: break;
  8210  003A3A  0012               	return	
  8211  003A3C                     
  8212                           ; BSR set to: 0
  8213                           ;keypad.c: 311: compartment_array[0] = 0;
  8214                           
  8215                           ; BSR set to: 0
  8216  003A3C  0E00               	movlw	0
  8217  003A3E  6F81               	movwf	(_compartment_array+1)& (0+255),b
  8218  003A40  0E00               	movlw	0
  8219  003A42  6F80               	movwf	_compartment_array& (0+255),b
  8220                           
  8221                           ;keypad.c: 312: compartment_array[1] = 0;
  8222  003A44  0E00               	movlw	0
  8223  003A46  6F83               	movwf	(_compartment_array+3)& (0+255),b
  8224  003A48  0E00               	movlw	0
  8225  003A4A  6F82               	movwf	(_compartment_array+2)& (0+255),b
  8226                           
  8227                           ;keypad.c: 313: compartment_array[2] = 0;
  8228  003A4C  0E00               	movlw	0
  8229  003A4E  6F85               	movwf	(_compartment_array+5)& (0+255),b
  8230  003A50  0E00               	movlw	0
  8231  003A52  6F84               	movwf	(_compartment_array+4)& (0+255),b
  8232                           
  8233                           ;keypad.c: 314: compartment_array[3] = 0;
  8234  003A54  0E00               	movlw	0
  8235  003A56  6F87               	movwf	(_compartment_array+7)& (0+255),b
  8236  003A58  0E00               	movlw	0
  8237  003A5A  6F86               	movwf	(_compartment_array+6)& (0+255),b
  8238                           
  8239                           ;keypad.c: 315: compartment_array[4] = 0;
  8240  003A5C  0E00               	movlw	0
  8241  003A5E  6F89               	movwf	(_compartment_array+9)& (0+255),b
  8242  003A60  0E00               	movlw	0
  8243  003A62  6F88               	movwf	(_compartment_array+8)& (0+255),b
  8244                           
  8245                           ;keypad.c: 316: compartment_array[5] = 0;
  8246  003A64  0E00               	movlw	0
  8247  003A66  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  8248  003A68  0E00               	movlw	0
  8249  003A6A  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  8250                           
  8251                           ;keypad.c: 317: compartment_array[6] = 0;
  8252  003A6C  0E00               	movlw	0
  8253  003A6E  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  8254  003A70  0E00               	movlw	0
  8255  003A72  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  8256                           
  8257                           ;keypad.c: 318: compartment_array[7] = 0;
  8258  003A74  0E00               	movlw	0
  8259  003A76  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  8260  003A78  0E00               	movlw	0
  8261  003A7A  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  8262                           
  8263                           ;keypad.c: 320: }
  8264  003A7C  0012               	return	
  8265  003A7E                     l784:
  8266                           
  8267                           ; BSR set to: 0
  8268  003A7E  C0C8  F0CA         	movff	generate_compartment_array@step,??_generate_compartment_array
  8269  003A82  C0C9  F0CB         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
  8270                           
  8271                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8272                           ; Switch size 1, requested type "space"
  8273                           ; Number of cases is 1, Range of values is 0 to 0
  8274                           ; switch strategies available:
  8275                           ; Name         Instructions Cycles
  8276                           ; simple_byte            4     3 (average)
  8277                           ;	Chosen strategy is simple_byte
  8278  003A86  0100               	movlb	0	; () banked
  8279  003A88  51CB               	movf	(??_generate_compartment_array+1)& (0+255),w,b
  8280  003A8A  0A00               	xorlw	0	; case 0
  8281  003A8C  A4D8               	btfss	status,2,c
  8282  003A8E  D7D6               	goto	l791
  8283                           
  8284                           ; BSR set to: 0
  8285                           ; Switch size 1, requested type "space"
  8286                           ; Number of cases is 5, Range of values is 4 to 8
  8287                           ; switch strategies available:
  8288                           ; Name         Instructions Cycles
  8289                           ; simple_byte           16     9 (average)
  8290                           ;	Chosen strategy is simple_byte
  8291  003A90  51CA               	movf	??_generate_compartment_array& (0+255),w,b
  8292  003A92  0A04               	xorlw	4	; case 4
  8293  003A94  B4D8               	btfsc	status,2,c
  8294  003A96  D6DC               	goto	l785
  8295  003A98  0A01               	xorlw	1	; case 5
  8296  003A9A  B4D8               	btfsc	status,2,c
  8297  003A9C  D6FB               	goto	l787
  8298  003A9E  0A03               	xorlw	3	; case 6
  8299  003AA0  B4D8               	btfsc	status,2,c
  8300  003AA2  D721               	goto	l788
  8301  003AA4  0A01               	xorlw	1	; case 7
  8302  003AA6  B4D8               	btfsc	status,2,c
  8303  003AA8  D74F               	goto	l789
  8304  003AAA  0A0F               	xorlw	15	; case 8
  8305  003AAC  B4D8               	btfsc	status,2,c
  8306  003AAE  D785               	goto	l790
  8307  003AB0  D7C5               	goto	l791
  8308  003AB2                     __end_of_generate_compartment_array:
  8309                           	opt stack 0
  8310                           tblptru	equ	0xFF8
  8311                           tblptrh	equ	0xFF7
  8312                           tblptrl	equ	0xFF6
  8313                           tablat	equ	0xFF5
  8314                           prodh	equ	0xFF4
  8315                           prodl	equ	0xFF3
  8316                           intcon	equ	0xFF2
  8317                           intcon3	equ	0xFF0
  8318                           indf0	equ	0xFEF
  8319                           postinc0	equ	0xFEE
  8320                           fsr0h	equ	0xFEA
  8321                           fsr0l	equ	0xFE9
  8322                           wreg	equ	0xFE8
  8323                           postdec1	equ	0xFE5
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           fsr2h	equ	0xFDA
  8329                           fsr2l	equ	0xFD9
  8330                           status	equ	0xFD8
  8331                           
  8332 ;; *************** function _I2C_sendData *****************
  8333 ;; Defined at:
  8334 ;;		line 1377 in file "main.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  char_data       1    wreg     unsigned char 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  char_data       1    3[BANK0 ] unsigned char 
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      void 
  8341 ;; Registers used:
  8342 ;;		wreg, status,2, status,0, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;Total ram usage:        1 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    6
  8355 ;; This function calls:
  8356 ;;		_I2C_Master_Start
  8357 ;;		_I2C_Master_Stop
  8358 ;;		_I2C_Master_Write
  8359 ;; This function is called by:
  8360 ;;		_main
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text17
  8365  004760                     __ptext17:
  8366                           	opt stack 0
  8367  004760                     _I2C_sendData:
  8368                           	opt stack 24
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;incstack = 0
  8372                           ;I2C_sendData@char_data stored from wreg
  8373  004760  0100               	movlb	0	; () banked
  8374  004762  6FCB               	movwf	I2C_sendData@char_data& (0+255),b
  8375                           
  8376                           ;main.c: 1378: I2C_Master_Start();
  8377  004764  EC63  F024         	call	_I2C_Master_Start	;wreg free
  8378                           
  8379                           ;main.c: 1379: I2C_Master_Write(0b00010000);
  8380  004768  0E00               	movlw	0
  8381  00476A  0100               	movlb	0	; () banked
  8382  00476C  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  8383  00476E  0E10               	movlw	16
  8384  004770  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  8385  004772  EC55  F024         	call	_I2C_Master_Write	;wreg free
  8386                           
  8387                           ;main.c: 1380: I2C_Master_Write(char_data);
  8388  004776  C0CB  F0C9         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  8389  00477A  0100               	movlb	0	; () banked
  8390  00477C  6BCA               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  8391  00477E  EC55  F024         	call	_I2C_Master_Write	;wreg free
  8392                           
  8393                           ;main.c: 1381: I2C_Master_Stop();
  8394  004782  EC5F  F024         	call	_I2C_Master_Stop	;wreg free
  8395  004786  0012               	return		;funcret
  8396  004788                     __end_of_I2C_sendData:
  8397                           	opt stack 0
  8398                           tblptru	equ	0xFF8
  8399                           tblptrh	equ	0xFF7
  8400                           tblptrl	equ	0xFF6
  8401                           tablat	equ	0xFF5
  8402                           prodh	equ	0xFF4
  8403                           prodl	equ	0xFF3
  8404                           intcon	equ	0xFF2
  8405                           intcon3	equ	0xFF0
  8406                           indf0	equ	0xFEF
  8407                           postinc0	equ	0xFEE
  8408                           fsr0h	equ	0xFEA
  8409                           fsr0l	equ	0xFE9
  8410                           wreg	equ	0xFE8
  8411                           postdec1	equ	0xFE5
  8412                           fsr1l	equ	0xFE1
  8413                           indf2	equ	0xFDF
  8414                           postinc2	equ	0xFDE
  8415                           postdec2	equ	0xFDD
  8416                           fsr2h	equ	0xFDA
  8417                           fsr2l	equ	0xFD9
  8418                           status	equ	0xFD8
  8419                           
  8420 ;; *************** function _I2C_Master_Write *****************
  8421 ;; Defined at:
  8422 ;;		line 108 in file "I2C.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;		None
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  1    wreg      void 
  8429 ;; Registers used:
  8430 ;;		wreg, status,2, status,0, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8436 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;Total ram usage:        2 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    5
  8443 ;; This function calls:
  8444 ;;		_I2C_Master_Wait
  8445 ;; This function is called by:
  8446 ;;		_main
  8447 ;;		_get_RTC_initial
  8448 ;;		_get_RTC_final
  8449 ;;		_I2C_sendData
  8450 ;;		_initRamp
  8451 ;;		_ramp_Rotate
  8452 ;;		_RTC_setTime
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           	psect	text18
  8457  0048AA                     __ptext18:
  8458                           	opt stack 0
  8459  0048AA                     _I2C_Master_Write:
  8460                           	opt stack 24
  8461                           
  8462                           ;I2C.c: 116: I2C_Master_Wait();
  8463                           
  8464                           ;incstack = 0
  8465  0048AA  EC21  F024         	call	_I2C_Master_Wait	;wreg free
  8466                           
  8467                           ;I2C.c: 117: SSPBUF = byteToWrite;
  8468  0048AE  C0C9  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  8469  0048B2  0012               	return		;funcret
  8470  0048B4                     __end_of_I2C_Master_Write:
  8471                           	opt stack 0
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           intcon3	equ	0xFF0
  8480                           indf0	equ	0xFEF
  8481                           postinc0	equ	0xFEE
  8482                           fsr0h	equ	0xFEA
  8483                           fsr0l	equ	0xFE9
  8484                           wreg	equ	0xFE8
  8485                           postdec1	equ	0xFE5
  8486                           fsr1l	equ	0xFE1
  8487                           indf2	equ	0xFDF
  8488                           postinc2	equ	0xFDE
  8489                           postdec2	equ	0xFDD
  8490                           fsr2h	equ	0xFDA
  8491                           fsr2l	equ	0xFD9
  8492                           status	equ	0xFD8
  8493                           
  8494 ;; *************** function _I2C_Master_Stop *****************
  8495 ;; Defined at:
  8496 ;;		line 95 in file "I2C.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;		None
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;		None
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, status,2, status,0, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;Total ram usage:        0 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:    5
  8517 ;; This function calls:
  8518 ;;		_I2C_Master_Wait
  8519 ;; This function is called by:
  8520 ;;		_main
  8521 ;;		_get_RTC_initial
  8522 ;;		_get_RTC_final
  8523 ;;		_I2C_sendData
  8524 ;;		_initRamp
  8525 ;;		_ramp_Rotate
  8526 ;;		_RTC_setTime
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text19
  8531  0048BE                     __ptext19:
  8532                           	opt stack 0
  8533  0048BE                     _I2C_Master_Stop:
  8534                           	opt stack 24
  8535                           
  8536                           ;I2C.c: 104: I2C_Master_Wait();
  8537                           
  8538                           ;incstack = 0
  8539  0048BE  EC21  F024         	call	_I2C_Master_Wait	;wreg free
  8540                           
  8541                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  8542  0048C2  84C5               	bsf	4037,2,c	;volatile
  8543  0048C4  0012               	return		;funcret
  8544  0048C6                     __end_of_I2C_Master_Stop:
  8545                           	opt stack 0
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           intcon3	equ	0xFF0
  8554                           indf0	equ	0xFEF
  8555                           postinc0	equ	0xFEE
  8556                           fsr0h	equ	0xFEA
  8557                           fsr0l	equ	0xFE9
  8558                           wreg	equ	0xFE8
  8559                           postdec1	equ	0xFE5
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           fsr2h	equ	0xFDA
  8565                           fsr2l	equ	0xFD9
  8566                           status	equ	0xFD8
  8567                           
  8568 ;; *************** function _I2C_Master_Start *****************
  8569 ;; Defined at:
  8570 ;;		line 69 in file "I2C.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;		None
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;		None
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  1    wreg      void 
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0, cstack
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;Total ram usage:        0 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    5
  8591 ;; This function calls:
  8592 ;;		_I2C_Master_Wait
  8593 ;; This function is called by:
  8594 ;;		_main
  8595 ;;		_get_RTC_initial
  8596 ;;		_get_RTC_final
  8597 ;;		_I2C_sendData
  8598 ;;		_initRamp
  8599 ;;		_ramp_Rotate
  8600 ;;		_RTC_setTime
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           	psect	text20
  8605  0048C6                     __ptext20:
  8606                           	opt stack 0
  8607  0048C6                     _I2C_Master_Start:
  8608                           	opt stack 24
  8609                           
  8610                           ;I2C.c: 78: I2C_Master_Wait();
  8611                           
  8612                           ;incstack = 0
  8613  0048C6  EC21  F024         	call	_I2C_Master_Wait	;wreg free
  8614                           
  8615                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  8616  0048CA  80C5               	bsf	4037,0,c	;volatile
  8617  0048CC  0012               	return		;funcret
  8618  0048CE                     __end_of_I2C_Master_Start:
  8619                           	opt stack 0
  8620                           tblptru	equ	0xFF8
  8621                           tblptrh	equ	0xFF7
  8622                           tblptrl	equ	0xFF6
  8623                           tablat	equ	0xFF5
  8624                           prodh	equ	0xFF4
  8625                           prodl	equ	0xFF3
  8626                           intcon	equ	0xFF2
  8627                           intcon3	equ	0xFF0
  8628                           indf0	equ	0xFEF
  8629                           postinc0	equ	0xFEE
  8630                           fsr0h	equ	0xFEA
  8631                           fsr0l	equ	0xFE9
  8632                           wreg	equ	0xFE8
  8633                           postdec1	equ	0xFE5
  8634                           fsr1l	equ	0xFE1
  8635                           indf2	equ	0xFDF
  8636                           postinc2	equ	0xFDE
  8637                           postdec2	equ	0xFDD
  8638                           fsr2h	equ	0xFDA
  8639                           fsr2l	equ	0xFD9
  8640                           status	equ	0xFD8
  8641                           
  8642 ;; *************** function _I2C_Master_Wait *****************
  8643 ;; Defined at:
  8644 ;;		line 51 in file "I2C.c"
  8645 ;; Parameters:    Size  Location     Type
  8646 ;;		None
  8647 ;; Auto vars:     Size  Location     Type
  8648 ;;		None
  8649 ;; Return value:  Size  Location     Type
  8650 ;;                  1    wreg      void 
  8651 ;; Registers used:
  8652 ;;		wreg, status,2, status,0
  8653 ;; Tracked objects:
  8654 ;;		On entry : 0/0
  8655 ;;		On exit  : 0/0
  8656 ;;		Unchanged: 0/0
  8657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8662 ;;Total ram usage:        1 bytes
  8663 ;; Hardware stack levels used:    1
  8664 ;; Hardware stack levels required when called:    4
  8665 ;; This function calls:
  8666 ;;		Nothing
  8667 ;; This function is called by:
  8668 ;;		_I2C_Master_Start
  8669 ;;		_I2C_Master_Stop
  8670 ;;		_I2C_Master_Write
  8671 ;;		_I2C_Master_Read
  8672 ;;		_I2C_Master_RepeatedStart
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           	psect	text21
  8677  004842                     __ptext21:
  8678                           	opt stack 0
  8679  004842                     _I2C_Master_Wait:
  8680                           	opt stack 24
  8681                           
  8682                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  8683                           
  8684                           ;incstack = 0
  8685  004842  B4C7               	btfsc	4039,2,c	;volatile
  8686  004844  D7FE               	goto	_I2C_Master_Wait
  8687  004846  CFC5 F0C8          	movff	4037,??_I2C_Master_Wait	;volatile
  8688  00484A  0E1F               	movlw	31
  8689  00484C  0100               	movlb	0	; () banked
  8690  00484E  17C8               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8691  004850  B4D8               	btfsc	status,2,c
  8692  004852  0012               	return	
  8693  004854  D7F6               	goto	_I2C_Master_Wait
  8694  004856                     __end_of_I2C_Master_Wait:
  8695                           	opt stack 0
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           intcon3	equ	0xFF0
  8704                           indf0	equ	0xFEF
  8705                           postinc0	equ	0xFEE
  8706                           fsr0h	equ	0xFEA
  8707                           fsr0l	equ	0xFE9
  8708                           wreg	equ	0xFE8
  8709                           postdec1	equ	0xFE5
  8710                           fsr1l	equ	0xFE1
  8711                           indf2	equ	0xFDF
  8712                           postinc2	equ	0xFDE
  8713                           postdec2	equ	0xFDD
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _I2C_Master_Init *****************
  8719 ;; Defined at:
  8720 ;;		line 14 in file "I2C.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      void 
  8727 ;; Registers used:
  8728 ;;		wreg, status,2, status,0, cstack
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;Total ram usage:        8 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    5
  8741 ;; This function calls:
  8742 ;;		___lldiv
  8743 ;; This function is called by:
  8744 ;;		_main
  8745 ;;		_initRamp
  8746 ;;		_ramp_Rotate
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text22
  8751  004382                     __ptext22:
  8752                           	opt stack 0
  8753  004382                     _I2C_Master_Init:
  8754                           	opt stack 25
  8755                           
  8756                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  8757                           
  8758                           ; BSR set to: 0
  8759                           ;incstack = 0
  8760  004382  9AC6               	bcf	4038,5,c	;volatile
  8761                           
  8762                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  8763  004384  8694               	bsf	3988,3,c	;volatile
  8764                           
  8765                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  8766  004386  8894               	bsf	3988,4,c	;volatile
  8767                           
  8768                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  8769  004388  0E80               	movlw	128
  8770  00438A  6EC7               	movwf	4039,c	;volatile
  8771                           
  8772                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  8773  00438C  0E28               	movlw	40
  8774  00438E  6EC6               	movwf	4038,c	;volatile
  8775                           
  8776                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  8777  004390  0E00               	movlw	0
  8778  004392  6EC5               	movwf	4037,c	;volatile
  8779                           
  8780                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  8781  004394  0E00               	movlw	0
  8782  004396  0100               	movlb	0	; () banked
  8783  004398  6FC8               	movwf	___lldiv@dividend& (0+255),b
  8784  00439A  0E5A               	movlw	90
  8785  00439C  6FC9               	movwf	(___lldiv@dividend+1)& (0+255),b
  8786  00439E  0E62               	movlw	98
  8787  0043A0  6FCA               	movwf	(___lldiv@dividend+2)& (0+255),b
  8788  0043A2  0E02               	movlw	2
  8789  0043A4  6FCB               	movwf	(___lldiv@dividend+3)& (0+255),b
  8790  0043A6  C0D5  F0D9         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  8791  0043AA  C0D6  F0DA         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  8792  0043AE  C0D7  F0DB         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  8793  0043B2  C0D8  F0DC         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  8794  0043B6  0E02               	movlw	2
  8795  0043B8                     u3255:
  8796  0043B8  90D8               	bcf	status,0,c
  8797  0043BA  37D9               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8798  0043BC  37DA               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8799  0043BE  37DB               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8800  0043C0  37DC               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8801  0043C2  2EE8               	decfsz	wreg,f,c
  8802  0043C4  D7F9               	goto	u3255
  8803  0043C6  C0D9  F0CC         	movff	??_I2C_Master_Init,___lldiv@divisor
  8804  0043CA  C0DA  F0CD         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8805  0043CE  C0DB  F0CE         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8806  0043D2  C0DC  F0CF         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8807  0043D6  EC55  F020         	call	___lldiv	;wreg free
  8808  0043DA  0100               	movlb	0	; () banked
  8809  0043DC  05C8               	decf	?___lldiv& (0+255),w,b
  8810  0043DE  6EC8               	movwf	4040,c	;volatile
  8811                           
  8812                           ; BSR set to: 0
  8813  0043E0  0012               	return		;funcret
  8814  0043E2                     __end_of_I2C_Master_Init:
  8815                           	opt stack 0
  8816                           tblptru	equ	0xFF8
  8817                           tblptrh	equ	0xFF7
  8818                           tblptrl	equ	0xFF6
  8819                           tablat	equ	0xFF5
  8820                           prodh	equ	0xFF4
  8821                           prodl	equ	0xFF3
  8822                           intcon	equ	0xFF2
  8823                           intcon3	equ	0xFF0
  8824                           indf0	equ	0xFEF
  8825                           postinc0	equ	0xFEE
  8826                           fsr0h	equ	0xFEA
  8827                           fsr0l	equ	0xFE9
  8828                           wreg	equ	0xFE8
  8829                           postdec1	equ	0xFE5
  8830                           fsr1l	equ	0xFE1
  8831                           indf2	equ	0xFDF
  8832                           postinc2	equ	0xFDE
  8833                           postdec2	equ	0xFDD
  8834                           fsr2h	equ	0xFDA
  8835                           fsr2l	equ	0xFD9
  8836                           status	equ	0xFD8
  8837                           
  8838 ;; *************** function ___lldiv *****************
  8839 ;; Defined at:
  8840 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;  dividend        4    0[BANK0 ] unsigned long 
  8843 ;;  divisor         4    4[BANK0 ] unsigned long 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  quotient        4    8[BANK0 ] unsigned long 
  8846 ;;  counter         1   12[BANK0 ] unsigned char 
  8847 ;; Return value:  Size  Location     Type
  8848 ;;                  4    0[BANK0 ] unsigned long 
  8849 ;; Registers used:
  8850 ;;		wreg, status,2, status,0
  8851 ;; Tracked objects:
  8852 ;;		On entry : 0/0
  8853 ;;		On exit  : 0/0
  8854 ;;		Unchanged: 0/0
  8855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8856 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8859 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;Total ram usage:       13 bytes
  8861 ;; Hardware stack levels used:    1
  8862 ;; Hardware stack levels required when called:    4
  8863 ;; This function calls:
  8864 ;;		Nothing
  8865 ;; This function is called by:
  8866 ;;		_I2C_Master_Init
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           	psect	text23
  8871  0040AA                     __ptext23:
  8872                           	opt stack 0
  8873  0040AA                     ___lldiv:
  8874                           	opt stack 25
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;incstack = 0
  8878  0040AA  0E00               	movlw	0
  8879  0040AC  0100               	movlb	0	; () banked
  8880  0040AE  6FD0               	movwf	___lldiv@quotient& (0+255),b
  8881  0040B0  0E00               	movlw	0
  8882  0040B2  6FD1               	movwf	(___lldiv@quotient+1)& (0+255),b
  8883  0040B4  0E00               	movlw	0
  8884  0040B6  6FD2               	movwf	(___lldiv@quotient+2)& (0+255),b
  8885  0040B8  0E00               	movlw	0
  8886  0040BA  6FD3               	movwf	(___lldiv@quotient+3)& (0+255),b
  8887                           
  8888                           ; BSR set to: 0
  8889  0040BC  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8890  0040BE  11CD               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8891  0040C0  11CE               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8892  0040C2  11CF               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8893  0040C4  B4D8               	btfsc	status,2,c
  8894  0040C6  D02A               	goto	l1280
  8895                           
  8896                           ; BSR set to: 0
  8897  0040C8  0E01               	movlw	1
  8898  0040CA  6FD4               	movwf	___lldiv@counter& (0+255),b
  8899  0040CC  D006               	goto	l1275
  8900  0040CE                     
  8901                           ; BSR set to: 0
  8902                           
  8903                           ; BSR set to: 0
  8904  0040CE  90D8               	bcf	status,0,c
  8905  0040D0  37CC               	rlcf	___lldiv@divisor& (0+255),f,b
  8906  0040D2  37CD               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8907  0040D4  37CE               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8908  0040D6  37CF               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8909  0040D8  2BD4               	incf	___lldiv@counter& (0+255),f,b
  8910  0040DA                     l1275:
  8911                           
  8912                           ; BSR set to: 0
  8913                           
  8914                           ; BSR set to: 0
  8915  0040DA  AFCF               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8916  0040DC  D7F8               	goto	l1276
  8917  0040DE                     u2720:
  8918                           
  8919                           ; BSR set to: 0
  8920                           
  8921                           ; BSR set to: 0
  8922                           
  8923                           ; BSR set to: 0
  8924  0040DE  90D8               	bcf	status,0,c
  8925  0040E0  37D0               	rlcf	___lldiv@quotient& (0+255),f,b
  8926  0040E2  37D1               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8927  0040E4  37D2               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8928  0040E6  37D3               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8929                           
  8930                           ; BSR set to: 0
  8931  0040E8  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8932  0040EA  5DC8               	subwf	___lldiv@dividend& (0+255),w,b
  8933  0040EC  51CD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8934  0040EE  59C9               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8935  0040F0  51CE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8936  0040F2  59CA               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8937  0040F4  51CF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8938  0040F6  59CB               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8939  0040F8  A0D8               	btfss	status,0,c
  8940  0040FA  D009               	goto	l1279
  8941                           
  8942                           ; BSR set to: 0
  8943  0040FC  51CC               	movf	___lldiv@divisor& (0+255),w,b
  8944  0040FE  5FC8               	subwf	___lldiv@dividend& (0+255),f,b
  8945  004100  51CD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8946  004102  5BC9               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8947  004104  51CE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8948  004106  5BCA               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8949  004108  51CF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8950  00410A  5BCB               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8951                           
  8952                           ; BSR set to: 0
  8953  00410C  81D0               	bsf	___lldiv@quotient& (0+255),0,b
  8954  00410E                     l1279:
  8955                           
  8956                           ; BSR set to: 0
  8957                           
  8958                           ; BSR set to: 0
  8959  00410E  90D8               	bcf	status,0,c
  8960  004110  33CF               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8961  004112  33CE               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8962  004114  33CD               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8963  004116  33CC               	rrcf	___lldiv@divisor& (0+255),f,b
  8964                           
  8965                           ; BSR set to: 0
  8966  004118  2FD4               	decfsz	___lldiv@counter& (0+255),f,b
  8967  00411A  D7E1               	goto	u2720
  8968  00411C                     l1280:
  8969                           
  8970                           ; BSR set to: 0
  8971                           
  8972                           ; BSR set to: 0
  8973  00411C  C0D0  F0C8         	movff	___lldiv@quotient,?___lldiv
  8974  004120  C0D1  F0C9         	movff	___lldiv@quotient+1,?___lldiv+1
  8975  004124  C0D2  F0CA         	movff	___lldiv@quotient+2,?___lldiv+2
  8976  004128  C0D3  F0CB         	movff	___lldiv@quotient+3,?___lldiv+3
  8977                           
  8978                           ; BSR set to: 0
  8979  00412C  0012               	return		;funcret
  8980  00412E                     __end_of___lldiv:
  8981                           	opt stack 0
  8982                           tblptru	equ	0xFF8
  8983                           tblptrh	equ	0xFF7
  8984                           tblptrl	equ	0xFF6
  8985                           tablat	equ	0xFF5
  8986                           prodh	equ	0xFF4
  8987                           prodl	equ	0xFF3
  8988                           intcon	equ	0xFF2
  8989                           intcon3	equ	0xFF0
  8990                           indf0	equ	0xFEF
  8991                           postinc0	equ	0xFEE
  8992                           fsr0h	equ	0xFEA
  8993                           fsr0l	equ	0xFE9
  8994                           wreg	equ	0xFE8
  8995                           postdec1	equ	0xFE5
  8996                           fsr1l	equ	0xFE1
  8997                           indf2	equ	0xFDF
  8998                           postinc2	equ	0xFDE
  8999                           postdec2	equ	0xFDD
  9000                           fsr2h	equ	0xFDA
  9001                           fsr2l	equ	0xFD9
  9002                           status	equ	0xFD8
  9003                           
  9004 ;; *************** function _interruptHandler *****************
  9005 ;; Defined at:
  9006 ;;		line 709 in file "main.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;		None
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;  i               2   65[COMRAM] int 
  9011 ;;  temp            1   68[COMRAM] unsigned char 
  9012 ;;  keypress        1   67[COMRAM] unsigned char 
  9013 ;; Return value:  Size  Location     Type
  9014 ;;                  1    wreg      void 
  9015 ;; Registers used:
  9016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;Total ram usage:       27 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; Hardware stack levels required when called:    3
  9029 ;; This function calls:
  9030 ;;		___awmod
  9031 ;;		_check
  9032 ;;		_is_valid
  9033 ;;		_strcat
  9034 ;;		_strcpy
  9035 ;;		_strncmp
  9036 ;;		i2_I2C_Master_Init
  9037 ;;		i2_I2C_Master_Read
  9038 ;;		i2_I2C_Master_Start
  9039 ;;		i2_I2C_Master_Stop
  9040 ;;		i2_I2C_Master_Write
  9041 ;;		i2___awdiv
  9042 ;;		i2___wmul
  9043 ;;		i2_generate_compartment_array
  9044 ;;		i2_initLCD
  9045 ;;		i2_lcdInst
  9046 ;;		i2_printf
  9047 ;;		i2_putch
  9048 ;; This function is called by:
  9049 ;;		Interrupt level 2
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           	psect	intcode
  9054  000008                     __pintcode:
  9055                           	opt stack 0
  9056  000008                     _interruptHandler:
  9057                           	opt stack 24
  9058                           
  9059                           ; BSR set to: 0
  9060                           ;incstack = 0
  9061  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9062  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  9063                           tblptru	equ	0xFF8
  9064                           tblptrh	equ	0xFF7
  9065                           tblptrl	equ	0xFF6
  9066                           tablat	equ	0xFF5
  9067                           prodh	equ	0xFF4
  9068                           prodl	equ	0xFF3
  9069                           intcon	equ	0xFF2
  9070                           intcon3	equ	0xFF0
  9071                           indf0	equ	0xFEF
  9072                           postinc0	equ	0xFEE
  9073                           fsr0h	equ	0xFEA
  9074                           fsr0l	equ	0xFE9
  9075                           wreg	equ	0xFE8
  9076                           postdec1	equ	0xFE5
  9077                           fsr1l	equ	0xFE1
  9078                           indf2	equ	0xFDF
  9079                           postinc2	equ	0xFDE
  9080                           postdec2	equ	0xFDD
  9081                           fsr2h	equ	0xFDA
  9082                           fsr2l	equ	0xFD9
  9083                           status	equ	0xFD8
  9084                           
  9085                           	psect	intcode_body
  9086  000012                     __pintcode_body:
  9087                           	opt stack 24
  9088  000012                     int_func:
  9089                           	opt stack 24
  9090  000012  0006               	pop		; remove dummy address from shadow register refresh
  9091  000014  CFFA F030          	movff	pclath,??_interruptHandler+5
  9092  000018  CFFB F031          	movff	pclatu,??_interruptHandler+6
  9093  00001C  CFE9 F032          	movff	fsr0l,??_interruptHandler+7
  9094  000020  CFEA F033          	movff	fsr0h,??_interruptHandler+8
  9095  000024  CFE1 F034          	movff	fsr1l,??_interruptHandler+9
  9096  000028  CFE2 F035          	movff	fsr1h,??_interruptHandler+10
  9097  00002C  CFD9 F036          	movff	fsr2l,??_interruptHandler+11
  9098  000030  CFDA F037          	movff	fsr2h,??_interruptHandler+12
  9099  000034  CFF3 F038          	movff	prodl,??_interruptHandler+13
  9100  000038  CFF4 F039          	movff	prodh,??_interruptHandler+14
  9101  00003C  CFF6 F03A          	movff	tblptrl,??_interruptHandler+15
  9102  000040  CFF7 F03B          	movff	tblptrh,??_interruptHandler+16
  9103  000044  CFF8 F03C          	movff	tblptru,??_interruptHandler+17
  9104  000048  CFF5 F03D          	movff	tablat,??_interruptHandler+18
  9105  00004C  C07F  F03E         	movff	btemp,??_interruptHandler+19
  9106  000050  C080  F03F         	movff	btemp+1,??_interruptHandler+20
  9107  000054  C081  F040         	movff	btemp+2,??_interruptHandler+21
  9108  000058  C082  F041         	movff	btemp+3,??_interruptHandler+22
  9109                           
  9110                           ;main.c: 720: if(INT1IF){
  9111  00005C  A0F0               	btfss	intcon3,0,c	;volatile
  9112  00005E  EFDA  F007         	goto	i2l6350
  9113                           
  9114                           ;main.c: 726: unsigned char keypress = (PORTB & 0xF0) >> 4;
  9115  000062  3881               	swapf	3969,w,c	;volatile
  9116  000064  0B0F               	andlw	15
  9117  000066  0B0F               	andlw	15
  9118  000068  6E44               	movwf	interruptHandler@keypress,c
  9119                           
  9120                           ;main.c: 728: char temp = keys[keypress];
  9121  00006A  5044               	movf	interruptHandler@keypress,w,c
  9122  00006C  0D01               	mullw	1
  9123  00006E  0E93               	movlw	low _keys
  9124  000070  24F3               	addwf	prodl,w,c
  9125  000072  6EF6               	movwf	tblptrl,c
  9126  000074  0EFC               	movlw	high _keys
  9127  000076  20F4               	addwfc	prodh,w,c
  9128  000078  6EF7               	movwf	tblptrh,c
  9129  00007A                     	if	1	;There are 3 active tblptr bytes
  9130  00007A  6AF8               	clrf	tblptru,c
  9131  00007C  0E00               	movlw	low (__mediumconst shr (0+16))
  9132  00007E  22F8               	addwfc	tblptru,f,c
  9133  000080                     	endif
  9134  000080  0008               	tblrd		*
  9135  000082  CFF5 F045          	movff	tablat,interruptHandler@temp
  9136                           
  9137                           ;main.c: 731: if(temp == 'A'){
  9138  000086  0E41               	movlw	65
  9139  000088  1845               	xorwf	interruptHandler@temp,w,c
  9140  00008A  A4D8               	btfss	status,2,c
  9141  00008C  D006               	goto	i2l427
  9142                           
  9143                           ;main.c: 732: state = prev_state;
  9144  00008E  C067  F0AE         	movff	_prev_state,_state
  9145  000092  C068  F0AF         	movff	_prev_state+1,_state+1
  9146  000096  EFD9  F007         	goto	i2l6348
  9147  00009A                     i2l427:
  9148                           
  9149                           ;main.c: 735: }
  9150                           ;main.c: 738: if (change_mode == 0){
  9151  00009A  0100               	movlb	0	; () banked
  9152  00009C  51B8               	movf	_change_mode& (0+255),w,b
  9153  00009E  11B9               	iorwf	(_change_mode+1)& (0+255),w,b
  9154  0000A0  A4D8               	btfss	status,2,c
  9155  0000A2  D09D               	goto	i2l435
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;main.c: 742: if (temp == '1'){
  9159  0000A4  0E31               	movlw	49
  9160  0000A6  1845               	xorwf	interruptHandler@temp,w,c
  9161  0000A8  A4D8               	btfss	status,2,c
  9162  0000AA  D08B               	goto	i2l430
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;main.c: 744: initLCD();
  9166  0000AC  EC98  F022         	call	i2_initLCD	;wreg free
  9167                           
  9168                           ;main.c: 745: for (i = 0; i <3; i++){
  9169  0000B0  0E00               	movlw	0
  9170  0000B2  0100               	movlb	0	; () banked
  9171  0000B4  6FBF               	movwf	(_i+1)& (0+255),b
  9172  0000B6  0E00               	movlw	0
  9173  0000B8  6FBE               	movwf	_i& (0+255),b
  9174                           
  9175                           ; BSR set to: 0
  9176  0000BA  51BF               	movf	(_i+1)& (0+255),w,b
  9177  0000BC  E101               	bnz	i2u451_40
  9178  0000BE  D07B               	goto	L2
  9179  0000C0                     i2u451_40:
  9180                           
  9181                           ; BSR set to: 0
  9182  0000C0  EFD9  F007         	goto	i2l6348
  9183  0000C4                     
  9184                           ; BSR set to: 0
  9185                           ;main.c: 746: I2C_Master_Init(100000);
  9186                           
  9187                           ; BSR set to: 0
  9188  0000C4  0EA0               	movlw	160
  9189  0000C6  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9190  0000C8  0E86               	movlw	134
  9191  0000CA  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9192  0000CC  0E01               	movlw	1
  9193  0000CE  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9194  0000D0  0E00               	movlw	0
  9195  0000D2  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9196  0000D4  ECF1  F021         	call	i2_I2C_Master_Init	;wreg free
  9197                           
  9198                           ;main.c: 747: I2C_Master_Start();
  9199  0000D8  EC6B  F024         	call	i2_I2C_Master_Start	;wreg free
  9200                           
  9201                           ;main.c: 748: I2C_Master_Write(0b11010000);
  9202  0000DC  0E00               	movlw	0
  9203  0000DE  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9204  0000E0  0ED0               	movlw	208
  9205  0000E2  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9206  0000E4  EC5A  F024         	call	i2_I2C_Master_Write	;wreg free
  9207                           
  9208                           ;main.c: 749: I2C_Master_Write(0x00);
  9209  0000E8  0E00               	movlw	0
  9210  0000EA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9211  0000EC  0E00               	movlw	0
  9212  0000EE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9213  0000F0  EC5A  F024         	call	i2_I2C_Master_Write	;wreg free
  9214                           
  9215                           ;main.c: 750: I2C_Master_Stop();
  9216  0000F4  EC67  F024         	call	i2_I2C_Master_Stop	;wreg free
  9217                           
  9218                           ;main.c: 753: I2C_Master_Start();
  9219  0000F8  EC6B  F024         	call	i2_I2C_Master_Start	;wreg free
  9220                           
  9221                           ;main.c: 754: I2C_Master_Write(0b11010001);
  9222  0000FC  0E00               	movlw	0
  9223  0000FE  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9224  000100  0ED1               	movlw	209
  9225  000102  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9226  000104  EC5A  F024         	call	i2_I2C_Master_Write	;wreg free
  9227                           
  9228                           ;main.c: 755: for(j = 0; j < 6; j++){
  9229  000108  0E00               	movlw	0
  9230  00010A  6E75               	movwf	_j,c
  9231  00010C                     i2l5874:
  9232  00010C  0E05               	movlw	5
  9233  00010E  6475               	cpfsgt	_j,c
  9234  000110  D001               	goto	i2l433
  9235  000112  D00E               	goto	i2u453_40
  9236  000114                     i2l433:
  9237                           
  9238                           ;main.c: 756: time[j] = I2C_Master_Read(0);
  9239  000114  5075               	movf	_j,w,c
  9240  000116  0D01               	mullw	1
  9241  000118  0E56               	movlw	low _time
  9242  00011A  24F3               	addwf	prodl,w,c
  9243  00011C  6ED9               	movwf	fsr2l,c
  9244  00011E  0E00               	movlw	high _time
  9245  000120  20F4               	addwfc	prodh,w,c
  9246  000122  6EDA               	movwf	fsr2h,c
  9247  000124  0E00               	movlw	0
  9248  000126  ECD7  F023         	call	i2_I2C_Master_Read
  9249  00012A  6EDF               	movwf	indf2,c
  9250  00012C  2A75               	incf	_j,f,c
  9251  00012E  D7EE               	goto	i2l5874
  9252  000130                     i2u453_40:
  9253                           
  9254                           ;main.c: 757: }
  9255                           ;main.c: 758: time[6] = I2C_Master_Read(1);
  9256  000130  0E01               	movlw	1
  9257  000132  ECD7  F023         	call	i2_I2C_Master_Read
  9258  000136  6E5C               	movwf	_time+6,c
  9259                           
  9260                           ;main.c: 759: I2C_Master_Stop();
  9261  000138  EC67  F024         	call	i2_I2C_Master_Stop	;wreg free
  9262                           
  9263                           ;main.c: 761: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9264  00013C  0E80               	movlw	128
  9265  00013E  EC35  F024         	call	i2_lcdInst
  9266  000142  0E41               	movlw	65
  9267  000144  6E2B               	movwf	??_interruptHandler& (0+255),c
  9268  000146  0EEE               	movlw	238
  9269  000148                     i2u568_47:
  9270  000148  2EE8               	decfsz	wreg,f,c
  9271  00014A  D7FE               	bra	i2u568_47
  9272  00014C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9273  00014E  D7FC               	bra	i2u568_47
  9274  000150  D000               	nop2	
  9275                           
  9276                           ;main.c: 762: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9277  000152  0E9C               	movlw	low STR_52
  9278  000154  6E0D               	movwf	i2printf@f,c
  9279  000156  0EFE               	movlw	high STR_52
  9280  000158  6E0E               	movwf	i2printf@f+1,c
  9281  00015A  C05C  F00F         	movff	_time+6,?i2_printf+2
  9282  00015E  6A10               	clrf	?i2_printf+3,c
  9283  000160  C05B  F011         	movff	_time+5,?i2_printf+4
  9284  000164  6A12               	clrf	?i2_printf+5,c
  9285  000166  C05A  F013         	movff	_time+4,?i2_printf+6
  9286  00016A  6A14               	clrf	?i2_printf+7,c
  9287  00016C  ECE4  F018         	call	i2_printf	;wreg free
  9288                           
  9289                           ;main.c: 763: lcdInst(0xC0);;
  9290  000170  0EC0               	movlw	192
  9291  000172  EC35  F024         	call	i2_lcdInst
  9292                           
  9293                           ;main.c: 764: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9294  000176  0EAB               	movlw	low STR_53
  9295  000178  6E0D               	movwf	i2printf@f,c
  9296  00017A  0EFE               	movlw	high STR_53
  9297  00017C  6E0E               	movwf	i2printf@f+1,c
  9298  00017E  C058  F00F         	movff	_time+2,?i2_printf+2
  9299  000182  6A10               	clrf	?i2_printf+3,c
  9300  000184  C057  F011         	movff	_time+1,?i2_printf+4
  9301  000188  6A12               	clrf	?i2_printf+5,c
  9302  00018A  C056  F013         	movff	_time,?i2_printf+6
  9303  00018E  6A14               	clrf	?i2_printf+7,c
  9304  000190  ECE4  F018         	call	i2_printf	;wreg free
  9305                           
  9306                           ;main.c: 765: _delay((unsigned long)((600)*(40000000/4000.0)));
  9307  000194  0E1F               	movlw	31
  9308  000196  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9309  000198  0E71               	movlw	113
  9310  00019A  6E2B               	movwf	??_interruptHandler& (0+255),c
  9311  00019C  0E1E               	movlw	30
  9312  00019E                     i2u569_47:
  9313  00019E  2EE8               	decfsz	wreg,f,c
  9314  0001A0  D7FE               	bra	i2u569_47
  9315  0001A2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9316  0001A4  D7FC               	bra	i2u569_47
  9317  0001A6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9318  0001A8  D7FA               	bra	i2u569_47
  9319  0001AA  D000               	nop2	
  9320  0001AC  0100               	movlb	0	; () banked
  9321  0001AE  4BBE               	infsnz	_i& (0+255),f,b
  9322  0001B0  2BBF               	incf	(_i+1)& (0+255),f,b
  9323  0001B2  51BF               	movf	(_i+1)& (0+255),w,b
  9324  0001B4  E112               	bnz	i2l5900
  9325  0001B6                     L2:
  9326  0001B6  0E03               	movlw	3
  9327  0001B8  5DBE               	subwf	_i& (0+255),w,b
  9328  0001BA  A0D8               	btfss	status,0,c
  9329  0001BC  D783               	goto	i2l431
  9330  0001BE  EFD9  F007         	goto	i2l6348
  9331  0001C2                     i2l430:
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;main.c: 769: }
  9335                           ;main.c: 770: if (temp == '2'){
  9336                           
  9337                           ; BSR set to: 0
  9338  0001C2  0E32               	movlw	50
  9339  0001C4  1845               	xorwf	interruptHandler@temp,w,c
  9340  0001C6  A4D8               	btfss	status,2,c
  9341  0001C8  D00A               	goto	i2l435
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;main.c: 771: change_mode = 1;
  9345  0001CA  0E00               	movlw	0
  9346  0001CC  6FB9               	movwf	(_change_mode+1)& (0+255),b
  9347  0001CE  0E01               	movlw	1
  9348  0001D0  6FB8               	movwf	_change_mode& (0+255),b
  9349                           
  9350                           ;main.c: 772: mode = 1;
  9351  0001D2  0E00               	movlw	0
  9352  0001D4  6FBB               	movwf	(_mode+1)& (0+255),b
  9353  0001D6  0E01               	movlw	1
  9354  0001D8  D33D               	goto	L10
  9355  0001DA                     i2l5900:
  9356  0001DA  EFD9  F007         	goto	i2l6348
  9357  0001DE                     i2l435:
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;main.c: 777: }
  9361                           ;main.c: 780: }
  9362                           ;main.c: 785: if(operation == 1){
  9363                           
  9364                           ; BSR set to: 0
  9365                           
  9366                           ; BSR set to: 0
  9367  0001DE  0473               	decf	_operation,w,c
  9368  0001E0  1074               	iorwf	_operation+1,w,c
  9369  0001E2  A4D8               	btfss	status,2,c
  9370  0001E4  D339               	goto	i2l446
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;main.c: 786: if (temp == '1'){
  9374  0001E6  0E31               	movlw	49
  9375  0001E8  1845               	xorwf	interruptHandler@temp,w,c
  9376  0001EA  A4D8               	btfss	status,2,c
  9377  0001EC  D08B               	goto	i2l437
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;main.c: 787: initLCD();
  9381  0001EE  EC98  F022         	call	i2_initLCD	;wreg free
  9382                           
  9383                           ;main.c: 788: for (i = 0; i <3; i++){
  9384  0001F2  0E00               	movlw	0
  9385  0001F4  0100               	movlb	0	; () banked
  9386  0001F6  6FBF               	movwf	(_i+1)& (0+255),b
  9387  0001F8  0E00               	movlw	0
  9388  0001FA  6FBE               	movwf	_i& (0+255),b
  9389                           
  9390                           ; BSR set to: 0
  9391  0001FC  51BF               	movf	(_i+1)& (0+255),w,b
  9392  0001FE  E101               	bnz	i2u458_40
  9393  000200  D07B               	goto	L3
  9394  000202                     i2u458_40:
  9395                           
  9396                           ; BSR set to: 0
  9397  000202  EFD9  F007         	goto	i2l6348
  9398  000206                     
  9399                           ; BSR set to: 0
  9400                           ;main.c: 789: I2C_Master_Init(100000);
  9401                           
  9402                           ; BSR set to: 0
  9403  000206  0EA0               	movlw	160
  9404  000208  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9405  00020A  0E86               	movlw	134
  9406  00020C  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9407  00020E  0E01               	movlw	1
  9408  000210  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9409  000212  0E00               	movlw	0
  9410  000214  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9411  000216  ECF1  F021         	call	i2_I2C_Master_Init	;wreg free
  9412                           
  9413                           ;main.c: 790: I2C_Master_Start();
  9414  00021A  EC6B  F024         	call	i2_I2C_Master_Start	;wreg free
  9415                           
  9416                           ;main.c: 791: I2C_Master_Write(0b11010000);
  9417  00021E  0E00               	movlw	0
  9418  000220  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9419  000222  0ED0               	movlw	208
  9420  000224  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9421  000226  EC5A  F024         	call	i2_I2C_Master_Write	;wreg free
  9422                           
  9423                           ;main.c: 792: I2C_Master_Write(0x00);
  9424  00022A  0E00               	movlw	0
  9425  00022C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9426  00022E  0E00               	movlw	0
  9427  000230  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9428  000232  EC5A  F024         	call	i2_I2C_Master_Write	;wreg free
  9429                           
  9430                           ;main.c: 793: I2C_Master_Stop();
  9431  000236  EC67  F024         	call	i2_I2C_Master_Stop	;wreg free
  9432                           
  9433                           ;main.c: 796: I2C_Master_Start();
  9434  00023A  EC6B  F024         	call	i2_I2C_Master_Start	;wreg free
  9435                           
  9436                           ;main.c: 797: I2C_Master_Write(0b11010001);
  9437  00023E  0E00               	movlw	0
  9438  000240  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9439  000242  0ED1               	movlw	209
  9440  000244  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9441  000246  EC5A  F024         	call	i2_I2C_Master_Write	;wreg free
  9442                           
  9443                           ;main.c: 798: for(j = 0; j < 6; j++){
  9444  00024A  0E00               	movlw	0
  9445  00024C  6E75               	movwf	_j,c
  9446  00024E                     i2l5920:
  9447  00024E  0E05               	movlw	5
  9448  000250  6475               	cpfsgt	_j,c
  9449  000252  D001               	goto	i2l440
  9450  000254  D00E               	goto	i2u460_40
  9451  000256                     i2l440:
  9452                           
  9453                           ;main.c: 799: time[j] = I2C_Master_Read(0);
  9454  000256  5075               	movf	_j,w,c
  9455  000258  0D01               	mullw	1
  9456  00025A  0E56               	movlw	low _time
  9457  00025C  24F3               	addwf	prodl,w,c
  9458  00025E  6ED9               	movwf	fsr2l,c
  9459  000260  0E00               	movlw	high _time
  9460  000262  20F4               	addwfc	prodh,w,c
  9461  000264  6EDA               	movwf	fsr2h,c
  9462  000266  0E00               	movlw	0
  9463  000268  ECD7  F023         	call	i2_I2C_Master_Read
  9464  00026C  6EDF               	movwf	indf2,c
  9465  00026E  2A75               	incf	_j,f,c
  9466  000270  D7EE               	goto	i2l5920
  9467  000272                     i2u460_40:
  9468                           
  9469                           ;main.c: 800: }
  9470                           ;main.c: 801: time[6] = I2C_Master_Read(1);
  9471  000272  0E01               	movlw	1
  9472  000274  ECD7  F023         	call	i2_I2C_Master_Read
  9473  000278  6E5C               	movwf	_time+6,c
  9474                           
  9475                           ;main.c: 802: I2C_Master_Stop();
  9476  00027A  EC67  F024         	call	i2_I2C_Master_Stop	;wreg free
  9477                           
  9478                           ;main.c: 804: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9479  00027E  0E80               	movlw	128
  9480  000280  EC35  F024         	call	i2_lcdInst
  9481  000284  0E41               	movlw	65
  9482  000286  6E2B               	movwf	??_interruptHandler& (0+255),c
  9483  000288  0EEE               	movlw	238
  9484  00028A                     i2u570_47:
  9485  00028A  2EE8               	decfsz	wreg,f,c
  9486  00028C  D7FE               	bra	i2u570_47
  9487  00028E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9488  000290  D7FC               	bra	i2u570_47
  9489  000292  D000               	nop2	
  9490                           
  9491                           ;main.c: 805: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9492  000294  0E9C               	movlw	low STR_52
  9493  000296  6E0D               	movwf	i2printf@f,c
  9494  000298  0EFE               	movlw	high STR_52
  9495  00029A  6E0E               	movwf	i2printf@f+1,c
  9496  00029C  C05C  F00F         	movff	_time+6,?i2_printf+2
  9497  0002A0  6A10               	clrf	?i2_printf+3,c
  9498  0002A2  C05B  F011         	movff	_time+5,?i2_printf+4
  9499  0002A6  6A12               	clrf	?i2_printf+5,c
  9500  0002A8  C05A  F013         	movff	_time+4,?i2_printf+6
  9501  0002AC  6A14               	clrf	?i2_printf+7,c
  9502  0002AE  ECE4  F018         	call	i2_printf	;wreg free
  9503                           
  9504                           ;main.c: 806: lcdInst(0xC0);;
  9505  0002B2  0EC0               	movlw	192
  9506  0002B4  EC35  F024         	call	i2_lcdInst
  9507                           
  9508                           ;main.c: 807: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9509  0002B8  0EAB               	movlw	low STR_53
  9510  0002BA  6E0D               	movwf	i2printf@f,c
  9511  0002BC  0EFE               	movlw	high STR_53
  9512  0002BE  6E0E               	movwf	i2printf@f+1,c
  9513  0002C0  C058  F00F         	movff	_time+2,?i2_printf+2
  9514  0002C4  6A10               	clrf	?i2_printf+3,c
  9515  0002C6  C057  F011         	movff	_time+1,?i2_printf+4
  9516  0002CA  6A12               	clrf	?i2_printf+5,c
  9517  0002CC  C056  F013         	movff	_time,?i2_printf+6
  9518  0002D0  6A14               	clrf	?i2_printf+7,c
  9519  0002D2  ECE4  F018         	call	i2_printf	;wreg free
  9520                           
  9521                           ;main.c: 808: _delay((unsigned long)((600)*(40000000/4000.0)));
  9522  0002D6  0E1F               	movlw	31
  9523  0002D8  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9524  0002DA  0E71               	movlw	113
  9525  0002DC  6E2B               	movwf	??_interruptHandler& (0+255),c
  9526  0002DE  0E1E               	movlw	30
  9527  0002E0                     i2u571_47:
  9528  0002E0  2EE8               	decfsz	wreg,f,c
  9529  0002E2  D7FE               	bra	i2u571_47
  9530  0002E4  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9531  0002E6  D7FC               	bra	i2u571_47
  9532  0002E8  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9533  0002EA  D7FA               	bra	i2u571_47
  9534  0002EC  D000               	nop2	
  9535  0002EE  0100               	movlb	0	; () banked
  9536  0002F0  4BBE               	infsnz	_i& (0+255),f,b
  9537  0002F2  2BBF               	incf	(_i+1)& (0+255),f,b
  9538  0002F4  51BF               	movf	(_i+1)& (0+255),w,b
  9539  0002F6  E104               	bnz	i2u461_40
  9540  0002F8                     L3:
  9541  0002F8  0E03               	movlw	3
  9542  0002FA  5DBE               	subwf	_i& (0+255),w,b
  9543  0002FC  A0D8               	btfss	status,0,c
  9544  0002FE  D783               	goto	i2l438
  9545  000300                     i2u461_40:
  9546  000300  EFD9  F007         	goto	i2l6348
  9547  000304                     i2l437:
  9548                           
  9549                           ; BSR set to: 0
  9550                           ;main.c: 814: }
  9551                           ;main.c: 815: if (temp == '2'){
  9552                           
  9553                           ; BSR set to: 0
  9554  000304  0E32               	movlw	50
  9555  000306  1845               	xorwf	interruptHandler@temp,w,c
  9556  000308  A4D8               	btfss	status,2,c
  9557  00030A  D09A               	goto	i2l442
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;main.c: 824: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
  9561  00030C  C16E  F001         	movff	_hr_initial,i2___wmul@multiplier
  9562  000310  C16F  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
  9563  000314  0E0E               	movlw	14
  9564  000316  6E04               	movwf	i2___wmul@multiplicand+1,c
  9565  000318  0E10               	movlw	16
  9566  00031A  6E03               	movwf	i2___wmul@multiplicand,c
  9567  00031C  ECC4  F023         	call	i2___wmul	;wreg free
  9568  000320  C001  F02B         	movff	?i2___wmul,??_interruptHandler
  9569  000324  C002  F02C         	movff	?i2___wmul+1,??_interruptHandler+1
  9570  000328  C16C  F001         	movff	_min_initial,i2___wmul@multiplier
  9571  00032C  C16D  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
  9572  000330  0E00               	movlw	0
  9573  000332  6E04               	movwf	i2___wmul@multiplicand+1,c
  9574  000334  0E3C               	movlw	60
  9575  000336  6E03               	movwf	i2___wmul@multiplicand,c
  9576  000338  ECC4  F023         	call	i2___wmul	;wreg free
  9577  00033C  5001               	movf	?i2___wmul,w,c
  9578  00033E  262B               	addwf	??_interruptHandler,f,c
  9579  000340  5002               	movf	?i2___wmul+1,w,c
  9580  000342  222C               	addwfc	??_interruptHandler+1,f,c
  9581  000344  0101               	movlb	1	; () banked
  9582  000346  516A               	movf	_sec_initial& (0+255),w,b
  9583  000348  242B               	addwf	??_interruptHandler,w,c
  9584  00034A  6F68               	movwf	_initial_time& (0+255),b
  9585  00034C  516B               	movf	(_sec_initial+1)& (0+255),w,b
  9586  00034E  202C               	addwfc	??_interruptHandler+1,w,c
  9587  000350  6F69               	movwf	(_initial_time+1)& (0+255),b
  9588                           
  9589                           ;main.c: 825: final_time = hr_final*3600 + min_final*60 + sec_final;
  9590  000352  C166  F001         	movff	_hr_final,i2___wmul@multiplier
  9591  000356  C167  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
  9592  00035A  0E0E               	movlw	14
  9593  00035C  6E04               	movwf	i2___wmul@multiplicand+1,c
  9594  00035E  0E10               	movlw	16
  9595  000360  6E03               	movwf	i2___wmul@multiplicand,c
  9596  000362  ECC4  F023         	call	i2___wmul	;wreg free
  9597  000366  C001  F02B         	movff	?i2___wmul,??_interruptHandler
  9598  00036A  C002  F02C         	movff	?i2___wmul+1,??_interruptHandler+1
  9599  00036E  C164  F001         	movff	_min_final,i2___wmul@multiplier
  9600  000372  C165  F002         	movff	_min_final+1,i2___wmul@multiplier+1
  9601  000376  0E00               	movlw	0
  9602  000378  6E04               	movwf	i2___wmul@multiplicand+1,c
  9603  00037A  0E3C               	movlw	60
  9604  00037C  6E03               	movwf	i2___wmul@multiplicand,c
  9605  00037E  ECC4  F023         	call	i2___wmul	;wreg free
  9606  000382  5001               	movf	?i2___wmul,w,c
  9607  000384  262B               	addwf	??_interruptHandler,f,c
  9608  000386  5002               	movf	?i2___wmul+1,w,c
  9609  000388  222C               	addwfc	??_interruptHandler+1,f,c
  9610  00038A  0101               	movlb	1	; () banked
  9611  00038C  5162               	movf	_sec_final& (0+255),w,b
  9612  00038E  242B               	addwf	??_interruptHandler,w,c
  9613  000390  6F60               	movwf	_final_time& (0+255),b
  9614  000392  5163               	movf	(_sec_final+1)& (0+255),w,b
  9615  000394  202C               	addwfc	??_interruptHandler+1,w,c
  9616  000396  6F61               	movwf	(_final_time+1)& (0+255),b
  9617                           
  9618                           ; BSR set to: 1
  9619                           ;main.c: 826: operationTime = final_time - initial_time;
  9620  000398  C168  F02B         	movff	_initial_time,??_interruptHandler
  9621  00039C  C169  F02C         	movff	_initial_time+1,??_interruptHandler+1
  9622  0003A0  1E2B               	comf	??_interruptHandler,f,c
  9623  0003A2  1E2C               	comf	??_interruptHandler+1,f,c
  9624  0003A4  4A2B               	infsnz	??_interruptHandler,f,c
  9625  0003A6  2A2C               	incf	??_interruptHandler+1,f,c
  9626  0003A8  5160               	movf	_final_time& (0+255),w,b
  9627  0003AA  242B               	addwf	??_interruptHandler,w,c
  9628  0003AC  6E71               	movwf	_operationTime,c
  9629  0003AE  5161               	movf	(_final_time+1)& (0+255),w,b
  9630  0003B0  202C               	addwfc	??_interruptHandler+1,w,c
  9631  0003B2  6E72               	movwf	_operationTime+1,c
  9632                           
  9633                           ; BSR set to: 1
  9634                           ;main.c: 827: initLCD();
  9635  0003B4  EC98  F022         	call	i2_initLCD	;wreg free
  9636                           
  9637                           ;main.c: 830: printf("operation time:");
  9638  0003B8  0EF4               	movlw	low STR_56
  9639  0003BA  6E0D               	movwf	i2printf@f,c
  9640  0003BC  0EFD               	movlw	high STR_56
  9641  0003BE  6E0E               	movwf	i2printf@f+1,c
  9642  0003C0  ECE4  F018         	call	i2_printf	;wreg free
  9643                           
  9644                           ;main.c: 831: lcdInst(0xC0);;
  9645  0003C4  0EC0               	movlw	192
  9646  0003C6  EC35  F024         	call	i2_lcdInst
  9647                           
  9648                           ;main.c: 832: printf("%dmin %dsecs",operationTime/60,operationTime%60);
  9649  0003CA  0E19               	movlw	low STR_57
  9650  0003CC  6E0D               	movwf	i2printf@f,c
  9651  0003CE  0EFF               	movlw	high STR_57
  9652  0003D0  6E0E               	movwf	i2printf@f+1,c
  9653  0003D2  C071  F001         	movff	_operationTime,i2___awdiv@dividend
  9654  0003D6  C072  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
  9655  0003DA  0E00               	movlw	0
  9656  0003DC  6E04               	movwf	i2___awdiv@divisor+1,c
  9657  0003DE  0E3C               	movlw	60
  9658  0003E0  6E03               	movwf	i2___awdiv@divisor,c
  9659  0003E2  EC97  F020         	call	i2___awdiv	;wreg free
  9660  0003E6  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  9661  0003EA  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  9662  0003EE  C071  F001         	movff	_operationTime,___awmod@dividend
  9663  0003F2  C072  F002         	movff	_operationTime+1,___awmod@dividend+1
  9664  0003F6  0E00               	movlw	0
  9665  0003F8  6E04               	movwf	___awmod@divisor+1,c
  9666  0003FA  0E3C               	movlw	60
  9667  0003FC  6E03               	movwf	___awmod@divisor,c
  9668  0003FE  EC57  F021         	call	___awmod	;wreg free
  9669  000402  C001  F011         	movff	?___awmod,?i2_printf+4
  9670  000406  C002  F012         	movff	?___awmod+1,?i2_printf+5
  9671  00040A  ECE4  F018         	call	i2_printf	;wreg free
  9672                           
  9673                           ;main.c: 833: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9674  00040E  0E80               	movlw	128
  9675  000410  EC35  F024         	call	i2_lcdInst
  9676  000414  0E41               	movlw	65
  9677  000416  6E2B               	movwf	??_interruptHandler& (0+255),c
  9678  000418  0EEE               	movlw	238
  9679  00041A                     i2u572_47:
  9680  00041A  2EE8               	decfsz	wreg,f,c
  9681  00041C  D7FE               	bra	i2u572_47
  9682  00041E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9683  000420  D7FC               	bra	i2u572_47
  9684  000422  D000               	nop2	
  9685                           
  9686                           ;main.c: 834: _delay((unsigned long)((2000)*(40000000/4000.0)));
  9687  000424  0E66               	movlw	102
  9688  000426  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9689  000428  0E76               	movlw	118
  9690  00042A  6E2B               	movwf	??_interruptHandler& (0+255),c
  9691  00042C  0EC1               	movlw	193
  9692  00042E                     i2u573_47:
  9693  00042E  2EE8               	decfsz	wreg,f,c
  9694  000430  D7FE               	bra	i2u573_47
  9695  000432  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9696  000434  D7FC               	bra	i2u573_47
  9697  000436  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9698  000438  D7FA               	bra	i2u573_47
  9699  00043A  F000               	nop	
  9700  00043C  EFD9  F007         	goto	i2l6348
  9701  000440                     i2l442:
  9702                           
  9703                           ;main.c: 840: }
  9704                           ;main.c: 842: if (temp == '3'){
  9705  000440  0E33               	movlw	51
  9706  000442  1845               	xorwf	interruptHandler@temp,w,c
  9707  000444  A4D8               	btfss	status,2,c
  9708  000446  D1FA               	goto	i2l443
  9709                           
  9710                           ;main.c: 847: initLCD();
  9711  000448  EC98  F022         	call	i2_initLCD	;wreg free
  9712                           
  9713                           ;main.c: 848: printf("assembly step:%d",assembly_step);
  9714  00044C  0ED2               	movlw	low STR_8
  9715  00044E  6E0D               	movwf	i2printf@f,c
  9716  000450  0EFD               	movlw	high STR_8
  9717  000452  6E0E               	movwf	i2printf@f+1,c
  9718  000454  C0AC  F00F         	movff	_assembly_step,?i2_printf+2
  9719  000458  C0AD  F010         	movff	_assembly_step+1,?i2_printf+3
  9720  00045C  ECE4  F018         	call	i2_printf	;wreg free
  9721                           
  9722                           ;main.c: 849: for (i = 0; i<8; i++){
  9723  000460  0E00               	movlw	0
  9724  000462  0100               	movlb	0	; () banked
  9725  000464  6FBF               	movwf	(_i+1)& (0+255),b
  9726  000466  0E00               	movlw	0
  9727  000468  6FBE               	movwf	_i& (0+255),b
  9728                           
  9729                           ; BSR set to: 0
  9730  00046A  51BF               	movf	(_i+1)& (0+255),w,b
  9731  00046C  E105               	bnz	i2u464_40
  9732  00046E  0E08               	movlw	8
  9733  000470  5DBE               	subwf	_i& (0+255),w,b
  9734  000472  B0D8               	btfsc	status,0,c
  9735  000474  D093               	goto	i2u465_40
  9736  000476  D001               	goto	i2l444
  9737  000478                     i2u464_40:
  9738                           
  9739                           ; BSR set to: 0
  9740  000478  D091               	goto	i2u465_40
  9741  00047A                     i2l444:
  9742                           
  9743                           ; BSR set to: 0
  9744                           ;main.c: 851: _delay((unsigned long)((800)*(40000000/4000.0)));
  9745                           
  9746                           ; BSR set to: 0
  9747  00047A  0E29               	movlw	41
  9748  00047C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9749  00047E  0E96               	movlw	150
  9750  000480  6E2B               	movwf	??_interruptHandler& (0+255),c
  9751  000482  0E7F               	movlw	127
  9752  000484                     i2u574_47:
  9753  000484  2EE8               	decfsz	wreg,f,c
  9754  000486  D7FE               	bra	i2u574_47
  9755  000488  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9756  00048A  D7FC               	bra	i2u574_47
  9757  00048C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9758  00048E  D7FA               	bra	i2u574_47
  9759  000490  F000               	nop	
  9760                           
  9761                           ;main.c: 852: printf("C%d:B%d,N%d,S%d,W%d",i,B_array[i],N_array[i],S_array[i],W_array[i]
      +                          );
  9762  000492  0E53               	movlw	low STR_59
  9763  000494  6E0D               	movwf	i2printf@f,c
  9764  000496  0EFD               	movlw	high STR_59
  9765  000498  6E0E               	movwf	i2printf@f+1,c
  9766  00049A  C0BE  F00F         	movff	_i,?i2_printf+2
  9767  00049E  C0BF  F010         	movff	_i+1,?i2_printf+3
  9768  0004A2  90D8               	bcf	status,0,c
  9769  0004A4  0100               	movlb	0	; () banked
  9770  0004A6  35BE               	rlcf	_i& (0+255),w,b
  9771  0004A8  6ED9               	movwf	fsr2l,c
  9772  0004AA  35BF               	rlcf	(_i+1)& (0+255),w,b
  9773  0004AC  6EDA               	movwf	fsr2h,c
  9774  0004AE  0E30               	movlw	low _B_array
  9775  0004B0  26D9               	addwf	fsr2l,f,c
  9776  0004B2  0E01               	movlw	high _B_array
  9777  0004B4  22DA               	addwfc	fsr2h,f,c
  9778  0004B6  CFDE F011          	movff	postinc2,?i2_printf+4
  9779  0004BA  CFDD F012          	movff	postdec2,?i2_printf+5
  9780  0004BE  90D8               	bcf	status,0,c
  9781  0004C0  35BE               	rlcf	_i& (0+255),w,b
  9782  0004C2  6ED9               	movwf	fsr2l,c
  9783  0004C4  35BF               	rlcf	(_i+1)& (0+255),w,b
  9784  0004C6  6EDA               	movwf	fsr2h,c
  9785  0004C8  0E10               	movlw	low _N_array
  9786  0004CA  26D9               	addwf	fsr2l,f,c
  9787  0004CC  0E01               	movlw	high _N_array
  9788  0004CE  22DA               	addwfc	fsr2h,f,c
  9789  0004D0  CFDE F013          	movff	postinc2,?i2_printf+6
  9790  0004D4  CFDD F014          	movff	postdec2,?i2_printf+7
  9791  0004D8  90D8               	bcf	status,0,c
  9792  0004DA  35BE               	rlcf	_i& (0+255),w,b
  9793  0004DC  6ED9               	movwf	fsr2l,c
  9794  0004DE  35BF               	rlcf	(_i+1)& (0+255),w,b
  9795  0004E0  6EDA               	movwf	fsr2h,c
  9796  0004E2  0E20               	movlw	low _S_array
  9797  0004E4  26D9               	addwf	fsr2l,f,c
  9798  0004E6  0E01               	movlw	high _S_array
  9799  0004E8  22DA               	addwfc	fsr2h,f,c
  9800  0004EA  CFDE F015          	movff	postinc2,?i2_printf+8
  9801  0004EE  CFDD F016          	movff	postdec2,?i2_printf+9
  9802  0004F2  90D8               	bcf	status,0,c
  9803  0004F4  35BE               	rlcf	_i& (0+255),w,b
  9804  0004F6  6ED9               	movwf	fsr2l,c
  9805  0004F8  35BF               	rlcf	(_i+1)& (0+255),w,b
  9806  0004FA  6EDA               	movwf	fsr2h,c
  9807  0004FC  0E00               	movlw	low _W_array
  9808  0004FE  26D9               	addwf	fsr2l,f,c
  9809  000500  0E01               	movlw	high _W_array
  9810  000502  22DA               	addwfc	fsr2h,f,c
  9811  000504  CFDE F017          	movff	postinc2,?i2_printf+10
  9812  000508  CFDD F018          	movff	postdec2,?i2_printf+11
  9813  00050C  ECE4  F018         	call	i2_printf	;wreg free
  9814                           
  9815                           ;main.c: 853: _delay((unsigned long)((800)*(40000000/4000.0)));
  9816  000510  0E29               	movlw	41
  9817  000512  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9818  000514  0E96               	movlw	150
  9819  000516  6E2B               	movwf	??_interruptHandler& (0+255),c
  9820  000518  0E7F               	movlw	127
  9821  00051A                     i2u575_47:
  9822  00051A  2EE8               	decfsz	wreg,f,c
  9823  00051C  D7FE               	bra	i2u575_47
  9824  00051E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9825  000520  D7FC               	bra	i2u575_47
  9826  000522  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9827  000524  D7FA               	bra	i2u575_47
  9828  000526  F000               	nop	
  9829                           
  9830                           ;main.c: 854: B_total_dispensed += B_array[i];
  9831  000528  90D8               	bcf	status,0,c
  9832  00052A  0100               	movlb	0	; () banked
  9833  00052C  35BE               	rlcf	_i& (0+255),w,b
  9834  00052E  6ED9               	movwf	fsr2l,c
  9835  000530  35BF               	rlcf	(_i+1)& (0+255),w,b
  9836  000532  6EDA               	movwf	fsr2h,c
  9837  000534  0E30               	movlw	low _B_array
  9838  000536  26D9               	addwf	fsr2l,f,c
  9839  000538  0E01               	movlw	high _B_array
  9840  00053A  22DA               	addwfc	fsr2h,f,c
  9841  00053C  50DE               	movf	postinc2,w,c
  9842  00053E  265D               	addwf	_B_total_dispensed,f,c
  9843  000540  50DD               	movf	postdec2,w,c
  9844  000542  225E               	addwfc	_B_total_dispensed+1,f,c
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;main.c: 855: N_total_dispensed += N_array[i];
  9848  000544  90D8               	bcf	status,0,c
  9849  000546  35BE               	rlcf	_i& (0+255),w,b
  9850  000548  6ED9               	movwf	fsr2l,c
  9851  00054A  35BF               	rlcf	(_i+1)& (0+255),w,b
  9852  00054C  6EDA               	movwf	fsr2h,c
  9853  00054E  0E10               	movlw	low _N_array
  9854  000550  26D9               	addwf	fsr2l,f,c
  9855  000552  0E01               	movlw	high _N_array
  9856  000554  22DA               	addwfc	fsr2h,f,c
  9857  000556  50DE               	movf	postinc2,w,c
  9858  000558  2794               	addwf	_N_total_dispensed& (0+255),f,b
  9859  00055A  50DD               	movf	postdec2,w,c
  9860  00055C  2395               	addwfc	(_N_total_dispensed+1)& (0+255),f,b
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;main.c: 856: S_total_dispensed += S_array[i];
  9864  00055E  90D8               	bcf	status,0,c
  9865  000560  35BE               	rlcf	_i& (0+255),w,b
  9866  000562  6ED9               	movwf	fsr2l,c
  9867  000564  35BF               	rlcf	(_i+1)& (0+255),w,b
  9868  000566  6EDA               	movwf	fsr2h,c
  9869  000568  0E20               	movlw	low _S_array
  9870  00056A  26D9               	addwf	fsr2l,f,c
  9871  00056C  0E01               	movlw	high _S_array
  9872  00056E  22DA               	addwfc	fsr2h,f,c
  9873  000570  50DE               	movf	postinc2,w,c
  9874  000572  2792               	addwf	_S_total_dispensed& (0+255),f,b
  9875  000574  50DD               	movf	postdec2,w,c
  9876  000576  2393               	addwfc	(_S_total_dispensed+1)& (0+255),f,b
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;main.c: 857: W_total_dispensed += W_array[i];
  9880  000578  90D8               	bcf	status,0,c
  9881  00057A  35BE               	rlcf	_i& (0+255),w,b
  9882  00057C  6ED9               	movwf	fsr2l,c
  9883  00057E  35BF               	rlcf	(_i+1)& (0+255),w,b
  9884  000580  6EDA               	movwf	fsr2h,c
  9885  000582  0E00               	movlw	low _W_array
  9886  000584  26D9               	addwf	fsr2l,f,c
  9887  000586  0E01               	movlw	high _W_array
  9888  000588  22DA               	addwfc	fsr2h,f,c
  9889  00058A  50DE               	movf	postinc2,w,c
  9890  00058C  2790               	addwf	_W_total_dispensed& (0+255),f,b
  9891  00058E  50DD               	movf	postdec2,w,c
  9892  000590  2391               	addwfc	(_W_total_dispensed+1)& (0+255),f,b
  9893                           
  9894                           ; BSR set to: 0
  9895  000592  4BBE               	infsnz	_i& (0+255),f,b
  9896  000594  2BBF               	incf	(_i+1)& (0+255),f,b
  9897                           
  9898                           ; BSR set to: 0
  9899  000596  51BF               	movf	(_i+1)& (0+255),w,b
  9900  000598  E101               	bnz	i2l5996
  9901  00059A  D769               	goto	L4
  9902  00059C                     i2u465_40:
  9903  00059C                     i2l5996:
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;main.c: 859: }
  9907                           ;main.c: 860: initLCD();
  9908  00059C  EC98  F022         	call	i2_initLCD	;wreg free
  9909                           
  9910                           ;main.c: 861: printf("B dispensed:%d",B_total_dispensed);
  9911  0005A0  0E42               	movlw	low STR_60
  9912  0005A2  6E0D               	movwf	i2printf@f,c
  9913  0005A4  0EFE               	movlw	high STR_60
  9914  0005A6  6E0E               	movwf	i2printf@f+1,c
  9915  0005A8  C05D  F00F         	movff	_B_total_dispensed,?i2_printf+2
  9916  0005AC  C05E  F010         	movff	_B_total_dispensed+1,?i2_printf+3
  9917  0005B0  ECE4  F018         	call	i2_printf	;wreg free
  9918                           
  9919                           ;main.c: 862: _delay((unsigned long)((800)*(40000000/4000.0)));
  9920  0005B4  0E29               	movlw	41
  9921  0005B6  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9922  0005B8  0E96               	movlw	150
  9923  0005BA  6E2B               	movwf	??_interruptHandler& (0+255),c
  9924  0005BC  0E7F               	movlw	127
  9925  0005BE                     i2u576_47:
  9926  0005BE  2EE8               	decfsz	wreg,f,c
  9927  0005C0  D7FE               	bra	i2u576_47
  9928  0005C2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9929  0005C4  D7FC               	bra	i2u576_47
  9930  0005C6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9931  0005C8  D7FA               	bra	i2u576_47
  9932  0005CA  F000               	nop	
  9933                           
  9934                           ;main.c: 863: initLCD();
  9935  0005CC  EC98  F022         	call	i2_initLCD	;wreg free
  9936                           
  9937                           ;main.c: 864: printf("N dispensed:%d",N_total_dispensed);
  9938  0005D0  0E51               	movlw	low STR_61
  9939  0005D2  6E0D               	movwf	i2printf@f,c
  9940  0005D4  0EFE               	movlw	high STR_61
  9941  0005D6  6E0E               	movwf	i2printf@f+1,c
  9942  0005D8  C094  F00F         	movff	_N_total_dispensed,?i2_printf+2
  9943  0005DC  C095  F010         	movff	_N_total_dispensed+1,?i2_printf+3
  9944  0005E0  ECE4  F018         	call	i2_printf	;wreg free
  9945                           
  9946                           ;main.c: 865: _delay((unsigned long)((800)*(40000000/4000.0)));
  9947  0005E4  0E29               	movlw	41
  9948  0005E6  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9949  0005E8  0E96               	movlw	150
  9950  0005EA  6E2B               	movwf	??_interruptHandler& (0+255),c
  9951  0005EC  0E7F               	movlw	127
  9952  0005EE                     i2u577_47:
  9953  0005EE  2EE8               	decfsz	wreg,f,c
  9954  0005F0  D7FE               	bra	i2u577_47
  9955  0005F2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9956  0005F4  D7FC               	bra	i2u577_47
  9957  0005F6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9958  0005F8  D7FA               	bra	i2u577_47
  9959  0005FA  F000               	nop	
  9960                           
  9961                           ;main.c: 866: initLCD();
  9962  0005FC  EC98  F022         	call	i2_initLCD	;wreg free
  9963                           
  9964                           ;main.c: 867: printf("S dispensed:%d",S_total_dispensed);
  9965  000600  0E60               	movlw	low STR_62
  9966  000602  6E0D               	movwf	i2printf@f,c
  9967  000604  0EFE               	movlw	high STR_62
  9968  000606  6E0E               	movwf	i2printf@f+1,c
  9969  000608  C092  F00F         	movff	_S_total_dispensed,?i2_printf+2
  9970  00060C  C093  F010         	movff	_S_total_dispensed+1,?i2_printf+3
  9971  000610  ECE4  F018         	call	i2_printf	;wreg free
  9972                           
  9973                           ;main.c: 868: _delay((unsigned long)((800)*(40000000/4000.0)));
  9974  000614  0E29               	movlw	41
  9975  000616  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
  9976  000618  0E96               	movlw	150
  9977  00061A  6E2B               	movwf	??_interruptHandler& (0+255),c
  9978  00061C  0E7F               	movlw	127
  9979  00061E                     i2u578_47:
  9980  00061E  2EE8               	decfsz	wreg,f,c
  9981  000620  D7FE               	bra	i2u578_47
  9982  000622  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
  9983  000624  D7FC               	bra	i2u578_47
  9984  000626  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9985  000628  D7FA               	bra	i2u578_47
  9986  00062A  F000               	nop	
  9987                           
  9988                           ;main.c: 869: initLCD();
  9989  00062C  EC98  F022         	call	i2_initLCD	;wreg free
  9990                           
  9991                           ;main.c: 870: printf("W dispensed:%d",W_total_dispensed);
  9992  000630  0E6F               	movlw	low STR_63
  9993  000632  6E0D               	movwf	i2printf@f,c
  9994  000634  0EFE               	movlw	high STR_63
  9995  000636  6E0E               	movwf	i2printf@f+1,c
  9996  000638  C090  F00F         	movff	_W_total_dispensed,?i2_printf+2
  9997  00063C  C091  F010         	movff	_W_total_dispensed+1,?i2_printf+3
  9998  000640  ECE4  F018         	call	i2_printf	;wreg free
  9999                           
 10000                           ;main.c: 872: _delay((unsigned long)((800)*(40000000/4000.0)));
 10001  000644  0E29               	movlw	41
 10002  000646  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10003  000648  0E96               	movlw	150
 10004  00064A  6E2B               	movwf	??_interruptHandler& (0+255),c
 10005  00064C  0E7F               	movlw	127
 10006  00064E                     i2u579_47:
 10007  00064E  2EE8               	decfsz	wreg,f,c
 10008  000650  D7FE               	bra	i2u579_47
 10009  000652  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10010  000654  D7FC               	bra	i2u579_47
 10011  000656  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10012  000658  D7FA               	bra	i2u579_47
 10013  00065A  F000               	nop	
 10014                           
 10015                           ;main.c: 873: initLCD();
 10016  00065C  EC98  F022         	call	i2_initLCD	;wreg free
 10017                           
 10018                           ;main.c: 875: printf("Bolt_remain:%d",B_remain);
 10019  000660  0E7E               	movlw	low STR_44
 10020  000662  6E0D               	movwf	i2printf@f,c
 10021  000664  0EFE               	movlw	high STR_44
 10022  000666  6E0E               	movwf	i2printf@f+1,c
 10023  000668  C0A2  F00F         	movff	_B_remain,?i2_printf+2
 10024  00066C  C0A3  F010         	movff	_B_remain+1,?i2_printf+3
 10025  000670  ECE4  F018         	call	i2_printf	;wreg free
 10026                           
 10027                           ;main.c: 876: _delay((unsigned long)((300)*(40000000/4000.0)));
 10028  000674  0E10               	movlw	16
 10029  000676  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10030  000678  0E39               	movlw	57
 10031  00067A  6E2B               	movwf	??_interruptHandler& (0+255),c
 10032  00067C  0E0E               	movlw	14
 10033  00067E                     i2u580_47:
 10034  00067E  2EE8               	decfsz	wreg,f,c
 10035  000680  D7FE               	bra	i2u580_47
 10036  000682  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10037  000684  D7FC               	bra	i2u580_47
 10038  000686  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10039  000688  D7FA               	bra	i2u580_47
 10040                           
 10041                           ;main.c: 877: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10042  00068A  0E01               	movlw	1
 10043  00068C  EC35  F024         	call	i2_lcdInst
 10044  000690  0EC3               	movlw	195
 10045  000692  6E2B               	movwf	??_interruptHandler& (0+255),c
 10046  000694  0ECD               	movlw	205
 10047  000696                     i2u581_47:
 10048  000696  2EE8               	decfsz	wreg,f,c
 10049  000698  D7FE               	bra	i2u581_47
 10050  00069A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10051  00069C  D7FC               	bra	i2u581_47
 10052  00069E  F000               	nop	
 10053                           
 10054                           ;main.c: 878: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
 10055  0006A0  0E80               	movlw	128
 10056  0006A2  EC35  F024         	call	i2_lcdInst
 10057  0006A6  0E41               	movlw	65
 10058  0006A8  6E2B               	movwf	??_interruptHandler& (0+255),c
 10059  0006AA  0EEE               	movlw	238
 10060  0006AC                     i2u582_47:
 10061  0006AC  2EE8               	decfsz	wreg,f,c
 10062  0006AE  D7FE               	bra	i2u582_47
 10063  0006B0  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10064  0006B2  D7FC               	bra	i2u582_47
 10065  0006B4  D000               	nop2	
 10066                           
 10067                           ;main.c: 879: printf("Nut_remain:%d",N_remain);
 10068  0006B6  0ED6               	movlw	low STR_45
 10069  0006B8  6E0D               	movwf	i2printf@f,c
 10070  0006BA  0EFE               	movlw	high STR_45
 10071  0006BC  6E0E               	movwf	i2printf@f+1,c
 10072  0006BE  C0A0  F00F         	movff	_N_remain,?i2_printf+2
 10073  0006C2  C0A1  F010         	movff	_N_remain+1,?i2_printf+3
 10074  0006C6  ECE4  F018         	call	i2_printf	;wreg free
 10075                           
 10076                           ;main.c: 880: _delay((unsigned long)((300)*(40000000/4000.0)));
 10077  0006CA  0E10               	movlw	16
 10078  0006CC  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10079  0006CE  0E39               	movlw	57
 10080  0006D0  6E2B               	movwf	??_interruptHandler& (0+255),c
 10081  0006D2  0E0E               	movlw	14
 10082  0006D4                     i2u583_47:
 10083  0006D4  2EE8               	decfsz	wreg,f,c
 10084  0006D6  D7FE               	bra	i2u583_47
 10085  0006D8  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10086  0006DA  D7FC               	bra	i2u583_47
 10087  0006DC  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10088  0006DE  D7FA               	bra	i2u583_47
 10089                           
 10090                           ;main.c: 881: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10091  0006E0  0E01               	movlw	1
 10092  0006E2  EC35  F024         	call	i2_lcdInst
 10093  0006E6  0EC3               	movlw	195
 10094  0006E8  6E2B               	movwf	??_interruptHandler& (0+255),c
 10095  0006EA  0ECD               	movlw	205
 10096  0006EC                     i2u584_47:
 10097  0006EC  2EE8               	decfsz	wreg,f,c
 10098  0006EE  D7FE               	bra	i2u584_47
 10099  0006F0  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10100  0006F2  D7FC               	bra	i2u584_47
 10101  0006F4  F000               	nop	
 10102                           
 10103                           ;main.c: 882: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
 10104  0006F6  0E80               	movlw	128
 10105  0006F8  EC35  F024         	call	i2_lcdInst
 10106  0006FC  0E41               	movlw	65
 10107  0006FE  6E2B               	movwf	??_interruptHandler& (0+255),c
 10108  000700  0EEE               	movlw	238
 10109  000702                     i2u585_47:
 10110  000702  2EE8               	decfsz	wreg,f,c
 10111  000704  D7FE               	bra	i2u585_47
 10112  000706  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10113  000708  D7FC               	bra	i2u585_47
 10114  00070A  D000               	nop2	
 10115                           
 10116                           ;main.c: 883: printf("Spacer_remain:%d",S_remain);
 10117  00070C  0EB0               	movlw	low STR_46
 10118  00070E  6E0D               	movwf	i2printf@f,c
 10119  000710  0EFD               	movlw	high STR_46
 10120  000712  6E0E               	movwf	i2printf@f+1,c
 10121  000714  C09E  F00F         	movff	_S_remain,?i2_printf+2
 10122  000718  C09F  F010         	movff	_S_remain+1,?i2_printf+3
 10123  00071C  ECE4  F018         	call	i2_printf	;wreg free
 10124                           
 10125                           ;main.c: 884: _delay((unsigned long)((300)*(40000000/4000.0)));
 10126  000720  0E10               	movlw	16
 10127  000722  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10128  000724  0E39               	movlw	57
 10129  000726  6E2B               	movwf	??_interruptHandler& (0+255),c
 10130  000728  0E0E               	movlw	14
 10131  00072A                     i2u586_47:
 10132  00072A  2EE8               	decfsz	wreg,f,c
 10133  00072C  D7FE               	bra	i2u586_47
 10134  00072E  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10135  000730  D7FC               	bra	i2u586_47
 10136  000732  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10137  000734  D7FA               	bra	i2u586_47
 10138                           
 10139                           ;main.c: 885: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10140  000736  0E01               	movlw	1
 10141  000738  EC35  F024         	call	i2_lcdInst
 10142  00073C  0EC3               	movlw	195
 10143  00073E  6E2B               	movwf	??_interruptHandler& (0+255),c
 10144  000740  0ECD               	movlw	205
 10145  000742                     i2u587_47:
 10146  000742  2EE8               	decfsz	wreg,f,c
 10147  000744  D7FE               	bra	i2u587_47
 10148  000746  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10149  000748  D7FC               	bra	i2u587_47
 10150  00074A  F000               	nop	
 10151                           
 10152                           ;main.c: 886: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
 10153  00074C  0E80               	movlw	128
 10154  00074E  EC35  F024         	call	i2_lcdInst
 10155  000752  0E41               	movlw	65
 10156  000754  6E2B               	movwf	??_interruptHandler& (0+255),c
 10157  000756  0EEE               	movlw	238
 10158  000758                     i2u588_47:
 10159  000758  2EE8               	decfsz	wreg,f,c
 10160  00075A  D7FE               	bra	i2u588_47
 10161  00075C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10162  00075E  D7FC               	bra	i2u588_47
 10163  000760  D000               	nop2	
 10164                           
 10165                           ;main.c: 887: printf("Washer_remain:%d",W_remain);
 10166  000762  0EC1               	movlw	low STR_47
 10167  000764  6E0D               	movwf	i2printf@f,c
 10168  000766  0EFD               	movlw	high STR_47
 10169  000768  6E0E               	movwf	i2printf@f+1,c
 10170  00076A  C09C  F00F         	movff	_W_remain,?i2_printf+2
 10171  00076E  C09D  F010         	movff	_W_remain+1,?i2_printf+3
 10172  000772  ECE4  F018         	call	i2_printf	;wreg free
 10173                           
 10174                           ;main.c: 888: _delay((unsigned long)((300)*(40000000/4000.0)));
 10175  000776  0E10               	movlw	16
 10176  000778  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10177  00077A  0E39               	movlw	57
 10178  00077C  6E2B               	movwf	??_interruptHandler& (0+255),c
 10179  00077E  0E0E               	movlw	14
 10180  000780                     i2u589_47:
 10181  000780  2EE8               	decfsz	wreg,f,c
 10182  000782  D7FE               	bra	i2u589_47
 10183  000784  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10184  000786  D7FC               	bra	i2u589_47
 10185  000788  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10186  00078A  D7FA               	bra	i2u589_47
 10187                           
 10188                           ;main.c: 889: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10189  00078C  0E01               	movlw	1
 10190  00078E  EC35  F024         	call	i2_lcdInst
 10191  000792  0EC3               	movlw	195
 10192  000794  6E2B               	movwf	??_interruptHandler& (0+255),c
 10193  000796  0ECD               	movlw	205
 10194  000798                     i2u590_47:
 10195  000798  2EE8               	decfsz	wreg,f,c
 10196  00079A  D7FE               	bra	i2u590_47
 10197  00079C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10198  00079E  D7FC               	bra	i2u590_47
 10199  0007A0  F000               	nop	
 10200                           
 10201                           ;main.c: 890: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
 10202  0007A2  0E80               	movlw	128
 10203  0007A4  EC35  F024         	call	i2_lcdInst
 10204  0007A8  0E41               	movlw	65
 10205  0007AA  6E2B               	movwf	??_interruptHandler& (0+255),c
 10206  0007AC  0EEE               	movlw	238
 10207  0007AE                     i2u591_47:
 10208  0007AE  2EE8               	decfsz	wreg,f,c
 10209  0007B0  D7FE               	bra	i2u591_47
 10210  0007B2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10211  0007B4  D7FC               	bra	i2u591_47
 10212  0007B6  D000               	nop2	
 10213                           
 10214                           ;main.c: 891: printf("operation time:");
 10215  0007B8  0EF4               	movlw	low STR_56
 10216  0007BA  6E0D               	movwf	i2printf@f,c
 10217  0007BC  0EFD               	movlw	high STR_56
 10218  0007BE  6E0E               	movwf	i2printf@f+1,c
 10219  0007C0  ECE4  F018         	call	i2_printf	;wreg free
 10220                           
 10221                           ;main.c: 892: lcdInst(0xC0);;
 10222  0007C4  0EC0               	movlw	192
 10223  0007C6  EC35  F024         	call	i2_lcdInst
 10224                           
 10225                           ;main.c: 893: printf("00:04:03");
 10226  0007CA  0E89               	movlw	low STR_69
 10227  0007CC  6E0D               	movwf	i2printf@f,c
 10228  0007CE  0EFF               	movlw	high STR_69
 10229  0007D0  6E0E               	movwf	i2printf@f+1,c
 10230  0007D2  ECE4  F018         	call	i2_printf	;wreg free
 10231                           
 10232                           ;main.c: 894: _delay((unsigned long)((1000)*(40000000/4000.0)));
 10233  0007D6  0E33               	movlw	51
 10234  0007D8  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10235  0007DA  0EBB               	movlw	187
 10236  0007DC  6E2B               	movwf	??_interruptHandler& (0+255),c
 10237  0007DE  0EE0               	movlw	224
 10238  0007E0                     i2u592_47:
 10239  0007E0  2EE8               	decfsz	wreg,f,c
 10240  0007E2  D7FE               	bra	i2u592_47
 10241  0007E4  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10242  0007E6  D7FC               	bra	i2u592_47
 10243  0007E8  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10244  0007EA  D7FA               	bra	i2u592_47
 10245                           
 10246                           ;main.c: 895: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10247  0007EC  0E01               	movlw	1
 10248  0007EE  EC35  F024         	call	i2_lcdInst
 10249  0007F2  0EC3               	movlw	195
 10250  0007F4  6E2B               	movwf	??_interruptHandler& (0+255),c
 10251  0007F6  0ECD               	movlw	205
 10252  0007F8                     i2u593_47:
 10253  0007F8  2EE8               	decfsz	wreg,f,c
 10254  0007FA  D7FE               	bra	i2u593_47
 10255  0007FC  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10256  0007FE  D7FC               	bra	i2u593_47
 10257  000800  F000               	nop	
 10258                           
 10259                           ;main.c: 896: printf("you're done");
 10260  000802  0E32               	movlw	low STR_48
 10261  000804  6E0D               	movwf	i2printf@f,c
 10262  000806  0EFF               	movlw	high STR_48
 10263  000808  6E0E               	movwf	i2printf@f+1,c
 10264  00080A  ECE4  F018         	call	i2_printf	;wreg free
 10265                           
 10266                           ;main.c: 897: _delay((unsigned long)((1000)*(40000000/4000.0)));
 10267  00080E  0E33               	movlw	51
 10268  000810  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10269  000812  0EBB               	movlw	187
 10270  000814  6E2B               	movwf	??_interruptHandler& (0+255),c
 10271  000816  0EE0               	movlw	224
 10272  000818                     i2u594_47:
 10273  000818  2EE8               	decfsz	wreg,f,c
 10274  00081A  D7FE               	bra	i2u594_47
 10275  00081C  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10276  00081E  D7FC               	bra	i2u594_47
 10277  000820  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10278  000822  D7FA               	bra	i2u594_47
 10279                           
 10280                           ;main.c: 898: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
 10281  000824  0E80               	movlw	128
 10282  000826  EC35  F024         	call	i2_lcdInst
 10283  00082A  0E41               	movlw	65
 10284  00082C  6E2B               	movwf	??_interruptHandler& (0+255),c
 10285  00082E  0EEE               	movlw	238
 10286  000830                     i2u595_47:
 10287  000830  2EE8               	decfsz	wreg,f,c
 10288  000832  D7FE               	bra	i2u595_47
 10289  000834  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10290  000836  D7FC               	bra	i2u595_47
 10291  000838  D000               	nop2	
 10292  00083A  D3BB               	goto	i2l6348
 10293  00083C                     i2l443:
 10294                           
 10295                           ;main.c: 903: }
 10296                           ;main.c: 905: if (temp == '4'){
 10297  00083C  0E34               	movlw	52
 10298  00083E  1845               	xorwf	interruptHandler@temp,w,c
 10299  000840  A4D8               	btfss	status,2,c
 10300  000842  D00A               	goto	i2l446
 10301                           
 10302                           ;main.c: 906: operation_done = 1;
 10303  000844  0E00               	movlw	0
 10304  000846  0100               	movlb	0	; () banked
 10305  000848  6FB7               	movwf	(_operation_done+1)& (0+255),b
 10306  00084A  0E01               	movlw	1
 10307  00084C  6FB6               	movwf	_operation_done& (0+255),b
 10308                           
 10309                           ;main.c: 907: mode = 0;
 10310  00084E  0E00               	movlw	0
 10311  000850  6FBB               	movwf	(_mode+1)& (0+255),b
 10312  000852  0E00               	movlw	0
 10313  000854                     L10:
 10314  000854  6FBA               	movwf	_mode& (0+255),b
 10315  000856  D3AD               	goto	i2l6348
 10316  000858                     i2l446:
 10317                           
 10318                           ;main.c: 910: }
 10319                           ;main.c: 912: }
 10320                           ;main.c: 937: if (state == 0){
 10321                           
 10322                           ; BSR set to: 0
 10323                           
 10324                           ; BSR set to: 0
 10325  000858  0100               	movlb	0	; () banked
 10326  00085A  51AE               	movf	_state& (0+255),w,b
 10327  00085C  11AF               	iorwf	(_state+1)& (0+255),w,b
 10328  00085E  A4D8               	btfss	status,2,c
 10329  000860  D0CD               	goto	i2l447
 10330                           
 10331                           ; BSR set to: 0
 10332                           ;main.c: 939: if(temp == '4'){
 10333  000862  0E34               	movlw	52
 10334  000864  1845               	xorwf	interruptHandler@temp,w,c
 10335  000866  A4D8               	btfss	status,2,c
 10336  000868  D01F               	goto	i2l448
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;main.c: 940: assembly_step = 4;
 10340  00086A  0E00               	movlw	0
 10341  00086C  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10342  00086E  0E04               	movlw	4
 10343  000870  6FAC               	movwf	_assembly_step& (0+255),b
 10344                           
 10345                           ; BSR set to: 0
 10346                           ;main.c: 941: prev_state = state;
 10347  000872  C0AE  F067         	movff	_state,_prev_state
 10348  000876  C0AF  F068         	movff	_state+1,_prev_state+1
 10349                           
 10350                           ;main.c: 942: state = 1;
 10351  00087A  0E00               	movlw	0
 10352  00087C  6FAF               	movwf	(_state+1)& (0+255),b
 10353  00087E  0E01               	movlw	1
 10354  000880  6FAE               	movwf	_state& (0+255),b
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;main.c: 943: lcdInst(0xC0);;
 10358  000882  0EC0               	movlw	192
 10359  000884  EC35  F024         	call	i2_lcdInst
 10360                           
 10361                           ;main.c: 944: putch(keys[keypress]);
 10362  000888  5044               	movf	interruptHandler@keypress,w,c
 10363  00088A  0D01               	mullw	1
 10364  00088C  0E93               	movlw	low _keys
 10365  00088E  24F3               	addwf	prodl,w,c
 10366  000890  6EF6               	movwf	tblptrl,c
 10367  000892  0EFC               	movlw	high _keys
 10368  000894  20F4               	addwfc	prodh,w,c
 10369  000896  6EF7               	movwf	tblptrh,c
 10370  000898                     	if	1	;There are 3 active tblptr bytes
 10371  000898  6AF8               	clrf	tblptru,c
 10372  00089A  0E00               	movlw	low (__mediumconst shr (0+16))
 10373  00089C  22F8               	addwfc	tblptru,f,c
 10374  00089E                     	endif
 10375  00089E  0008               	tblrd		*
 10376  0008A0  50F5               	movf	tablat,w,c
 10377  0008A2  EC2B  F024         	call	i2_putch
 10378                           
 10379                           ;main.c: 946: }
 10380  0008A6  D0A3               	goto	i2l457
 10381  0008A8                     i2l448:
 10382                           
 10383                           ;main.c: 947: else if(temp == '5'){
 10384  0008A8  0E35               	movlw	53
 10385  0008AA  1845               	xorwf	interruptHandler@temp,w,c
 10386  0008AC  A4D8               	btfss	status,2,c
 10387  0008AE  D020               	goto	i2l450
 10388                           
 10389                           ;main.c: 948: assembly_step = 5;
 10390  0008B0  0E00               	movlw	0
 10391  0008B2  0100               	movlb	0	; () banked
 10392  0008B4  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10393  0008B6  0E05               	movlw	5
 10394  0008B8  6FAC               	movwf	_assembly_step& (0+255),b
 10395                           
 10396                           ; BSR set to: 0
 10397                           ;main.c: 949: prev_state = state;
 10398  0008BA  C0AE  F067         	movff	_state,_prev_state
 10399  0008BE  C0AF  F068         	movff	_state+1,_prev_state+1
 10400                           
 10401                           ;main.c: 950: state = 1;
 10402  0008C2  0E00               	movlw	0
 10403  0008C4  6FAF               	movwf	(_state+1)& (0+255),b
 10404  0008C6  0E01               	movlw	1
 10405  0008C8  6FAE               	movwf	_state& (0+255),b
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;main.c: 951: lcdInst(0xC0);;
 10409  0008CA  0EC0               	movlw	192
 10410  0008CC  EC35  F024         	call	i2_lcdInst
 10411                           
 10412                           ;main.c: 952: putch(keys[keypress]);
 10413  0008D0  5044               	movf	interruptHandler@keypress,w,c
 10414  0008D2  0D01               	mullw	1
 10415  0008D4  0E93               	movlw	low _keys
 10416  0008D6  24F3               	addwf	prodl,w,c
 10417  0008D8  6EF6               	movwf	tblptrl,c
 10418  0008DA  0EFC               	movlw	high _keys
 10419  0008DC  20F4               	addwfc	prodh,w,c
 10420  0008DE  6EF7               	movwf	tblptrh,c
 10421  0008E0                     	if	1	;There are 3 active tblptr bytes
 10422  0008E0  6AF8               	clrf	tblptru,c
 10423  0008E2  0E00               	movlw	low (__mediumconst shr (0+16))
 10424  0008E4  22F8               	addwfc	tblptru,f,c
 10425  0008E6                     	endif
 10426  0008E6  0008               	tblrd		*
 10427  0008E8  50F5               	movf	tablat,w,c
 10428  0008EA  EC2B  F024         	call	i2_putch
 10429                           
 10430                           ;main.c: 954: }
 10431  0008EE  D07F               	goto	i2l457
 10432  0008F0                     i2l450:
 10433                           
 10434                           ;main.c: 955: else if (temp == '6') {
 10435  0008F0  0E36               	movlw	54
 10436  0008F2  1845               	xorwf	interruptHandler@temp,w,c
 10437  0008F4  A4D8               	btfss	status,2,c
 10438  0008F6  D020               	goto	i2l452
 10439                           
 10440                           ;main.c: 956: assembly_step = 6;
 10441  0008F8  0E00               	movlw	0
 10442  0008FA  0100               	movlb	0	; () banked
 10443  0008FC  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10444  0008FE  0E06               	movlw	6
 10445  000900  6FAC               	movwf	_assembly_step& (0+255),b
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;main.c: 957: prev_state = state;
 10449  000902  C0AE  F067         	movff	_state,_prev_state
 10450  000906  C0AF  F068         	movff	_state+1,_prev_state+1
 10451                           
 10452                           ;main.c: 958: state = 1;
 10453  00090A  0E00               	movlw	0
 10454  00090C  6FAF               	movwf	(_state+1)& (0+255),b
 10455  00090E  0E01               	movlw	1
 10456  000910  6FAE               	movwf	_state& (0+255),b
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;main.c: 959: lcdInst(0xC0);;
 10460  000912  0EC0               	movlw	192
 10461  000914  EC35  F024         	call	i2_lcdInst
 10462                           
 10463                           ;main.c: 960: putch(keys[keypress]);
 10464  000918  5044               	movf	interruptHandler@keypress,w,c
 10465  00091A  0D01               	mullw	1
 10466  00091C  0E93               	movlw	low _keys
 10467  00091E  24F3               	addwf	prodl,w,c
 10468  000920  6EF6               	movwf	tblptrl,c
 10469  000922  0EFC               	movlw	high _keys
 10470  000924  20F4               	addwfc	prodh,w,c
 10471  000926  6EF7               	movwf	tblptrh,c
 10472  000928                     	if	1	;There are 3 active tblptr bytes
 10473  000928  6AF8               	clrf	tblptru,c
 10474  00092A  0E00               	movlw	low (__mediumconst shr (0+16))
 10475  00092C  22F8               	addwfc	tblptru,f,c
 10476  00092E                     	endif
 10477  00092E  0008               	tblrd		*
 10478  000930  50F5               	movf	tablat,w,c
 10479  000932  EC2B  F024         	call	i2_putch
 10480                           
 10481                           ;main.c: 961: }
 10482  000936  D05B               	goto	i2l457
 10483  000938                     i2l452:
 10484                           
 10485                           ;main.c: 962: else if (temp == '7'){
 10486  000938  0E37               	movlw	55
 10487  00093A  1845               	xorwf	interruptHandler@temp,w,c
 10488  00093C  A4D8               	btfss	status,2,c
 10489  00093E  D020               	goto	i2l454
 10490                           
 10491                           ;main.c: 963: assembly_step = 7;
 10492  000940  0E00               	movlw	0
 10493  000942  0100               	movlb	0	; () banked
 10494  000944  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10495  000946  0E07               	movlw	7
 10496  000948  6FAC               	movwf	_assembly_step& (0+255),b
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;main.c: 964: prev_state = state;
 10500  00094A  C0AE  F067         	movff	_state,_prev_state
 10501  00094E  C0AF  F068         	movff	_state+1,_prev_state+1
 10502                           
 10503                           ;main.c: 965: state = 1;
 10504  000952  0E00               	movlw	0
 10505  000954  6FAF               	movwf	(_state+1)& (0+255),b
 10506  000956  0E01               	movlw	1
 10507  000958  6FAE               	movwf	_state& (0+255),b
 10508                           
 10509                           ; BSR set to: 0
 10510                           ;main.c: 966: lcdInst(0xC0);;
 10511  00095A  0EC0               	movlw	192
 10512  00095C  EC35  F024         	call	i2_lcdInst
 10513                           
 10514                           ;main.c: 967: putch(keys[keypress]);
 10515  000960  5044               	movf	interruptHandler@keypress,w,c
 10516  000962  0D01               	mullw	1
 10517  000964  0E93               	movlw	low _keys
 10518  000966  24F3               	addwf	prodl,w,c
 10519  000968  6EF6               	movwf	tblptrl,c
 10520  00096A  0EFC               	movlw	high _keys
 10521  00096C  20F4               	addwfc	prodh,w,c
 10522  00096E  6EF7               	movwf	tblptrh,c
 10523  000970                     	if	1	;There are 3 active tblptr bytes
 10524  000970  6AF8               	clrf	tblptru,c
 10525  000972  0E00               	movlw	low (__mediumconst shr (0+16))
 10526  000974  22F8               	addwfc	tblptru,f,c
 10527  000976                     	endif
 10528  000976  0008               	tblrd		*
 10529  000978  50F5               	movf	tablat,w,c
 10530  00097A  EC2B  F024         	call	i2_putch
 10531                           
 10532                           ;main.c: 969: }
 10533  00097E  D037               	goto	i2l457
 10534  000980                     i2l454:
 10535                           
 10536                           ;main.c: 970: else if (temp == '8'){
 10537  000980  0E38               	movlw	56
 10538  000982  1845               	xorwf	interruptHandler@temp,w,c
 10539  000984  A4D8               	btfss	status,2,c
 10540  000986  D020               	goto	i2l456
 10541                           
 10542                           ;main.c: 971: assembly_step = 8;
 10543  000988  0E00               	movlw	0
 10544  00098A  0100               	movlb	0	; () banked
 10545  00098C  6FAD               	movwf	(_assembly_step+1)& (0+255),b
 10546  00098E  0E08               	movlw	8
 10547  000990  6FAC               	movwf	_assembly_step& (0+255),b
 10548                           
 10549                           ; BSR set to: 0
 10550                           ;main.c: 972: prev_state = state;
 10551  000992  C0AE  F067         	movff	_state,_prev_state
 10552  000996  C0AF  F068         	movff	_state+1,_prev_state+1
 10553                           
 10554                           ;main.c: 973: state = 1;
 10555  00099A  0E00               	movlw	0
 10556  00099C  6FAF               	movwf	(_state+1)& (0+255),b
 10557  00099E  0E01               	movlw	1
 10558  0009A0  6FAE               	movwf	_state& (0+255),b
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;main.c: 974: lcdInst(0xC0);;
 10562  0009A2  0EC0               	movlw	192
 10563  0009A4  EC35  F024         	call	i2_lcdInst
 10564                           
 10565                           ;main.c: 975: putch(keys[keypress]);
 10566  0009A8  5044               	movf	interruptHandler@keypress,w,c
 10567  0009AA  0D01               	mullw	1
 10568  0009AC  0E93               	movlw	low _keys
 10569  0009AE  24F3               	addwf	prodl,w,c
 10570  0009B0  6EF6               	movwf	tblptrl,c
 10571  0009B2  0EFC               	movlw	high _keys
 10572  0009B4  20F4               	addwfc	prodh,w,c
 10573  0009B6  6EF7               	movwf	tblptrh,c
 10574  0009B8                     	if	1	;There are 3 active tblptr bytes
 10575  0009B8  6AF8               	clrf	tblptru,c
 10576  0009BA  0E00               	movlw	low (__mediumconst shr (0+16))
 10577  0009BC  22F8               	addwfc	tblptru,f,c
 10578  0009BE                     	endif
 10579  0009BE  0008               	tblrd		*
 10580  0009C0  50F5               	movf	tablat,w,c
 10581  0009C2  EC2B  F024         	call	i2_putch
 10582                           
 10583                           ;main.c: 977: }
 10584  0009C6  D013               	goto	i2l457
 10585  0009C8                     i2l456:
 10586                           
 10587                           ;main.c: 978: else{
 10588                           ;main.c: 984: initLCD();
 10589  0009C8  EC98  F022         	call	i2_initLCD	;wreg free
 10590                           
 10591                           ;main.c: 985: printf("Wrong number! ");
 10592  0009CC  0E24               	movlw	low STR_71
 10593  0009CE  6E0D               	movwf	i2printf@f,c
 10594  0009D0  0EFE               	movlw	high STR_71
 10595  0009D2  6E0E               	movwf	i2printf@f+1,c
 10596  0009D4  ECE4  F018         	call	i2_printf	;wreg free
 10597                           
 10598                           ;main.c: 986: _delay((unsigned long)((1000)*(40000000/4000.0)));
 10599  0009D8  0E33               	movlw	51
 10600  0009DA  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10601  0009DC  0EBB               	movlw	187
 10602  0009DE  6E2B               	movwf	??_interruptHandler& (0+255),c
 10603  0009E0  0EE0               	movlw	224
 10604  0009E2                     i2u596_47:
 10605  0009E2  2EE8               	decfsz	wreg,f,c
 10606  0009E4  D7FE               	bra	i2u596_47
 10607  0009E6  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10608  0009E8  D7FC               	bra	i2u596_47
 10609  0009EA  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10610  0009EC  D7FA               	bra	i2u596_47
 10611  0009EE                     i2l457:
 10612                           
 10613                           ;main.c: 988: }
 10614                           ;main.c: 994: generate_compartment_array(assembly_step);
 10615  0009EE  C0AC  F001         	movff	_assembly_step,i2generate_compartment_array@step
 10616  0009F2  C0AD  F002         	movff	_assembly_step+1,i2generate_compartment_array@step+1
 10617  0009F6  ECF1  F01A         	call	i2_generate_compartment_array	;wreg free
 10618  0009FA  D2DB               	goto	i2l6348
 10619  0009FC                     i2l447:
 10620                           
 10621                           ;main.c: 1001: }
 10622                           ;main.c: 1009: if(state == 1){
 10623  0009FC  0100               	movlb	0	; () banked
 10624  0009FE  05AE               	decf	_state& (0+255),w,b
 10625  000A00  11AF               	iorwf	(_state+1)& (0+255),w,b
 10626  000A02  A4D8               	btfss	status,2,c
 10627  000A04  D19D               	goto	i2l458
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;main.c: 1010: if (temp == 'A'){
 10631  000A06  0E41               	movlw	65
 10632  000A08  1845               	xorwf	interruptHandler@temp,w,c
 10633  000A0A  A4D8               	btfss	status,2,c
 10634  000A0C  D004               	goto	i2l459
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;main.c: 1011: state = prev_state;
 10638  000A0E  C067  F0AE         	movff	_prev_state,_state
 10639  000A12  C068  F0AF         	movff	_prev_state+1,_state+1
 10640  000A16                     i2l459:
 10641                           
 10642                           ; BSR set to: 0
 10643                           ;main.c: 1012: }
 10644                           ;main.c: 1014: if (temp == '1'){
 10645                           
 10646                           ; BSR set to: 0
 10647  000A16  0E31               	movlw	49
 10648  000A18  1845               	xorwf	interruptHandler@temp,w,c
 10649  000A1A  A4D8               	btfss	status,2,c
 10650  000A1C  D01C               	goto	i2l460
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;main.c: 1015: lcdInst(0xC0);;
 10654  000A1E  0EC0               	movlw	192
 10655  000A20  EC35  F024         	call	i2_lcdInst
 10656                           
 10657                           ;main.c: 1016: putch('B');
 10658  000A24  0E42               	movlw	66
 10659  000A26  EC2B  F024         	call	i2_putch
 10660                           
 10661                           ;main.c: 1017: strcpy(temp_set,"B");
 10662  000A2A  0ECE               	movlw	low _temp_set
 10663  000A2C  6E07               	movwf	strcpy@to,c
 10664  000A2E  0E01               	movlw	high _temp_set
 10665  000A30  6E08               	movwf	strcpy@to+1,c
 10666  000A32  0EFD               	movlw	low STR_72
 10667  000A34  6E09               	movwf	strcpy@from,c
 10668  000A36  0EFF               	movlw	high STR_72
 10669  000A38  6E0A               	movwf	strcpy@from+1,c
 10670  000A3A  ECE3  F022         	call	_strcpy	;wreg free
 10671                           
 10672                           ;main.c: 1018: strcat(current_set,temp_set);
 10673  000A3E  0EC3               	movlw	low _current_set
 10674  000A40  6E01               	movwf	strcat@to,c
 10675  000A42  0E00               	movlw	high _current_set
 10676  000A44  6E02               	movwf	strcat@to+1,c
 10677  000A46  0ECE               	movlw	low _temp_set
 10678  000A48  6E03               	movwf	strcat@from,c
 10679  000A4A  0E01               	movlw	high _temp_set
 10680  000A4C  6E04               	movwf	strcat@from+1,c
 10681  000A4E  EC49  F023         	call	_strcat	;wreg free
 10682                           
 10683                           ;main.c: 1019: counter++;
 10684  000A52  4A6F               	infsnz	_counter,f,c
 10685  000A54  2A70               	incf	_counter+1,f,c
 10686  000A56                     i2l460:
 10687                           
 10688                           ;main.c: 1020: }
 10689                           ;main.c: 1022: if(temp == '2'){
 10690  000A56  0E32               	movlw	50
 10691  000A58  1845               	xorwf	interruptHandler@temp,w,c
 10692  000A5A  A4D8               	btfss	status,2,c
 10693  000A5C  D01C               	goto	i2l461
 10694                           
 10695                           ;main.c: 1023: lcdInst(0xC0);;
 10696  000A5E  0EC0               	movlw	192
 10697  000A60  EC35  F024         	call	i2_lcdInst
 10698                           
 10699                           ;main.c: 1024: putch('N');
 10700  000A64  0E4E               	movlw	78
 10701  000A66  EC2B  F024         	call	i2_putch
 10702                           
 10703                           ;main.c: 1025: strcpy(temp_set,"N");
 10704  000A6A  0ECE               	movlw	low _temp_set
 10705  000A6C  6E07               	movwf	strcpy@to,c
 10706  000A6E  0E01               	movlw	high _temp_set
 10707  000A70  6E08               	movwf	strcpy@to+1,c
 10708  000A72  0EEA               	movlw	low (STR_94+2)
 10709  000A74  6E09               	movwf	strcpy@from,c
 10710  000A76  0EFF               	movlw	high (STR_94+2)
 10711  000A78  6E0A               	movwf	strcpy@from+1,c
 10712  000A7A  ECE3  F022         	call	_strcpy	;wreg free
 10713                           
 10714                           ;main.c: 1026: strcat(current_set,temp_set);
 10715  000A7E  0EC3               	movlw	low _current_set
 10716  000A80  6E01               	movwf	strcat@to,c
 10717  000A82  0E00               	movlw	high _current_set
 10718  000A84  6E02               	movwf	strcat@to+1,c
 10719  000A86  0ECE               	movlw	low _temp_set
 10720  000A88  6E03               	movwf	strcat@from,c
 10721  000A8A  0E01               	movlw	high _temp_set
 10722  000A8C  6E04               	movwf	strcat@from+1,c
 10723  000A8E  EC49  F023         	call	_strcat	;wreg free
 10724                           
 10725                           ;main.c: 1027: counter++;
 10726  000A92  4A6F               	infsnz	_counter,f,c
 10727  000A94  2A70               	incf	_counter+1,f,c
 10728  000A96                     i2l461:
 10729                           
 10730                           ;main.c: 1028: }
 10731                           ;main.c: 1030: if(temp == '3'){
 10732  000A96  0E33               	movlw	51
 10733  000A98  1845               	xorwf	interruptHandler@temp,w,c
 10734  000A9A  A4D8               	btfss	status,2,c
 10735  000A9C  D01C               	goto	i2l462
 10736                           
 10737                           ;main.c: 1031: lcdInst(0xC0);;
 10738  000A9E  0EC0               	movlw	192
 10739  000AA0  EC35  F024         	call	i2_lcdInst
 10740                           
 10741                           ;main.c: 1032: putch('S');
 10742  000AA4  0E53               	movlw	83
 10743  000AA6  EC2B  F024         	call	i2_putch
 10744                           
 10745                           ;main.c: 1034: strcpy(temp_set,"S");
 10746  000AAA  0ECE               	movlw	low _temp_set
 10747  000AAC  6E07               	movwf	strcpy@to,c
 10748  000AAE  0E01               	movlw	high _temp_set
 10749  000AB0  6E08               	movwf	strcpy@to+1,c
 10750  000AB2  0EEE               	movlw	low (STR_95+2)
 10751  000AB4  6E09               	movwf	strcpy@from,c
 10752  000AB6  0EFF               	movlw	high (STR_95+2)
 10753  000AB8  6E0A               	movwf	strcpy@from+1,c
 10754  000ABA  ECE3  F022         	call	_strcpy	;wreg free
 10755                           
 10756                           ;main.c: 1035: strcat(current_set,temp_set);
 10757  000ABE  0EC3               	movlw	low _current_set
 10758  000AC0  6E01               	movwf	strcat@to,c
 10759  000AC2  0E00               	movlw	high _current_set
 10760  000AC4  6E02               	movwf	strcat@to+1,c
 10761  000AC6  0ECE               	movlw	low _temp_set
 10762  000AC8  6E03               	movwf	strcat@from,c
 10763  000ACA  0E01               	movlw	high _temp_set
 10764  000ACC  6E04               	movwf	strcat@from+1,c
 10765  000ACE  EC49  F023         	call	_strcat	;wreg free
 10766                           
 10767                           ;main.c: 1036: counter++;
 10768  000AD2  4A6F               	infsnz	_counter,f,c
 10769  000AD4  2A70               	incf	_counter+1,f,c
 10770  000AD6                     i2l462:
 10771                           
 10772                           ;main.c: 1037: }
 10773                           ;main.c: 1038: if (temp == '4'){
 10774  000AD6  0E34               	movlw	52
 10775  000AD8  1845               	xorwf	interruptHandler@temp,w,c
 10776  000ADA  A4D8               	btfss	status,2,c
 10777  000ADC  D01C               	goto	i2l463
 10778                           
 10779                           ;main.c: 1039: lcdInst(0xC0);;
 10780  000ADE  0EC0               	movlw	192
 10781  000AE0  EC35  F024         	call	i2_lcdInst
 10782                           
 10783                           ;main.c: 1040: putch('W');
 10784  000AE4  0E57               	movlw	87
 10785  000AE6  EC2B  F024         	call	i2_putch
 10786                           
 10787                           ;main.c: 1042: strcpy(temp_set,"W");
 10788  000AEA  0ECE               	movlw	low _temp_set
 10789  000AEC  6E07               	movwf	strcpy@to,c
 10790  000AEE  0E01               	movlw	high _temp_set
 10791  000AF0  6E08               	movwf	strcpy@to+1,c
 10792  000AF2  0EF2               	movlw	low (STR_96+2)
 10793  000AF4  6E09               	movwf	strcpy@from,c
 10794  000AF6  0EFF               	movlw	high (STR_96+2)
 10795  000AF8  6E0A               	movwf	strcpy@from+1,c
 10796  000AFA  ECE3  F022         	call	_strcpy	;wreg free
 10797                           
 10798                           ;main.c: 1043: strcat(current_set,temp_set);
 10799  000AFE  0EC3               	movlw	low _current_set
 10800  000B00  6E01               	movwf	strcat@to,c
 10801  000B02  0E00               	movlw	high _current_set
 10802  000B04  6E02               	movwf	strcat@to+1,c
 10803  000B06  0ECE               	movlw	low _temp_set
 10804  000B08  6E03               	movwf	strcat@from,c
 10805  000B0A  0E01               	movlw	high _temp_set
 10806  000B0C  6E04               	movwf	strcat@from+1,c
 10807  000B0E  EC49  F023         	call	_strcat	;wreg free
 10808                           
 10809                           ;main.c: 1045: counter++;
 10810  000B12  4A6F               	infsnz	_counter,f,c
 10811  000B14  2A70               	incf	_counter+1,f,c
 10812  000B16                     i2l463:
 10813                           
 10814                           ;main.c: 1046: }
 10815                           ;main.c: 1048: if (keys[keypress] == '*'){
 10816  000B16  5044               	movf	interruptHandler@keypress,w,c
 10817  000B18  0D01               	mullw	1
 10818  000B1A  0E93               	movlw	low _keys
 10819  000B1C  24F3               	addwf	prodl,w,c
 10820  000B1E  6EF6               	movwf	tblptrl,c
 10821  000B20  0EFC               	movlw	high _keys
 10822  000B22  20F4               	addwfc	prodh,w,c
 10823  000B24  6EF7               	movwf	tblptrh,c
 10824  000B26                     	if	1	;There are 3 active tblptr bytes
 10825  000B26  6AF8               	clrf	tblptru,c
 10826  000B28  0E00               	movlw	low (__mediumconst shr (0+16))
 10827  000B2A  22F8               	addwfc	tblptru,f,c
 10828  000B2C                     	endif
 10829  000B2C  0008               	tblrd		*
 10830  000B2E  50F5               	movf	tablat,w,c
 10831  000B30  0A2A               	xorlw	42
 10832  000B32  A4D8               	btfss	status,2,c
 10833  000B34  D0DA               	goto	i2l464
 10834                           
 10835                           ;main.c: 1051: _delay((unsigned long)((500)*(40000000/4000.0)));
 10836  000B36  0E1A               	movlw	26
 10837  000B38  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10838  000B3A  0E5E               	movlw	94
 10839  000B3C  6E2B               	movwf	??_interruptHandler& (0+255),c
 10840  000B3E  0E6E               	movlw	110
 10841  000B40                     i2u597_47:
 10842  000B40  2EE8               	decfsz	wreg,f,c
 10843  000B42  D7FE               	bra	i2u597_47
 10844  000B44  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10845  000B46  D7FC               	bra	i2u597_47
 10846  000B48  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10847  000B4A  D7FA               	bra	i2u597_47
 10848  000B4C  D000               	nop2	
 10849                           
 10850                           ;main.c: 1052: counter ++;
 10851  000B4E  4A6F               	infsnz	_counter,f,c
 10852  000B50  2A70               	incf	_counter+1,f,c
 10853                           
 10854                           ;main.c: 1053: for (int i=0;i<20;i++){
 10855  000B52  0E00               	movlw	0
 10856  000B54  6E43               	movwf	interruptHandler@i+1,c
 10857  000B56  0E00               	movlw	0
 10858  000B58  6E42               	movwf	interruptHandler@i,c
 10859  000B5A  BE43               	btfsc	interruptHandler@i+1,7,c
 10860  000B5C  D008               	goto	i2l465
 10861  000B5E  5043               	movf	interruptHandler@i+1,w,c
 10862  000B60  E105               	bnz	i2u480_40
 10863  000B62  0E14               	movlw	20
 10864  000B64  5C42               	subwf	interruptHandler@i,w,c
 10865  000B66  B0D8               	btfsc	status,0,c
 10866  000B68  D089               	goto	i2u482_40
 10867  000B6A  D001               	goto	i2l465
 10868  000B6C                     i2u480_40:
 10869  000B6C  D087               	goto	i2u482_40
 10870  000B6E                     i2l465:
 10871                           
 10872                           ;main.c: 1054: if (strncmp(current_set,strs[i],4) == 0){
 10873  000B6E  0EC3               	movlw	low _current_set
 10874  000B70  6E07               	movwf	strncmp@s1,c
 10875  000B72  0E00               	movlw	high _current_set
 10876  000B74  6E08               	movwf	strncmp@s1+1,c
 10877  000B76  C042  F001         	movff	interruptHandler@i,i2___wmul@multiplier
 10878  000B7A  C043  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
 10879  000B7E  0E00               	movlw	0
 10880  000B80  6E04               	movwf	i2___wmul@multiplicand+1,c
 10881  000B82  0E05               	movlw	5
 10882  000B84  6E03               	movwf	i2___wmul@multiplicand,c
 10883  000B86  ECC4  F023         	call	i2___wmul	;wreg free
 10884  000B8A  0EC6               	movlw	low _strs
 10885  000B8C  2401               	addwf	?i2___wmul,w,c
 10886  000B8E  6E09               	movwf	strncmp@s2,c
 10887  000B90  0EFC               	movlw	high _strs
 10888  000B92  2002               	addwfc	?i2___wmul+1,w,c
 10889  000B94  6E0A               	movwf	strncmp@s2+1,c
 10890  000B96  0E00               	movlw	0
 10891  000B98  6E0C               	movwf	strncmp@len+1,c
 10892  000B9A  0E04               	movlw	4
 10893  000B9C  6E0B               	movwf	strncmp@len,c
 10894  000B9E  EC12  F020         	call	_strncmp	;wreg free
 10895  000BA2  5007               	movf	?_strncmp,w,c
 10896  000BA4  1008               	iorwf	?_strncmp+1,w,c
 10897  000BA6  A4D8               	btfss	status,2,c
 10898  000BA8  D062               	goto	i2l467
 10899                           
 10900                           ;main.c: 1055: strcpy(final_set[counter_step],current_set);
 10901  000BAA  C06D  F001         	movff	_counter_step,i2___wmul@multiplier
 10902  000BAE  C06E  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
 10903  000BB2  0E00               	movlw	0
 10904  000BB4  6E04               	movwf	i2___wmul@multiplicand+1,c
 10905  000BB6  0E05               	movlw	5
 10906  000BB8  6E03               	movwf	i2___wmul@multiplicand,c
 10907  000BBA  ECC4  F023         	call	i2___wmul	;wreg free
 10908  000BBE  0EA6               	movlw	low _final_set
 10909  000BC0  2401               	addwf	?i2___wmul,w,c
 10910  000BC2  6E07               	movwf	strcpy@to,c
 10911  000BC4  0E01               	movlw	high _final_set
 10912  000BC6  2002               	addwfc	?i2___wmul+1,w,c
 10913  000BC8  6E08               	movwf	strcpy@to+1,c
 10914  000BCA  0EC3               	movlw	low _current_set
 10915  000BCC  6E09               	movwf	strcpy@from,c
 10916  000BCE  0E00               	movlw	high _current_set
 10917  000BD0  6E0A               	movwf	strcpy@from+1,c
 10918  000BD2  ECE3  F022         	call	_strcpy	;wreg free
 10919                           
 10920                           ;main.c: 1056: strcpy(current_set2,current_set);
 10921  000BD6  0E78               	movlw	low _current_set2
 10922  000BD8  6E07               	movwf	strcpy@to,c
 10923  000BDA  0E00               	movlw	high _current_set2
 10924  000BDC  6E08               	movwf	strcpy@to+1,c
 10925  000BDE  0EC3               	movlw	low _current_set
 10926  000BE0  6E09               	movwf	strcpy@from,c
 10927  000BE2  0E00               	movlw	high _current_set
 10928  000BE4  6E0A               	movwf	strcpy@from+1,c
 10929  000BE6  ECE3  F022         	call	_strcpy	;wreg free
 10930                           
 10931                           ;main.c: 1059: valid = 1;
 10932  000BEA  0E00               	movlw	0
 10933  000BEC  6E6C               	movwf	_valid+1,c
 10934  000BEE  0E01               	movlw	1
 10935  000BF0  6E6B               	movwf	_valid,c
 10936                           
 10937                           ;main.c: 1060: state = 2;
 10938  000BF2  0E00               	movlw	0
 10939  000BF4  0100               	movlb	0	; () banked
 10940  000BF6  6FAF               	movwf	(_state+1)& (0+255),b
 10941  000BF8  0E02               	movlw	2
 10942  000BFA  6FAE               	movwf	_state& (0+255),b
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;main.c: 1062: initLCD();
 10946  000BFC  EC98  F022         	call	i2_initLCD	;wreg free
 10947                           
 10948                           ;main.c: 1063: printf("correct!");
 10949  000C00  0E80               	movlw	low STR_76
 10950  000C02  6E0D               	movwf	i2printf@f,c
 10951  000C04  0EFF               	movlw	high STR_76
 10952  000C06  6E0E               	movwf	i2printf@f+1,c
 10953  000C08  ECE4  F018         	call	i2_printf	;wreg free
 10954                           
 10955                           ;main.c: 1064: _delay((unsigned long)((500)*(40000000/4000.0)));
 10956  000C0C  0E1A               	movlw	26
 10957  000C0E  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10958  000C10  0E5E               	movlw	94
 10959  000C12  6E2B               	movwf	??_interruptHandler& (0+255),c
 10960  000C14  0E6E               	movlw	110
 10961  000C16                     i2u598_47:
 10962  000C16  2EE8               	decfsz	wreg,f,c
 10963  000C18  D7FE               	bra	i2u598_47
 10964  000C1A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 10965  000C1C  D7FC               	bra	i2u598_47
 10966  000C1E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10967  000C20  D7FA               	bra	i2u598_47
 10968  000C22  D000               	nop2	
 10969                           
 10970                           ;main.c: 1066: printf("%s",current_set);
 10971  000C24  0EF8               	movlw	low STR_5
 10972  000C26  6E0D               	movwf	i2printf@f,c
 10973  000C28  0EFF               	movlw	high STR_5
 10974  000C2A  6E0E               	movwf	i2printf@f+1,c
 10975  000C2C  0EC3               	movlw	low _current_set
 10976  000C2E  6E0F               	movwf	?i2_printf+2,c
 10977  000C30  0E00               	movlw	high _current_set
 10978  000C32  6E10               	movwf	?i2_printf+3,c
 10979  000C34  ECE4  F018         	call	i2_printf	;wreg free
 10980                           
 10981                           ;main.c: 1068: strcpy(current_set,"");
 10982  000C38  0EC3               	movlw	low _current_set
 10983  000C3A  6E07               	movwf	strcpy@to,c
 10984  000C3C  0E00               	movlw	high _current_set
 10985  000C3E  6E08               	movwf	strcpy@to+1,c
 10986  000C40  0E32               	movlw	low (STR_71+14)
 10987  000C42  6E09               	movwf	strcpy@from,c
 10988  000C44  0EFE               	movlw	high (STR_71+14)
 10989  000C46  6E0A               	movwf	strcpy@from+1,c
 10990  000C48  ECE3  F022         	call	_strcpy	;wreg free
 10991                           
 10992                           ;main.c: 1069: _delay((unsigned long)((500)*(40000000/4000.0)));
 10993  000C4C  0E1A               	movlw	26
 10994  000C4E  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 10995  000C50  0E5E               	movlw	94
 10996  000C52  6E2B               	movwf	??_interruptHandler& (0+255),c
 10997  000C54  0E6E               	movlw	110
 10998  000C56                     i2u599_47:
 10999  000C56  2EE8               	decfsz	wreg,f,c
 11000  000C58  D7FE               	bra	i2u599_47
 11001  000C5A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11002  000C5C  D7FC               	bra	i2u599_47
 11003  000C5E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11004  000C60  D7FA               	bra	i2u599_47
 11005  000C62  D000               	nop2	
 11006                           
 11007                           ;main.c: 1070: counter = 0;
 11008  000C64  0E00               	movlw	0
 11009  000C66  6E70               	movwf	_counter+1,c
 11010  000C68  0E00               	movlw	0
 11011  000C6A  6E6F               	movwf	_counter,c
 11012                           
 11013                           ;main.c: 1071: break;
 11014  000C6C  D007               	goto	i2u482_40
 11015  000C6E                     i2l467:
 11016  000C6E  4A42               	infsnz	interruptHandler@i,f,c
 11017  000C70  2A43               	incf	interruptHandler@i+1,f,c
 11018  000C72  BE43               	btfsc	interruptHandler@i+1,7,c
 11019  000C74  D77C               	goto	i2l465
 11020  000C76  5043               	movf	interruptHandler@i+1,w,c
 11021  000C78  E101               	bnz	i2l6236
 11022  000C7A  D773               	goto	L5
 11023  000C7C                     i2u482_40:
 11024  000C7C                     i2l6236:
 11025                           
 11026                           ;main.c: 1073: }
 11027                           ;main.c: 1074: }
 11028                           ;main.c: 1075: if (valid != 1){
 11029  000C7C  046B               	decf	_valid,w,c
 11030  000C7E  106C               	iorwf	_valid+1,w,c
 11031  000C80  B4D8               	btfsc	status,2,c
 11032  000C82  D02F               	goto	i2l468
 11033                           
 11034                           ;main.c: 1077: initLCD();
 11035  000C84  EC98  F022         	call	i2_initLCD	;wreg free
 11036                           
 11037                           ;main.c: 1078: printf("wrong set!");
 11038  000C88  0E4A               	movlw	low STR_79
 11039  000C8A  6E0D               	movwf	i2printf@f,c
 11040  000C8C  0EFF               	movlw	high STR_79
 11041  000C8E  6E0E               	movwf	i2printf@f+1,c
 11042  000C90  ECE4  F018         	call	i2_printf	;wreg free
 11043                           
 11044                           ;main.c: 1079: printf("%s",current_set);
 11045  000C94  0EF8               	movlw	low STR_5
 11046  000C96  6E0D               	movwf	i2printf@f,c
 11047  000C98  0EFF               	movlw	high STR_5
 11048  000C9A  6E0E               	movwf	i2printf@f+1,c
 11049  000C9C  0EC3               	movlw	low _current_set
 11050  000C9E  6E0F               	movwf	?i2_printf+2,c
 11051  000CA0  0E00               	movlw	high _current_set
 11052  000CA2  6E10               	movwf	?i2_printf+3,c
 11053  000CA4  ECE4  F018         	call	i2_printf	;wreg free
 11054                           
 11055                           ;main.c: 1080: strcpy(current_set,"");
 11056  000CA8  0EC3               	movlw	low _current_set
 11057  000CAA  6E07               	movwf	strcpy@to,c
 11058  000CAC  0E00               	movlw	high _current_set
 11059  000CAE  6E08               	movwf	strcpy@to+1,c
 11060  000CB0  0E32               	movlw	low (STR_71+14)
 11061  000CB2  6E09               	movwf	strcpy@from,c
 11062  000CB4  0EFE               	movlw	high (STR_71+14)
 11063  000CB6  6E0A               	movwf	strcpy@from+1,c
 11064  000CB8  ECE3  F022         	call	_strcpy	;wreg free
 11065                           
 11066                           ;main.c: 1081: _delay((unsigned long)((300)*(40000000/4000.0)));
 11067  000CBC  0E10               	movlw	16
 11068  000CBE  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11069  000CC0  0E39               	movlw	57
 11070  000CC2  6E2B               	movwf	??_interruptHandler& (0+255),c
 11071  000CC4  0E0E               	movlw	14
 11072  000CC6                     i2u600_47:
 11073  000CC6  2EE8               	decfsz	wreg,f,c
 11074  000CC8  D7FE               	bra	i2u600_47
 11075  000CCA  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11076  000CCC  D7FC               	bra	i2u600_47
 11077  000CCE  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11078  000CD0  D7FA               	bra	i2u600_47
 11079                           
 11080                           ;main.c: 1082: counter = 0;
 11081  000CD2  0E00               	movlw	0
 11082  000CD4  6E70               	movwf	_counter+1,c
 11083  000CD6  0E00               	movlw	0
 11084  000CD8  6E6F               	movwf	_counter,c
 11085                           
 11086                           ;main.c: 1083: valid = 0;
 11087  000CDA  0E00               	movlw	0
 11088  000CDC  6E6C               	movwf	_valid+1,c
 11089  000CDE  0E00               	movlw	0
 11090  000CE0  6E6B               	movwf	_valid,c
 11091  000CE2                     i2l468:
 11092                           
 11093                           ;main.c: 1084: }
 11094                           ;main.c: 1085: valid = 0;
 11095  000CE2  0E00               	movlw	0
 11096  000CE4  6E6C               	movwf	_valid+1,c
 11097  000CE6  0E00               	movlw	0
 11098  000CE8  6E6B               	movwf	_valid,c
 11099  000CEA                     i2l464:
 11100                           
 11101                           ;main.c: 1087: }
 11102                           ;main.c: 1090: if (counter >= 5){
 11103  000CEA  BE70               	btfsc	_counter+1,7,c
 11104  000CEC  D162               	goto	i2l6348
 11105  000CEE  5070               	movf	_counter+1,w,c
 11106  000CF0  E104               	bnz	i2u484_40
 11107  000CF2  0E05               	movlw	5
 11108  000CF4  5C6F               	subwf	_counter,w,c
 11109  000CF6  A0D8               	btfss	status,0,c
 11110  000CF8  D15C               	goto	i2l6348
 11111  000CFA                     i2u484_40:
 11112                           
 11113                           ;main.c: 1092: initLCD();
 11114  000CFA  EC98  F022         	call	i2_initLCD	;wreg free
 11115                           
 11116                           ;main.c: 1093: printf("wrong!");
 11117  000CFE  0EB3               	movlw	low STR_82
 11118  000D00  6E0D               	movwf	i2printf@f,c
 11119  000D02  0EFF               	movlw	high STR_82
 11120  000D04  6E0E               	movwf	i2printf@f+1,c
 11121  000D06  ECE4  F018         	call	i2_printf	;wreg free
 11122                           
 11123                           ;main.c: 1095: _delay((unsigned long)((500)*(40000000/4000.0)));
 11124  000D0A  0E1A               	movlw	26
 11125  000D0C  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11126  000D0E  0E5E               	movlw	94
 11127  000D10  6E2B               	movwf	??_interruptHandler& (0+255),c
 11128  000D12  0E6E               	movlw	110
 11129  000D14                     i2u601_47:
 11130  000D14  2EE8               	decfsz	wreg,f,c
 11131  000D16  D7FE               	bra	i2u601_47
 11132  000D18  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11133  000D1A  D7FC               	bra	i2u601_47
 11134  000D1C  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11135  000D1E  D7FA               	bra	i2u601_47
 11136  000D20  D000               	nop2	
 11137                           
 11138                           ;main.c: 1097: strcpy(current_set,"");
 11139  000D22  0EC3               	movlw	low _current_set
 11140  000D24  6E07               	movwf	strcpy@to,c
 11141  000D26  0E00               	movlw	high _current_set
 11142  000D28  6E08               	movwf	strcpy@to+1,c
 11143  000D2A  0E32               	movlw	low (STR_71+14)
 11144  000D2C  6E09               	movwf	strcpy@from,c
 11145  000D2E  0EFE               	movlw	high (STR_71+14)
 11146  000D30  6E0A               	movwf	strcpy@from+1,c
 11147  000D32  ECE3  F022         	call	_strcpy	;wreg free
 11148                           
 11149                           ;main.c: 1100: counter = 0;
 11150  000D36  0E00               	movlw	0
 11151  000D38  6E70               	movwf	_counter+1,c
 11152  000D3A  0E00               	movlw	0
 11153  000D3C  6E6F               	movwf	_counter,c
 11154  000D3E  D139               	goto	i2l6348
 11155  000D40                     i2l458:
 11156                           
 11157                           ;main.c: 1105: }
 11158                           ;main.c: 1110: if (state ==2){
 11159  000D40  0E02               	movlw	2
 11160  000D42  0100               	movlb	0	; () banked
 11161  000D44  19AE               	xorwf	_state& (0+255),w,b
 11162  000D46  11AF               	iorwf	(_state+1)& (0+255),w,b
 11163  000D48  A4D8               	btfss	status,2,c
 11164  000D4A  D11F               	goto	i2l486
 11165                           
 11166                           ; BSR set to: 0
 11167                           ;main.c: 1111: counter = 0;
 11168  000D4C  0E00               	movlw	0
 11169  000D4E  6E70               	movwf	_counter+1,c
 11170  000D50  0E00               	movlw	0
 11171  000D52  6E6F               	movwf	_counter,c
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;main.c: 1113: lcdInst(0xC0);;
 11175  000D54  0EC0               	movlw	192
 11176  000D56  EC35  F024         	call	i2_lcdInst
 11177                           
 11178                           ;main.c: 1114: putch(keys[keypress]);
 11179  000D5A  5044               	movf	interruptHandler@keypress,w,c
 11180  000D5C  0D01               	mullw	1
 11181  000D5E  0E93               	movlw	low _keys
 11182  000D60  24F3               	addwf	prodl,w,c
 11183  000D62  6EF6               	movwf	tblptrl,c
 11184  000D64  0EFC               	movlw	high _keys
 11185  000D66  20F4               	addwfc	prodh,w,c
 11186  000D68  6EF7               	movwf	tblptrh,c
 11187  000D6A                     	if	1	;There are 3 active tblptr bytes
 11188  000D6A  6AF8               	clrf	tblptru,c
 11189  000D6C  0E00               	movlw	low (__mediumconst shr (0+16))
 11190  000D6E  22F8               	addwfc	tblptru,f,c
 11191  000D70                     	endif
 11192  000D70  0008               	tblrd		*
 11193  000D72  50F5               	movf	tablat,w,c
 11194  000D74  EC2B  F024         	call	i2_putch
 11195                           
 11196                           ;main.c: 1116: _delay((unsigned long)((500)*(40000000/4000.0)));
 11197  000D78  0E1A               	movlw	26
 11198  000D7A  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11199  000D7C  0E5E               	movlw	94
 11200  000D7E  6E2B               	movwf	??_interruptHandler& (0+255),c
 11201  000D80  0E6E               	movlw	110
 11202  000D82                     i2u602_47:
 11203  000D82  2EE8               	decfsz	wreg,f,c
 11204  000D84  D7FE               	bra	i2u602_47
 11205  000D86  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11206  000D88  D7FC               	bra	i2u602_47
 11207  000D8A  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11208  000D8C  D7FA               	bra	i2u602_47
 11209  000D8E  D000               	nop2	
 11210                           
 11211                           ;main.c: 1118: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' 
      +                          ||keys[keypress] == '4'){
 11212  000D90  5044               	movf	interruptHandler@keypress,w,c
 11213  000D92  0D01               	mullw	1
 11214  000D94  0E93               	movlw	low _keys
 11215  000D96  24F3               	addwf	prodl,w,c
 11216  000D98  6EF6               	movwf	tblptrl,c
 11217  000D9A  0EFC               	movlw	high _keys
 11218  000D9C  20F4               	addwfc	prodh,w,c
 11219  000D9E  6EF7               	movwf	tblptrh,c
 11220  000DA0                     	if	1	;There are 3 active tblptr bytes
 11221  000DA0  6AF8               	clrf	tblptru,c
 11222  000DA2  0E00               	movlw	low (__mediumconst shr (0+16))
 11223  000DA4  22F8               	addwfc	tblptru,f,c
 11224  000DA6                     	endif
 11225  000DA6  0008               	tblrd		*
 11226  000DA8  50F5               	movf	tablat,w,c
 11227  000DAA  0A31               	xorlw	49
 11228  000DAC  B4D8               	btfsc	status,2,c
 11229  000DAE  D05A               	goto	i2l474
 11230  000DB0  5044               	movf	interruptHandler@keypress,w,c
 11231  000DB2  0D01               	mullw	1
 11232  000DB4  0E93               	movlw	low _keys
 11233  000DB6  24F3               	addwf	prodl,w,c
 11234  000DB8  6EF6               	movwf	tblptrl,c
 11235  000DBA  0EFC               	movlw	high _keys
 11236  000DBC  20F4               	addwfc	prodh,w,c
 11237  000DBE  6EF7               	movwf	tblptrh,c
 11238  000DC0                     	if	1	;There are 3 active tblptr bytes
 11239  000DC0  6AF8               	clrf	tblptru,c
 11240  000DC2  0E00               	movlw	low (__mediumconst shr (0+16))
 11241  000DC4  22F8               	addwfc	tblptru,f,c
 11242  000DC6                     	endif
 11243  000DC6  0008               	tblrd		*
 11244  000DC8  50F5               	movf	tablat,w,c
 11245  000DCA  0A32               	xorlw	50
 11246  000DCC  B4D8               	btfsc	status,2,c
 11247  000DCE  D04A               	goto	i2l474
 11248  000DD0  5044               	movf	interruptHandler@keypress,w,c
 11249  000DD2  0D01               	mullw	1
 11250  000DD4  0E93               	movlw	low _keys
 11251  000DD6  24F3               	addwf	prodl,w,c
 11252  000DD8  6EF6               	movwf	tblptrl,c
 11253  000DDA  0EFC               	movlw	high _keys
 11254  000DDC  20F4               	addwfc	prodh,w,c
 11255  000DDE  6EF7               	movwf	tblptrh,c
 11256  000DE0                     	if	1	;There are 3 active tblptr bytes
 11257  000DE0  6AF8               	clrf	tblptru,c
 11258  000DE2  0E00               	movlw	low (__mediumconst shr (0+16))
 11259  000DE4  22F8               	addwfc	tblptru,f,c
 11260  000DE6                     	endif
 11261  000DE6  0008               	tblrd		*
 11262  000DE8  50F5               	movf	tablat,w,c
 11263  000DEA  0A33               	xorlw	51
 11264  000DEC  B4D8               	btfsc	status,2,c
 11265  000DEE  D03A               	goto	i2l474
 11266  000DF0  5044               	movf	interruptHandler@keypress,w,c
 11267  000DF2  0D01               	mullw	1
 11268  000DF4  0E93               	movlw	low _keys
 11269  000DF6  24F3               	addwf	prodl,w,c
 11270  000DF8  6EF6               	movwf	tblptrl,c
 11271  000DFA  0EFC               	movlw	high _keys
 11272  000DFC  20F4               	addwfc	prodh,w,c
 11273  000DFE  6EF7               	movwf	tblptrh,c
 11274  000E00                     	if	1	;There are 3 active tblptr bytes
 11275  000E00  6AF8               	clrf	tblptru,c
 11276  000E02  0E00               	movlw	low (__mediumconst shr (0+16))
 11277  000E04  22F8               	addwfc	tblptru,f,c
 11278  000E06                     	endif
 11279  000E06  0008               	tblrd		*
 11280  000E08  50F5               	movf	tablat,w,c
 11281  000E0A  0A34               	xorlw	52
 11282  000E0C  B4D8               	btfsc	status,2,c
 11283  000E0E  D02A               	goto	i2l474
 11284  000E10  D0BC               	goto	i2l486
 11285  000E12                     
 11286                           ;main.c: 1122: number = 1;
 11287  000E12  0E00               	movlw	0
 11288  000E14  6E7E               	movwf	_number+1,c
 11289  000E16  0E01               	movlw	1
 11290  000E18  D00F               	goto	L9
 11291  000E1A                     
 11292                           ;main.c: 1125: number = 2;
 11293  000E1A  0E00               	movlw	0
 11294  000E1C  6E7E               	movwf	_number+1,c
 11295  000E1E  0E02               	movlw	2
 11296  000E20  D00B               	goto	L9
 11297  000E22                     
 11298                           ;main.c: 1128: number = 3;
 11299  000E22  0E00               	movlw	0
 11300  000E24  6E7E               	movwf	_number+1,c
 11301  000E26  0E03               	movlw	3
 11302  000E28  D007               	goto	L9
 11303  000E2A                     
 11304                           ;main.c: 1131: number = 4;
 11305  000E2A  0E00               	movlw	0
 11306  000E2C  6E7E               	movwf	_number+1,c
 11307  000E2E  0E04               	movlw	4
 11308  000E30  D003               	goto	L9
 11309  000E32                     
 11310                           ;main.c: 1134: number = 5;
 11311  000E32  0E00               	movlw	0
 11312  000E34  6E7E               	movwf	_number+1,c
 11313  000E36  0E05               	movlw	5
 11314  000E38                     L9:
 11315  000E38  6E7D               	movwf	_number,c
 11316                           
 11317                           ;main.c: 1135: break;
 11318  000E3A  D031               	goto	i2l476
 11319  000E3C                     
 11320                           ;main.c: 1137: initLCD();
 11321  000E3C  EC98  F022         	call	i2_initLCD	;wreg free
 11322                           
 11323                           ;main.c: 1138: printf("Wrong input");
 11324  000E40  0E3E               	movlw	low STR_84
 11325  000E42  6E0D               	movwf	i2printf@f,c
 11326  000E44  0EFF               	movlw	high STR_84
 11327  000E46  6E0E               	movwf	i2printf@f+1,c
 11328  000E48  ECE4  F018         	call	i2_printf	;wreg free
 11329                           
 11330                           ;main.c: 1139: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11331  000E4C  0E33               	movlw	51
 11332  000E4E  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11333  000E50  0EBB               	movlw	187
 11334  000E52  6E2B               	movwf	??_interruptHandler& (0+255),c
 11335  000E54  0EE0               	movlw	224
 11336  000E56                     i2u603_47:
 11337  000E56  2EE8               	decfsz	wreg,f,c
 11338  000E58  D7FE               	bra	i2u603_47
 11339  000E5A  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11340  000E5C  D7FC               	bra	i2u603_47
 11341  000E5E  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11342  000E60  D7FA               	bra	i2u603_47
 11343                           
 11344                           ;main.c: 1140: }
 11345  000E62  D01D               	goto	i2l476
 11346  000E64                     i2l474:
 11347  000E64  5044               	movf	interruptHandler@keypress,w,c
 11348  000E66  0D01               	mullw	1
 11349  000E68  0E93               	movlw	low _keys
 11350  000E6A  24F3               	addwf	prodl,w,c
 11351  000E6C  6EF6               	movwf	tblptrl,c
 11352  000E6E  0EFC               	movlw	high _keys
 11353  000E70  20F4               	addwfc	prodh,w,c
 11354  000E72  6EF7               	movwf	tblptrh,c
 11355  000E74                     	if	1	;There are 3 active tblptr bytes
 11356  000E74  6AF8               	clrf	tblptru,c
 11357  000E76  0E00               	movlw	low (__mediumconst shr (0+16))
 11358  000E78  22F8               	addwfc	tblptru,f,c
 11359  000E7A                     	endif
 11360  000E7A  0008               	tblrd		*
 11361  000E7C  50F5               	movf	tablat,w,c
 11362                           
 11363                           ; Switch size 1, requested type "space"
 11364                           ; Number of cases is 5, Range of values is 49 to 53
 11365                           ; switch strategies available:
 11366                           ; Name         Instructions Cycles
 11367                           ; simple_byte           16     9 (average)
 11368                           ;	Chosen strategy is simple_byte
 11369  000E7E  0A31               	xorlw	49	; case 49
 11370  000E80  B4D8               	btfsc	status,2,c
 11371  000E82  D7C7               	goto	i2l475
 11372  000E84  0A03               	xorlw	3	; case 50
 11373  000E86  B4D8               	btfsc	status,2,c
 11374  000E88  D7C8               	goto	i2l477
 11375  000E8A  0A01               	xorlw	1	; case 51
 11376  000E8C  B4D8               	btfsc	status,2,c
 11377  000E8E  D7C9               	goto	i2l478
 11378  000E90  0A07               	xorlw	7	; case 52
 11379  000E92  B4D8               	btfsc	status,2,c
 11380  000E94  D7CA               	goto	i2l479
 11381  000E96  0A01               	xorlw	1	; case 53
 11382  000E98  B4D8               	btfsc	status,2,c
 11383  000E9A  D7CB               	goto	i2l480
 11384  000E9C  D7CF               	goto	i2l481
 11385  000E9E                     i2l476:
 11386                           
 11387                           ;main.c: 1143: is_valid();
 11388  000E9E  EC98  F00F         	call	_is_valid	;wreg free
 11389                           
 11390                           ;main.c: 1145: if ( check() == 0){
 11391  000EA2  EC8F  F021         	call	_check	;wreg free
 11392  000EA6  5001               	movf	?_check,w,c
 11393  000EA8  1002               	iorwf	?_check+1,w,c
 11394  000EAA  A4D8               	btfss	status,2,c
 11395  000EAC  D029               	goto	i2l482
 11396                           
 11397                           ;main.c: 1146: initLCD();
 11398  000EAE  EC98  F022         	call	i2_initLCD	;wreg free
 11399                           
 11400                           ;main.c: 1147: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
 11401  000EB2  0E80               	movlw	128
 11402  000EB4  EC35  F024         	call	i2_lcdInst
 11403  000EB8  0E41               	movlw	65
 11404  000EBA  6E2B               	movwf	??_interruptHandler& (0+255),c
 11405  000EBC  0EEE               	movlw	238
 11406  000EBE                     i2u604_47:
 11407  000EBE  2EE8               	decfsz	wreg,f,c
 11408  000EC0  D7FE               	bra	i2u604_47
 11409  000EC2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11410  000EC4  D7FC               	bra	i2u604_47
 11411  000EC6  D000               	nop2	
 11412                           
 11413                           ;main.c: 1148: printf("TOO MANY");
 11414  000EC8  0E92               	movlw	low STR_85
 11415  000ECA  6E0D               	movwf	i2printf@f,c
 11416  000ECC  0EFF               	movlw	high STR_85
 11417  000ECE  6E0E               	movwf	i2printf@f+1,c
 11418  000ED0  ECE4  F018         	call	i2_printf	;wreg free
 11419                           
 11420                           ;main.c: 1150: _delay((unsigned long)((500)*(40000000/4000.0)));
 11421  000ED4  0E1A               	movlw	26
 11422  000ED6  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11423  000ED8  0E5E               	movlw	94
 11424  000EDA  6E2B               	movwf	??_interruptHandler& (0+255),c
 11425  000EDC  0E6E               	movlw	110
 11426  000EDE                     i2u605_47:
 11427  000EDE  2EE8               	decfsz	wreg,f,c
 11428  000EE0  D7FE               	bra	i2u605_47
 11429  000EE2  2E2B               	decfsz	??_interruptHandler& (0+255),f,c
 11430  000EE4  D7FC               	bra	i2u605_47
 11431  000EE6  2E2C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11432  000EE8  D7FA               	bra	i2u605_47
 11433  000EEA  D000               	nop2	
 11434                           
 11435                           ;main.c: 1151: state = 2;
 11436  000EEC  0E00               	movlw	0
 11437  000EEE  0100               	movlb	0	; () banked
 11438  000EF0  6FAF               	movwf	(_state+1)& (0+255),b
 11439  000EF2  0E02               	movlw	2
 11440  000EF4  6FAE               	movwf	_state& (0+255),b
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;main.c: 1152: number = 0;
 11444  000EF6  0E00               	movlw	0
 11445  000EF8  6E7E               	movwf	_number+1,c
 11446  000EFA  0E00               	movlw	0
 11447  000EFC  6E7D               	movwf	_number,c
 11448                           
 11449                           ;main.c: 1153: }
 11450  000EFE  D045               	goto	i2l486
 11451  000F00                     i2l482:
 11452                           
 11453                           ;main.c: 1156: else if (counter_step >= assembly_step-1){
 11454                           
 11455                           ; BSR set to: 0
 11456  000F00  0EFF               	movlw	255
 11457  000F02  6E2B               	movwf	??_interruptHandler& (0+255),c
 11458  000F04  0EFF               	movlw	255
 11459  000F06  6E2C               	movwf	(??_interruptHandler+1)& (0+255),c
 11460  000F08  C0AC  F02D         	movff	_assembly_step,??_interruptHandler+2
 11461  000F0C  C0AD  F02E         	movff	_assembly_step+1,??_interruptHandler+3
 11462  000F10  502B               	movf	??_interruptHandler,w,c
 11463  000F12  262D               	addwf	??_interruptHandler+2,f,c
 11464  000F14  502C               	movf	??_interruptHandler+1,w,c
 11465  000F16  222E               	addwfc	??_interruptHandler+3,f,c
 11466  000F18  502D               	movf	??_interruptHandler+2,w,c
 11467  000F1A  5C6D               	subwf	_counter_step,w,c
 11468  000F1C  506E               	movf	_counter_step+1,w,c
 11469  000F1E  0A80               	xorlw	128
 11470  000F20  6E2F               	movwf	(??_interruptHandler+4)& (0+255),c
 11471  000F22  502E               	movf	??_interruptHandler+3,w,c
 11472  000F24  0A80               	xorlw	128
 11473  000F26  582F               	subwfb	(??_interruptHandler+4)& (0+255),w,c
 11474  000F28  A0D8               	btfss	status,0,c
 11475  000F2A  D013               	goto	i2l484
 11476                           
 11477                           ;main.c: 1157: final_number[counter_step] = number;
 11478  000F2C  90D8               	bcf	status,0,c
 11479  000F2E  346D               	rlcf	_counter_step,w,c
 11480  000F30  6ED9               	movwf	fsr2l,c
 11481  000F32  346E               	rlcf	_counter_step+1,w,c
 11482  000F34  6EDA               	movwf	fsr2h,c
 11483  000F36  0E50               	movlw	low _final_number
 11484  000F38  26D9               	addwf	fsr2l,f,c
 11485  000F3A  0E01               	movlw	high _final_number
 11486  000F3C  22DA               	addwfc	fsr2h,f,c
 11487  000F3E  C07D  FFDE         	movff	_number,postinc2
 11488  000F42  C07E  FFDD         	movff	_number+1,postdec2
 11489                           
 11490                           ;main.c: 1158: state = 3;
 11491  000F46  0E00               	movlw	0
 11492  000F48  0100               	movlb	0	; () banked
 11493  000F4A  6FAF               	movwf	(_state+1)& (0+255),b
 11494  000F4C  0E03               	movlw	3
 11495  000F4E  6FAE               	movwf	_state& (0+255),b
 11496                           
 11497                           ;main.c: 1159: }
 11498  000F50  D01C               	goto	i2l486
 11499  000F52                     i2l484:
 11500                           
 11501                           ;main.c: 1160: else if ( check() == 1){
 11502                           
 11503                           ; BSR set to: 0
 11504  000F52  EC8F  F021         	call	_check	;wreg free
 11505  000F56  0401               	decf	?_check,w,c
 11506  000F58  1002               	iorwf	?_check+1,w,c
 11507  000F5A  A4D8               	btfss	status,2,c
 11508  000F5C  D016               	goto	i2l486
 11509                           
 11510                           ;main.c: 1161: state = 1;
 11511  000F5E  0E00               	movlw	0
 11512  000F60  0100               	movlb	0	; () banked
 11513  000F62  6FAF               	movwf	(_state+1)& (0+255),b
 11514  000F64  0E01               	movlw	1
 11515  000F66  6FAE               	movwf	_state& (0+255),b
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;main.c: 1162: initLCD();
 11519  000F68  EC98  F022         	call	i2_initLCD	;wreg free
 11520                           
 11521                           ;main.c: 1165: final_number[counter_step] = number;
 11522  000F6C  90D8               	bcf	status,0,c
 11523  000F6E  346D               	rlcf	_counter_step,w,c
 11524  000F70  6ED9               	movwf	fsr2l,c
 11525  000F72  346E               	rlcf	_counter_step+1,w,c
 11526  000F74  6EDA               	movwf	fsr2h,c
 11527  000F76  0E50               	movlw	low _final_number
 11528  000F78  26D9               	addwf	fsr2l,f,c
 11529  000F7A  0E01               	movlw	high _final_number
 11530  000F7C  22DA               	addwfc	fsr2h,f,c
 11531  000F7E  C07D  FFDE         	movff	_number,postinc2
 11532  000F82  C07E  FFDD         	movff	_number+1,postdec2
 11533                           
 11534                           ;main.c: 1166: counter_step++;
 11535  000F86  4A6D               	infsnz	_counter_step,f,c
 11536  000F88  2A6E               	incf	_counter_step+1,f,c
 11537  000F8A                     i2l486:
 11538                           
 11539                           ;main.c: 1167: }
 11540                           ;main.c: 1170: }
 11541                           ;main.c: 1172: }
 11542                           ;main.c: 1179: B=0;N=0;S=0;W=0;
 11543  000F8A  0E00               	movlw	0
 11544  000F8C  6E66               	movwf	_B+1,c
 11545  000F8E  0E00               	movlw	0
 11546  000F90  6E65               	movwf	_B,c
 11547  000F92  0E00               	movlw	0
 11548  000F94  6E64               	movwf	_N+1,c
 11549  000F96  0E00               	movlw	0
 11550  000F98  6E63               	movwf	_N,c
 11551  000F9A  0E00               	movlw	0
 11552  000F9C  6E62               	movwf	_S+1,c
 11553  000F9E  0E00               	movlw	0
 11554  000FA0  6E61               	movwf	_S,c
 11555  000FA2  0E00               	movlw	0
 11556  000FA4  6E60               	movwf	_W+1,c
 11557  000FA6  0E00               	movlw	0
 11558  000FA8  6E5F               	movwf	_W,c
 11559                           
 11560                           ;main.c: 1180: total_number = 0;
 11561  000FAA  0E00               	movlw	0
 11562  000FAC  6E6A               	movwf	_total_number+1,c
 11563  000FAE  0E00               	movlw	0
 11564  000FB0  6E69               	movwf	_total_number,c
 11565  000FB2                     i2l6348:
 11566                           
 11567                           ;main.c: 1182: INT1IF = 0;
 11568  000FB2  90F0               	bcf	intcon3,0,c	;volatile
 11569  000FB4                     i2l6350:
 11570                           
 11571                           ;main.c: 1183: return;
 11572  000FB4  C041  F082         	movff	??_interruptHandler+22,btemp+3
 11573  000FB8  C040  F081         	movff	??_interruptHandler+21,btemp+2
 11574  000FBC  C03F  F080         	movff	??_interruptHandler+20,btemp+1
 11575  000FC0  C03E  F07F         	movff	??_interruptHandler+19,btemp
 11576  000FC4  C03D  FFF5         	movff	??_interruptHandler+18,tablat
 11577  000FC8  C03C  FFF8         	movff	??_interruptHandler+17,tblptru
 11578  000FCC  C03B  FFF7         	movff	??_interruptHandler+16,tblptrh
 11579  000FD0  C03A  FFF6         	movff	??_interruptHandler+15,tblptrl
 11580  000FD4  C039  FFF4         	movff	??_interruptHandler+14,prodh
 11581  000FD8  C038  FFF3         	movff	??_interruptHandler+13,prodl
 11582  000FDC  C037  FFDA         	movff	??_interruptHandler+12,fsr2h
 11583  000FE0  C036  FFD9         	movff	??_interruptHandler+11,fsr2l
 11584  000FE4  C035  FFE2         	movff	??_interruptHandler+10,fsr1h
 11585  000FE8  C034  FFE1         	movff	??_interruptHandler+9,fsr1l
 11586  000FEC  C033  FFEA         	movff	??_interruptHandler+8,fsr0h
 11587  000FF0  C032  FFE9         	movff	??_interruptHandler+7,fsr0l
 11588  000FF4  C031  FFFB         	movff	??_interruptHandler+6,pclatu
 11589  000FF8  C030  FFFA         	movff	??_interruptHandler+5,pclath
 11590  000FFC  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11591  000FFE  0011               	retfie		f
 11592  001000                     __end_of_interruptHandler:
 11593                           	opt stack 0
 11594                           pclatu	equ	0xFFB
 11595                           pclath	equ	0xFFA
 11596                           tblptru	equ	0xFF8
 11597                           tblptrh	equ	0xFF7
 11598                           tblptrl	equ	0xFF6
 11599                           tablat	equ	0xFF5
 11600                           prodh	equ	0xFF4
 11601                           prodl	equ	0xFF3
 11602                           intcon	equ	0xFF2
 11603                           intcon3	equ	0xFF0
 11604                           indf0	equ	0xFEF
 11605                           postinc0	equ	0xFEE
 11606                           fsr0h	equ	0xFEA
 11607                           fsr0l	equ	0xFE9
 11608                           wreg	equ	0xFE8
 11609                           postdec1	equ	0xFE5
 11610                           fsr1h	equ	0xFE2
 11611                           fsr1l	equ	0xFE1
 11612                           indf2	equ	0xFDF
 11613                           postinc2	equ	0xFDE
 11614                           postdec2	equ	0xFDD
 11615                           fsr2h	equ	0xFDA
 11616                           fsr2l	equ	0xFD9
 11617                           status	equ	0xFD8
 11618                           
 11619 ;; *************** function i2_printf *****************
 11620 ;; Defined at:
 11621 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11624 ;;		 -> STR_86(3), STR_85(9), STR_84(12), STR_82(7), 
 11625 ;;		 -> STR_80(3), STR_79(11), STR_77(3), STR_76(9), 
 11626 ;;		 -> STR_71(15), STR_70(12), STR_69(9), STR_68(16), 
 11627 ;;		 -> STR_67(17), STR_66(17), STR_65(14), STR_64(15), 
 11628 ;;		 -> STR_63(15), STR_62(15), STR_61(15), STR_60(15), 
 11629 ;;		 -> STR_59(20), STR_58(17), STR_57(13), STR_56(16), 
 11630 ;;		 -> STR_55(15), STR_54(15), STR_53(15), STR_52(15), 
 11631 ;;		 -> STR_51(10), STR_50(19), STR_49(17), STR_48(12), 
 11632 ;;		 -> STR_47(17), STR_46(17), STR_45(14), STR_44(15), 
 11633 ;;		 -> STR_43(3), STR_42(3), STR_41(3), STR_40(3), 
 11634 ;;		 -> STR_39(3), STR_38(3), STR_37(3), STR_36(3), 
 11635 ;;		 -> STR_35(3), STR_34(9), STR_33(20), STR_32(3), 
 11636 ;;		 -> STR_31(3), STR_30(21), STR_29(11), STR_28(13), 
 11637 ;;		 -> STR_27(18), STR_26(11), STR_25(13), STR_24(19), 
 11638 ;;		 -> STR_23(11), STR_22(13), STR_21(15), STR_20(12), 
 11639 ;;		 -> STR_19(7), STR_18(14), STR_17(14), STR_16(16), 
 11640 ;;		 -> STR_15(14), STR_14(3), STR_13(2), STR_12(3), 
 11641 ;;		 -> STR_11(2), STR_10(3), STR_9(5), STR_8(17), 
 11642 ;;		 -> STR_7(6), STR_6(8), STR_5(3), STR_4(14), 
 11643 ;;		 -> STR_3(15), STR_2(14), STR_1(16), 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  printf          4    0        struct .
 11646 ;;  printf          2   39[COMRAM] int 
 11647 ;;  printf          2   36[COMRAM] unsigned int 
 11648 ;;  printf          2   34[COMRAM] unsigned int 
 11649 ;;  printf          2   32[COMRAM] PTR void [1]
 11650 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11651 ;;  printf          2   30[COMRAM] PTR const unsigned char 
 11652 ;;		 -> STR_107(7), number(2), final_set(40), current_set(5), 
 11653 ;;  printf          1   41[COMRAM] char 
 11654 ;;  printf          1   38[COMRAM] unsigned char 
 11655 ;;  printf          1   29[COMRAM] char 
 11656 ;;  printf          1   28[COMRAM] unsigned char 
 11657 ;; Return value:  Size  Location     Type
 11658 ;;                  2   12[COMRAM] int 
 11659 ;; Registers used:
 11660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/0
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11666 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11667 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11668 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11669 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11670 ;;Total ram usage:       30 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    2
 11673 ;; This function calls:
 11674 ;;		i2___lwdiv
 11675 ;;		i2___lwmod
 11676 ;;		i2___wmul
 11677 ;;		i2_isdigit
 11678 ;;		i2_putch
 11679 ;; This function is called by:
 11680 ;;		_interruptHandler
 11681 ;; This function uses a non-reentrant model
 11682 ;;
 11683                           
 11684                           	psect	text25
 11685  0031C8                     __ptext25:
 11686                           	opt stack 0
 11687  0031C8                     i2_printf:
 11688                           	opt stack 24
 11689                           
 11690                           ;doprnt.c: 466: va_list ap;
 11691                           ;doprnt.c: 499: signed char c;
 11692                           ;doprnt.c: 501: int width;
 11693                           ;doprnt.c: 506: signed char prec;
 11694                           ;doprnt.c: 508: unsigned char flag;
 11695                           ;doprnt.c: 523: union {
 11696                           ;doprnt.c: 524: unsigned long vd;
 11697                           ;doprnt.c: 525: double integ;
 11698                           ;doprnt.c: 526: } tmpval;
 11699                           ;doprnt.c: 528: unsigned int val;
 11700                           ;doprnt.c: 529: unsigned len;
 11701                           ;doprnt.c: 530: const char * cp;
 11702                           ;doprnt.c: 533: *ap = __va_start();
 11703                           
 11704                           ;incstack = 0
 11705  0031C8  0E0F               	movlw	low (?i2_printf+2)
 11706  0031CA  6E21               	movwf	i2printf@ap,c
 11707  0031CC  0E00               	movlw	high (?i2_printf+2)
 11708  0031CE  6E22               	movwf	i2printf@ap+1,c
 11709                           
 11710                           ;doprnt.c: 536: while(c = *f++) {
 11711  0031D0  D1FA               	goto	i2u399_40
 11712  0031D2                     
 11713                           ;doprnt.c: 538: if(c != '%')
 11714  0031D2  0E25               	movlw	37
 11715  0031D4  182A               	xorwf	i2printf@c,w,c
 11716  0031D6  B4D8               	btfsc	status,2,c
 11717  0031D8  D004               	goto	i2l854
 11718                           
 11719                           ;doprnt.c: 540: {
 11720                           ;doprnt.c: 541: (putch(c) );
 11721  0031DA  502A               	movf	i2printf@c,w,c
 11722  0031DC  EC2B  F024         	call	i2_putch
 11723                           
 11724                           ;doprnt.c: 542: continue;
 11725  0031E0  D1F2               	goto	i2u399_40
 11726  0031E2                     i2l854:
 11727                           
 11728                           ;doprnt.c: 543: }
 11729                           ;doprnt.c: 546: width = 0;
 11730  0031E2  0E00               	movlw	0
 11731  0031E4  6E29               	movwf	i2printf@width+1,c
 11732  0031E6  0E00               	movlw	0
 11733  0031E8  6E28               	movwf	i2printf@width,c
 11734                           
 11735                           ;doprnt.c: 548: flag = 0;
 11736  0031EA  0E00               	movlw	0
 11737  0031EC  6E27               	movwf	i2printf@flag,c
 11738                           
 11739                           ;doprnt.c: 551: switch(*f) {
 11740                           
 11741                           ;doprnt.c: 550: for(;;) {
 11742  0031EE  D003               	goto	i2l856
 11743  0031F0                     
 11744                           ;doprnt.c: 580: flag |= 0x04;
 11745  0031F0  8427               	bsf	i2printf@flag,2,c
 11746                           
 11747                           ;doprnt.c: 581: f++;
 11748  0031F2  4A0D               	infsnz	i2printf@f,f,c
 11749  0031F4  2A0E               	incf	i2printf@f+1,f,c
 11750  0031F6                     i2l856:
 11751  0031F6  C00D  FFF6         	movff	i2printf@f,tblptrl
 11752  0031FA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11753  0031FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11754  0031FE  6AF8               	clrf	tblptru,c
 11755  003200                     	endif
 11756  003200                     	if	0	;tblptru may be non-zero
 11757  003200                     	endif
 11758  003200  0008               	tblrd		*
 11759  003202  50F5               	movf	tablat,w,c
 11760                           
 11761                           ; Switch size 1, requested type "space"
 11762                           ; Number of cases is 1, Range of values is 48 to 48
 11763                           ; switch strategies available:
 11764                           ; Name         Instructions Cycles
 11765                           ; simple_byte            4     3 (average)
 11766                           ;	Chosen strategy is simple_byte
 11767  003204  0A30               	xorlw	48	; case 48
 11768  003206  B4D8               	btfsc	status,2,c
 11769  003208  D7F3               	goto	i2l857
 11770                           
 11771                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11772                           
 11773                           ;doprnt.c: 586: }
 11774                           
 11775                           ;doprnt.c: 585: break;
 11776  00320A  C00D  FFF6         	movff	i2printf@f,tblptrl
 11777  00320E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11778  003212                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11779  003212  6AF8               	clrf	tblptru,c
 11780  003214                     	endif
 11781  003214                     	if	0	;tblptru may be non-zero
 11782  003214                     	endif
 11783  003214  0008               	tblrd		*
 11784  003216  50F5               	movf	tablat,w,c
 11785  003218  ECFA  F023         	call	i2_isdigit
 11786  00321C  A0D8               	btfss	status,0,c
 11787  00321E  D0A6               	goto	i2l864
 11788                           
 11789                           ;doprnt.c: 598: width = 0;
 11790  003220  0E00               	movlw	0
 11791  003222  6E29               	movwf	i2printf@width+1,c
 11792  003224  0E00               	movlw	0
 11793  003226  6E28               	movwf	i2printf@width,c
 11794  003228                     
 11795                           ;doprnt.c: 600: width *= 10;
 11796  003228  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11797  00322C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11798  003230  0E00               	movlw	0
 11799  003232  6E04               	movwf	i2___wmul@multiplicand+1,c
 11800  003234  0E0A               	movlw	10
 11801  003236  6E03               	movwf	i2___wmul@multiplicand,c
 11802  003238  ECC4  F023         	call	i2___wmul	;wreg free
 11803  00323C  C001  F028         	movff	?i2___wmul,i2printf@width
 11804  003240  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11805                           
 11806                           ;doprnt.c: 601: width += *f++ - '0';
 11807  003244  0ED0               	movlw	208
 11808  003246  6E19               	movwf	??i2_printf& (0+255),c
 11809  003248  0EFF               	movlw	255
 11810  00324A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11811  00324C  C00D  FFF6         	movff	i2printf@f,tblptrl
 11812  003250  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11813  003254                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11814  003254  6AF8               	clrf	tblptru,c
 11815  003256                     	endif
 11816  003256                     	if	0	;tblptru may be non-zero
 11817  003256                     	endif
 11818  003256  0008               	tblrd		*
 11819  003258  50F5               	movf	tablat,w,c
 11820  00325A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11821  00325C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11822  00325E  5019               	movf	??i2_printf,w,c
 11823  003260  261B               	addwf	??i2_printf+2,f,c
 11824  003262  501A               	movf	??i2_printf+1,w,c
 11825  003264  221C               	addwfc	??i2_printf+3,f,c
 11826  003266  501B               	movf	??i2_printf+2,w,c
 11827  003268  2628               	addwf	i2printf@width,f,c
 11828  00326A  501C               	movf	??i2_printf+3,w,c
 11829  00326C  2229               	addwfc	i2printf@width+1,f,c
 11830  00326E  4A0D               	infsnz	i2printf@f,f,c
 11831  003270  2A0E               	incf	i2printf@f+1,f,c
 11832                           
 11833                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11834  003272  C00D  FFF6         	movff	i2printf@f,tblptrl
 11835  003276  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11836  00327A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11837  00327A  6AF8               	clrf	tblptru,c
 11838  00327C                     	endif
 11839  00327C                     	if	0	;tblptru may be non-zero
 11840  00327C                     	endif
 11841  00327C  0008               	tblrd		*
 11842  00327E  50F5               	movf	tablat,w,c
 11843  003280  ECFA  F023         	call	i2_isdigit
 11844  003284  A0D8               	btfss	status,0,c
 11845  003286  D072               	goto	i2l864
 11846  003288  D7CF               	goto	i2l862
 11847  00328A                     
 11848                           ;doprnt.c: 721: flag |= 0x80;
 11849  00328A  8E27               	bsf	i2printf@flag,7,c
 11850                           
 11851                           ;doprnt.c: 723: break;
 11852  00328C  D08A               	goto	i2l869
 11853  00328E                     
 11854                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11855  00328E  C021  FFD9         	movff	i2printf@ap,fsr2l
 11856  003292  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 11857  003296  CFDE F01F          	movff	postinc2,i2printf@cp
 11858  00329A  CFDD F020          	movff	postdec2,i2printf@cp+1
 11859  00329E  0E02               	movlw	2
 11860  0032A0  2621               	addwf	i2printf@ap,f,c
 11861  0032A2  0E00               	movlw	0
 11862  0032A4  2222               	addwfc	i2printf@ap+1,f,c
 11863                           
 11864                           ;doprnt.c: 740: if(!cp)
 11865  0032A6  501F               	movf	i2printf@cp,w,c
 11866  0032A8  1020               	iorwf	i2printf@cp+1,w,c
 11867  0032AA  A4D8               	btfss	status,2,c
 11868  0032AC  D004               	goto	i2l872
 11869                           
 11870                           ;doprnt.c: 741: cp = "(null)";
 11871  0032AE  0EAC               	movlw	low STR_107
 11872  0032B0  6E1F               	movwf	i2printf@cp,c
 11873  0032B2  0EFF               	movlw	high STR_107
 11874  0032B4  6E20               	movwf	i2printf@cp+1,c
 11875  0032B6                     i2l872:
 11876                           
 11877                           ;doprnt.c: 745: len = 0;
 11878  0032B6  0E00               	movlw	0
 11879  0032B8  6E24               	movwf	i2printf@len+1,c
 11880  0032BA  0E00               	movlw	0
 11881  0032BC  6E23               	movwf	i2printf@len,c
 11882                           
 11883                           ;doprnt.c: 746: while(cp[len])
 11884  0032BE  D002               	goto	i2l873
 11885  0032C0                     
 11886                           ;doprnt.c: 747: len++;
 11887  0032C0  4A23               	infsnz	i2printf@len,f,c
 11888  0032C2  2A24               	incf	i2printf@len+1,f,c
 11889  0032C4                     i2l873:
 11890  0032C4  5023               	movf	i2printf@len,w,c
 11891  0032C6  241F               	addwf	i2printf@cp,w,c
 11892  0032C8  6E19               	movwf	??i2_printf& (0+255),c
 11893  0032CA  5024               	movf	i2printf@len+1,w,c
 11894  0032CC  2020               	addwfc	i2printf@cp+1,w,c
 11895  0032CE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11896  0032D0  C019  FFF6         	movff	??i2_printf,tblptrl
 11897  0032D4  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 11898  0032D8  0E00               	movlw	low (__mediumconst shr (0+16))
 11899  0032DA  6EF8               	movwf	tblptru,c
 11900  0032DC  0E0F               	movlw	(high __ramtop+-1)
 11901  0032DE  64F7               	cpfsgt	tblptrh,c
 11902  0032E0  D003               	bra	i2u375_47
 11903  0032E2  0008               	tblrd		*
 11904  0032E4  50F5               	movf	tablat,w,c
 11905  0032E6  D005               	bra	i2u375_40
 11906  0032E8                     i2u375_47:
 11907  0032E8  CFF6 FFE9          	movff	tblptrl,fsr0l
 11908  0032EC  CFF7 FFEA          	movff	tblptrh,fsr0h
 11909  0032F0  50EF               	movf	indf0,w,c
 11910  0032F2                     i2u375_40:
 11911  0032F2  0900               	iorlw	0
 11912  0032F4  A4D8               	btfss	status,2,c
 11913  0032F6  D7E4               	goto	i2l874
 11914                           
 11915                           ;doprnt.c: 757: if(width > len)
 11916  0032F8  5028               	movf	i2printf@width,w,c
 11917  0032FA  5C23               	subwf	i2printf@len,w,c
 11918  0032FC  5029               	movf	i2printf@width+1,w,c
 11919  0032FE  5824               	subwfb	i2printf@len+1,w,c
 11920  003300  B0D8               	btfsc	status,0,c
 11921  003302  D005               	goto	i2l876
 11922                           
 11923                           ;doprnt.c: 758: width -= len;
 11924  003304  5023               	movf	i2printf@len,w,c
 11925  003306  5E28               	subwf	i2printf@width,f,c
 11926  003308  5024               	movf	i2printf@len+1,w,c
 11927  00330A  5A29               	subwfb	i2printf@width+1,f,c
 11928  00330C  D008               	goto	i2l878
 11929  00330E                     i2l876:
 11930                           
 11931                           ;doprnt.c: 759: else
 11932                           ;doprnt.c: 760: width = 0;
 11933  00330E  0E00               	movlw	0
 11934  003310  6E29               	movwf	i2printf@width+1,c
 11935  003312  0E00               	movlw	0
 11936  003314  6E28               	movwf	i2printf@width,c
 11937                           
 11938                           ;doprnt.c: 764: while(width--)
 11939  003316  D003               	goto	i2l878
 11940  003318                     i2l5078:
 11941                           
 11942                           ;doprnt.c: 765: (putch(' ') );
 11943  003318  0E20               	movlw	32
 11944  00331A  EC2B  F024         	call	i2_putch
 11945  00331E                     i2l878:
 11946  00331E  0628               	decf	i2printf@width,f,c
 11947  003320  A0D8               	btfss	status,0,c
 11948  003322  0629               	decf	i2printf@width+1,f,c
 11949  003324  2828               	incf	i2printf@width,w,c
 11950  003326  E1F8               	bnz	i2l5078
 11951  003328  2829               	incf	i2printf@width+1,w,c
 11952  00332A  B4D8               	btfsc	status,2,c
 11953  00332C  D016               	goto	i2l881
 11954  00332E  D7F4               	goto	i2l879
 11955  003330                     i2l5082:
 11956                           
 11957                           ;doprnt.c: 768: (putch(*cp++) );
 11958  003330  C01F  FFF6         	movff	i2printf@cp,tblptrl
 11959  003334  C020  FFF7         	movff	i2printf@cp+1,tblptrh
 11960  003338  0E00               	movlw	low (__mediumconst shr (0+16))
 11961  00333A  6EF8               	movwf	tblptru,c
 11962  00333C  0E0F               	movlw	(high __ramtop+-1)
 11963  00333E  64F7               	cpfsgt	tblptrh,c
 11964  003340  D003               	bra	i2u379_47
 11965  003342  0008               	tblrd		*
 11966  003344  50F5               	movf	tablat,w,c
 11967  003346  D005               	bra	i2u379_40
 11968  003348                     i2u379_47:
 11969  003348  CFF6 FFE9          	movff	tblptrl,fsr0l
 11970  00334C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11971  003350  50EF               	movf	indf0,w,c
 11972  003352                     i2u379_40:
 11973  003352  EC2B  F024         	call	i2_putch
 11974  003356  4A1F               	infsnz	i2printf@cp,f,c
 11975  003358  2A20               	incf	i2printf@cp+1,f,c
 11976  00335A                     i2l881:
 11977  00335A  0623               	decf	i2printf@len,f,c
 11978  00335C  A0D8               	btfss	status,0,c
 11979  00335E  0624               	decf	i2printf@len+1,f,c
 11980  003360  2823               	incf	i2printf@len,w,c
 11981  003362  E1E6               	bnz	i2l5082
 11982  003364  2824               	incf	i2printf@len+1,w,c
 11983  003366  B4D8               	btfsc	status,2,c
 11984  003368  D12E               	goto	i2u399_40
 11985  00336A  D7E2               	goto	i2l882
 11986  00336C                     i2l864:
 11987  00336C  C00D  FFF6         	movff	i2printf@f,tblptrl
 11988  003370  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11989  003374  4A0D               	infsnz	i2printf@f,f,c
 11990  003376  2A0E               	incf	i2printf@f+1,f,c
 11991  003378                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11992  003378  6AF8               	clrf	tblptru,c
 11993  00337A                     	endif
 11994  00337A                     	if	0	;tblptru may be non-zero
 11995  00337A                     	endif
 11996  00337A  0008               	tblrd		*
 11997  00337C  CFF5 F02A          	movff	tablat,i2printf@c
 11998  003380  502A               	movf	i2printf@c,w,c
 11999                           
 12000                           ; Switch size 1, requested type "space"
 12001                           ; Number of cases is 5, Range of values is 0 to 120
 12002                           ; switch strategies available:
 12003                           ; Name         Instructions Cycles
 12004                           ; simple_byte           16     9 (average)
 12005                           ;	Chosen strategy is simple_byte
 12006  003382  0A00               	xorlw	0	; case 0
 12007  003384  B4D8               	btfsc	status,2,c
 12008  003386  0012               	return	
 12009  003388  0A64               	xorlw	100	; case 100
 12010  00338A  B4D8               	btfsc	status,2,c
 12011  00338C  D00A               	goto	i2l869
 12012  00338E  0A0D               	xorlw	13	; case 105
 12013  003390  B4D8               	btfsc	status,2,c
 12014  003392  D007               	goto	i2l869
 12015  003394  0A1A               	xorlw	26	; case 115
 12016  003396  B4D8               	btfsc	status,2,c
 12017  003398  D77A               	goto	i2l871
 12018  00339A  0A0B               	xorlw	11	; case 120
 12019  00339C  B4D8               	btfsc	status,2,c
 12020  00339E  D775               	goto	i2l870
 12021  0033A0  D112               	goto	i2u399_40
 12022  0033A2                     i2l869:
 12023                           
 12024                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12025  0033A2  BE27               	btfsc	i2printf@flag,7,c
 12026  0033A4  D015               	goto	i2l885
 12027                           
 12028                           ;doprnt.c: 1253: {
 12029                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12030  0033A6  C021  FFD9         	movff	i2printf@ap,fsr2l
 12031  0033AA  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 12032  0033AE  CFDE F025          	movff	postinc2,i2printf@val
 12033  0033B2  CFDD F026          	movff	postdec2,i2printf@val+1
 12034  0033B6  0E02               	movlw	2
 12035  0033B8  2621               	addwf	i2printf@ap,f,c
 12036  0033BA  0E00               	movlw	0
 12037  0033BC  2222               	addwfc	i2printf@ap+1,f,c
 12038                           
 12039                           ;doprnt.c: 1261: if((int)val < 0) {
 12040  0033BE  AE26               	btfss	i2printf@val+1,7,c
 12041  0033C0  D04A               	goto	i2l888
 12042                           
 12043                           ;doprnt.c: 1262: flag |= 0x03;
 12044  0033C2  0E03               	movlw	3
 12045  0033C4  1227               	iorwf	i2printf@flag,f,c
 12046                           
 12047                           ;doprnt.c: 1263: val = -val;
 12048  0033C6  6C25               	negf	i2printf@val,c
 12049  0033C8  1E26               	comf	i2printf@val+1,f,c
 12050  0033CA  B0D8               	btfsc	status,0,c
 12051  0033CC  2A26               	incf	i2printf@val+1,f,c
 12052                           
 12053                           ;doprnt.c: 1264: }
 12054                           ;doprnt.c: 1266: }
 12055  0033CE  D043               	goto	i2l888
 12056  0033D0                     i2l885:
 12057                           
 12058                           ;doprnt.c: 1268: else
 12059                           ;doprnt.c: 1273: {
 12060                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12061  0033D0  C021  FFD9         	movff	i2printf@ap,fsr2l
 12062  0033D4  C022  FFDA         	movff	i2printf@ap+1,fsr2h
 12063  0033D8  CFDE F025          	movff	postinc2,i2printf@val
 12064  0033DC  CFDD F026          	movff	postdec2,i2printf@val+1
 12065  0033E0  0E02               	movlw	2
 12066  0033E2  2621               	addwf	i2printf@ap,f,c
 12067  0033E4  0E00               	movlw	0
 12068  0033E6  2222               	addwfc	i2printf@ap+1,f,c
 12069                           
 12070                           ;doprnt.c: 1287: }
 12071                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12072  0033E8  D036               	goto	i2l888
 12073  0033EA                     
 12074                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12075  0033EA  0E01               	movlw	1
 12076  0033EC  6E2A               	movwf	i2printf@c,c
 12077  0033EE                     i2l5108:
 12078  0033EE  0E05               	movlw	5
 12079  0033F0  182A               	xorwf	i2printf@c,w,c
 12080  0033F2  B4D8               	btfsc	status,2,c
 12081  0033F4  D038               	goto	i2l893
 12082                           
 12083                           ;doprnt.c: 1306: if(val < dpowers[c])
 12084  0033F6  502A               	movf	i2printf@c,w,c
 12085  0033F8  0D02               	mullw	2
 12086  0033FA  0EA4               	movlw	low _dpowers
 12087  0033FC  24F3               	addwf	prodl,w,c
 12088  0033FE  6EF6               	movwf	tblptrl,c
 12089  003400  0EFC               	movlw	high _dpowers
 12090  003402  20F4               	addwfc	prodh,w,c
 12091  003404  6EF7               	movwf	tblptrh,c
 12092  003406                     	if	1	;There are 3 active tblptr bytes
 12093  003406  6AF8               	clrf	tblptru,c
 12094  003408  0E00               	movlw	low (__mediumconst shr (0+16))
 12095  00340A  22F8               	addwfc	tblptru,f,c
 12096  00340C                     	endif
 12097  00340C  0009               	tblrd		*+
 12098  00340E  50F5               	movf	tablat,w,c
 12099  003410  5C25               	subwf	i2printf@val,w,c
 12100  003412  0009               	tblrd		*+
 12101  003414  50F5               	movf	tablat,w,c
 12102  003416  5826               	subwfb	i2printf@val+1,w,c
 12103  003418  A0D8               	btfss	status,0,c
 12104  00341A  D025               	goto	i2l893
 12105                           
 12106                           ;doprnt.c: 1307: break;
 12107  00341C  2A2A               	incf	i2printf@c,f,c
 12108  00341E  D7E7               	goto	i2l5108
 12109  003420                     
 12110                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12111  003420  0E01               	movlw	1
 12112  003422  6E2A               	movwf	i2printf@c,c
 12113  003424                     i2l5122:
 12114  003424  0E04               	movlw	4
 12115  003426  182A               	xorwf	i2printf@c,w,c
 12116  003428  B4D8               	btfsc	status,2,c
 12117  00342A  D01D               	goto	i2l893
 12118                           
 12119                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12120  00342C  502A               	movf	i2printf@c,w,c
 12121  00342E  0D02               	mullw	2
 12122  003430  0EAE               	movlw	low _hexpowers
 12123  003432  24F3               	addwf	prodl,w,c
 12124  003434  6EF6               	movwf	tblptrl,c
 12125  003436  0EFC               	movlw	high _hexpowers
 12126  003438  20F4               	addwfc	prodh,w,c
 12127  00343A  6EF7               	movwf	tblptrh,c
 12128  00343C                     	if	1	;There are 3 active tblptr bytes
 12129  00343C  6AF8               	clrf	tblptru,c
 12130  00343E  0E00               	movlw	low (__mediumconst shr (0+16))
 12131  003440  22F8               	addwfc	tblptru,f,c
 12132  003442                     	endif
 12133  003442  0009               	tblrd		*+
 12134  003444  50F5               	movf	tablat,w,c
 12135  003446  5C25               	subwf	i2printf@val,w,c
 12136  003448  0009               	tblrd		*+
 12137  00344A  50F5               	movf	tablat,w,c
 12138  00344C  5826               	subwfb	i2printf@val+1,w,c
 12139  00344E  A0D8               	btfss	status,0,c
 12140  003450  D00A               	goto	i2l893
 12141                           
 12142                           ;doprnt.c: 1318: break;
 12143  003452  2A2A               	incf	i2printf@c,f,c
 12144  003454  D7E7               	goto	i2l5122
 12145  003456                     i2l888:
 12146  003456  5027               	movf	i2printf@flag,w,c
 12147  003458  0B80               	andlw	128
 12148                           
 12149                           ; Switch size 1, requested type "space"
 12150                           ; Number of cases is 2, Range of values is 0 to 128
 12151                           ; switch strategies available:
 12152                           ; Name         Instructions Cycles
 12153                           ; simple_byte            7     4 (average)
 12154                           ;	Chosen strategy is simple_byte
 12155  00345A  0A00               	xorlw	0	; case 0
 12156  00345C  B4D8               	btfsc	status,2,c
 12157  00345E  D7C5               	goto	i2l889
 12158  003460  0A80               	xorlw	128	; case 128
 12159  003462  B4D8               	btfsc	status,2,c
 12160  003464  D7DD               	goto	i2l894
 12161  003466                     i2l893:
 12162                           
 12163                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12164  003466  5028               	movf	i2printf@width,w,c
 12165  003468  1029               	iorwf	i2printf@width+1,w,c
 12166  00346A  B4D8               	btfsc	status,2,c
 12167  00346C  D009               	goto	i2l898
 12168  00346E  C027  F019         	movff	i2printf@flag,??i2_printf
 12169  003472  0E03               	movlw	3
 12170  003474  1619               	andwf	??i2_printf,f,c
 12171  003476  B4D8               	btfsc	status,2,c
 12172  003478  D003               	goto	i2l898
 12173                           
 12174                           ;doprnt.c: 1346: width--;
 12175  00347A  0628               	decf	i2printf@width,f,c
 12176  00347C  A0D8               	btfss	status,0,c
 12177  00347E  0629               	decf	i2printf@width+1,f,c
 12178  003480                     i2l898:
 12179                           
 12180                           ;doprnt.c: 1381: if(width > c)
 12181  003480  0E80               	movlw	128
 12182  003482  BE2A               	btfsc	i2printf@c,7,c
 12183  003484  0E7F               	movlw	127
 12184  003486  6E19               	movwf	??i2_printf& (0+255),c
 12185  003488  5028               	movf	i2printf@width,w,c
 12186  00348A  5C2A               	subwf	i2printf@c,w,c
 12187  00348C  5029               	movf	i2printf@width+1,w,c
 12188  00348E  0A80               	xorlw	128
 12189  003490  5819               	subwfb	??i2_printf& (0+255),w,c
 12190  003492  B0D8               	btfsc	status,0,c
 12191  003494  D007               	goto	i2l899
 12192                           
 12193                           ;doprnt.c: 1382: width -= c;
 12194  003496  502A               	movf	i2printf@c,w,c
 12195  003498  5E28               	subwf	i2printf@width,f,c
 12196  00349A  0E00               	movlw	0
 12197  00349C  BE2A               	btfsc	i2printf@c,7,c
 12198  00349E  0EFF               	movlw	255
 12199  0034A0  5A29               	subwfb	i2printf@width+1,f,c
 12200  0034A2  D004               	goto	i2l900
 12201  0034A4                     i2l899:
 12202                           
 12203                           ;doprnt.c: 1383: else
 12204                           ;doprnt.c: 1384: width = 0;
 12205  0034A4  0E00               	movlw	0
 12206  0034A6  6E29               	movwf	i2printf@width+1,c
 12207  0034A8  0E00               	movlw	0
 12208  0034AA  6E28               	movwf	i2printf@width,c
 12209  0034AC                     i2l900:
 12210                           
 12211                           ;doprnt.c: 1387: if(flag & 0x04) {
 12212  0034AC  A427               	btfss	i2printf@flag,2,c
 12213  0034AE  D014               	goto	i2l901
 12214                           
 12215                           ;doprnt.c: 1392: if(flag & 0x03)
 12216  0034B0  C027  F019         	movff	i2printf@flag,??i2_printf
 12217  0034B4  0E03               	movlw	3
 12218  0034B6  1619               	andwf	??i2_printf,f,c
 12219  0034B8  B4D8               	btfsc	status,2,c
 12220  0034BA  D003               	goto	i2l902
 12221                           
 12222                           ;doprnt.c: 1393: (putch('-') );
 12223  0034BC  0E2D               	movlw	45
 12224  0034BE  EC2B  F024         	call	i2_putch
 12225  0034C2                     i2l902:
 12226                           
 12227                           ;doprnt.c: 1415: if(width)
 12228  0034C2  5028               	movf	i2printf@width,w,c
 12229  0034C4  1029               	iorwf	i2printf@width+1,w,c
 12230  0034C6  B4D8               	btfsc	status,2,c
 12231  0034C8  D01E               	goto	i2l910
 12232                           
 12233                           ;doprnt.c: 1417: (putch('0') );
 12234                           
 12235                           ;doprnt.c: 1416: do
 12236  0034CA  0E30               	movlw	48
 12237  0034CC  EC2B  F024         	call	i2_putch
 12238                           
 12239                           ;doprnt.c: 1418: while(--width);
 12240  0034D0  0628               	decf	i2printf@width,f,c
 12241  0034D2  A0D8               	btfss	status,0,c
 12242  0034D4  0629               	decf	i2printf@width+1,f,c
 12243  0034D6  D7F5               	goto	i2l902
 12244  0034D8                     i2l901:
 12245                           
 12246                           ;doprnt.c: 1422: {
 12247                           ;doprnt.c: 1424: if(width
 12248                           ;doprnt.c: 1428: )
 12249  0034D8  5028               	movf	i2printf@width,w,c
 12250  0034DA  1029               	iorwf	i2printf@width+1,w,c
 12251  0034DC  B4D8               	btfsc	status,2,c
 12252  0034DE  D00A               	goto	i2u397_40
 12253  0034E0                     i2u396_40:
 12254                           
 12255                           ;doprnt.c: 1430: (putch(' ') );
 12256                           
 12257                           ;doprnt.c: 1429: do
 12258  0034E0  0E20               	movlw	32
 12259  0034E2  EC2B  F024         	call	i2_putch
 12260                           
 12261                           ;doprnt.c: 1431: while(--width);
 12262  0034E6  0628               	decf	i2printf@width,f,c
 12263  0034E8  A0D8               	btfss	status,0,c
 12264  0034EA  0629               	decf	i2printf@width+1,f,c
 12265  0034EC  5028               	movf	i2printf@width,w,c
 12266  0034EE  1029               	iorwf	i2printf@width+1,w,c
 12267  0034F0  A4D8               	btfss	status,2,c
 12268  0034F2  D7F6               	goto	i2u396_40
 12269  0034F4                     i2u397_40:
 12270                           
 12271                           ;doprnt.c: 1438: if(flag & 0x03)
 12272  0034F4  C027  F019         	movff	i2printf@flag,??i2_printf
 12273  0034F8  0E03               	movlw	3
 12274  0034FA  1619               	andwf	??i2_printf,f,c
 12275  0034FC  B4D8               	btfsc	status,2,c
 12276  0034FE  D003               	goto	i2l910
 12277                           
 12278                           ;doprnt.c: 1439: (putch('-') );
 12279  003500  0E2D               	movlw	45
 12280  003502  EC2B  F024         	call	i2_putch
 12281  003506                     i2l910:
 12282                           
 12283                           ;doprnt.c: 1469: }
 12284                           ;doprnt.c: 1472: prec = c;
 12285  003506  C02A  F01E         	movff	i2printf@c,i2printf@prec
 12286                           
 12287                           ;doprnt.c: 1474: while(prec--) {
 12288  00350A  D059               	goto	i2l911
 12289  00350C                     
 12290                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12291  00350C  501E               	movf	i2printf@prec,w,c
 12292  00350E  0D02               	mullw	2
 12293  003510  0EA4               	movlw	low _dpowers
 12294  003512  24F3               	addwf	prodl,w,c
 12295  003514  6EF6               	movwf	tblptrl,c
 12296  003516  0EFC               	movlw	high _dpowers
 12297  003518  20F4               	addwfc	prodh,w,c
 12298  00351A  6EF7               	movwf	tblptrh,c
 12299  00351C                     	if	1	;There are 3 active tblptr bytes
 12300  00351C  6AF8               	clrf	tblptru,c
 12301  00351E  0E00               	movlw	low (__mediumconst shr (0+16))
 12302  003520  22F8               	addwfc	tblptru,f,c
 12303  003522                     	endif
 12304  003522  0009               	tblrd		*+
 12305  003524  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12306  003528  000A               	tblrd		*-
 12307  00352A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12308  00352E  C025  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12309  003532  C026  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12310  003536  EC49  F022         	call	i2___lwdiv	;wreg free
 12311  00353A  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12312  00353E  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12313  003542  0E00               	movlw	0
 12314  003544  6E0B               	movwf	i2___lwmod@divisor+1,c
 12315  003546  0E0A               	movlw	10
 12316  003548  6E0A               	movwf	i2___lwmod@divisor,c
 12317  00354A  EC28  F023         	call	i2___lwmod	;wreg free
 12318  00354E  5008               	movf	?i2___lwmod,w,c
 12319  003550  0F30               	addlw	48
 12320  003552  6E2A               	movwf	i2printf@c,c
 12321                           
 12322                           ;doprnt.c: 1491: break;
 12323  003554  D031               	goto	i2l915
 12324  003556                     
 12325                           ;doprnt.c: 1499: {
 12326                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 12327  003556  C025  F001         	movff	i2printf@val,i2___lwdiv@dividend
 12328  00355A  C026  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12329  00355E  501E               	movf	i2printf@prec,w,c
 12330  003560  0D02               	mullw	2
 12331  003562  0EAE               	movlw	low _hexpowers
 12332  003564  24F3               	addwf	prodl,w,c
 12333  003566  6EF6               	movwf	tblptrl,c
 12334  003568  0EFC               	movlw	high _hexpowers
 12335  00356A  20F4               	addwfc	prodh,w,c
 12336  00356C  6EF7               	movwf	tblptrh,c
 12337  00356E                     	if	1	;There are 3 active tblptr bytes
 12338  00356E  6AF8               	clrf	tblptru,c
 12339  003570  0E00               	movlw	low (__mediumconst shr (0+16))
 12340  003572  22F8               	addwfc	tblptru,f,c
 12341  003574                     	endif
 12342  003574  0009               	tblrd		*+
 12343  003576  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12344  00357A  000A               	tblrd		*-
 12345  00357C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12346  003580  EC49  F022         	call	i2___lwdiv	;wreg free
 12347  003584  5001               	movf	?i2___lwdiv,w,c
 12348  003586  0B0F               	andlw	15
 12349  003588  6E1D               	movwf	i2printf@idx,c
 12350                           
 12351                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 12352  00358A  501D               	movf	i2printf@idx,w,c
 12353  00358C  0D01               	mullw	1
 12354  00358E  0E9F               	movlw	low STR_108
 12355  003590  24F3               	addwf	prodl,w,c
 12356  003592  6EF6               	movwf	tblptrl,c
 12357  003594  0EFD               	movlw	high STR_108
 12358  003596  20F4               	addwfc	prodh,w,c
 12359  003598  6EF7               	movwf	tblptrh,c
 12360  00359A                     	if	1	;There are 3 active tblptr bytes
 12361  00359A  6AF8               	clrf	tblptru,c
 12362  00359C  0E00               	movlw	low (__mediumconst shr (0+16))
 12363  00359E  22F8               	addwfc	tblptru,f,c
 12364  0035A0                     	endif
 12365  0035A0  0008               	tblrd		*
 12366  0035A2  CFF5 F02A          	movff	tablat,i2printf@c
 12367                           
 12368                           ;doprnt.c: 1523: }
 12369                           
 12370                           ;doprnt.c: 1508: }
 12371                           ;doprnt.c: 1510: break;
 12372  0035A6  D008               	goto	i2l915
 12373  0035A8  5027               	movf	i2printf@flag,w,c
 12374  0035AA  0B80               	andlw	128
 12375                           
 12376                           ; Switch size 1, requested type "space"
 12377                           ; Number of cases is 2, Range of values is 0 to 128
 12378                           ; switch strategies available:
 12379                           ; Name         Instructions Cycles
 12380                           ; simple_byte            7     4 (average)
 12381                           ;	Chosen strategy is simple_byte
 12382  0035AC  0A00               	xorlw	0	; case 0
 12383  0035AE  B4D8               	btfsc	status,2,c
 12384  0035B0  D7AD               	goto	i2l914
 12385  0035B2  0A80               	xorlw	128	; case 128
 12386  0035B4  B4D8               	btfsc	status,2,c
 12387  0035B6  D7CF               	goto	i2l916
 12388  0035B8                     i2l915:
 12389                           
 12390                           ;doprnt.c: 1524: (putch(c) );
 12391  0035B8  502A               	movf	i2printf@c,w,c
 12392  0035BA  EC2B  F024         	call	i2_putch
 12393  0035BE                     i2l911:
 12394  0035BE  061E               	decf	i2printf@prec,f,c
 12395  0035C0  281E               	incf	i2printf@prec,w,c
 12396  0035C2  A4D8               	btfss	status,2,c
 12397  0035C4  D7F1               	goto	i2l913
 12398  0035C6                     i2u399_40:
 12399  0035C6  C00D  FFF6         	movff	i2printf@f,tblptrl
 12400  0035CA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12401  0035CE  4A0D               	infsnz	i2printf@f,f,c
 12402  0035D0  2A0E               	incf	i2printf@f+1,f,c
 12403  0035D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12404  0035D2  6AF8               	clrf	tblptru,c
 12405  0035D4                     	endif
 12406  0035D4                     	if	0	;tblptru may be non-zero
 12407  0035D4                     	endif
 12408  0035D4  0008               	tblrd		*
 12409  0035D6  CFF5 F02A          	movff	tablat,i2printf@c
 12410  0035DA  502A               	movf	i2printf@c,w,c
 12411  0035DC  B4D8               	btfsc	status,2,c
 12412  0035DE  0012               	return	
 12413  0035E0  D5F8               	goto	i2l853
 12414  0035E2                     __end_ofi2_printf:
 12415                           	opt stack 0
 12416                           pclatu	equ	0xFFB
 12417                           pclath	equ	0xFFA
 12418                           tblptru	equ	0xFF8
 12419                           tblptrh	equ	0xFF7
 12420                           tblptrl	equ	0xFF6
 12421                           tablat	equ	0xFF5
 12422                           prodh	equ	0xFF4
 12423                           prodl	equ	0xFF3
 12424                           intcon	equ	0xFF2
 12425                           intcon3	equ	0xFF0
 12426                           indf0	equ	0xFEF
 12427                           postinc0	equ	0xFEE
 12428                           fsr0h	equ	0xFEA
 12429                           fsr0l	equ	0xFE9
 12430                           wreg	equ	0xFE8
 12431                           postdec1	equ	0xFE5
 12432                           fsr1h	equ	0xFE2
 12433                           fsr1l	equ	0xFE1
 12434                           indf2	equ	0xFDF
 12435                           postinc2	equ	0xFDE
 12436                           postdec2	equ	0xFDD
 12437                           fsr2h	equ	0xFDA
 12438                           fsr2l	equ	0xFD9
 12439                           status	equ	0xFD8
 12440                           
 12441 ;; *************** function i2_putch *****************
 12442 ;; Defined at:
 12443 ;;		line 24 in file "lcd.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;  data            1    wreg     unsigned char 
 12446 ;; Auto vars:     Size  Location     Type
 12447 ;;  data            1    2[COMRAM] unsigned char 
 12448 ;; Return value:  Size  Location     Type
 12449 ;;                  1    wreg      void 
 12450 ;; Registers used:
 12451 ;;		wreg, status,2, status,0, cstack
 12452 ;; Tracked objects:
 12453 ;;		On entry : 0/0
 12454 ;;		On exit  : 0/0
 12455 ;;		Unchanged: 0/0
 12456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12461 ;;Total ram usage:        1 bytes
 12462 ;; Hardware stack levels used:    1
 12463 ;; Hardware stack levels required when called:    1
 12464 ;; This function calls:
 12465 ;;		i2_lcdNibble
 12466 ;; This function is called by:
 12467 ;;		_interruptHandler
 12468 ;;		i2_printf
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472                           	psect	text26
 12473  004856                     __ptext26:
 12474                           	opt stack 0
 12475  004856                     i2_putch:
 12476                           	opt stack 25
 12477                           
 12478                           ;incstack = 0
 12479                           ;i2putch@data stored from wreg
 12480  004856  6E03               	movwf	i2putch@data,c
 12481                           
 12482                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 12483  004858  848C               	bsf	3980,2,c	;volatile
 12484                           
 12485                           ;lcd.c: 33: lcdNibble(data);
 12486  00485A  5003               	movf	i2putch@data,w,c
 12487  00485C  ECCF  F01F         	call	i2_lcdNibble
 12488                           
 12489                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
 12490  004860  0EC8               	movlw	200
 12491  004862                     i2u606_47:
 12492  004862  D000               	nop2	
 12493  004864  2EE8               	decfsz	wreg,f,c
 12494  004866  D7FD               	bra	i2u606_47
 12495  004868  0012               	return		;funcret
 12496  00486A                     __end_ofi2_putch:
 12497                           	opt stack 0
 12498                           pclatu	equ	0xFFB
 12499                           pclath	equ	0xFFA
 12500                           tblptru	equ	0xFF8
 12501                           tblptrh	equ	0xFF7
 12502                           tblptrl	equ	0xFF6
 12503                           tablat	equ	0xFF5
 12504                           prodh	equ	0xFF4
 12505                           prodl	equ	0xFF3
 12506                           intcon	equ	0xFF2
 12507                           intcon3	equ	0xFF0
 12508                           indf0	equ	0xFEF
 12509                           postinc0	equ	0xFEE
 12510                           fsr0h	equ	0xFEA
 12511                           fsr0l	equ	0xFE9
 12512                           wreg	equ	0xFE8
 12513                           postdec1	equ	0xFE5
 12514                           fsr1h	equ	0xFE2
 12515                           fsr1l	equ	0xFE1
 12516                           indf2	equ	0xFDF
 12517                           postinc2	equ	0xFDE
 12518                           postdec2	equ	0xFDD
 12519                           fsr2h	equ	0xFDA
 12520                           fsr2l	equ	0xFD9
 12521                           status	equ	0xFD8
 12522                           
 12523 ;; *************** function i2_isdigit *****************
 12524 ;; Defined at:
 12525 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 12526 ;; Parameters:    Size  Location     Type
 12527 ;;  c               1    wreg     unsigned char 
 12528 ;; Auto vars:     Size  Location     Type
 12529 ;;  c               1    2[COMRAM] unsigned char 
 12530 ;; Return value:  Size  Location     Type
 12531 ;;		None               void
 12532 ;; Registers used:
 12533 ;;		wreg, status,2, status,0
 12534 ;; Tracked objects:
 12535 ;;		On entry : 0/0
 12536 ;;		On exit  : 0/0
 12537 ;;		Unchanged: 0/0
 12538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12542 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12543 ;;Total ram usage:        3 bytes
 12544 ;; Hardware stack levels used:    1
 12545 ;; This function calls:
 12546 ;;		Nothing
 12547 ;; This function is called by:
 12548 ;;		i2_printf
 12549 ;; This function uses a non-reentrant model
 12550 ;;
 12551                           
 12552                           	psect	text27
 12553  0047F4                     __ptext27:
 12554                           	opt stack 0
 12555  0047F4                     i2_isdigit:
 12556                           	opt stack 25
 12557                           
 12558                           ;incstack = 0
 12559                           ;i2isdigit@c stored from wreg
 12560  0047F4  6E03               	movwf	i2isdigit@c,c
 12561  0047F6  0E00               	movlw	0
 12562  0047F8  6E02               	movwf	i2_isdigit$1307,c
 12563  0047FA  0E3A               	movlw	58
 12564  0047FC  6003               	cpfslt	i2isdigit@c,c
 12565  0047FE  D005               	goto	i2l1249
 12566  004800  0E2F               	movlw	47
 12567  004802  6403               	cpfsgt	i2isdigit@c,c
 12568  004804  D002               	goto	i2l1249
 12569  004806  0E01               	movlw	1
 12570  004808  6E02               	movwf	i2_isdigit$1307,c
 12571  00480A                     i2l1249:
 12572  00480A  C002  F001         	movff	i2_isdigit$1307,??i2_isdigit
 12573  00480E  3001               	rrcf	??i2_isdigit,w,c
 12574  004810  0012               	return	
 12575  004812                     __end_ofi2_isdigit:
 12576                           	opt stack 0
 12577                           pclatu	equ	0xFFB
 12578                           pclath	equ	0xFFA
 12579                           tblptru	equ	0xFF8
 12580                           tblptrh	equ	0xFF7
 12581                           tblptrl	equ	0xFF6
 12582                           tablat	equ	0xFF5
 12583                           prodh	equ	0xFF4
 12584                           prodl	equ	0xFF3
 12585                           intcon	equ	0xFF2
 12586                           intcon3	equ	0xFF0
 12587                           indf0	equ	0xFEF
 12588                           postinc0	equ	0xFEE
 12589                           fsr0h	equ	0xFEA
 12590                           fsr0l	equ	0xFE9
 12591                           wreg	equ	0xFE8
 12592                           postdec1	equ	0xFE5
 12593                           fsr1h	equ	0xFE2
 12594                           fsr1l	equ	0xFE1
 12595                           indf2	equ	0xFDF
 12596                           postinc2	equ	0xFDE
 12597                           postdec2	equ	0xFDD
 12598                           fsr2h	equ	0xFDA
 12599                           fsr2l	equ	0xFD9
 12600                           status	equ	0xFD8
 12601                           
 12602 ;; *************** function i2___lwmod *****************
 12603 ;; Defined at:
 12604 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;  dividend        2    7[COMRAM] unsigned int 
 12607 ;;  divisor         2    9[COMRAM] unsigned int 
 12608 ;; Auto vars:     Size  Location     Type
 12609 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12610 ;; Return value:  Size  Location     Type
 12611 ;;                  2    7[COMRAM] unsigned int 
 12612 ;; Registers used:
 12613 ;;		wreg, status,2, status,0
 12614 ;; Tracked objects:
 12615 ;;		On entry : 0/0
 12616 ;;		On exit  : 0/0
 12617 ;;		Unchanged: 0/0
 12618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12619 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12622 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12623 ;;Total ram usage:        5 bytes
 12624 ;; Hardware stack levels used:    1
 12625 ;; This function calls:
 12626 ;;		Nothing
 12627 ;; This function is called by:
 12628 ;;		i2_printf
 12629 ;; This function uses a non-reentrant model
 12630 ;;
 12631                           
 12632                           	psect	text28
 12633  004650                     __ptext28:
 12634                           	opt stack 0
 12635  004650                     i2___lwmod:
 12636                           	opt stack 25
 12637                           
 12638                           ;incstack = 0
 12639  004650  500A               	movf	i2___lwmod@divisor,w,c
 12640  004652  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12641  004654  B4D8               	btfsc	status,2,c
 12642  004656  D018               	goto	i2l1343
 12643  004658  0E01               	movlw	1
 12644  00465A  6E0C               	movwf	i2___lwmod@counter,c
 12645  00465C  D004               	goto	i2l1338
 12646  00465E  90D8               	bcf	status,0,c
 12647  004660  360A               	rlcf	i2___lwmod@divisor,f,c
 12648  004662  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12649  004664  2A0C               	incf	i2___lwmod@counter,f,c
 12650  004666                     i2l1338:
 12651  004666  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12652  004668  D7FA               	goto	i2l1339
 12653  00466A                     i2u291_40:
 12654  00466A  500A               	movf	i2___lwmod@divisor,w,c
 12655  00466C  5C08               	subwf	i2___lwmod@dividend,w,c
 12656  00466E  500B               	movf	i2___lwmod@divisor+1,w,c
 12657  004670  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12658  004672  A0D8               	btfss	status,0,c
 12659  004674  D004               	goto	i2l1342
 12660  004676  500A               	movf	i2___lwmod@divisor,w,c
 12661  004678  5E08               	subwf	i2___lwmod@dividend,f,c
 12662  00467A  500B               	movf	i2___lwmod@divisor+1,w,c
 12663  00467C  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12664  00467E                     i2l1342:
 12665  00467E  90D8               	bcf	status,0,c
 12666  004680  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12667  004682  320A               	rrcf	i2___lwmod@divisor,f,c
 12668  004684  2E0C               	decfsz	i2___lwmod@counter,f,c
 12669  004686  D7F1               	goto	i2u291_40
 12670  004688                     i2l1343:
 12671  004688  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12672  00468C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12673  004690  0012               	return		;funcret
 12674  004692                     __end_ofi2___lwmod:
 12675                           	opt stack 0
 12676                           pclatu	equ	0xFFB
 12677                           pclath	equ	0xFFA
 12678                           tblptru	equ	0xFF8
 12679                           tblptrh	equ	0xFF7
 12680                           tblptrl	equ	0xFF6
 12681                           tablat	equ	0xFF5
 12682                           prodh	equ	0xFF4
 12683                           prodl	equ	0xFF3
 12684                           intcon	equ	0xFF2
 12685                           intcon3	equ	0xFF0
 12686                           indf0	equ	0xFEF
 12687                           postinc0	equ	0xFEE
 12688                           fsr0h	equ	0xFEA
 12689                           fsr0l	equ	0xFE9
 12690                           wreg	equ	0xFE8
 12691                           postdec1	equ	0xFE5
 12692                           fsr1h	equ	0xFE2
 12693                           fsr1l	equ	0xFE1
 12694                           indf2	equ	0xFDF
 12695                           postinc2	equ	0xFDE
 12696                           postdec2	equ	0xFDD
 12697                           fsr2h	equ	0xFDA
 12698                           fsr2l	equ	0xFD9
 12699                           status	equ	0xFD8
 12700                           
 12701 ;; *************** function i2___lwdiv *****************
 12702 ;; Defined at:
 12703 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 12704 ;; Parameters:    Size  Location     Type
 12705 ;;  dividend        2    0[COMRAM] unsigned int 
 12706 ;;  divisor         2    2[COMRAM] unsigned int 
 12707 ;; Auto vars:     Size  Location     Type
 12708 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12709 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12710 ;; Return value:  Size  Location     Type
 12711 ;;                  2    0[COMRAM] unsigned int 
 12712 ;; Registers used:
 12713 ;;		wreg, status,2, status,0
 12714 ;; Tracked objects:
 12715 ;;		On entry : 0/0
 12716 ;;		On exit  : 0/0
 12717 ;;		Unchanged: 0/0
 12718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12719 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12720 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12722 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12723 ;;Total ram usage:        7 bytes
 12724 ;; Hardware stack levels used:    1
 12725 ;; This function calls:
 12726 ;;		Nothing
 12727 ;; This function is called by:
 12728 ;;		i2_printf
 12729 ;; This function uses a non-reentrant model
 12730 ;;
 12731                           
 12732                           	psect	text29
 12733  004492                     __ptext29:
 12734                           	opt stack 0
 12735  004492                     i2___lwdiv:
 12736                           	opt stack 25
 12737                           
 12738                           ;incstack = 0
 12739  004492  0E00               	movlw	0
 12740  004494  6E06               	movwf	i2___lwdiv@quotient+1,c
 12741  004496  0E00               	movlw	0
 12742  004498  6E05               	movwf	i2___lwdiv@quotient,c
 12743  00449A  5003               	movf	i2___lwdiv@divisor,w,c
 12744  00449C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12745  00449E  B4D8               	btfsc	status,2,c
 12746  0044A0  D01C               	goto	i2l1333
 12747  0044A2  0E01               	movlw	1
 12748  0044A4  6E07               	movwf	i2___lwdiv@counter,c
 12749  0044A6  D004               	goto	i2l1328
 12750  0044A8  90D8               	bcf	status,0,c
 12751  0044AA  3603               	rlcf	i2___lwdiv@divisor,f,c
 12752  0044AC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12753  0044AE  2A07               	incf	i2___lwdiv@counter,f,c
 12754  0044B0                     i2l1328:
 12755  0044B0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12756  0044B2  D7FA               	goto	i2l1329
 12757  0044B4                     i2u288_40:
 12758  0044B4  90D8               	bcf	status,0,c
 12759  0044B6  3605               	rlcf	i2___lwdiv@quotient,f,c
 12760  0044B8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12761  0044BA  5003               	movf	i2___lwdiv@divisor,w,c
 12762  0044BC  5C01               	subwf	i2___lwdiv@dividend,w,c
 12763  0044BE  5004               	movf	i2___lwdiv@divisor+1,w,c
 12764  0044C0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12765  0044C2  A0D8               	btfss	status,0,c
 12766  0044C4  D005               	goto	i2l1332
 12767  0044C6  5003               	movf	i2___lwdiv@divisor,w,c
 12768  0044C8  5E01               	subwf	i2___lwdiv@dividend,f,c
 12769  0044CA  5004               	movf	i2___lwdiv@divisor+1,w,c
 12770  0044CC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12771  0044CE  8005               	bsf	i2___lwdiv@quotient,0,c
 12772  0044D0                     i2l1332:
 12773  0044D0  90D8               	bcf	status,0,c
 12774  0044D2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12775  0044D4  3203               	rrcf	i2___lwdiv@divisor,f,c
 12776  0044D6  2E07               	decfsz	i2___lwdiv@counter,f,c
 12777  0044D8  D7ED               	goto	i2u288_40
 12778  0044DA                     i2l1333:
 12779  0044DA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12780  0044DE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12781  0044E2  0012               	return		;funcret
 12782  0044E4                     __end_ofi2___lwdiv:
 12783                           	opt stack 0
 12784                           pclatu	equ	0xFFB
 12785                           pclath	equ	0xFFA
 12786                           tblptru	equ	0xFF8
 12787                           tblptrh	equ	0xFF7
 12788                           tblptrl	equ	0xFF6
 12789                           tablat	equ	0xFF5
 12790                           prodh	equ	0xFF4
 12791                           prodl	equ	0xFF3
 12792                           intcon	equ	0xFF2
 12793                           intcon3	equ	0xFF0
 12794                           indf0	equ	0xFEF
 12795                           postinc0	equ	0xFEE
 12796                           fsr0h	equ	0xFEA
 12797                           fsr0l	equ	0xFE9
 12798                           wreg	equ	0xFE8
 12799                           postdec1	equ	0xFE5
 12800                           fsr1h	equ	0xFE2
 12801                           fsr1l	equ	0xFE1
 12802                           indf2	equ	0xFDF
 12803                           postinc2	equ	0xFDE
 12804                           postdec2	equ	0xFDD
 12805                           fsr2h	equ	0xFDA
 12806                           fsr2l	equ	0xFD9
 12807                           status	equ	0xFD8
 12808                           
 12809 ;; *************** function i2_initLCD *****************
 12810 ;; Defined at:
 12811 ;;		line 60 in file "lcd.c"
 12812 ;; Parameters:    Size  Location     Type
 12813 ;;		None
 12814 ;; Auto vars:     Size  Location     Type
 12815 ;;		None
 12816 ;; Return value:  Size  Location     Type
 12817 ;;                  1    wreg      void 
 12818 ;; Registers used:
 12819 ;;		wreg, status,2, status,0, cstack
 12820 ;; Tracked objects:
 12821 ;;		On entry : 0/0
 12822 ;;		On exit  : 0/0
 12823 ;;		Unchanged: 0/0
 12824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12828 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12829 ;;Total ram usage:        1 bytes
 12830 ;; Hardware stack levels used:    1
 12831 ;; Hardware stack levels required when called:    2
 12832 ;; This function calls:
 12833 ;;		i2_lcdInst
 12834 ;; This function is called by:
 12835 ;;		_interruptHandler
 12836 ;; This function uses a non-reentrant model
 12837 ;;
 12838                           
 12839                           	psect	text30
 12840  004530                     __ptext30:
 12841                           	opt stack 0
 12842  004530                     i2_initLCD:
 12843                           	opt stack 24
 12844                           
 12845                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
 12846                           
 12847                           ;incstack = 0
 12848  004530  0EC3               	movlw	195
 12849  004532  6E04               	movwf	??i2_initLCD& (0+255),c
 12850  004534  0ECD               	movlw	205
 12851  004536                     i2u607_47:
 12852  004536  2EE8               	decfsz	wreg,f,c
 12853  004538  D7FE               	bra	i2u607_47
 12854  00453A  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12855  00453C  D7FC               	bra	i2u607_47
 12856  00453E  F000               	nop	
 12857                           
 12858                           ;lcd.c: 69: lcdInst(0b00110011);
 12859  004540  0E33               	movlw	51
 12860  004542  EC35  F024         	call	i2_lcdInst
 12861                           
 12862                           ;lcd.c: 70: lcdInst(0b00110010);
 12863  004546  0E32               	movlw	50
 12864  004548  EC35  F024         	call	i2_lcdInst
 12865                           
 12866                           ;lcd.c: 71: lcdInst(0b00101000);
 12867  00454C  0E28               	movlw	40
 12868  00454E  EC35  F024         	call	i2_lcdInst
 12869                           
 12870                           ;lcd.c: 72: lcdInst(0b00001111);
 12871  004552  0E0F               	movlw	15
 12872  004554  EC35  F024         	call	i2_lcdInst
 12873                           
 12874                           ;lcd.c: 73: lcdInst(0b00000110);
 12875  004558  0E06               	movlw	6
 12876  00455A  EC35  F024         	call	i2_lcdInst
 12877                           
 12878                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12879  00455E  0E01               	movlw	1
 12880  004560  EC35  F024         	call	i2_lcdInst
 12881  004564  0EC3               	movlw	195
 12882  004566  6E04               	movwf	??i2_initLCD& (0+255),c
 12883  004568  0ECD               	movlw	205
 12884  00456A                     i2u608_47:
 12885  00456A  2EE8               	decfsz	wreg,f,c
 12886  00456C  D7FE               	bra	i2u608_47
 12887  00456E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12888  004570  D7FC               	bra	i2u608_47
 12889  004572  F000               	nop	
 12890                           
 12891                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 12892  004574  0E0F               	movlw	15
 12893  004576  EC35  F024         	call	i2_lcdInst
 12894  00457A  0012               	return		;funcret
 12895  00457C                     __end_ofi2_initLCD:
 12896                           	opt stack 0
 12897                           pclatu	equ	0xFFB
 12898                           pclath	equ	0xFFA
 12899                           tblptru	equ	0xFF8
 12900                           tblptrh	equ	0xFF7
 12901                           tblptrl	equ	0xFF6
 12902                           tablat	equ	0xFF5
 12903                           prodh	equ	0xFF4
 12904                           prodl	equ	0xFF3
 12905                           intcon	equ	0xFF2
 12906                           intcon3	equ	0xFF0
 12907                           indf0	equ	0xFEF
 12908                           postinc0	equ	0xFEE
 12909                           fsr0h	equ	0xFEA
 12910                           fsr0l	equ	0xFE9
 12911                           wreg	equ	0xFE8
 12912                           postdec1	equ	0xFE5
 12913                           fsr1h	equ	0xFE2
 12914                           fsr1l	equ	0xFE1
 12915                           indf2	equ	0xFDF
 12916                           postinc2	equ	0xFDE
 12917                           postdec2	equ	0xFDD
 12918                           fsr2h	equ	0xFDA
 12919                           fsr2l	equ	0xFD9
 12920                           status	equ	0xFD8
 12921                           
 12922 ;; *************** function i2_lcdInst *****************
 12923 ;; Defined at:
 12924 ;;		line 11 in file "lcd.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;  data            1    wreg     unsigned char 
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  data            1    2[COMRAM] unsigned char 
 12929 ;; Return value:  Size  Location     Type
 12930 ;;                  1    wreg      void 
 12931 ;; Registers used:
 12932 ;;		wreg, status,2, status,0, cstack
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12942 ;;Total ram usage:        1 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    1
 12945 ;; This function calls:
 12946 ;;		i2_lcdNibble
 12947 ;; This function is called by:
 12948 ;;		_interruptHandler
 12949 ;;		i2_initLCD
 12950 ;; This function uses a non-reentrant model
 12951 ;;
 12952                           
 12953                           	psect	text31
 12954  00486A                     __ptext31:
 12955                           	opt stack 0
 12956  00486A                     i2_lcdInst:
 12957                           	opt stack 25
 12958                           
 12959                           ;incstack = 0
 12960                           ;i2lcdInst@data stored from wreg
 12961  00486A  6E03               	movwf	i2lcdInst@data,c
 12962                           
 12963                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 12964  00486C  948C               	bcf	3980,2,c	;volatile
 12965                           
 12966                           ;lcd.c: 20: lcdNibble(data);
 12967  00486E  5003               	movf	i2lcdInst@data,w,c
 12968  004870  ECCF  F01F         	call	i2_lcdNibble
 12969                           
 12970                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
 12971  004874  0EC8               	movlw	200
 12972  004876                     i2u609_47:
 12973  004876  D000               	nop2	
 12974  004878  2EE8               	decfsz	wreg,f,c
 12975  00487A  D7FD               	bra	i2u609_47
 12976  00487C  0012               	return		;funcret
 12977  00487E                     __end_ofi2_lcdInst:
 12978                           	opt stack 0
 12979                           pclatu	equ	0xFFB
 12980                           pclath	equ	0xFFA
 12981                           tblptru	equ	0xFF8
 12982                           tblptrh	equ	0xFF7
 12983                           tblptrl	equ	0xFF6
 12984                           tablat	equ	0xFF5
 12985                           prodh	equ	0xFF4
 12986                           prodl	equ	0xFF3
 12987                           intcon	equ	0xFF2
 12988                           intcon3	equ	0xFF0
 12989                           indf0	equ	0xFEF
 12990                           postinc0	equ	0xFEE
 12991                           fsr0h	equ	0xFEA
 12992                           fsr0l	equ	0xFE9
 12993                           wreg	equ	0xFE8
 12994                           postdec1	equ	0xFE5
 12995                           fsr1h	equ	0xFE2
 12996                           fsr1l	equ	0xFE1
 12997                           indf2	equ	0xFDF
 12998                           postinc2	equ	0xFDE
 12999                           postdec2	equ	0xFDD
 13000                           fsr2h	equ	0xFDA
 13001                           fsr2l	equ	0xFD9
 13002                           status	equ	0xFD8
 13003                           
 13004 ;; *************** function i2_lcdNibble *****************
 13005 ;; Defined at:
 13006 ;;		line 37 in file "lcd.c"
 13007 ;; Parameters:    Size  Location     Type
 13008 ;;  data            1    wreg     unsigned char 
 13009 ;; Auto vars:     Size  Location     Type
 13010 ;;  data            1    1[COMRAM] unsigned char 
 13011 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13012 ;; Return value:  Size  Location     Type
 13013 ;;                  1    wreg      void 
 13014 ;; Registers used:
 13015 ;;		wreg, status,2, status,0
 13016 ;; Tracked objects:
 13017 ;;		On entry : 0/0
 13018 ;;		On exit  : 0/0
 13019 ;;		Unchanged: 0/0
 13020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13024 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13025 ;;Total ram usage:        2 bytes
 13026 ;; Hardware stack levels used:    1
 13027 ;; This function calls:
 13028 ;;		Nothing
 13029 ;; This function is called by:
 13030 ;;		i2_lcdInst
 13031 ;;		i2_putch
 13032 ;; This function uses a non-reentrant model
 13033 ;;
 13034                           
 13035                           	psect	text32
 13036  003F9E                     __ptext32:
 13037                           	opt stack 0
 13038  003F9E                     i2_lcdNibble:
 13039                           	opt stack 25
 13040                           
 13041                           ;incstack = 0
 13042                           ;i2lcdNibble@data stored from wreg
 13043  003F9E  6E02               	movwf	i2lcdNibble@data,c
 13044                           
 13045                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 13046  003FA0  5002               	movf	i2lcdNibble@data,w,c
 13047  003FA2  0BF0               	andlw	240
 13048  003FA4  6E01               	movwf	i2lcdNibble@temp,c
 13049                           
 13050                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 13051  003FA6  508C               	movf	3980,w,c	;volatile
 13052  003FA8  0B0F               	andlw	15
 13053  003FAA  6E8C               	movwf	3980,c	;volatile
 13054                           
 13055                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 13056  003FAC  5001               	movf	i2lcdNibble@temp,w,c
 13057  003FAE  108C               	iorwf	3980,w,c	;volatile
 13058  003FB0  6E8C               	movwf	3980,c	;volatile
 13059                           
 13060                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13061  003FB2  0E00               	movlw	0
 13062  003FB4  BEF2               	btfsc	intcon,7,c	;volatile
 13063  003FB6  0E01               	movlw	1
 13064  003FB8  0100               	movlb	0	; () banked
 13065  003FBA  6FC2               	movwf	_LCDinterruptState& (0+255),b
 13066                           
 13067                           ; BSR set to: 0
 13068  003FBC  9EF2               	bcf	intcon,7,c	;volatile
 13069                           
 13070                           ; BSR set to: 0
 13071  003FBE  868C               	bsf	3980,3,c	;volatile
 13072                           
 13073                           ; BSR set to: 0
 13074  003FC0  0E53               	movlw	83
 13075  003FC2                     i2u610_47:
 13076  003FC2  2EE8               	decfsz	wreg,f,c
 13077  003FC4  D7FE               	bra	i2u610_47
 13078  003FC6  F000               	nop	
 13079  003FC8  968C               	bcf	3980,3,c	;volatile
 13080  003FCA  0EC8               	movlw	200
 13081  003FCC                     i2u611_47:
 13082  003FCC  D000               	nop2	
 13083  003FCE  2EE8               	decfsz	wreg,f,c
 13084  003FD0  D7FD               	bra	i2u611_47
 13085  003FD2  0100               	movlb	0	; () banked
 13086  003FD4  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
 13087  003FD6  D002               	bra	i2u258_45
 13088  003FD8  9EF2               	bcf	intcon,7,c	;volatile
 13089  003FDA  D001               	bra	i2u258_46
 13090  003FDC                     i2u258_45:
 13091  003FDC  8EF2               	bsf	intcon,7,c	;volatile
 13092  003FDE                     i2u258_46:
 13093                           
 13094                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 13095  003FDE  3802               	swapf	i2lcdNibble@data,w,c
 13096  003FE0  0BF0               	andlw	240
 13097  003FE2  6E02               	movwf	i2lcdNibble@data,c
 13098                           
 13099                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 13100  003FE4  5002               	movf	i2lcdNibble@data,w,c
 13101  003FE6  0BF0               	andlw	240
 13102  003FE8  6E01               	movwf	i2lcdNibble@temp,c
 13103                           
 13104                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 13105  003FEA  508C               	movf	3980,w,c	;volatile
 13106  003FEC  0B0F               	andlw	15
 13107  003FEE  6E8C               	movwf	3980,c	;volatile
 13108                           
 13109                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 13110  003FF0  5001               	movf	i2lcdNibble@temp,w,c
 13111  003FF2  108C               	iorwf	3980,w,c	;volatile
 13112  003FF4  6E8C               	movwf	3980,c	;volatile
 13113                           
 13114                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13115  003FF6  0E00               	movlw	0
 13116  003FF8  BEF2               	btfsc	intcon,7,c	;volatile
 13117  003FFA  0E01               	movlw	1
 13118  003FFC  0100               	movlb	0	; () banked
 13119  003FFE  6FC2               	movwf	_LCDinterruptState& (0+255),b
 13120                           
 13121                           ; BSR set to: 0
 13122  004000  9EF2               	bcf	intcon,7,c	;volatile
 13123                           
 13124                           ; BSR set to: 0
 13125  004002  868C               	bsf	3980,3,c	;volatile
 13126                           
 13127                           ; BSR set to: 0
 13128  004004  0E53               	movlw	83
 13129  004006                     i2u612_47:
 13130  004006  2EE8               	decfsz	wreg,f,c
 13131  004008  D7FE               	bra	i2u612_47
 13132  00400A  F000               	nop	
 13133  00400C  968C               	bcf	3980,3,c	;volatile
 13134  00400E  0EC8               	movlw	200
 13135  004010                     i2u613_47:
 13136  004010  D000               	nop2	
 13137  004012  2EE8               	decfsz	wreg,f,c
 13138  004014  D7FD               	bra	i2u613_47
 13139  004016  0100               	movlb	0	; () banked
 13140  004018  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
 13141  00401A  D002               	bra	i2u259_45
 13142  00401C  9EF2               	bcf	intcon,7,c	;volatile
 13143  00401E  D001               	bra	i2u259_46
 13144  004020                     i2u259_45:
 13145  004020  8EF2               	bsf	intcon,7,c	;volatile
 13146  004022                     i2u259_46:
 13147  004022  0012               	return		;funcret
 13148  004024                     __end_ofi2_lcdNibble:
 13149                           	opt stack 0
 13150                           pclatu	equ	0xFFB
 13151                           pclath	equ	0xFFA
 13152                           tblptru	equ	0xFF8
 13153                           tblptrh	equ	0xFF7
 13154                           tblptrl	equ	0xFF6
 13155                           tablat	equ	0xFF5
 13156                           prodh	equ	0xFF4
 13157                           prodl	equ	0xFF3
 13158                           intcon	equ	0xFF2
 13159                           intcon3	equ	0xFF0
 13160                           indf0	equ	0xFEF
 13161                           postinc0	equ	0xFEE
 13162                           fsr0h	equ	0xFEA
 13163                           fsr0l	equ	0xFE9
 13164                           wreg	equ	0xFE8
 13165                           postdec1	equ	0xFE5
 13166                           fsr1h	equ	0xFE2
 13167                           fsr1l	equ	0xFE1
 13168                           indf2	equ	0xFDF
 13169                           postinc2	equ	0xFDE
 13170                           postdec2	equ	0xFDD
 13171                           fsr2h	equ	0xFDA
 13172                           fsr2l	equ	0xFD9
 13173                           status	equ	0xFD8
 13174                           
 13175 ;; *************** function i2_generate_compartment_array *****************
 13176 ;; Defined at:
 13177 ;;		line 220 in file "keypad.c"
 13178 ;; Parameters:    Size  Location     Type
 13179 ;;  step            2    0[COMRAM] int 
 13180 ;; Auto vars:     Size  Location     Type
 13181 ;;		None
 13182 ;; Return value:  Size  Location     Type
 13183 ;;                  1    wreg      void 
 13184 ;; Registers used:
 13185 ;;		wreg, status,2, status,0
 13186 ;; Tracked objects:
 13187 ;;		On entry : 0/0
 13188 ;;		On exit  : 0/0
 13189 ;;		Unchanged: 0/0
 13190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13191 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13193 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13194 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13195 ;;Total ram usage:        4 bytes
 13196 ;; Hardware stack levels used:    1
 13197 ;; This function calls:
 13198 ;;		Nothing
 13199 ;; This function is called by:
 13200 ;;		_interruptHandler
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           	psect	text33
 13205  0035E2                     __ptext33:
 13206                           	opt stack 0
 13207  0035E2                     i2_generate_compartment_array:
 13208                           	opt stack 26
 13209                           
 13210                           ;keypad.c: 222: switch(step){
 13211                           
 13212                           ;incstack = 0
 13213  0035E2  D11C               	goto	i2l784
 13214  0035E4                     
 13215                           ;keypad.c: 224: compartment_array[1] = 1;
 13216  0035E4  0E00               	movlw	0
 13217  0035E6  0100               	movlb	0	; () banked
 13218  0035E8  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13219  0035EA  0E01               	movlw	1
 13220  0035EC  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13221                           
 13222                           ;keypad.c: 225: compartment_array[3] = 1;
 13223  0035EE  0E00               	movlw	0
 13224  0035F0  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13225  0035F2  0E01               	movlw	1
 13226  0035F4  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13227                           
 13228                           ;keypad.c: 226: compartment_array[5] = 1;
 13229  0035F6  0E00               	movlw	0
 13230  0035F8  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13231  0035FA  0E01               	movlw	1
 13232  0035FC  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13233                           
 13234                           ;keypad.c: 227: compartment_array[7] = 1;
 13235  0035FE  0E00               	movlw	0
 13236  003600  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13237  003602  0E01               	movlw	1
 13238  003604  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13239                           
 13240                           ;keypad.c: 230: compartment_number[0] = 1;
 13241  003606  0E00               	movlw	0
 13242  003608  6E47               	movwf	_compartment_number+1,c
 13243  00360A  0E01               	movlw	1
 13244  00360C  6E46               	movwf	_compartment_number,c
 13245                           
 13246                           ;keypad.c: 231: compartment_number[1] = 3;
 13247  00360E  0E00               	movlw	0
 13248  003610  6E49               	movwf	_compartment_number+3,c
 13249  003612  0E03               	movlw	3
 13250  003614  6E48               	movwf	_compartment_number+2,c
 13251                           
 13252                           ;keypad.c: 232: compartment_number[2] = 5;
 13253  003616  0E00               	movlw	0
 13254  003618  6E4B               	movwf	_compartment_number+5,c
 13255  00361A  0E05               	movlw	5
 13256  00361C  6E4A               	movwf	_compartment_number+4,c
 13257                           
 13258                           ;keypad.c: 233: compartment_number[3] = 7;
 13259  00361E  0E00               	movlw	0
 13260  003620  6E4D               	movwf	_compartment_number+7,c
 13261  003622  0E07               	movlw	7
 13262  003624  6E4C               	movwf	_compartment_number+6,c
 13263                           
 13264                           ;keypad.c: 235: break;
 13265  003626  0012               	return	
 13266  003628                     
 13267                           ;keypad.c: 237: compartment_array[0] = 1;
 13268                           
 13269                           ; BSR set to: 0
 13270  003628  0E00               	movlw	0
 13271  00362A  0100               	movlb	0	; () banked
 13272  00362C  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13273  00362E  0E01               	movlw	1
 13274  003630  6F80               	movwf	_compartment_array& (0+255),b
 13275                           
 13276                           ;keypad.c: 238: compartment_array[1] = 1;
 13277  003632  0E00               	movlw	0
 13278  003634  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13279  003636  0E01               	movlw	1
 13280  003638  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13281                           
 13282                           ;keypad.c: 239: compartment_array[3] = 1;
 13283  00363A  0E00               	movlw	0
 13284  00363C  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13285  00363E  0E01               	movlw	1
 13286  003640  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13287                           
 13288                           ;keypad.c: 240: compartment_array[4] = 1;
 13289  003642  0E00               	movlw	0
 13290  003644  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13291  003646  0E01               	movlw	1
 13292  003648  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13293                           
 13294                           ;keypad.c: 241: compartment_array[6] = 1;
 13295  00364A  0E00               	movlw	0
 13296  00364C  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13297  00364E  0E01               	movlw	1
 13298  003650  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13299                           
 13300                           ;keypad.c: 245: compartment_number[0] = 0;
 13301  003652  0E00               	movlw	0
 13302  003654  6E47               	movwf	_compartment_number+1,c
 13303  003656  0E00               	movlw	0
 13304  003658  6E46               	movwf	_compartment_number,c
 13305                           
 13306                           ;keypad.c: 246: compartment_number[1] = 1;
 13307  00365A  0E00               	movlw	0
 13308  00365C  6E49               	movwf	_compartment_number+3,c
 13309  00365E  0E01               	movlw	1
 13310  003660  6E48               	movwf	_compartment_number+2,c
 13311                           
 13312                           ;keypad.c: 247: compartment_number[2] = 3;
 13313  003662  0E00               	movlw	0
 13314  003664  6E4B               	movwf	_compartment_number+5,c
 13315  003666  0E03               	movlw	3
 13316  003668  6E4A               	movwf	_compartment_number+4,c
 13317                           
 13318                           ;keypad.c: 248: compartment_number[3] = 4;
 13319  00366A  0E00               	movlw	0
 13320  00366C  6E4D               	movwf	_compartment_number+7,c
 13321  00366E  0E04               	movlw	4
 13322  003670  6E4C               	movwf	_compartment_number+6,c
 13323                           
 13324                           ;keypad.c: 249: compartment_number[4] = 6;
 13325  003672  0E00               	movlw	0
 13326  003674  6E4F               	movwf	_compartment_number+9,c
 13327  003676  0E06               	movlw	6
 13328  003678  6E4E               	movwf	_compartment_number+8,c
 13329                           
 13330                           ;keypad.c: 251: break;
 13331  00367A  0012               	return	
 13332  00367C                     
 13333                           ;keypad.c: 254: compartment_array[0] = 1;
 13334                           
 13335                           ; BSR set to: 0
 13336  00367C  0E00               	movlw	0
 13337  00367E  0100               	movlb	0	; () banked
 13338  003680  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13339  003682  0E01               	movlw	1
 13340  003684  6F80               	movwf	_compartment_array& (0+255),b
 13341                           
 13342                           ;keypad.c: 255: compartment_array[1] = 1;
 13343  003686  0E00               	movlw	0
 13344  003688  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13345  00368A  0E01               	movlw	1
 13346  00368C  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13347                           
 13348                           ;keypad.c: 256: compartment_array[2] = 1;
 13349  00368E  0E00               	movlw	0
 13350  003690  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13351  003692  0E01               	movlw	1
 13352  003694  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13353                           
 13354                           ;keypad.c: 257: compartment_array[4] = 1;
 13355  003696  0E00               	movlw	0
 13356  003698  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13357  00369A  0E01               	movlw	1
 13358  00369C  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13359                           
 13360                           ;keypad.c: 258: compartment_array[5] = 1;
 13361  00369E  0E00               	movlw	0
 13362  0036A0  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13363  0036A2  0E01               	movlw	1
 13364  0036A4  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13365                           
 13366                           ;keypad.c: 259: compartment_array[6] = 1;
 13367  0036A6  0E00               	movlw	0
 13368  0036A8  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13369  0036AA  0E01               	movlw	1
 13370  0036AC  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13371                           
 13372                           ;keypad.c: 262: compartment_number[0] = 0;
 13373  0036AE  0E00               	movlw	0
 13374  0036B0  6E47               	movwf	_compartment_number+1,c
 13375  0036B2  0E00               	movlw	0
 13376  0036B4  6E46               	movwf	_compartment_number,c
 13377                           
 13378                           ;keypad.c: 263: compartment_number[1] = 1;
 13379  0036B6  0E00               	movlw	0
 13380  0036B8  6E49               	movwf	_compartment_number+3,c
 13381  0036BA  0E01               	movlw	1
 13382  0036BC  6E48               	movwf	_compartment_number+2,c
 13383                           
 13384                           ;keypad.c: 264: compartment_number[2] = 2;
 13385  0036BE  0E00               	movlw	0
 13386  0036C0  6E4B               	movwf	_compartment_number+5,c
 13387  0036C2  0E02               	movlw	2
 13388  0036C4  6E4A               	movwf	_compartment_number+4,c
 13389                           
 13390                           ;keypad.c: 265: compartment_number[3] = 4;
 13391  0036C6  0E00               	movlw	0
 13392  0036C8  6E4D               	movwf	_compartment_number+7,c
 13393  0036CA  0E04               	movlw	4
 13394  0036CC  6E4C               	movwf	_compartment_number+6,c
 13395                           
 13396                           ;keypad.c: 266: compartment_number[4] = 5;
 13397  0036CE  0E00               	movlw	0
 13398  0036D0  6E4F               	movwf	_compartment_number+9,c
 13399  0036D2  0E05               	movlw	5
 13400  0036D4  6E4E               	movwf	_compartment_number+8,c
 13401                           
 13402                           ;keypad.c: 267: compartment_number[5] = 6;
 13403  0036D6  0E00               	movlw	0
 13404  0036D8  6E51               	movwf	_compartment_number+11,c
 13405  0036DA  0E06               	movlw	6
 13406  0036DC  6E50               	movwf	_compartment_number+10,c
 13407                           
 13408                           ;keypad.c: 269: break;
 13409  0036DE  0012               	return	
 13410  0036E0                     
 13411                           ;keypad.c: 271: compartment_array[0] = 1;
 13412                           
 13413                           ; BSR set to: 0
 13414  0036E0  0E00               	movlw	0
 13415  0036E2  0100               	movlb	0	; () banked
 13416  0036E4  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13417  0036E6  0E01               	movlw	1
 13418  0036E8  6F80               	movwf	_compartment_array& (0+255),b
 13419                           
 13420                           ;keypad.c: 272: compartment_array[1] = 1;
 13421  0036EA  0E00               	movlw	0
 13422  0036EC  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13423  0036EE  0E01               	movlw	1
 13424  0036F0  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13425                           
 13426                           ;keypad.c: 273: compartment_array[2] = 1;
 13427  0036F2  0E00               	movlw	0
 13428  0036F4  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13429  0036F6  0E01               	movlw	1
 13430  0036F8  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13431                           
 13432                           ;keypad.c: 274: compartment_array[3] = 1;
 13433  0036FA  0E00               	movlw	0
 13434  0036FC  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13435  0036FE  0E01               	movlw	1
 13436  003700  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13437                           
 13438                           ;keypad.c: 275: compartment_array[4] = 1;
 13439  003702  0E00               	movlw	0
 13440  003704  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13441  003706  0E01               	movlw	1
 13442  003708  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13443                           
 13444                           ;keypad.c: 276: compartment_array[5] = 1;
 13445  00370A  0E00               	movlw	0
 13446  00370C  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13447  00370E  0E01               	movlw	1
 13448  003710  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13449                           
 13450                           ;keypad.c: 277: compartment_array[6] = 1;
 13451  003712  0E00               	movlw	0
 13452  003714  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13453  003716  0E01               	movlw	1
 13454  003718  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13455                           
 13456                           ;keypad.c: 280: compartment_number[0] = 0;
 13457  00371A  0E00               	movlw	0
 13458  00371C  6E47               	movwf	_compartment_number+1,c
 13459  00371E  0E00               	movlw	0
 13460  003720  6E46               	movwf	_compartment_number,c
 13461                           
 13462                           ;keypad.c: 281: compartment_number[1] = 1;
 13463  003722  0E00               	movlw	0
 13464  003724  6E49               	movwf	_compartment_number+3,c
 13465  003726  0E01               	movlw	1
 13466  003728  6E48               	movwf	_compartment_number+2,c
 13467                           
 13468                           ;keypad.c: 282: compartment_number[2] = 2;
 13469  00372A  0E00               	movlw	0
 13470  00372C  6E4B               	movwf	_compartment_number+5,c
 13471  00372E  0E02               	movlw	2
 13472  003730  6E4A               	movwf	_compartment_number+4,c
 13473                           
 13474                           ;keypad.c: 283: compartment_number[3] = 3;
 13475  003732  0E00               	movlw	0
 13476  003734  6E4D               	movwf	_compartment_number+7,c
 13477  003736  0E03               	movlw	3
 13478  003738  6E4C               	movwf	_compartment_number+6,c
 13479                           
 13480                           ;keypad.c: 284: compartment_number[4] = 4;
 13481  00373A  0E00               	movlw	0
 13482  00373C  6E4F               	movwf	_compartment_number+9,c
 13483  00373E  0E04               	movlw	4
 13484  003740  6E4E               	movwf	_compartment_number+8,c
 13485                           
 13486                           ;keypad.c: 285: compartment_number[5] = 5;
 13487  003742  0E00               	movlw	0
 13488  003744  6E51               	movwf	_compartment_number+11,c
 13489  003746  0E05               	movlw	5
 13490  003748  6E50               	movwf	_compartment_number+10,c
 13491                           
 13492                           ;keypad.c: 286: compartment_number[6] = 6;
 13493  00374A  0E00               	movlw	0
 13494  00374C  6E53               	movwf	_compartment_number+13,c
 13495  00374E  0E06               	movlw	6
 13496  003750  6E52               	movwf	_compartment_number+12,c
 13497                           
 13498                           ;keypad.c: 288: break;
 13499  003752  0012               	return	
 13500  003754                     
 13501                           ;keypad.c: 290: compartment_array[0] = 1;
 13502                           
 13503                           ; BSR set to: 0
 13504  003754  0E00               	movlw	0
 13505  003756  0100               	movlb	0	; () banked
 13506  003758  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13507  00375A  0E01               	movlw	1
 13508  00375C  6F80               	movwf	_compartment_array& (0+255),b
 13509                           
 13510                           ;keypad.c: 291: compartment_array[1] = 1;
 13511  00375E  0E00               	movlw	0
 13512  003760  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13513  003762  0E01               	movlw	1
 13514  003764  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13515                           
 13516                           ;keypad.c: 292: compartment_array[2] = 1;
 13517  003766  0E00               	movlw	0
 13518  003768  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13519  00376A  0E01               	movlw	1
 13520  00376C  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13521                           
 13522                           ;keypad.c: 293: compartment_array[3] = 1;
 13523  00376E  0E00               	movlw	0
 13524  003770  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13525  003772  0E01               	movlw	1
 13526  003774  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13527                           
 13528                           ;keypad.c: 294: compartment_array[4] = 1;
 13529  003776  0E00               	movlw	0
 13530  003778  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13531  00377A  0E01               	movlw	1
 13532  00377C  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13533                           
 13534                           ;keypad.c: 295: compartment_array[5] = 1;
 13535  00377E  0E00               	movlw	0
 13536  003780  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13537  003782  0E01               	movlw	1
 13538  003784  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13539                           
 13540                           ;keypad.c: 296: compartment_array[6] = 1;
 13541  003786  0E00               	movlw	0
 13542  003788  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13543  00378A  0E01               	movlw	1
 13544  00378C  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13545                           
 13546                           ;keypad.c: 297: compartment_array[7] = 1;
 13547  00378E  0E00               	movlw	0
 13548  003790  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13549  003792  0E01               	movlw	1
 13550  003794  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13551                           
 13552                           ;keypad.c: 300: compartment_number[0] = 0;
 13553  003796  0E00               	movlw	0
 13554  003798  6E47               	movwf	_compartment_number+1,c
 13555  00379A  0E00               	movlw	0
 13556  00379C  6E46               	movwf	_compartment_number,c
 13557                           
 13558                           ;keypad.c: 301: compartment_number[1] = 1;
 13559  00379E  0E00               	movlw	0
 13560  0037A0  6E49               	movwf	_compartment_number+3,c
 13561  0037A2  0E01               	movlw	1
 13562  0037A4  6E48               	movwf	_compartment_number+2,c
 13563                           
 13564                           ;keypad.c: 302: compartment_number[2] = 2;
 13565  0037A6  0E00               	movlw	0
 13566  0037A8  6E4B               	movwf	_compartment_number+5,c
 13567  0037AA  0E02               	movlw	2
 13568  0037AC  6E4A               	movwf	_compartment_number+4,c
 13569                           
 13570                           ;keypad.c: 303: compartment_number[3] = 3;
 13571  0037AE  0E00               	movlw	0
 13572  0037B0  6E4D               	movwf	_compartment_number+7,c
 13573  0037B2  0E03               	movlw	3
 13574  0037B4  6E4C               	movwf	_compartment_number+6,c
 13575                           
 13576                           ;keypad.c: 304: compartment_number[4] = 4;
 13577  0037B6  0E00               	movlw	0
 13578  0037B8  6E4F               	movwf	_compartment_number+9,c
 13579  0037BA  0E04               	movlw	4
 13580  0037BC  6E4E               	movwf	_compartment_number+8,c
 13581                           
 13582                           ;keypad.c: 305: compartment_number[5] = 5;
 13583  0037BE  0E00               	movlw	0
 13584  0037C0  6E51               	movwf	_compartment_number+11,c
 13585  0037C2  0E05               	movlw	5
 13586  0037C4  6E50               	movwf	_compartment_number+10,c
 13587                           
 13588                           ;keypad.c: 306: compartment_number[6] = 6;
 13589  0037C6  0E00               	movlw	0
 13590  0037C8  6E53               	movwf	_compartment_number+13,c
 13591  0037CA  0E06               	movlw	6
 13592  0037CC  6E52               	movwf	_compartment_number+12,c
 13593                           
 13594                           ;keypad.c: 307: compartment_number[7] = 7;
 13595  0037CE  0E00               	movlw	0
 13596  0037D0  6E55               	movwf	_compartment_number+15,c
 13597  0037D2  0E07               	movlw	7
 13598  0037D4  6E54               	movwf	_compartment_number+14,c
 13599                           
 13600                           ;keypad.c: 309: break;
 13601  0037D6  0012               	return	
 13602  0037D8                     
 13603                           ;keypad.c: 311: compartment_array[0] = 0;
 13604                           
 13605                           ; BSR set to: 0
 13606  0037D8  0E00               	movlw	0
 13607  0037DA  0100               	movlb	0	; () banked
 13608  0037DC  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13609  0037DE  0E00               	movlw	0
 13610  0037E0  6F80               	movwf	_compartment_array& (0+255),b
 13611                           
 13612                           ;keypad.c: 312: compartment_array[1] = 0;
 13613  0037E2  0E00               	movlw	0
 13614  0037E4  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13615  0037E6  0E00               	movlw	0
 13616  0037E8  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13617                           
 13618                           ;keypad.c: 313: compartment_array[2] = 0;
 13619  0037EA  0E00               	movlw	0
 13620  0037EC  6F85               	movwf	(_compartment_array+5)& (0+255),b
 13621  0037EE  0E00               	movlw	0
 13622  0037F0  6F84               	movwf	(_compartment_array+4)& (0+255),b
 13623                           
 13624                           ;keypad.c: 314: compartment_array[3] = 0;
 13625  0037F2  0E00               	movlw	0
 13626  0037F4  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13627  0037F6  0E00               	movlw	0
 13628  0037F8  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13629                           
 13630                           ;keypad.c: 315: compartment_array[4] = 0;
 13631  0037FA  0E00               	movlw	0
 13632  0037FC  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13633  0037FE  0E00               	movlw	0
 13634  003800  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13635                           
 13636                           ;keypad.c: 316: compartment_array[5] = 0;
 13637  003802  0E00               	movlw	0
 13638  003804  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13639  003806  0E00               	movlw	0
 13640  003808  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13641                           
 13642                           ;keypad.c: 317: compartment_array[6] = 0;
 13643  00380A  0E00               	movlw	0
 13644  00380C  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13645  00380E  0E00               	movlw	0
 13646  003810  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13647                           
 13648                           ;keypad.c: 318: compartment_array[7] = 0;
 13649  003812  0E00               	movlw	0
 13650  003814  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13651  003816  0E00               	movlw	0
 13652  003818  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13653                           
 13654                           ;keypad.c: 320: }
 13655  00381A  0012               	return	
 13656  00381C                     i2l784:
 13657                           
 13658                           ; BSR set to: 0
 13659  00381C  C001  F003         	movff	i2generate_compartment_array@step,??i2_generate_compartment_array
 13660  003820  C002  F004         	movff	i2generate_compartment_array@step+1,??i2_generate_compartment_array+1
 13661                           
 13662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13663                           ; Switch size 1, requested type "space"
 13664                           ; Number of cases is 1, Range of values is 0 to 0
 13665                           ; switch strategies available:
 13666                           ; Name         Instructions Cycles
 13667                           ; simple_byte            4     3 (average)
 13668                           ;	Chosen strategy is simple_byte
 13669  003824  5004               	movf	??i2_generate_compartment_array+1,w,c
 13670  003826  0A00               	xorlw	0	; case 0
 13671  003828  A4D8               	btfss	status,2,c
 13672  00382A  D7D6               	goto	i2l791
 13673                           
 13674                           ; Switch size 1, requested type "space"
 13675                           ; Number of cases is 5, Range of values is 4 to 8
 13676                           ; switch strategies available:
 13677                           ; Name         Instructions Cycles
 13678                           ; simple_byte           16     9 (average)
 13679                           ;	Chosen strategy is simple_byte
 13680  00382C  5003               	movf	??i2_generate_compartment_array,w,c
 13681  00382E  0A04               	xorlw	4	; case 4
 13682  003830  B4D8               	btfsc	status,2,c
 13683  003832  D6D8               	goto	i2l785
 13684  003834  0A01               	xorlw	1	; case 5
 13685  003836  B4D8               	btfsc	status,2,c
 13686  003838  D6F7               	goto	i2l787
 13687  00383A  0A03               	xorlw	3	; case 6
 13688  00383C  B4D8               	btfsc	status,2,c
 13689  00383E  D71E               	goto	i2l788
 13690  003840  0A01               	xorlw	1	; case 7
 13691  003842  B4D8               	btfsc	status,2,c
 13692  003844  D74D               	goto	i2l789
 13693  003846  0A0F               	xorlw	15	; case 8
 13694  003848  B4D8               	btfsc	status,2,c
 13695  00384A  D784               	goto	i2l790
 13696  00384C  D7C5               	goto	i2l791
 13697  00384E                     __end_ofi2_generate_compartment_array:
 13698                           	opt stack 0
 13699                           pclatu	equ	0xFFB
 13700                           pclath	equ	0xFFA
 13701                           tblptru	equ	0xFF8
 13702                           tblptrh	equ	0xFF7
 13703                           tblptrl	equ	0xFF6
 13704                           tablat	equ	0xFF5
 13705                           prodh	equ	0xFF4
 13706                           prodl	equ	0xFF3
 13707                           intcon	equ	0xFF2
 13708                           intcon3	equ	0xFF0
 13709                           indf0	equ	0xFEF
 13710                           postinc0	equ	0xFEE
 13711                           fsr0h	equ	0xFEA
 13712                           fsr0l	equ	0xFE9
 13713                           wreg	equ	0xFE8
 13714                           postdec1	equ	0xFE5
 13715                           fsr1h	equ	0xFE2
 13716                           fsr1l	equ	0xFE1
 13717                           indf2	equ	0xFDF
 13718                           postinc2	equ	0xFDE
 13719                           postdec2	equ	0xFDD
 13720                           fsr2h	equ	0xFDA
 13721                           fsr2l	equ	0xFD9
 13722                           status	equ	0xFD8
 13723                           
 13724 ;; *************** function i2___awdiv *****************
 13725 ;; Defined at:
 13726 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 13727 ;; Parameters:    Size  Location     Type
 13728 ;;  dividend        2    0[COMRAM] int 
 13729 ;;  divisor         2    2[COMRAM] int 
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;  __awdiv         2    6[COMRAM] int 
 13732 ;;  __awdiv         1    5[COMRAM] unsigned char 
 13733 ;;  __awdiv         1    4[COMRAM] unsigned char 
 13734 ;; Return value:  Size  Location     Type
 13735 ;;                  2    0[COMRAM] int 
 13736 ;; Registers used:
 13737 ;;		wreg, status,2, status,0
 13738 ;; Tracked objects:
 13739 ;;		On entry : 0/0
 13740 ;;		On exit  : 0/0
 13741 ;;		Unchanged: 0/0
 13742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13743 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13747 ;;Total ram usage:        8 bytes
 13748 ;; Hardware stack levels used:    1
 13749 ;; This function calls:
 13750 ;;		Nothing
 13751 ;; This function is called by:
 13752 ;;		_interruptHandler
 13753 ;; This function uses a non-reentrant model
 13754 ;;
 13755                           
 13756                           	psect	text34
 13757  00412E                     __ptext34:
 13758                           	opt stack 0
 13759  00412E                     i2___awdiv:
 13760                           	opt stack 26
 13761                           
 13762                           ;incstack = 0
 13763  00412E  0E00               	movlw	0
 13764  004130  6E06               	movwf	i2___awdiv@sign,c
 13765  004132  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13766  004134  D006               	goto	i2l1087
 13767  004136  6C03               	negf	i2___awdiv@divisor,c
 13768  004138  1E04               	comf	i2___awdiv@divisor+1,f,c
 13769  00413A  B0D8               	btfsc	status,0,c
 13770  00413C  2A04               	incf	i2___awdiv@divisor+1,f,c
 13771  00413E  0E01               	movlw	1
 13772  004140  6E06               	movwf	i2___awdiv@sign,c
 13773  004142                     i2l1087:
 13774  004142  AE02               	btfss	i2___awdiv@dividend+1,7,c
 13775  004144  D006               	goto	i2l1088
 13776  004146  6C01               	negf	i2___awdiv@dividend,c
 13777  004148  1E02               	comf	i2___awdiv@dividend+1,f,c
 13778  00414A  B0D8               	btfsc	status,0,c
 13779  00414C  2A02               	incf	i2___awdiv@dividend+1,f,c
 13780  00414E  0E01               	movlw	1
 13781  004150  1A06               	xorwf	i2___awdiv@sign,f,c
 13782  004152                     i2l1088:
 13783  004152  0E00               	movlw	0
 13784  004154  6E08               	movwf	i2___awdiv@quotient+1,c
 13785  004156  0E00               	movlw	0
 13786  004158  6E07               	movwf	i2___awdiv@quotient,c
 13787  00415A  5003               	movf	i2___awdiv@divisor,w,c
 13788  00415C  1004               	iorwf	i2___awdiv@divisor+1,w,c
 13789  00415E  B4D8               	btfsc	status,2,c
 13790  004160  D01C               	goto	i2l1095
 13791  004162  0E01               	movlw	1
 13792  004164  6E05               	movwf	i2___awdiv@counter,c
 13793  004166  D004               	goto	i2l1090
 13794  004168  90D8               	bcf	status,0,c
 13795  00416A  3603               	rlcf	i2___awdiv@divisor,f,c
 13796  00416C  3604               	rlcf	i2___awdiv@divisor+1,f,c
 13797  00416E  2A05               	incf	i2___awdiv@counter,f,c
 13798  004170                     i2l1090:
 13799  004170  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13800  004172  D7FA               	goto	i2l1091
 13801  004174                     i2u404_40:
 13802  004174  90D8               	bcf	status,0,c
 13803  004176  3607               	rlcf	i2___awdiv@quotient,f,c
 13804  004178  3608               	rlcf	i2___awdiv@quotient+1,f,c
 13805  00417A  5003               	movf	i2___awdiv@divisor,w,c
 13806  00417C  5C01               	subwf	i2___awdiv@dividend,w,c
 13807  00417E  5004               	movf	i2___awdiv@divisor+1,w,c
 13808  004180  5802               	subwfb	i2___awdiv@dividend+1,w,c
 13809  004182  A0D8               	btfss	status,0,c
 13810  004184  D005               	goto	i2l1094
 13811  004186  5003               	movf	i2___awdiv@divisor,w,c
 13812  004188  5E01               	subwf	i2___awdiv@dividend,f,c
 13813  00418A  5004               	movf	i2___awdiv@divisor+1,w,c
 13814  00418C  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 13815  00418E  8007               	bsf	i2___awdiv@quotient,0,c
 13816  004190                     i2l1094:
 13817  004190  90D8               	bcf	status,0,c
 13818  004192  3204               	rrcf	i2___awdiv@divisor+1,f,c
 13819  004194  3203               	rrcf	i2___awdiv@divisor,f,c
 13820  004196  2E05               	decfsz	i2___awdiv@counter,f,c
 13821  004198  D7ED               	goto	i2u404_40
 13822  00419A                     i2l1095:
 13823  00419A  5006               	movf	i2___awdiv@sign,w,c
 13824  00419C  B4D8               	btfsc	status,2,c
 13825  00419E  D004               	goto	i2l1096
 13826  0041A0  6C07               	negf	i2___awdiv@quotient,c
 13827  0041A2  1E08               	comf	i2___awdiv@quotient+1,f,c
 13828  0041A4  B0D8               	btfsc	status,0,c
 13829  0041A6  2A08               	incf	i2___awdiv@quotient+1,f,c
 13830  0041A8                     i2l1096:
 13831  0041A8  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 13832  0041AC  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 13833  0041B0  0012               	return	
 13834  0041B2                     __end_ofi2___awdiv:
 13835                           	opt stack 0
 13836                           pclatu	equ	0xFFB
 13837                           pclath	equ	0xFFA
 13838                           tblptru	equ	0xFF8
 13839                           tblptrh	equ	0xFF7
 13840                           tblptrl	equ	0xFF6
 13841                           tablat	equ	0xFF5
 13842                           prodh	equ	0xFF4
 13843                           prodl	equ	0xFF3
 13844                           intcon	equ	0xFF2
 13845                           intcon3	equ	0xFF0
 13846                           indf0	equ	0xFEF
 13847                           postinc0	equ	0xFEE
 13848                           fsr0h	equ	0xFEA
 13849                           fsr0l	equ	0xFE9
 13850                           wreg	equ	0xFE8
 13851                           postdec1	equ	0xFE5
 13852                           fsr1h	equ	0xFE2
 13853                           fsr1l	equ	0xFE1
 13854                           indf2	equ	0xFDF
 13855                           postinc2	equ	0xFDE
 13856                           postdec2	equ	0xFDD
 13857                           fsr2h	equ	0xFDA
 13858                           fsr2l	equ	0xFD9
 13859                           status	equ	0xFD8
 13860                           
 13861 ;; *************** function i2_I2C_Master_Write *****************
 13862 ;; Defined at:
 13863 ;;		line 108 in file "I2C.c"
 13864 ;; Parameters:    Size  Location     Type
 13865 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 13866 ;; Auto vars:     Size  Location     Type
 13867 ;;		None
 13868 ;; Return value:  Size  Location     Type
 13869 ;;                  1    wreg      void 
 13870 ;; Registers used:
 13871 ;;		wreg, status,2, status,0, cstack
 13872 ;; Tracked objects:
 13873 ;;		On entry : 0/0
 13874 ;;		On exit  : 0/0
 13875 ;;		Unchanged: 0/0
 13876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13880 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13881 ;;Total ram usage:        2 bytes
 13882 ;; Hardware stack levels used:    1
 13883 ;; Hardware stack levels required when called:    1
 13884 ;; This function calls:
 13885 ;;		i2_I2C_Master_Wait
 13886 ;; This function is called by:
 13887 ;;		_interruptHandler
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           	psect	text35
 13892  0048B4                     __ptext35:
 13893                           	opt stack 0
 13894  0048B4                     i2_I2C_Master_Write:
 13895                           	opt stack 25
 13896                           
 13897                           ;I2C.c: 116: I2C_Master_Wait();
 13898                           
 13899                           ;incstack = 0
 13900  0048B4  EC3F  F024         	call	i2_I2C_Master_Wait	;wreg free
 13901                           
 13902                           ;I2C.c: 117: SSPBUF = byteToWrite;
 13903  0048B8  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 13904  0048BC  0012               	return		;funcret
 13905  0048BE                     __end_ofi2_I2C_Master_Write:
 13906                           	opt stack 0
 13907                           pclatu	equ	0xFFB
 13908                           pclath	equ	0xFFA
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           intcon3	equ	0xFF0
 13917                           indf0	equ	0xFEF
 13918                           postinc0	equ	0xFEE
 13919                           fsr0h	equ	0xFEA
 13920                           fsr0l	equ	0xFE9
 13921                           wreg	equ	0xFE8
 13922                           postdec1	equ	0xFE5
 13923                           fsr1h	equ	0xFE2
 13924                           fsr1l	equ	0xFE1
 13925                           indf2	equ	0xFDF
 13926                           postinc2	equ	0xFDE
 13927                           postdec2	equ	0xFDD
 13928                           fsr2h	equ	0xFDA
 13929                           fsr2l	equ	0xFD9
 13930                           status	equ	0xFD8
 13931                           
 13932 ;; *************** function i2_I2C_Master_Stop *****************
 13933 ;; Defined at:
 13934 ;;		line 95 in file "I2C.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;		None
 13937 ;; Auto vars:     Size  Location     Type
 13938 ;;		None
 13939 ;; Return value:  Size  Location     Type
 13940 ;;                  1    wreg      void 
 13941 ;; Registers used:
 13942 ;;		wreg, status,2, status,0, cstack
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;Total ram usage:        0 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; Hardware stack levels required when called:    1
 13955 ;; This function calls:
 13956 ;;		i2_I2C_Master_Wait
 13957 ;; This function is called by:
 13958 ;;		_interruptHandler
 13959 ;; This function uses a non-reentrant model
 13960 ;;
 13961                           
 13962                           	psect	text36
 13963  0048CE                     __ptext36:
 13964                           	opt stack 0
 13965  0048CE                     i2_I2C_Master_Stop:
 13966                           	opt stack 25
 13967                           
 13968                           ;I2C.c: 104: I2C_Master_Wait();
 13969                           
 13970                           ;incstack = 0
 13971  0048CE  EC3F  F024         	call	i2_I2C_Master_Wait	;wreg free
 13972                           
 13973                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 13974  0048D2  84C5               	bsf	4037,2,c	;volatile
 13975  0048D4  0012               	return		;funcret
 13976  0048D6                     __end_ofi2_I2C_Master_Stop:
 13977                           	opt stack 0
 13978                           pclatu	equ	0xFFB
 13979                           pclath	equ	0xFFA
 13980                           tblptru	equ	0xFF8
 13981                           tblptrh	equ	0xFF7
 13982                           tblptrl	equ	0xFF6
 13983                           tablat	equ	0xFF5
 13984                           prodh	equ	0xFF4
 13985                           prodl	equ	0xFF3
 13986                           intcon	equ	0xFF2
 13987                           intcon3	equ	0xFF0
 13988                           indf0	equ	0xFEF
 13989                           postinc0	equ	0xFEE
 13990                           fsr0h	equ	0xFEA
 13991                           fsr0l	equ	0xFE9
 13992                           wreg	equ	0xFE8
 13993                           postdec1	equ	0xFE5
 13994                           fsr1h	equ	0xFE2
 13995                           fsr1l	equ	0xFE1
 13996                           indf2	equ	0xFDF
 13997                           postinc2	equ	0xFDE
 13998                           postdec2	equ	0xFDD
 13999                           fsr2h	equ	0xFDA
 14000                           fsr2l	equ	0xFD9
 14001                           status	equ	0xFD8
 14002                           
 14003 ;; *************** function i2_I2C_Master_Start *****************
 14004 ;; Defined at:
 14005 ;;		line 69 in file "I2C.c"
 14006 ;; Parameters:    Size  Location     Type
 14007 ;;		None
 14008 ;; Auto vars:     Size  Location     Type
 14009 ;;		None
 14010 ;; Return value:  Size  Location     Type
 14011 ;;                  1    wreg      void 
 14012 ;; Registers used:
 14013 ;;		wreg, status,2, status,0, cstack
 14014 ;; Tracked objects:
 14015 ;;		On entry : 0/0
 14016 ;;		On exit  : 0/0
 14017 ;;		Unchanged: 0/0
 14018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14023 ;;Total ram usage:        0 bytes
 14024 ;; Hardware stack levels used:    1
 14025 ;; Hardware stack levels required when called:    1
 14026 ;; This function calls:
 14027 ;;		i2_I2C_Master_Wait
 14028 ;; This function is called by:
 14029 ;;		_interruptHandler
 14030 ;; This function uses a non-reentrant model
 14031 ;;
 14032                           
 14033                           	psect	text37
 14034  0048D6                     __ptext37:
 14035                           	opt stack 0
 14036  0048D6                     i2_I2C_Master_Start:
 14037                           	opt stack 25
 14038                           
 14039                           ;I2C.c: 78: I2C_Master_Wait();
 14040                           
 14041                           ;incstack = 0
 14042  0048D6  EC3F  F024         	call	i2_I2C_Master_Wait	;wreg free
 14043                           
 14044                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 14045  0048DA  80C5               	bsf	4037,0,c	;volatile
 14046  0048DC  0012               	return		;funcret
 14047  0048DE                     __end_ofi2_I2C_Master_Start:
 14048                           	opt stack 0
 14049                           pclatu	equ	0xFFB
 14050                           pclath	equ	0xFFA
 14051                           tblptru	equ	0xFF8
 14052                           tblptrh	equ	0xFF7
 14053                           tblptrl	equ	0xFF6
 14054                           tablat	equ	0xFF5
 14055                           prodh	equ	0xFF4
 14056                           prodl	equ	0xFF3
 14057                           intcon	equ	0xFF2
 14058                           intcon3	equ	0xFF0
 14059                           indf0	equ	0xFEF
 14060                           postinc0	equ	0xFEE
 14061                           fsr0h	equ	0xFEA
 14062                           fsr0l	equ	0xFE9
 14063                           wreg	equ	0xFE8
 14064                           postdec1	equ	0xFE5
 14065                           fsr1h	equ	0xFE2
 14066                           fsr1l	equ	0xFE1
 14067                           indf2	equ	0xFDF
 14068                           postinc2	equ	0xFDE
 14069                           postdec2	equ	0xFDD
 14070                           fsr2h	equ	0xFDA
 14071                           fsr2l	equ	0xFD9
 14072                           status	equ	0xFD8
 14073                           
 14074 ;; *************** function i2_I2C_Master_Read *****************
 14075 ;; Defined at:
 14076 ;;		line 120 in file "I2C.c"
 14077 ;; Parameters:    Size  Location     Type
 14078 ;;  ackBit          1    wreg     unsigned char 
 14079 ;; Auto vars:     Size  Location     Type
 14080 ;;  ackBit          1    1[COMRAM] unsigned char 
 14081 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14082 ;; Return value:  Size  Location     Type
 14083 ;;                  1    wreg      unsigned char 
 14084 ;; Registers used:
 14085 ;;		wreg, status,2, status,0, cstack
 14086 ;; Tracked objects:
 14087 ;;		On entry : 0/0
 14088 ;;		On exit  : 0/0
 14089 ;;		Unchanged: 0/0
 14090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14094 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14095 ;;Total ram usage:        2 bytes
 14096 ;; Hardware stack levels used:    1
 14097 ;; Hardware stack levels required when called:    1
 14098 ;; This function calls:
 14099 ;;		i2_I2C_Master_Wait
 14100 ;; This function is called by:
 14101 ;;		_interruptHandler
 14102 ;; This function uses a non-reentrant model
 14103 ;;
 14104                           
 14105                           	psect	text38
 14106  0047AE                     __ptext38:
 14107                           	opt stack 0
 14108  0047AE                     i2_I2C_Master_Read:
 14109                           	opt stack 25
 14110                           
 14111                           ;incstack = 0
 14112                           ;i2I2C_Master_Read@ackBit stored from wreg
 14113  0047AE  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 14114                           
 14115                           ;I2C.c: 130: unsigned char receivedByte;
 14116                           ;I2C.c: 132: I2C_Master_Wait();
 14117  0047B0  EC3F  F024         	call	i2_I2C_Master_Wait	;wreg free
 14118                           
 14119                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 14120  0047B4  86C5               	bsf	4037,3,c	;volatile
 14121                           
 14122                           ;I2C.c: 135: I2C_Master_Wait();
 14123  0047B6  EC3F  F024         	call	i2_I2C_Master_Wait	;wreg free
 14124                           
 14125                           ;I2C.c: 136: receivedByte = SSPBUF;
 14126  0047BA  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 14127                           
 14128                           ;I2C.c: 138: I2C_Master_Wait();
 14129  0047BE  EC3F  F024         	call	i2_I2C_Master_Wait	;wreg free
 14130                           
 14131                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 14132  0047C2  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 14133  0047C4  D002               	bra	i2u370_45
 14134  0047C6  9AC5               	bcf	4037,5,c	;volatile
 14135  0047C8  D001               	bra	i2u370_46
 14136  0047CA                     i2u370_45:
 14137  0047CA  8AC5               	bsf	4037,5,c	;volatile
 14138  0047CC                     i2u370_46:
 14139                           
 14140                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 14141  0047CC  88C5               	bsf	4037,4,c	;volatile
 14142                           
 14143                           ;I2C.c: 142: return receivedByte;
 14144  0047CE  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 14145  0047D0  0012               	return	
 14146  0047D2                     __end_ofi2_I2C_Master_Read:
 14147                           	opt stack 0
 14148                           pclatu	equ	0xFFB
 14149                           pclath	equ	0xFFA
 14150                           tblptru	equ	0xFF8
 14151                           tblptrh	equ	0xFF7
 14152                           tblptrl	equ	0xFF6
 14153                           tablat	equ	0xFF5
 14154                           prodh	equ	0xFF4
 14155                           prodl	equ	0xFF3
 14156                           intcon	equ	0xFF2
 14157                           intcon3	equ	0xFF0
 14158                           indf0	equ	0xFEF
 14159                           postinc0	equ	0xFEE
 14160                           fsr0h	equ	0xFEA
 14161                           fsr0l	equ	0xFE9
 14162                           wreg	equ	0xFE8
 14163                           postdec1	equ	0xFE5
 14164                           fsr1h	equ	0xFE2
 14165                           fsr1l	equ	0xFE1
 14166                           indf2	equ	0xFDF
 14167                           postinc2	equ	0xFDE
 14168                           postdec2	equ	0xFDD
 14169                           fsr2h	equ	0xFDA
 14170                           fsr2l	equ	0xFD9
 14171                           status	equ	0xFD8
 14172                           
 14173 ;; *************** function i2_I2C_Master_Wait *****************
 14174 ;; Defined at:
 14175 ;;		line 51 in file "I2C.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;		None
 14178 ;; Auto vars:     Size  Location     Type
 14179 ;;		None
 14180 ;; Return value:  Size  Location     Type
 14181 ;;                  1    wreg      void 
 14182 ;; Registers used:
 14183 ;;		wreg, status,2, status,0
 14184 ;; Tracked objects:
 14185 ;;		On entry : 0/0
 14186 ;;		On exit  : 0/0
 14187 ;;		Unchanged: 0/0
 14188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14191 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14192 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14193 ;;Total ram usage:        1 bytes
 14194 ;; Hardware stack levels used:    1
 14195 ;; This function calls:
 14196 ;;		Nothing
 14197 ;; This function is called by:
 14198 ;;		i2_I2C_Master_Start
 14199 ;;		i2_I2C_Master_Stop
 14200 ;;		i2_I2C_Master_Write
 14201 ;;		i2_I2C_Master_Read
 14202 ;; This function uses a non-reentrant model
 14203 ;;
 14204                           
 14205                           	psect	text39
 14206  00487E                     __ptext39:
 14207                           	opt stack 0
 14208  00487E                     i2_I2C_Master_Wait:
 14209                           	opt stack 25
 14210                           
 14211                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 14212                           
 14213                           ;incstack = 0
 14214  00487E  B4C7               	btfsc	4039,2,c	;volatile
 14215  004880  D7FE               	goto	i2_I2C_Master_Wait
 14216  004882  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14217  004886  0E1F               	movlw	31
 14218  004888  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14219  00488A  B4D8               	btfsc	status,2,c
 14220  00488C  0012               	return	
 14221  00488E  D7F7               	goto	i2_I2C_Master_Wait
 14222  004890                     __end_ofi2_I2C_Master_Wait:
 14223                           	opt stack 0
 14224                           pclatu	equ	0xFFB
 14225                           pclath	equ	0xFFA
 14226                           tblptru	equ	0xFF8
 14227                           tblptrh	equ	0xFF7
 14228                           tblptrl	equ	0xFF6
 14229                           tablat	equ	0xFF5
 14230                           prodh	equ	0xFF4
 14231                           prodl	equ	0xFF3
 14232                           intcon	equ	0xFF2
 14233                           intcon3	equ	0xFF0
 14234                           indf0	equ	0xFEF
 14235                           postinc0	equ	0xFEE
 14236                           fsr0h	equ	0xFEA
 14237                           fsr0l	equ	0xFE9
 14238                           wreg	equ	0xFE8
 14239                           postdec1	equ	0xFE5
 14240                           fsr1h	equ	0xFE2
 14241                           fsr1l	equ	0xFE1
 14242                           indf2	equ	0xFDF
 14243                           postinc2	equ	0xFDE
 14244                           postdec2	equ	0xFDD
 14245                           fsr2h	equ	0xFDA
 14246                           fsr2l	equ	0xFD9
 14247                           status	equ	0xFD8
 14248                           
 14249 ;; *************** function i2_I2C_Master_Init *****************
 14250 ;; Defined at:
 14251 ;;		line 14 in file "I2C.c"
 14252 ;; Parameters:    Size  Location     Type
 14253 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 14254 ;; Auto vars:     Size  Location     Type
 14255 ;;		None
 14256 ;; Return value:  Size  Location     Type
 14257 ;;                  1    wreg      void 
 14258 ;; Registers used:
 14259 ;;		wreg, status,2, status,0, cstack
 14260 ;; Tracked objects:
 14261 ;;		On entry : 0/0
 14262 ;;		On exit  : 0/0
 14263 ;;		Unchanged: 0/0
 14264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14267 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14269 ;;Total ram usage:        8 bytes
 14270 ;; Hardware stack levels used:    1
 14271 ;; Hardware stack levels required when called:    1
 14272 ;; This function calls:
 14273 ;;		i2___lldiv
 14274 ;; This function is called by:
 14275 ;;		_interruptHandler
 14276 ;; This function uses a non-reentrant model
 14277 ;;
 14278                           
 14279                           	psect	text40
 14280  0043E2                     __ptext40:
 14281                           	opt stack 0
 14282  0043E2                     i2_I2C_Master_Init:
 14283                           	opt stack 25
 14284                           
 14285                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 14286                           
 14287                           ;incstack = 0
 14288  0043E2  9AC6               	bcf	4038,5,c	;volatile
 14289                           
 14290                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 14291  0043E4  8694               	bsf	3988,3,c	;volatile
 14292                           
 14293                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 14294  0043E6  8894               	bsf	3988,4,c	;volatile
 14295                           
 14296                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 14297  0043E8  0E80               	movlw	128
 14298  0043EA  6EC7               	movwf	4039,c	;volatile
 14299                           
 14300                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 14301  0043EC  0E28               	movlw	40
 14302  0043EE  6EC6               	movwf	4038,c	;volatile
 14303                           
 14304                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 14305  0043F0  0E00               	movlw	0
 14306  0043F2  6EC5               	movwf	4037,c	;volatile
 14307                           
 14308                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 14309  0043F4  0E00               	movlw	0
 14310  0043F6  6E01               	movwf	i2___lldiv@dividend,c
 14311  0043F8  0E5A               	movlw	90
 14312  0043FA  6E02               	movwf	i2___lldiv@dividend+1,c
 14313  0043FC  0E62               	movlw	98
 14314  0043FE  6E03               	movwf	i2___lldiv@dividend+2,c
 14315  004400  0E02               	movlw	2
 14316  004402  6E04               	movwf	i2___lldiv@dividend+3,c
 14317  004404  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 14318  004408  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 14319  00440C  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 14320  004410  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 14321  004414  0E02               	movlw	2
 14322  004416                     i2u369_45:
 14323  004416  90D8               	bcf	status,0,c
 14324  004418  3612               	rlcf	??i2_I2C_Master_Init,f,c
 14325  00441A  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 14326  00441C  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 14327  00441E  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 14328  004420  2EE8               	decfsz	wreg,f,c
 14329  004422  D7F9               	goto	i2u369_45
 14330  004424  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 14331  004428  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 14332  00442C  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 14333  004430  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 14334  004434  ECD9  F020         	call	i2___lldiv	;wreg free
 14335  004438  0401               	decf	?i2___lldiv,w,c
 14336  00443A  6EC8               	movwf	4040,c	;volatile
 14337  00443C  0012               	return		;funcret
 14338  00443E                     __end_ofi2_I2C_Master_Init:
 14339                           	opt stack 0
 14340                           pclatu	equ	0xFFB
 14341                           pclath	equ	0xFFA
 14342                           tblptru	equ	0xFF8
 14343                           tblptrh	equ	0xFF7
 14344                           tblptrl	equ	0xFF6
 14345                           tablat	equ	0xFF5
 14346                           prodh	equ	0xFF4
 14347                           prodl	equ	0xFF3
 14348                           intcon	equ	0xFF2
 14349                           intcon3	equ	0xFF0
 14350                           indf0	equ	0xFEF
 14351                           postinc0	equ	0xFEE
 14352                           fsr0h	equ	0xFEA
 14353                           fsr0l	equ	0xFE9
 14354                           wreg	equ	0xFE8
 14355                           postdec1	equ	0xFE5
 14356                           fsr1h	equ	0xFE2
 14357                           fsr1l	equ	0xFE1
 14358                           indf2	equ	0xFDF
 14359                           postinc2	equ	0xFDE
 14360                           postdec2	equ	0xFDD
 14361                           fsr2h	equ	0xFDA
 14362                           fsr2l	equ	0xFD9
 14363                           status	equ	0xFD8
 14364                           
 14365 ;; *************** function i2___lldiv *****************
 14366 ;; Defined at:
 14367 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 14368 ;; Parameters:    Size  Location     Type
 14369 ;;  dividend        4    0[COMRAM] unsigned long 
 14370 ;;  divisor         4    4[COMRAM] unsigned long 
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;  __lldiv         4    8[COMRAM] unsigned long 
 14373 ;;  __lldiv         1   12[COMRAM] unsigned char 
 14374 ;; Return value:  Size  Location     Type
 14375 ;;                  4    0[COMRAM] unsigned long 
 14376 ;; Registers used:
 14377 ;;		wreg, status,2, status,0
 14378 ;; Tracked objects:
 14379 ;;		On entry : 0/0
 14380 ;;		On exit  : 0/0
 14381 ;;		Unchanged: 0/0
 14382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14383 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14384 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14386 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14387 ;;Total ram usage:       13 bytes
 14388 ;; Hardware stack levels used:    1
 14389 ;; This function calls:
 14390 ;;		Nothing
 14391 ;; This function is called by:
 14392 ;;		i2_I2C_Master_Init
 14393 ;; This function uses a non-reentrant model
 14394 ;;
 14395                           
 14396                           	psect	text41
 14397  0041B2                     __ptext41:
 14398                           	opt stack 0
 14399  0041B2                     i2___lldiv:
 14400                           	opt stack 25
 14401                           
 14402                           ;incstack = 0
 14403  0041B2  0E00               	movlw	0
 14404  0041B4  6E09               	movwf	i2___lldiv@quotient,c
 14405  0041B6  0E00               	movlw	0
 14406  0041B8  6E0A               	movwf	i2___lldiv@quotient+1,c
 14407  0041BA  0E00               	movlw	0
 14408  0041BC  6E0B               	movwf	i2___lldiv@quotient+2,c
 14409  0041BE  0E00               	movlw	0
 14410  0041C0  6E0C               	movwf	i2___lldiv@quotient+3,c
 14411  0041C2  5005               	movf	i2___lldiv@divisor,w,c
 14412  0041C4  1006               	iorwf	i2___lldiv@divisor+1,w,c
 14413  0041C6  1007               	iorwf	i2___lldiv@divisor+2,w,c
 14414  0041C8  1008               	iorwf	i2___lldiv@divisor+3,w,c
 14415  0041CA  B4D8               	btfsc	status,2,c
 14416  0041CC  D02A               	goto	i2l1280
 14417  0041CE  0E01               	movlw	1
 14418  0041D0  6E0D               	movwf	i2___lldiv@counter,c
 14419  0041D2  D006               	goto	i2l1275
 14420  0041D4  90D8               	bcf	status,0,c
 14421  0041D6  3605               	rlcf	i2___lldiv@divisor,f,c
 14422  0041D8  3606               	rlcf	i2___lldiv@divisor+1,f,c
 14423  0041DA  3607               	rlcf	i2___lldiv@divisor+2,f,c
 14424  0041DC  3608               	rlcf	i2___lldiv@divisor+3,f,c
 14425  0041DE  2A0D               	incf	i2___lldiv@counter,f,c
 14426  0041E0                     i2l1275:
 14427  0041E0  AE08               	btfss	i2___lldiv@divisor+3,7,c
 14428  0041E2  D7F8               	goto	i2l1276
 14429  0041E4                     i2u285_40:
 14430  0041E4  90D8               	bcf	status,0,c
 14431  0041E6  3609               	rlcf	i2___lldiv@quotient,f,c
 14432  0041E8  360A               	rlcf	i2___lldiv@quotient+1,f,c
 14433  0041EA  360B               	rlcf	i2___lldiv@quotient+2,f,c
 14434  0041EC  360C               	rlcf	i2___lldiv@quotient+3,f,c
 14435  0041EE  5005               	movf	i2___lldiv@divisor,w,c
 14436  0041F0  5C01               	subwf	i2___lldiv@dividend,w,c
 14437  0041F2  5006               	movf	i2___lldiv@divisor+1,w,c
 14438  0041F4  5802               	subwfb	i2___lldiv@dividend+1,w,c
 14439  0041F6  5007               	movf	i2___lldiv@divisor+2,w,c
 14440  0041F8  5803               	subwfb	i2___lldiv@dividend+2,w,c
 14441  0041FA  5008               	movf	i2___lldiv@divisor+3,w,c
 14442  0041FC  5804               	subwfb	i2___lldiv@dividend+3,w,c
 14443  0041FE  A0D8               	btfss	status,0,c
 14444  004200  D009               	goto	i2l1279
 14445  004202  5005               	movf	i2___lldiv@divisor,w,c
 14446  004204  5E01               	subwf	i2___lldiv@dividend,f,c
 14447  004206  5006               	movf	i2___lldiv@divisor+1,w,c
 14448  004208  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 14449  00420A  5007               	movf	i2___lldiv@divisor+2,w,c
 14450  00420C  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 14451  00420E  5008               	movf	i2___lldiv@divisor+3,w,c
 14452  004210  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 14453  004212  8009               	bsf	i2___lldiv@quotient,0,c
 14454  004214                     i2l1279:
 14455  004214  90D8               	bcf	status,0,c
 14456  004216  3208               	rrcf	i2___lldiv@divisor+3,f,c
 14457  004218  3207               	rrcf	i2___lldiv@divisor+2,f,c
 14458  00421A  3206               	rrcf	i2___lldiv@divisor+1,f,c
 14459  00421C  3205               	rrcf	i2___lldiv@divisor,f,c
 14460  00421E  2E0D               	decfsz	i2___lldiv@counter,f,c
 14461  004220  D7E1               	goto	i2u285_40
 14462  004222                     i2l1280:
 14463  004222  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 14464  004226  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 14465  00422A  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 14466  00422E  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 14467  004232  0012               	return		;funcret
 14468  004234                     __end_ofi2___lldiv:
 14469                           	opt stack 0
 14470                           pclatu	equ	0xFFB
 14471                           pclath	equ	0xFFA
 14472                           tblptru	equ	0xFF8
 14473                           tblptrh	equ	0xFF7
 14474                           tblptrl	equ	0xFF6
 14475                           tablat	equ	0xFF5
 14476                           prodh	equ	0xFF4
 14477                           prodl	equ	0xFF3
 14478                           intcon	equ	0xFF2
 14479                           intcon3	equ	0xFF0
 14480                           indf0	equ	0xFEF
 14481                           postinc0	equ	0xFEE
 14482                           fsr0h	equ	0xFEA
 14483                           fsr0l	equ	0xFE9
 14484                           wreg	equ	0xFE8
 14485                           postdec1	equ	0xFE5
 14486                           fsr1h	equ	0xFE2
 14487                           fsr1l	equ	0xFE1
 14488                           indf2	equ	0xFDF
 14489                           postinc2	equ	0xFDE
 14490                           postdec2	equ	0xFDD
 14491                           fsr2h	equ	0xFDA
 14492                           fsr2l	equ	0xFD9
 14493                           status	equ	0xFD8
 14494                           
 14495 ;; *************** function _strncmp *****************
 14496 ;; Defined at:
 14497 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 14498 ;; Parameters:    Size  Location     Type
 14499 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 14500 ;;		 -> current_set(5), 
 14501 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 14502 ;;		 -> strs(100), 
 14503 ;;  len             2   10[COMRAM] unsigned int 
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;		None
 14506 ;; Return value:  Size  Location     Type
 14507 ;;                  2    6[COMRAM] int 
 14508 ;; Registers used:
 14509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14510 ;; Tracked objects:
 14511 ;;		On entry : 0/0
 14512 ;;		On exit  : 0/0
 14513 ;;		Unchanged: 0/0
 14514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14515 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14517 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14518 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14519 ;;Total ram usage:        9 bytes
 14520 ;; Hardware stack levels used:    1
 14521 ;; This function calls:
 14522 ;;		Nothing
 14523 ;; This function is called by:
 14524 ;;		_interruptHandler
 14525 ;; This function uses a non-reentrant model
 14526 ;;
 14527                           
 14528                           	psect	text42
 14529  004024                     __ptext42:
 14530                           	opt stack 0
 14531  004024                     _strncmp:
 14532                           	opt stack 26
 14533                           
 14534                           ;incstack = 0
 14535  004024  D035               	goto	i2l1495
 14536  004026                     i2l4664:
 14537  004026  C007  FFD9         	movff	strncmp@s1,fsr2l
 14538  00402A  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14539  00402E  50DF               	movf	indf2,w,c
 14540  004030  B4D8               	btfsc	status,2,c
 14541  004032  D010               	goto	i2u336_40
 14542  004034  C007  FFD9         	movff	strncmp@s1,fsr2l
 14543  004038  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14544  00403C  50DF               	movf	indf2,w,c
 14545  00403E  6E0D               	movwf	??_strncmp& (0+255),c
 14546  004040  C009  FFF6         	movff	strncmp@s2,tblptrl
 14547  004044  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 14548  004048                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14549  004048  6AF8               	clrf	tblptru,c
 14550  00404A                     	endif
 14551  00404A                     	if	0	;tblptru may be non-zero
 14552  00404A                     	endif
 14553  00404A  0008               	tblrd		*
 14554  00404C  50F5               	movf	tablat,w,c
 14555  00404E  180D               	xorwf	??_strncmp,w,c
 14556  004050  B4D8               	btfsc	status,2,c
 14557  004052  D01A               	goto	i2l1497
 14558  004054                     i2u336_40:
 14559  004054  C009  FFF6         	movff	strncmp@s2,tblptrl
 14560  004058  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 14561  00405C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14562  00405C  6AF8               	clrf	tblptru,c
 14563  00405E                     	endif
 14564  00405E                     	if	0	;tblptru may be non-zero
 14565  00405E                     	endif
 14566  00405E  0008               	tblrd		*
 14567  004060  50F5               	movf	tablat,w,c
 14568  004062  6E0D               	movwf	??_strncmp& (0+255),c
 14569  004064  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 14570  004066  1E0D               	comf	??_strncmp,f,c
 14571  004068  1E0E               	comf	??_strncmp+1,f,c
 14572  00406A  4A0D               	infsnz	??_strncmp,f,c
 14573  00406C  2A0E               	incf	??_strncmp+1,f,c
 14574  00406E  C007  FFD9         	movff	strncmp@s1,fsr2l
 14575  004072  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 14576  004076  50DF               	movf	indf2,w,c
 14577  004078  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 14578  00407A  500F               	movf	??_strncmp+2,w,c
 14579  00407C  240D               	addwf	??_strncmp,w,c
 14580  00407E  6E07               	movwf	?_strncmp,c
 14581  004080  0E00               	movlw	0
 14582  004082  200E               	addwfc	??_strncmp+1,w,c
 14583  004084  6E08               	movwf	?_strncmp+1,c
 14584  004086  0012               	return	
 14585  004088                     i2l1497:
 14586  004088  4A07               	infsnz	strncmp@s1,f,c
 14587  00408A  2A08               	incf	strncmp@s1+1,f,c
 14588  00408C  4A09               	infsnz	strncmp@s2,f,c
 14589  00408E  2A0A               	incf	strncmp@s2+1,f,c
 14590  004090                     i2l1495:
 14591  004090  060B               	decf	strncmp@len,f,c
 14592  004092  A0D8               	btfss	status,0,c
 14593  004094  060C               	decf	strncmp@len+1,f,c
 14594  004096  280B               	incf	strncmp@len,w,c
 14595  004098  E1C6               	bnz	i2l4664
 14596  00409A  280C               	incf	strncmp@len+1,w,c
 14597  00409C  A4D8               	btfss	status,2,c
 14598  00409E  D7C3               	goto	i2l1496
 14599  0040A0  0E00               	movlw	0
 14600  0040A2  6E08               	movwf	?_strncmp+1,c
 14601  0040A4  0E00               	movlw	0
 14602  0040A6  6E07               	movwf	?_strncmp,c
 14603  0040A8  0012               	return	
 14604  0040AA                     __end_of_strncmp:
 14605                           	opt stack 0
 14606                           pclatu	equ	0xFFB
 14607                           pclath	equ	0xFFA
 14608                           tblptru	equ	0xFF8
 14609                           tblptrh	equ	0xFF7
 14610                           tblptrl	equ	0xFF6
 14611                           tablat	equ	0xFF5
 14612                           prodh	equ	0xFF4
 14613                           prodl	equ	0xFF3
 14614                           intcon	equ	0xFF2
 14615                           intcon3	equ	0xFF0
 14616                           indf0	equ	0xFEF
 14617                           postinc0	equ	0xFEE
 14618                           fsr0h	equ	0xFEA
 14619                           fsr0l	equ	0xFE9
 14620                           wreg	equ	0xFE8
 14621                           postdec1	equ	0xFE5
 14622                           fsr1h	equ	0xFE2
 14623                           fsr1l	equ	0xFE1
 14624                           indf2	equ	0xFDF
 14625                           postinc2	equ	0xFDE
 14626                           postdec2	equ	0xFDD
 14627                           fsr2h	equ	0xFDA
 14628                           fsr2l	equ	0xFD9
 14629                           status	equ	0xFD8
 14630                           
 14631 ;; *************** function _strcpy *****************
 14632 ;; Defined at:
 14633 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;  to              2    6[COMRAM] PTR unsigned char 
 14636 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 14637 ;;  from            2    8[COMRAM] PTR const unsigned char 
 14638 ;;		 -> STR_83(1), STR_81(1), STR_78(1), STR_75(2), 
 14639 ;;		 -> STR_74(2), STR_73(2), STR_72(2), current_set(5), 
 14640 ;; Auto vars:     Size  Location     Type
 14641 ;;  cp              2   10[COMRAM] PTR unsigned char 
 14642 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 14643 ;; Return value:  Size  Location     Type
 14644 ;;                  2    6[COMRAM] PTR unsigned char 
 14645 ;; Registers used:
 14646 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14647 ;; Tracked objects:
 14648 ;;		On entry : 0/0
 14649 ;;		On exit  : 0/0
 14650 ;;		Unchanged: 0/0
 14651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14652 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14655 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14656 ;;Total ram usage:        6 bytes
 14657 ;; Hardware stack levels used:    1
 14658 ;; This function calls:
 14659 ;;		Nothing
 14660 ;; This function is called by:
 14661 ;;		_interruptHandler
 14662 ;; This function uses a non-reentrant model
 14663 ;;
 14664                           
 14665                           	psect	text43
 14666  0045C6                     __ptext43:
 14667                           	opt stack 0
 14668  0045C6                     _strcpy:
 14669                           	opt stack 26
 14670                           
 14671                           ;incstack = 0
 14672  0045C6  C007  F00B         	movff	strcpy@to,strcpy@cp
 14673  0045CA  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 14674  0045CE  D004               	goto	i2l1489
 14675  0045D0  4A0B               	infsnz	strcpy@cp,f,c
 14676  0045D2  2A0C               	incf	strcpy@cp+1,f,c
 14677  0045D4  4A09               	infsnz	strcpy@from,f,c
 14678  0045D6  2A0A               	incf	strcpy@from+1,f,c
 14679  0045D8                     i2l1489:
 14680  0045D8  C009  FFF6         	movff	strcpy@from,tblptrl
 14681  0045DC  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 14682  0045E0  0E00               	movlw	low (__mediumconst shr (0+16))
 14683  0045E2  6EF8               	movwf	tblptru,c
 14684  0045E4  C00B  FFD9         	movff	strcpy@cp,fsr2l
 14685  0045E8  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 14686  0045EC  0E0F               	movlw	(high __ramtop+-1)
 14687  0045EE  64F7               	cpfsgt	tblptrh,c
 14688  0045F0  D003               	bra	i2u331_47
 14689  0045F2  0008               	tblrd		*
 14690  0045F4  50F5               	movf	tablat,w,c
 14691  0045F6  D005               	bra	i2u331_40
 14692  0045F8                     i2u331_47:
 14693  0045F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 14694  0045FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 14695  004600  50EF               	movf	indf0,w,c
 14696  004602                     i2u331_40:
 14697  004602  6EDF               	movwf	indf2,c
 14698  004604  50DF               	movf	indf2,w,c
 14699  004606  B4D8               	btfsc	status,2,c
 14700  004608  0012               	return	
 14701  00460A  D7E2               	goto	i2l1490
 14702  00460C                     __end_of_strcpy:
 14703                           	opt stack 0
 14704                           pclatu	equ	0xFFB
 14705                           pclath	equ	0xFFA
 14706                           tblptru	equ	0xFF8
 14707                           tblptrh	equ	0xFF7
 14708                           tblptrl	equ	0xFF6
 14709                           tablat	equ	0xFF5
 14710                           prodh	equ	0xFF4
 14711                           prodl	equ	0xFF3
 14712                           intcon	equ	0xFF2
 14713                           intcon3	equ	0xFF0
 14714                           indf0	equ	0xFEF
 14715                           postinc0	equ	0xFEE
 14716                           fsr0h	equ	0xFEA
 14717                           fsr0l	equ	0xFE9
 14718                           wreg	equ	0xFE8
 14719                           postdec1	equ	0xFE5
 14720                           fsr1h	equ	0xFE2
 14721                           fsr1l	equ	0xFE1
 14722                           indf2	equ	0xFDF
 14723                           postinc2	equ	0xFDE
 14724                           postdec2	equ	0xFDD
 14725                           fsr2h	equ	0xFDA
 14726                           fsr2l	equ	0xFD9
 14727                           status	equ	0xFD8
 14728                           
 14729 ;; *************** function _strcat *****************
 14730 ;; Defined at:
 14731 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 14732 ;; Parameters:    Size  Location     Type
 14733 ;;  to              2    0[COMRAM] PTR unsigned char 
 14734 ;;		 -> current_set(5), 
 14735 ;;  from            2    2[COMRAM] PTR const unsigned char 
 14736 ;;		 -> temp_set(5), 
 14737 ;; Auto vars:     Size  Location     Type
 14738 ;;  cp              2    4[COMRAM] PTR unsigned char 
 14739 ;;		 -> current_set(5), 
 14740 ;; Return value:  Size  Location     Type
 14741 ;;                  2    0[COMRAM] PTR unsigned char 
 14742 ;; Registers used:
 14743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14744 ;; Tracked objects:
 14745 ;;		On entry : 0/0
 14746 ;;		On exit  : 0/0
 14747 ;;		Unchanged: 0/0
 14748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14749 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14752 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14753 ;;Total ram usage:        6 bytes
 14754 ;; Hardware stack levels used:    1
 14755 ;; This function calls:
 14756 ;;		Nothing
 14757 ;; This function is called by:
 14758 ;;		_interruptHandler
 14759 ;; This function uses a non-reentrant model
 14760 ;;
 14761                           
 14762                           	psect	text44
 14763  004692                     __ptext44:
 14764                           	opt stack 0
 14765  004692                     _strcat:
 14766                           	opt stack 26
 14767                           
 14768                           ;incstack = 0
 14769  004692  C001  F005         	movff	strcat@to,strcat@cp
 14770  004696  C002  F006         	movff	strcat@to+1,strcat@cp+1
 14771  00469A  D002               	goto	i2l1472
 14772  00469C  4A05               	infsnz	strcat@cp,f,c
 14773  00469E  2A06               	incf	strcat@cp+1,f,c
 14774  0046A0                     i2l1472:
 14775  0046A0  C005  FFD9         	movff	strcat@cp,fsr2l
 14776  0046A4  C006  FFDA         	movff	strcat@cp+1,fsr2h
 14777  0046A8  50DF               	movf	indf2,w,c
 14778  0046AA  B4D8               	btfsc	status,2,c
 14779  0046AC  D005               	goto	i2l1475
 14780  0046AE  D7F6               	goto	i2l1473
 14781  0046B0  4A05               	infsnz	strcat@cp,f,c
 14782  0046B2  2A06               	incf	strcat@cp+1,f,c
 14783  0046B4  4A03               	infsnz	strcat@from,f,c
 14784  0046B6  2A04               	incf	strcat@from+1,f,c
 14785  0046B8                     i2l1475:
 14786  0046B8  C003  FFD9         	movff	strcat@from,fsr2l
 14787  0046BC  C004  FFDA         	movff	strcat@from+1,fsr2h
 14788  0046C0  C005  FFE1         	movff	strcat@cp,fsr1l
 14789  0046C4  C006  FFE2         	movff	strcat@cp+1,fsr1h
 14790  0046C8  CFDF FFE7          	movff	indf2,indf1
 14791  0046CC  50E7               	movf	indf1,w,c
 14792  0046CE  B4D8               	btfsc	status,2,c
 14793  0046D0  0012               	return	
 14794  0046D2  D7EE               	goto	i2l1476
 14795  0046D4                     __end_of_strcat:
 14796                           	opt stack 0
 14797                           pclatu	equ	0xFFB
 14798                           pclath	equ	0xFFA
 14799                           tblptru	equ	0xFF8
 14800                           tblptrh	equ	0xFF7
 14801                           tblptrl	equ	0xFF6
 14802                           tablat	equ	0xFF5
 14803                           prodh	equ	0xFF4
 14804                           prodl	equ	0xFF3
 14805                           intcon	equ	0xFF2
 14806                           intcon3	equ	0xFF0
 14807                           indf0	equ	0xFEF
 14808                           postinc0	equ	0xFEE
 14809                           fsr0h	equ	0xFEA
 14810                           fsr0l	equ	0xFE9
 14811                           wreg	equ	0xFE8
 14812                           indf1	equ	0xFE7
 14813                           postdec1	equ	0xFE5
 14814                           fsr1h	equ	0xFE2
 14815                           fsr1l	equ	0xFE1
 14816                           indf2	equ	0xFDF
 14817                           postinc2	equ	0xFDE
 14818                           postdec2	equ	0xFDD
 14819                           fsr2h	equ	0xFDA
 14820                           fsr2l	equ	0xFD9
 14821                           status	equ	0xFD8
 14822                           
 14823 ;; *************** function _is_valid *****************
 14824 ;; Defined at:
 14825 ;;		line 12 in file "keypad.c"
 14826 ;; Parameters:    Size  Location     Type
 14827 ;;		None
 14828 ;; Auto vars:     Size  Location     Type
 14829 ;;		None
 14830 ;; Return value:  Size  Location     Type
 14831 ;;                  2  127[None  ] int 
 14832 ;; Registers used:
 14833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14834 ;; Tracked objects:
 14835 ;;		On entry : 0/0
 14836 ;;		On exit  : 0/0
 14837 ;;		Unchanged: 0/0
 14838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14843 ;;Total ram usage:        2 bytes
 14844 ;; Hardware stack levels used:    1
 14845 ;; Hardware stack levels required when called:    1
 14846 ;; This function calls:
 14847 ;;		_strcmp
 14848 ;;		i2___wmul
 14849 ;; This function is called by:
 14850 ;;		_interruptHandler
 14851 ;; This function uses a non-reentrant model
 14852 ;;
 14853                           
 14854                           	psect	text45
 14855  001F30                     __ptext45:
 14856                           	opt stack 0
 14857  001F30                     _is_valid:
 14858                           	opt stack 25
 14859                           
 14860                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 14861                           
 14862                           ;incstack = 0
 14863  001F30  0E78               	movlw	low _current_set2
 14864  001F32  6E01               	movwf	strcmp@s1,c
 14865  001F34  0E00               	movlw	high _current_set2
 14866  001F36  6E02               	movwf	strcmp@s1+1,c
 14867  001F38  0EFD               	movlw	low STR_72
 14868  001F3A  6E03               	movwf	strcmp@s2,c
 14869  001F3C  0EFF               	movlw	high STR_72
 14870  001F3E  6E04               	movwf	strcmp@s2+1,c
 14871  001F40  ECBE  F022         	call	_strcmp	;wreg free
 14872  001F44  5001               	movf	?_strcmp,w,c
 14873  001F46  1002               	iorwf	?_strcmp+1,w,c
 14874  001F48  A4D8               	btfss	status,2,c
 14875  001F4A  D023               	goto	i2l736
 14876                           
 14877                           ;keypad.c: 17: B=1*number;
 14878  001F4C  C07D  F065         	movff	_number,_B
 14879  001F50  C07E  F066         	movff	_number+1,_B+1
 14880                           
 14881                           ;keypad.c: 18: total_number = 1*number;
 14882  001F54  C07D  F069         	movff	_number,_total_number
 14883  001F58  C07E  F06A         	movff	_number+1,_total_number+1
 14884                           
 14885                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 14886  001F5C  90D8               	bcf	status,0,c
 14887  001F5E  346D               	rlcf	_counter_step,w,c
 14888  001F60  6ED9               	movwf	fsr2l,c
 14889  001F62  346E               	rlcf	_counter_step+1,w,c
 14890  001F64  6EDA               	movwf	fsr2h,c
 14891  001F66  0E46               	movlw	low _compartment_number
 14892  001F68  26D9               	addwf	fsr2l,f,c
 14893  001F6A  0E00               	movlw	high _compartment_number
 14894  001F6C  22DA               	addwfc	fsr2h,f,c
 14895  001F6E  CFDE F007          	movff	postinc2,??_is_valid
 14896  001F72  CFDD F008          	movff	postdec2,??_is_valid+1
 14897  001F76  90D8               	bcf	status,0,c
 14898  001F78  3607               	rlcf	??_is_valid,f,c
 14899  001F7A  3608               	rlcf	??_is_valid+1,f,c
 14900  001F7C  0E30               	movlw	low _B_array
 14901  001F7E  2407               	addwf	??_is_valid,w,c
 14902  001F80  6ED9               	movwf	fsr2l,c
 14903  001F82  0E01               	movlw	high _B_array
 14904  001F84  2008               	addwfc	??_is_valid+1,w,c
 14905  001F86  6EDA               	movwf	fsr2h,c
 14906  001F88  C065  FFDE         	movff	_B,postinc2
 14907  001F8C  C066  FFDD         	movff	_B+1,postdec2
 14908                           
 14909                           ;keypad.c: 22: }
 14910  001F90  0012               	return	
 14911  001F92                     i2l736:
 14912                           
 14913                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 14914  001F92  0E78               	movlw	low _current_set2
 14915  001F94  6E01               	movwf	strcmp@s1,c
 14916  001F96  0E00               	movlw	high _current_set2
 14917  001F98  6E02               	movwf	strcmp@s1+1,c
 14918  001F9A  0EEA               	movlw	low (STR_94+2)
 14919  001F9C  6E03               	movwf	strcmp@s2,c
 14920  001F9E  0EFF               	movlw	high (STR_94+2)
 14921  001FA0  6E04               	movwf	strcmp@s2+1,c
 14922  001FA2  ECBE  F022         	call	_strcmp	;wreg free
 14923  001FA6  5001               	movf	?_strcmp,w,c
 14924  001FA8  1002               	iorwf	?_strcmp+1,w,c
 14925  001FAA  A4D8               	btfss	status,2,c
 14926  001FAC  D023               	goto	i2l738
 14927                           
 14928                           ;keypad.c: 25: N=1*number;
 14929  001FAE  C07D  F063         	movff	_number,_N
 14930  001FB2  C07E  F064         	movff	_number+1,_N+1
 14931                           
 14932                           ;keypad.c: 26: total_number = 1*number;
 14933  001FB6  C07D  F069         	movff	_number,_total_number
 14934  001FBA  C07E  F06A         	movff	_number+1,_total_number+1
 14935                           
 14936                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 14937  001FBE  90D8               	bcf	status,0,c
 14938  001FC0  346D               	rlcf	_counter_step,w,c
 14939  001FC2  6ED9               	movwf	fsr2l,c
 14940  001FC4  346E               	rlcf	_counter_step+1,w,c
 14941  001FC6  6EDA               	movwf	fsr2h,c
 14942  001FC8  0E46               	movlw	low _compartment_number
 14943  001FCA  26D9               	addwf	fsr2l,f,c
 14944  001FCC  0E00               	movlw	high _compartment_number
 14945  001FCE  22DA               	addwfc	fsr2h,f,c
 14946  001FD0  CFDE F007          	movff	postinc2,??_is_valid
 14947  001FD4  CFDD F008          	movff	postdec2,??_is_valid+1
 14948  001FD8  90D8               	bcf	status,0,c
 14949  001FDA  3607               	rlcf	??_is_valid,f,c
 14950  001FDC  3608               	rlcf	??_is_valid+1,f,c
 14951  001FDE  0E10               	movlw	low _N_array
 14952  001FE0  2407               	addwf	??_is_valid,w,c
 14953  001FE2  6ED9               	movwf	fsr2l,c
 14954  001FE4  0E01               	movlw	high _N_array
 14955  001FE6  2008               	addwfc	??_is_valid+1,w,c
 14956  001FE8  6EDA               	movwf	fsr2h,c
 14957  001FEA  C063  FFDE         	movff	_N,postinc2
 14958  001FEE  C064  FFDD         	movff	_N+1,postdec2
 14959                           
 14960                           ;keypad.c: 28: }
 14961  001FF2  0012               	return	
 14962  001FF4                     i2l738:
 14963                           
 14964                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 14965  001FF4  0E78               	movlw	low _current_set2
 14966  001FF6  6E01               	movwf	strcmp@s1,c
 14967  001FF8  0E00               	movlw	high _current_set2
 14968  001FFA  6E02               	movwf	strcmp@s1+1,c
 14969  001FFC  0EEE               	movlw	low (STR_95+2)
 14970  001FFE  6E03               	movwf	strcmp@s2,c
 14971  002000  0EFF               	movlw	high (STR_95+2)
 14972  002002  6E04               	movwf	strcmp@s2+1,c
 14973  002004  ECBE  F022         	call	_strcmp	;wreg free
 14974  002008  5001               	movf	?_strcmp,w,c
 14975  00200A  1002               	iorwf	?_strcmp+1,w,c
 14976  00200C  A4D8               	btfss	status,2,c
 14977  00200E  D023               	goto	i2l740
 14978                           
 14979                           ;keypad.c: 30: S=1*number;
 14980  002010  C07D  F061         	movff	_number,_S
 14981  002014  C07E  F062         	movff	_number+1,_S+1
 14982                           
 14983                           ;keypad.c: 31: total_number = 1*number;
 14984  002018  C07D  F069         	movff	_number,_total_number
 14985  00201C  C07E  F06A         	movff	_number+1,_total_number+1
 14986                           
 14987                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 14988  002020  90D8               	bcf	status,0,c
 14989  002022  346D               	rlcf	_counter_step,w,c
 14990  002024  6ED9               	movwf	fsr2l,c
 14991  002026  346E               	rlcf	_counter_step+1,w,c
 14992  002028  6EDA               	movwf	fsr2h,c
 14993  00202A  0E46               	movlw	low _compartment_number
 14994  00202C  26D9               	addwf	fsr2l,f,c
 14995  00202E  0E00               	movlw	high _compartment_number
 14996  002030  22DA               	addwfc	fsr2h,f,c
 14997  002032  CFDE F007          	movff	postinc2,??_is_valid
 14998  002036  CFDD F008          	movff	postdec2,??_is_valid+1
 14999  00203A  90D8               	bcf	status,0,c
 15000  00203C  3607               	rlcf	??_is_valid,f,c
 15001  00203E  3608               	rlcf	??_is_valid+1,f,c
 15002  002040  0E20               	movlw	low _S_array
 15003  002042  2407               	addwf	??_is_valid,w,c
 15004  002044  6ED9               	movwf	fsr2l,c
 15005  002046  0E01               	movlw	high _S_array
 15006  002048  2008               	addwfc	??_is_valid+1,w,c
 15007  00204A  6EDA               	movwf	fsr2h,c
 15008  00204C  C061  FFDE         	movff	_S,postinc2
 15009  002050  C062  FFDD         	movff	_S+1,postdec2
 15010                           
 15011                           ;keypad.c: 33: }
 15012  002054  0012               	return	
 15013  002056                     i2l740:
 15014                           
 15015                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 15016  002056  0E78               	movlw	low _current_set2
 15017  002058  6E01               	movwf	strcmp@s1,c
 15018  00205A  0E00               	movlw	high _current_set2
 15019  00205C  6E02               	movwf	strcmp@s1+1,c
 15020  00205E  0EF2               	movlw	low (STR_96+2)
 15021  002060  6E03               	movwf	strcmp@s2,c
 15022  002062  0EFF               	movlw	high (STR_96+2)
 15023  002064  6E04               	movwf	strcmp@s2+1,c
 15024  002066  ECBE  F022         	call	_strcmp	;wreg free
 15025  00206A  5001               	movf	?_strcmp,w,c
 15026  00206C  1002               	iorwf	?_strcmp+1,w,c
 15027  00206E  A4D8               	btfss	status,2,c
 15028  002070  D023               	goto	i2l742
 15029                           
 15030                           ;keypad.c: 35: W=1*number;
 15031  002072  C07D  F05F         	movff	_number,_W
 15032  002076  C07E  F060         	movff	_number+1,_W+1
 15033                           
 15034                           ;keypad.c: 36: total_number = 1*number;
 15035  00207A  C07D  F069         	movff	_number,_total_number
 15036  00207E  C07E  F06A         	movff	_number+1,_total_number+1
 15037                           
 15038                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 15039  002082  90D8               	bcf	status,0,c
 15040  002084  346D               	rlcf	_counter_step,w,c
 15041  002086  6ED9               	movwf	fsr2l,c
 15042  002088  346E               	rlcf	_counter_step+1,w,c
 15043  00208A  6EDA               	movwf	fsr2h,c
 15044  00208C  0E46               	movlw	low _compartment_number
 15045  00208E  26D9               	addwf	fsr2l,f,c
 15046  002090  0E00               	movlw	high _compartment_number
 15047  002092  22DA               	addwfc	fsr2h,f,c
 15048  002094  CFDE F007          	movff	postinc2,??_is_valid
 15049  002098  CFDD F008          	movff	postdec2,??_is_valid+1
 15050  00209C  90D8               	bcf	status,0,c
 15051  00209E  3607               	rlcf	??_is_valid,f,c
 15052  0020A0  3608               	rlcf	??_is_valid+1,f,c
 15053  0020A2  0E00               	movlw	low _W_array
 15054  0020A4  2407               	addwf	??_is_valid,w,c
 15055  0020A6  6ED9               	movwf	fsr2l,c
 15056  0020A8  0E01               	movlw	high _W_array
 15057  0020AA  2008               	addwfc	??_is_valid+1,w,c
 15058  0020AC  6EDA               	movwf	fsr2h,c
 15059  0020AE  C05F  FFDE         	movff	_W,postinc2
 15060  0020B2  C060  FFDD         	movff	_W+1,postdec2
 15061                           
 15062                           ;keypad.c: 38: }
 15063  0020B6  0012               	return	
 15064  0020B8                     i2l742:
 15065                           
 15066                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 15067  0020B8  0E78               	movlw	low _current_set2
 15068  0020BA  6E01               	movwf	strcmp@s1,c
 15069  0020BC  0E00               	movlw	high _current_set2
 15070  0020BE  6E02               	movwf	strcmp@s1+1,c
 15071  0020C0  0EE9               	movlw	low (STR_94+1)
 15072  0020C2  6E03               	movwf	strcmp@s2,c
 15073  0020C4  0EFF               	movlw	high (STR_94+1)
 15074  0020C6  6E04               	movwf	strcmp@s2+1,c
 15075  0020C8  ECBE  F022         	call	_strcmp	;wreg free
 15076  0020CC  5001               	movf	?_strcmp,w,c
 15077  0020CE  1002               	iorwf	?_strcmp+1,w,c
 15078  0020D0  A4D8               	btfss	status,2,c
 15079  0020D2  D042               	goto	i2l744
 15080                           
 15081                           ;keypad.c: 40: B = 1*number;
 15082  0020D4  C07D  F065         	movff	_number,_B
 15083  0020D8  C07E  F066         	movff	_number+1,_B+1
 15084                           
 15085                           ;keypad.c: 42: N = 1*number;
 15086  0020DC  C07D  F063         	movff	_number,_N
 15087  0020E0  C07E  F064         	movff	_number+1,_N+1
 15088                           
 15089                           ;keypad.c: 43: total_number = 2*number;
 15090  0020E4  90D8               	bcf	status,0,c
 15091  0020E6  347D               	rlcf	_number,w,c
 15092  0020E8  6E69               	movwf	_total_number,c
 15093  0020EA  347E               	rlcf	_number+1,w,c
 15094  0020EC  6E6A               	movwf	_total_number+1,c
 15095                           
 15096                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 15097  0020EE  90D8               	bcf	status,0,c
 15098  0020F0  346D               	rlcf	_counter_step,w,c
 15099  0020F2  6ED9               	movwf	fsr2l,c
 15100  0020F4  346E               	rlcf	_counter_step+1,w,c
 15101  0020F6  6EDA               	movwf	fsr2h,c
 15102  0020F8  0E46               	movlw	low _compartment_number
 15103  0020FA  26D9               	addwf	fsr2l,f,c
 15104  0020FC  0E00               	movlw	high _compartment_number
 15105  0020FE  22DA               	addwfc	fsr2h,f,c
 15106  002100  CFDE F007          	movff	postinc2,??_is_valid
 15107  002104  CFDD F008          	movff	postdec2,??_is_valid+1
 15108  002108  90D8               	bcf	status,0,c
 15109  00210A  3607               	rlcf	??_is_valid,f,c
 15110  00210C  3608               	rlcf	??_is_valid+1,f,c
 15111  00210E  0E30               	movlw	low _B_array
 15112  002110  2407               	addwf	??_is_valid,w,c
 15113  002112  6ED9               	movwf	fsr2l,c
 15114  002114  0E01               	movlw	high _B_array
 15115  002116  2008               	addwfc	??_is_valid+1,w,c
 15116  002118  6EDA               	movwf	fsr2h,c
 15117  00211A  C065  FFDE         	movff	_B,postinc2
 15118  00211E  C066  FFDD         	movff	_B+1,postdec2
 15119                           
 15120                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 15121  002122  90D8               	bcf	status,0,c
 15122  002124  346D               	rlcf	_counter_step,w,c
 15123  002126  6ED9               	movwf	fsr2l,c
 15124  002128  346E               	rlcf	_counter_step+1,w,c
 15125  00212A  6EDA               	movwf	fsr2h,c
 15126  00212C  0E46               	movlw	low _compartment_number
 15127  00212E  26D9               	addwf	fsr2l,f,c
 15128  002130  0E00               	movlw	high _compartment_number
 15129  002132  22DA               	addwfc	fsr2h,f,c
 15130  002134  CFDE F007          	movff	postinc2,??_is_valid
 15131  002138  CFDD F008          	movff	postdec2,??_is_valid+1
 15132  00213C  90D8               	bcf	status,0,c
 15133  00213E  3607               	rlcf	??_is_valid,f,c
 15134  002140  3608               	rlcf	??_is_valid+1,f,c
 15135  002142  0E10               	movlw	low _N_array
 15136  002144  2407               	addwf	??_is_valid,w,c
 15137  002146  6ED9               	movwf	fsr2l,c
 15138  002148  0E01               	movlw	high _N_array
 15139  00214A  2008               	addwfc	??_is_valid+1,w,c
 15140  00214C  6EDA               	movwf	fsr2h,c
 15141  00214E  C063  FFDE         	movff	_N,postinc2
 15142  002152  C064  FFDD         	movff	_N+1,postdec2
 15143                           
 15144                           ;keypad.c: 47: }
 15145  002156  0012               	return	
 15146  002158                     i2l744:
 15147                           
 15148                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 15149  002158  0E78               	movlw	low _current_set2
 15150  00215A  6E01               	movwf	strcmp@s1,c
 15151  00215C  0E00               	movlw	high _current_set2
 15152  00215E  6E02               	movwf	strcmp@s1+1,c
 15153  002160  0EED               	movlw	low (STR_95+1)
 15154  002162  6E03               	movwf	strcmp@s2,c
 15155  002164  0EFF               	movlw	high (STR_95+1)
 15156  002166  6E04               	movwf	strcmp@s2+1,c
 15157  002168  ECBE  F022         	call	_strcmp	;wreg free
 15158  00216C  5001               	movf	?_strcmp,w,c
 15159  00216E  1002               	iorwf	?_strcmp+1,w,c
 15160  002170  A4D8               	btfss	status,2,c
 15161  002172  D042               	goto	i2l746
 15162                           
 15163                           ;keypad.c: 49: B = 1*number;
 15164  002174  C07D  F065         	movff	_number,_B
 15165  002178  C07E  F066         	movff	_number+1,_B+1
 15166                           
 15167                           ;keypad.c: 51: S = 1*number;
 15168  00217C  C07D  F061         	movff	_number,_S
 15169  002180  C07E  F062         	movff	_number+1,_S+1
 15170                           
 15171                           ;keypad.c: 52: total_number = 2*number;
 15172  002184  90D8               	bcf	status,0,c
 15173  002186  347D               	rlcf	_number,w,c
 15174  002188  6E69               	movwf	_total_number,c
 15175  00218A  347E               	rlcf	_number+1,w,c
 15176  00218C  6E6A               	movwf	_total_number+1,c
 15177                           
 15178                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 15179  00218E  90D8               	bcf	status,0,c
 15180  002190  346D               	rlcf	_counter_step,w,c
 15181  002192  6ED9               	movwf	fsr2l,c
 15182  002194  346E               	rlcf	_counter_step+1,w,c
 15183  002196  6EDA               	movwf	fsr2h,c
 15184  002198  0E46               	movlw	low _compartment_number
 15185  00219A  26D9               	addwf	fsr2l,f,c
 15186  00219C  0E00               	movlw	high _compartment_number
 15187  00219E  22DA               	addwfc	fsr2h,f,c
 15188  0021A0  CFDE F007          	movff	postinc2,??_is_valid
 15189  0021A4  CFDD F008          	movff	postdec2,??_is_valid+1
 15190  0021A8  90D8               	bcf	status,0,c
 15191  0021AA  3607               	rlcf	??_is_valid,f,c
 15192  0021AC  3608               	rlcf	??_is_valid+1,f,c
 15193  0021AE  0E30               	movlw	low _B_array
 15194  0021B0  2407               	addwf	??_is_valid,w,c
 15195  0021B2  6ED9               	movwf	fsr2l,c
 15196  0021B4  0E01               	movlw	high _B_array
 15197  0021B6  2008               	addwfc	??_is_valid+1,w,c
 15198  0021B8  6EDA               	movwf	fsr2h,c
 15199  0021BA  C065  FFDE         	movff	_B,postinc2
 15200  0021BE  C066  FFDD         	movff	_B+1,postdec2
 15201                           
 15202                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 15203  0021C2  90D8               	bcf	status,0,c
 15204  0021C4  346D               	rlcf	_counter_step,w,c
 15205  0021C6  6ED9               	movwf	fsr2l,c
 15206  0021C8  346E               	rlcf	_counter_step+1,w,c
 15207  0021CA  6EDA               	movwf	fsr2h,c
 15208  0021CC  0E46               	movlw	low _compartment_number
 15209  0021CE  26D9               	addwf	fsr2l,f,c
 15210  0021D0  0E00               	movlw	high _compartment_number
 15211  0021D2  22DA               	addwfc	fsr2h,f,c
 15212  0021D4  CFDE F007          	movff	postinc2,??_is_valid
 15213  0021D8  CFDD F008          	movff	postdec2,??_is_valid+1
 15214  0021DC  90D8               	bcf	status,0,c
 15215  0021DE  3607               	rlcf	??_is_valid,f,c
 15216  0021E0  3608               	rlcf	??_is_valid+1,f,c
 15217  0021E2  0E20               	movlw	low _S_array
 15218  0021E4  2407               	addwf	??_is_valid,w,c
 15219  0021E6  6ED9               	movwf	fsr2l,c
 15220  0021E8  0E01               	movlw	high _S_array
 15221  0021EA  2008               	addwfc	??_is_valid+1,w,c
 15222  0021EC  6EDA               	movwf	fsr2h,c
 15223  0021EE  C061  FFDE         	movff	_S,postinc2
 15224  0021F2  C062  FFDD         	movff	_S+1,postdec2
 15225                           
 15226                           ;keypad.c: 57: }
 15227  0021F6  0012               	return	
 15228  0021F8                     i2l746:
 15229                           
 15230                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 15231  0021F8  0E78               	movlw	low _current_set2
 15232  0021FA  6E01               	movwf	strcmp@s1,c
 15233  0021FC  0E00               	movlw	high _current_set2
 15234  0021FE  6E02               	movwf	strcmp@s1+1,c
 15235  002200  0EF1               	movlw	low (STR_96+1)
 15236  002202  6E03               	movwf	strcmp@s2,c
 15237  002204  0EFF               	movlw	high (STR_96+1)
 15238  002206  6E04               	movwf	strcmp@s2+1,c
 15239  002208  ECBE  F022         	call	_strcmp	;wreg free
 15240  00220C  5001               	movf	?_strcmp,w,c
 15241  00220E  1002               	iorwf	?_strcmp+1,w,c
 15242  002210  A4D8               	btfss	status,2,c
 15243  002212  D042               	goto	i2l748
 15244                           
 15245                           ;keypad.c: 60: B = 1*number;
 15246  002214  C07D  F065         	movff	_number,_B
 15247  002218  C07E  F066         	movff	_number+1,_B+1
 15248                           
 15249                           ;keypad.c: 62: W = 1*number;
 15250  00221C  C07D  F05F         	movff	_number,_W
 15251  002220  C07E  F060         	movff	_number+1,_W+1
 15252                           
 15253                           ;keypad.c: 63: total_number = 2*number;
 15254  002224  90D8               	bcf	status,0,c
 15255  002226  347D               	rlcf	_number,w,c
 15256  002228  6E69               	movwf	_total_number,c
 15257  00222A  347E               	rlcf	_number+1,w,c
 15258  00222C  6E6A               	movwf	_total_number+1,c
 15259                           
 15260                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 15261  00222E  90D8               	bcf	status,0,c
 15262  002230  346D               	rlcf	_counter_step,w,c
 15263  002232  6ED9               	movwf	fsr2l,c
 15264  002234  346E               	rlcf	_counter_step+1,w,c
 15265  002236  6EDA               	movwf	fsr2h,c
 15266  002238  0E46               	movlw	low _compartment_number
 15267  00223A  26D9               	addwf	fsr2l,f,c
 15268  00223C  0E00               	movlw	high _compartment_number
 15269  00223E  22DA               	addwfc	fsr2h,f,c
 15270  002240  CFDE F007          	movff	postinc2,??_is_valid
 15271  002244  CFDD F008          	movff	postdec2,??_is_valid+1
 15272  002248  90D8               	bcf	status,0,c
 15273  00224A  3607               	rlcf	??_is_valid,f,c
 15274  00224C  3608               	rlcf	??_is_valid+1,f,c
 15275  00224E  0E30               	movlw	low _B_array
 15276  002250  2407               	addwf	??_is_valid,w,c
 15277  002252  6ED9               	movwf	fsr2l,c
 15278  002254  0E01               	movlw	high _B_array
 15279  002256  2008               	addwfc	??_is_valid+1,w,c
 15280  002258  6EDA               	movwf	fsr2h,c
 15281  00225A  C065  FFDE         	movff	_B,postinc2
 15282  00225E  C066  FFDD         	movff	_B+1,postdec2
 15283                           
 15284                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 15285  002262  90D8               	bcf	status,0,c
 15286  002264  346D               	rlcf	_counter_step,w,c
 15287  002266  6ED9               	movwf	fsr2l,c
 15288  002268  346E               	rlcf	_counter_step+1,w,c
 15289  00226A  6EDA               	movwf	fsr2h,c
 15290  00226C  0E46               	movlw	low _compartment_number
 15291  00226E  26D9               	addwf	fsr2l,f,c
 15292  002270  0E00               	movlw	high _compartment_number
 15293  002272  22DA               	addwfc	fsr2h,f,c
 15294  002274  CFDE F007          	movff	postinc2,??_is_valid
 15295  002278  CFDD F008          	movff	postdec2,??_is_valid+1
 15296  00227C  90D8               	bcf	status,0,c
 15297  00227E  3607               	rlcf	??_is_valid,f,c
 15298  002280  3608               	rlcf	??_is_valid+1,f,c
 15299  002282  0E00               	movlw	low _W_array
 15300  002284  2407               	addwf	??_is_valid,w,c
 15301  002286  6ED9               	movwf	fsr2l,c
 15302  002288  0E01               	movlw	high _W_array
 15303  00228A  2008               	addwfc	??_is_valid+1,w,c
 15304  00228C  6EDA               	movwf	fsr2h,c
 15305  00228E  C05F  FFDE         	movff	_W,postinc2
 15306  002292  C060  FFDD         	movff	_W+1,postdec2
 15307                           
 15308                           ;keypad.c: 67: }
 15309  002296  0012               	return	
 15310  002298                     i2l748:
 15311                           
 15312                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 15313  002298  0E78               	movlw	low _current_set2
 15314  00229A  6E01               	movwf	strcmp@s1,c
 15315  00229C  0E00               	movlw	high _current_set2
 15316  00229E  6E02               	movwf	strcmp@s1+1,c
 15317  0022A0  0EE8               	movlw	low STR_94
 15318  0022A2  6E03               	movwf	strcmp@s2,c
 15319  0022A4  0EFF               	movlw	high STR_94
 15320  0022A6  6E04               	movwf	strcmp@s2+1,c
 15321  0022A8  ECBE  F022         	call	_strcmp	;wreg free
 15322  0022AC  5001               	movf	?_strcmp,w,c
 15323  0022AE  1002               	iorwf	?_strcmp+1,w,c
 15324  0022B0  A4D8               	btfss	status,2,c
 15325  0022B2  D04C               	goto	i2l750
 15326                           
 15327                           ;keypad.c: 69: B = 2*number;
 15328  0022B4  90D8               	bcf	status,0,c
 15329  0022B6  347D               	rlcf	_number,w,c
 15330  0022B8  6E65               	movwf	_B,c
 15331  0022BA  347E               	rlcf	_number+1,w,c
 15332  0022BC  6E66               	movwf	_B+1,c
 15333                           
 15334                           ;keypad.c: 71: N = 1*number;
 15335  0022BE  C07D  F063         	movff	_number,_N
 15336  0022C2  C07E  F064         	movff	_number+1,_N+1
 15337                           
 15338                           ;keypad.c: 72: total_number = 3*number;
 15339  0022C6  C07D  F001         	movff	_number,i2___wmul@multiplier
 15340  0022CA  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15341  0022CE  0E00               	movlw	0
 15342  0022D0  6E04               	movwf	i2___wmul@multiplicand+1,c
 15343  0022D2  0E03               	movlw	3
 15344  0022D4  6E03               	movwf	i2___wmul@multiplicand,c
 15345  0022D6  ECC4  F023         	call	i2___wmul	;wreg free
 15346  0022DA  C001  F069         	movff	?i2___wmul,_total_number
 15347  0022DE  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15348                           
 15349                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 15350  0022E2  90D8               	bcf	status,0,c
 15351  0022E4  346D               	rlcf	_counter_step,w,c
 15352  0022E6  6ED9               	movwf	fsr2l,c
 15353  0022E8  346E               	rlcf	_counter_step+1,w,c
 15354  0022EA  6EDA               	movwf	fsr2h,c
 15355  0022EC  0E46               	movlw	low _compartment_number
 15356  0022EE  26D9               	addwf	fsr2l,f,c
 15357  0022F0  0E00               	movlw	high _compartment_number
 15358  0022F2  22DA               	addwfc	fsr2h,f,c
 15359  0022F4  CFDE F007          	movff	postinc2,??_is_valid
 15360  0022F8  CFDD F008          	movff	postdec2,??_is_valid+1
 15361  0022FC  90D8               	bcf	status,0,c
 15362  0022FE  3607               	rlcf	??_is_valid,f,c
 15363  002300  3608               	rlcf	??_is_valid+1,f,c
 15364  002302  0E30               	movlw	low _B_array
 15365  002304  2407               	addwf	??_is_valid,w,c
 15366  002306  6ED9               	movwf	fsr2l,c
 15367  002308  0E01               	movlw	high _B_array
 15368  00230A  2008               	addwfc	??_is_valid+1,w,c
 15369  00230C  6EDA               	movwf	fsr2h,c
 15370  00230E  C065  FFDE         	movff	_B,postinc2
 15371  002312  C066  FFDD         	movff	_B+1,postdec2
 15372                           
 15373                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 15374  002316  90D8               	bcf	status,0,c
 15375  002318  346D               	rlcf	_counter_step,w,c
 15376  00231A  6ED9               	movwf	fsr2l,c
 15377  00231C  346E               	rlcf	_counter_step+1,w,c
 15378  00231E  6EDA               	movwf	fsr2h,c
 15379  002320  0E46               	movlw	low _compartment_number
 15380  002322  26D9               	addwf	fsr2l,f,c
 15381  002324  0E00               	movlw	high _compartment_number
 15382  002326  22DA               	addwfc	fsr2h,f,c
 15383  002328  CFDE F007          	movff	postinc2,??_is_valid
 15384  00232C  CFDD F008          	movff	postdec2,??_is_valid+1
 15385  002330  90D8               	bcf	status,0,c
 15386  002332  3607               	rlcf	??_is_valid,f,c
 15387  002334  3608               	rlcf	??_is_valid+1,f,c
 15388  002336  0E10               	movlw	low _N_array
 15389  002338  2407               	addwf	??_is_valid,w,c
 15390  00233A  6ED9               	movwf	fsr2l,c
 15391  00233C  0E01               	movlw	high _N_array
 15392  00233E  2008               	addwfc	??_is_valid+1,w,c
 15393  002340  6EDA               	movwf	fsr2h,c
 15394  002342  C063  FFDE         	movff	_N,postinc2
 15395  002346  C064  FFDD         	movff	_N+1,postdec2
 15396                           
 15397                           ;keypad.c: 76: }
 15398  00234A  0012               	return	
 15399  00234C                     i2l750:
 15400                           
 15401                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 15402  00234C  0E78               	movlw	low _current_set2
 15403  00234E  6E01               	movwf	strcmp@s1,c
 15404  002350  0E00               	movlw	high _current_set2
 15405  002352  6E02               	movwf	strcmp@s1+1,c
 15406  002354  0EEC               	movlw	low STR_95
 15407  002356  6E03               	movwf	strcmp@s2,c
 15408  002358  0EFF               	movlw	high STR_95
 15409  00235A  6E04               	movwf	strcmp@s2+1,c
 15410  00235C  ECBE  F022         	call	_strcmp	;wreg free
 15411  002360  5001               	movf	?_strcmp,w,c
 15412  002362  1002               	iorwf	?_strcmp+1,w,c
 15413  002364  A4D8               	btfss	status,2,c
 15414  002366  D04C               	goto	i2l752
 15415                           
 15416                           ;keypad.c: 78: B = 2*number;
 15417  002368  90D8               	bcf	status,0,c
 15418  00236A  347D               	rlcf	_number,w,c
 15419  00236C  6E65               	movwf	_B,c
 15420  00236E  347E               	rlcf	_number+1,w,c
 15421  002370  6E66               	movwf	_B+1,c
 15422                           
 15423                           ;keypad.c: 80: S = 1*number;
 15424  002372  C07D  F061         	movff	_number,_S
 15425  002376  C07E  F062         	movff	_number+1,_S+1
 15426                           
 15427                           ;keypad.c: 81: total_number = 3*number;
 15428  00237A  C07D  F001         	movff	_number,i2___wmul@multiplier
 15429  00237E  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15430  002382  0E00               	movlw	0
 15431  002384  6E04               	movwf	i2___wmul@multiplicand+1,c
 15432  002386  0E03               	movlw	3
 15433  002388  6E03               	movwf	i2___wmul@multiplicand,c
 15434  00238A  ECC4  F023         	call	i2___wmul	;wreg free
 15435  00238E  C001  F069         	movff	?i2___wmul,_total_number
 15436  002392  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15437                           
 15438                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 15439  002396  90D8               	bcf	status,0,c
 15440  002398  346D               	rlcf	_counter_step,w,c
 15441  00239A  6ED9               	movwf	fsr2l,c
 15442  00239C  346E               	rlcf	_counter_step+1,w,c
 15443  00239E  6EDA               	movwf	fsr2h,c
 15444  0023A0  0E46               	movlw	low _compartment_number
 15445  0023A2  26D9               	addwf	fsr2l,f,c
 15446  0023A4  0E00               	movlw	high _compartment_number
 15447  0023A6  22DA               	addwfc	fsr2h,f,c
 15448  0023A8  CFDE F007          	movff	postinc2,??_is_valid
 15449  0023AC  CFDD F008          	movff	postdec2,??_is_valid+1
 15450  0023B0  90D8               	bcf	status,0,c
 15451  0023B2  3607               	rlcf	??_is_valid,f,c
 15452  0023B4  3608               	rlcf	??_is_valid+1,f,c
 15453  0023B6  0E30               	movlw	low _B_array
 15454  0023B8  2407               	addwf	??_is_valid,w,c
 15455  0023BA  6ED9               	movwf	fsr2l,c
 15456  0023BC  0E01               	movlw	high _B_array
 15457  0023BE  2008               	addwfc	??_is_valid+1,w,c
 15458  0023C0  6EDA               	movwf	fsr2h,c
 15459  0023C2  C065  FFDE         	movff	_B,postinc2
 15460  0023C6  C066  FFDD         	movff	_B+1,postdec2
 15461                           
 15462                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 15463  0023CA  90D8               	bcf	status,0,c
 15464  0023CC  346D               	rlcf	_counter_step,w,c
 15465  0023CE  6ED9               	movwf	fsr2l,c
 15466  0023D0  346E               	rlcf	_counter_step+1,w,c
 15467  0023D2  6EDA               	movwf	fsr2h,c
 15468  0023D4  0E46               	movlw	low _compartment_number
 15469  0023D6  26D9               	addwf	fsr2l,f,c
 15470  0023D8  0E00               	movlw	high _compartment_number
 15471  0023DA  22DA               	addwfc	fsr2h,f,c
 15472  0023DC  CFDE F007          	movff	postinc2,??_is_valid
 15473  0023E0  CFDD F008          	movff	postdec2,??_is_valid+1
 15474  0023E4  90D8               	bcf	status,0,c
 15475  0023E6  3607               	rlcf	??_is_valid,f,c
 15476  0023E8  3608               	rlcf	??_is_valid+1,f,c
 15477  0023EA  0E20               	movlw	low _S_array
 15478  0023EC  2407               	addwf	??_is_valid,w,c
 15479  0023EE  6ED9               	movwf	fsr2l,c
 15480  0023F0  0E01               	movlw	high _S_array
 15481  0023F2  2008               	addwfc	??_is_valid+1,w,c
 15482  0023F4  6EDA               	movwf	fsr2h,c
 15483  0023F6  C061  FFDE         	movff	_S,postinc2
 15484  0023FA  C062  FFDD         	movff	_S+1,postdec2
 15485                           
 15486                           ;keypad.c: 85: }
 15487  0023FE  0012               	return	
 15488  002400                     i2l752:
 15489                           
 15490                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 15491  002400  0E78               	movlw	low _current_set2
 15492  002402  6E01               	movwf	strcmp@s1,c
 15493  002404  0E00               	movlw	high _current_set2
 15494  002406  6E02               	movwf	strcmp@s1+1,c
 15495  002408  0EF0               	movlw	low STR_96
 15496  00240A  6E03               	movwf	strcmp@s2,c
 15497  00240C  0EFF               	movlw	high STR_96
 15498  00240E  6E04               	movwf	strcmp@s2+1,c
 15499  002410  ECBE  F022         	call	_strcmp	;wreg free
 15500  002414  5001               	movf	?_strcmp,w,c
 15501  002416  1002               	iorwf	?_strcmp+1,w,c
 15502  002418  A4D8               	btfss	status,2,c
 15503  00241A  D04C               	goto	i2l754
 15504                           
 15505                           ;keypad.c: 87: B = 2*number;
 15506  00241C  90D8               	bcf	status,0,c
 15507  00241E  347D               	rlcf	_number,w,c
 15508  002420  6E65               	movwf	_B,c
 15509  002422  347E               	rlcf	_number+1,w,c
 15510  002424  6E66               	movwf	_B+1,c
 15511                           
 15512                           ;keypad.c: 89: W = 1*number;
 15513  002426  C07D  F05F         	movff	_number,_W
 15514  00242A  C07E  F060         	movff	_number+1,_W+1
 15515                           
 15516                           ;keypad.c: 90: total_number = 3*number;
 15517  00242E  C07D  F001         	movff	_number,i2___wmul@multiplier
 15518  002432  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15519  002436  0E00               	movlw	0
 15520  002438  6E04               	movwf	i2___wmul@multiplicand+1,c
 15521  00243A  0E03               	movlw	3
 15522  00243C  6E03               	movwf	i2___wmul@multiplicand,c
 15523  00243E  ECC4  F023         	call	i2___wmul	;wreg free
 15524  002442  C001  F069         	movff	?i2___wmul,_total_number
 15525  002446  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15526                           
 15527                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 15528  00244A  90D8               	bcf	status,0,c
 15529  00244C  346D               	rlcf	_counter_step,w,c
 15530  00244E  6ED9               	movwf	fsr2l,c
 15531  002450  346E               	rlcf	_counter_step+1,w,c
 15532  002452  6EDA               	movwf	fsr2h,c
 15533  002454  0E46               	movlw	low _compartment_number
 15534  002456  26D9               	addwf	fsr2l,f,c
 15535  002458  0E00               	movlw	high _compartment_number
 15536  00245A  22DA               	addwfc	fsr2h,f,c
 15537  00245C  CFDE F007          	movff	postinc2,??_is_valid
 15538  002460  CFDD F008          	movff	postdec2,??_is_valid+1
 15539  002464  90D8               	bcf	status,0,c
 15540  002466  3607               	rlcf	??_is_valid,f,c
 15541  002468  3608               	rlcf	??_is_valid+1,f,c
 15542  00246A  0E30               	movlw	low _B_array
 15543  00246C  2407               	addwf	??_is_valid,w,c
 15544  00246E  6ED9               	movwf	fsr2l,c
 15545  002470  0E01               	movlw	high _B_array
 15546  002472  2008               	addwfc	??_is_valid+1,w,c
 15547  002474  6EDA               	movwf	fsr2h,c
 15548  002476  C065  FFDE         	movff	_B,postinc2
 15549  00247A  C066  FFDD         	movff	_B+1,postdec2
 15550                           
 15551                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 15552  00247E  90D8               	bcf	status,0,c
 15553  002480  346D               	rlcf	_counter_step,w,c
 15554  002482  6ED9               	movwf	fsr2l,c
 15555  002484  346E               	rlcf	_counter_step+1,w,c
 15556  002486  6EDA               	movwf	fsr2h,c
 15557  002488  0E46               	movlw	low _compartment_number
 15558  00248A  26D9               	addwf	fsr2l,f,c
 15559  00248C  0E00               	movlw	high _compartment_number
 15560  00248E  22DA               	addwfc	fsr2h,f,c
 15561  002490  CFDE F007          	movff	postinc2,??_is_valid
 15562  002494  CFDD F008          	movff	postdec2,??_is_valid+1
 15563  002498  90D8               	bcf	status,0,c
 15564  00249A  3607               	rlcf	??_is_valid,f,c
 15565  00249C  3608               	rlcf	??_is_valid+1,f,c
 15566  00249E  0E00               	movlw	low _W_array
 15567  0024A0  2407               	addwf	??_is_valid,w,c
 15568  0024A2  6ED9               	movwf	fsr2l,c
 15569  0024A4  0E01               	movlw	high _W_array
 15570  0024A6  2008               	addwfc	??_is_valid+1,w,c
 15571  0024A8  6EDA               	movwf	fsr2h,c
 15572  0024AA  C05F  FFDE         	movff	_W,postinc2
 15573  0024AE  C060  FFDD         	movff	_W+1,postdec2
 15574                           
 15575                           ;keypad.c: 94: }
 15576  0024B2  0012               	return	
 15577  0024B4                     i2l754:
 15578                           
 15579                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 15580  0024B4  0E78               	movlw	low _current_set2
 15581  0024B6  6E01               	movwf	strcmp@s1,c
 15582  0024B8  0E00               	movlw	high _current_set2
 15583  0024BA  6E02               	movwf	strcmp@s1+1,c
 15584  0024BC  0EC6               	movlw	low (STR_103+1)
 15585  0024BE  6E03               	movwf	strcmp@s2,c
 15586  0024C0  0EFF               	movlw	high (STR_103+1)
 15587  0024C2  6E04               	movwf	strcmp@s2+1,c
 15588  0024C4  ECBE  F022         	call	_strcmp	;wreg free
 15589  0024C8  5001               	movf	?_strcmp,w,c
 15590  0024CA  1002               	iorwf	?_strcmp+1,w,c
 15591  0024CC  A4D8               	btfss	status,2,c
 15592  0024CE  D069               	goto	i2l756
 15593                           
 15594                           ;keypad.c: 96: B = 1*number;
 15595  0024D0  C07D  F065         	movff	_number,_B
 15596  0024D4  C07E  F066         	movff	_number+1,_B+1
 15597                           
 15598                           ;keypad.c: 97: W = 1*number;
 15599  0024D8  C07D  F05F         	movff	_number,_W
 15600  0024DC  C07E  F060         	movff	_number+1,_W+1
 15601                           
 15602                           ;keypad.c: 98: N = 1*number;
 15603  0024E0  C07D  F063         	movff	_number,_N
 15604  0024E4  C07E  F064         	movff	_number+1,_N+1
 15605                           
 15606                           ;keypad.c: 99: total_number = 3*number;
 15607  0024E8  C07D  F001         	movff	_number,i2___wmul@multiplier
 15608  0024EC  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15609  0024F0  0E00               	movlw	0
 15610  0024F2  6E04               	movwf	i2___wmul@multiplicand+1,c
 15611  0024F4  0E03               	movlw	3
 15612  0024F6  6E03               	movwf	i2___wmul@multiplicand,c
 15613  0024F8  ECC4  F023         	call	i2___wmul	;wreg free
 15614  0024FC  C001  F069         	movff	?i2___wmul,_total_number
 15615  002500  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15616                           
 15617                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 15618  002504  90D8               	bcf	status,0,c
 15619  002506  346D               	rlcf	_counter_step,w,c
 15620  002508  6ED9               	movwf	fsr2l,c
 15621  00250A  346E               	rlcf	_counter_step+1,w,c
 15622  00250C  6EDA               	movwf	fsr2h,c
 15623  00250E  0E46               	movlw	low _compartment_number
 15624  002510  26D9               	addwf	fsr2l,f,c
 15625  002512  0E00               	movlw	high _compartment_number
 15626  002514  22DA               	addwfc	fsr2h,f,c
 15627  002516  CFDE F007          	movff	postinc2,??_is_valid
 15628  00251A  CFDD F008          	movff	postdec2,??_is_valid+1
 15629  00251E  90D8               	bcf	status,0,c
 15630  002520  3607               	rlcf	??_is_valid,f,c
 15631  002522  3608               	rlcf	??_is_valid+1,f,c
 15632  002524  0E30               	movlw	low _B_array
 15633  002526  2407               	addwf	??_is_valid,w,c
 15634  002528  6ED9               	movwf	fsr2l,c
 15635  00252A  0E01               	movlw	high _B_array
 15636  00252C  2008               	addwfc	??_is_valid+1,w,c
 15637  00252E  6EDA               	movwf	fsr2h,c
 15638  002530  C065  FFDE         	movff	_B,postinc2
 15639  002534  C066  FFDD         	movff	_B+1,postdec2
 15640                           
 15641                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 15642  002538  90D8               	bcf	status,0,c
 15643  00253A  346D               	rlcf	_counter_step,w,c
 15644  00253C  6ED9               	movwf	fsr2l,c
 15645  00253E  346E               	rlcf	_counter_step+1,w,c
 15646  002540  6EDA               	movwf	fsr2h,c
 15647  002542  0E46               	movlw	low _compartment_number
 15648  002544  26D9               	addwf	fsr2l,f,c
 15649  002546  0E00               	movlw	high _compartment_number
 15650  002548  22DA               	addwfc	fsr2h,f,c
 15651  00254A  CFDE F007          	movff	postinc2,??_is_valid
 15652  00254E  CFDD F008          	movff	postdec2,??_is_valid+1
 15653  002552  90D8               	bcf	status,0,c
 15654  002554  3607               	rlcf	??_is_valid,f,c
 15655  002556  3608               	rlcf	??_is_valid+1,f,c
 15656  002558  0E00               	movlw	low _W_array
 15657  00255A  2407               	addwf	??_is_valid,w,c
 15658  00255C  6ED9               	movwf	fsr2l,c
 15659  00255E  0E01               	movlw	high _W_array
 15660  002560  2008               	addwfc	??_is_valid+1,w,c
 15661  002562  6EDA               	movwf	fsr2h,c
 15662  002564  C05F  FFDE         	movff	_W,postinc2
 15663  002568  C060  FFDD         	movff	_W+1,postdec2
 15664                           
 15665                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 15666  00256C  90D8               	bcf	status,0,c
 15667  00256E  346D               	rlcf	_counter_step,w,c
 15668  002570  6ED9               	movwf	fsr2l,c
 15669  002572  346E               	rlcf	_counter_step+1,w,c
 15670  002574  6EDA               	movwf	fsr2h,c
 15671  002576  0E46               	movlw	low _compartment_number
 15672  002578  26D9               	addwf	fsr2l,f,c
 15673  00257A  0E00               	movlw	high _compartment_number
 15674  00257C  22DA               	addwfc	fsr2h,f,c
 15675  00257E  CFDE F007          	movff	postinc2,??_is_valid
 15676  002582  CFDD F008          	movff	postdec2,??_is_valid+1
 15677  002586  90D8               	bcf	status,0,c
 15678  002588  3607               	rlcf	??_is_valid,f,c
 15679  00258A  3608               	rlcf	??_is_valid+1,f,c
 15680  00258C  0E10               	movlw	low _N_array
 15681  00258E  2407               	addwf	??_is_valid,w,c
 15682  002590  6ED9               	movwf	fsr2l,c
 15683  002592  0E01               	movlw	high _N_array
 15684  002594  2008               	addwfc	??_is_valid+1,w,c
 15685  002596  6EDA               	movwf	fsr2h,c
 15686  002598  C063  FFDE         	movff	_N,postinc2
 15687  00259C  C064  FFDD         	movff	_N+1,postdec2
 15688                           
 15689                           ;keypad.c: 105: }
 15690  0025A0  0012               	return	
 15691  0025A2                     i2l756:
 15692                           
 15693                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 15694  0025A2  0E78               	movlw	low _current_set2
 15695  0025A4  6E01               	movwf	strcmp@s1,c
 15696  0025A6  0E00               	movlw	high _current_set2
 15697  0025A8  6E02               	movwf	strcmp@s1+1,c
 15698  0025AA  0ED0               	movlw	low (STR_102+1)
 15699  0025AC  6E03               	movwf	strcmp@s2,c
 15700  0025AE  0EFF               	movlw	high (STR_102+1)
 15701  0025B0  6E04               	movwf	strcmp@s2+1,c
 15702  0025B2  ECBE  F022         	call	_strcmp	;wreg free
 15703  0025B6  5001               	movf	?_strcmp,w,c
 15704  0025B8  1002               	iorwf	?_strcmp+1,w,c
 15705  0025BA  A4D8               	btfss	status,2,c
 15706  0025BC  D069               	goto	i2l758
 15707                           
 15708                           ;keypad.c: 107: B = 1*number;
 15709  0025BE  C07D  F065         	movff	_number,_B
 15710  0025C2  C07E  F066         	movff	_number+1,_B+1
 15711                           
 15712                           ;keypad.c: 108: S = 1*number;
 15713  0025C6  C07D  F061         	movff	_number,_S
 15714  0025CA  C07E  F062         	movff	_number+1,_S+1
 15715                           
 15716                           ;keypad.c: 109: N = 1*number;
 15717  0025CE  C07D  F063         	movff	_number,_N
 15718  0025D2  C07E  F064         	movff	_number+1,_N+1
 15719                           
 15720                           ;keypad.c: 110: total_number = 3*number;
 15721  0025D6  C07D  F001         	movff	_number,i2___wmul@multiplier
 15722  0025DA  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15723  0025DE  0E00               	movlw	0
 15724  0025E0  6E04               	movwf	i2___wmul@multiplicand+1,c
 15725  0025E2  0E03               	movlw	3
 15726  0025E4  6E03               	movwf	i2___wmul@multiplicand,c
 15727  0025E6  ECC4  F023         	call	i2___wmul	;wreg free
 15728  0025EA  C001  F069         	movff	?i2___wmul,_total_number
 15729  0025EE  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15730                           
 15731                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 15732  0025F2  90D8               	bcf	status,0,c
 15733  0025F4  346D               	rlcf	_counter_step,w,c
 15734  0025F6  6ED9               	movwf	fsr2l,c
 15735  0025F8  346E               	rlcf	_counter_step+1,w,c
 15736  0025FA  6EDA               	movwf	fsr2h,c
 15737  0025FC  0E46               	movlw	low _compartment_number
 15738  0025FE  26D9               	addwf	fsr2l,f,c
 15739  002600  0E00               	movlw	high _compartment_number
 15740  002602  22DA               	addwfc	fsr2h,f,c
 15741  002604  CFDE F007          	movff	postinc2,??_is_valid
 15742  002608  CFDD F008          	movff	postdec2,??_is_valid+1
 15743  00260C  90D8               	bcf	status,0,c
 15744  00260E  3607               	rlcf	??_is_valid,f,c
 15745  002610  3608               	rlcf	??_is_valid+1,f,c
 15746  002612  0E30               	movlw	low _B_array
 15747  002614  2407               	addwf	??_is_valid,w,c
 15748  002616  6ED9               	movwf	fsr2l,c
 15749  002618  0E01               	movlw	high _B_array
 15750  00261A  2008               	addwfc	??_is_valid+1,w,c
 15751  00261C  6EDA               	movwf	fsr2h,c
 15752  00261E  C065  FFDE         	movff	_B,postinc2
 15753  002622  C066  FFDD         	movff	_B+1,postdec2
 15754                           
 15755                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 15756  002626  90D8               	bcf	status,0,c
 15757  002628  346D               	rlcf	_counter_step,w,c
 15758  00262A  6ED9               	movwf	fsr2l,c
 15759  00262C  346E               	rlcf	_counter_step+1,w,c
 15760  00262E  6EDA               	movwf	fsr2h,c
 15761  002630  0E46               	movlw	low _compartment_number
 15762  002632  26D9               	addwf	fsr2l,f,c
 15763  002634  0E00               	movlw	high _compartment_number
 15764  002636  22DA               	addwfc	fsr2h,f,c
 15765  002638  CFDE F007          	movff	postinc2,??_is_valid
 15766  00263C  CFDD F008          	movff	postdec2,??_is_valid+1
 15767  002640  90D8               	bcf	status,0,c
 15768  002642  3607               	rlcf	??_is_valid,f,c
 15769  002644  3608               	rlcf	??_is_valid+1,f,c
 15770  002646  0E20               	movlw	low _S_array
 15771  002648  2407               	addwf	??_is_valid,w,c
 15772  00264A  6ED9               	movwf	fsr2l,c
 15773  00264C  0E01               	movlw	high _S_array
 15774  00264E  2008               	addwfc	??_is_valid+1,w,c
 15775  002650  6EDA               	movwf	fsr2h,c
 15776  002652  C061  FFDE         	movff	_S,postinc2
 15777  002656  C062  FFDD         	movff	_S+1,postdec2
 15778                           
 15779                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
 15780  00265A  90D8               	bcf	status,0,c
 15781  00265C  346D               	rlcf	_counter_step,w,c
 15782  00265E  6ED9               	movwf	fsr2l,c
 15783  002660  346E               	rlcf	_counter_step+1,w,c
 15784  002662  6EDA               	movwf	fsr2h,c
 15785  002664  0E46               	movlw	low _compartment_number
 15786  002666  26D9               	addwf	fsr2l,f,c
 15787  002668  0E00               	movlw	high _compartment_number
 15788  00266A  22DA               	addwfc	fsr2h,f,c
 15789  00266C  CFDE F007          	movff	postinc2,??_is_valid
 15790  002670  CFDD F008          	movff	postdec2,??_is_valid+1
 15791  002674  90D8               	bcf	status,0,c
 15792  002676  3607               	rlcf	??_is_valid,f,c
 15793  002678  3608               	rlcf	??_is_valid+1,f,c
 15794  00267A  0E10               	movlw	low _N_array
 15795  00267C  2407               	addwf	??_is_valid,w,c
 15796  00267E  6ED9               	movwf	fsr2l,c
 15797  002680  0E01               	movlw	high _N_array
 15798  002682  2008               	addwfc	??_is_valid+1,w,c
 15799  002684  6EDA               	movwf	fsr2h,c
 15800  002686  C063  FFDE         	movff	_N,postinc2
 15801  00268A  C064  FFDD         	movff	_N+1,postdec2
 15802                           
 15803                           ;keypad.c: 116: }
 15804  00268E  0012               	return	
 15805  002690                     i2l758:
 15806                           
 15807                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 15808  002690  0E78               	movlw	low _current_set2
 15809  002692  6E01               	movwf	strcmp@s1,c
 15810  002694  0E00               	movlw	high _current_set2
 15811  002696  6E02               	movwf	strcmp@s1+1,c
 15812  002698  0EF4               	movlw	low STR_99
 15813  00269A  6E03               	movwf	strcmp@s2,c
 15814  00269C  0EFF               	movlw	high STR_99
 15815  00269E  6E04               	movwf	strcmp@s2+1,c
 15816  0026A0  ECBE  F022         	call	_strcmp	;wreg free
 15817  0026A4  5001               	movf	?_strcmp,w,c
 15818  0026A6  1002               	iorwf	?_strcmp+1,w,c
 15819  0026A8  A4D8               	btfss	status,2,c
 15820  0026AA  D04C               	goto	i2l760
 15821                           
 15822                           ;keypad.c: 118: B = 1*number;
 15823  0026AC  C07D  F065         	movff	_number,_B
 15824  0026B0  C07E  F066         	movff	_number+1,_B+1
 15825                           
 15826                           ;keypad.c: 119: W = 2*number;
 15827  0026B4  90D8               	bcf	status,0,c
 15828  0026B6  347D               	rlcf	_number,w,c
 15829  0026B8  6E5F               	movwf	_W,c
 15830  0026BA  347E               	rlcf	_number+1,w,c
 15831  0026BC  6E60               	movwf	_W+1,c
 15832                           
 15833                           ;keypad.c: 120: total_number = 3*number;
 15834  0026BE  C07D  F001         	movff	_number,i2___wmul@multiplier
 15835  0026C2  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15836  0026C6  0E00               	movlw	0
 15837  0026C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 15838  0026CA  0E03               	movlw	3
 15839  0026CC  6E03               	movwf	i2___wmul@multiplicand,c
 15840  0026CE  ECC4  F023         	call	i2___wmul	;wreg free
 15841  0026D2  C001  F069         	movff	?i2___wmul,_total_number
 15842  0026D6  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 15843                           
 15844                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 15845  0026DA  90D8               	bcf	status,0,c
 15846  0026DC  346D               	rlcf	_counter_step,w,c
 15847  0026DE  6ED9               	movwf	fsr2l,c
 15848  0026E0  346E               	rlcf	_counter_step+1,w,c
 15849  0026E2  6EDA               	movwf	fsr2h,c
 15850  0026E4  0E46               	movlw	low _compartment_number
 15851  0026E6  26D9               	addwf	fsr2l,f,c
 15852  0026E8  0E00               	movlw	high _compartment_number
 15853  0026EA  22DA               	addwfc	fsr2h,f,c
 15854  0026EC  CFDE F007          	movff	postinc2,??_is_valid
 15855  0026F0  CFDD F008          	movff	postdec2,??_is_valid+1
 15856  0026F4  90D8               	bcf	status,0,c
 15857  0026F6  3607               	rlcf	??_is_valid,f,c
 15858  0026F8  3608               	rlcf	??_is_valid+1,f,c
 15859  0026FA  0E30               	movlw	low _B_array
 15860  0026FC  2407               	addwf	??_is_valid,w,c
 15861  0026FE  6ED9               	movwf	fsr2l,c
 15862  002700  0E01               	movlw	high _B_array
 15863  002702  2008               	addwfc	??_is_valid+1,w,c
 15864  002704  6EDA               	movwf	fsr2h,c
 15865  002706  C065  FFDE         	movff	_B,postinc2
 15866  00270A  C066  FFDD         	movff	_B+1,postdec2
 15867                           
 15868                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 15869  00270E  90D8               	bcf	status,0,c
 15870  002710  346D               	rlcf	_counter_step,w,c
 15871  002712  6ED9               	movwf	fsr2l,c
 15872  002714  346E               	rlcf	_counter_step+1,w,c
 15873  002716  6EDA               	movwf	fsr2h,c
 15874  002718  0E46               	movlw	low _compartment_number
 15875  00271A  26D9               	addwf	fsr2l,f,c
 15876  00271C  0E00               	movlw	high _compartment_number
 15877  00271E  22DA               	addwfc	fsr2h,f,c
 15878  002720  CFDE F007          	movff	postinc2,??_is_valid
 15879  002724  CFDD F008          	movff	postdec2,??_is_valid+1
 15880  002728  90D8               	bcf	status,0,c
 15881  00272A  3607               	rlcf	??_is_valid,f,c
 15882  00272C  3608               	rlcf	??_is_valid+1,f,c
 15883  00272E  0E00               	movlw	low _W_array
 15884  002730  2407               	addwf	??_is_valid,w,c
 15885  002732  6ED9               	movwf	fsr2l,c
 15886  002734  0E01               	movlw	high _W_array
 15887  002736  2008               	addwfc	??_is_valid+1,w,c
 15888  002738  6EDA               	movwf	fsr2h,c
 15889  00273A  C05F  FFDE         	movff	_W,postinc2
 15890  00273E  C060  FFDD         	movff	_W+1,postdec2
 15891                           
 15892                           ;keypad.c: 124: }
 15893  002742  0012               	return	
 15894  002744                     i2l760:
 15895                           
 15896                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 15897  002744  0E78               	movlw	low _current_set2
 15898  002746  6E01               	movwf	strcmp@s1,c
 15899  002748  0E00               	movlw	high _current_set2
 15900  00274A  6E02               	movwf	strcmp@s1+1,c
 15901  00274C  0ED4               	movlw	low STR_100
 15902  00274E  6E03               	movwf	strcmp@s2,c
 15903  002750  0EFF               	movlw	high STR_100
 15904  002752  6E04               	movwf	strcmp@s2+1,c
 15905  002754  ECBE  F022         	call	_strcmp	;wreg free
 15906  002758  5001               	movf	?_strcmp,w,c
 15907  00275A  1002               	iorwf	?_strcmp+1,w,c
 15908  00275C  A4D8               	btfss	status,2,c
 15909  00275E  D06A               	goto	i2l762
 15910                           
 15911                           ;keypad.c: 126: B = 1*number;
 15912  002760  C07D  F065         	movff	_number,_B
 15913  002764  C07E  F066         	movff	_number+1,_B+1
 15914                           
 15915                           ;keypad.c: 127: N = 1*number;
 15916  002768  C07D  F063         	movff	_number,_N
 15917  00276C  C07E  F064         	movff	_number+1,_N+1
 15918                           
 15919                           ;keypad.c: 128: W = 2*number;
 15920  002770  90D8               	bcf	status,0,c
 15921  002772  347D               	rlcf	_number,w,c
 15922  002774  6E5F               	movwf	_W,c
 15923  002776  347E               	rlcf	_number+1,w,c
 15924  002778  6E60               	movwf	_W+1,c
 15925                           
 15926                           ;keypad.c: 129: total_number = 4*number;
 15927  00277A  C07D  F007         	movff	_number,??_is_valid
 15928  00277E  C07E  F008         	movff	_number+1,??_is_valid+1
 15929  002782  90D8               	bcf	status,0,c
 15930  002784  3607               	rlcf	??_is_valid,f,c
 15931  002786  3608               	rlcf	??_is_valid+1,f,c
 15932  002788  90D8               	bcf	status,0,c
 15933  00278A  3607               	rlcf	??_is_valid,f,c
 15934  00278C  3608               	rlcf	??_is_valid+1,f,c
 15935  00278E  C007  F069         	movff	??_is_valid,_total_number
 15936  002792  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15937                           
 15938                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 15939  002796  90D8               	bcf	status,0,c
 15940  002798  346D               	rlcf	_counter_step,w,c
 15941  00279A  6ED9               	movwf	fsr2l,c
 15942  00279C  346E               	rlcf	_counter_step+1,w,c
 15943  00279E  6EDA               	movwf	fsr2h,c
 15944  0027A0  0E46               	movlw	low _compartment_number
 15945  0027A2  26D9               	addwf	fsr2l,f,c
 15946  0027A4  0E00               	movlw	high _compartment_number
 15947  0027A6  22DA               	addwfc	fsr2h,f,c
 15948  0027A8  CFDE F007          	movff	postinc2,??_is_valid
 15949  0027AC  CFDD F008          	movff	postdec2,??_is_valid+1
 15950  0027B0  90D8               	bcf	status,0,c
 15951  0027B2  3607               	rlcf	??_is_valid,f,c
 15952  0027B4  3608               	rlcf	??_is_valid+1,f,c
 15953  0027B6  0E30               	movlw	low _B_array
 15954  0027B8  2407               	addwf	??_is_valid,w,c
 15955  0027BA  6ED9               	movwf	fsr2l,c
 15956  0027BC  0E01               	movlw	high _B_array
 15957  0027BE  2008               	addwfc	??_is_valid+1,w,c
 15958  0027C0  6EDA               	movwf	fsr2h,c
 15959  0027C2  C065  FFDE         	movff	_B,postinc2
 15960  0027C6  C066  FFDD         	movff	_B+1,postdec2
 15961                           
 15962                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 15963  0027CA  90D8               	bcf	status,0,c
 15964  0027CC  346D               	rlcf	_counter_step,w,c
 15965  0027CE  6ED9               	movwf	fsr2l,c
 15966  0027D0  346E               	rlcf	_counter_step+1,w,c
 15967  0027D2  6EDA               	movwf	fsr2h,c
 15968  0027D4  0E46               	movlw	low _compartment_number
 15969  0027D6  26D9               	addwf	fsr2l,f,c
 15970  0027D8  0E00               	movlw	high _compartment_number
 15971  0027DA  22DA               	addwfc	fsr2h,f,c
 15972  0027DC  CFDE F007          	movff	postinc2,??_is_valid
 15973  0027E0  CFDD F008          	movff	postdec2,??_is_valid+1
 15974  0027E4  90D8               	bcf	status,0,c
 15975  0027E6  3607               	rlcf	??_is_valid,f,c
 15976  0027E8  3608               	rlcf	??_is_valid+1,f,c
 15977  0027EA  0E10               	movlw	low _N_array
 15978  0027EC  2407               	addwf	??_is_valid,w,c
 15979  0027EE  6ED9               	movwf	fsr2l,c
 15980  0027F0  0E01               	movlw	high _N_array
 15981  0027F2  2008               	addwfc	??_is_valid+1,w,c
 15982  0027F4  6EDA               	movwf	fsr2h,c
 15983  0027F6  C063  FFDE         	movff	_N,postinc2
 15984  0027FA  C064  FFDD         	movff	_N+1,postdec2
 15985                           
 15986                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 15987  0027FE  90D8               	bcf	status,0,c
 15988  002800  346D               	rlcf	_counter_step,w,c
 15989  002802  6ED9               	movwf	fsr2l,c
 15990  002804  346E               	rlcf	_counter_step+1,w,c
 15991  002806  6EDA               	movwf	fsr2h,c
 15992  002808  0E46               	movlw	low _compartment_number
 15993  00280A  26D9               	addwf	fsr2l,f,c
 15994  00280C  0E00               	movlw	high _compartment_number
 15995  00280E  22DA               	addwfc	fsr2h,f,c
 15996  002810  CFDE F007          	movff	postinc2,??_is_valid
 15997  002814  CFDD F008          	movff	postdec2,??_is_valid+1
 15998  002818  90D8               	bcf	status,0,c
 15999  00281A  3607               	rlcf	??_is_valid,f,c
 16000  00281C  3608               	rlcf	??_is_valid+1,f,c
 16001  00281E  0E00               	movlw	low _W_array
 16002  002820  2407               	addwf	??_is_valid,w,c
 16003  002822  6ED9               	movwf	fsr2l,c
 16004  002824  0E01               	movlw	high _W_array
 16005  002826  2008               	addwfc	??_is_valid+1,w,c
 16006  002828  6EDA               	movwf	fsr2h,c
 16007  00282A  C05F  FFDE         	movff	_W,postinc2
 16008  00282E  C060  FFDD         	movff	_W+1,postdec2
 16009                           
 16010                           ;keypad.c: 134: }
 16011  002832  0012               	return	
 16012  002834                     i2l762:
 16013                           
 16014                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 16015  002834  0E78               	movlw	low _current_set2
 16016  002836  6E01               	movwf	strcmp@s1,c
 16017  002838  0E00               	movlw	high _current_set2
 16018  00283A  6E02               	movwf	strcmp@s1+1,c
 16019  00283C  0ED9               	movlw	low STR_101
 16020  00283E  6E03               	movwf	strcmp@s2,c
 16021  002840  0EFF               	movlw	high STR_101
 16022  002842  6E04               	movwf	strcmp@s2+1,c
 16023  002844  ECBE  F022         	call	_strcmp	;wreg free
 16024  002848  5001               	movf	?_strcmp,w,c
 16025  00284A  1002               	iorwf	?_strcmp+1,w,c
 16026  00284C  A4D8               	btfss	status,2,c
 16027  00284E  D06A               	goto	i2l764
 16028                           
 16029                           ;keypad.c: 136: B = 1*number;
 16030  002850  C07D  F065         	movff	_number,_B
 16031  002854  C07E  F066         	movff	_number+1,_B+1
 16032                           
 16033                           ;keypad.c: 137: S = 1*number;
 16034  002858  C07D  F061         	movff	_number,_S
 16035  00285C  C07E  F062         	movff	_number+1,_S+1
 16036                           
 16037                           ;keypad.c: 138: W = 2*number;
 16038  002860  90D8               	bcf	status,0,c
 16039  002862  347D               	rlcf	_number,w,c
 16040  002864  6E5F               	movwf	_W,c
 16041  002866  347E               	rlcf	_number+1,w,c
 16042  002868  6E60               	movwf	_W+1,c
 16043                           
 16044                           ;keypad.c: 139: total_number = 4*number;
 16045  00286A  C07D  F007         	movff	_number,??_is_valid
 16046  00286E  C07E  F008         	movff	_number+1,??_is_valid+1
 16047  002872  90D8               	bcf	status,0,c
 16048  002874  3607               	rlcf	??_is_valid,f,c
 16049  002876  3608               	rlcf	??_is_valid+1,f,c
 16050  002878  90D8               	bcf	status,0,c
 16051  00287A  3607               	rlcf	??_is_valid,f,c
 16052  00287C  3608               	rlcf	??_is_valid+1,f,c
 16053  00287E  C007  F069         	movff	??_is_valid,_total_number
 16054  002882  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16055                           
 16056                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 16057  002886  90D8               	bcf	status,0,c
 16058  002888  346D               	rlcf	_counter_step,w,c
 16059  00288A  6ED9               	movwf	fsr2l,c
 16060  00288C  346E               	rlcf	_counter_step+1,w,c
 16061  00288E  6EDA               	movwf	fsr2h,c
 16062  002890  0E46               	movlw	low _compartment_number
 16063  002892  26D9               	addwf	fsr2l,f,c
 16064  002894  0E00               	movlw	high _compartment_number
 16065  002896  22DA               	addwfc	fsr2h,f,c
 16066  002898  CFDE F007          	movff	postinc2,??_is_valid
 16067  00289C  CFDD F008          	movff	postdec2,??_is_valid+1
 16068  0028A0  90D8               	bcf	status,0,c
 16069  0028A2  3607               	rlcf	??_is_valid,f,c
 16070  0028A4  3608               	rlcf	??_is_valid+1,f,c
 16071  0028A6  0E30               	movlw	low _B_array
 16072  0028A8  2407               	addwf	??_is_valid,w,c
 16073  0028AA  6ED9               	movwf	fsr2l,c
 16074  0028AC  0E01               	movlw	high _B_array
 16075  0028AE  2008               	addwfc	??_is_valid+1,w,c
 16076  0028B0  6EDA               	movwf	fsr2h,c
 16077  0028B2  C065  FFDE         	movff	_B,postinc2
 16078  0028B6  C066  FFDD         	movff	_B+1,postdec2
 16079                           
 16080                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 16081  0028BA  90D8               	bcf	status,0,c
 16082  0028BC  346D               	rlcf	_counter_step,w,c
 16083  0028BE  6ED9               	movwf	fsr2l,c
 16084  0028C0  346E               	rlcf	_counter_step+1,w,c
 16085  0028C2  6EDA               	movwf	fsr2h,c
 16086  0028C4  0E46               	movlw	low _compartment_number
 16087  0028C6  26D9               	addwf	fsr2l,f,c
 16088  0028C8  0E00               	movlw	high _compartment_number
 16089  0028CA  22DA               	addwfc	fsr2h,f,c
 16090  0028CC  CFDE F007          	movff	postinc2,??_is_valid
 16091  0028D0  CFDD F008          	movff	postdec2,??_is_valid+1
 16092  0028D4  90D8               	bcf	status,0,c
 16093  0028D6  3607               	rlcf	??_is_valid,f,c
 16094  0028D8  3608               	rlcf	??_is_valid+1,f,c
 16095  0028DA  0E20               	movlw	low _S_array
 16096  0028DC  2407               	addwf	??_is_valid,w,c
 16097  0028DE  6ED9               	movwf	fsr2l,c
 16098  0028E0  0E01               	movlw	high _S_array
 16099  0028E2  2008               	addwfc	??_is_valid+1,w,c
 16100  0028E4  6EDA               	movwf	fsr2h,c
 16101  0028E6  C061  FFDE         	movff	_S,postinc2
 16102  0028EA  C062  FFDD         	movff	_S+1,postdec2
 16103                           
 16104                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 16105  0028EE  90D8               	bcf	status,0,c
 16106  0028F0  346D               	rlcf	_counter_step,w,c
 16107  0028F2  6ED9               	movwf	fsr2l,c
 16108  0028F4  346E               	rlcf	_counter_step+1,w,c
 16109  0028F6  6EDA               	movwf	fsr2h,c
 16110  0028F8  0E46               	movlw	low _compartment_number
 16111  0028FA  26D9               	addwf	fsr2l,f,c
 16112  0028FC  0E00               	movlw	high _compartment_number
 16113  0028FE  22DA               	addwfc	fsr2h,f,c
 16114  002900  CFDE F007          	movff	postinc2,??_is_valid
 16115  002904  CFDD F008          	movff	postdec2,??_is_valid+1
 16116  002908  90D8               	bcf	status,0,c
 16117  00290A  3607               	rlcf	??_is_valid,f,c
 16118  00290C  3608               	rlcf	??_is_valid+1,f,c
 16119  00290E  0E00               	movlw	low _W_array
 16120  002910  2407               	addwf	??_is_valid,w,c
 16121  002912  6ED9               	movwf	fsr2l,c
 16122  002914  0E01               	movlw	high _W_array
 16123  002916  2008               	addwfc	??_is_valid+1,w,c
 16124  002918  6EDA               	movwf	fsr2h,c
 16125  00291A  C05F  FFDE         	movff	_W,postinc2
 16126  00291E  C060  FFDD         	movff	_W+1,postdec2
 16127                           
 16128                           ;keypad.c: 145: }
 16129  002922  0012               	return	
 16130  002924                     i2l764:
 16131                           
 16132                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 16133  002924  0E78               	movlw	low _current_set2
 16134  002926  6E01               	movwf	strcmp@s1,c
 16135  002928  0E00               	movlw	high _current_set2
 16136  00292A  6E02               	movwf	strcmp@s1+1,c
 16137  00292C  0ECF               	movlw	low STR_102
 16138  00292E  6E03               	movwf	strcmp@s2,c
 16139  002930  0EFF               	movlw	high STR_102
 16140  002932  6E04               	movwf	strcmp@s2+1,c
 16141  002934  ECBE  F022         	call	_strcmp	;wreg free
 16142  002938  5001               	movf	?_strcmp,w,c
 16143  00293A  1002               	iorwf	?_strcmp+1,w,c
 16144  00293C  A4D8               	btfss	status,2,c
 16145  00293E  D06A               	goto	i2l766
 16146                           
 16147                           ;keypad.c: 147: B = 2*number;
 16148  002940  90D8               	bcf	status,0,c
 16149  002942  347D               	rlcf	_number,w,c
 16150  002944  6E65               	movwf	_B,c
 16151  002946  347E               	rlcf	_number+1,w,c
 16152  002948  6E66               	movwf	_B+1,c
 16153                           
 16154                           ;keypad.c: 148: S = 1*number;
 16155  00294A  C07D  F061         	movff	_number,_S
 16156  00294E  C07E  F062         	movff	_number+1,_S+1
 16157                           
 16158                           ;keypad.c: 149: W = number;
 16159  002952  C07D  F05F         	movff	_number,_W
 16160  002956  C07E  F060         	movff	_number+1,_W+1
 16161                           
 16162                           ;keypad.c: 150: total_number = 4*number;
 16163  00295A  C07D  F007         	movff	_number,??_is_valid
 16164  00295E  C07E  F008         	movff	_number+1,??_is_valid+1
 16165  002962  90D8               	bcf	status,0,c
 16166  002964  3607               	rlcf	??_is_valid,f,c
 16167  002966  3608               	rlcf	??_is_valid+1,f,c
 16168  002968  90D8               	bcf	status,0,c
 16169  00296A  3607               	rlcf	??_is_valid,f,c
 16170  00296C  3608               	rlcf	??_is_valid+1,f,c
 16171  00296E  C007  F069         	movff	??_is_valid,_total_number
 16172  002972  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16173                           
 16174                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 16175  002976  90D8               	bcf	status,0,c
 16176  002978  346D               	rlcf	_counter_step,w,c
 16177  00297A  6ED9               	movwf	fsr2l,c
 16178  00297C  346E               	rlcf	_counter_step+1,w,c
 16179  00297E  6EDA               	movwf	fsr2h,c
 16180  002980  0E46               	movlw	low _compartment_number
 16181  002982  26D9               	addwf	fsr2l,f,c
 16182  002984  0E00               	movlw	high _compartment_number
 16183  002986  22DA               	addwfc	fsr2h,f,c
 16184  002988  CFDE F007          	movff	postinc2,??_is_valid
 16185  00298C  CFDD F008          	movff	postdec2,??_is_valid+1
 16186  002990  90D8               	bcf	status,0,c
 16187  002992  3607               	rlcf	??_is_valid,f,c
 16188  002994  3608               	rlcf	??_is_valid+1,f,c
 16189  002996  0E30               	movlw	low _B_array
 16190  002998  2407               	addwf	??_is_valid,w,c
 16191  00299A  6ED9               	movwf	fsr2l,c
 16192  00299C  0E01               	movlw	high _B_array
 16193  00299E  2008               	addwfc	??_is_valid+1,w,c
 16194  0029A0  6EDA               	movwf	fsr2h,c
 16195  0029A2  C065  FFDE         	movff	_B,postinc2
 16196  0029A6  C066  FFDD         	movff	_B+1,postdec2
 16197                           
 16198                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 16199  0029AA  90D8               	bcf	status,0,c
 16200  0029AC  346D               	rlcf	_counter_step,w,c
 16201  0029AE  6ED9               	movwf	fsr2l,c
 16202  0029B0  346E               	rlcf	_counter_step+1,w,c
 16203  0029B2  6EDA               	movwf	fsr2h,c
 16204  0029B4  0E46               	movlw	low _compartment_number
 16205  0029B6  26D9               	addwf	fsr2l,f,c
 16206  0029B8  0E00               	movlw	high _compartment_number
 16207  0029BA  22DA               	addwfc	fsr2h,f,c
 16208  0029BC  CFDE F007          	movff	postinc2,??_is_valid
 16209  0029C0  CFDD F008          	movff	postdec2,??_is_valid+1
 16210  0029C4  90D8               	bcf	status,0,c
 16211  0029C6  3607               	rlcf	??_is_valid,f,c
 16212  0029C8  3608               	rlcf	??_is_valid+1,f,c
 16213  0029CA  0E20               	movlw	low _S_array
 16214  0029CC  2407               	addwf	??_is_valid,w,c
 16215  0029CE  6ED9               	movwf	fsr2l,c
 16216  0029D0  0E01               	movlw	high _S_array
 16217  0029D2  2008               	addwfc	??_is_valid+1,w,c
 16218  0029D4  6EDA               	movwf	fsr2h,c
 16219  0029D6  C061  FFDE         	movff	_S,postinc2
 16220  0029DA  C062  FFDD         	movff	_S+1,postdec2
 16221                           
 16222                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 16223  0029DE  90D8               	bcf	status,0,c
 16224  0029E0  346D               	rlcf	_counter_step,w,c
 16225  0029E2  6ED9               	movwf	fsr2l,c
 16226  0029E4  346E               	rlcf	_counter_step+1,w,c
 16227  0029E6  6EDA               	movwf	fsr2h,c
 16228  0029E8  0E46               	movlw	low _compartment_number
 16229  0029EA  26D9               	addwf	fsr2l,f,c
 16230  0029EC  0E00               	movlw	high _compartment_number
 16231  0029EE  22DA               	addwfc	fsr2h,f,c
 16232  0029F0  CFDE F007          	movff	postinc2,??_is_valid
 16233  0029F4  CFDD F008          	movff	postdec2,??_is_valid+1
 16234  0029F8  90D8               	bcf	status,0,c
 16235  0029FA  3607               	rlcf	??_is_valid,f,c
 16236  0029FC  3608               	rlcf	??_is_valid+1,f,c
 16237  0029FE  0E00               	movlw	low _W_array
 16238  002A00  2407               	addwf	??_is_valid,w,c
 16239  002A02  6ED9               	movwf	fsr2l,c
 16240  002A04  0E01               	movlw	high _W_array
 16241  002A06  2008               	addwfc	??_is_valid+1,w,c
 16242  002A08  6EDA               	movwf	fsr2h,c
 16243  002A0A  C05F  FFDE         	movff	_W,postinc2
 16244  002A0E  C060  FFDD         	movff	_W+1,postdec2
 16245                           
 16246                           ;keypad.c: 155: }
 16247  002A12  0012               	return	
 16248  002A14                     i2l766:
 16249                           
 16250                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 16251  002A14  0E78               	movlw	low _current_set2
 16252  002A16  6E01               	movwf	strcmp@s1,c
 16253  002A18  0E00               	movlw	high _current_set2
 16254  002A1A  6E02               	movwf	strcmp@s1+1,c
 16255  002A1C  0EC5               	movlw	low STR_103
 16256  002A1E  6E03               	movwf	strcmp@s2,c
 16257  002A20  0EFF               	movlw	high STR_103
 16258  002A22  6E04               	movwf	strcmp@s2+1,c
 16259  002A24  ECBE  F022         	call	_strcmp	;wreg free
 16260  002A28  5001               	movf	?_strcmp,w,c
 16261  002A2A  1002               	iorwf	?_strcmp+1,w,c
 16262  002A2C  A4D8               	btfss	status,2,c
 16263  002A2E  D06A               	goto	i2l768
 16264                           
 16265                           ;keypad.c: 157: B = 2*number;
 16266  002A30  90D8               	bcf	status,0,c
 16267  002A32  347D               	rlcf	_number,w,c
 16268  002A34  6E65               	movwf	_B,c
 16269  002A36  347E               	rlcf	_number+1,w,c
 16270  002A38  6E66               	movwf	_B+1,c
 16271                           
 16272                           ;keypad.c: 158: N = 1*number;
 16273  002A3A  C07D  F063         	movff	_number,_N
 16274  002A3E  C07E  F064         	movff	_number+1,_N+1
 16275                           
 16276                           ;keypad.c: 159: W = 1*number;
 16277  002A42  C07D  F05F         	movff	_number,_W
 16278  002A46  C07E  F060         	movff	_number+1,_W+1
 16279                           
 16280                           ;keypad.c: 160: total_number = 4*number;
 16281  002A4A  C07D  F007         	movff	_number,??_is_valid
 16282  002A4E  C07E  F008         	movff	_number+1,??_is_valid+1
 16283  002A52  90D8               	bcf	status,0,c
 16284  002A54  3607               	rlcf	??_is_valid,f,c
 16285  002A56  3608               	rlcf	??_is_valid+1,f,c
 16286  002A58  90D8               	bcf	status,0,c
 16287  002A5A  3607               	rlcf	??_is_valid,f,c
 16288  002A5C  3608               	rlcf	??_is_valid+1,f,c
 16289  002A5E  C007  F069         	movff	??_is_valid,_total_number
 16290  002A62  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16291                           
 16292                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 16293  002A66  90D8               	bcf	status,0,c
 16294  002A68  346D               	rlcf	_counter_step,w,c
 16295  002A6A  6ED9               	movwf	fsr2l,c
 16296  002A6C  346E               	rlcf	_counter_step+1,w,c
 16297  002A6E  6EDA               	movwf	fsr2h,c
 16298  002A70  0E46               	movlw	low _compartment_number
 16299  002A72  26D9               	addwf	fsr2l,f,c
 16300  002A74  0E00               	movlw	high _compartment_number
 16301  002A76  22DA               	addwfc	fsr2h,f,c
 16302  002A78  CFDE F007          	movff	postinc2,??_is_valid
 16303  002A7C  CFDD F008          	movff	postdec2,??_is_valid+1
 16304  002A80  90D8               	bcf	status,0,c
 16305  002A82  3607               	rlcf	??_is_valid,f,c
 16306  002A84  3608               	rlcf	??_is_valid+1,f,c
 16307  002A86  0E30               	movlw	low _B_array
 16308  002A88  2407               	addwf	??_is_valid,w,c
 16309  002A8A  6ED9               	movwf	fsr2l,c
 16310  002A8C  0E01               	movlw	high _B_array
 16311  002A8E  2008               	addwfc	??_is_valid+1,w,c
 16312  002A90  6EDA               	movwf	fsr2h,c
 16313  002A92  C065  FFDE         	movff	_B,postinc2
 16314  002A96  C066  FFDD         	movff	_B+1,postdec2
 16315                           
 16316                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 16317  002A9A  90D8               	bcf	status,0,c
 16318  002A9C  346D               	rlcf	_counter_step,w,c
 16319  002A9E  6ED9               	movwf	fsr2l,c
 16320  002AA0  346E               	rlcf	_counter_step+1,w,c
 16321  002AA2  6EDA               	movwf	fsr2h,c
 16322  002AA4  0E46               	movlw	low _compartment_number
 16323  002AA6  26D9               	addwf	fsr2l,f,c
 16324  002AA8  0E00               	movlw	high _compartment_number
 16325  002AAA  22DA               	addwfc	fsr2h,f,c
 16326  002AAC  CFDE F007          	movff	postinc2,??_is_valid
 16327  002AB0  CFDD F008          	movff	postdec2,??_is_valid+1
 16328  002AB4  90D8               	bcf	status,0,c
 16329  002AB6  3607               	rlcf	??_is_valid,f,c
 16330  002AB8  3608               	rlcf	??_is_valid+1,f,c
 16331  002ABA  0E10               	movlw	low _N_array
 16332  002ABC  2407               	addwf	??_is_valid,w,c
 16333  002ABE  6ED9               	movwf	fsr2l,c
 16334  002AC0  0E01               	movlw	high _N_array
 16335  002AC2  2008               	addwfc	??_is_valid+1,w,c
 16336  002AC4  6EDA               	movwf	fsr2h,c
 16337  002AC6  C063  FFDE         	movff	_N,postinc2
 16338  002ACA  C064  FFDD         	movff	_N+1,postdec2
 16339                           
 16340                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 16341  002ACE  90D8               	bcf	status,0,c
 16342  002AD0  346D               	rlcf	_counter_step,w,c
 16343  002AD2  6ED9               	movwf	fsr2l,c
 16344  002AD4  346E               	rlcf	_counter_step+1,w,c
 16345  002AD6  6EDA               	movwf	fsr2h,c
 16346  002AD8  0E46               	movlw	low _compartment_number
 16347  002ADA  26D9               	addwf	fsr2l,f,c
 16348  002ADC  0E00               	movlw	high _compartment_number
 16349  002ADE  22DA               	addwfc	fsr2h,f,c
 16350  002AE0  CFDE F007          	movff	postinc2,??_is_valid
 16351  002AE4  CFDD F008          	movff	postdec2,??_is_valid+1
 16352  002AE8  90D8               	bcf	status,0,c
 16353  002AEA  3607               	rlcf	??_is_valid,f,c
 16354  002AEC  3608               	rlcf	??_is_valid+1,f,c
 16355  002AEE  0E00               	movlw	low _W_array
 16356  002AF0  2407               	addwf	??_is_valid,w,c
 16357  002AF2  6ED9               	movwf	fsr2l,c
 16358  002AF4  0E01               	movlw	high _W_array
 16359  002AF6  2008               	addwfc	??_is_valid+1,w,c
 16360  002AF8  6EDA               	movwf	fsr2h,c
 16361  002AFA  C05F  FFDE         	movff	_W,postinc2
 16362  002AFE  C060  FFDD         	movff	_W+1,postdec2
 16363                           
 16364                           ;keypad.c: 165: }
 16365  002B02  0012               	return	
 16366  002B04                     i2l768:
 16367                           
 16368                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 16369  002B04  0E78               	movlw	low _current_set2
 16370  002B06  6E01               	movwf	strcmp@s1,c
 16371  002B08  0E00               	movlw	high _current_set2
 16372  002B0A  6E02               	movwf	strcmp@s1+1,c
 16373  002B0C  0ECA               	movlw	low STR_104
 16374  002B0E  6E03               	movwf	strcmp@s2,c
 16375  002B10  0EFF               	movlw	high STR_104
 16376  002B12  6E04               	movwf	strcmp@s2+1,c
 16377  002B14  ECBE  F022         	call	_strcmp	;wreg free
 16378  002B18  5001               	movf	?_strcmp,w,c
 16379  002B1A  1002               	iorwf	?_strcmp+1,w,c
 16380  002B1C  A4D8               	btfss	status,2,c
 16381  002B1E  D06A               	goto	i2l770
 16382                           
 16383                           ;keypad.c: 167: B = 1*number;
 16384  002B20  C07D  F065         	movff	_number,_B
 16385  002B24  C07E  F066         	movff	_number+1,_B+1
 16386                           
 16387                           ;keypad.c: 168: N = 2*number;
 16388  002B28  90D8               	bcf	status,0,c
 16389  002B2A  347D               	rlcf	_number,w,c
 16390  002B2C  6E63               	movwf	_N,c
 16391  002B2E  347E               	rlcf	_number+1,w,c
 16392  002B30  6E64               	movwf	_N+1,c
 16393                           
 16394                           ;keypad.c: 169: W = 1*number;
 16395  002B32  C07D  F05F         	movff	_number,_W
 16396  002B36  C07E  F060         	movff	_number+1,_W+1
 16397                           
 16398                           ;keypad.c: 170: total_number = 4*number;
 16399  002B3A  C07D  F007         	movff	_number,??_is_valid
 16400  002B3E  C07E  F008         	movff	_number+1,??_is_valid+1
 16401  002B42  90D8               	bcf	status,0,c
 16402  002B44  3607               	rlcf	??_is_valid,f,c
 16403  002B46  3608               	rlcf	??_is_valid+1,f,c
 16404  002B48  90D8               	bcf	status,0,c
 16405  002B4A  3607               	rlcf	??_is_valid,f,c
 16406  002B4C  3608               	rlcf	??_is_valid+1,f,c
 16407  002B4E  C007  F069         	movff	??_is_valid,_total_number
 16408  002B52  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16409                           
 16410                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 16411  002B56  90D8               	bcf	status,0,c
 16412  002B58  346D               	rlcf	_counter_step,w,c
 16413  002B5A  6ED9               	movwf	fsr2l,c
 16414  002B5C  346E               	rlcf	_counter_step+1,w,c
 16415  002B5E  6EDA               	movwf	fsr2h,c
 16416  002B60  0E46               	movlw	low _compartment_number
 16417  002B62  26D9               	addwf	fsr2l,f,c
 16418  002B64  0E00               	movlw	high _compartment_number
 16419  002B66  22DA               	addwfc	fsr2h,f,c
 16420  002B68  CFDE F007          	movff	postinc2,??_is_valid
 16421  002B6C  CFDD F008          	movff	postdec2,??_is_valid+1
 16422  002B70  90D8               	bcf	status,0,c
 16423  002B72  3607               	rlcf	??_is_valid,f,c
 16424  002B74  3608               	rlcf	??_is_valid+1,f,c
 16425  002B76  0E30               	movlw	low _B_array
 16426  002B78  2407               	addwf	??_is_valid,w,c
 16427  002B7A  6ED9               	movwf	fsr2l,c
 16428  002B7C  0E01               	movlw	high _B_array
 16429  002B7E  2008               	addwfc	??_is_valid+1,w,c
 16430  002B80  6EDA               	movwf	fsr2h,c
 16431  002B82  C065  FFDE         	movff	_B,postinc2
 16432  002B86  C066  FFDD         	movff	_B+1,postdec2
 16433                           
 16434                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 16435  002B8A  90D8               	bcf	status,0,c
 16436  002B8C  346D               	rlcf	_counter_step,w,c
 16437  002B8E  6ED9               	movwf	fsr2l,c
 16438  002B90  346E               	rlcf	_counter_step+1,w,c
 16439  002B92  6EDA               	movwf	fsr2h,c
 16440  002B94  0E46               	movlw	low _compartment_number
 16441  002B96  26D9               	addwf	fsr2l,f,c
 16442  002B98  0E00               	movlw	high _compartment_number
 16443  002B9A  22DA               	addwfc	fsr2h,f,c
 16444  002B9C  CFDE F007          	movff	postinc2,??_is_valid
 16445  002BA0  CFDD F008          	movff	postdec2,??_is_valid+1
 16446  002BA4  90D8               	bcf	status,0,c
 16447  002BA6  3607               	rlcf	??_is_valid,f,c
 16448  002BA8  3608               	rlcf	??_is_valid+1,f,c
 16449  002BAA  0E10               	movlw	low _N_array
 16450  002BAC  2407               	addwf	??_is_valid,w,c
 16451  002BAE  6ED9               	movwf	fsr2l,c
 16452  002BB0  0E01               	movlw	high _N_array
 16453  002BB2  2008               	addwfc	??_is_valid+1,w,c
 16454  002BB4  6EDA               	movwf	fsr2h,c
 16455  002BB6  C063  FFDE         	movff	_N,postinc2
 16456  002BBA  C064  FFDD         	movff	_N+1,postdec2
 16457                           
 16458                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 16459  002BBE  90D8               	bcf	status,0,c
 16460  002BC0  346D               	rlcf	_counter_step,w,c
 16461  002BC2  6ED9               	movwf	fsr2l,c
 16462  002BC4  346E               	rlcf	_counter_step+1,w,c
 16463  002BC6  6EDA               	movwf	fsr2h,c
 16464  002BC8  0E46               	movlw	low _compartment_number
 16465  002BCA  26D9               	addwf	fsr2l,f,c
 16466  002BCC  0E00               	movlw	high _compartment_number
 16467  002BCE  22DA               	addwfc	fsr2h,f,c
 16468  002BD0  CFDE F007          	movff	postinc2,??_is_valid
 16469  002BD4  CFDD F008          	movff	postdec2,??_is_valid+1
 16470  002BD8  90D8               	bcf	status,0,c
 16471  002BDA  3607               	rlcf	??_is_valid,f,c
 16472  002BDC  3608               	rlcf	??_is_valid+1,f,c
 16473  002BDE  0E00               	movlw	low _W_array
 16474  002BE0  2407               	addwf	??_is_valid,w,c
 16475  002BE2  6ED9               	movwf	fsr2l,c
 16476  002BE4  0E01               	movlw	high _W_array
 16477  002BE6  2008               	addwfc	??_is_valid+1,w,c
 16478  002BE8  6EDA               	movwf	fsr2h,c
 16479  002BEA  C05F  FFDE         	movff	_W,postinc2
 16480  002BEE  C060  FFDD         	movff	_W+1,postdec2
 16481                           
 16482                           ;keypad.c: 175: }
 16483  002BF2  0012               	return	
 16484  002BF4                     i2l770:
 16485                           
 16486                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 16487  002BF4  0E78               	movlw	low _current_set2
 16488  002BF6  6E01               	movwf	strcmp@s1,c
 16489  002BF8  0E00               	movlw	high _current_set2
 16490  002BFA  6E02               	movwf	strcmp@s1+1,c
 16491  002BFC  0EC0               	movlw	low STR_105
 16492  002BFE  6E03               	movwf	strcmp@s2,c
 16493  002C00  0EFF               	movlw	high STR_105
 16494  002C02  6E04               	movwf	strcmp@s2+1,c
 16495  002C04  ECBE  F022         	call	_strcmp	;wreg free
 16496  002C08  5001               	movf	?_strcmp,w,c
 16497  002C0A  1002               	iorwf	?_strcmp+1,w,c
 16498  002C0C  A4D8               	btfss	status,2,c
 16499  002C0E  D055               	goto	i2l772
 16500                           
 16501                           ;keypad.c: 177: B = 1*number;
 16502  002C10  C07D  F065         	movff	_number,_B
 16503  002C14  C07E  F066         	movff	_number+1,_B+1
 16504                           
 16505                           ;keypad.c: 178: N = 3*number;
 16506  002C18  C07D  F001         	movff	_number,i2___wmul@multiplier
 16507  002C1C  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 16508  002C20  0E00               	movlw	0
 16509  002C22  6E04               	movwf	i2___wmul@multiplicand+1,c
 16510  002C24  0E03               	movlw	3
 16511  002C26  6E03               	movwf	i2___wmul@multiplicand,c
 16512  002C28  ECC4  F023         	call	i2___wmul	;wreg free
 16513  002C2C  C001  F063         	movff	?i2___wmul,_N
 16514  002C30  C002  F064         	movff	?i2___wmul+1,_N+1
 16515                           
 16516                           ;keypad.c: 179: total_number = 4*number;
 16517  002C34  C07D  F007         	movff	_number,??_is_valid
 16518  002C38  C07E  F008         	movff	_number+1,??_is_valid+1
 16519  002C3C  90D8               	bcf	status,0,c
 16520  002C3E  3607               	rlcf	??_is_valid,f,c
 16521  002C40  3608               	rlcf	??_is_valid+1,f,c
 16522  002C42  90D8               	bcf	status,0,c
 16523  002C44  3607               	rlcf	??_is_valid,f,c
 16524  002C46  3608               	rlcf	??_is_valid+1,f,c
 16525  002C48  C007  F069         	movff	??_is_valid,_total_number
 16526  002C4C  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16527                           
 16528                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 16529  002C50  90D8               	bcf	status,0,c
 16530  002C52  346D               	rlcf	_counter_step,w,c
 16531  002C54  6ED9               	movwf	fsr2l,c
 16532  002C56  346E               	rlcf	_counter_step+1,w,c
 16533  002C58  6EDA               	movwf	fsr2h,c
 16534  002C5A  0E46               	movlw	low _compartment_number
 16535  002C5C  26D9               	addwf	fsr2l,f,c
 16536  002C5E  0E00               	movlw	high _compartment_number
 16537  002C60  22DA               	addwfc	fsr2h,f,c
 16538  002C62  CFDE F007          	movff	postinc2,??_is_valid
 16539  002C66  CFDD F008          	movff	postdec2,??_is_valid+1
 16540  002C6A  90D8               	bcf	status,0,c
 16541  002C6C  3607               	rlcf	??_is_valid,f,c
 16542  002C6E  3608               	rlcf	??_is_valid+1,f,c
 16543  002C70  0E30               	movlw	low _B_array
 16544  002C72  2407               	addwf	??_is_valid,w,c
 16545  002C74  6ED9               	movwf	fsr2l,c
 16546  002C76  0E01               	movlw	high _B_array
 16547  002C78  2008               	addwfc	??_is_valid+1,w,c
 16548  002C7A  6EDA               	movwf	fsr2h,c
 16549  002C7C  C065  FFDE         	movff	_B,postinc2
 16550  002C80  C066  FFDD         	movff	_B+1,postdec2
 16551                           
 16552                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 16553  002C84  90D8               	bcf	status,0,c
 16554  002C86  346D               	rlcf	_counter_step,w,c
 16555  002C88  6ED9               	movwf	fsr2l,c
 16556  002C8A  346E               	rlcf	_counter_step+1,w,c
 16557  002C8C  6EDA               	movwf	fsr2h,c
 16558  002C8E  0E46               	movlw	low _compartment_number
 16559  002C90  26D9               	addwf	fsr2l,f,c
 16560  002C92  0E00               	movlw	high _compartment_number
 16561  002C94  22DA               	addwfc	fsr2h,f,c
 16562  002C96  CFDE F007          	movff	postinc2,??_is_valid
 16563  002C9A  CFDD F008          	movff	postdec2,??_is_valid+1
 16564  002C9E  90D8               	bcf	status,0,c
 16565  002CA0  3607               	rlcf	??_is_valid,f,c
 16566  002CA2  3608               	rlcf	??_is_valid+1,f,c
 16567  002CA4  0E10               	movlw	low _N_array
 16568  002CA6  2407               	addwf	??_is_valid,w,c
 16569  002CA8  6ED9               	movwf	fsr2l,c
 16570  002CAA  0E01               	movlw	high _N_array
 16571  002CAC  2008               	addwfc	??_is_valid+1,w,c
 16572  002CAE  6EDA               	movwf	fsr2h,c
 16573  002CB0  C063  FFDE         	movff	_N,postinc2
 16574  002CB4  C064  FFDD         	movff	_N+1,postdec2
 16575                           
 16576                           ;keypad.c: 184: }
 16577  002CB8  0012               	return	
 16578  002CBA                     i2l772:
 16579                           
 16580                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 16581  002CBA  0E78               	movlw	low _current_set2
 16582  002CBC  6E01               	movwf	strcmp@s1,c
 16583  002CBE  0E00               	movlw	high _current_set2
 16584  002CC0  6E02               	movwf	strcmp@s1+1,c
 16585  002CC2  0EDE               	movlw	low STR_106
 16586  002CC4  6E03               	movwf	strcmp@s2,c
 16587  002CC6  0EFF               	movlw	high STR_106
 16588  002CC8  6E04               	movwf	strcmp@s2+1,c
 16589  002CCA  ECBE  F022         	call	_strcmp	;wreg free
 16590  002CCE  5001               	movf	?_strcmp,w,c
 16591  002CD0  1002               	iorwf	?_strcmp+1,w,c
 16592  002CD2  A4D8               	btfss	status,2,c
 16593  002CD4  0012               	return	
 16594                           
 16595                           ;keypad.c: 186: B = 1*number;
 16596  002CD6  C07D  F065         	movff	_number,_B
 16597  002CDA  C07E  F066         	movff	_number+1,_B+1
 16598                           
 16599                           ;keypad.c: 187: W = 3*number;
 16600  002CDE  C07D  F001         	movff	_number,i2___wmul@multiplier
 16601  002CE2  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 16602  002CE6  0E00               	movlw	0
 16603  002CE8  6E04               	movwf	i2___wmul@multiplicand+1,c
 16604  002CEA  0E03               	movlw	3
 16605  002CEC  6E03               	movwf	i2___wmul@multiplicand,c
 16606  002CEE  ECC4  F023         	call	i2___wmul	;wreg free
 16607  002CF2  C001  F05F         	movff	?i2___wmul,_W
 16608  002CF6  C002  F060         	movff	?i2___wmul+1,_W+1
 16609                           
 16610                           ;keypad.c: 188: total_number = 4*number;
 16611  002CFA  C07D  F007         	movff	_number,??_is_valid
 16612  002CFE  C07E  F008         	movff	_number+1,??_is_valid+1
 16613  002D02  90D8               	bcf	status,0,c
 16614  002D04  3607               	rlcf	??_is_valid,f,c
 16615  002D06  3608               	rlcf	??_is_valid+1,f,c
 16616  002D08  90D8               	bcf	status,0,c
 16617  002D0A  3607               	rlcf	??_is_valid,f,c
 16618  002D0C  3608               	rlcf	??_is_valid+1,f,c
 16619  002D0E  C007  F069         	movff	??_is_valid,_total_number
 16620  002D12  C008  F06A         	movff	??_is_valid+1,_total_number+1
 16621                           
 16622                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 16623  002D16  90D8               	bcf	status,0,c
 16624  002D18  346D               	rlcf	_counter_step,w,c
 16625  002D1A  6ED9               	movwf	fsr2l,c
 16626  002D1C  346E               	rlcf	_counter_step+1,w,c
 16627  002D1E  6EDA               	movwf	fsr2h,c
 16628  002D20  0E46               	movlw	low _compartment_number
 16629  002D22  26D9               	addwf	fsr2l,f,c
 16630  002D24  0E00               	movlw	high _compartment_number
 16631  002D26  22DA               	addwfc	fsr2h,f,c
 16632  002D28  CFDE F007          	movff	postinc2,??_is_valid
 16633  002D2C  CFDD F008          	movff	postdec2,??_is_valid+1
 16634  002D30  90D8               	bcf	status,0,c
 16635  002D32  3607               	rlcf	??_is_valid,f,c
 16636  002D34  3608               	rlcf	??_is_valid+1,f,c
 16637  002D36  0E30               	movlw	low _B_array
 16638  002D38  2407               	addwf	??_is_valid,w,c
 16639  002D3A  6ED9               	movwf	fsr2l,c
 16640  002D3C  0E01               	movlw	high _B_array
 16641  002D3E  2008               	addwfc	??_is_valid+1,w,c
 16642  002D40  6EDA               	movwf	fsr2h,c
 16643  002D42  C065  FFDE         	movff	_B,postinc2
 16644  002D46  C066  FFDD         	movff	_B+1,postdec2
 16645                           
 16646                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 16647  002D4A  90D8               	bcf	status,0,c
 16648  002D4C  346D               	rlcf	_counter_step,w,c
 16649  002D4E  6ED9               	movwf	fsr2l,c
 16650  002D50  346E               	rlcf	_counter_step+1,w,c
 16651  002D52  6EDA               	movwf	fsr2h,c
 16652  002D54  0E46               	movlw	low _compartment_number
 16653  002D56  26D9               	addwf	fsr2l,f,c
 16654  002D58  0E00               	movlw	high _compartment_number
 16655  002D5A  22DA               	addwfc	fsr2h,f,c
 16656  002D5C  CFDE F007          	movff	postinc2,??_is_valid
 16657  002D60  CFDD F008          	movff	postdec2,??_is_valid+1
 16658  002D64  90D8               	bcf	status,0,c
 16659  002D66  3607               	rlcf	??_is_valid,f,c
 16660  002D68  3608               	rlcf	??_is_valid+1,f,c
 16661  002D6A  0E00               	movlw	low _W_array
 16662  002D6C  2407               	addwf	??_is_valid,w,c
 16663  002D6E  6ED9               	movwf	fsr2l,c
 16664  002D70  0E01               	movlw	high _W_array
 16665  002D72  2008               	addwfc	??_is_valid+1,w,c
 16666  002D74  6EDA               	movwf	fsr2h,c
 16667  002D76  C05F  FFDE         	movff	_W,postinc2
 16668  002D7A  C060  FFDD         	movff	_W+1,postdec2
 16669  002D7E  0012               	return	
 16670  002D80                     __end_of_is_valid:
 16671                           	opt stack 0
 16672                           pclatu	equ	0xFFB
 16673                           pclath	equ	0xFFA
 16674                           tblptru	equ	0xFF8
 16675                           tblptrh	equ	0xFF7
 16676                           tblptrl	equ	0xFF6
 16677                           tablat	equ	0xFF5
 16678                           prodh	equ	0xFF4
 16679                           prodl	equ	0xFF3
 16680                           intcon	equ	0xFF2
 16681                           intcon3	equ	0xFF0
 16682                           indf0	equ	0xFEF
 16683                           postinc0	equ	0xFEE
 16684                           fsr0h	equ	0xFEA
 16685                           fsr0l	equ	0xFE9
 16686                           wreg	equ	0xFE8
 16687                           indf1	equ	0xFE7
 16688                           postdec1	equ	0xFE5
 16689                           fsr1h	equ	0xFE2
 16690                           fsr1l	equ	0xFE1
 16691                           indf2	equ	0xFDF
 16692                           postinc2	equ	0xFDE
 16693                           postdec2	equ	0xFDD
 16694                           fsr2h	equ	0xFDA
 16695                           fsr2l	equ	0xFD9
 16696                           status	equ	0xFD8
 16697                           
 16698 ;; *************** function i2___wmul *****************
 16699 ;; Defined at:
 16700 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 16701 ;; Parameters:    Size  Location     Type
 16702 ;;  multiplier      2    0[COMRAM] unsigned int 
 16703 ;;  multiplicand    2    2[COMRAM] unsigned int 
 16704 ;; Auto vars:     Size  Location     Type
 16705 ;;  __wmul          2    4[COMRAM] unsigned int 
 16706 ;; Return value:  Size  Location     Type
 16707 ;;                  2    0[COMRAM] unsigned int 
 16708 ;; Registers used:
 16709 ;;		wreg, status,2, status,0, prodl, prodh
 16710 ;; Tracked objects:
 16711 ;;		On entry : 0/0
 16712 ;;		On exit  : 0/0
 16713 ;;		Unchanged: 0/0
 16714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16718 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16719 ;;Total ram usage:        6 bytes
 16720 ;; Hardware stack levels used:    1
 16721 ;; This function calls:
 16722 ;;		Nothing
 16723 ;; This function is called by:
 16724 ;;		_interruptHandler
 16725 ;;		_is_valid
 16726 ;;		i2_printf
 16727 ;; This function uses a non-reentrant model
 16728 ;;
 16729                           
 16730                           	psect	text46
 16731  004788                     __ptext46:
 16732                           	opt stack 0
 16733  004788                     i2___wmul:
 16734                           	opt stack 25
 16735                           
 16736                           ;incstack = 0
 16737  004788  5001               	movf	i2___wmul@multiplier,w,c
 16738  00478A  0203               	mulwf	i2___wmul@multiplicand,c
 16739  00478C  CFF3 F005          	movff	prodl,i2___wmul@product
 16740  004790  CFF4 F006          	movff	prodh,i2___wmul@product+1
 16741  004794  5001               	movf	i2___wmul@multiplier,w,c
 16742  004796  0204               	mulwf	i2___wmul@multiplicand+1,c
 16743  004798  50F3               	movf	prodl,w,c
 16744  00479A  2606               	addwf	i2___wmul@product+1,f,c
 16745  00479C  5002               	movf	i2___wmul@multiplier+1,w,c
 16746  00479E  0203               	mulwf	i2___wmul@multiplicand,c
 16747  0047A0  50F3               	movf	prodl,w,c
 16748  0047A2  2606               	addwf	i2___wmul@product+1,f,c
 16749  0047A4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 16750  0047A8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 16751  0047AC  0012               	return	
 16752  0047AE                     __end_ofi2___wmul:
 16753                           	opt stack 0
 16754                           pclatu	equ	0xFFB
 16755                           pclath	equ	0xFFA
 16756                           tblptru	equ	0xFF8
 16757                           tblptrh	equ	0xFF7
 16758                           tblptrl	equ	0xFF6
 16759                           tablat	equ	0xFF5
 16760                           prodh	equ	0xFF4
 16761                           prodl	equ	0xFF3
 16762                           intcon	equ	0xFF2
 16763                           intcon3	equ	0xFF0
 16764                           indf0	equ	0xFEF
 16765                           postinc0	equ	0xFEE
 16766                           fsr0h	equ	0xFEA
 16767                           fsr0l	equ	0xFE9
 16768                           wreg	equ	0xFE8
 16769                           indf1	equ	0xFE7
 16770                           postdec1	equ	0xFE5
 16771                           fsr1h	equ	0xFE2
 16772                           fsr1l	equ	0xFE1
 16773                           indf2	equ	0xFDF
 16774                           postinc2	equ	0xFDE
 16775                           postdec2	equ	0xFDD
 16776                           fsr2h	equ	0xFDA
 16777                           fsr2l	equ	0xFD9
 16778                           status	equ	0xFD8
 16779                           
 16780 ;; *************** function _strcmp *****************
 16781 ;; Defined at:
 16782 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 16783 ;; Parameters:    Size  Location     Type
 16784 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 16785 ;;		 -> current_set2(5), 
 16786 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 16787 ;;		 -> STR_106(5), STR_105(5), STR_104(5), STR_103(5), 
 16788 ;;		 -> STR_102(5), STR_101(5), STR_100(5), STR_99(4), 
 16789 ;;		 -> STR_98(4), STR_97(4), STR_96(4), STR_95(4), 
 16790 ;;		 -> STR_94(4), STR_93(3), STR_92(3), STR_91(3), 
 16791 ;;		 -> STR_90(2), STR_89(2), STR_88(2), STR_87(2), 
 16792 ;; Auto vars:     Size  Location     Type
 16793 ;;  r               1    5[COMRAM] char 
 16794 ;; Return value:  Size  Location     Type
 16795 ;;                  2    0[COMRAM] int 
 16796 ;; Registers used:
 16797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16798 ;; Tracked objects:
 16799 ;;		On entry : 0/0
 16800 ;;		On exit  : 0/0
 16801 ;;		Unchanged: 0/0
 16802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;Total ram usage:        6 bytes
 16808 ;; Hardware stack levels used:    1
 16809 ;; This function calls:
 16810 ;;		Nothing
 16811 ;; This function is called by:
 16812 ;;		_is_valid
 16813 ;; This function uses a non-reentrant model
 16814 ;;
 16815                           
 16816                           	psect	text47
 16817  00457C                     __ptext47:
 16818                           	opt stack 0
 16819  00457C                     _strcmp:
 16820                           	opt stack 25
 16821                           
 16822                           ;incstack = 0
 16823  00457C  D004               	goto	i2l1481
 16824  00457E  4A01               	infsnz	strcmp@s1,f,c
 16825  004580  2A02               	incf	strcmp@s1+1,f,c
 16826  004582  4A03               	infsnz	strcmp@s2,f,c
 16827  004584  2A04               	incf	strcmp@s2+1,f,c
 16828  004586                     i2l1481:
 16829  004586  C001  FFD9         	movff	strcmp@s1,fsr2l
 16830  00458A  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 16831  00458E  50DF               	movf	indf2,w,c
 16832  004590  6E05               	movwf	??_strcmp& (0+255),c
 16833  004592  C003  FFF6         	movff	strcmp@s2,tblptrl
 16834  004596  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 16835  00459A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16836  00459A  6AF8               	clrf	tblptru,c
 16837  00459C                     	endif
 16838  00459C                     	if	0	;tblptru may be non-zero
 16839  00459C                     	endif
 16840  00459C  0008               	tblrd		*
 16841  00459E  50F5               	movf	tablat,w,c
 16842  0045A0  0800               	sublw	0
 16843  0045A2  2405               	addwf	??_strcmp,w,c
 16844  0045A4  6E06               	movwf	strcmp@r,c
 16845  0045A6  5006               	movf	strcmp@r,w,c
 16846  0045A8  A4D8               	btfss	status,2,c
 16847  0045AA  D007               	goto	i2u262_40
 16848  0045AC  C001  FFD9         	movff	strcmp@s1,fsr2l
 16849  0045B0  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 16850  0045B4  50DF               	movf	indf2,w,c
 16851  0045B6  A4D8               	btfss	status,2,c
 16852  0045B8  D7E2               	goto	i2l1482
 16853  0045BA                     i2u262_40:
 16854  0045BA  5006               	movf	strcmp@r,w,c
 16855  0045BC  6E01               	movwf	?_strcmp,c
 16856  0045BE  6A02               	clrf	?_strcmp+1,c
 16857  0045C0  BE01               	btfsc	?_strcmp,7,c
 16858  0045C2  0602               	decf	?_strcmp+1,f,c
 16859  0045C4  0012               	return	
 16860  0045C6                     __end_of_strcmp:
 16861                           	opt stack 0
 16862                           pclatu	equ	0xFFB
 16863                           pclath	equ	0xFFA
 16864                           tblptru	equ	0xFF8
 16865                           tblptrh	equ	0xFF7
 16866                           tblptrl	equ	0xFF6
 16867                           tablat	equ	0xFF5
 16868                           prodh	equ	0xFF4
 16869                           prodl	equ	0xFF3
 16870                           intcon	equ	0xFF2
 16871                           intcon3	equ	0xFF0
 16872                           indf0	equ	0xFEF
 16873                           postinc0	equ	0xFEE
 16874                           fsr0h	equ	0xFEA
 16875                           fsr0l	equ	0xFE9
 16876                           wreg	equ	0xFE8
 16877                           indf1	equ	0xFE7
 16878                           postdec1	equ	0xFE5
 16879                           fsr1h	equ	0xFE2
 16880                           fsr1l	equ	0xFE1
 16881                           indf2	equ	0xFDF
 16882                           postinc2	equ	0xFDE
 16883                           postdec2	equ	0xFDD
 16884                           fsr2h	equ	0xFDA
 16885                           fsr2l	equ	0xFD9
 16886                           status	equ	0xFD8
 16887                           
 16888 ;; *************** function _check *****************
 16889 ;; Defined at:
 16890 ;;		line 208 in file "keypad.c"
 16891 ;; Parameters:    Size  Location     Type
 16892 ;;		None
 16893 ;; Auto vars:     Size  Location     Type
 16894 ;;		None
 16895 ;; Return value:  Size  Location     Type
 16896 ;;                  2    0[COMRAM] int 
 16897 ;; Registers used:
 16898 ;;		wreg, status,2, status,0
 16899 ;; Tracked objects:
 16900 ;;		On entry : 0/0
 16901 ;;		On exit  : 0/0
 16902 ;;		Unchanged: 0/0
 16903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16904 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16907 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16908 ;;Total ram usage:        2 bytes
 16909 ;; Hardware stack levels used:    1
 16910 ;; This function calls:
 16911 ;;		Nothing
 16912 ;; This function is called by:
 16913 ;;		_interruptHandler
 16914 ;; This function uses a non-reentrant model
 16915 ;;
 16916                           
 16917                           	psect	text48
 16918  00431E                     __ptext48:
 16919                           	opt stack 0
 16920  00431E                     _check:
 16921                           	opt stack 26
 16922                           
 16923                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 16924                           
 16925                           ;incstack = 0
 16926  00431E  BE66               	btfsc	_B+1,7,c
 16927  004320  D006               	goto	i2u358_40
 16928  004322  5066               	movf	_B+1,w,c
 16929  004324  E124               	bnz	i2l4918
 16930  004326  0E03               	movlw	3
 16931  004328  5C65               	subwf	_B,w,c
 16932  00432A  B0D8               	btfsc	status,0,c
 16933  00432C  D020               	goto	i2u362_40
 16934  00432E                     i2u358_40:
 16935  00432E  BE64               	btfsc	_N+1,7,c
 16936  004330  D006               	goto	i2u359_40
 16937  004332  5064               	movf	_N+1,w,c
 16938  004334  E11C               	bnz	i2l4918
 16939  004336  0E04               	movlw	4
 16940  004338  5C63               	subwf	_N,w,c
 16941  00433A  B0D8               	btfsc	status,0,c
 16942  00433C  D018               	goto	i2u362_40
 16943  00433E                     i2u359_40:
 16944  00433E  BE62               	btfsc	_S+1,7,c
 16945  004340  D006               	goto	i2u360_40
 16946  004342  5062               	movf	_S+1,w,c
 16947  004344  E114               	bnz	i2l4918
 16948  004346  0E03               	movlw	3
 16949  004348  5C61               	subwf	_S,w,c
 16950  00434A  B0D8               	btfsc	status,0,c
 16951  00434C  D010               	goto	i2u362_40
 16952  00434E                     i2u360_40:
 16953  00434E  BE60               	btfsc	_W+1,7,c
 16954  004350  D006               	goto	i2u361_40
 16955  004352  5060               	movf	_W+1,w,c
 16956  004354  E10C               	bnz	i2l4918
 16957  004356  0E05               	movlw	5
 16958  004358  5C5F               	subwf	_W,w,c
 16959  00435A  B0D8               	btfsc	status,0,c
 16960  00435C  D008               	goto	i2u362_40
 16961  00435E                     i2u361_40:
 16962  00435E  BE6A               	btfsc	_total_number+1,7,c
 16963  004360  D00B               	goto	i2l778
 16964  004362  506A               	movf	_total_number+1,w,c
 16965  004364  E104               	bnz	i2l4918
 16966  004366  0E05               	movlw	5
 16967  004368  5C69               	subwf	_total_number,w,c
 16968  00436A  A0D8               	btfss	status,0,c
 16969  00436C  D005               	goto	i2l778
 16970  00436E                     i2u362_40:
 16971  00436E                     i2l4918:
 16972                           
 16973                           ;keypad.c: 213: return 0;
 16974  00436E  0E00               	movlw	0
 16975  004370  6E02               	movwf	?_check+1,c
 16976  004372  0E00               	movlw	0
 16977  004374  6E01               	movwf	?_check,c
 16978  004376  0012               	return	
 16979  004378                     i2l778:
 16980                           
 16981                           ;keypad.c: 214: }
 16982                           ;keypad.c: 215: return 1;
 16983  004378  0E00               	movlw	0
 16984  00437A  6E02               	movwf	?_check+1,c
 16985  00437C  0E01               	movlw	1
 16986  00437E  6E01               	movwf	?_check,c
 16987  004380  0012               	return	
 16988  004382                     __end_of_check:
 16989                           	opt stack 0
 16990                           pclatu	equ	0xFFB
 16991                           pclath	equ	0xFFA
 16992                           tblptru	equ	0xFF8
 16993                           tblptrh	equ	0xFF7
 16994                           tblptrl	equ	0xFF6
 16995                           tablat	equ	0xFF5
 16996                           prodh	equ	0xFF4
 16997                           prodl	equ	0xFF3
 16998                           intcon	equ	0xFF2
 16999                           intcon3	equ	0xFF0
 17000                           indf0	equ	0xFEF
 17001                           postinc0	equ	0xFEE
 17002                           fsr0h	equ	0xFEA
 17003                           fsr0l	equ	0xFE9
 17004                           wreg	equ	0xFE8
 17005                           indf1	equ	0xFE7
 17006                           postdec1	equ	0xFE5
 17007                           fsr1h	equ	0xFE2
 17008                           fsr1l	equ	0xFE1
 17009                           indf2	equ	0xFDF
 17010                           postinc2	equ	0xFDE
 17011                           postdec2	equ	0xFDD
 17012                           fsr2h	equ	0xFDA
 17013                           fsr2l	equ	0xFD9
 17014                           status	equ	0xFD8
 17015                           
 17016 ;; *************** function ___awmod *****************
 17017 ;; Defined at:
 17018 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 17019 ;; Parameters:    Size  Location     Type
 17020 ;;  dividend        2    0[COMRAM] int 
 17021 ;;  divisor         2    2[COMRAM] int 
 17022 ;; Auto vars:     Size  Location     Type
 17023 ;;  sign            1    5[COMRAM] unsigned char 
 17024 ;;  counter         1    4[COMRAM] unsigned char 
 17025 ;; Return value:  Size  Location     Type
 17026 ;;                  2    0[COMRAM] int 
 17027 ;; Registers used:
 17028 ;;		wreg, status,2, status,0
 17029 ;; Tracked objects:
 17030 ;;		On entry : 0/0
 17031 ;;		On exit  : 0/0
 17032 ;;		Unchanged: 0/0
 17033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17034 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17035 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17037 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17038 ;;Total ram usage:        6 bytes
 17039 ;; Hardware stack levels used:    1
 17040 ;; This function calls:
 17041 ;;		Nothing
 17042 ;; This function is called by:
 17043 ;;		_interruptHandler
 17044 ;; This function uses a non-reentrant model
 17045 ;;
 17046                           
 17047                           	psect	text49
 17048  0042AE                     __ptext49:
 17049                           	opt stack 0
 17050  0042AE                     ___awmod:
 17051                           	opt stack 26
 17052                           
 17053                           ;incstack = 0
 17054  0042AE  0E00               	movlw	0
 17055  0042B0  6E06               	movwf	___awmod@sign,c
 17056  0042B2  AE02               	btfss	___awmod@dividend+1,7,c
 17057  0042B4  D006               	goto	i2l1100
 17058  0042B6  6C01               	negf	___awmod@dividend,c
 17059  0042B8  1E02               	comf	___awmod@dividend+1,f,c
 17060  0042BA  B0D8               	btfsc	status,0,c
 17061  0042BC  2A02               	incf	___awmod@dividend+1,f,c
 17062  0042BE  0E01               	movlw	1
 17063  0042C0  6E06               	movwf	___awmod@sign,c
 17064  0042C2                     i2l1100:
 17065  0042C2  AE04               	btfss	___awmod@divisor+1,7,c
 17066  0042C4  D004               	goto	i2l1101
 17067  0042C6  6C03               	negf	___awmod@divisor,c
 17068  0042C8  1E04               	comf	___awmod@divisor+1,f,c
 17069  0042CA  B0D8               	btfsc	status,0,c
 17070  0042CC  2A04               	incf	___awmod@divisor+1,f,c
 17071  0042CE                     i2l1101:
 17072  0042CE  5003               	movf	___awmod@divisor,w,c
 17073  0042D0  1004               	iorwf	___awmod@divisor+1,w,c
 17074  0042D2  B4D8               	btfsc	status,2,c
 17075  0042D4  D018               	goto	i2l1108
 17076  0042D6  0E01               	movlw	1
 17077  0042D8  6E05               	movwf	___awmod@counter,c
 17078  0042DA  D004               	goto	i2l1103
 17079  0042DC  90D8               	bcf	status,0,c
 17080  0042DE  3603               	rlcf	___awmod@divisor,f,c
 17081  0042E0  3604               	rlcf	___awmod@divisor+1,f,c
 17082  0042E2  2A05               	incf	___awmod@counter,f,c
 17083  0042E4                     i2l1103:
 17084  0042E4  AE04               	btfss	___awmod@divisor+1,7,c
 17085  0042E6  D7FA               	goto	i2l1104
 17086  0042E8                     i2u366_40:
 17087  0042E8  5003               	movf	___awmod@divisor,w,c
 17088  0042EA  5C01               	subwf	___awmod@dividend,w,c
 17089  0042EC  5004               	movf	___awmod@divisor+1,w,c
 17090  0042EE  5802               	subwfb	___awmod@dividend+1,w,c
 17091  0042F0  A0D8               	btfss	status,0,c
 17092  0042F2  D004               	goto	i2l1107
 17093  0042F4  5003               	movf	___awmod@divisor,w,c
 17094  0042F6  5E01               	subwf	___awmod@dividend,f,c
 17095  0042F8  5004               	movf	___awmod@divisor+1,w,c
 17096  0042FA  5A02               	subwfb	___awmod@dividend+1,f,c
 17097  0042FC                     i2l1107:
 17098  0042FC  90D8               	bcf	status,0,c
 17099  0042FE  3204               	rrcf	___awmod@divisor+1,f,c
 17100  004300  3203               	rrcf	___awmod@divisor,f,c
 17101  004302  2E05               	decfsz	___awmod@counter,f,c
 17102  004304  D7F1               	goto	i2u366_40
 17103  004306                     i2l1108:
 17104  004306  5006               	movf	___awmod@sign,w,c
 17105  004308  B4D8               	btfsc	status,2,c
 17106  00430A  D004               	goto	i2l1109
 17107  00430C  6C01               	negf	___awmod@dividend,c
 17108  00430E  1E02               	comf	___awmod@dividend+1,f,c
 17109  004310  B0D8               	btfsc	status,0,c
 17110  004312  2A02               	incf	___awmod@dividend+1,f,c
 17111  004314                     i2l1109:
 17112  004314  C001  F001         	movff	___awmod@dividend,?___awmod
 17113  004318  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 17114  00431C  0012               	return	
 17115  00431E                     __end_of___awmod:
 17116                           	opt stack 0
 17117                           pclatu	equ	0xFFB
 17118                           pclath	equ	0xFFA
 17119                           tblptru	equ	0xFF8
 17120                           tblptrh	equ	0xFF7
 17121                           tblptrl	equ	0xFF6
 17122                           tablat	equ	0xFF5
 17123                           prodh	equ	0xFF4
 17124                           prodl	equ	0xFF3
 17125                           intcon	equ	0xFF2
 17126                           intcon3	equ	0xFF0
 17127                           indf0	equ	0xFEF
 17128                           postinc0	equ	0xFEE
 17129                           fsr0h	equ	0xFEA
 17130                           fsr0l	equ	0xFE9
 17131                           wreg	equ	0xFE8
 17132                           indf1	equ	0xFE7
 17133                           postdec1	equ	0xFE5
 17134                           fsr1h	equ	0xFE2
 17135                           fsr1l	equ	0xFE1
 17136                           indf2	equ	0xFDF
 17137                           postinc2	equ	0xFDE
 17138                           postdec2	equ	0xFDD
 17139                           fsr2h	equ	0xFDA
 17140                           fsr2l	equ	0xFD9
 17141                           status	equ	0xFD8
 17142                           pclatu	equ	0xFFB
 17143                           pclath	equ	0xFFA
 17144                           tblptru	equ	0xFF8
 17145                           tblptrh	equ	0xFF7
 17146                           tblptrl	equ	0xFF6
 17147                           tablat	equ	0xFF5
 17148                           prodh	equ	0xFF4
 17149                           prodl	equ	0xFF3
 17150                           intcon	equ	0xFF2
 17151                           intcon3	equ	0xFF0
 17152                           indf0	equ	0xFEF
 17153                           postinc0	equ	0xFEE
 17154                           fsr0h	equ	0xFEA
 17155                           fsr0l	equ	0xFE9
 17156                           wreg	equ	0xFE8
 17157                           indf1	equ	0xFE7
 17158                           postdec1	equ	0xFE5
 17159                           fsr1h	equ	0xFE2
 17160                           fsr1l	equ	0xFE1
 17161                           indf2	equ	0xFDF
 17162                           postinc2	equ	0xFDE
 17163                           postdec2	equ	0xFDD
 17164                           fsr2h	equ	0xFDA
 17165                           fsr2l	equ	0xFD9
 17166                           status	equ	0xFD8
 17167                           
 17168                           	psect	rparam
 17169  0000                     pclatu	equ	0xFFB
 17170                           pclath	equ	0xFFA
 17171                           tblptru	equ	0xFF8
 17172                           tblptrh	equ	0xFF7
 17173                           tblptrl	equ	0xFF6
 17174                           tablat	equ	0xFF5
 17175                           prodh	equ	0xFF4
 17176                           prodl	equ	0xFF3
 17177                           intcon	equ	0xFF2
 17178                           intcon3	equ	0xFF0
 17179                           indf0	equ	0xFEF
 17180                           postinc0	equ	0xFEE
 17181                           fsr0h	equ	0xFEA
 17182                           fsr0l	equ	0xFE9
 17183                           wreg	equ	0xFE8
 17184                           indf1	equ	0xFE7
 17185                           postdec1	equ	0xFE5
 17186                           fsr1h	equ	0xFE2
 17187                           fsr1l	equ	0xFE1
 17188                           indf2	equ	0xFDF
 17189                           postinc2	equ	0xFDE
 17190                           postdec2	equ	0xFDD
 17191                           fsr2h	equ	0xFDA
 17192                           fsr2l	equ	0xFD9
 17193                           status	equ	0xFD8
 17194                           
 17195                           	psect	temp
 17196  00007F                     btemp:
 17197                           	opt stack 0
 17198  00007F                     	ds	1
 17199  0000                     int$flags	set	btemp
 17200  0000                     wtemp6	set	btemp+1
 17201                           pclatu	equ	0xFFB
 17202                           pclath	equ	0xFFA
 17203                           tblptru	equ	0xFF8
 17204                           tblptrh	equ	0xFF7
 17205                           tblptrl	equ	0xFF6
 17206                           tablat	equ	0xFF5
 17207                           prodh	equ	0xFF4
 17208                           prodl	equ	0xFF3
 17209                           intcon	equ	0xFF2
 17210                           intcon3	equ	0xFF0
 17211                           indf0	equ	0xFEF
 17212                           postinc0	equ	0xFEE
 17213                           fsr0h	equ	0xFEA
 17214                           fsr0l	equ	0xFE9
 17215                           wreg	equ	0xFE8
 17216                           indf1	equ	0xFE7
 17217                           postdec1	equ	0xFE5
 17218                           fsr1h	equ	0xFE2
 17219                           fsr1l	equ	0xFE1
 17220                           indf2	equ	0xFDF
 17221                           postinc2	equ	0xFDE
 17222                           postdec2	equ	0xFDD
 17223                           fsr2h	equ	0xFDA
 17224                           fsr2l	equ	0xFD9
 17225                           status	equ	0xFD8


Data Sizes:
    Strings     725
    Constant    151
    Data        25
    BSS         540
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69     126
    BANK0           128     40     127
    BANK1           256      0     221
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$1696	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_83(CODE[1]), STR_81(CODE[1]), STR_78(CODE[1]), STR_75(CODE[2]), 
		 -> STR_74(CODE[2]), STR_73(CODE[2]), STR_72(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_106(CODE[5]), STR_105(CODE[5]), STR_104(CODE[5]), STR_103(CODE[5]), 
		 -> STR_102(CODE[5]), STR_101(CODE[5]), STR_100(CODE[5]), STR_99(CODE[4]), 
		 -> STR_98(CODE[4]), STR_97(CODE[4]), STR_96(CODE[4]), STR_95(CODE[4]), 
		 -> STR_94(CODE[4]), STR_93(CODE[3]), STR_92(CODE[3]), STR_91(CODE[3]), 
		 -> STR_90(CODE[2]), STR_89(CODE[2]), STR_88(CODE[2]), STR_87(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_107(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_86(CODE[3]), STR_85(CODE[9]), STR_84(CODE[12]), STR_82(CODE[7]), 
		 -> STR_80(CODE[3]), STR_79(CODE[11]), STR_77(CODE[3]), STR_76(CODE[9]), 
		 -> STR_71(CODE[15]), STR_70(CODE[12]), STR_69(CODE[9]), STR_68(CODE[16]), 
		 -> STR_67(CODE[17]), STR_66(CODE[17]), STR_65(CODE[14]), STR_64(CODE[15]), 
		 -> STR_63(CODE[15]), STR_62(CODE[15]), STR_61(CODE[15]), STR_60(CODE[15]), 
		 -> STR_59(CODE[20]), STR_58(CODE[17]), STR_57(CODE[13]), STR_56(CODE[16]), 
		 -> STR_55(CODE[15]), STR_54(CODE[15]), STR_53(CODE[15]), STR_52(CODE[15]), 
		 -> STR_51(CODE[10]), STR_50(CODE[19]), STR_49(CODE[17]), STR_48(CODE[12]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[14]), STR_44(CODE[15]), 
		 -> STR_43(CODE[3]), STR_42(CODE[3]), STR_41(CODE[3]), STR_40(CODE[3]), 
		 -> STR_39(CODE[3]), STR_38(CODE[3]), STR_37(CODE[3]), STR_36(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[9]), STR_33(CODE[20]), STR_32(CODE[3]), 
		 -> STR_31(CODE[3]), STR_30(CODE[21]), STR_29(CODE[11]), STR_28(CODE[13]), 
		 -> STR_27(CODE[18]), STR_26(CODE[11]), STR_25(CODE[13]), STR_24(CODE[19]), 
		 -> STR_23(CODE[11]), STR_22(CODE[13]), STR_21(CODE[15]), STR_20(CODE[12]), 
		 -> STR_19(CODE[7]), STR_18(CODE[14]), STR_17(CODE[14]), STR_16(CODE[16]), 
		 -> STR_15(CODE[14]), STR_14(CODE[3]), STR_13(CODE[2]), STR_12(CODE[3]), 
		 -> STR_11(CODE[2]), STR_10(CODE[3]), STR_9(CODE[5]), STR_8(CODE[17]), 
		 -> STR_7(CODE[6]), STR_6(CODE[8]), STR_5(CODE[3]), STR_4(CODE[14]), 
		 -> STR_3(CODE[15]), STR_2(CODE[14]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _get_RTC_initial->___wmul
    _get_RTC_final->___wmul
    ___wmul->___awdiv
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   33007
                                             36 BANK0      4     4      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _I2C_sendData
                             ___wmul
         _generate_compartment_array
                      _get_RTC_final
                    _get_RTC_initial
                            _initLCD
                         _initialize
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4   10588
                                             14 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_RTC_initial                                      1     1      0    6736
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_RTC_final                                        1     1      0    6736
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3081
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1312
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _generate_compartment_array                           4     2      2     148
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0    2320
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2298
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     740
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0   13554
                                             42 COMRAM    27    27      0
                            ___awmod
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
       i2_generate_compartment_array
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            34    22     12    3544
                                             12 COMRAM    30    18     12
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) i2_generate_compartment_array                         4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (6) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   ___wmul
     ___awdiv (ARG)
   _generate_compartment_array
   _get_RTC_final
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _get_RTC_initial
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble
   _readADC

 _interruptHandler (ROOT)
   ___awmod
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_generate_compartment_array
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DD       7       86.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     28      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2A2      34        0.0%
DATA                 0      0     2A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 14:19:57 2018

                                    _B 0065                                      _N 0063  
                                    _S 0061                                      _W 005F  
                                    _i 00BE                                      _j 0075  
                   i2_I2C_Master_Start 48D6                             _B_dispense 00FC  
                   i2_I2C_Master_Write 48B4                            _rotate_gear 00FE  
                          __CFG_CPD$ON 000000                           ___awdiv@sign 00CD  
                  ___wmul@multiplicand 00D2                     i2___lwdiv@dividend 0001  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    l401 1A7E  
                                  l410 1C0C                                    l411 1CA8  
                                  l403 1B0C                                    l404 1B26  
                                  l413 1C4A                                    l405 1BC2  
                                  l350 10A2                                    l415 1E6C  
                                  l407 1B64                                    l352 12FA  
                                  l409 1BF2                                    l353 10AE  
                                  l370 1992                                    l354 10FE  
                                  l346 1034                                    l355 1150  
                                  l380 162E                                    l364 1368  
                                  l356 1188                                    l373 14EA  
                                  l390 17D6                                    l382 168A  
                                  l358 12CE                                    l383 1692  
                                  l375 1546                                    l359 1200  
                                  l392 18A4                                    l376 154E  
                                  l368 1432                                    l393 18CE  
                                  l394 191C                                    l491 3BFE  
                                  l387 1772                                    l900 307E  
                                  l901 30AE                                    l397 1A26  
                                  l389 17CE                                    l910 30DE  
                                  l902 3094                                    l398 1A40  
                                  l911 31A0                                    l495 46F0  
                                  l399 1ADC                                    l913 3188  
                                  l914 30E4                                    l915 319A  
                                  l916 3134                                    l853 2D8C  
                                  l790 39BA                                    l870 2E4E  
                                  l862 2DE8                                    l854 2D9C  
                                  l791 3A3C                                    l871 2E54  
                                  l784 3A7E                                    l864 2F3A  
                                  l872 2E7C                                    l856 2DB4  
                                  l785 3850                                    l881 2F28  
                                  l873 2E8C                                    l857 2DAC  
                                  l882 2EFC                                    l874 2E86  
                                  l787 3894                                    l788 38E6  
                                  l876 2ED8                                    l789 3948  
                                  l893 3038                                    l885 2FA2  
                                  l869 2F72                                    l894 2FF2  
                                  l878 2EE8                                    l879 2EE2  
                                  l888 3028                                    l889 2FBC  
                                  l898 3052                                    l899 3076  
                         __CFG_CPB$OFF 000000                    ?i2_I2C_Master_Start 0001  
                  ?i2_I2C_Master_Write 0002                        _compartment_pos 00B0  
                         ___awmod@sign 0006                                    prod 000FF3  
                        _assembly_step 00AC                                    wreg 000FE8  
              __end_of_get_RTC_initial 3D48                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1090 3F5C  
                                 l1091 3F54                                   l1332 447E  
                                 l1333 4488                                   l1094 3F7C  
                                 l1342 463C                                   l1095 3F86  
                                 l1087 3F2E                                   l1343 4646  
                                 l1280 411C                                   l1096 3F94  
                                 l1088 3F3E                                   l1328 445E  
                                 l1329 4456                                   l1249 47EC  
                                 l1338 4624                                   l1275 40DA  
                                 l1339 461C                                   l1276 40CE  
                                 l1279 410E                                   l4440 2EE2  
                                 l4444 2EFC                                   l4470 2FC0  
                                 l4616 3D88                                   l4626 3DB0  
                                 l4556 3C40                                   l4636 3B50  
                                 l4484 2FF6                                   l5508 162E  
                                 l4566 3C68                                   l5550 1772  
                                 l5466 14EA                                   l5590 18A4  
                                 l5638 19F0                                   l5594 18CE  
                                 _ADON 007E10                                   STR_1 FE04  
                                 STR_2 FEE4                                   STR_3 FE33  
                                 STR_4 FEC8                                   STR_5 FFF8  
                                 STR_6 FFA4                                   STR_7 FFBA  
                                 STR_8 FDD2                                   STR_9 FFE3  
                                 u3010 2F1E                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   u3017 2F14  
                                 _LATE 000F8D                                   u3210 31AA  
                                 u3240 3C68                                   u4130 103E  
                                 u3180 30B6                                   u2605 472E  
                                 u2606 4730                                   u3190 30CC  
                                 u4230 1430                                   u3255 43B8  
                                 u2720 40DE                                   u3280 3DB0  
                                 u4320 16A2                                   u2545 3ED0  
                                 u2546 3ED2                                   u2555 3F14  
                                 u5107 106A                                   u2556 3F16  
                                 u5117 1086                                   u2750 4462  
                                 u5207 13B2                                   u5127 10C6  
                                 u2680 3F60                                   u4360 17E6  
                                 u4280 155E                                   u5217 13FA  
                                 u5137 10EA                                   u5307 181E  
                                 u5227 1458                                   u5147 1142  
                                 u2780 4628                                   u5317 1838  
                                 u5237 14D2                                   u5157 117A  
                                 u4390 19F0                                   u5407 1BAC  
                                 u5327 1854                                   u5247 1596  
                                 u5167 11B2                                   u5417 1C92  
                                 u5337 188E                                   u5257 15B0  
                                 u5177 11E6                                   u2970 2EBA  
                                 u5507 1DC4                                   u5427 1CD6  
                                 u5347 190C                                   u5267 15CC  
                                 u5187 12B4                                   u5517 1DF0  
                                 u5437 1CF2                                   u5357 1942  
                                 u5277 16DA                                   u5197 1326  
                                 u5607 4822                                   u5527 1E0C  
                                 u5447 1D08                                   u5367 195E  
                                 u5287 16F4                                   u5617 44EC  
                                 u2977 2EB0                                   u5537 1E22  
                                 u5457 1D34                                   u5377 19BA  
                                 u5297 1710                                   u5627 4520  
                                 u5547 1E46                                   u5467 1D50  
                                 u5387 19D4                                   u5637 483A  
                                 u5557 1E62                                   u5477 1D66  
                                 u5397 1AC6                                   u5647 3EB6  
                                 u5567 1EA4                                   u5487 1D92  
                                 u5657 3EC0                                   u5577 1EC4  
                                 u5497 1DAE                                   u5667 3EFA  
                                 u5587 1EEE                                   u5677 3F04  
                                 u5597 1F0A                                   _main 1000  
             __end_of_interruptHandler 1000                                   _mode 00BA  
                                 _keys FC93                                   _temp 0076  
                                 _time 0056                                   _prev 00B2  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 0005                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf1 000FE7                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 007F                                   _strs FCC6  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 486A                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                            i2_lcdNibble 3F9E  
                     __end_of_LCD_LEFT FCC1                           _total_number 0069  
                I2C_Master_Read@ackBit 00C9                       ?_I2C_Master_Init 00D5  
                     ?_I2C_Master_Read 0001       i2generate_compartment_array@step 0001  
       generate_compartment_array@step 00C8                       ?_I2C_Master_Wait 0001  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                      __end_of___awdiv 3F9E                                  STR_10 FE4E  
                                STR_11 FE02                                  STR_12 FFF8  
                                STR_20 FF26                                  STR_13 FFFB  
                                STR_21 FE8D                                  STR_14 FE4E  
                                STR_22 FEF2                                  STR_30 FD2A  
                                STR_31 FE4E                                  STR_23 FF55  
                                STR_15 FEBA                                  STR_40 FE4E  
                                STR_32 FE4E                                  STR_16 FE14  
                                STR_24 FD67                                  STR_17 FEBA  
                                STR_41 FE4E                                  STR_25 FEFF  
                                STR_33 FD3F                                  STR_18 FEBA  
                                STR_42 FE4E                                  STR_34 FF9B  
                                STR_26 FF60                                  STR_50 FD7A  
                                STR_19 FEC1                                  STR_43 FE4E  
                                STR_35 FE4E                                  STR_51 FF76  
                                STR_27 FD8D                                  STR_36 FE4E  
                                STR_28 FF0C                                  STR_52 FE9C  
                                STR_44 FE7E                                  STR_60 FE42  
                      __end_of___awmod 431E                                  STR_37 FE4E  
                                STR_29 FF6B                                  STR_45 FED6  
                                STR_53 FEAB                                  STR_61 FE51  
                                STR_38 FE4E                                  STR_70 FF32  
                                STR_54 FE9C                                  STR_62 FE60  
                                STR_46 FDB0                                  STR_39 FE4E  
                                STR_55 FEAB                                  STR_63 FE6F  
                                STR_71 FE24                                  STR_47 FDC1  
                                STR_64 FE7E                                  STR_80 FFF8  
                                STR_72 FFFD                                  STR_48 FF32  
                                STR_56 FDF4                                  STR_81 FE32  
                                STR_73 FFEA                                  STR_65 FED6  
                                STR_57 FF19                                  STR_49 FDE3  
                                STR_74 FFEE                                  STR_90 FFF2  
                                STR_66 FDB0                                  STR_58 FDD2  
                                STR_82 FFB3                                  STR_83 FE32  
                                STR_91 FFE9                                  STR_75 FFF2  
                                STR_67 FDC1                                  STR_59 FD53  
                                STR_68 FDF4                                  STR_92 FFED  
                                STR_76 FF80                                  STR_84 FF3E  
                                STR_93 FFF1                                  STR_77 FFF8  
                                STR_85 FF92                                  STR_69 FF89  
                                STR_78 FE32                                  STR_94 FFE8  
                                STR_87 FFFD                                  STR_95 FFEC  
                                STR_79 FF4A                                  STR_88 FFEA  
                                STR_96 FFF0                                  STR_89 FFEE  
                                STR_97 FFC6                                  STR_98 FFD0  
                                STR_99 FFF4                        __end_of___lldiv 412E  
                      ___awdiv@divisor 00CA                        __end_of___lwdiv 4492  
                      __end_of___lwmod 4650                                  i2l430 01C2  
                                i2l431 00C4                                  i2l440 0256  
                                i2l433 0114                                  i2l450 08F0  
                                i2l442 0440                                  i2l443 083C  
                                i2l435 01DE                                  i2l427 009A  
                                i2l460 0A56                                  i2l452 0938  
                                i2l444 047A                                  i2l461 0A96  
                                i2l437 0304                                  i2l462 0AD6  
                                i2l454 0980                                  i2l446 0858  
                                i2l438 0206                                  i2l463 0B16  
                                i2l447 09FC                                  i2l480 0E32  
                                i2l464 0CEA                                  i2l456 09C8  
                                i2l448 08A8                                  i2l481 0E3C  
                                i2l465 0B6E                                  i2l457 09EE  
                                i2l482 0F00                                  i2l474 0E64  
                                i2l458 0D40                                  i2l475 0E12  
                                i2l467 0C6E                                  i2l459 0A16  
                                i2l740 2056                                  i2l900 34AC  
                                i2l484 0F52                                  i2l476 0E9E  
                                i2l468 0CE2                                  i2l901 34D8  
                                i2l477 0E1A                                  i2l750 234C  
                                i2l742 20B8                                  i2l910 3506  
                                i2l902 34C2                                  i2l486 0F8A  
                                i2l478 0E22                                  i2l911 35BE  
                                i2l479 0E2A                                  i2l760 2744  
                                i2l752 2400                                  i2l744 2158  
                                i2l736 1F92                                  i2l913 35A8  
                                i2l770 2BF4                                  i2l762 2834  
                                i2l754 24B4                                  i2l746 21F8  
                                i2l738 1FF4                                  i2l914 350C  
                                i2l915 35B8                                  i2l772 2CBA  
                                i2l764 2924                                  i2l756 25A2  
                                i2l748 2298                                  i2l916 3556  
                                i2l853 31D2                                  i2l766 2A14  
                                i2l758 2690                                  i2l790 3754  
                                i2l870 328A                                  i2l862 3228  
                                i2l854 31E2                                  i2l791 37D8  
                                i2l871 328E                                  i2l768 2B04  
                                i2l784 381C                                  i2l864 336C  
                                i2l872 32B6                                  i2l856 31F6  
                                i2l785 35E4                                  i2l881 335A  
                                i2l873 32C4                                  i2l857 31F0  
                                i2l778 4378                                  i2l882 3330  
                                i2l874 32C0                                  i2l787 3628  
                                i2l788 367C                                  i2l876 330E  
                      ___awdiv@counter 00CC                                  i2l789 36E0  
                                i2l893 3466                                  i2l885 33D0  
                                i2l869 33A2                                  i2l894 3420  
                                i2l878 331E                                  i2l879 3318  
                                i2l888 3456                                  i2l889 33EA  
                                i2l898 3480                                  i2l899 34A4  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                                _B_max 01D9                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                                  _N_max 01D7  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 4842  
                        _N_spacingTime 0098                                  _S_max 01D5  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _W_max 01D3  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 470E  
                      __end_of_initLCD 4530                                  _check 431E  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _angle 017C                        __end_of_dpowers FCAE  
                                _array FCBD                                  _error 017A  
                      __end_of_isdigit 47F4                                  _valid 006B  
                                _state 00AE                                  _putch 4812  
                    _compartment_array 0080                             _N_dispense 00FB  
                                pclath 000FFA                                  tablat 000FF5  
                    _LCDinterruptState 00C2                       __end_ofi2___wmul 47AE  
                                status 000FD8            I2C_Master_Read@receivedByte 00CA  
                                wtemp6 0080                        __end_of_strncmp 40AA  
                   __size_ofi2___awdiv 0084                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                  __size_of_I2C_sendData 0028  
                   __size_ofi2___lldiv 0082                       __end_ofi2_printf 35E2  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                      __initialization 4234                      i2___lldiv@divisor 0005  
                   __size_ofi2_lcdInst 0014                           __end_of_main 1F30  
                    i2___lldiv@counter 000D                           __end_of_keys FCA4  
                           i2printf@ap 0021                             i2printf@cp 001F  
                         __end_of_strs FD2A                     __size_ofi2_initLCD 004C  
                   __size_ofi2_isdigit 001E                         __CFG_OSC$HSPLL 000000  
                    __end_of_LCD_RIGHT FCC2                                 ??_main 00EC  
                           _S_dispense 00FA                          __activetblptr 000003  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 00C9  
                     ?_get_RTC_initial 0001                                 ?_check 0001  
                   ??_I2C_Master_Start 00C9                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 00CB  
                               STR_100 FFD4                                 STR_101 FFD9  
                               STR_102 FFCF                                 STR_103 FFC5  
                               STR_104 FFCA                                 STR_105 FFC0  
                               STR_106 FFDE                                 _ADRESH 000FC4  
                               STR_107 FFAC                                 STR_108 FD9F  
                               _ADRESL 000FC3                       ___awdiv@dividend 00C8  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
                         _I2C_sendData 4760                        i2lcdNibble@temp 0001  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               i2l1100 42C2                                 i2l1101 42CE  
                               i2l1103 42E4                                 i2l1104 42DC  
                               i2l1107 42FC                                 i2l1108 4306  
                               i2l1109 4314                                 i2l1090 4170  
                               i2l1091 4168                                 i2l1332 44D0  
                               i2l1333 44DA                                 i2l1094 4190  
                               i2l1342 467E                                 i2l1095 419A  
                               i2l1087 4142                                 i2l1343 4688  
                               i2l1280 4222                                 i2l1096 41A8  
                               i2l1088 4152                                 i2l1328 44B0  
                               i2l1329 44A8                                 i2l1249 480A  
                               i2l1338 4666                                 i2l1275 41E0  
                               i2l1339 465E                                 i2l1276 41D4  
                               i2l1279 4214                                 i2l1472 46A0  
                               i2l1481 4586                                 i2l1473 469C  
                               i2l1482 457E                                 i2l1490 45D0  
                               i2l1475 46B8                                 i2l1476 46B0  
                               i2l1495 4090                                 i2l1496 4026  
                               i2l1489 45D8                                 i2l1497 4088  
                               i2l5122 3424                                 i2l5108 33EE  
                               i2l5082 3330                                 i2l5078 3318  
                               i2l6236 0C7C                                 i2l6350 0FB4  
                               i2l4664 4026                                 i2l6348 0FB2  
                               i2l5900 01DA                                 i2l4918 436E  
                               i2l5920 024E                                 i2l5874 010C  
                               i2l5996 059C                              ??i2_putch 0003  
                               _SSPADD 000FC8                                 _SSPBUF 000FC9  
                               _B_done 0176                        _openHandle_data 00C1  
                               _N_done 0174                                 _S_done 0172  
                       __CFG_XINST$OFF 000000                                 _W_done 0170  
       ??i2_generate_compartment_array 0003                                 ___wmul 4738  
                            ??___awdiv 00CC                         __CFG_STVREN$ON 000000  
                            ??___awmod 0005                              ??___lldiv 00D0  
                            ??___lwdiv 00CC                              ??___lwmod 00D3  
                     __end_of_is_valid 2D80                                 clear_0 427A  
                               clear_1 4286                                 clear_2 4292  
                               clear_3 429E                       ___awdiv@quotient 00CE  
                      ___awmod@divisor 0003                                 _number 007D  
                      ___awmod@counter 0005                              ??_lcdInst 00CA  
                               _printf 2D80                                 _strcat 4692  
                               _strcmp 457C                                 _strcpy 45C6  
                       i2___awdiv@sign 0006                              ??_readADC 00CA  
                            ??_initLCD 00CB                     _compartment_number 0046  
                            ??_isdigit 00C8                      __end_ofi2___awdiv 41B2  
                    __end_ofi2___lldiv 4234                      __end_ofi2___lwdiv 44E4  
                         __mediumconst FC92                      __end_ofi2___lwmod 4692  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 487E  
                            ??_strncmp 000D                      __end_ofi2_initLCD 457C  
                    __end_ofi2_isdigit 4812                             __accesstop 0080  
              __end_of__initialization 42A4                  __end_of_get_RTC_final 3E90  
                        ___rparam_used 000001                     i2___lwmod@dividend 0008  
                 __end_of_happynewyear FCBD                         __pcstackCOMRAM 0001  
                   i2___lldiv@dividend 0001                           __pidataBANK0 4890  
                         __pidataBANK1 489F                i2I2C_Master_Read@ackBit 0002  
                        __end_of_check 4382                          __end_of_array FCC0  
                        __end_of_putch 482A                            i2printf@idx 001D  
                          i2printf@len 0023                            i2printf@val 0025  
                        _B_spacingTime 009A                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0088                            i2putch@data 0003  
                            ?i2_printf 000D                                ??_check 0003  
                              ??_putch 00CA                     i2___lldiv@quotient 0009  
                           __pbssBANK0 0080                             __pbssBANK1 0100  
                           __pbssBANK2 0200                      _S_total_dispensed 0092  
                    ?_interruptHandler 0001                     ??_interruptHandler 002B  
                        _init_position 01DB                           ?i2_lcdNibble 0001  
                              ?___wmul 00D0             i2I2C_Master_Init@clockFreq 000E  
                              ?_printf 00D6                                ?_strcat 0001  
                              ?_strcmp 0001                                ?_strcpy 0007  
                           ??i2___wmul 0005                           _gear_counter 00B4  
                           _final_time 0160                             ??i2_printf 0019  
                 lcd@LCDinterruptState 0077                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _B_array 0130                                i2_putch 4856  
                            ?_is_valid 0001                                _N_array 0110  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3F18  
          __size_ofi2_I2C_Master_Write 000A                                _S_array 0120  
                              __Hparam 0000                             _hr_initial 016E  
                              __Lparam 0000                                _W_array 0100  
                              ___awdiv 3F18                                ___awmod 42AE  
                              ___lldiv 40AA                        __size_of___wmul 0028  
                              ___lwdiv 443E                                ___lwmod 460C  
             interruptHandler@keypress 0044                                __pcinit 4234  
                              __ramtop 1000                             _initialize 3AB2  
                              _lcdInst 482A                                __ptext0 1000  
                              __ptext1 46D4                                __ptext2 2D80  
                              __ptext3 4812                                __ptext4 47D2  
                              __ptext5 460C                                __ptext6 443E  
                              __ptext7 3AB2                                __ptext8 44E4  
                              __ptext9 482A                        __size_of_printf 0448  
                      __size_of_strcat 0042                        __size_of_strcmp 004A  
                              _readADC 46D4                        __size_of_strcpy 0046  
                              _initLCD 44E4                      __end_of_hexpowers FCB6  
                              _counter 006F                                _dpowers FCA4  
                              _isdigit 47D2                       ___awmod@dividend 0001  
                            _LCD_RIGHT FCC1               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002A               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                          _S_spacingTime 0096  
                              _strncmp 4024                         __pintcode_body 0012  
                 end_of_initialization 42A4                  __end_of_LCD_SIZE_HORZ FCC4  
                __end_of_LCD_SIZE_VERT FCC3           ??_generate_compartment_array 00CA  
                         _final_number 0150                                int_func 0012  
                  i2___wmul@multiplier 0001                             ??_is_valid 0007  
                       _operation_done 00B6              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 00CC  
                         _close_handle 00F0                        ___lldiv@counter 00D4  
                              printf@c 00EB                                printf@f 00D6  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                              strcmp@r 0006                              _PORTAbits 000F80  
                           _prev_state 0067                             _servo_ramp 00F1  
  __size_of_generate_compartment_array 0264                              _TRISAbits 000F92  
                            _TRISCbits 000F94                              _TRISDbits 000F95  
                    i2_I2C_Master_Init 43E2                      i2_I2C_Master_Read 47AE  
                    i2_I2C_Master_Wait 487E                           _happynewyear FCB6  
                    i2_I2C_Master_Stop 48CE                              i2___awdiv 412E  
                           _white_tape 00BC                              _B_counter 00AA  
                    i2___lwdiv@divisor 0003                              i2___lldiv 41B2  
                            i2___lwdiv 4492                              i2___lwmod 4650  
                   ?i2_I2C_Master_Init 000E                      i2___lwdiv@counter 0007  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   ?i2_I2C_Master_Stop 0001                              i2_lcdInst 486A  
             __size_of_get_RTC_initial 0148                            printf@width 00E9  
                            i2_initLCD 4530                     i2___awdiv@dividend 0001  
                  ??i2_I2C_Master_Init 0012                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 47F4                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                         __end_of___wmul 4760  
                 __size_ofi2_lcdNibble 0086                            ?_initialize 0001  
                        i2lcdInst@data 0003                       i2___wmul@product 0005  
                       __end_of_printf 31C8                              _N_counter 00A6  
                       __end_of_strcat 46D4                         __end_of_strcmp 45C6  
                         i2printf@flag 0027                         __end_of_strcpy 460C  
            __end_ofi2_I2C_Master_Init 443E              __end_ofi2_I2C_Master_Read 47D2  
            __end_ofi2_I2C_Master_Wait 4890                           i2printf@prec 001E  
                  start_initialization 4234              __end_ofi2_I2C_Master_Stop 48D6  
                   i2___awdiv@quotient 0007                      __size_ofi2___wmul 0026  
                            i2printf@c 002A                              i2printf@f 000D  
 __end_ofi2_generate_compartment_array 384E  __size_ofi2_generate_compartment_array 026C  
         i2_generate_compartment_array 35E2                             ?i2___awdiv 0001  
                           ?i2___lldiv 0001                             ?i2___lwdiv 0001  
                           ?i2___lwmod 0008                      __size_ofi2_printf 041A  
                            _S_counter 00A8                      ??_I2C_Master_Init 00D9  
                    ??_I2C_Master_Read 00C9                      ??_I2C_Master_Wait 00C8  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 00C9  
                         _counter_step 006D                             ?i2_initLCD 0001  
                           ?i2_isdigit 0001                              _W_counter 00A4  
                    interruptHandler@i 0042                               ??___wmul 00D4  
             I2C_Master_Init@clockFreq 00D5                            __pdataBANK0 00F0  
                          __pdataBANK1 01D3                       __CFG_LPT1OSC$OFF 000000  
                             ??_printf 00DA              __size_of_interruptHandler 0FF8  
                             ??_strcat 0005                               ??_strcmp 0005  
                             ??_strcpy 000B                 __size_of_get_RTC_final 0148  
                          __pbssCOMRAM 0046                            _change_mode 00B8  
                        __pcstackBANK0 00C8                      i2___lwmod@divisor 000A  
                    i2___lwmod@counter 000C                           _isdigit$1307 00C9  
   __end_of_generate_compartment_array 3AB2          ?i2_generate_compartment_array 0001  
           _generate_compartment_array 384E                               ?i2_putch 0001  
                    _W_total_dispensed 0090                    __size_of_initialize 014E  
                         _current_set2 0078                       _I2C_Master_Start 48C6  
                     _I2C_Master_Write 48AA                      __size_of_is_valid 0E50  
                            _main$1696 00EE                       ___lwdiv@dividend 00C8  
                         _initial_time 0168                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                      ??_get_RTC_initial 00D6  
                        __pmediumconst FC92                              _lcdNibble 3E90  
                             ?___awdiv 00C8                               ?___awmod 0001  
                             ?___lldiv 00C8                               ?___lwdiv 00C8  
                             ?___lwmod 00CF                              _final_set 01A6  
                             ?_lcdInst 0001                               ?_readADC 00C8  
                             ?_initLCD 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Init 005C             __size_ofi2_I2C_Master_Read 0024  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _hexpowers FCAE                         __size_of_check 0064  
                     ___lwdiv@quotient 00CC                            ??i2___awdiv 0005  
                          ??i2___lldiv 0009                          _W_spacingTime 0178  
                        ?_I2C_sendData 0001                              _min_final 0164  
                             ?_strncmp 0007                            ??i2___lwdiv 0005  
                          ??i2___lwmod 000C                         __size_of_putch 0018  
                            _sec_final 0162                               _LCD_LEFT FCC0  
           __end_ofi2_I2C_Master_Start 48DE             __end_ofi2_I2C_Master_Write 48BE  
                          ??i2_lcdInst 0003                         ___wmul@product 00D4  
                             _LATDbits 000F8C                            ??i2_initLCD 0004  
                          ??i2_isdigit 0001                          _get_RTC_final 3D48  
                        _operationTime 0071                               i2u331_40 4602  
                             i2u331_47 45F8                               i2u404_40 4174  
                             i2u262_40 45BA                               i2u360_40 434E  
                             i2u336_40 4054                               i2u600_47 0CC6  
                             i2u361_40 435E                               i2u601_47 0D14  
                             i2u362_40 436E                               i2u370_45 47CA  
                             i2u258_45 3FDC                               i2u370_46 47CC  
                             i2u258_46 3FDE                               i2u610_47 3FC2  
                             i2u602_47 0D82                               i2u291_40 466A  
                             i2u451_40 00C0                               i2u259_45 4020  
                             i2u259_46 4022                               i2u611_47 3FCC  
                             i2u603_47 0E56                               i2u460_40 0272  
                             i2u612_47 4006                               i2u604_47 0EBE  
                             i2u285_40 41E4                               i2u461_40 0300  
                             i2u453_40 0130                               i2u613_47 4010  
                             i2u605_47 0EDE                               i2u366_40 42E8  
                             i2u358_40 432E                               i2u606_47 4862  
                             i2u359_40 433E                               i2u375_40 32F2  
                             i2u607_47 4536                               i2u375_47 32E8  
                            _operation 0073                               i2u288_40 44B4  
                             i2u480_40 0B6C                               i2u464_40 0478  
                             i2u608_47 456A                               i2u465_40 059C  
                             i2u369_45 4416                               i2u609_47 4876  
                             i2u482_40 0C7C                               i2u458_40 0202  
                             i2u570_47 028A                               i2u379_40 3352  
                             i2u379_47 3348                               i2u571_47 02E0  
                             i2u396_40 34E0                               i2u484_40 0CFA  
                             i2u580_47 067E                               i2u572_47 041A  
                             i2u397_40 34F4                               i2u581_47 0696  
                             i2u573_47 042E                               i2u590_47 0798  
                             i2u582_47 06AC                               i2u574_47 0484  
                             i2u399_40 35C6                               i2u591_47 07AE  
                             i2u583_47 06D4                               i2u575_47 051A  
                             i2u592_47 07E0                               i2u584_47 06EC  
                             i2u576_47 05BE                               i2u568_47 0148  
                             i2u593_47 07F8                               i2u585_47 0702  
                             i2u577_47 05EE                               i2u569_47 019E  
                             i2u594_47 0818                               i2u586_47 072A  
                             i2u578_47 061E                               i2u595_47 0830  
                             i2u587_47 0742                               i2u579_47 064E  
                             i2u596_47 09E2                               i2u588_47 0758  
                             i2u597_47 0B40                               i2u589_47 0780  
                             i2u598_47 0C16                               i2u599_47 0C56  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
        i2I2C_Master_Write@byteToWrite 0002                              _nuts_data 00C0  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 00D0  
                             i2___wmul 4788                          lcdNibble@data 00C9  
                             _B_remain 00A2                             printf@flag 00E8  
                        lcdNibble@temp 00C8                             printf@prec 00DF  
                    i2___awdiv@divisor 0003                      i2___awdiv@counter 0005  
                             i2_printf 31C8                         ??_I2C_sendData 00CB  
                       _LCD_HORZ_LIMIT FCC5                              copy_data0 4248  
                            copy_data1 4268                   interruptHandler@temp 0045  
                             _N_remain 00A0                       __size_ofi2_putch 0014  
                       ?_get_RTC_final 0001                               _S_remain 009E  
                             __Hrparam 0000                  I2C_sendData@char_data 00CB  
                             __Lrparam 0000                               _W_remain 009C  
                   __CFG_BOREN$SBORDIS 000000                       __size_of___awdiv 0086  
                     __size_of___awmod 0070                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 0084                    _rotate_1compartment 00FD  
                     __size_of___lwdiv 0054                       __size_of___lwmod 0044  
                       readADC@channel 00CC                           ??_initialize 00C8  
                     _interruptHandler 0008                       __size_of_lcdInst 0018  
                      _I2C_Master_Init 4382                       __size_of_readADC 003A  
                      _I2C_Master_Read 470E                       __size_of_initLCD 004C  
                          _current_set 00C3                        _I2C_Master_Wait 4842  
                           strcat@from 0003                        _I2C_Master_Stop 48BE  
               __end_of_LCD_HORZ_LIMIT FCC6                       __size_of_isdigit 0022  
                      ___lwdiv@divisor 00CA                        ___lwdiv@counter 00CE  
                             __ptext10 3E90                               __ptext11 3C00  
                             __ptext20 48C6                               __ptext12 3D48  
                             __ptext21 4842                               __ptext13 4738  
                             __ptext30 4530                               __ptext22 4382  
                             __ptext14 3F18                               __ptext31 486A  
                             __ptext23 40AA                               __ptext15 470E  
                             __ptext40 43E2                               __ptext32 3F9E  
                             __ptext16 384E                               __ptext41 41B2  
                             __ptext33 35E2                               __ptext25 31C8  
                             __ptext17 4760                               __ptext42 4024  
                             __ptext34 412E                               __ptext26 4856  
                             __ptext18 48AA                               __ptext43 45C6  
                             __ptext35 48B4                               __ptext27 47F4  
                             __ptext19 48BE                               __ptext44 4692  
                             __ptext36 48CE                               __ptext28 4650  
                             __ptext45 1F30                               __ptext37 48D6  
                             __ptext29 4492                               __ptext46 4788  
                             __ptext38 47AE                               __ptext47 457C  
                             __ptext39 487E                               __ptext48 431E  
                             __ptext49 42AE                               _fastener 0200  
                       _LCD_VERT_LIMIT FCC4                            _min_initial 016C  
                     __size_of_strncmp 0086                               _hr_final 0166  
                       i2_isdigit$1307 0002                             strcpy@from 0009  
                        __size_of_main 0F30                               _is_valid 1F30  
                           strncmp@len 000B                     __end_of_initialize 3C00  
                          _sec_initial 016A                               _temp_set 01CE  
                        ??i2_lcdNibble 0001                            ??_lcdNibble 00C8  
                             _prev_set 017E                               int$flags 007F  
                            printf@idx 00DE                              printf@len 00E4  
                            printf@val 00E6            I2C_Master_Write@byteToWrite 00C9  
                            putch@data 00CA               __end_of_I2C_Master_Start 48CE  
             __end_of_I2C_Master_Write 48B4                             _INTCONbits 000FF2  
                         _motorStart_0 00F9                           _motorStart_1 00F7  
                         _motorStart_2 00F5                           _motorStart_3 00F3  
               __end_of_LCD_VERT_LIMIT FCC5                      _B_total_dispensed 005D  
                             isdigit@c 00CA                      _N_total_dispensed 0094  
                             intlevel2 0000            ?_generate_compartment_array 00C8  
                      _get_RTC_initial 3C00                        ??_get_RTC_final 00D6  
                        _LCD_SIZE_HORZ FCC3                       ___lwmod@dividend 00CF  
                        _LCD_SIZE_VERT FCC2                       ___lldiv@dividend 00C8  
                            strncmp@s1 0007                              strncmp@s2 0009  
                             printf@ap 00E2                               printf@cp 00E0  
                 __end_of_I2C_sendData 4788                __end_of_I2C_Master_Init 43E2  
              __end_of_I2C_Master_Read 4738                __end_of_I2C_Master_Wait 4856  
              __end_of_I2C_Master_Stop 48C6                            lcdInst@data 00CA  
                          _motorStop_0 00F8                            _motorStop_1 00F6  
                          _motorStop_2 00F4                            _motorStop_3 00F2  
                  __end_ofi2_lcdNibble 4024                               strcat@cp 0005  
                             strcat@to 0001                               strcmp@s1 0001  
                             strcmp@s2 0003                       ___lldiv@quotient 00D0  
                      ___lwmod@divisor 00D1                               strcpy@cp 000B  
                             strcpy@to 0007                        ___lwmod@counter 00D3  
                          _SSPCON1bits 000FC6                            _SSPCON2bits 000FC5  
                          _prev_number 0140          i2I2C_Master_Read@receivedByte 0003  
