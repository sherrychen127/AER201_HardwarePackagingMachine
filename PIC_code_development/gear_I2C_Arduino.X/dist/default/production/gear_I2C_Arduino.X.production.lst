

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 30 15:35:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4620 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  0019E4                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _W_max
    72  0019E4  0004               	dw	4
    73                           
    74                           ;initializer for _S_max
    75  0019E6  0004               	dw	4
    76                           
    77                           ;initializer for _B_max
    78  0019E8  0004               	dw	4
    79                           
    80                           ;initializer for _N_max
    81  0019EA  0004               	dw	4
    82                           
    83                           ;initializer for _close_handle
    84  0019EC  0E                 	db	14
    85                           
    86                           ;initializer for _servo_ramp
    87  0019ED  0D                 	db	13
    88                           
    89                           ;initializer for _motorStop_3
    90  0019EE  0C                 	db	12
    91                           
    92                           ;initializer for _motorStart_3
    93  0019EF  0B                 	db	11
    94                           
    95                           ;initializer for _motorStop_2
    96  0019F0  0A                 	db	10
    97                           
    98                           ;initializer for _motorStart_2
    99  0019F1  39                 	db	57
   100                           
   101                           ;initializer for _motorStop_1
   102  0019F2  38                 	db	56
   103                           
   104                           ;initializer for _motorStart_1
   105  0019F3  37                 	db	55
   106                           
   107                           ;initializer for _motorStop_0
   108  0019F4  36                 	db	54
   109                           
   110                           ;initializer for _motorStart_0
   111  0019F5  35                 	db	53
   112                           
   113                           ;initializer for _S_dispense
   114  0019F6  34                 	db	52
   115                           
   116                           ;initializer for _N_dispense
   117  0019F7  33                 	db	51
   118                           
   119                           ;initializer for _B_dispense
   120  0019F8  32                 	db	50
   121                           
   122                           ;initializer for _rotate_1compartment
   123  0019F9  31                 	db	49
   124                           
   125                           ;initializer for _rotate_gear
   126  0019FA  30                 	db	48
   127                           
   128                           	psect	smallconst
   129  001000                     __psmallconst:
   130                           	opt stack 0
   131  001000  00                 	db	0
   132  001001                     _keys:
   133                           	opt stack 0
   134  001001  31                 	db	49
   135  001002  32                 	db	50
   136  001003  33                 	db	51
   137  001004  41                 	db	65
   138  001005  34                 	db	52
   139  001006  35                 	db	53
   140  001007  36                 	db	54
   141  001008  42                 	db	66
   142  001009  37                 	db	55
   143  00100A  38                 	db	56
   144  00100B  39                 	db	57
   145  00100C  43                 	db	67
   146  00100D  2A                 	db	42
   147  00100E  30                 	db	48
   148  00100F  23                 	db	35
   149  001010  44                 	db	68
   150  001011  00                 	db	0
   151  001012                     __end_of_keys:
   152                           	opt stack 0
   153  001012                     _dpowers:
   154                           	opt stack 0
   155  001012  0001               	dw	1
   156  001014  000A               	dw	10
   157  001016  0064               	dw	100
   158  001018  03E8               	dw	1000
   159  00101A  2710               	dw	10000
   160  00101C                     __end_of_dpowers:
   161                           	opt stack 0
   162  00101C                     _LCD_LEFT:
   163                           	opt stack 0
   164  00101C  00                 	db	0
   165  00101D                     __end_of_LCD_LEFT:
   166                           	opt stack 0
   167  00101D                     _LCD_RIGHT:
   168                           	opt stack 0
   169  00101D  01                 	db	1
   170  00101E                     __end_of_LCD_RIGHT:
   171                           	opt stack 0
   172  00101E                     _LCD_SIZE_VERT:
   173                           	opt stack 0
   174  00101E  02                 	db	2
   175  00101F                     __end_of_LCD_SIZE_VERT:
   176                           	opt stack 0
   177  00101F                     _LCD_SIZE_HORZ:
   178                           	opt stack 0
   179  00101F  10                 	db	16
   180  001020                     __end_of_LCD_SIZE_HORZ:
   181                           	opt stack 0
   182  001020                     _LCD_VERT_LIMIT:
   183                           	opt stack 0
   184  001020  02                 	db	2
   185  001021                     __end_of_LCD_VERT_LIMIT:
   186                           	opt stack 0
   187  001021                     _LCD_HORZ_LIMIT:
   188                           	opt stack 0
   189  001021  28                 	db	40
   190  001022                     __end_of_LCD_HORZ_LIMIT:
   191                           	opt stack 0
   192  0000                     _SSPBUF	set	4041
   193  0000                     _SSPCON2bits	set	4037
   194  0000                     _SSPADD	set	4040
   195  0000                     _SSPCON2	set	4037
   196  0000                     _SSPCON1	set	4038
   197  0000                     _SSPSTAT	set	4039
   198  0000                     _TRISCbits	set	3988
   199  0000                     _SSPCON1bits	set	4038
   200  0000                     _INTCONbits	set	4082
   201  0000                     _LATDbits	set	3980
   202  0000                     _ADRESH	set	4036
   203  0000                     _ADRESL	set	4035
   204  0000                     _ADCON0bits	set	4034
   205  0000                     _ADCON1	set	4033
   206  0000                     _ADCON0	set	4034
   207  0000                     _TRISE	set	3990
   208  0000                     _TRISD	set	3989
   209  0000                     _TRISC	set	3988
   210  0000                     _TRISB	set	3987
   211  0000                     _TRISA	set	3986
   212  0000                     _LATE	set	3981
   213  0000                     _LATD	set	3980
   214  0000                     _LATC	set	3979
   215  0000                     _LATB	set	3978
   216  0000                     _LATA	set	3977
   217  0000                     _OSCCONbits	set	4051
   218  0000                     _ADON	set	32272
   219  001022                     STR_15:
   220  001022  62                 	db	98	;'b'
   221  001023  6F                 	db	111	;'o'
   222  001024  6C                 	db	108	;'l'
   223  001025  74                 	db	116	;'t'
   224  001026  73                 	db	115	;'s'
   225  001027  20                 	db	32
   226  001028  72                 	db	114	;'r'
   227  001029  65                 	db	101	;'e'
   228  00102A  6D                 	db	109	;'m'
   229  00102B  61                 	db	97	;'a'
   230  00102C  69                 	db	105	;'i'
   231  00102D  6E                 	db	110	;'n'
   232  00102E  65                 	db	101	;'e'
   233  00102F  64                 	db	100	;'d'
   234  001030  3A                 	db	58	;':'
   235  001031  25                 	db	37
   236  001032  64                 	db	100	;'d'
   237  001033  00                 	db	0
   238  001034                     STR_9:
   239  001034  53                 	db	83	;'S'
   240  001035  70                 	db	112	;'p'
   241  001036  61                 	db	97	;'a'
   242  001037  63                 	db	99	;'c'
   243  001038  65                 	db	101	;'e'
   244  001039  72                 	db	114	;'r'
   245  00103A  20                 	db	32
   246  00103B  64                 	db	100	;'d'
   247  00103C  69                 	db	105	;'i'
   248  00103D  73                 	db	115	;'s'
   249  00103E  70                 	db	112	;'p'
   250  00103F  65                 	db	101	;'e'
   251  001040  6E                 	db	110	;'n'
   252  001041  73                 	db	115	;'s'
   253  001042  65                 	db	101	;'e'
   254  001043  64                 	db	100	;'d'
   255  001044  00                 	db	0
   256  001045                     STR_3:
   257  001045  62                 	db	98	;'b'
   258  001046  6F                 	db	111	;'o'
   259  001047  6C                 	db	108	;'l'
   260  001048  74                 	db	116	;'t'
   261  001049  73                 	db	115	;'s'
   262  00104A  20                 	db	32
   263  00104B  64                 	db	100	;'d'
   264  00104C  69                 	db	105	;'i'
   265  00104D  73                 	db	115	;'s'
   266  00104E  70                 	db	112	;'p'
   267  00104F  65                 	db	101	;'e'
   268  001050  6E                 	db	110	;'n'
   269  001051  73                 	db	115	;'s'
   270  001052  65                 	db	101	;'e'
   271  001053  64                 	db	100	;'d'
   272  001054  00                 	db	0
   273  001055                     STR_6:
   274  001055  6E                 	db	110	;'n'
   275  001056  75                 	db	117	;'u'
   276  001057  74                 	db	116	;'t'
   277  001058  73                 	db	115	;'s'
   278  001059  20                 	db	32
   279  00105A  64                 	db	100	;'d'
   280  00105B  69                 	db	105	;'i'
   281  00105C  73                 	db	115	;'s'
   282  00105D  70                 	db	112	;'p'
   283  00105E  65                 	db	101	;'e'
   284  00105F  6E                 	db	110	;'n'
   285  001060  73                 	db	115	;'s'
   286  001061  65                 	db	101	;'e'
   287  001062  64                 	db	100	;'d'
   288  001063  00                 	db	0
   289  001064                     STR_1:
   290  001064  42                 	db	66	;'B'
   291  001065  5F                 	db	95	;'_'
   292  001066  63                 	db	99	;'c'
   293  001067  6F                 	db	111	;'o'
   294  001068  75                 	db	117	;'u'
   295  001069  6E                 	db	110	;'n'
   296  00106A  74                 	db	116	;'t'
   297  00106B  65                 	db	101	;'e'
   298  00106C  72                 	db	114	;'r'
   299  00106D  3A                 	db	58	;':'
   300  00106E  25                 	db	37
   301  00106F  64                 	db	100	;'d'
   302  001070  00                 	db	0
   303  001071                     STR_4:
   304  001071  4E                 	db	78	;'N'
   305  001072  5F                 	db	95	;'_'
   306  001073  63                 	db	99	;'c'
   307  001074  6F                 	db	111	;'o'
   308  001075  75                 	db	117	;'u'
   309  001076  6E                 	db	110	;'n'
   310  001077  74                 	db	116	;'t'
   311  001078  65                 	db	101	;'e'
   312  001079  72                 	db	114	;'r'
   313  00107A  3A                 	db	58	;':'
   314  00107B  25                 	db	37
   315  00107C  64                 	db	100	;'d'
   316  00107D  00                 	db	0
   317  00107E                     STR_7:
   318  00107E  53                 	db	83	;'S'
   319  00107F  5F                 	db	95	;'_'
   320  001080  63                 	db	99	;'c'
   321  001081  6F                 	db	111	;'o'
   322  001082  75                 	db	117	;'u'
   323  001083  6E                 	db	110	;'n'
   324  001084  74                 	db	116	;'t'
   325  001085  65                 	db	101	;'e'
   326  001086  72                 	db	114	;'r'
   327  001087  3A                 	db	58	;':'
   328  001088  25                 	db	37
   329  001089  64                 	db	100	;'d'
   330  00108A  00                 	db	0
   331  00108B                     STR_13:
   332  00108B  42                 	db	66	;'B'
   333  00108C  5F                 	db	95	;'_'
   334  00108D  72                 	db	114	;'r'
   335  00108E  65                 	db	101	;'e'
   336  00108F  6D                 	db	109	;'m'
   337  001090  61                 	db	97	;'a'
   338  001091  69                 	db	105	;'i'
   339  001092  6E                 	db	110	;'n'
   340  001093  3A                 	db	58	;':'
   341  001094  25                 	db	37
   342  001095  64                 	db	100	;'d'
   343  001096  00                 	db	0
   344  001097                     STR_2:
   345  001097  42                 	db	66	;'B'
   346  001098  5F                 	db	95	;'_'
   347  001099  63                 	db	99	;'c'
   348  00109A  6F                 	db	111	;'o'
   349  00109B  75                 	db	117	;'u'
   350  00109C  6E                 	db	110	;'n'
   351  00109D  74                 	db	116	;'t'
   352  00109E  3A                 	db	58	;':'
   353  00109F  25                 	db	37
   354  0010A0  64                 	db	100	;'d'
   355  0010A1  00                 	db	0
   356  0010A2                     STR_12:
   357  0010A2  64                 	db	100	;'d'
   358  0010A3  6F                 	db	111	;'o'
   359  0010A4  6E                 	db	110	;'n'
   360  0010A5  65                 	db	101	;'e'
   361  0010A6  00                 	db	0
   362  0000                     
   363                           ; #config settings
   364  0010A7  00                 	db	0	; dummy byte at the end
   365  0000                     
   366                           	psect	cinit
   367  001966                     __pcinit:
   368                           	opt stack 0
   369  001966                     start_initialization:
   370                           	opt stack 0
   371  001966                     __initialization:
   372                           	opt stack 0
   373                           
   374                           ; Initialize objects allocated to COMRAM (23 bytes)
   375                           ; load TBLPTR registers with __pidataCOMRAM
   376  001966  0EE4               	movlw	low __pidataCOMRAM
   377  001968  6EF6               	movwf	tblptrl,c
   378  00196A  0E19               	movlw	high __pidataCOMRAM
   379  00196C  6EF7               	movwf	tblptrh,c
   380  00196E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   381  001970  6EF8               	movwf	tblptru,c
   382  001972  EE00  F03A         	lfsr	0,__pdataCOMRAM
   383  001976  EE10 F017          	lfsr	1,23
   384  00197A                     copy_data0:
   385  00197A  0009               	tblrd		*+
   386  00197C  CFF5 FFEE          	movff	tablat,postinc0
   387  001980  50E5               	movf	postdec1,w,c
   388  001982  50E1               	movf	fsr1l,w,c
   389  001984  E1FA               	bnz	copy_data0
   390                           
   391                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   392  001986  6A51               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   393                           
   394                           ; Clear objects allocated to COMRAM (30 bytes)
   395  001988  EE00  F001         	lfsr	0,__pbssCOMRAM
   396  00198C  0E1E               	movlw	30
   397  00198E                     clear_0:
   398  00198E  6AEE               	clrf	postinc0,c
   399  001990  06E8               	decf	wreg,f,c
   400  001992  E1FD               	bnz	clear_0
   401  001994                     end_of_initialization:
   402                           	opt stack 0
   403  001994                     __end_of__initialization:
   404                           	opt stack 0
   405  001994  0E00               	movlw	low (__Lmediumconst shr (0+16))
   406  001996  6EF8               	movwf	tblptru,c
   407  001998  0100               	movlb	0
   408  00199A  EF54  F008         	goto	_main	;jump to C main() function
   409                           tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           postinc0	equ	0xFEE
   414                           wreg	equ	0xFE8
   415                           postdec1	equ	0xFE5
   416                           fsr1l	equ	0xFE1
   417                           
   418                           	psect	bitbssCOMRAM
   419  000288                     __pbitbssCOMRAM:
   420                           	opt stack 0
   421  000288                     main@SEND:
   422                           	opt stack 0
   423  000288                     	ds	1
   424                           tblptru	equ	0xFF8
   425                           tblptrh	equ	0xFF7
   426                           tblptrl	equ	0xFF6
   427                           tablat	equ	0xFF5
   428                           postinc0	equ	0xFEE
   429                           wreg	equ	0xFE8
   430                           postdec1	equ	0xFE5
   431                           fsr1l	equ	0xFE1
   432                           
   433                           	psect	bssCOMRAM
   434  000001                     __pbssCOMRAM:
   435                           	opt stack 0
   436  000001                     _analog_result:
   437                           	opt stack 0
   438  000001                     	ds	2
   439  000003                     _W_spacingTime:
   440                           	opt stack 0
   441  000003                     	ds	2
   442  000005                     _W_remain:
   443                           	opt stack 0
   444  000005                     	ds	2
   445  000007                     _W_counter:
   446                           	opt stack 0
   447  000007                     	ds	2
   448  000009                     _S_spacingTime:
   449                           	opt stack 0
   450  000009                     	ds	2
   451  00000B                     _S_remain:
   452                           	opt stack 0
   453  00000B                     	ds	2
   454  00000D                     _S_counter:
   455                           	opt stack 0
   456  00000D                     	ds	2
   457  00000F                     _B_spacingTime:
   458                           	opt stack 0
   459  00000F                     	ds	2
   460  000011                     _B_remain:
   461                           	opt stack 0
   462  000011                     	ds	2
   463  000013                     _B_counter:
   464                           	opt stack 0
   465  000013                     	ds	2
   466  000015                     _N_spacingTime:
   467                           	opt stack 0
   468  000015                     	ds	2
   469  000017                     _N_remain:
   470                           	opt stack 0
   471  000017                     	ds	2
   472  000019                     _N_counter:
   473                           	opt stack 0
   474  000019                     	ds	2
   475  00001B                     lcd@LCDinterruptState:
   476                           	opt stack 0
   477  00001B                     	ds	1
   478  00001C                     _nuts_data:
   479                           	opt stack 0
   480  00001C                     	ds	1
   481  00001D                     _openHandle_data:
   482                           	opt stack 0
   483  00001D                     	ds	1
   484  00001E                     	ds	1
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           postdec1	equ	0xFE5
   492                           fsr1l	equ	0xFE1
   493                           
   494                           	psect	dataCOMRAM
   495  00003A                     __pdataCOMRAM:
   496                           	opt stack 0
   497  00003A                     _W_max:
   498                           	opt stack 0
   499  00003A                     	ds	2
   500  00003C                     _S_max:
   501                           	opt stack 0
   502  00003C                     	ds	2
   503  00003E                     _B_max:
   504                           	opt stack 0
   505  00003E                     	ds	2
   506  000040                     _N_max:
   507                           	opt stack 0
   508  000040                     	ds	2
   509  000042                     _close_handle:
   510                           	opt stack 0
   511  000042                     	ds	1
   512  000043                     _servo_ramp:
   513                           	opt stack 0
   514  000043                     	ds	1
   515  000044                     _motorStop_3:
   516                           	opt stack 0
   517  000044                     	ds	1
   518  000045                     _motorStart_3:
   519                           	opt stack 0
   520  000045                     	ds	1
   521  000046                     _motorStop_2:
   522                           	opt stack 0
   523  000046                     	ds	1
   524  000047                     _motorStart_2:
   525                           	opt stack 0
   526  000047                     	ds	1
   527  000048                     _motorStop_1:
   528                           	opt stack 0
   529  000048                     	ds	1
   530  000049                     _motorStart_1:
   531                           	opt stack 0
   532  000049                     	ds	1
   533  00004A                     _motorStop_0:
   534                           	opt stack 0
   535  00004A                     	ds	1
   536  00004B                     _motorStart_0:
   537                           	opt stack 0
   538  00004B                     	ds	1
   539  00004C                     _S_dispense:
   540                           	opt stack 0
   541  00004C                     	ds	1
   542  00004D                     _N_dispense:
   543                           	opt stack 0
   544  00004D                     	ds	1
   545  00004E                     _B_dispense:
   546                           	opt stack 0
   547  00004E                     	ds	1
   548  00004F                     _rotate_1compartment:
   549                           	opt stack 0
   550  00004F                     	ds	1
   551  000050                     _rotate_gear:
   552                           	opt stack 0
   553  000050                     	ds	1
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           postdec1	equ	0xFE5
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	cstackCOMRAM
   564  00001F                     __pcstackCOMRAM:
   565                           	opt stack 0
   566  00001F                     ??_I2C_Master_Wait:
   567  00001F                     ?_readADC:
   568                           	opt stack 0
   569  00001F                     ?___lwdiv:
   570                           	opt stack 0
   571  00001F                     ?___lldiv:
   572                           	opt stack 0
   573  00001F                     lcdNibble@temp:
   574                           	opt stack 0
   575  00001F                     ___lwdiv@dividend:
   576                           	opt stack 0
   577  00001F                     ___lldiv@dividend:
   578                           	opt stack 0
   579                           
   580                           ; 4 bytes @ 0x0
   581  00001F                     	ds	1
   582  000020                     lcdNibble@data:
   583                           	opt stack 0
   584  000020                     I2C_Master_Read@ackBit:
   585                           	opt stack 0
   586  000020                     I2C_Master_Write@byteToWrite:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x1
   590  000020                     	ds	1
   591  000021                     ??_readADC:
   592  000021                     lcdInst@data:
   593                           	opt stack 0
   594  000021                     putch@data:
   595                           	opt stack 0
   596  000021                     I2C_Master_Read@receivedByte:
   597                           	opt stack 0
   598  000021                     ___lwdiv@divisor:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x2
   602  000021                     	ds	1
   603  000022                     ??_initLCD:
   604  000022                     I2C_sendData@char_data:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x3
   608  000022                     	ds	1
   609  000023                     readADC@channel:
   610                           	opt stack 0
   611  000023                     ___lwdiv@quotient:
   612                           	opt stack 0
   613  000023                     ___lldiv@divisor:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x4
   617  000023                     	ds	2
   618  000025                     ___lwdiv@counter:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x6
   622  000025                     	ds	1
   623  000026                     ?___lwmod:
   624                           	opt stack 0
   625  000026                     ___lwmod@dividend:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x7
   629  000026                     	ds	1
   630  000027                     ___lldiv@quotient:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x8
   634  000027                     	ds	1
   635  000028                     ___lwmod@divisor:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x9
   639  000028                     	ds	2
   640  00002A                     ___lwmod@counter:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0xB
   644  00002A                     	ds	1
   645  00002B                     ?_printf:
   646                           	opt stack 0
   647  00002B                     ___lldiv@counter:
   648                           	opt stack 0
   649  00002B                     printf@f:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0xC
   653  00002B                     	ds	1
   654  00002C                     I2C_Master_Init@clockFreq:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0xD
   658  00002C                     	ds	3
   659  00002F                     ??_printf:
   660                           
   661                           ; 1 bytes @ 0x10
   662  00002F                     	ds	1
   663  000030                     ??_I2C_Master_Init:
   664  000030                     printf@ap:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x11
   668  000030                     	ds	2
   669  000032                     printf@flag:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x13
   673  000032                     	ds	1
   674  000033                     printf@prec:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x14
   678  000033                     	ds	1
   679  000034                     printf@val:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x15
   683  000034                     	ds	2
   684  000036                     printf@c:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x17
   688  000036                     	ds	1
   689  000037                     ??_main:
   690                           
   691                           ; 1 bytes @ 0x18
   692  000037                     	ds	2
   693  000039                     main@counter:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x1A
   697  000039                     	ds	1
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           postdec1	equ	0xFE5
   705                           fsr1l	equ	0xFE1
   706                           
   707 ;;
   708 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   709 ;;
   710 ;; *************** function _main *****************
   711 ;; Defined at:
   712 ;;		line 91 in file "main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;  mem             3    0        unsigned char [3]
   717 ;;  counter         1   26[COMRAM] unsigned char 
   718 ;;  data            1    0        unsigned char 
   719 ;;  keypress        1    0        unsigned char 
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   731 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   732 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   733 ;;Total ram usage:        3 bytes
   734 ;; Hardware stack levels required when called:    3
   735 ;; This function calls:
   736 ;;		_I2C_Master_Init
   737 ;;		_I2C_Master_Read
   738 ;;		_I2C_Master_Start
   739 ;;		_I2C_Master_Stop
   740 ;;		_I2C_Master_Write
   741 ;;		_I2C_sendData
   742 ;;		_initLCD
   743 ;;		_lcdInst
   744 ;;		_printf
   745 ;;		_readADC
   746 ;; This function is called by:
   747 ;;		Startup code after reset
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text0
   752  0010A8                     __ptext0:
   753                           	opt stack 0
   754  0010A8                     _main:
   755                           	opt stack 28
   756                           
   757                           ;main.c: 95: OSCCONbits.SCS1 = 0;
   758                           
   759                           ;incstack = 0
   760  0010A8  92D3               	bcf	4051,1,c	;volatile
   761                           
   762                           ;main.c: 97: OSCCONbits.SCS0 = 0;
   763  0010AA  90D3               	bcf	4051,0,c	;volatile
   764                           
   765                           ;main.c: 101: LATA = 0x00;
   766  0010AC  0E00               	movlw	0
   767  0010AE  6E89               	movwf	3977,c	;volatile
   768                           
   769                           ;main.c: 102: LATB = 0x00;
   770  0010B0  0E00               	movlw	0
   771  0010B2  6E8A               	movwf	3978,c	;volatile
   772                           
   773                           ;main.c: 103: LATC = 0x00;
   774  0010B4  0E00               	movlw	0
   775  0010B6  6E8B               	movwf	3979,c	;volatile
   776                           
   777                           ;main.c: 104: LATD = 0x00;
   778  0010B8  0E00               	movlw	0
   779  0010BA  6E8C               	movwf	3980,c	;volatile
   780                           
   781                           ;main.c: 105: LATE = 0x00;
   782  0010BC  0E00               	movlw	0
   783  0010BE  6E8D               	movwf	3981,c	;volatile
   784                           
   785                           ;main.c: 109: TRISA = 0xFF;
   786  0010C0  6892               	setf	3986,c	;volatile
   787                           
   788                           ;main.c: 110: TRISB = 0xFF;
   789  0010C2  6893               	setf	3987,c	;volatile
   790                           
   791                           ;main.c: 111: TRISC = 0b10000000;
   792  0010C4  0E80               	movlw	128
   793  0010C6  6E94               	movwf	3988,c	;volatile
   794                           
   795                           ;main.c: 115: TRISD = 0x00;
   796  0010C8  0E00               	movlw	0
   797  0010CA  6E95               	movwf	3989,c	;volatile
   798                           
   799                           ;main.c: 116: TRISE = 0x00;
   800  0010CC  0E00               	movlw	0
   801  0010CE  6E96               	movwf	3990,c	;volatile
   802                           
   803                           ;main.c: 119: ADCON0 = 0x00;
   804  0010D0  0E00               	movlw	0
   805  0010D2  6EC2               	movwf	4034,c	;volatile
   806                           
   807                           ;main.c: 120: ADCON1 = 0b00001111;
   808  0010D4  0E0F               	movlw	15
   809  0010D6  6EC1               	movwf	4033,c	;volatile
   810                           
   811                           ;main.c: 124: initLCD();
   812  0010D8  EC49  F00C         	call	_initLCD	;wreg free
   813                           
   814                           ;main.c: 127: I2C_Master_Init(100000);
   815  0010DC  0EA0               	movlw	160
   816  0010DE  6E2C               	movwf	I2C_Master_Init@clockFreq,c
   817  0010E0  0E86               	movlw	134
   818  0010E2  6E2D               	movwf	I2C_Master_Init@clockFreq+1,c
   819  0010E4  0E01               	movlw	1
   820  0010E6  6E2E               	movwf	I2C_Master_Init@clockFreq+2,c
   821  0010E8  0E00               	movlw	0
   822  0010EA  6E2F               	movwf	I2C_Master_Init@clockFreq+3,c
   823  0010EC  ECF2  F00B         	call	_I2C_Master_Init	;wreg free
   824                           
   825                           ;main.c: 128: I2C_Master_Start();
   826  0010F0  EC24  F00D         	call	_I2C_Master_Start	;wreg free
   827                           
   828                           ;main.c: 131: I2C_Master_Write(0b00010000);
   829  0010F4  0E00               	movlw	0
   830  0010F6  6E21               	movwf	I2C_Master_Write@byteToWrite+1,c
   831  0010F8  0E10               	movlw	16
   832  0010FA  6E20               	movwf	I2C_Master_Write@byteToWrite,c
   833  0010FC  EC1B  F00D         	call	_I2C_Master_Write	;wreg free
   834                           
   835                           ;main.c: 132: I2C_Master_Stop();
   836  001100  EC20  F00D         	call	_I2C_Master_Stop	;wreg free
   837                           
   838                           ;main.c: 135: unsigned char mem[3];
   839                           ;main.c: 136: unsigned char counter = 0;
   840  001104  0E00               	movlw	0
   841  001106  6E39               	movwf	main@counter,c
   842                           
   843                           ;main.c: 137: unsigned char keypress;
   844                           ;main.c: 138: unsigned char data;
   845                           ;main.c: 139: static bit SEND;
   846                           ;main.c: 140: SEND = 1;
   847  001108  8051               	bsf	main@SEND/(0+8),main@SEND& (0+7),c
   848                           
   849                           ;main.c: 143: I2C_sendData('1');
   850  00110A  0E31               	movlw	49
   851  00110C  ECE1  F00C         	call	_I2C_sendData
   852  001110                     l147:
   853                           
   854                           ;main.c: 147: I2C_Master_Start();
   855  001110  EC24  F00D         	call	_I2C_Master_Start	;wreg free
   856                           
   857                           ;main.c: 148: I2C_Master_Write(0b00010001);
   858  001114  0E00               	movlw	0
   859  001116  6E21               	movwf	I2C_Master_Write@byteToWrite+1,c
   860  001118  0E11               	movlw	17
   861  00111A  6E20               	movwf	I2C_Master_Write@byteToWrite,c
   862  00111C  EC1B  F00D         	call	_I2C_Master_Write	;wreg free
   863                           
   864                           ;main.c: 149: nuts_data = I2C_Master_Read(1);
   865  001120  0E01               	movlw	1
   866  001122  ECCF  F00C         	call	_I2C_Master_Read
   867  001126  6E1C               	movwf	_nuts_data,c
   868                           
   869                           ;main.c: 150: I2C_Master_Stop();
   870  001128  EC20  F00D         	call	_I2C_Master_Stop	;wreg free
   871                           
   872                           ;main.c: 151: if (nuts_data == '1'){
   873  00112C  0E31               	movlw	49
   874  00112E  181C               	xorwf	_nuts_data,w,c
   875  001130  A4D8               	btfss	status,2,c
   876  001132  D7EE               	goto	l147
   877                           
   878                           ;main.c: 152: _delay((unsigned long)((1000)*(40000000/4000.0)));
   879  001134  0E33               	movlw	51
   880  001136  6E38               	movwf	(??_main+1)& (0+255),c
   881  001138  0EBB               	movlw	187
   882  00113A  6E37               	movwf	??_main& (0+255),c
   883  00113C  0EE0               	movlw	224
   884  00113E                     u767:
   885  00113E  2EE8               	decfsz	wreg,f,c
   886  001140  D7FE               	bra	u767
   887  001142  2E37               	decfsz	??_main& (0+255),f,c
   888  001144  D7FC               	bra	u767
   889  001146  2E38               	decfsz	(??_main+1)& (0+255),f,c
   890  001148  D7FA               	bra	u767
   891                           
   892                           ;main.c: 154: I2C_sendData('1');
   893  00114A  0E31               	movlw	49
   894  00114C  ECE1  F00C         	call	_I2C_sendData
   895  001150  D7DF               	goto	l147
   896  001152                     
   897                           ;main.c: 184: I2C_sendData(motorStart_0);
   898  001152  504B               	movf	_motorStart_0,w,c
   899  001154  ECE1  F00C         	call	_I2C_sendData
   900                           
   901                           ;main.c: 185: if (B_counter >= B_max){
   902  001158  503E               	movf	_B_max,w,c
   903  00115A  5C13               	subwf	_B_counter,w,c
   904  00115C  5014               	movf	_B_counter+1,w,c
   905  00115E  0A80               	xorlw	128
   906  001160  6E37               	movwf	??_main& (0+255),c
   907  001162  503F               	movf	_B_max+1,w,c
   908  001164  0A80               	xorlw	128
   909  001166  5837               	subwfb	??_main& (0+255),w,c
   910  001168  A0D8               	btfss	status,0,c
   911  00116A  D003               	goto	l152
   912                           
   913                           ;main.c: 186: I2C_sendData(motorStop_0);
   914  00116C  504A               	movf	_motorStop_0,w,c
   915  00116E  ECE1  F00C         	call	_I2C_sendData
   916  001172                     l152:
   917                           
   918                           ;main.c: 188: }
   919                           ;main.c: 191: I2C_Master_Start();
   920  001172  EC24  F00D         	call	_I2C_Master_Start	;wreg free
   921                           
   922                           ;main.c: 192: I2C_Master_Write(0b00010001);
   923  001176  0E00               	movlw	0
   924  001178  6E21               	movwf	I2C_Master_Write@byteToWrite+1,c
   925  00117A  0E11               	movlw	17
   926  00117C  6E20               	movwf	I2C_Master_Write@byteToWrite,c
   927  00117E  EC1B  F00D         	call	_I2C_Master_Write	;wreg free
   928                           
   929                           ;main.c: 193: nuts_data = I2C_Master_Read(1);
   930  001182  0E01               	movlw	1
   931  001184  ECCF  F00C         	call	_I2C_Master_Read
   932  001188  6E1C               	movwf	_nuts_data,c
   933                           
   934                           ;main.c: 194: I2C_Master_Stop();
   935  00118A  EC20  F00D         	call	_I2C_Master_Stop	;wreg free
   936                           
   937                           ;main.c: 195: if (nuts_data == '2'){
   938  00118E  0E32               	movlw	50
   939  001190  181C               	xorwf	_nuts_data,w,c
   940  001192  A4D8               	btfss	status,2,c
   941  001194  D7DE               	goto	l151
   942                           
   943                           ;main.c: 196: B_counter ++;
   944  001196  4A13               	infsnz	_B_counter,f,c
   945  001198  2A14               	incf	_B_counter+1,f,c
   946                           
   947                           ;main.c: 197: initLCD();
   948  00119A  EC49  F00C         	call	_initLCD	;wreg free
   949                           
   950                           ;main.c: 198: printf("B_count:%d", B_counter);
   951  00119E  0E97               	movlw	low STR_2
   952  0011A0  6E2B               	movwf	printf@f,c
   953  0011A2  0E10               	movlw	high STR_2
   954  0011A4  6E2C               	movwf	printf@f+1,c
   955  0011A6  C013  F02D         	movff	_B_counter,?_printf+2
   956  0011AA  C014  F02E         	movff	_B_counter+1,?_printf+3
   957  0011AE  ECE3  F00A         	call	_printf	;wreg free
   958                           
   959                           ;main.c: 200: I2C_sendData(B_dispense);
   960  0011B2  504E               	movf	_B_dispense,w,c
   961  0011B4  ECE1  F00C         	call	_I2C_sendData
   962  0011B8  D7CC               	goto	l151
   963                           
   964                           ;main.c: 208: _delay((unsigned long)((1000)*(40000000/4000.0)));
   965                           
   966                           ;main.c: 207: printf("bolts dispensed");
   967                           
   968                           ;main.c: 205: initLCD();
   969                           
   970                           ;main.c: 201: }
   971                           ;main.c: 202: }
   972                           ;main.c: 203: B_counter = 0;
   973  0011BA  0E33               	movlw	51
   974  0011BC  6E38               	movwf	(??_main+1)& (0+255),c
   975  0011BE  0EBB               	movlw	187
   976  0011C0  6E37               	movwf	??_main& (0+255),c
   977  0011C2  0EE0               	movlw	224
   978  0011C4                     u777:
   979  0011C4  2EE8               	decfsz	wreg,f,c
   980  0011C6  D7FE               	bra	u777
   981  0011C8  2E37               	decfsz	??_main& (0+255),f,c
   982  0011CA  D7FC               	bra	u777
   983  0011CC  2E38               	decfsz	(??_main+1)& (0+255),f,c
   984  0011CE  D7FA               	bra	u777
   985                           
   986                           ;main.c: 209: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   987  0011D0  0E80               	movlw	128
   988  0011D2  EC08  F00D         	call	_lcdInst
   989  0011D6  0E41               	movlw	65
   990  0011D8  6E37               	movwf	??_main& (0+255),c
   991  0011DA  0EEE               	movlw	238
   992  0011DC                     u787:
   993  0011DC  2EE8               	decfsz	wreg,f,c
   994  0011DE  D7FE               	bra	u787
   995  0011E0  2E37               	decfsz	??_main& (0+255),f,c
   996  0011E2  D7FC               	bra	u787
   997  0011E4  D000               	nop2	
   998                           
   999                           ;main.c: 216: initLCD();
  1000  0011E6  EC49  F00C         	call	_initLCD	;wreg free
  1001                           
  1002                           ;main.c: 217: printf("N_counter:%d",N_counter);
  1003  0011EA  0E71               	movlw	low STR_4
  1004  0011EC  6E2B               	movwf	printf@f,c
  1005  0011EE  0E10               	movlw	high STR_4
  1006  0011F0  6E2C               	movwf	printf@f+1,c
  1007  0011F2  C019  F02D         	movff	_N_counter,?_printf+2
  1008  0011F6  C01A  F02E         	movff	_N_counter+1,?_printf+3
  1009  0011FA  ECE3  F00A         	call	_printf	;wreg free
  1010                           
  1011                           ;main.c: 218: I2C_sendData(N_dispense);
  1012  0011FE  504D               	movf	_N_dispense,w,c
  1013  001200  ECE1  F00C         	call	_I2C_sendData
  1014  001204                     
  1015                           ;main.c: 220: I2C_sendData(motorStart_1);
  1016  001204  5049               	movf	_motorStart_1,w,c
  1017  001206  ECE1  F00C         	call	_I2C_sendData
  1018                           
  1019                           ;main.c: 221: if (N_counter >= N_max){
  1020  00120A  5040               	movf	_N_max,w,c
  1021  00120C  5C19               	subwf	_N_counter,w,c
  1022  00120E  501A               	movf	_N_counter+1,w,c
  1023  001210  0A80               	xorlw	128
  1024  001212  6E37               	movwf	??_main& (0+255),c
  1025  001214  5041               	movf	_N_max+1,w,c
  1026  001216  0A80               	xorlw	128
  1027  001218  5837               	subwfb	??_main& (0+255),w,c
  1028  00121A  A0D8               	btfss	status,0,c
  1029  00121C  D004               	goto	l157
  1030                           
  1031                           ;main.c: 222: I2C_sendData(motorStop_1);
  1032  00121E  5048               	movf	_motorStop_1,w,c
  1033  001220  ECE1  F00C         	call	_I2C_sendData
  1034                           
  1035                           ;main.c: 223: break;
  1036  001224  D024               	goto	l158
  1037  001226                     l157:
  1038                           
  1039                           ;main.c: 224: }
  1040                           ;main.c: 227: I2C_Master_Start();
  1041  001226  EC24  F00D         	call	_I2C_Master_Start	;wreg free
  1042                           
  1043                           ;main.c: 228: I2C_Master_Write(0b00010001);
  1044  00122A  0E00               	movlw	0
  1045  00122C  6E21               	movwf	I2C_Master_Write@byteToWrite+1,c
  1046  00122E  0E11               	movlw	17
  1047  001230  6E20               	movwf	I2C_Master_Write@byteToWrite,c
  1048  001232  EC1B  F00D         	call	_I2C_Master_Write	;wreg free
  1049                           
  1050                           ;main.c: 229: nuts_data = I2C_Master_Read(1);
  1051  001236  0E01               	movlw	1
  1052  001238  ECCF  F00C         	call	_I2C_Master_Read
  1053  00123C  6E1C               	movwf	_nuts_data,c
  1054                           
  1055                           ;main.c: 230: I2C_Master_Stop();
  1056  00123E  EC20  F00D         	call	_I2C_Master_Stop	;wreg free
  1057                           
  1058                           ;main.c: 231: if (nuts_data == '3'){
  1059  001242  0E33               	movlw	51
  1060  001244  181C               	xorwf	_nuts_data,w,c
  1061  001246  A4D8               	btfss	status,2,c
  1062  001248  D7DD               	goto	l156
  1063                           
  1064                           ;main.c: 232: N_counter ++;
  1065  00124A  4A19               	infsnz	_N_counter,f,c
  1066  00124C  2A1A               	incf	_N_counter+1,f,c
  1067                           
  1068                           ;main.c: 234: initLCD();
  1069  00124E  EC49  F00C         	call	_initLCD	;wreg free
  1070                           
  1071                           ;main.c: 235: printf("%d", N_counter);
  1072  001252  0E31               	movlw	low (STR_15+15)
  1073  001254  6E2B               	movwf	printf@f,c
  1074  001256  0E10               	movlw	high (STR_15+15)
  1075  001258  6E2C               	movwf	printf@f+1,c
  1076  00125A  C019  F02D         	movff	_N_counter,?_printf+2
  1077  00125E  C01A  F02E         	movff	_N_counter+1,?_printf+3
  1078  001262  ECE3  F00A         	call	_printf	;wreg free
  1079                           
  1080                           ;main.c: 238: I2C_sendData(N_dispense);
  1081  001266  504D               	movf	_N_dispense,w,c
  1082  001268  ECE1  F00C         	call	_I2C_sendData
  1083  00126C  D7CB               	goto	l156
  1084  00126E                     l158:
  1085                           
  1086                           ;main.c: 240: }
  1087                           ;main.c: 241: }
  1088                           ;main.c: 242: N_counter = 0;
  1089  00126E  0E00               	movlw	0
  1090  001270  6E1A               	movwf	_N_counter+1,c
  1091  001272  0E00               	movlw	0
  1092  001274  6E19               	movwf	_N_counter,c
  1093                           
  1094                           ;main.c: 244: initLCD();
  1095  001276  EC49  F00C         	call	_initLCD	;wreg free
  1096                           
  1097                           ;main.c: 246: printf("nuts dispensed");
  1098  00127A  0E55               	movlw	low STR_6
  1099  00127C  6E2B               	movwf	printf@f,c
  1100  00127E  0E10               	movlw	high STR_6
  1101  001280  6E2C               	movwf	printf@f+1,c
  1102  001282  ECE3  F00A         	call	_printf	;wreg free
  1103                           
  1104                           ;main.c: 247: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1105  001286  0E33               	movlw	51
  1106  001288  6E38               	movwf	(??_main+1)& (0+255),c
  1107  00128A  0EBB               	movlw	187
  1108  00128C  6E37               	movwf	??_main& (0+255),c
  1109  00128E  0EE0               	movlw	224
  1110  001290                     u797:
  1111  001290  2EE8               	decfsz	wreg,f,c
  1112  001292  D7FE               	bra	u797
  1113  001294  2E37               	decfsz	??_main& (0+255),f,c
  1114  001296  D7FC               	bra	u797
  1115  001298  2E38               	decfsz	(??_main+1)& (0+255),f,c
  1116  00129A  D7FA               	bra	u797
  1117                           
  1118                           ;main.c: 248: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1119  00129C  0E80               	movlw	128
  1120  00129E  EC08  F00D         	call	_lcdInst
  1121  0012A2  0E41               	movlw	65
  1122  0012A4  6E37               	movwf	??_main& (0+255),c
  1123  0012A6  0EEE               	movlw	238
  1124  0012A8                     u807:
  1125  0012A8  2EE8               	decfsz	wreg,f,c
  1126  0012AA  D7FE               	bra	u807
  1127  0012AC  2E37               	decfsz	??_main& (0+255),f,c
  1128  0012AE  D7FC               	bra	u807
  1129  0012B0  D000               	nop2	
  1130                           
  1131                           ;main.c: 254: initLCD();
  1132  0012B2  EC49  F00C         	call	_initLCD	;wreg free
  1133                           
  1134                           ;main.c: 255: printf("S_counter:%d",S_counter);
  1135  0012B6  0E7E               	movlw	low STR_7
  1136  0012B8  6E2B               	movwf	printf@f,c
  1137  0012BA  0E10               	movlw	high STR_7
  1138  0012BC  6E2C               	movwf	printf@f+1,c
  1139  0012BE  C00D  F02D         	movff	_S_counter,?_printf+2
  1140  0012C2  C00E  F02E         	movff	_S_counter+1,?_printf+3
  1141  0012C6  ECE3  F00A         	call	_printf	;wreg free
  1142                           
  1143                           ;main.c: 256: I2C_sendData(S_dispense);
  1144  0012CA  504C               	movf	_S_dispense,w,c
  1145  0012CC  ECE1  F00C         	call	_I2C_sendData
  1146  0012D0                     
  1147                           ;main.c: 258: I2C_sendData(motorStart_2);
  1148  0012D0  5047               	movf	_motorStart_2,w,c
  1149  0012D2  ECE1  F00C         	call	_I2C_sendData
  1150                           
  1151                           ;main.c: 259: if (S_counter >= S_max){
  1152  0012D6  503C               	movf	_S_max,w,c
  1153  0012D8  5C0D               	subwf	_S_counter,w,c
  1154  0012DA  500E               	movf	_S_counter+1,w,c
  1155  0012DC  0A80               	xorlw	128
  1156  0012DE  6E37               	movwf	??_main& (0+255),c
  1157  0012E0  503D               	movf	_S_max+1,w,c
  1158  0012E2  0A80               	xorlw	128
  1159  0012E4  5837               	subwfb	??_main& (0+255),w,c
  1160  0012E6  A0D8               	btfss	status,0,c
  1161  0012E8  D004               	goto	l162
  1162                           
  1163                           ;main.c: 260: I2C_sendData(motorStop_2);
  1164  0012EA  5046               	movf	_motorStop_2,w,c
  1165  0012EC  ECE1  F00C         	call	_I2C_sendData
  1166                           
  1167                           ;main.c: 261: break;
  1168  0012F0  D024               	goto	l163
  1169  0012F2                     l162:
  1170                           
  1171                           ;main.c: 262: }
  1172                           ;main.c: 265: I2C_Master_Start();
  1173  0012F2  EC24  F00D         	call	_I2C_Master_Start	;wreg free
  1174                           
  1175                           ;main.c: 266: I2C_Master_Write(0b00010001);
  1176  0012F6  0E00               	movlw	0
  1177  0012F8  6E21               	movwf	I2C_Master_Write@byteToWrite+1,c
  1178  0012FA  0E11               	movlw	17
  1179  0012FC  6E20               	movwf	I2C_Master_Write@byteToWrite,c
  1180  0012FE  EC1B  F00D         	call	_I2C_Master_Write	;wreg free
  1181                           
  1182                           ;main.c: 267: nuts_data = I2C_Master_Read(1);
  1183  001302  0E01               	movlw	1
  1184  001304  ECCF  F00C         	call	_I2C_Master_Read
  1185  001308  6E1C               	movwf	_nuts_data,c
  1186                           
  1187                           ;main.c: 268: I2C_Master_Stop();
  1188  00130A  EC20  F00D         	call	_I2C_Master_Stop	;wreg free
  1189                           
  1190                           ;main.c: 269: if (nuts_data == '4'){
  1191  00130E  0E34               	movlw	52
  1192  001310  181C               	xorwf	_nuts_data,w,c
  1193  001312  A4D8               	btfss	status,2,c
  1194  001314  D7DD               	goto	l161
  1195                           
  1196                           ;main.c: 270: S_counter ++;
  1197  001316  4A0D               	infsnz	_S_counter,f,c
  1198  001318  2A0E               	incf	_S_counter+1,f,c
  1199                           
  1200                           ;main.c: 272: initLCD();
  1201  00131A  EC49  F00C         	call	_initLCD	;wreg free
  1202                           
  1203                           ;main.c: 273: printf("%d", S_counter);
  1204  00131E  0E31               	movlw	low (STR_15+15)
  1205  001320  6E2B               	movwf	printf@f,c
  1206  001322  0E10               	movlw	high (STR_15+15)
  1207  001324  6E2C               	movwf	printf@f+1,c
  1208  001326  C00D  F02D         	movff	_S_counter,?_printf+2
  1209  00132A  C00E  F02E         	movff	_S_counter+1,?_printf+3
  1210  00132E  ECE3  F00A         	call	_printf	;wreg free
  1211                           
  1212                           ;main.c: 276: I2C_sendData(S_dispense);
  1213  001332  504C               	movf	_S_dispense,w,c
  1214  001334  ECE1  F00C         	call	_I2C_sendData
  1215  001338  D7CB               	goto	l161
  1216  00133A                     l163:
  1217                           
  1218                           ;main.c: 278: }
  1219                           ;main.c: 279: }
  1220                           ;main.c: 280: S_counter = 0;
  1221  00133A  0E00               	movlw	0
  1222  00133C  6E0E               	movwf	_S_counter+1,c
  1223  00133E  0E00               	movlw	0
  1224  001340  6E0D               	movwf	_S_counter,c
  1225                           
  1226                           ;main.c: 282: initLCD();
  1227  001342  EC49  F00C         	call	_initLCD	;wreg free
  1228                           
  1229                           ;main.c: 284: printf("Spacer dispensed");
  1230  001346  0E34               	movlw	low STR_9
  1231  001348  6E2B               	movwf	printf@f,c
  1232  00134A  0E10               	movlw	high STR_9
  1233  00134C  6E2C               	movwf	printf@f+1,c
  1234  00134E  ECE3  F00A         	call	_printf	;wreg free
  1235                           
  1236                           ;main.c: 285: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1237  001352  0E33               	movlw	51
  1238  001354  6E38               	movwf	(??_main+1)& (0+255),c
  1239  001356  0EBB               	movlw	187
  1240  001358  6E37               	movwf	??_main& (0+255),c
  1241  00135A  0EE0               	movlw	224
  1242  00135C                     u817:
  1243  00135C  2EE8               	decfsz	wreg,f,c
  1244  00135E  D7FE               	bra	u817
  1245  001360  2E37               	decfsz	??_main& (0+255),f,c
  1246  001362  D7FC               	bra	u817
  1247  001364  2E38               	decfsz	(??_main+1)& (0+255),f,c
  1248  001366  D7FA               	bra	u817
  1249                           
  1250                           ;main.c: 286: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1251  001368  0E80               	movlw	128
  1252  00136A  EC08  F00D         	call	_lcdInst
  1253  00136E  0E41               	movlw	65
  1254  001370  6E37               	movwf	??_main& (0+255),c
  1255  001372  0EEE               	movlw	238
  1256  001374                     u827:
  1257  001374  2EE8               	decfsz	wreg,f,c
  1258  001376  D7FE               	bra	u827
  1259  001378  2E37               	decfsz	??_main& (0+255),f,c
  1260  00137A  D7FC               	bra	u827
  1261  00137C  D000               	nop2	
  1262                           
  1263                           ;main.c: 292: initLCD();
  1264  00137E  EC49  F00C         	call	_initLCD	;wreg free
  1265                           
  1266                           ;main.c: 293: printf("%d",W_counter);
  1267  001382  0E31               	movlw	low (STR_15+15)
  1268  001384  6E2B               	movwf	printf@f,c
  1269  001386  0E10               	movlw	high (STR_15+15)
  1270  001388  6E2C               	movwf	printf@f+1,c
  1271  00138A  C007  F02D         	movff	_W_counter,?_printf+2
  1272  00138E  C008  F02E         	movff	_W_counter+1,?_printf+3
  1273  001392  ECE3  F00A         	call	_printf	;wreg free
  1274                           
  1275                           ;main.c: 294: _delay((unsigned long)((100)*(40000000/4000.0)));
  1276  001396  0E06               	movlw	6
  1277  001398  6E38               	movwf	(??_main+1)& (0+255),c
  1278  00139A  0E13               	movlw	19
  1279  00139C  6E37               	movwf	??_main& (0+255),c
  1280  00139E  0EAE               	movlw	174
  1281  0013A0                     u837:
  1282  0013A0  2EE8               	decfsz	wreg,f,c
  1283  0013A2  D7FE               	bra	u837
  1284  0013A4  2E37               	decfsz	??_main& (0+255),f,c
  1285  0013A6  D7FC               	bra	u837
  1286  0013A8  2E38               	decfsz	(??_main+1)& (0+255),f,c
  1287  0013AA  D7FA               	bra	u837
  1288                           
  1289                           ;main.c: 295: I2C_sendData(motorStart_3);
  1290  0013AC  5045               	movf	_motorStart_3,w,c
  1291  0013AE  ECE1  F00C         	call	_I2C_sendData
  1292  0013B2                     l1709:
  1293                           
  1294                           ;main.c: 299: if (W_counter >= W_max){
  1295  0013B2  503A               	movf	_W_max,w,c
  1296  0013B4  5C07               	subwf	_W_counter,w,c
  1297  0013B6  5008               	movf	_W_counter+1,w,c
  1298  0013B8  0A80               	xorlw	128
  1299  0013BA  6E37               	movwf	??_main& (0+255),c
  1300  0013BC  503B               	movf	_W_max+1,w,c
  1301  0013BE  0A80               	xorlw	128
  1302  0013C0  5837               	subwfb	??_main& (0+255),w,c
  1303  0013C2  A0D8               	btfss	status,0,c
  1304  0013C4  D008               	goto	l167
  1305                           
  1306                           ;main.c: 300: W_counter = 0;
  1307  0013C6  0E00               	movlw	0
  1308  0013C8  6E08               	movwf	_W_counter+1,c
  1309  0013CA  0E00               	movlw	0
  1310  0013CC  6E07               	movwf	_W_counter,c
  1311                           
  1312                           ;main.c: 301: I2C_sendData(motorStop_3);
  1313  0013CE  5044               	movf	_motorStop_3,w,c
  1314  0013D0  ECE1  F00C         	call	_I2C_sendData
  1315                           
  1316                           ;main.c: 302: break;
  1317  0013D4  D018               	goto	l168
  1318  0013D6                     l167:
  1319                           
  1320                           ;main.c: 303: }
  1321                           ;main.c: 306: if (readADC(3)<=250 ){
  1322  0013D6  0E03               	movlw	3
  1323  0013D8  EC6F  F00C         	call	_readADC
  1324  0013DC  5020               	movf	?_readADC+1,w,c
  1325  0013DE  E1E9               	bnz	l1709
  1326  0013E0  0EFB               	movlw	251
  1327  0013E2  5C1F               	subwf	?_readADC,w,c
  1328  0013E4  B0D8               	btfsc	status,0,c
  1329  0013E6  D7E5               	goto	l166
  1330                           
  1331                           ;main.c: 308: W_counter ++;
  1332  0013E8  4A07               	infsnz	_W_counter,f,c
  1333  0013EA  2A08               	incf	_W_counter+1,f,c
  1334                           
  1335                           ;main.c: 309: initLCD();
  1336  0013EC  EC49  F00C         	call	_initLCD	;wreg free
  1337                           
  1338                           ;main.c: 310: printf("%d", W_counter);
  1339  0013F0  0E31               	movlw	low (STR_15+15)
  1340  0013F2  6E2B               	movwf	printf@f,c
  1341  0013F4  0E10               	movlw	high (STR_15+15)
  1342  0013F6  6E2C               	movwf	printf@f+1,c
  1343  0013F8  C007  F02D         	movff	_W_counter,?_printf+2
  1344  0013FC  C008  F02E         	movff	_W_counter+1,?_printf+3
  1345  001400  ECE3  F00A         	call	_printf	;wreg free
  1346  001404  D7D6               	goto	l166
  1347  001406                     l168:
  1348                           
  1349                           ;main.c: 312: }
  1350                           ;main.c: 315: }
  1351                           ;main.c: 318: initLCD();
  1352  001406  EC49  F00C         	call	_initLCD	;wreg free
  1353                           
  1354                           ;main.c: 319: printf("done");
  1355  00140A  0EA2               	movlw	low STR_12
  1356  00140C  6E2B               	movwf	printf@f,c
  1357  00140E  0E10               	movlw	high STR_12
  1358  001410  6E2C               	movwf	printf@f+1,c
  1359  001412  ECE3  F00A         	call	_printf	;wreg free
  1360                           
  1361                           ;main.c: 320: _delay((unsigned long)((800)*(40000000/4000.0)));
  1362  001416  0E29               	movlw	41
  1363  001418  6E38               	movwf	(??_main+1)& (0+255),c
  1364  00141A  0E96               	movlw	150
  1365  00141C  6E37               	movwf	??_main& (0+255),c
  1366  00141E  0E7F               	movlw	127
  1367  001420                     u847:
  1368  001420  2EE8               	decfsz	wreg,f,c
  1369  001422  D7FE               	bra	u847
  1370  001424  2E37               	decfsz	??_main& (0+255),f,c
  1371  001426  D7FC               	bra	u847
  1372  001428  2E38               	decfsz	(??_main+1)& (0+255),f,c
  1373  00142A  D7FA               	bra	u847
  1374  00142C  F000               	nop	
  1375                           
  1376                           ;main.c: 325: I2C_sendData(13);
  1377  00142E  0E0D               	movlw	13
  1378  001430  ECE1  F00C         	call	_I2C_sendData
  1379                           
  1380                           ;main.c: 326: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1381  001434  0E33               	movlw	51
  1382  001436  6E38               	movwf	(??_main+1)& (0+255),c
  1383  001438  0EBB               	movlw	187
  1384  00143A  6E37               	movwf	??_main& (0+255),c
  1385  00143C  0EE0               	movlw	224
  1386  00143E                     u857:
  1387  00143E  2EE8               	decfsz	wreg,f,c
  1388  001440  D7FE               	bra	u857
  1389  001442  2E37               	decfsz	??_main& (0+255),f,c
  1390  001444  D7FC               	bra	u857
  1391  001446  2E38               	decfsz	(??_main+1)& (0+255),f,c
  1392  001448  D7FA               	bra	u857
  1393                           
  1394                           ;main.c: 331: initLCD();
  1395  00144A  EC49  F00C         	call	_initLCD	;wreg free
  1396                           
  1397                           ;main.c: 332: printf("B_remain:%d",B_remain);
  1398  00144E  0E8B               	movlw	low STR_13
  1399  001450  6E2B               	movwf	printf@f,c
  1400  001452  0E10               	movlw	high STR_13
  1401  001454  6E2C               	movwf	printf@f+1,c
  1402  001456  C011  F02D         	movff	_B_remain,?_printf+2
  1403  00145A  C012  F02E         	movff	_B_remain+1,?_printf+3
  1404  00145E  ECE3  F00A         	call	_printf	;wreg free
  1405                           
  1406                           ;main.c: 334: I2C_sendData(B_dispense);
  1407  001462  504E               	movf	_B_dispense,w,c
  1408  001464  ECE1  F00C         	call	_I2C_sendData
  1409  001468                     l171:
  1410                           
  1411                           ;main.c: 336: I2C_sendData(motorStart_0);
  1412  001468  504B               	movf	_motorStart_0,w,c
  1413  00146A  ECE1  F00C         	call	_I2C_sendData
  1414                           
  1415                           ;main.c: 337: if (B_spacingTime >= 30000){
  1416  00146E  BE10               	btfsc	_B_spacingTime+1,7,c
  1417  001470  D00A               	goto	l172
  1418  001472  0E30               	movlw	48
  1419  001474  5C0F               	subwf	_B_spacingTime,w,c
  1420  001476  0E75               	movlw	117
  1421  001478  5810               	subwfb	_B_spacingTime+1,w,c
  1422  00147A  A0D8               	btfss	status,0,c
  1423  00147C  D004               	goto	l172
  1424                           
  1425                           ;main.c: 338: I2C_sendData(motorStop_0);
  1426  00147E  504A               	movf	_motorStop_0,w,c
  1427  001480  ECE1  F00C         	call	_I2C_sendData
  1428                           
  1429                           ;main.c: 339: break;
  1430  001484  D024               	goto	l173
  1431  001486                     l172:
  1432                           
  1433                           ;main.c: 340: }
  1434                           ;main.c: 343: I2C_Master_Start();
  1435  001486  EC24  F00D         	call	_I2C_Master_Start	;wreg free
  1436                           
  1437                           ;main.c: 344: I2C_Master_Write(0b00010001);
  1438  00148A  0E00               	movlw	0
  1439  00148C  6E21               	movwf	I2C_Master_Write@byteToWrite+1,c
  1440  00148E  0E11               	movlw	17
  1441  001490  6E20               	movwf	I2C_Master_Write@byteToWrite,c
  1442  001492  EC1B  F00D         	call	_I2C_Master_Write	;wreg free
  1443                           
  1444                           ;main.c: 345: nuts_data = I2C_Master_Read(1);
  1445  001496  0E01               	movlw	1
  1446  001498  ECCF  F00C         	call	_I2C_Master_Read
  1447  00149C  6E1C               	movwf	_nuts_data,c
  1448                           
  1449                           ;main.c: 346: I2C_Master_Stop();
  1450  00149E  EC20  F00D         	call	_I2C_Master_Stop	;wreg free
  1451                           
  1452                           ;main.c: 347: if (nuts_data == '2'){
  1453  0014A2  0E32               	movlw	50
  1454  0014A4  181C               	xorwf	_nuts_data,w,c
  1455  0014A6  A4D8               	btfss	status,2,c
  1456  0014A8  D7DF               	goto	l171
  1457                           
  1458                           ;main.c: 348: B_remain ++;
  1459  0014AA  4A11               	infsnz	_B_remain,f,c
  1460  0014AC  2A12               	incf	_B_remain+1,f,c
  1461                           
  1462                           ;main.c: 350: initLCD();
  1463  0014AE  EC49  F00C         	call	_initLCD	;wreg free
  1464                           
  1465                           ;main.c: 351: printf("B_remain:%d", B_remain);
  1466  0014B2  0E8B               	movlw	low STR_13
  1467  0014B4  6E2B               	movwf	printf@f,c
  1468  0014B6  0E10               	movlw	high STR_13
  1469  0014B8  6E2C               	movwf	printf@f+1,c
  1470  0014BA  C011  F02D         	movff	_B_remain,?_printf+2
  1471  0014BE  C012  F02E         	movff	_B_remain+1,?_printf+3
  1472  0014C2  ECE3  F00A         	call	_printf	;wreg free
  1473                           
  1474                           ;main.c: 354: I2C_sendData(B_dispense);
  1475  0014C6  504E               	movf	_B_dispense,w,c
  1476  0014C8  ECE1  F00C         	call	_I2C_sendData
  1477  0014CC  D7CD               	goto	l171
  1478  0014CE                     l173:
  1479                           
  1480                           ;main.c: 356: }
  1481                           ;main.c: 357: }
  1482                           ;main.c: 360: initLCD();
  1483  0014CE  EC49  F00C         	call	_initLCD	;wreg free
  1484                           
  1485                           ;main.c: 362: printf("bolts remained:%d",B_remain);
  1486  0014D2  0E22               	movlw	low STR_15
  1487  0014D4  6E2B               	movwf	printf@f,c
  1488  0014D6  0E10               	movlw	high STR_15
  1489  0014D8  6E2C               	movwf	printf@f+1,c
  1490  0014DA  C011  F02D         	movff	_B_remain,?_printf+2
  1491  0014DE  C012  F02E         	movff	_B_remain+1,?_printf+3
  1492  0014E2  ECE3  F00A         	call	_printf	;wreg free
  1493                           
  1494                           ;main.c: 363: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1495  0014E6  0E33               	movlw	51
  1496  0014E8  6E38               	movwf	(??_main+1)& (0+255),c
  1497  0014EA  0EBB               	movlw	187
  1498  0014EC  6E37               	movwf	??_main& (0+255),c
  1499  0014EE  0EE0               	movlw	224
  1500  0014F0                     u867:
  1501  0014F0  2EE8               	decfsz	wreg,f,c
  1502  0014F2  D7FE               	bra	u867
  1503  0014F4  2E37               	decfsz	??_main& (0+255),f,c
  1504  0014F6  D7FC               	bra	u867
  1505  0014F8  2E38               	decfsz	(??_main+1)& (0+255),f,c
  1506  0014FA  D7FA               	bra	u867
  1507                           
  1508                           ;main.c: 364: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1509  0014FC  0E80               	movlw	128
  1510  0014FE  EC08  F00D         	call	_lcdInst
  1511  001502  0E41               	movlw	65
  1512  001504  6E37               	movwf	??_main& (0+255),c
  1513  001506  0EEE               	movlw	238
  1514  001508                     u877:
  1515  001508  2EE8               	decfsz	wreg,f,c
  1516  00150A  D7FE               	bra	u877
  1517  00150C  2E37               	decfsz	??_main& (0+255),f,c
  1518  00150E  D7FC               	bra	u877
  1519  001510  D000               	nop2	
  1520                           
  1521                           ;main.c: 369: initLCD();
  1522  001512  EC49  F00C         	call	_initLCD	;wreg free
  1523                           
  1524                           ;main.c: 370: I2C_sendData(motorStart_3);
  1525  001516  5045               	movf	_motorStart_3,w,c
  1526  001518  ECE1  F00C         	call	_I2C_sendData
  1527                           
  1528                           ;main.c: 372: W_spacingTime = 0;
  1529  00151C  0E00               	movlw	0
  1530  00151E  6E04               	movwf	_W_spacingTime+1,c
  1531  001520  0E00               	movlw	0
  1532  001522  6E03               	movwf	_W_spacingTime,c
  1533                           
  1534                           ;main.c: 373: initLCD();
  1535  001524  EC49  F00C         	call	_initLCD	;wreg free
  1536                           
  1537                           ;main.c: 374: printf("%d", W_remain);
  1538  001528  0E31               	movlw	low (STR_15+15)
  1539  00152A  6E2B               	movwf	printf@f,c
  1540  00152C  0E10               	movlw	high (STR_15+15)
  1541  00152E  6E2C               	movwf	printf@f+1,c
  1542  001530  C005  F02D         	movff	_W_remain,?_printf+2
  1543  001534  C006  F02E         	movff	_W_remain+1,?_printf+3
  1544  001538  ECE3  F00A         	call	_printf	;wreg free
  1545  00153C                     
  1546                           ;main.c: 377: if (W_spacingTime >= 30000){
  1547  00153C  BE04               	btfsc	_W_spacingTime+1,7,c
  1548  00153E  D00B               	goto	l177
  1549  001540  0E30               	movlw	48
  1550  001542  5C03               	subwf	_W_spacingTime,w,c
  1551  001544  0E75               	movlw	117
  1552  001546  5804               	subwfb	_W_spacingTime+1,w,c
  1553  001548  A0D8               	btfss	status,0,c
  1554  00154A  D005               	goto	l177
  1555                           
  1556                           ;main.c: 378: I2C_sendData(motorStop_3);
  1557  00154C  5044               	movf	_motorStop_3,w,c
  1558  00154E  ECE1  F00C         	call	_I2C_sendData
  1559                           
  1560                           ;main.c: 380: break;
  1561  001552  EF00  F000         	goto	start
  1562  001556                     l177:
  1563                           
  1564                           ;main.c: 381: }
  1565                           ;main.c: 383: if (readADC(3)<=250 ){
  1566  001556  0E03               	movlw	3
  1567  001558  EC6F  F00C         	call	_readADC
  1568  00155C  5020               	movf	?_readADC+1,w,c
  1569  00155E  E116               	bnz	l1787
  1570  001560  0EFB               	movlw	251
  1571  001562  5C1F               	subwf	?_readADC,w,c
  1572  001564  B0D8               	btfsc	status,0,c
  1573  001566  D012               	goto	l179
  1574                           
  1575                           ;main.c: 385: W_remain ++;
  1576  001568  4A05               	infsnz	_W_remain,f,c
  1577  00156A  2A06               	incf	_W_remain+1,f,c
  1578                           
  1579                           ;main.c: 386: initLCD();
  1580  00156C  EC49  F00C         	call	_initLCD	;wreg free
  1581                           
  1582                           ;main.c: 387: printf("%d", W_remain);
  1583  001570  0E31               	movlw	low (STR_15+15)
  1584  001572  6E2B               	movwf	printf@f,c
  1585  001574  0E10               	movlw	high (STR_15+15)
  1586  001576  6E2C               	movwf	printf@f+1,c
  1587  001578  C005  F02D         	movff	_W_remain,?_printf+2
  1588  00157C  C006  F02E         	movff	_W_remain+1,?_printf+3
  1589  001580  ECE3  F00A         	call	_printf	;wreg free
  1590                           
  1591                           ;main.c: 389: W_spacingTime = 0;
  1592  001584  0E00               	movlw	0
  1593  001586  6E04               	movwf	_W_spacingTime+1,c
  1594  001588  0E00               	movlw	0
  1595  00158A  6E03               	movwf	_W_spacingTime,c
  1596  00158C                     l179:
  1597  00158C                     l1787:
  1598                           
  1599                           ;main.c: 391: }
  1600                           ;main.c: 395: lcdInst(0xC0);;
  1601  00158C  0EC0               	movlw	192
  1602  00158E  EC08  F00D         	call	_lcdInst
  1603                           
  1604                           ;main.c: 396: printf("%d",W_spacingTime);
  1605  001592  0E31               	movlw	low (STR_15+15)
  1606  001594  6E2B               	movwf	printf@f,c
  1607  001596  0E10               	movlw	high (STR_15+15)
  1608  001598  6E2C               	movwf	printf@f+1,c
  1609  00159A  C003  F02D         	movff	_W_spacingTime,?_printf+2
  1610  00159E  C004  F02E         	movff	_W_spacingTime+1,?_printf+3
  1611  0015A2  ECE3  F00A         	call	_printf	;wreg free
  1612                           
  1613                           ;main.c: 398: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1614  0015A6  0E80               	movlw	128
  1615  0015A8  EC08  F00D         	call	_lcdInst
  1616  0015AC  0E41               	movlw	65
  1617  0015AE  6E37               	movwf	??_main& (0+255),c
  1618  0015B0  0EEE               	movlw	238
  1619  0015B2                     u887:
  1620  0015B2  2EE8               	decfsz	wreg,f,c
  1621  0015B4  D7FE               	bra	u887
  1622  0015B6  2E37               	decfsz	??_main& (0+255),f,c
  1623  0015B8  D7FC               	bra	u887
  1624  0015BA  D000               	nop2	
  1625                           
  1626                           ;main.c: 399: W_spacingTime +=200;
  1627  0015BC  0EC8               	movlw	200
  1628  0015BE  2603               	addwf	_W_spacingTime,f,c
  1629  0015C0  0E00               	movlw	0
  1630  0015C2  2204               	addwfc	_W_spacingTime+1,f,c
  1631  0015C4  D7BB               	goto	l176
  1632  0015C6                     __end_of_main:
  1633                           	opt stack 0
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           fsr1l	equ	0xFE1
  1642                           status	equ	0xFD8
  1643                           
  1644 ;; *************** function _readADC *****************
  1645 ;; Defined at:
  1646 ;;		line 470 in file "main.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  channel         1    wreg     unsigned char 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  channel         1    4[COMRAM] unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2    0[COMRAM] unsigned short 
  1653 ;; Registers used:
  1654 ;;		wreg, status,2, status,0
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1660 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1662 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;Total ram usage:        5 bytes
  1665 ;; Hardware stack levels used:    1
  1666 ;; This function calls:
  1667 ;;		Nothing
  1668 ;; This function is called by:
  1669 ;;		_main
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           	psect	text1
  1674  0018DE                     __ptext1:
  1675                           	opt stack 0
  1676  0018DE                     _readADC:
  1677                           	opt stack 30
  1678                           
  1679                           ;incstack = 0
  1680                           ;readADC@channel stored from wreg
  1681  0018DE  6E23               	movwf	readADC@channel,c
  1682                           
  1683                           ;main.c: 479: ADCON0 = (channel & 0x0F) << 2;
  1684  0018E0  C023  F021         	movff	readADC@channel,??_readADC
  1685  0018E4  0E0F               	movlw	15
  1686  0018E6  1621               	andwf	??_readADC,f,c
  1687  0018E8  90D8               	bcf	status,0,c
  1688  0018EA  3621               	rlcf	??_readADC,f,c
  1689  0018EC  90D8               	bcf	status,0,c
  1690  0018EE  3421               	rlcf	??_readADC,w,c
  1691  0018F0  6EC2               	movwf	4034,c	;volatile
  1692                           
  1693                           ;main.c: 480: ADON = 1;
  1694  0018F2  80C2               	bsf	4034,0,c	;volatile
  1695                           
  1696                           ;main.c: 481: ADCON0bits.GO = 1;
  1697  0018F4  82C2               	bsf	4034,1,c	;volatile
  1698  0018F6  B2C2               	btfsc	4034,1,c	;volatile
  1699  0018F8  D7FE               	goto	l188
  1700                           
  1701                           ;main.c: 483: analog_result = ADRESL + (ADRESH*256);
  1702  0018FA  50C4               	movf	4036,w,c	;volatile
  1703  0018FC  6E22               	movwf	(??_readADC+1)& (0+255),c
  1704  0018FE  6A21               	clrf	??_readADC& (0+255),c
  1705  001900  50C3               	movf	4035,w,c	;volatile
  1706  001902  2421               	addwf	??_readADC,w,c
  1707  001904  6E01               	movwf	_analog_result,c
  1708  001906  0E00               	movlw	0
  1709  001908  2022               	addwfc	??_readADC+1,w,c
  1710  00190A  6E02               	movwf	_analog_result+1,c
  1711                           
  1712                           ;main.c: 486: return (ADRESH << 8) | ADRESL;
  1713  00190C  50C3               	movf	4035,w,c	;volatile
  1714  00190E  CFC4 F021          	movff	4036,??_readADC	;volatile
  1715  001912  6A22               	clrf	(??_readADC+1)& (0+255),c
  1716  001914  C021  F022         	movff	??_readADC,??_readADC+1
  1717  001918  6A21               	clrf	??_readADC,c
  1718  00191A  1021               	iorwf	??_readADC,w,c
  1719  00191C  6E1F               	movwf	?_readADC,c
  1720  00191E  5022               	movf	??_readADC+1,w,c
  1721  001920  6E20               	movwf	?_readADC+1,c
  1722  001922  0012               	return	
  1723  001924                     __end_of_readADC:
  1724                           	opt stack 0
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           postinc0	equ	0xFEE
  1730                           wreg	equ	0xFE8
  1731                           postdec1	equ	0xFE5
  1732                           fsr1l	equ	0xFE1
  1733                           status	equ	0xFD8
  1734                           
  1735 ;; *************** function _printf *****************
  1736 ;; Defined at:
  1737 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1740 ;;		 -> STR_18(3), STR_17(3), STR_16(3), STR_15(18), 
  1741 ;;		 -> STR_14(12), STR_13(12), STR_12(5), STR_11(3), 
  1742 ;;		 -> STR_10(3), STR_9(17), STR_8(3), STR_7(13), 
  1743 ;;		 -> STR_6(15), STR_5(3), STR_4(13), STR_3(16), 
  1744 ;;		 -> STR_2(11), STR_1(13), 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  tmpval          4    0        struct .
  1747 ;;  cp              3    0        PTR const unsigned char 
  1748 ;;  val             2   21[COMRAM] unsigned int 
  1749 ;;  ap              2   17[COMRAM] PTR void [1]
  1750 ;;		 -> ?_printf(2), 
  1751 ;;  len             2    0        unsigned int 
  1752 ;;  c               1   23[COMRAM] char 
  1753 ;;  prec            1   20[COMRAM] char 
  1754 ;;  flag            1   19[COMRAM] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  2   12[COMRAM] int 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1764 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1765 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1767 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1768 ;;Total ram usage:       12 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    2
  1771 ;; This function calls:
  1772 ;;		___lwdiv
  1773 ;;		___lwmod
  1774 ;;		_putch
  1775 ;; This function is called by:
  1776 ;;		_main
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text2
  1781  0015C6                     __ptext2:
  1782                           	opt stack 0
  1783  0015C6                     _printf:
  1784                           	opt stack 28
  1785                           
  1786                           ;doprnt.c: 466: va_list ap;
  1787                           ;doprnt.c: 499: signed char c;
  1788                           ;doprnt.c: 506: signed char prec;
  1789                           ;doprnt.c: 508: unsigned char flag;
  1790                           ;doprnt.c: 523: union {
  1791                           ;doprnt.c: 524: unsigned long vd;
  1792                           ;doprnt.c: 525: double integ;
  1793                           ;doprnt.c: 526: } tmpval;
  1794                           ;doprnt.c: 528: unsigned int val;
  1795                           ;doprnt.c: 529: unsigned len;
  1796                           ;doprnt.c: 530: const char * cp;
  1797                           ;doprnt.c: 533: *ap = __va_start();
  1798                           
  1799                           ;incstack = 0
  1800  0015C6  0E2D               	movlw	low (?_printf+2)
  1801  0015C8  6E30               	movwf	printf@ap,c
  1802  0015CA  0E00               	movlw	high (?_printf+2)
  1803  0015CC  6E31               	movwf	printf@ap+1,c
  1804                           
  1805                           ;doprnt.c: 536: while(c = *f++) {
  1806  0015CE  D07D               	goto	u600
  1807  0015D0                     
  1808                           ;doprnt.c: 538: if(c != '%')
  1809  0015D0  0E25               	movlw	37
  1810  0015D2  1836               	xorwf	printf@c,w,c
  1811  0015D4  B4D8               	btfsc	status,2,c
  1812  0015D6  D004               	goto	l298
  1813                           
  1814                           ;doprnt.c: 540: {
  1815                           ;doprnt.c: 541: (putch(c) );
  1816  0015D8  5036               	movf	printf@c,w,c
  1817  0015DA  ECFE  F00C         	call	_putch
  1818                           
  1819                           ;doprnt.c: 542: continue;
  1820  0015DE  D075               	goto	u600
  1821  0015E0                     l298:
  1822                           
  1823                           ;doprnt.c: 543: }
  1824                           ;doprnt.c: 548: flag = 0;
  1825  0015E0  0E00               	movlw	0
  1826  0015E2  6E32               	movwf	printf@flag,c
  1827                           
  1828                           ;doprnt.c: 822: }
  1829                           
  1830                           ;doprnt.c: 813: continue;
  1831                           
  1832                           ;doprnt.c: 802: default:
  1833                           
  1834                           ;doprnt.c: 698: case 'i':
  1835                           ;doprnt.c: 699: break;
  1836                           
  1837                           ;doprnt.c: 697: case 'd':
  1838                           
  1839                           ;doprnt.c: 638: goto alldone;
  1840                           
  1841                           ;doprnt.c: 637: case 0:
  1842                           
  1843                           ;doprnt.c: 635: switch(c = *f++) {
  1844  0015E4  C02B  FFF6         	movff	printf@f,tblptrl
  1845  0015E8  C02C  FFF7         	movff	printf@f+1,tblptrh
  1846  0015EC  4A2B               	infsnz	printf@f,f,c
  1847  0015EE  2A2C               	incf	printf@f+1,f,c
  1848  0015F0                     	if	0	;tblptru may be non-zero
  1849  0015F0                     	endif
  1850  0015F0                     	if	0	;tblptru may be non-zero
  1851  0015F0                     	endif
  1852  0015F0  0008               	tblrd		*
  1853  0015F2  CFF5 F036          	movff	tablat,printf@c
  1854  0015F6  5036               	movf	printf@c,w,c
  1855                           
  1856                           ; Switch size 1, requested type "space"
  1857                           ; Number of cases is 3, Range of values is 0 to 105
  1858                           ; switch strategies available:
  1859                           ; Name         Instructions Cycles
  1860                           ; simple_byte           10     6 (average)
  1861                           ;	Chosen strategy is simple_byte
  1862  0015F8  0A00               	xorlw	0	; case 0
  1863  0015FA  B4D8               	btfsc	status,2,c
  1864  0015FC  0012               	return	
  1865  0015FE  0A64               	xorlw	100	; case 100
  1866  001600  B4D8               	btfsc	status,2,c
  1867  001602  D003               	goto	l304
  1868  001604  0A0D               	xorlw	13	; case 105
  1869  001606  A4D8               	btfss	status,2,c
  1870  001608  D060               	goto	u600
  1871  00160A                     l304:
  1872                           
  1873                           ;doprnt.c: 1253: {
  1874                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1875  00160A  C030  FFD9         	movff	printf@ap,fsr2l
  1876  00160E  C031  FFDA         	movff	printf@ap+1,fsr2h
  1877  001612  CFDE F034          	movff	postinc2,printf@val
  1878  001616  CFDD F035          	movff	postdec2,printf@val+1
  1879  00161A  0E02               	movlw	2
  1880  00161C  2630               	addwf	printf@ap,f,c
  1881  00161E  0E00               	movlw	0
  1882  001620  2231               	addwfc	printf@ap+1,f,c
  1883                           
  1884                           ;doprnt.c: 1261: if((int)val < 0) {
  1885  001622  AE35               	btfss	printf@val+1,7,c
  1886  001624  D006               	goto	l306
  1887                           
  1888                           ;doprnt.c: 1262: flag |= 0x03;
  1889  001626  0E03               	movlw	3
  1890  001628  1232               	iorwf	printf@flag,f,c
  1891                           
  1892                           ;doprnt.c: 1263: val = -val;
  1893  00162A  6C34               	negf	printf@val,c
  1894  00162C  1E35               	comf	printf@val+1,f,c
  1895  00162E  B0D8               	btfsc	status,0,c
  1896  001630  2A35               	incf	printf@val+1,f,c
  1897  001632                     l306:
  1898                           
  1899                           ;doprnt.c: 1264: }
  1900                           ;doprnt.c: 1266: }
  1901                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1902  001632  0E01               	movlw	1
  1903  001634  6E36               	movwf	printf@c,c
  1904  001636                     l1531:
  1905  001636  0E05               	movlw	5
  1906  001638  1836               	xorwf	printf@c,w,c
  1907  00163A  B4D8               	btfsc	status,2,c
  1908  00163C  D012               	goto	u580
  1909                           
  1910                           ;doprnt.c: 1306: if(val < dpowers[c])
  1911  00163E  5036               	movf	printf@c,w,c
  1912  001640  0D02               	mullw	2
  1913  001642  0E12               	movlw	low _dpowers
  1914  001644  24F3               	addwf	prodl,w,c
  1915  001646  6EF6               	movwf	tblptrl,c
  1916  001648  0E10               	movlw	high _dpowers
  1917  00164A  20F4               	addwfc	prodh,w,c
  1918  00164C  6EF7               	movwf	tblptrh,c
  1919  00164E                     	if	0	;There are less than 3 active tblptr bytes
  1920  00164E                     	endif
  1921  00164E  0009               	tblrd		*+
  1922  001650  50F5               	movf	tablat,w,c
  1923  001652  5C34               	subwf	printf@val,w,c
  1924  001654  0009               	tblrd		*+
  1925  001656  50F5               	movf	tablat,w,c
  1926  001658  5835               	subwfb	printf@val+1,w,c
  1927  00165A  A0D8               	btfss	status,0,c
  1928  00165C  D002               	goto	u580
  1929                           
  1930                           ;doprnt.c: 1307: break;
  1931  00165E  2A36               	incf	printf@c,f,c
  1932  001660  D7EA               	goto	l1531
  1933  001662                     u580:
  1934                           
  1935                           ;doprnt.c: 1422: {
  1936                           ;doprnt.c: 1438: if(flag & 0x03)
  1937  001662  C032  F02F         	movff	printf@flag,??_printf
  1938  001666  0E03               	movlw	3
  1939  001668  162F               	andwf	??_printf,f,c
  1940  00166A  B4D8               	btfsc	status,2,c
  1941  00166C  D003               	goto	l310
  1942                           
  1943                           ;doprnt.c: 1439: (putch('-') );
  1944  00166E  0E2D               	movlw	45
  1945  001670  ECFE  F00C         	call	_putch
  1946  001674                     l310:
  1947                           
  1948                           ;doprnt.c: 1469: }
  1949                           ;doprnt.c: 1472: prec = c;
  1950  001674  C036  F033         	movff	printf@c,printf@prec
  1951                           
  1952                           ;doprnt.c: 1474: while(prec--) {
  1953  001678  D024               	goto	l311
  1954  00167A                     
  1955                           ;doprnt.c: 1478: {
  1956                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1957  00167A  5033               	movf	printf@prec,w,c
  1958  00167C  0D02               	mullw	2
  1959  00167E  0E12               	movlw	low _dpowers
  1960  001680  24F3               	addwf	prodl,w,c
  1961  001682  6EF6               	movwf	tblptrl,c
  1962  001684  0E10               	movlw	high _dpowers
  1963  001686  20F4               	addwfc	prodh,w,c
  1964  001688  6EF7               	movwf	tblptrh,c
  1965  00168A                     	if	0	;There are less than 3 active tblptr bytes
  1966  00168A                     	endif
  1967  00168A  0009               	tblrd		*+
  1968  00168C  CFF5 F021          	movff	tablat,___lwdiv@divisor
  1969  001690  000A               	tblrd		*-
  1970  001692  CFF5 F022          	movff	tablat,___lwdiv@divisor+1
  1971  001696  C034  F01F         	movff	printf@val,___lwdiv@dividend
  1972  00169A  C035  F020         	movff	printf@val+1,___lwdiv@dividend+1
  1973  00169E  EC20  F00C         	call	___lwdiv	;wreg free
  1974  0016A2  C01F  F026         	movff	?___lwdiv,___lwmod@dividend
  1975  0016A6  C020  F027         	movff	?___lwdiv+1,___lwmod@dividend+1
  1976  0016AA  0E00               	movlw	0
  1977  0016AC  6E29               	movwf	___lwmod@divisor+1,c
  1978  0016AE  0E0A               	movlw	10
  1979  0016B0  6E28               	movwf	___lwmod@divisor,c
  1980  0016B2  EC92  F00C         	call	___lwmod	;wreg free
  1981  0016B6  5026               	movf	?___lwmod,w,c
  1982  0016B8  0F30               	addlw	48
  1983  0016BA  6E36               	movwf	printf@c,c
  1984                           
  1985                           ;doprnt.c: 1523: }
  1986                           ;doprnt.c: 1524: (putch(c) );
  1987  0016BC  5036               	movf	printf@c,w,c
  1988  0016BE  ECFE  F00C         	call	_putch
  1989  0016C2                     l311:
  1990  0016C2  0633               	decf	printf@prec,f,c
  1991  0016C4  2833               	incf	printf@prec,w,c
  1992  0016C6  A4D8               	btfss	status,2,c
  1993  0016C8  D7D8               	goto	l312
  1994  0016CA                     u600:
  1995  0016CA  C02B  FFF6         	movff	printf@f,tblptrl
  1996  0016CE  C02C  FFF7         	movff	printf@f+1,tblptrh
  1997  0016D2  4A2B               	infsnz	printf@f,f,c
  1998  0016D4  2A2C               	incf	printf@f+1,f,c
  1999  0016D6                     	if	0	;tblptru may be non-zero
  2000  0016D6                     	endif
  2001  0016D6                     	if	0	;tblptru may be non-zero
  2002  0016D6                     	endif
  2003  0016D6  0008               	tblrd		*
  2004  0016D8  CFF5 F036          	movff	tablat,printf@c
  2005  0016DC  5036               	movf	printf@c,w,c
  2006  0016DE  B4D8               	btfsc	status,2,c
  2007  0016E0  0012               	return	
  2008  0016E2  D776               	goto	l297
  2009  0016E4                     __end_of_printf:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           tblptrh	equ	0xFF7
  2013                           tblptrl	equ	0xFF6
  2014                           tablat	equ	0xFF5
  2015                           prodh	equ	0xFF4
  2016                           prodl	equ	0xFF3
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           postdec1	equ	0xFE5
  2020                           fsr1l	equ	0xFE1
  2021                           postinc2	equ	0xFDE
  2022                           postdec2	equ	0xFDD
  2023                           fsr2h	equ	0xFDA
  2024                           fsr2l	equ	0xFD9
  2025                           status	equ	0xFD8
  2026                           
  2027 ;; *************** function _putch *****************
  2028 ;; Defined at:
  2029 ;;		line 24 in file "lcd.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;  data            1    wreg     unsigned char 
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  data            1    2[COMRAM] unsigned char 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  1    wreg      void 
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;Total ram usage:        1 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    1
  2050 ;; This function calls:
  2051 ;;		_lcdNibble
  2052 ;; This function is called by:
  2053 ;;		_printf
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           	psect	text3
  2058  0019FC                     __ptext3:
  2059                           	opt stack 0
  2060  0019FC                     _putch:
  2061                           	opt stack 28
  2062                           
  2063                           ;incstack = 0
  2064                           ;putch@data stored from wreg
  2065  0019FC  6E21               	movwf	putch@data,c
  2066                           
  2067                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2068  0019FE  848C               	bsf	3980,2,c	;volatile
  2069                           
  2070                           ;lcd.c: 33: lcdNibble(data);
  2071  001A00  5021               	movf	putch@data,w,c
  2072  001A02  ECB3  F00B         	call	_lcdNibble
  2073                           
  2074                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2075  001A06  0EC8               	movlw	200
  2076  001A08                     u897:
  2077  001A08  D000               	nop2	
  2078  001A0A  2EE8               	decfsz	wreg,f,c
  2079  001A0C  D7FD               	bra	u897
  2080  001A0E  0012               	return		;funcret
  2081  001A10                     __end_of_putch:
  2082                           	opt stack 0
  2083                           tblptru	equ	0xFF8
  2084                           tblptrh	equ	0xFF7
  2085                           tblptrl	equ	0xFF6
  2086                           tablat	equ	0xFF5
  2087                           prodh	equ	0xFF4
  2088                           prodl	equ	0xFF3
  2089                           postinc0	equ	0xFEE
  2090                           wreg	equ	0xFE8
  2091                           postdec1	equ	0xFE5
  2092                           fsr1l	equ	0xFE1
  2093                           postinc2	equ	0xFDE
  2094                           postdec2	equ	0xFDD
  2095                           fsr2h	equ	0xFDA
  2096                           fsr2l	equ	0xFD9
  2097                           status	equ	0xFD8
  2098                           
  2099 ;; *************** function ___lwmod *****************
  2100 ;; Defined at:
  2101 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;  dividend        2    7[COMRAM] unsigned int 
  2104 ;;  divisor         2    9[COMRAM] unsigned int 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  counter         1   11[COMRAM] unsigned char 
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  2    7[COMRAM] unsigned int 
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;Total ram usage:        5 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_printf
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text4
  2130  001924                     __ptext4:
  2131                           	opt stack 0
  2132  001924                     ___lwmod:
  2133                           	opt stack 29
  2134                           
  2135                           ;incstack = 0
  2136  001924  5028               	movf	___lwmod@divisor,w,c
  2137  001926  1029               	iorwf	___lwmod@divisor+1,w,c
  2138  001928  B4D8               	btfsc	status,2,c
  2139  00192A  D018               	goto	l734
  2140  00192C  0E01               	movlw	1
  2141  00192E  6E2A               	movwf	___lwmod@counter,c
  2142  001930  D004               	goto	l729
  2143  001932  90D8               	bcf	status,0,c
  2144  001934  3628               	rlcf	___lwmod@divisor,f,c
  2145  001936  3629               	rlcf	___lwmod@divisor+1,f,c
  2146  001938  2A2A               	incf	___lwmod@counter,f,c
  2147  00193A                     l729:
  2148  00193A  AE29               	btfss	___lwmod@divisor+1,7,c
  2149  00193C  D7FA               	goto	l730
  2150  00193E                     u510:
  2151  00193E  5028               	movf	___lwmod@divisor,w,c
  2152  001940  5C26               	subwf	___lwmod@dividend,w,c
  2153  001942  5029               	movf	___lwmod@divisor+1,w,c
  2154  001944  5827               	subwfb	___lwmod@dividend+1,w,c
  2155  001946  A0D8               	btfss	status,0,c
  2156  001948  D004               	goto	l733
  2157  00194A  5028               	movf	___lwmod@divisor,w,c
  2158  00194C  5E26               	subwf	___lwmod@dividend,f,c
  2159  00194E  5029               	movf	___lwmod@divisor+1,w,c
  2160  001950  5A27               	subwfb	___lwmod@dividend+1,f,c
  2161  001952                     l733:
  2162  001952  90D8               	bcf	status,0,c
  2163  001954  3229               	rrcf	___lwmod@divisor+1,f,c
  2164  001956  3228               	rrcf	___lwmod@divisor,f,c
  2165  001958  2E2A               	decfsz	___lwmod@counter,f,c
  2166  00195A  D7F1               	goto	u510
  2167  00195C                     l734:
  2168  00195C  C026  F026         	movff	___lwmod@dividend,?___lwmod
  2169  001960  C027  F027         	movff	___lwmod@dividend+1,?___lwmod+1
  2170  001964  0012               	return		;funcret
  2171  001966                     __end_of___lwmod:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           prodh	equ	0xFF4
  2178                           prodl	equ	0xFF3
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           postdec1	equ	0xFE5
  2182                           fsr1l	equ	0xFE1
  2183                           postinc2	equ	0xFDE
  2184                           postdec2	equ	0xFDD
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function ___lwdiv *****************
  2190 ;; Defined at:
  2191 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  dividend        2    0[COMRAM] unsigned int 
  2194 ;;  divisor         2    2[COMRAM] unsigned int 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  quotient        2    4[COMRAM] unsigned int 
  2197 ;;  counter         1    6[COMRAM] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    0[COMRAM] unsigned int 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;Total ram usage:        7 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_printf
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text5
  2221  001840                     __ptext5:
  2222                           	opt stack 0
  2223  001840                     ___lwdiv:
  2224                           	opt stack 29
  2225                           
  2226                           ;incstack = 0
  2227  001840  0E00               	movlw	0
  2228  001842  6E24               	movwf	___lwdiv@quotient+1,c
  2229  001844  0E00               	movlw	0
  2230  001846  6E23               	movwf	___lwdiv@quotient,c
  2231  001848  5021               	movf	___lwdiv@divisor,w,c
  2232  00184A  1022               	iorwf	___lwdiv@divisor+1,w,c
  2233  00184C  B4D8               	btfsc	status,2,c
  2234  00184E  D01C               	goto	l724
  2235  001850  0E01               	movlw	1
  2236  001852  6E25               	movwf	___lwdiv@counter,c
  2237  001854  D004               	goto	l719
  2238  001856  90D8               	bcf	status,0,c
  2239  001858  3621               	rlcf	___lwdiv@divisor,f,c
  2240  00185A  3622               	rlcf	___lwdiv@divisor+1,f,c
  2241  00185C  2A25               	incf	___lwdiv@counter,f,c
  2242  00185E                     l719:
  2243  00185E  AE22               	btfss	___lwdiv@divisor+1,7,c
  2244  001860  D7FA               	goto	l720
  2245  001862                     u480:
  2246  001862  90D8               	bcf	status,0,c
  2247  001864  3623               	rlcf	___lwdiv@quotient,f,c
  2248  001866  3624               	rlcf	___lwdiv@quotient+1,f,c
  2249  001868  5021               	movf	___lwdiv@divisor,w,c
  2250  00186A  5C1F               	subwf	___lwdiv@dividend,w,c
  2251  00186C  5022               	movf	___lwdiv@divisor+1,w,c
  2252  00186E  5820               	subwfb	___lwdiv@dividend+1,w,c
  2253  001870  A0D8               	btfss	status,0,c
  2254  001872  D005               	goto	l723
  2255  001874  5021               	movf	___lwdiv@divisor,w,c
  2256  001876  5E1F               	subwf	___lwdiv@dividend,f,c
  2257  001878  5022               	movf	___lwdiv@divisor+1,w,c
  2258  00187A  5A20               	subwfb	___lwdiv@dividend+1,f,c
  2259  00187C  8023               	bsf	___lwdiv@quotient,0,c
  2260  00187E                     l723:
  2261  00187E  90D8               	bcf	status,0,c
  2262  001880  3222               	rrcf	___lwdiv@divisor+1,f,c
  2263  001882  3221               	rrcf	___lwdiv@divisor,f,c
  2264  001884  2E25               	decfsz	___lwdiv@counter,f,c
  2265  001886  D7ED               	goto	u480
  2266  001888                     l724:
  2267  001888  C023  F01F         	movff	___lwdiv@quotient,?___lwdiv
  2268  00188C  C024  F020         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2269  001890  0012               	return		;funcret
  2270  001892                     __end_of___lwdiv:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodh	equ	0xFF4
  2277                           prodl	equ	0xFF3
  2278                           postinc0	equ	0xFEE
  2279                           wreg	equ	0xFE8
  2280                           postdec1	equ	0xFE5
  2281                           fsr1l	equ	0xFE1
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _initLCD *****************
  2289 ;; Defined at:
  2290 ;;		line 60 in file "lcd.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;Total ram usage:        1 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    2
  2311 ;; This function calls:
  2312 ;;		_lcdInst
  2313 ;; This function is called by:
  2314 ;;		_main
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text6
  2319  001892                     __ptext6:
  2320                           	opt stack 0
  2321  001892                     _initLCD:
  2322                           	opt stack 28
  2323                           
  2324                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2325                           
  2326                           ;incstack = 0
  2327  001892  0EC3               	movlw	195
  2328  001894  6E22               	movwf	??_initLCD& (0+255),c
  2329  001896  0ECD               	movlw	205
  2330  001898                     u907:
  2331  001898  2EE8               	decfsz	wreg,f,c
  2332  00189A  D7FE               	bra	u907
  2333  00189C  2E22               	decfsz	??_initLCD& (0+255),f,c
  2334  00189E  D7FC               	bra	u907
  2335  0018A0  F000               	nop	
  2336                           
  2337                           ;lcd.c: 69: lcdInst(0b00110011);
  2338  0018A2  0E33               	movlw	51
  2339  0018A4  EC08  F00D         	call	_lcdInst
  2340                           
  2341                           ;lcd.c: 70: lcdInst(0b00110010);
  2342  0018A8  0E32               	movlw	50
  2343  0018AA  EC08  F00D         	call	_lcdInst
  2344                           
  2345                           ;lcd.c: 71: lcdInst(0b00101000);
  2346  0018AE  0E28               	movlw	40
  2347  0018B0  EC08  F00D         	call	_lcdInst
  2348                           
  2349                           ;lcd.c: 72: lcdInst(0b00001111);
  2350  0018B4  0E0F               	movlw	15
  2351  0018B6  EC08  F00D         	call	_lcdInst
  2352                           
  2353                           ;lcd.c: 73: lcdInst(0b00000110);
  2354  0018BA  0E06               	movlw	6
  2355  0018BC  EC08  F00D         	call	_lcdInst
  2356                           
  2357                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2358  0018C0  0E01               	movlw	1
  2359  0018C2  EC08  F00D         	call	_lcdInst
  2360  0018C6  0EC3               	movlw	195
  2361  0018C8  6E22               	movwf	??_initLCD& (0+255),c
  2362  0018CA  0ECD               	movlw	205
  2363  0018CC                     u917:
  2364  0018CC  2EE8               	decfsz	wreg,f,c
  2365  0018CE  D7FE               	bra	u917
  2366  0018D0  2E22               	decfsz	??_initLCD& (0+255),f,c
  2367  0018D2  D7FC               	bra	u917
  2368  0018D4  F000               	nop	
  2369                           
  2370                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2371  0018D6  0E0F               	movlw	15
  2372  0018D8  EC08  F00D         	call	_lcdInst
  2373  0018DC  0012               	return		;funcret
  2374  0018DE                     __end_of_initLCD:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           prodh	equ	0xFF4
  2381                           prodl	equ	0xFF3
  2382                           postinc0	equ	0xFEE
  2383                           wreg	equ	0xFE8
  2384                           postdec1	equ	0xFE5
  2385                           fsr1l	equ	0xFE1
  2386                           postinc2	equ	0xFDE
  2387                           postdec2	equ	0xFDD
  2388                           fsr2h	equ	0xFDA
  2389                           fsr2l	equ	0xFD9
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _lcdInst *****************
  2393 ;; Defined at:
  2394 ;;		line 11 in file "lcd.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  data            1    wreg     unsigned char 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  data            1    2[COMRAM] unsigned char 
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;Total ram usage:        1 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    1
  2415 ;; This function calls:
  2416 ;;		_lcdNibble
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;;		_initLCD
  2420 ;;		_lcd_set_cursor
  2421 ;;		_lcd_shift_cursor
  2422 ;;		_lcd_shift_display
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text7
  2427  001A10                     __ptext7:
  2428                           	opt stack 0
  2429  001A10                     _lcdInst:
  2430                           	opt stack 29
  2431                           
  2432                           ;incstack = 0
  2433                           ;lcdInst@data stored from wreg
  2434  001A10  6E21               	movwf	lcdInst@data,c
  2435                           
  2436                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2437  001A12  948C               	bcf	3980,2,c	;volatile
  2438                           
  2439                           ;lcd.c: 20: lcdNibble(data);
  2440  001A14  5021               	movf	lcdInst@data,w,c
  2441  001A16  ECB3  F00B         	call	_lcdNibble
  2442                           
  2443                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2444  001A1A  0EC8               	movlw	200
  2445  001A1C                     u927:
  2446  001A1C  D000               	nop2	
  2447  001A1E  2EE8               	decfsz	wreg,f,c
  2448  001A20  D7FD               	bra	u927
  2449  001A22  0012               	return		;funcret
  2450  001A24                     __end_of_lcdInst:
  2451                           	opt stack 0
  2452                           tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           prodh	equ	0xFF4
  2457                           prodl	equ	0xFF3
  2458                           postinc0	equ	0xFEE
  2459                           wreg	equ	0xFE8
  2460                           postdec1	equ	0xFE5
  2461                           fsr1l	equ	0xFE1
  2462                           postinc2	equ	0xFDE
  2463                           postdec2	equ	0xFDD
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _lcdNibble *****************
  2469 ;; Defined at:
  2470 ;;		line 37 in file "lcd.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  data            1    wreg     unsigned char 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  data            1    1[COMRAM] unsigned char 
  2475 ;;  temp            1    0[COMRAM] unsigned char 
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      void 
  2478 ;; Registers used:
  2479 ;;		wreg, status,2, status,0
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;Total ram usage:        2 bytes
  2490 ;; Hardware stack levels used:    1
  2491 ;; This function calls:
  2492 ;;		Nothing
  2493 ;; This function is called by:
  2494 ;;		_lcdInst
  2495 ;;		_putch
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text8
  2500  001766                     __ptext8:
  2501                           	opt stack 0
  2502  001766                     _lcdNibble:
  2503                           	opt stack 28
  2504                           
  2505                           ;incstack = 0
  2506                           ;lcdNibble@data stored from wreg
  2507  001766  6E20               	movwf	lcdNibble@data,c
  2508                           
  2509                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2510  001768  5020               	movf	lcdNibble@data,w,c
  2511  00176A  0BF0               	andlw	240
  2512  00176C  6E1F               	movwf	lcdNibble@temp,c
  2513                           
  2514                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2515  00176E  508C               	movf	3980,w,c	;volatile
  2516  001770  0B0F               	andlw	15
  2517  001772  6E8C               	movwf	3980,c	;volatile
  2518                           
  2519                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2520  001774  501F               	movf	lcdNibble@temp,w,c
  2521  001776  108C               	iorwf	3980,w,c	;volatile
  2522  001778  6E8C               	movwf	3980,c	;volatile
  2523                           
  2524                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2525  00177A  0E00               	movlw	0
  2526  00177C  BEF2               	btfsc	intcon,7,c	;volatile
  2527  00177E  0E01               	movlw	1
  2528  001780  6E1B               	movwf	lcd@LCDinterruptState,c
  2529  001782  9EF2               	bcf	intcon,7,c	;volatile
  2530  001784  868C               	bsf	3980,3,c	;volatile
  2531  001786  0E53               	movlw	83
  2532  001788                     u937:
  2533  001788  2EE8               	decfsz	wreg,f,c
  2534  00178A  D7FE               	bra	u937
  2535  00178C  F000               	nop	
  2536  00178E  968C               	bcf	3980,3,c	;volatile
  2537  001790  0EC8               	movlw	200
  2538  001792                     u947:
  2539  001792  D000               	nop2	
  2540  001794  2EE8               	decfsz	wreg,f,c
  2541  001796  D7FD               	bra	u947
  2542  001798  B01B               	btfsc	lcd@LCDinterruptState,0,c
  2543  00179A  D002               	bra	u15
  2544  00179C  9EF2               	bcf	intcon,7,c	;volatile
  2545  00179E  D001               	bra	u16
  2546  0017A0                     u15:
  2547  0017A0  8EF2               	bsf	intcon,7,c	;volatile
  2548  0017A2                     u16:
  2549                           
  2550                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2551  0017A2  3820               	swapf	lcdNibble@data,w,c
  2552  0017A4  0BF0               	andlw	240
  2553  0017A6  6E20               	movwf	lcdNibble@data,c
  2554                           
  2555                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2556  0017A8  5020               	movf	lcdNibble@data,w,c
  2557  0017AA  0BF0               	andlw	240
  2558  0017AC  6E1F               	movwf	lcdNibble@temp,c
  2559                           
  2560                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2561  0017AE  508C               	movf	3980,w,c	;volatile
  2562  0017B0  0B0F               	andlw	15
  2563  0017B2  6E8C               	movwf	3980,c	;volatile
  2564                           
  2565                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2566  0017B4  501F               	movf	lcdNibble@temp,w,c
  2567  0017B6  108C               	iorwf	3980,w,c	;volatile
  2568  0017B8  6E8C               	movwf	3980,c	;volatile
  2569                           
  2570                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2571  0017BA  0E00               	movlw	0
  2572  0017BC  BEF2               	btfsc	intcon,7,c	;volatile
  2573  0017BE  0E01               	movlw	1
  2574  0017C0  6E1B               	movwf	lcd@LCDinterruptState,c
  2575  0017C2  9EF2               	bcf	intcon,7,c	;volatile
  2576  0017C4  868C               	bsf	3980,3,c	;volatile
  2577  0017C6  0E53               	movlw	83
  2578  0017C8                     u957:
  2579  0017C8  2EE8               	decfsz	wreg,f,c
  2580  0017CA  D7FE               	bra	u957
  2581  0017CC  F000               	nop	
  2582  0017CE  968C               	bcf	3980,3,c	;volatile
  2583  0017D0  0EC8               	movlw	200
  2584  0017D2                     u967:
  2585  0017D2  D000               	nop2	
  2586  0017D4  2EE8               	decfsz	wreg,f,c
  2587  0017D6  D7FD               	bra	u967
  2588  0017D8  B01B               	btfsc	lcd@LCDinterruptState,0,c
  2589  0017DA  D002               	bra	u25
  2590  0017DC  9EF2               	bcf	intcon,7,c	;volatile
  2591  0017DE  D001               	bra	u26
  2592  0017E0                     u25:
  2593  0017E0  8EF2               	bsf	intcon,7,c	;volatile
  2594  0017E2                     u26:
  2595  0017E2  0012               	return		;funcret
  2596  0017E4                     __end_of_lcdNibble:
  2597                           	opt stack 0
  2598                           tblptru	equ	0xFF8
  2599                           tblptrh	equ	0xFF7
  2600                           tblptrl	equ	0xFF6
  2601                           tablat	equ	0xFF5
  2602                           prodh	equ	0xFF4
  2603                           prodl	equ	0xFF3
  2604                           intcon	equ	0xFF2
  2605                           postinc0	equ	0xFEE
  2606                           wreg	equ	0xFE8
  2607                           postdec1	equ	0xFE5
  2608                           fsr1l	equ	0xFE1
  2609                           postinc2	equ	0xFDE
  2610                           postdec2	equ	0xFDD
  2611                           fsr2h	equ	0xFDA
  2612                           fsr2l	equ	0xFD9
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function _I2C_sendData *****************
  2616 ;; Defined at:
  2617 ;;		line 460 in file "main.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  char_data       1    wreg     unsigned char 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;  char_data       1    3[COMRAM] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;Total ram usage:        1 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    2
  2638 ;; This function calls:
  2639 ;;		_I2C_Master_Start
  2640 ;;		_I2C_Master_Stop
  2641 ;;		_I2C_Master_Write
  2642 ;; This function is called by:
  2643 ;;		_main
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text9
  2648  0019C2                     __ptext9:
  2649                           	opt stack 0
  2650  0019C2                     _I2C_sendData:
  2651                           	opt stack 28
  2652                           
  2653                           ;incstack = 0
  2654                           ;I2C_sendData@char_data stored from wreg
  2655  0019C2  6E22               	movwf	I2C_sendData@char_data,c
  2656                           
  2657                           ;main.c: 461: I2C_Master_Start();
  2658  0019C4  EC24  F00D         	call	_I2C_Master_Start	;wreg free
  2659                           
  2660                           ;main.c: 462: I2C_Master_Write(0b00010000);
  2661  0019C8  0E00               	movlw	0
  2662  0019CA  6E21               	movwf	I2C_Master_Write@byteToWrite+1,c
  2663  0019CC  0E10               	movlw	16
  2664  0019CE  6E20               	movwf	I2C_Master_Write@byteToWrite,c
  2665  0019D0  EC1B  F00D         	call	_I2C_Master_Write	;wreg free
  2666                           
  2667                           ;main.c: 463: I2C_Master_Write(char_data);
  2668  0019D4  C022  F020         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  2669  0019D8  6A21               	clrf	I2C_Master_Write@byteToWrite+1,c
  2670  0019DA  EC1B  F00D         	call	_I2C_Master_Write	;wreg free
  2671                           
  2672                           ;main.c: 464: I2C_Master_Stop();
  2673  0019DE  EC20  F00D         	call	_I2C_Master_Stop	;wreg free
  2674  0019E2  0012               	return		;funcret
  2675  0019E4                     __end_of_I2C_sendData:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           intcon	equ	0xFF2
  2684                           postinc0	equ	0xFEE
  2685                           wreg	equ	0xFE8
  2686                           postdec1	equ	0xFE5
  2687                           fsr1l	equ	0xFE1
  2688                           postinc2	equ	0xFDE
  2689                           postdec2	equ	0xFDD
  2690                           fsr2h	equ	0xFDA
  2691                           fsr2l	equ	0xFD9
  2692                           status	equ	0xFD8
  2693                           
  2694 ;; *************** function _I2C_Master_Write *****************
  2695 ;; Defined at:
  2696 ;;		line 108 in file "I2C.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;Total ram usage:        2 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    1
  2717 ;; This function calls:
  2718 ;;		_I2C_Master_Wait
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;;		_I2C_sendData
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text10
  2726  001A36                     __ptext10:
  2727                           	opt stack 0
  2728  001A36                     _I2C_Master_Write:
  2729                           	opt stack 28
  2730                           
  2731                           ;I2C.c: 116: I2C_Master_Wait();
  2732                           
  2733                           ;incstack = 0
  2734  001A36  EC12  F00D         	call	_I2C_Master_Wait	;wreg free
  2735                           
  2736                           ;I2C.c: 117: SSPBUF = byteToWrite;
  2737  001A3A  C020  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2738  001A3E  0012               	return		;funcret
  2739  001A40                     __end_of_I2C_Master_Write:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           prodh	equ	0xFF4
  2746                           prodl	equ	0xFF3
  2747                           intcon	equ	0xFF2
  2748                           postinc0	equ	0xFEE
  2749                           wreg	equ	0xFE8
  2750                           postdec1	equ	0xFE5
  2751                           fsr1l	equ	0xFE1
  2752                           postinc2	equ	0xFDE
  2753                           postdec2	equ	0xFDD
  2754                           fsr2h	equ	0xFDA
  2755                           fsr2l	equ	0xFD9
  2756                           status	equ	0xFD8
  2757                           
  2758 ;; *************** function _I2C_Master_Stop *****************
  2759 ;; Defined at:
  2760 ;;		line 95 in file "I2C.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2, status,0, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    1
  2781 ;; This function calls:
  2782 ;;		_I2C_Master_Wait
  2783 ;; This function is called by:
  2784 ;;		_main
  2785 ;;		_I2C_sendData
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text11
  2790  001A40                     __ptext11:
  2791                           	opt stack 0
  2792  001A40                     _I2C_Master_Stop:
  2793                           	opt stack 28
  2794                           
  2795                           ;I2C.c: 104: I2C_Master_Wait();
  2796                           
  2797                           ;incstack = 0
  2798  001A40  EC12  F00D         	call	_I2C_Master_Wait	;wreg free
  2799                           
  2800                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  2801  001A44  84C5               	bsf	4037,2,c	;volatile
  2802  001A46  0012               	return		;funcret
  2803  001A48                     __end_of_I2C_Master_Stop:
  2804                           	opt stack 0
  2805                           tblptru	equ	0xFF8
  2806                           tblptrh	equ	0xFF7
  2807                           tblptrl	equ	0xFF6
  2808                           tablat	equ	0xFF5
  2809                           prodh	equ	0xFF4
  2810                           prodl	equ	0xFF3
  2811                           intcon	equ	0xFF2
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           postdec1	equ	0xFE5
  2815                           fsr1l	equ	0xFE1
  2816                           postinc2	equ	0xFDE
  2817                           postdec2	equ	0xFDD
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _I2C_Master_Start *****************
  2823 ;; Defined at:
  2824 ;;		line 69 in file "I2C.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, status,2, status,0, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;Total ram usage:        0 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    1
  2845 ;; This function calls:
  2846 ;;		_I2C_Master_Wait
  2847 ;; This function is called by:
  2848 ;;		_main
  2849 ;;		_I2C_sendData
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text12
  2854  001A48                     __ptext12:
  2855                           	opt stack 0
  2856  001A48                     _I2C_Master_Start:
  2857                           	opt stack 28
  2858                           
  2859                           ;I2C.c: 78: I2C_Master_Wait();
  2860                           
  2861                           ;incstack = 0
  2862  001A48  EC12  F00D         	call	_I2C_Master_Wait	;wreg free
  2863                           
  2864                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  2865  001A4C  80C5               	bsf	4037,0,c	;volatile
  2866  001A4E  0012               	return		;funcret
  2867  001A50                     __end_of_I2C_Master_Start:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           intcon	equ	0xFF2
  2876                           postinc0	equ	0xFEE
  2877                           wreg	equ	0xFE8
  2878                           postdec1	equ	0xFE5
  2879                           fsr1l	equ	0xFE1
  2880                           postinc2	equ	0xFDE
  2881                           postdec2	equ	0xFDD
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _I2C_Master_Read *****************
  2887 ;; Defined at:
  2888 ;;		line 120 in file "I2C.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  ackBit          1    wreg     unsigned char 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  ackBit          1    1[COMRAM] unsigned char 
  2893 ;;  receivedByte    1    2[COMRAM] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      unsigned char 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;Total ram usage:        2 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    1
  2910 ;; This function calls:
  2911 ;;		_I2C_Master_Wait
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text13
  2918  00199E                     __ptext13:
  2919                           	opt stack 0
  2920  00199E                     _I2C_Master_Read:
  2921                           	opt stack 29
  2922                           
  2923                           ;incstack = 0
  2924                           ;I2C_Master_Read@ackBit stored from wreg
  2925  00199E  6E20               	movwf	I2C_Master_Read@ackBit,c
  2926                           
  2927                           ;I2C.c: 130: unsigned char receivedByte;
  2928                           ;I2C.c: 132: I2C_Master_Wait();
  2929  0019A0  EC12  F00D         	call	_I2C_Master_Wait	;wreg free
  2930                           
  2931                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  2932  0019A4  86C5               	bsf	4037,3,c	;volatile
  2933                           
  2934                           ;I2C.c: 135: I2C_Master_Wait();
  2935  0019A6  EC12  F00D         	call	_I2C_Master_Wait	;wreg free
  2936                           
  2937                           ;I2C.c: 136: receivedByte = SSPBUF;
  2938  0019AA  CFC9 F021          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  2939                           
  2940                           ;I2C.c: 138: I2C_Master_Wait();
  2941  0019AE  EC12  F00D         	call	_I2C_Master_Wait	;wreg free
  2942                           
  2943                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  2944  0019B2  B020               	btfsc	I2C_Master_Read@ackBit,0,c
  2945  0019B4  D002               	bra	u155
  2946  0019B6  9AC5               	bcf	4037,5,c	;volatile
  2947  0019B8  D001               	bra	u156
  2948  0019BA                     u155:
  2949  0019BA  8AC5               	bsf	4037,5,c	;volatile
  2950  0019BC                     u156:
  2951                           
  2952                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  2953  0019BC  88C5               	bsf	4037,4,c	;volatile
  2954                           
  2955                           ;I2C.c: 142: return receivedByte;
  2956  0019BE  5021               	movf	I2C_Master_Read@receivedByte,w,c
  2957  0019C0  0012               	return	
  2958  0019C2                     __end_of_I2C_Master_Read:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodh	equ	0xFF4
  2965                           prodl	equ	0xFF3
  2966                           intcon	equ	0xFF2
  2967                           postinc0	equ	0xFEE
  2968                           wreg	equ	0xFE8
  2969                           postdec1	equ	0xFE5
  2970                           fsr1l	equ	0xFE1
  2971                           postinc2	equ	0xFDE
  2972                           postdec2	equ	0xFDD
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _I2C_Master_Wait *****************
  2978 ;; Defined at:
  2979 ;;		line 51 in file "I2C.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;		None
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, status,2, status,0
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;Total ram usage:        1 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_I2C_Master_Start
  3003 ;;		_I2C_Master_Stop
  3004 ;;		_I2C_Master_Write
  3005 ;;		_I2C_Master_Read
  3006 ;;		_I2C_Master_RepeatedStart
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text14
  3011  001A24                     __ptext14:
  3012                           	opt stack 0
  3013  001A24                     _I2C_Master_Wait:
  3014                           	opt stack 28
  3015                           
  3016                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3017                           
  3018                           ;incstack = 0
  3019  001A24  B4C7               	btfsc	4039,2,c	;volatile
  3020  001A26  D7FE               	goto	_I2C_Master_Wait
  3021  001A28  CFC5 F01F          	movff	4037,??_I2C_Master_Wait	;volatile
  3022  001A2C  0E1F               	movlw	31
  3023  001A2E  161F               	andwf	??_I2C_Master_Wait,f,c
  3024  001A30  B4D8               	btfsc	status,2,c
  3025  001A32  0012               	return	
  3026  001A34  D7F7               	goto	_I2C_Master_Wait
  3027  001A36                     __end_of_I2C_Master_Wait:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           intcon	equ	0xFF2
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           postdec1	equ	0xFE5
  3039                           fsr1l	equ	0xFE1
  3040                           postinc2	equ	0xFDE
  3041                           postdec2	equ	0xFDD
  3042                           fsr2h	equ	0xFDA
  3043                           fsr2l	equ	0xFD9
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _I2C_Master_Init *****************
  3047 ;; Defined at:
  3048 ;;		line 14 in file "I2C.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;Total ram usage:        8 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    1
  3069 ;; This function calls:
  3070 ;;		___lldiv
  3071 ;; This function is called by:
  3072 ;;		_main
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text15
  3077  0017E4                     __ptext15:
  3078                           	opt stack 0
  3079  0017E4                     _I2C_Master_Init:
  3080                           	opt stack 29
  3081                           
  3082                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  3083                           
  3084                           ;incstack = 0
  3085  0017E4  9AC6               	bcf	4038,5,c	;volatile
  3086                           
  3087                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  3088  0017E6  8694               	bsf	3988,3,c	;volatile
  3089                           
  3090                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  3091  0017E8  8894               	bsf	3988,4,c	;volatile
  3092                           
  3093                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  3094  0017EA  0E80               	movlw	128
  3095  0017EC  6EC7               	movwf	4039,c	;volatile
  3096                           
  3097                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  3098  0017EE  0E28               	movlw	40
  3099  0017F0  6EC6               	movwf	4038,c	;volatile
  3100                           
  3101                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  3102  0017F2  0E00               	movlw	0
  3103  0017F4  6EC5               	movwf	4037,c	;volatile
  3104                           
  3105                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  3106  0017F6  0E00               	movlw	0
  3107  0017F8  6E1F               	movwf	___lldiv@dividend,c
  3108  0017FA  0E5A               	movlw	90
  3109  0017FC  6E20               	movwf	___lldiv@dividend+1,c
  3110  0017FE  0E62               	movlw	98
  3111  001800  6E21               	movwf	___lldiv@dividend+2,c
  3112  001802  0E02               	movlw	2
  3113  001804  6E22               	movwf	___lldiv@dividend+3,c
  3114  001806  C02C  F030         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  3115  00180A  C02D  F031         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  3116  00180E  C02E  F032         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  3117  001812  C02F  F033         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  3118  001816  0E02               	movlw	2
  3119  001818                     u535:
  3120  001818  90D8               	bcf	status,0,c
  3121  00181A  3630               	rlcf	??_I2C_Master_Init,f,c
  3122  00181C  3631               	rlcf	??_I2C_Master_Init+1,f,c
  3123  00181E  3632               	rlcf	??_I2C_Master_Init+2,f,c
  3124  001820  3633               	rlcf	??_I2C_Master_Init+3,f,c
  3125  001822  2EE8               	decfsz	wreg,f,c
  3126  001824  D7F9               	goto	u535
  3127  001826  C030  F023         	movff	??_I2C_Master_Init,___lldiv@divisor
  3128  00182A  C031  F024         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3129  00182E  C032  F025         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3130  001832  C033  F026         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3131  001836  EC72  F00B         	call	___lldiv	;wreg free
  3132  00183A  041F               	decf	?___lldiv,w,c
  3133  00183C  6EC8               	movwf	4040,c	;volatile
  3134  00183E  0012               	return		;funcret
  3135  001840                     __end_of_I2C_Master_Init:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           intcon	equ	0xFF2
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1l	equ	0xFE1
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function ___lldiv *****************
  3155 ;; Defined at:
  3156 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  dividend        4    0[COMRAM] unsigned long 
  3159 ;;  divisor         4    4[COMRAM] unsigned long 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  quotient        4    8[COMRAM] unsigned long 
  3162 ;;  counter         1   12[COMRAM] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  4    0[COMRAM] unsigned long 
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3172 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;Total ram usage:       13 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_I2C_Master_Init
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text16
  3186  0016E4                     __ptext16:
  3187                           	opt stack 0
  3188  0016E4                     ___lldiv:
  3189                           	opt stack 29
  3190                           
  3191                           ;incstack = 0
  3192  0016E4  0E00               	movlw	0
  3193  0016E6  6E27               	movwf	___lldiv@quotient,c
  3194  0016E8  0E00               	movlw	0
  3195  0016EA  6E28               	movwf	___lldiv@quotient+1,c
  3196  0016EC  0E00               	movlw	0
  3197  0016EE  6E29               	movwf	___lldiv@quotient+2,c
  3198  0016F0  0E00               	movlw	0
  3199  0016F2  6E2A               	movwf	___lldiv@quotient+3,c
  3200  0016F4  5023               	movf	___lldiv@divisor,w,c
  3201  0016F6  1024               	iorwf	___lldiv@divisor+1,w,c
  3202  0016F8  1025               	iorwf	___lldiv@divisor+2,w,c
  3203  0016FA  1026               	iorwf	___lldiv@divisor+3,w,c
  3204  0016FC  B4D8               	btfsc	status,2,c
  3205  0016FE  D02A               	goto	l671
  3206  001700  0E01               	movlw	1
  3207  001702  6E2B               	movwf	___lldiv@counter,c
  3208  001704  D006               	goto	l666
  3209  001706  90D8               	bcf	status,0,c
  3210  001708  3623               	rlcf	___lldiv@divisor,f,c
  3211  00170A  3624               	rlcf	___lldiv@divisor+1,f,c
  3212  00170C  3625               	rlcf	___lldiv@divisor+2,f,c
  3213  00170E  3626               	rlcf	___lldiv@divisor+3,f,c
  3214  001710  2A2B               	incf	___lldiv@counter,f,c
  3215  001712                     l666:
  3216  001712  AE26               	btfss	___lldiv@divisor+3,7,c
  3217  001714  D7F8               	goto	l667
  3218  001716                     u450:
  3219  001716  90D8               	bcf	status,0,c
  3220  001718  3627               	rlcf	___lldiv@quotient,f,c
  3221  00171A  3628               	rlcf	___lldiv@quotient+1,f,c
  3222  00171C  3629               	rlcf	___lldiv@quotient+2,f,c
  3223  00171E  362A               	rlcf	___lldiv@quotient+3,f,c
  3224  001720  5023               	movf	___lldiv@divisor,w,c
  3225  001722  5C1F               	subwf	___lldiv@dividend,w,c
  3226  001724  5024               	movf	___lldiv@divisor+1,w,c
  3227  001726  5820               	subwfb	___lldiv@dividend+1,w,c
  3228  001728  5025               	movf	___lldiv@divisor+2,w,c
  3229  00172A  5821               	subwfb	___lldiv@dividend+2,w,c
  3230  00172C  5026               	movf	___lldiv@divisor+3,w,c
  3231  00172E  5822               	subwfb	___lldiv@dividend+3,w,c
  3232  001730  A0D8               	btfss	status,0,c
  3233  001732  D009               	goto	l670
  3234  001734  5023               	movf	___lldiv@divisor,w,c
  3235  001736  5E1F               	subwf	___lldiv@dividend,f,c
  3236  001738  5024               	movf	___lldiv@divisor+1,w,c
  3237  00173A  5A20               	subwfb	___lldiv@dividend+1,f,c
  3238  00173C  5025               	movf	___lldiv@divisor+2,w,c
  3239  00173E  5A21               	subwfb	___lldiv@dividend+2,f,c
  3240  001740  5026               	movf	___lldiv@divisor+3,w,c
  3241  001742  5A22               	subwfb	___lldiv@dividend+3,f,c
  3242  001744  8027               	bsf	___lldiv@quotient,0,c
  3243  001746                     l670:
  3244  001746  90D8               	bcf	status,0,c
  3245  001748  3226               	rrcf	___lldiv@divisor+3,f,c
  3246  00174A  3225               	rrcf	___lldiv@divisor+2,f,c
  3247  00174C  3224               	rrcf	___lldiv@divisor+1,f,c
  3248  00174E  3223               	rrcf	___lldiv@divisor,f,c
  3249  001750  2E2B               	decfsz	___lldiv@counter,f,c
  3250  001752  D7E1               	goto	u450
  3251  001754                     l671:
  3252  001754  C027  F01F         	movff	___lldiv@quotient,?___lldiv
  3253  001758  C028  F020         	movff	___lldiv@quotient+1,?___lldiv+1
  3254  00175C  C029  F021         	movff	___lldiv@quotient+2,?___lldiv+2
  3255  001760  C02A  F022         	movff	___lldiv@quotient+3,?___lldiv+3
  3256  001764  0012               	return		;funcret
  3257  001766                     __end_of___lldiv:
  3258                           	opt stack 0
  3259                           tblptru	equ	0xFF8
  3260                           tblptrh	equ	0xFF7
  3261                           tblptrl	equ	0xFF6
  3262                           tablat	equ	0xFF5
  3263                           prodh	equ	0xFF4
  3264                           prodl	equ	0xFF3
  3265                           intcon	equ	0xFF2
  3266                           postinc0	equ	0xFEE
  3267                           wreg	equ	0xFE8
  3268                           postdec1	equ	0xFE5
  3269                           fsr1l	equ	0xFE1
  3270                           postinc2	equ	0xFDE
  3271                           postdec2	equ	0xFDD
  3272                           fsr2h	equ	0xFDA
  3273                           fsr2l	equ	0xFD9
  3274                           status	equ	0xFD8
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           intcon	equ	0xFF2
  3282                           postinc0	equ	0xFEE
  3283                           wreg	equ	0xFE8
  3284                           postdec1	equ	0xFE5
  3285                           fsr1l	equ	0xFE1
  3286                           postinc2	equ	0xFDE
  3287                           postdec2	equ	0xFDD
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8
  3291                           
  3292                           	psect	rparam
  3293  0000                     tblptru	equ	0xFF8
  3294                           tblptrh	equ	0xFF7
  3295                           tblptrl	equ	0xFF6
  3296                           tablat	equ	0xFF5
  3297                           prodh	equ	0xFF4
  3298                           prodl	equ	0xFF3
  3299                           intcon	equ	0xFF2
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           postdec1	equ	0xFE5
  3303                           fsr1l	equ	0xFE1
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8


Data Sizes:
    Strings     133
    Constant    33
    Data        23
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      81
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[18]), 
		 -> STR_14(CODE[12]), STR_13(CODE[12]), STR_12(CODE[5]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[17]), STR_8(CODE[3]), STR_7(CODE[13]), 
		 -> STR_6(CODE[15]), STR_5(CODE[3]), STR_4(CODE[13]), STR_3(CODE[16]), 
		 -> STR_2(CODE[11]), STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    4396
                                             24 COMRAM     3     3      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    2469
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     652
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     630
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       1       0        0.8%
COMRAM              7F     1B      51       1       63.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      51      34        0.0%
DATA                 0      0      51       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 30 15:35:07 2018

                 _B_dispense 004E                  _rotate_gear 0050                           u15 17A0  
                         u16 17A2                           u25 17E0                           u26 17E2  
                __CFG_CPD$ON 000000                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l310 1674                          l311 16C2                          l151 1152  
                        l312 167A                          l304 160A                          l152 1172  
                        l161 12D0                          l306 1632                          l162 12F2  
                        l171 1468                          l163 133A                          l147 1110  
                        l172 1486                          l156 1204                          l173 14CE  
                        l157 1226                          l166 13B2                          l158 126E  
                        l167 13D6                          l176 153C                          l168 1406  
                        l177 1556                          l179 158C                          l188 18F6  
                        l720 1856                          l297 15D0                          l730 1932  
                        l298 15E0                          l723 187E                          l724 1888  
                        l733 1952                          l670 1746                          l734 195C  
                        l671 1754                          l719 185E                          l729 193A  
                        l666 1712                          l667 1706                 __CFG_CPB$OFF 000000  
                        u155 19BA                          u156 19BC                          u510 193E  
                        u600 16CA                          u450 1716                          u535 1818  
                        u480 1862                          u580 1662                          u807 12A8  
                        u817 135C                          u907 1898                          u827 1374  
                        u917 18CC                          u837 13A0                          u927 1A1C  
                        u847 1420                          u767 113E                          u937 1788  
                        u857 143E                          u777 11C4                          u947 1792  
                        u867 14F0                          u787 11DC                          u957 17C8  
                        u877 1508                          u797 1290                          u967 17D2  
                        u887 15B2                          u897 1A08                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1531 1636  
                       l1709 13B2                         l1787 158C                         _ADON 007E10  
                       STR_1 1064                         STR_2 1097                         STR_3 1045  
                       STR_4 1071                         STR_5 1031                         STR_6 1055  
                       STR_7 107E                         STR_8 1031                         STR_9 1034  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                  main@counter 0039  
                       _main 10A8                         _keys 1001                         fsr2h 000FDA  
                       fsr1l 000FE1                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_LEFT 101D  
      I2C_Master_Read@ackBit 0020             ?_I2C_Master_Init 002C             ?_I2C_Master_Read 001F  
           ?_I2C_Master_Wait 001F             ?_I2C_Master_Stop 001F                        ?_main 001F  
                      STR_10 1031                        STR_11 1031                        STR_12 10A2  
                      STR_13 108B                        STR_14 108B                        STR_15 1022  
                      STR_16 1031                        STR_17 1031                        STR_18 1031  
            __end_of___lldiv 1766              __end_of___lwdiv 1892              __end_of___lwmod 1966  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                        _B_max 003E  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                        _N_max 0040  
            __end_of_lcdInst 1A24                _N_spacingTime 0015                        _S_max 003C  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                        _W_max 003A  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_readADC 1924              __end_of_initLCD 18DE               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 101C                        _putch 19FC                   _N_dispense 004D  
             __pbitbssCOMRAM 0288                        tablat 000FF5            _LCDinterruptState 001E  
                      status 000FD8  I2C_Master_Read@receivedByte 0021               __CFG_PBADEN$ON 000000  
      __size_of_I2C_sendData 0022              __initialization 1966                 __end_of_main 15C6  
               __end_of_keys 1012               __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 101E  
                     ??_main 0037                   _S_dispense 004C                __activetblptr 000002  
          ?_I2C_Master_Start 001F            ?_I2C_Master_Write 0020           ??_I2C_Master_Start 0020  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0022  
                     _ADRESH 000FC4                       _ADRESL 000FC3                       ?_putch 001F  
               _I2C_sendData 19C2                       _SSPADD 000FC8                       _SSPBUF 000FC9  
            _openHandle_data 001D               __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000  
                  ??___lldiv 0027                    ??___lwdiv 0023                    ??___lwmod 002A  
                     clear_0 198E                    ??_lcdInst 0021                       _printf 15C6  
                  ??_readADC 0021                    ??_initLCD 0022                 __pdataCOMRAM 003A  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                   __accesstop 0080      __end_of__initialization 1994  
              ___rparam_used 000001               __pcstackCOMRAM 001F                __end_of_putch 1A10  
              _B_spacingTime 000F           __size_of_lcdNibble 007E                      ??_putch 0021  
                    ?_printf 002B         lcd@LCDinterruptState 001B                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 17E4  
                    __Hparam 0000                      __Lparam 0000                      ___lldiv 16E4  
                    ___lwdiv 1840                      ___lwmod 1924                 __psmallconst 1000  
                    __pcinit 1966                      __ramtop 1000                      _lcdInst 1A10  
                    __ptext0 10A8                      __ptext1 18DE                      __ptext2 15C6  
                    __ptext3 19FC                      __ptext4 1924                      __ptext5 1840  
                    __ptext6 1892                      __ptext7 1A10                      __ptext8 1766  
                    __ptext9 19C2              __size_of_printf 011E                      _readADC 18DE  
                    _initLCD 1892                      _dpowers 1012                    _LCD_RIGHT 101D  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012  
   __size_of_I2C_Master_Stop 0008                _S_spacingTime 0009         end_of_initialization 1994  
      __end_of_LCD_SIZE_HORZ 1020        __end_of_LCD_SIZE_VERT 101F                __Lmediumconst 0000  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0023  
               _close_handle 0042              ___lldiv@counter 002B                      printf@c 0036  
                    printf@f 002B                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                   _servo_ramp 0043  
                  _TRISCbits 000F94                    _B_counter 0013                __pidataCOMRAM 19E4  
             __end_of_printf 16E4                    _N_counter 0019          start_initialization 1966  
                  _S_counter 000D            ??_I2C_Master_Init 0030            ??_I2C_Master_Read 0020  
          ??_I2C_Master_Wait 001F            ??_I2C_Master_Stop 0020                    _W_counter 0007  
   I2C_Master_Init@clockFreq 002C             __CFG_LPT1OSC$OFF 000000                     ??_printf 002F  
              _analog_result 0001                  __pbssCOMRAM 0001             _I2C_Master_Start 1A48  
           _I2C_Master_Write 1A36             ___lwdiv@dividend 001F            __CFG_CCP2MX$PORTC 000000  
                  _lcdNibble 1766                     ?___lldiv 001F                     ?___lwdiv 001F  
                   ?___lwmod 0026                     ?_lcdInst 001F                     ?_readADC 001F  
                   ?_initLCD 001F                  __smallconst 1000             ___lwdiv@quotient 0023  
              _W_spacingTime 0003                ?_I2C_sendData 001F               __size_of_putch 0014  
                   _LCD_LEFT 101C                     _LATDbits 000F8C             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 001F                    _nuts_data 001C                   _ADCON0bits 000FC2  
              lcdNibble@data 0020                     _B_remain 0011                   printf@flag 0032  
              lcdNibble@temp 001F                   printf@prec 0033               ??_I2C_sendData 0022  
             _LCD_HORZ_LIMIT 1021                    copy_data0 197A                     _N_remain 0017  
                   _S_remain 000B                     __Hrparam 0000        I2C_sendData@char_data 0022  
                   __Lrparam 0000                     _W_remain 0005           __CFG_BOREN$SBORDIS 000000  
           __size_of___lldiv 0082          _rotate_1compartment 004F             __size_of___lwdiv 0052  
           __size_of___lwmod 0042               readADC@channel 0023             __size_of_lcdInst 0014  
            _I2C_Master_Init 17E4             __size_of_readADC 0046              _I2C_Master_Read 199E  
           __size_of_initLCD 004C              _I2C_Master_Wait 1A24              _I2C_Master_Stop 1A40  
     __end_of_LCD_HORZ_LIMIT 1022              ___lwdiv@divisor 0021              ___lwdiv@counter 0025  
                   __ptext10 1A36                     __ptext11 1A40                     __ptext12 1A48  
                   __ptext13 199E                     __ptext14 1A24                     __ptext15 17E4  
                   __ptext16 16E4               _LCD_VERT_LIMIT 1020                __size_of_main 051E  
                ??_lcdNibble 001F                     main@SEND 0288                    printf@val 0034  
I2C_Master_Write@byteToWrite 0020                    putch@data 0021     __end_of_I2C_Master_Start 1A50  
   __end_of_I2C_Master_Write 1A40                   _INTCONbits 000FF2                 _motorStart_0 004B  
               _motorStart_1 0049                 _motorStart_2 0047                 _motorStart_3 0045  
     __end_of_LCD_VERT_LIMIT 1021                _LCD_SIZE_HORZ 101F             ___lwmod@dividend 0026  
              _LCD_SIZE_VERT 101E             ___lldiv@dividend 001F                   _OSCCONbits 000FD3  
                   printf@ap 0030         __end_of_I2C_sendData 19E4      __end_of_I2C_Master_Init 1840  
    __end_of_I2C_Master_Read 19C2      __end_of_I2C_Master_Wait 1A36      __end_of_I2C_Master_Stop 1A48  
                lcdInst@data 0021                  _motorStop_0 004A                  _motorStop_1 0048  
                _motorStop_2 0046                  _motorStop_3 0044             ___lldiv@quotient 0027  
            ___lwmod@divisor 0028              ___lwmod@counter 002A                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5  
