

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar  6 16:51:31 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4620 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	idataCOMRAM
    61  001444                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _max
    65  001444  0004               	dw	4
    66                           
    67                           	psect	smallconst
    68  001000                     __psmallconst:
    69                           	opt stack 0
    70  001000  00                 	db	0
    71  001001                     _dpowers:
    72                           	opt stack 0
    73  001001  0001               	dw	1
    74  001003  000A               	dw	10
    75  001005  0064               	dw	100
    76  001007  03E8               	dw	1000
    77  001009  2710               	dw	10000
    78  00100B                     __end_of_dpowers:
    79                           	opt stack 0
    80  00100B                     _LCD_LEFT:
    81                           	opt stack 0
    82  00100B  00                 	db	0
    83  00100C                     __end_of_LCD_LEFT:
    84                           	opt stack 0
    85  00100C                     _LCD_RIGHT:
    86                           	opt stack 0
    87  00100C  01                 	db	1
    88  00100D                     __end_of_LCD_RIGHT:
    89                           	opt stack 0
    90  00100D                     _LCD_SIZE_VERT:
    91                           	opt stack 0
    92  00100D  02                 	db	2
    93  00100E                     __end_of_LCD_SIZE_VERT:
    94                           	opt stack 0
    95  00100E                     _LCD_SIZE_HORZ:
    96                           	opt stack 0
    97  00100E  10                 	db	16
    98  00100F                     __end_of_LCD_SIZE_HORZ:
    99                           	opt stack 0
   100  00100F                     _LCD_VERT_LIMIT:
   101                           	opt stack 0
   102  00100F  02                 	db	2
   103  001010                     __end_of_LCD_VERT_LIMIT:
   104                           	opt stack 0
   105  001010                     _LCD_HORZ_LIMIT:
   106                           	opt stack 0
   107  001010  28                 	db	40
   108  001011                     __end_of_LCD_HORZ_LIMIT:
   109                           	opt stack 0
   110  0000                     _INTCONbits	set	4082
   111  0000                     _LATDbits	set	3980
   112  0000                     _TRISCbits	set	3988
   113  0000                     _LATCbits	set	3979
   114  0000                     _ADRESH	set	4036
   115  0000                     _ADRESL	set	4035
   116  0000                     _ADCON0bits	set	4034
   117  0000                     _ADCON2bits	set	4032
   118  0000                     _ADCON1	set	4033
   119  0000                     _ADCON0	set	4034
   120  0000                     _TRISE	set	3990
   121  0000                     _TRISD	set	3989
   122  0000                     _TRISC	set	3988
   123  0000                     _TRISB	set	3987
   124  0000                     _TRISA	set	3986
   125  0000                     _LATE	set	3981
   126  0000                     _LATD	set	3980
   127  0000                     _LATC	set	3979
   128  0000                     _LATB	set	3978
   129  0000                     _LATA	set	3977
   130  0000                     _OSCCON	set	4051
   131  0000                     _ADON	set	32272
   132  001011                     STR_3:
   133  001011  64                 	db	100	;'d'
   134  001012  6F                 	db	111	;'o'
   135  001013  6E                 	db	110	;'n'
   136  001014  65                 	db	101	;'e'
   137  001015  00                 	db	0
   138  001016                     STR_1:
   139  001016  25                 	db	37
   140  001017  64                 	db	100	;'d'
   141  001018  00                 	db	0
   142  0000                     
   143                           ; #config settings
   144  001019  00                 	db	0	; dummy byte at the end
   145  0000                     
   146                           	psect	cinit
   147  0013B2                     __pcinit:
   148                           	opt stack 0
   149  0013B2                     start_initialization:
   150                           	opt stack 0
   151  0013B2                     __initialization:
   152                           	opt stack 0
   153                           
   154                           ; Initialize objects allocated to COMRAM (2 bytes)
   155                           ; load TBLPTR registers with __pidataCOMRAM
   156  0013B2  0E44               	movlw	low __pidataCOMRAM
   157  0013B4  6EF6               	movwf	tblptrl,c
   158  0013B6  0E14               	movlw	high __pidataCOMRAM
   159  0013B8  6EF7               	movwf	tblptrh,c
   160  0013BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   161  0013BC  6EF8               	movwf	tblptru,c
   162  0013BE  0009               	tblrd		*+	;fetch initializer
   163  0013C0  CFF5 F021          	movff	tablat,__pdataCOMRAM
   164  0013C4  0009               	tblrd		*+	;fetch initializer
   165  0013C6  CFF5 F022          	movff	tablat,__pdataCOMRAM+1
   166                           
   167                           ; Clear objects allocated to COMRAM (6 bytes)
   168  0013CA  6A20               	clrf	(__pbssCOMRAM+5)& (0+255),c
   169  0013CC  6A1F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   170  0013CE  6A1E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   171  0013D0  6A1D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   172  0013D2  6A1C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   173  0013D4  6A1B               	clrf	__pbssCOMRAM& (0+255),c
   174  0013D6                     end_of_initialization:
   175                           	opt stack 0
   176  0013D6                     __end_of__initialization:
   177                           	opt stack 0
   178  0013D6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   179  0013D8  6EF8               	movwf	tblptru,c
   180  0013DA  0100               	movlb	0
   181  0013DC  EF9C  F008         	goto	_main	;jump to C main() function
   182                           tblptru	equ	0xFF8
   183                           tblptrh	equ	0xFF7
   184                           tblptrl	equ	0xFF6
   185                           tablat	equ	0xFF5
   186                           
   187                           	psect	bssCOMRAM
   188  00001B                     __pbssCOMRAM:
   189                           	opt stack 0
   190  00001B                     _analog_result:
   191                           	opt stack 0
   192  00001B                     	ds	2
   193  00001D                     _counter:
   194                           	opt stack 0
   195  00001D                     	ds	2
   196  00001F                     lcd@LCDinterruptState:
   197                           	opt stack 0
   198  00001F                     	ds	1
   199  000020                     	ds	1
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           
   205                           	psect	dataCOMRAM
   206  000021                     __pdataCOMRAM:
   207                           	opt stack 0
   208  000021                     _max:
   209                           	opt stack 0
   210  000021                     	ds	2
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           
   216                           	psect	cstackCOMRAM
   217  000001                     __pcstackCOMRAM:
   218                           	opt stack 0
   219  000001                     ??_motorStart_0:
   220  000001                     ??_motorStop_0:
   221  000001                     ?_readADC:
   222                           	opt stack 0
   223  000001                     ?___lwdiv:
   224                           	opt stack 0
   225  000001                     lcdNibble@temp:
   226                           	opt stack 0
   227  000001                     ___lwdiv@dividend:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x0
   231  000001                     	ds	1
   232  000002                     lcdNibble@data:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0x1
   236  000002                     	ds	1
   237  000003                     ??_readADC:
   238  000003                     lcdInst@data:
   239                           	opt stack 0
   240  000003                     putch@data:
   241                           	opt stack 0
   242  000003                     ___lwdiv@divisor:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x2
   246  000003                     	ds	1
   247  000004                     ??_initLCD:
   248                           
   249                           ; 1 bytes @ 0x3
   250  000004                     	ds	1
   251  000005                     readADC@channel:
   252                           	opt stack 0
   253  000005                     ___lwdiv@quotient:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x4
   257  000005                     	ds	2
   258  000007                     ___lwdiv@counter:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0x6
   262  000007                     	ds	1
   263  000008                     ?___lwmod:
   264                           	opt stack 0
   265  000008                     ___lwmod@dividend:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x7
   269  000008                     	ds	2
   270  00000A                     ___lwmod@divisor:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x9
   274  00000A                     	ds	2
   275  00000C                     ___lwmod@counter:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0xB
   279  00000C                     	ds	1
   280  00000D                     ?_printf:
   281                           	opt stack 0
   282  00000D                     printf@f:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0xC
   286  00000D                     	ds	4
   287  000011                     ??_printf:
   288                           
   289                           ; 1 bytes @ 0x10
   290  000011                     	ds	1
   291  000012                     printf@ap:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x11
   295  000012                     	ds	2
   296  000014                     printf@flag:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x13
   300  000014                     	ds	1
   301  000015                     printf@prec:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x14
   305  000015                     	ds	1
   306  000016                     printf@val:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x15
   310  000016                     	ds	2
   311  000018                     printf@c:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x17
   315  000018                     	ds	1
   316  000019                     ??_main:
   317                           
   318                           ; 1 bytes @ 0x18
   319  000019                     	ds	2
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           
   325 ;;
   326 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   327 ;;
   328 ;; *************** function _main *****************
   329 ;; Defined at:
   330 ;;		line 46 in file "main.c"
   331 ;; Parameters:    Size  Location     Type
   332 ;;		None
   333 ;; Auto vars:     Size  Location     Type
   334 ;;		None
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   346 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   348 ;;Total ram usage:        2 bytes
   349 ;; Hardware stack levels required when called:    3
   350 ;; This function calls:
   351 ;;		_initLCD
   352 ;;		_motorStart_0
   353 ;;		_motorStop_0
   354 ;;		_printf
   355 ;;		_readADC
   356 ;; This function is called by:
   357 ;;		Startup code after reset
   358 ;; This function uses a non-reentrant model
   359 ;;
   360                           
   361                           	psect	text0
   362  001138                     __ptext0:
   363                           	opt stack 0
   364  001138                     _main:
   365                           	opt stack 28
   366                           
   367                           ;main.c: 50: OSCCON = 0xF2;
   368                           
   369                           ;incstack = 0
   370  001138  0EF2               	movlw	242
   371  00113A  6ED3               	movwf	4051,c	;volatile
   372                           
   373                           ;main.c: 55: LATA = 0x00;
   374  00113C  0E00               	movlw	0
   375  00113E  6E89               	movwf	3977,c	;volatile
   376                           
   377                           ;main.c: 56: LATB = 0x00;
   378  001140  0E00               	movlw	0
   379  001142  6E8A               	movwf	3978,c	;volatile
   380                           
   381                           ;main.c: 57: LATC = 0x00;
   382  001144  0E00               	movlw	0
   383  001146  6E8B               	movwf	3979,c	;volatile
   384                           
   385                           ;main.c: 58: LATD = 0x00;
   386  001148  0E00               	movlw	0
   387  00114A  6E8C               	movwf	3980,c	;volatile
   388                           
   389                           ;main.c: 59: LATE = 0x00;
   390  00114C  0E00               	movlw	0
   391  00114E  6E8D               	movwf	3981,c	;volatile
   392                           
   393                           ;main.c: 63: TRISA = 0xFF;
   394  001150  6892               	setf	3986,c	;volatile
   395                           
   396                           ;main.c: 64: TRISB = 0xFF;
   397  001152  6893               	setf	3987,c	;volatile
   398                           
   399                           ;main.c: 65: TRISC = 0x00;
   400  001154  0E00               	movlw	0
   401  001156  6E94               	movwf	3988,c	;volatile
   402                           
   403                           ;main.c: 66: TRISD = 0x00;
   404  001158  0E00               	movlw	0
   405  00115A  6E95               	movwf	3989,c	;volatile
   406                           
   407                           ;main.c: 67: TRISE = 0x00;
   408  00115C  0E00               	movlw	0
   409  00115E  6E96               	movwf	3990,c	;volatile
   410                           
   411                           ;main.c: 70: ADCON0 = 0x00;
   412  001160  0E00               	movlw	0
   413  001162  6EC2               	movwf	4034,c	;volatile
   414                           
   415                           ;main.c: 71: ADCON1 = 0x0B;
   416  001164  0E0B               	movlw	11
   417  001166  6EC1               	movwf	4033,c	;volatile
   418                           
   419                           ;main.c: 72: ADCON2bits.ADFM = 1;
   420  001168  8EC0               	bsf	4032,7,c	;volatile
   421                           
   422                           ;main.c: 79: initLCD();
   423  00116A  EC76  F009         	call	_initLCD	;wreg free
   424                           
   425                           ;main.c: 80: printf("%d",counter);
   426  00116E  0E16               	movlw	low STR_1
   427  001170  6E0D               	movwf	printf@f,c
   428  001172  0E10               	movlw	high STR_1
   429  001174  6E0E               	movwf	printf@f+1,c
   430  001176  C01D  F00F         	movff	_counter,?_printf+2
   431  00117A  C01E  F010         	movff	_counter+1,?_printf+3
   432  00117E  EC0D  F008         	call	_printf	;wreg free
   433                           
   434                           ;main.c: 81: _delay((unsigned long)((100)*(8000000/4000.0)));
   435  001182  0E02               	movlw	2
   436  001184  6E1A               	movwf	(??_main+1)& (0+255),c
   437  001186  0E04               	movlw	4
   438  001188  6E19               	movwf	??_main& (0+255),c
   439  00118A  0EBA               	movlw	186
   440  00118C                     u437:
   441  00118C  2EE8               	decfsz	wreg,f,c
   442  00118E  D7FE               	bra	u437
   443  001190  2E19               	decfsz	??_main& (0+255),f,c
   444  001192  D7FC               	bra	u437
   445  001194  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   446  001196  D7FA               	bra	u437
   447  001198  D000               	nop2	
   448                           
   449                           ;main.c: 85: motorStart_0();
   450  00119A  ECFF  F009         	call	_motorStart_0	;wreg free
   451  00119E                     l1172:
   452                           
   453                           ;main.c: 90: if (counter == max){
   454  00119E  5021               	movf	_max,w,c
   455  0011A0  181D               	xorwf	_counter,w,c
   456  0011A2  E107               	bnz	l1176
   457  0011A4  5022               	movf	_max+1,w,c
   458  0011A6  181E               	xorwf	_counter+1,w,c
   459  0011A8  A4D8               	btfss	status,2,c
   460  0011AA  D003               	goto	l78
   461                           
   462                           ;main.c: 91: motorStop_0();
   463  0011AC  ECF0  F009         	call	_motorStop_0	;wreg free
   464                           
   465                           ;main.c: 92: break;
   466  0011B0  D01F               	goto	l79
   467  0011B2                     l78:
   468  0011B2                     l1176:
   469                           
   470                           ;main.c: 93: }
   471                           ;main.c: 94: if (readADC(2)<=250 ){
   472  0011B2  0E02               	movlw	2
   473  0011B4  ECBD  F009         	call	_readADC
   474  0011B8  5002               	movf	?_readADC+1,w,c
   475  0011BA  E1F1               	bnz	l1172
   476  0011BC  0EFB               	movlw	251
   477  0011BE  5C01               	subwf	?_readADC,w,c
   478  0011C0  B0D8               	btfsc	status,0,c
   479  0011C2  D7ED               	goto	l77
   480                           
   481                           ;main.c: 96: counter ++;
   482  0011C4  4A1D               	infsnz	_counter,f,c
   483  0011C6  2A1E               	incf	_counter+1,f,c
   484                           
   485                           ;main.c: 97: initLCD();
   486  0011C8  EC76  F009         	call	_initLCD	;wreg free
   487                           
   488                           ;main.c: 98: printf("%d", counter);
   489  0011CC  0E16               	movlw	low STR_1
   490  0011CE  6E0D               	movwf	printf@f,c
   491  0011D0  0E10               	movlw	high STR_1
   492  0011D2  6E0E               	movwf	printf@f+1,c
   493  0011D4  C01D  F00F         	movff	_counter,?_printf+2
   494  0011D8  C01E  F010         	movff	_counter+1,?_printf+3
   495  0011DC  EC0D  F008         	call	_printf	;wreg free
   496                           
   497                           ;main.c: 99: _delay((unsigned long)((50)*(8000000/4000.0)));
   498  0011E0  0E82               	movlw	130
   499  0011E2  6E19               	movwf	??_main& (0+255),c
   500  0011E4  0EDE               	movlw	222
   501  0011E6                     u447:
   502  0011E6  2EE8               	decfsz	wreg,f,c
   503  0011E8  D7FE               	bra	u447
   504  0011EA  2E19               	decfsz	??_main& (0+255),f,c
   505  0011EC  D7FC               	bra	u447
   506  0011EE  D7D7               	goto	l77
   507  0011F0                     l79:
   508                           
   509                           ;main.c: 107: motorStop_0();
   510                           
   511                           ;main.c: 100: }
   512                           ;main.c: 105: }
   513                           ;main.c: 106: while(1){
   514  0011F0  ECF0  F009         	call	_motorStop_0	;wreg free
   515                           
   516                           ;main.c: 108: initLCD();
   517  0011F4  EC76  F009         	call	_initLCD	;wreg free
   518                           
   519                           ;main.c: 109: printf("done");
   520  0011F8  0E11               	movlw	low STR_3
   521  0011FA  6E0D               	movwf	printf@f,c
   522  0011FC  0E10               	movlw	high STR_3
   523  0011FE  6E0E               	movwf	printf@f+1,c
   524  001200  EC0D  F008         	call	_printf	;wreg free
   525                           
   526                           ;main.c: 110: _delay((unsigned long)((300)*(8000000/4000.0)));
   527  001204  0E04               	movlw	4
   528  001206  6E1A               	movwf	(??_main+1)& (0+255),c
   529  001208  0E0C               	movlw	12
   530  00120A  6E19               	movwf	??_main& (0+255),c
   531  00120C  0E34               	movlw	52
   532  00120E                     u457:
   533  00120E  2EE8               	decfsz	wreg,f,c
   534  001210  D7FE               	bra	u457
   535  001212  2E19               	decfsz	??_main& (0+255),f,c
   536  001214  D7FC               	bra	u457
   537  001216  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   538  001218  D7FA               	bra	u457
   539  00121A  D7EA               	goto	l79
   540  00121C                     __end_of_main:
   541                           	opt stack 0
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           wreg	equ	0xFE8
   547                           status	equ	0xFD8
   548                           
   549 ;; *************** function _readADC *****************
   550 ;; Defined at:
   551 ;;		line 137 in file "main.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;  channel         1    wreg     unsigned char 
   554 ;; Auto vars:     Size  Location     Type
   555 ;;  channel         1    4[COMRAM] unsigned char 
   556 ;; Return value:  Size  Location     Type
   557 ;;                  2    0[COMRAM] unsigned short 
   558 ;; Registers used:
   559 ;;		wreg, status,2, status,0
   560 ;; Tracked objects:
   561 ;;		On entry : 0/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   565 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   567 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   568 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   569 ;;Total ram usage:        5 bytes
   570 ;; Hardware stack levels used:    1
   571 ;; This function calls:
   572 ;;		Nothing
   573 ;; This function is called by:
   574 ;;		_main
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578                           	psect	text1
   579  00137A                     __ptext1:
   580                           	opt stack 0
   581  00137A                     _readADC:
   582                           	opt stack 30
   583                           
   584                           ;incstack = 0
   585                           ;readADC@channel stored from wreg
   586  00137A  6E05               	movwf	readADC@channel,c
   587                           
   588                           ;main.c: 146: ADCON0 = (channel & 0x0F) << 2;
   589  00137C  C005  F003         	movff	readADC@channel,??_readADC
   590  001380  0E0F               	movlw	15
   591  001382  1603               	andwf	??_readADC,f,c
   592  001384  90D8               	bcf	status,0,c
   593  001386  3603               	rlcf	??_readADC,f,c
   594  001388  90D8               	bcf	status,0,c
   595  00138A  3403               	rlcf	??_readADC,w,c
   596  00138C  6EC2               	movwf	4034,c	;volatile
   597                           
   598                           ;main.c: 147: ADON = 1;
   599  00138E  80C2               	bsf	4034,0,c	;volatile
   600                           
   601                           ;main.c: 148: ADCON0bits.GO = 1;
   602  001390  82C2               	bsf	4034,1,c	;volatile
   603  001392  B2C2               	btfsc	4034,1,c	;volatile
   604  001394  D7FE               	goto	l89
   605                           
   606                           ;main.c: 150: analog_result = ADRESL + (ADRESH*256);
   607  001396  50C4               	movf	4036,w,c	;volatile
   608  001398  6E04               	movwf	(??_readADC+1)& (0+255),c
   609  00139A  6A03               	clrf	??_readADC& (0+255),c
   610  00139C  50C3               	movf	4035,w,c	;volatile
   611  00139E  2403               	addwf	??_readADC,w,c
   612  0013A0  6E1B               	movwf	_analog_result,c
   613  0013A2  0E00               	movlw	0
   614  0013A4  2004               	addwfc	??_readADC+1,w,c
   615  0013A6  6E1C               	movwf	_analog_result+1,c
   616                           
   617                           ;main.c: 151: return analog_result;
   618  0013A8  C01B  F001         	movff	_analog_result,?_readADC
   619  0013AC  C01C  F002         	movff	_analog_result+1,?_readADC+1
   620  0013B0  0012               	return	
   621  0013B2                     __end_of_readADC:
   622                           	opt stack 0
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           wreg	equ	0xFE8
   628                           status	equ	0xFD8
   629                           
   630 ;; *************** function _printf *****************
   631 ;; Defined at:
   632 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  f               2   12[COMRAM] PTR const unsigned char 
   635 ;;		 -> STR_3(5), STR_2(3), STR_1(3), 
   636 ;; Auto vars:     Size  Location     Type
   637 ;;  tmpval          4    0        struct .
   638 ;;  cp              3    0        PTR const unsigned char 
   639 ;;  val             2   21[COMRAM] unsigned int 
   640 ;;  ap              2   17[COMRAM] PTR void [1]
   641 ;;		 -> ?_printf(2), 
   642 ;;  len             2    0        unsigned int 
   643 ;;  c               1   23[COMRAM] char 
   644 ;;  prec            1   20[COMRAM] char 
   645 ;;  flag            1   19[COMRAM] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  2   12[COMRAM] int 
   648 ;; Registers used:
   649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   655 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   656 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   657 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   658 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   659 ;;Total ram usage:       12 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    2
   662 ;; This function calls:
   663 ;;		___lwdiv
   664 ;;		___lwmod
   665 ;;		_putch
   666 ;; This function is called by:
   667 ;;		_main
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           	psect	text2
   672  00101A                     __ptext2:
   673                           	opt stack 0
   674  00101A                     _printf:
   675                           	opt stack 28
   676                           
   677                           ;doprnt.c: 466: va_list ap;
   678                           ;doprnt.c: 499: signed char c;
   679                           ;doprnt.c: 506: signed char prec;
   680                           ;doprnt.c: 508: unsigned char flag;
   681                           ;doprnt.c: 523: union {
   682                           ;doprnt.c: 524: unsigned long vd;
   683                           ;doprnt.c: 525: double integ;
   684                           ;doprnt.c: 526: } tmpval;
   685                           ;doprnt.c: 528: unsigned int val;
   686                           ;doprnt.c: 529: unsigned len;
   687                           ;doprnt.c: 530: const char * cp;
   688                           ;doprnt.c: 533: *ap = __va_start();
   689                           
   690                           ;incstack = 0
   691  00101A  0E0F               	movlw	low (?_printf+2)
   692  00101C  6E12               	movwf	printf@ap,c
   693  00101E  0E00               	movlw	high (?_printf+2)
   694  001020  6E13               	movwf	printf@ap+1,c
   695                           
   696                           ;doprnt.c: 536: while(c = *f++) {
   697  001022  D07D               	goto	u380
   698  001024                     
   699                           ;doprnt.c: 538: if(c != '%')
   700  001024  0E25               	movlw	37
   701  001026  1818               	xorwf	printf@c,w,c
   702  001028  B4D8               	btfsc	status,2,c
   703  00102A  D004               	goto	l165
   704                           
   705                           ;doprnt.c: 540: {
   706                           ;doprnt.c: 541: (putch(c) );
   707  00102C  5018               	movf	printf@c,w,c
   708  00102E  EC0E  F00A         	call	_putch
   709                           
   710                           ;doprnt.c: 542: continue;
   711  001032  D075               	goto	u380
   712  001034                     l165:
   713                           
   714                           ;doprnt.c: 543: }
   715                           ;doprnt.c: 548: flag = 0;
   716  001034  0E00               	movlw	0
   717  001036  6E14               	movwf	printf@flag,c
   718                           
   719                           ;doprnt.c: 822: }
   720                           
   721                           ;doprnt.c: 813: continue;
   722                           
   723                           ;doprnt.c: 802: default:
   724                           
   725                           ;doprnt.c: 698: case 'i':
   726                           ;doprnt.c: 699: break;
   727                           
   728                           ;doprnt.c: 697: case 'd':
   729                           
   730                           ;doprnt.c: 638: goto alldone;
   731                           
   732                           ;doprnt.c: 637: case 0:
   733                           
   734                           ;doprnt.c: 635: switch(c = *f++) {
   735  001038  C00D  FFF6         	movff	printf@f,tblptrl
   736  00103C  C00E  FFF7         	movff	printf@f+1,tblptrh
   737  001040  4A0D               	infsnz	printf@f,f,c
   738  001042  2A0E               	incf	printf@f+1,f,c
   739  001044                     	if	0	;tblptru may be non-zero
   740  001044                     	endif
   741  001044                     	if	0	;tblptru may be non-zero
   742  001044                     	endif
   743  001044  0008               	tblrd		*
   744  001046  CFF5 F018          	movff	tablat,printf@c
   745  00104A  5018               	movf	printf@c,w,c
   746                           
   747                           ; Switch size 1, requested type "space"
   748                           ; Number of cases is 3, Range of values is 0 to 105
   749                           ; switch strategies available:
   750                           ; Name         Instructions Cycles
   751                           ; simple_byte           10     6 (average)
   752                           ;	Chosen strategy is simple_byte
   753  00104C  0A00               	xorlw	0	; case 0
   754  00104E  B4D8               	btfsc	status,2,c
   755  001050  0012               	return	
   756  001052  0A64               	xorlw	100	; case 100
   757  001054  B4D8               	btfsc	status,2,c
   758  001056  D003               	goto	l171
   759  001058  0A0D               	xorlw	13	; case 105
   760  00105A  A4D8               	btfss	status,2,c
   761  00105C  D060               	goto	u380
   762  00105E                     l171:
   763                           
   764                           ;doprnt.c: 1253: {
   765                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   766  00105E  C012  FFD9         	movff	printf@ap,fsr2l
   767  001062  C013  FFDA         	movff	printf@ap+1,fsr2h
   768  001066  CFDE F016          	movff	postinc2,printf@val
   769  00106A  CFDD F017          	movff	postdec2,printf@val+1
   770  00106E  0E02               	movlw	2
   771  001070  2612               	addwf	printf@ap,f,c
   772  001072  0E00               	movlw	0
   773  001074  2213               	addwfc	printf@ap+1,f,c
   774                           
   775                           ;doprnt.c: 1261: if((int)val < 0) {
   776  001076  AE17               	btfss	printf@val+1,7,c
   777  001078  D006               	goto	l173
   778                           
   779                           ;doprnt.c: 1262: flag |= 0x03;
   780  00107A  0E03               	movlw	3
   781  00107C  1214               	iorwf	printf@flag,f,c
   782                           
   783                           ;doprnt.c: 1263: val = -val;
   784  00107E  6C16               	negf	printf@val,c
   785  001080  1E17               	comf	printf@val+1,f,c
   786  001082  B0D8               	btfsc	status,0,c
   787  001084  2A17               	incf	printf@val+1,f,c
   788  001086                     l173:
   789                           
   790                           ;doprnt.c: 1264: }
   791                           ;doprnt.c: 1266: }
   792                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   793  001086  0E01               	movlw	1
   794  001088  6E18               	movwf	printf@c,c
   795  00108A                     l1118:
   796  00108A  0E05               	movlw	5
   797  00108C  1818               	xorwf	printf@c,w,c
   798  00108E  B4D8               	btfsc	status,2,c
   799  001090  D012               	goto	u360
   800                           
   801                           ;doprnt.c: 1306: if(val < dpowers[c])
   802  001092  5018               	movf	printf@c,w,c
   803  001094  0D02               	mullw	2
   804  001096  0E01               	movlw	low _dpowers
   805  001098  24F3               	addwf	prodl,w,c
   806  00109A  6EF6               	movwf	tblptrl,c
   807  00109C  0E10               	movlw	high _dpowers
   808  00109E  20F4               	addwfc	prodh,w,c
   809  0010A0  6EF7               	movwf	tblptrh,c
   810  0010A2                     	if	0	;There are less than 3 active tblptr bytes
   811  0010A2                     	endif
   812  0010A2  0009               	tblrd		*+
   813  0010A4  50F5               	movf	tablat,w,c
   814  0010A6  5C16               	subwf	printf@val,w,c
   815  0010A8  0009               	tblrd		*+
   816  0010AA  50F5               	movf	tablat,w,c
   817  0010AC  5817               	subwfb	printf@val+1,w,c
   818  0010AE  A0D8               	btfss	status,0,c
   819  0010B0  D002               	goto	u360
   820                           
   821                           ;doprnt.c: 1307: break;
   822  0010B2  2A18               	incf	printf@c,f,c
   823  0010B4  D7EA               	goto	l1118
   824  0010B6                     u360:
   825                           
   826                           ;doprnt.c: 1422: {
   827                           ;doprnt.c: 1438: if(flag & 0x03)
   828  0010B6  C014  F011         	movff	printf@flag,??_printf
   829  0010BA  0E03               	movlw	3
   830  0010BC  1611               	andwf	??_printf,f,c
   831  0010BE  B4D8               	btfsc	status,2,c
   832  0010C0  D003               	goto	l177
   833                           
   834                           ;doprnt.c: 1439: (putch('-') );
   835  0010C2  0E2D               	movlw	45
   836  0010C4  EC0E  F00A         	call	_putch
   837  0010C8                     l177:
   838                           
   839                           ;doprnt.c: 1469: }
   840                           ;doprnt.c: 1472: prec = c;
   841  0010C8  C018  F015         	movff	printf@c,printf@prec
   842                           
   843                           ;doprnt.c: 1474: while(prec--) {
   844  0010CC  D024               	goto	l178
   845  0010CE                     
   846                           ;doprnt.c: 1478: {
   847                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   848  0010CE  5015               	movf	printf@prec,w,c
   849  0010D0  0D02               	mullw	2
   850  0010D2  0E01               	movlw	low _dpowers
   851  0010D4  24F3               	addwf	prodl,w,c
   852  0010D6  6EF6               	movwf	tblptrl,c
   853  0010D8  0E10               	movlw	high _dpowers
   854  0010DA  20F4               	addwfc	prodh,w,c
   855  0010DC  6EF7               	movwf	tblptrh,c
   856  0010DE                     	if	0	;There are less than 3 active tblptr bytes
   857  0010DE                     	endif
   858  0010DE  0009               	tblrd		*+
   859  0010E0  CFF5 F003          	movff	tablat,___lwdiv@divisor
   860  0010E4  000A               	tblrd		*-
   861  0010E6  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   862  0010EA  C016  F001         	movff	printf@val,___lwdiv@dividend
   863  0010EE  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   864  0010F2  EC4D  F009         	call	___lwdiv	;wreg free
   865  0010F6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   866  0010FA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   867  0010FE  0E00               	movlw	0
   868  001100  6E0B               	movwf	___lwmod@divisor+1,c
   869  001102  0E0A               	movlw	10
   870  001104  6E0A               	movwf	___lwmod@divisor,c
   871  001106  EC9C  F009         	call	___lwmod	;wreg free
   872  00110A  5008               	movf	?___lwmod,w,c
   873  00110C  0F30               	addlw	48
   874  00110E  6E18               	movwf	printf@c,c
   875                           
   876                           ;doprnt.c: 1523: }
   877                           ;doprnt.c: 1524: (putch(c) );
   878  001110  5018               	movf	printf@c,w,c
   879  001112  EC0E  F00A         	call	_putch
   880  001116                     l178:
   881  001116  0615               	decf	printf@prec,f,c
   882  001118  2815               	incf	printf@prec,w,c
   883  00111A  A4D8               	btfss	status,2,c
   884  00111C  D7D8               	goto	l179
   885  00111E                     u380:
   886  00111E  C00D  FFF6         	movff	printf@f,tblptrl
   887  001122  C00E  FFF7         	movff	printf@f+1,tblptrh
   888  001126  4A0D               	infsnz	printf@f,f,c
   889  001128  2A0E               	incf	printf@f+1,f,c
   890  00112A                     	if	0	;tblptru may be non-zero
   891  00112A                     	endif
   892  00112A                     	if	0	;tblptru may be non-zero
   893  00112A                     	endif
   894  00112A  0008               	tblrd		*
   895  00112C  CFF5 F018          	movff	tablat,printf@c
   896  001130  5018               	movf	printf@c,w,c
   897  001132  B4D8               	btfsc	status,2,c
   898  001134  0012               	return	
   899  001136  D776               	goto	l164
   900  001138                     __end_of_printf:
   901                           	opt stack 0
   902                           tblptru	equ	0xFF8
   903                           tblptrh	equ	0xFF7
   904                           tblptrl	equ	0xFF6
   905                           tablat	equ	0xFF5
   906                           prodh	equ	0xFF4
   907                           prodl	equ	0xFF3
   908                           wreg	equ	0xFE8
   909                           postinc2	equ	0xFDE
   910                           postdec2	equ	0xFDD
   911                           fsr2h	equ	0xFDA
   912                           fsr2l	equ	0xFD9
   913                           status	equ	0xFD8
   914                           
   915 ;; *************** function _putch *****************
   916 ;; Defined at:
   917 ;;		line 24 in file "lcd.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  data            1    wreg     unsigned char 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  data            1    2[COMRAM] unsigned char 
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;Total ram usage:        1 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    1
   938 ;; This function calls:
   939 ;;		_lcdNibble
   940 ;; This function is called by:
   941 ;;		_printf
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text3
   946  00141C                     __ptext3:
   947                           	opt stack 0
   948  00141C                     _putch:
   949                           	opt stack 28
   950                           
   951                           ;incstack = 0
   952                           ;putch@data stored from wreg
   953  00141C  6E03               	movwf	putch@data,c
   954                           
   955                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   956  00141E  848C               	bsf	3980,2,c	;volatile
   957                           
   958                           ;lcd.c: 33: lcdNibble(data);
   959  001420  5003               	movf	putch@data,w,c
   960  001422  EC0E  F009         	call	_lcdNibble
   961                           
   962                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
   963  001426  0E42               	movlw	66
   964  001428                     u467:
   965  001428  2EE8               	decfsz	wreg,f,c
   966  00142A  D7FE               	bra	u467
   967  00142C  D000               	nop2	
   968  00142E  0012               	return		;funcret
   969  001430                     __end_of_putch:
   970                           	opt stack 0
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           prodh	equ	0xFF4
   976                           prodl	equ	0xFF3
   977                           wreg	equ	0xFE8
   978                           postinc2	equ	0xFDE
   979                           postdec2	equ	0xFDD
   980                           fsr2h	equ	0xFDA
   981                           fsr2l	equ	0xFD9
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function ___lwmod *****************
   985 ;; Defined at:
   986 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  dividend        2    7[COMRAM] unsigned int 
   989 ;;  divisor         2    9[COMRAM] unsigned int 
   990 ;; Auto vars:     Size  Location     Type
   991 ;;  counter         1   11[COMRAM] unsigned char 
   992 ;; Return value:  Size  Location     Type
   993 ;;                  2    7[COMRAM] unsigned int 
   994 ;; Registers used:
   995 ;;		wreg, status,2, status,0
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1001 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;Total ram usage:        5 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; This function calls:
  1008 ;;		Nothing
  1009 ;; This function is called by:
  1010 ;;		_printf
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           	psect	text4
  1015  001338                     __ptext4:
  1016                           	opt stack 0
  1017  001338                     ___lwmod:
  1018                           	opt stack 29
  1019                           
  1020                           ;incstack = 0
  1021  001338  500A               	movf	___lwmod@divisor,w,c
  1022  00133A  100B               	iorwf	___lwmod@divisor+1,w,c
  1023  00133C  B4D8               	btfsc	status,2,c
  1024  00133E  D018               	goto	l601
  1025  001340  0E01               	movlw	1
  1026  001342  6E0C               	movwf	___lwmod@counter,c
  1027  001344  D004               	goto	l596
  1028  001346  90D8               	bcf	status,0,c
  1029  001348  360A               	rlcf	___lwmod@divisor,f,c
  1030  00134A  360B               	rlcf	___lwmod@divisor+1,f,c
  1031  00134C  2A0C               	incf	___lwmod@counter,f,c
  1032  00134E                     l596:
  1033  00134E  AE0B               	btfss	___lwmod@divisor+1,7,c
  1034  001350  D7FA               	goto	l597
  1035  001352                     u300:
  1036  001352  500A               	movf	___lwmod@divisor,w,c
  1037  001354  5C08               	subwf	___lwmod@dividend,w,c
  1038  001356  500B               	movf	___lwmod@divisor+1,w,c
  1039  001358  5809               	subwfb	___lwmod@dividend+1,w,c
  1040  00135A  A0D8               	btfss	status,0,c
  1041  00135C  D004               	goto	l600
  1042  00135E  500A               	movf	___lwmod@divisor,w,c
  1043  001360  5E08               	subwf	___lwmod@dividend,f,c
  1044  001362  500B               	movf	___lwmod@divisor+1,w,c
  1045  001364  5A09               	subwfb	___lwmod@dividend+1,f,c
  1046  001366                     l600:
  1047  001366  90D8               	bcf	status,0,c
  1048  001368  320B               	rrcf	___lwmod@divisor+1,f,c
  1049  00136A  320A               	rrcf	___lwmod@divisor,f,c
  1050  00136C  2E0C               	decfsz	___lwmod@counter,f,c
  1051  00136E  D7F1               	goto	u300
  1052  001370                     l601:
  1053  001370  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1054  001374  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1055  001378  0012               	return		;funcret
  1056  00137A                     __end_of___lwmod:
  1057                           	opt stack 0
  1058                           tblptru	equ	0xFF8
  1059                           tblptrh	equ	0xFF7
  1060                           tblptrl	equ	0xFF6
  1061                           tablat	equ	0xFF5
  1062                           prodh	equ	0xFF4
  1063                           prodl	equ	0xFF3
  1064                           wreg	equ	0xFE8
  1065                           postinc2	equ	0xFDE
  1066                           postdec2	equ	0xFDD
  1067                           fsr2h	equ	0xFDA
  1068                           fsr2l	equ	0xFD9
  1069                           status	equ	0xFD8
  1070                           
  1071 ;; *************** function ___lwdiv *****************
  1072 ;; Defined at:
  1073 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  dividend        2    0[COMRAM] unsigned int 
  1076 ;;  divisor         2    2[COMRAM] unsigned int 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  quotient        2    4[COMRAM] unsigned int 
  1079 ;;  counter         1    6[COMRAM] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  2    0[COMRAM] unsigned int 
  1082 ;; Registers used:
  1083 ;;		wreg, status,2, status,0
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1089 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;Total ram usage:        7 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_printf
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text5
  1103  00129A                     __ptext5:
  1104                           	opt stack 0
  1105  00129A                     ___lwdiv:
  1106                           	opt stack 29
  1107                           
  1108                           ;incstack = 0
  1109  00129A  0E00               	movlw	0
  1110  00129C  6E06               	movwf	___lwdiv@quotient+1,c
  1111  00129E  0E00               	movlw	0
  1112  0012A0  6E05               	movwf	___lwdiv@quotient,c
  1113  0012A2  5003               	movf	___lwdiv@divisor,w,c
  1114  0012A4  1004               	iorwf	___lwdiv@divisor+1,w,c
  1115  0012A6  B4D8               	btfsc	status,2,c
  1116  0012A8  D01C               	goto	l591
  1117  0012AA  0E01               	movlw	1
  1118  0012AC  6E07               	movwf	___lwdiv@counter,c
  1119  0012AE  D004               	goto	l586
  1120  0012B0  90D8               	bcf	status,0,c
  1121  0012B2  3603               	rlcf	___lwdiv@divisor,f,c
  1122  0012B4  3604               	rlcf	___lwdiv@divisor+1,f,c
  1123  0012B6  2A07               	incf	___lwdiv@counter,f,c
  1124  0012B8                     l586:
  1125  0012B8  AE04               	btfss	___lwdiv@divisor+1,7,c
  1126  0012BA  D7FA               	goto	l587
  1127  0012BC                     u270:
  1128  0012BC  90D8               	bcf	status,0,c
  1129  0012BE  3605               	rlcf	___lwdiv@quotient,f,c
  1130  0012C0  3606               	rlcf	___lwdiv@quotient+1,f,c
  1131  0012C2  5003               	movf	___lwdiv@divisor,w,c
  1132  0012C4  5C01               	subwf	___lwdiv@dividend,w,c
  1133  0012C6  5004               	movf	___lwdiv@divisor+1,w,c
  1134  0012C8  5802               	subwfb	___lwdiv@dividend+1,w,c
  1135  0012CA  A0D8               	btfss	status,0,c
  1136  0012CC  D005               	goto	l590
  1137  0012CE  5003               	movf	___lwdiv@divisor,w,c
  1138  0012D0  5E01               	subwf	___lwdiv@dividend,f,c
  1139  0012D2  5004               	movf	___lwdiv@divisor+1,w,c
  1140  0012D4  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1141  0012D6  8005               	bsf	___lwdiv@quotient,0,c
  1142  0012D8                     l590:
  1143  0012D8  90D8               	bcf	status,0,c
  1144  0012DA  3204               	rrcf	___lwdiv@divisor+1,f,c
  1145  0012DC  3203               	rrcf	___lwdiv@divisor,f,c
  1146  0012DE  2E07               	decfsz	___lwdiv@counter,f,c
  1147  0012E0  D7ED               	goto	u270
  1148  0012E2                     l591:
  1149  0012E2  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1150  0012E6  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1151  0012EA  0012               	return		;funcret
  1152  0012EC                     __end_of___lwdiv:
  1153                           	opt stack 0
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           prodh	equ	0xFF4
  1159                           prodl	equ	0xFF3
  1160                           wreg	equ	0xFE8
  1161                           postinc2	equ	0xFDE
  1162                           postdec2	equ	0xFDD
  1163                           fsr2h	equ	0xFDA
  1164                           fsr2l	equ	0xFD9
  1165                           status	equ	0xFD8
  1166                           
  1167 ;; *************** function _motorStop_0 *****************
  1168 ;; Defined at:
  1169 ;;		line 167 in file "main.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;		None
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;Total ram usage:        2 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; This function calls:
  1190 ;;		Nothing
  1191 ;; This function is called by:
  1192 ;;		_main
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           	psect	text6
  1197  0013E0                     __ptext6:
  1198                           	opt stack 0
  1199  0013E0                     _motorStop_0:
  1200                           	opt stack 30
  1201                           
  1202                           ;main.c: 168: LATCbits.LATC0 = 0;
  1203                           
  1204                           ;incstack = 0
  1205  0013E0  908B               	bcf	3979,0,c	;volatile
  1206                           
  1207                           ;main.c: 169: TRISCbits.RC0 = 0;
  1208  0013E2  9094               	bcf	3988,0,c	;volatile
  1209                           
  1210                           ;main.c: 171: _delay((unsigned long)((200)*(8000000/4000.0)));
  1211  0013E4  0E03               	movlw	3
  1212  0013E6  6E02               	movwf	(??_motorStop_0+1)& (0+255),c
  1213  0013E8  0E08               	movlw	8
  1214  0013EA  6E01               	movwf	??_motorStop_0& (0+255),c
  1215  0013EC  0E77               	movlw	119
  1216  0013EE                     u477:
  1217  0013EE  2EE8               	decfsz	wreg,f,c
  1218  0013F0  D7FE               	bra	u477
  1219  0013F2  2E01               	decfsz	??_motorStop_0& (0+255),f,c
  1220  0013F4  D7FC               	bra	u477
  1221  0013F6  2E02               	decfsz	(??_motorStop_0+1)& (0+255),f,c
  1222  0013F8  D7FA               	bra	u477
  1223  0013FA  F000               	nop	
  1224  0013FC  0012               	return		;funcret
  1225  0013FE                     __end_of_motorStop_0:
  1226                           	opt stack 0
  1227                           tblptru	equ	0xFF8
  1228                           tblptrh	equ	0xFF7
  1229                           tblptrl	equ	0xFF6
  1230                           tablat	equ	0xFF5
  1231                           prodh	equ	0xFF4
  1232                           prodl	equ	0xFF3
  1233                           wreg	equ	0xFE8
  1234                           postinc2	equ	0xFDE
  1235                           postdec2	equ	0xFDD
  1236                           fsr2h	equ	0xFDA
  1237                           fsr2l	equ	0xFD9
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _motorStart_0 *****************
  1241 ;; Defined at:
  1242 ;;		line 158 in file "main.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;Total ram usage:        2 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_main
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text7
  1270  0013FE                     __ptext7:
  1271                           	opt stack 0
  1272  0013FE                     _motorStart_0:
  1273                           	opt stack 30
  1274                           
  1275                           ;main.c: 160: LATCbits.LATC0 = 1;
  1276                           
  1277                           ;incstack = 0
  1278  0013FE  808B               	bsf	3979,0,c	;volatile
  1279                           
  1280                           ;main.c: 161: TRISCbits.RC0 = 0;
  1281  001400  9094               	bcf	3988,0,c	;volatile
  1282                           
  1283                           ;main.c: 163: _delay((unsigned long)((200)*(8000000/4000.0)));
  1284  001402  0E03               	movlw	3
  1285  001404  6E02               	movwf	(??_motorStart_0+1)& (0+255),c
  1286  001406  0E08               	movlw	8
  1287  001408  6E01               	movwf	??_motorStart_0& (0+255),c
  1288  00140A  0E77               	movlw	119
  1289  00140C                     u487:
  1290  00140C  2EE8               	decfsz	wreg,f,c
  1291  00140E  D7FE               	bra	u487
  1292  001410  2E01               	decfsz	??_motorStart_0& (0+255),f,c
  1293  001412  D7FC               	bra	u487
  1294  001414  2E02               	decfsz	(??_motorStart_0+1)& (0+255),f,c
  1295  001416  D7FA               	bra	u487
  1296  001418  F000               	nop	
  1297  00141A  0012               	return		;funcret
  1298  00141C                     __end_of_motorStart_0:
  1299                           	opt stack 0
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           prodh	equ	0xFF4
  1305                           prodl	equ	0xFF3
  1306                           wreg	equ	0xFE8
  1307                           postinc2	equ	0xFDE
  1308                           postdec2	equ	0xFDD
  1309                           fsr2h	equ	0xFDA
  1310                           fsr2l	equ	0xFD9
  1311                           status	equ	0xFD8
  1312                           
  1313 ;; *************** function _initLCD *****************
  1314 ;; Defined at:
  1315 ;;		line 60 in file "lcd.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      void 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2, status,0, cstack
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;Total ram usage:        1 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    2
  1336 ;; This function calls:
  1337 ;;		_lcdInst
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text8
  1344  0012EC                     __ptext8:
  1345                           	opt stack 0
  1346  0012EC                     _initLCD:
  1347                           	opt stack 28
  1348                           
  1349                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  1350                           
  1351                           ;incstack = 0
  1352  0012EC  0E27               	movlw	39
  1353  0012EE  6E04               	movwf	??_initLCD& (0+255),c
  1354  0012F0  0EF5               	movlw	245
  1355  0012F2                     u497:
  1356  0012F2  2EE8               	decfsz	wreg,f,c
  1357  0012F4  D7FE               	bra	u497
  1358  0012F6  2E04               	decfsz	??_initLCD& (0+255),f,c
  1359  0012F8  D7FC               	bra	u497
  1360  0012FA  F000               	nop	
  1361                           
  1362                           ;lcd.c: 69: lcdInst(0b00110011);
  1363  0012FC  0E33               	movlw	51
  1364  0012FE  EC18  F00A         	call	_lcdInst
  1365                           
  1366                           ;lcd.c: 70: lcdInst(0b00110010);
  1367  001302  0E32               	movlw	50
  1368  001304  EC18  F00A         	call	_lcdInst
  1369                           
  1370                           ;lcd.c: 71: lcdInst(0b00101000);
  1371  001308  0E28               	movlw	40
  1372  00130A  EC18  F00A         	call	_lcdInst
  1373                           
  1374                           ;lcd.c: 72: lcdInst(0b00001111);
  1375  00130E  0E0F               	movlw	15
  1376  001310  EC18  F00A         	call	_lcdInst
  1377                           
  1378                           ;lcd.c: 73: lcdInst(0b00000110);
  1379  001314  0E06               	movlw	6
  1380  001316  EC18  F00A         	call	_lcdInst
  1381                           
  1382                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  1383  00131A  0E01               	movlw	1
  1384  00131C  EC18  F00A         	call	_lcdInst
  1385  001320  0E27               	movlw	39
  1386  001322  6E04               	movwf	??_initLCD& (0+255),c
  1387  001324  0EF5               	movlw	245
  1388  001326                     u507:
  1389  001326  2EE8               	decfsz	wreg,f,c
  1390  001328  D7FE               	bra	u507
  1391  00132A  2E04               	decfsz	??_initLCD& (0+255),f,c
  1392  00132C  D7FC               	bra	u507
  1393  00132E  F000               	nop	
  1394                           
  1395                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1396  001330  0E0F               	movlw	15
  1397  001332  EC18  F00A         	call	_lcdInst
  1398  001336  0012               	return		;funcret
  1399  001338                     __end_of_initLCD:
  1400                           	opt stack 0
  1401                           tblptru	equ	0xFF8
  1402                           tblptrh	equ	0xFF7
  1403                           tblptrl	equ	0xFF6
  1404                           tablat	equ	0xFF5
  1405                           prodh	equ	0xFF4
  1406                           prodl	equ	0xFF3
  1407                           wreg	equ	0xFE8
  1408                           postinc2	equ	0xFDE
  1409                           postdec2	equ	0xFDD
  1410                           fsr2h	equ	0xFDA
  1411                           fsr2l	equ	0xFD9
  1412                           status	equ	0xFD8
  1413                           
  1414 ;; *************** function _lcdInst *****************
  1415 ;; Defined at:
  1416 ;;		line 11 in file "lcd.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  data            1    wreg     unsigned char 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  data            1    2[COMRAM] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;Total ram usage:        1 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    1
  1437 ;; This function calls:
  1438 ;;		_lcdNibble
  1439 ;; This function is called by:
  1440 ;;		_initLCD
  1441 ;;		_lcd_set_cursor
  1442 ;;		_lcd_shift_cursor
  1443 ;;		_lcd_shift_display
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text9
  1448  001430                     __ptext9:
  1449                           	opt stack 0
  1450  001430                     _lcdInst:
  1451                           	opt stack 28
  1452                           
  1453                           ;incstack = 0
  1454                           ;lcdInst@data stored from wreg
  1455  001430  6E03               	movwf	lcdInst@data,c
  1456                           
  1457                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1458  001432  948C               	bcf	3980,2,c	;volatile
  1459                           
  1460                           ;lcd.c: 20: lcdNibble(data);
  1461  001434  5003               	movf	lcdInst@data,w,c
  1462  001436  EC0E  F009         	call	_lcdNibble
  1463                           
  1464                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1465  00143A  0E42               	movlw	66
  1466  00143C                     u517:
  1467  00143C  2EE8               	decfsz	wreg,f,c
  1468  00143E  D7FE               	bra	u517
  1469  001440  D000               	nop2	
  1470  001442  0012               	return		;funcret
  1471  001444                     __end_of_lcdInst:
  1472                           	opt stack 0
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           prodh	equ	0xFF4
  1478                           prodl	equ	0xFF3
  1479                           wreg	equ	0xFE8
  1480                           postinc2	equ	0xFDE
  1481                           postdec2	equ	0xFDD
  1482                           fsr2h	equ	0xFDA
  1483                           fsr2l	equ	0xFD9
  1484                           status	equ	0xFD8
  1485                           
  1486 ;; *************** function _lcdNibble *****************
  1487 ;; Defined at:
  1488 ;;		line 37 in file "lcd.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  data            1    wreg     unsigned char 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  data            1    1[COMRAM] unsigned char 
  1493 ;;  temp            1    0[COMRAM] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;Total ram usage:        2 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; This function calls:
  1510 ;;		Nothing
  1511 ;; This function is called by:
  1512 ;;		_lcdInst
  1513 ;;		_putch
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text10
  1518  00121C                     __ptext10:
  1519                           	opt stack 0
  1520  00121C                     _lcdNibble:
  1521                           	opt stack 28
  1522                           
  1523                           ;incstack = 0
  1524                           ;lcdNibble@data stored from wreg
  1525  00121C  6E02               	movwf	lcdNibble@data,c
  1526                           
  1527                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1528  00121E  5002               	movf	lcdNibble@data,w,c
  1529  001220  0BF0               	andlw	240
  1530  001222  6E01               	movwf	lcdNibble@temp,c
  1531                           
  1532                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1533  001224  508C               	movf	3980,w,c	;volatile
  1534  001226  0B0F               	andlw	15
  1535  001228  6E8C               	movwf	3980,c	;volatile
  1536                           
  1537                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1538  00122A  5001               	movf	lcdNibble@temp,w,c
  1539  00122C  108C               	iorwf	3980,w,c	;volatile
  1540  00122E  6E8C               	movwf	3980,c	;volatile
  1541                           
  1542                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1543  001230  0E00               	movlw	0
  1544  001232  BEF2               	btfsc	intcon,7,c	;volatile
  1545  001234  0E01               	movlw	1
  1546  001236  6E1F               	movwf	lcd@LCDinterruptState,c
  1547  001238  9EF2               	bcf	intcon,7,c	;volatile
  1548  00123A  868C               	bsf	3980,3,c	;volatile
  1549  00123C  0E10               	movlw	16
  1550  00123E                     u527:
  1551  00123E  2EE8               	decfsz	wreg,f,c
  1552  001240  D7FE               	bra	u527
  1553  001242  D000               	nop2	
  1554  001244  968C               	bcf	3980,3,c	;volatile
  1555  001246  0E42               	movlw	66
  1556  001248                     u537:
  1557  001248  2EE8               	decfsz	wreg,f,c
  1558  00124A  D7FE               	bra	u537
  1559  00124C  D000               	nop2	
  1560  00124E  B01F               	btfsc	lcd@LCDinterruptState,0,c
  1561  001250  D002               	bra	u15
  1562  001252  9EF2               	bcf	intcon,7,c	;volatile
  1563  001254  D001               	bra	u16
  1564  001256                     u15:
  1565  001256  8EF2               	bsf	intcon,7,c	;volatile
  1566  001258                     u16:
  1567                           
  1568                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1569  001258  3802               	swapf	lcdNibble@data,w,c
  1570  00125A  0BF0               	andlw	240
  1571  00125C  6E02               	movwf	lcdNibble@data,c
  1572                           
  1573                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1574  00125E  5002               	movf	lcdNibble@data,w,c
  1575  001260  0BF0               	andlw	240
  1576  001262  6E01               	movwf	lcdNibble@temp,c
  1577                           
  1578                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1579  001264  508C               	movf	3980,w,c	;volatile
  1580  001266  0B0F               	andlw	15
  1581  001268  6E8C               	movwf	3980,c	;volatile
  1582                           
  1583                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1584  00126A  5001               	movf	lcdNibble@temp,w,c
  1585  00126C  108C               	iorwf	3980,w,c	;volatile
  1586  00126E  6E8C               	movwf	3980,c	;volatile
  1587                           
  1588                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1589  001270  0E00               	movlw	0
  1590  001272  BEF2               	btfsc	intcon,7,c	;volatile
  1591  001274  0E01               	movlw	1
  1592  001276  6E1F               	movwf	lcd@LCDinterruptState,c
  1593  001278  9EF2               	bcf	intcon,7,c	;volatile
  1594  00127A  868C               	bsf	3980,3,c	;volatile
  1595  00127C  0E10               	movlw	16
  1596  00127E                     u547:
  1597  00127E  2EE8               	decfsz	wreg,f,c
  1598  001280  D7FE               	bra	u547
  1599  001282  D000               	nop2	
  1600  001284  968C               	bcf	3980,3,c	;volatile
  1601  001286  0E42               	movlw	66
  1602  001288                     u557:
  1603  001288  2EE8               	decfsz	wreg,f,c
  1604  00128A  D7FE               	bra	u557
  1605  00128C  D000               	nop2	
  1606  00128E  B01F               	btfsc	lcd@LCDinterruptState,0,c
  1607  001290  D002               	bra	u25
  1608  001292  9EF2               	bcf	intcon,7,c	;volatile
  1609  001294  D001               	bra	u26
  1610  001296                     u25:
  1611  001296  8EF2               	bsf	intcon,7,c	;volatile
  1612  001298                     u26:
  1613  001298  0012               	return		;funcret
  1614  00129A                     __end_of_lcdNibble:
  1615                           	opt stack 0
  1616                           tblptru	equ	0xFF8
  1617                           tblptrh	equ	0xFF7
  1618                           tblptrl	equ	0xFF6
  1619                           tablat	equ	0xFF5
  1620                           prodh	equ	0xFF4
  1621                           prodl	equ	0xFF3
  1622                           intcon	equ	0xFF2
  1623                           wreg	equ	0xFE8
  1624                           postinc2	equ	0xFDE
  1625                           postdec2	equ	0xFDD
  1626                           fsr2h	equ	0xFDA
  1627                           fsr2l	equ	0xFD9
  1628                           status	equ	0xFD8
  1629                           tblptru	equ	0xFF8
  1630                           tblptrh	equ	0xFF7
  1631                           tblptrl	equ	0xFF6
  1632                           tablat	equ	0xFF5
  1633                           prodh	equ	0xFF4
  1634                           prodl	equ	0xFF3
  1635                           intcon	equ	0xFF2
  1636                           wreg	equ	0xFE8
  1637                           postinc2	equ	0xFDE
  1638                           postdec2	equ	0xFDD
  1639                           fsr2h	equ	0xFDA
  1640                           fsr2l	equ	0xFD9
  1641                           status	equ	0xFD8
  1642                           
  1643                           	psect	rparam
  1644  0000                     tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           intcon	equ	0xFF2
  1651                           wreg	equ	0xFE8
  1652                           postinc2	equ	0xFDE
  1653                           postdec2	equ	0xFDD
  1654                           fsr2h	equ	0xFDA
  1655                           fsr2l	equ	0xFD9
  1656                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    16
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      34
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1441
                                             24 COMRAM     2     2      0
                            _initLCD
                       _motorStart_0
                        _motorStop_0
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1329
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _motorStart_0
   _motorStop_0
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      22       1       26.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      22      34        0.0%
DATA                 0      0      22       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar  6 16:51:31 2018

                     l77 119E                       l78 11B2                       l79 11F0  
                     l89 1392                       u15 1256                       u16 1258  
                     u25 1296                       u26 1298              __CFG_CPD$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l171 105E  
                    l164 1024                      l173 1086                      l165 1034  
                    l600 1366                      l601 1370                      l177 10C8  
                    l178 1116                      l179 10CE                      l590 12D8  
                    l591 12E2                      l586 12B8                      l587 12B0  
                    l596 134E                      l597 1346             __CFG_CPB$OFF 000000  
                    u300 1352                      u270 12BC                      u360 10B6  
                    u507 1326                      u380 111E                      u517 143C  
                    u437 118C                      u527 123E                      u447 11E6  
                    u537 1248                      u457 120E                      u547 127E  
                    u467 1428                      u557 1288                      u477 13EE  
                    u487 140C                      u497 12F2                      _max 0021  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1118 108A                     l1172 119E                     l1176 11B2  
                   _ADON 007E10                     STR_1 1016                     STR_2 1016  
                   STR_3 1011                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _LATE 000F8D  
                   _main 1138                     fsr2h 000FDA                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
       __end_of_LCD_LEFT 100C                    ?_main 0001          __end_of___lwdiv 12EC  
        __end_of___lwmod 137A                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 1444  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_readADC 13B2  
        __end_of_initLCD 1338           __CFG_EBTRB$OFF 000000          __end_of_dpowers 100B  
                  _putch 141C                    tablat 000FF5        _LCDinterruptState 0020  
                  status 000FD8           __CFG_PBADEN$ON 000000          __initialization 13B2  
           __end_of_main 121C        __end_of_LCD_RIGHT 100D                   ??_main 0019  
          __activetblptr 000002                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_putch 0001  
                 _OSCCON 000FD3           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??___lwdiv 0005                ??___lwmod 000C             ?_motorStop_0 0001  
              ??_lcdInst 0003                   _printf 101A                ??_readADC 0003  
              ??_initLCD 0004             __pdataCOMRAM 0021             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 13D6            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_putch 1430       __size_of_lcdNibble 007E  
                ??_putch 0003                  ?_printf 000D     lcd@LCDinterruptState 001F  
      __end_of_lcdNibble 129A                  __Hparam 0000                  __Lparam 0000  
                ___lwdiv 129A                  ___lwmod 1338             __psmallconst 1000  
                __pcinit 13B2                  __ramtop 1000                  _lcdInst 1430  
                __ptext0 1138                  __ptext1 137A                  __ptext2 101A  
                __ptext3 141C                  __ptext4 1338                  __ptext5 129A  
                __ptext6 13E0                  __ptext7 13FE                  __ptext8 12EC  
                __ptext9 1430          __size_of_printf 011E                  _readADC 137A  
                _initLCD 12EC                  _counter 001D     __size_of_motorStop_0 001E  
                _dpowers 1001            ?_motorStart_0 0001                _LCD_RIGHT 100C  
   end_of_initialization 13D6    __end_of_LCD_SIZE_HORZ 100F    __end_of_LCD_SIZE_VERT 100E  
          __Lmediumconst 0000                  printf@c 0018                  printf@f 000D  
                postdec2 000FDD                  postinc2 000FDE           ??_motorStart_0 0001  
              _TRISCbits 000F94            __pidataCOMRAM 1444           __end_of_printf 1138  
    start_initialization 13B2         __CFG_OSC$INTIO67 000000         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0011            _analog_result 001B              __pbssCOMRAM 001B  
   __end_of_motorStart_0 141C         ___lwdiv@dividend 0001        __CFG_CCP2MX$PORTC 000000  
              _lcdNibble 121C                 ?___lwdiv 0001                 ?___lwmod 0008  
               ?_lcdInst 0001                 ?_readADC 0001                 ?_initLCD 0001  
            __smallconst 1000         ___lwdiv@quotient 0005           __size_of_putch 0014  
               _LCD_LEFT 100B                 _LATCbits 000F8B                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001            ??_motorStop_0 0001  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0            lcdNibble@data 0002  
             printf@flag 0014            lcdNibble@temp 0001               printf@prec 0015  
         _LCD_HORZ_LIMIT 1010                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of___lwdiv 0052         __size_of___lwmod 0042  
         readADC@channel 0005         __size_of_lcdInst 0014         __size_of_readADC 0038  
       __size_of_initLCD 004C   __end_of_LCD_HORZ_LIMIT 1011      __end_of_motorStop_0 13FE  
        ___lwdiv@divisor 0003          ___lwdiv@counter 0007                 __ptext10 121C  
         _LCD_VERT_LIMIT 100F    __size_of_motorStart_0 001E            __size_of_main 00E4  
            ??_lcdNibble 0001                printf@val 0016                putch@data 0003  
             _INTCONbits 000FF2             _motorStart_0 13FE   __end_of_LCD_VERT_LIMIT 1010  
          _LCD_SIZE_HORZ 100E         ___lwmod@dividend 0008            _LCD_SIZE_VERT 100D  
               printf@ap 0012              lcdInst@data 0003              _motorStop_0 13E0  
        ___lwmod@divisor 000A          ___lwmod@counter 000C  
