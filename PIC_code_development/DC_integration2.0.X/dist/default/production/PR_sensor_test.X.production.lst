

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar  6 13:33:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4620 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	smallconst
    57  001000                     __psmallconst:
    58                           	opt stack 0
    59  001000  00                 	db	0
    60  001001                     _dpowers:
    61                           	opt stack 0
    62  001001  0001               	dw	1
    63  001003  000A               	dw	10
    64  001005  0064               	dw	100
    65  001007  03E8               	dw	1000
    66  001009  2710               	dw	10000
    67  00100B                     __end_of_dpowers:
    68                           	opt stack 0
    69  00100B                     _LCD_LEFT:
    70                           	opt stack 0
    71  00100B  00                 	db	0
    72  00100C                     __end_of_LCD_LEFT:
    73                           	opt stack 0
    74  00100C                     _LCD_RIGHT:
    75                           	opt stack 0
    76  00100C  01                 	db	1
    77  00100D                     __end_of_LCD_RIGHT:
    78                           	opt stack 0
    79  00100D                     _LCD_SIZE_VERT:
    80                           	opt stack 0
    81  00100D  02                 	db	2
    82  00100E                     __end_of_LCD_SIZE_VERT:
    83                           	opt stack 0
    84  00100E                     _LCD_SIZE_HORZ:
    85                           	opt stack 0
    86  00100E  10                 	db	16
    87  00100F                     __end_of_LCD_SIZE_HORZ:
    88                           	opt stack 0
    89  00100F                     _LCD_VERT_LIMIT:
    90                           	opt stack 0
    91  00100F  02                 	db	2
    92  001010                     __end_of_LCD_VERT_LIMIT:
    93                           	opt stack 0
    94  001010                     _LCD_HORZ_LIMIT:
    95                           	opt stack 0
    96  001010  28                 	db	40
    97  001011                     __end_of_LCD_HORZ_LIMIT:
    98                           	opt stack 0
    99  0000                     _INTCONbits	set	4082
   100  0000                     _LATDbits	set	3980
   101  0000                     _ADRESH	set	4036
   102  0000                     _ADRESL	set	4035
   103  0000                     _ADCON0bits	set	4034
   104  0000                     _ADCON2bits	set	4032
   105  0000                     _ADCON1	set	4033
   106  0000                     _ADCON0	set	4034
   107  0000                     _TRISE	set	3990
   108  0000                     _TRISD	set	3989
   109  0000                     _TRISC	set	3988
   110  0000                     _TRISB	set	3987
   111  0000                     _TRISA	set	3986
   112  0000                     _LATE	set	3981
   113  0000                     _LATD	set	3980
   114  0000                     _LATC	set	3979
   115  0000                     _LATB	set	3978
   116  0000                     _LATA	set	3977
   117  0000                     _OSCCON	set	4051
   118  0000                     _ADON	set	32272
   119  001011                     STR_3:
   120  001011  64                 	db	100	;'d'
   121  001012  6F                 	db	111	;'o'
   122  001013  6E                 	db	110	;'n'
   123  001014  65                 	db	101	;'e'
   124  001015  00                 	db	0
   125  001016                     STR_1:
   126  001016  25                 	db	37
   127  001017  64                 	db	100	;'d'
   128  001018  00                 	db	0
   129  0000                     
   130                           ; #config settings
   131  001019  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           	psect	cinit
   134  00138C                     __pcinit:
   135                           	opt stack 0
   136  00138C                     start_initialization:
   137                           	opt stack 0
   138  00138C                     __initialization:
   139                           	opt stack 0
   140                           
   141                           ; Clear objects allocated to COMRAM (6 bytes)
   142  00138C  6A20               	clrf	(__pbssCOMRAM+5)& (0+255),c
   143  00138E  6A1F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   144  001390  6A1E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   145  001392  6A1D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   146  001394  6A1C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   147  001396  6A1B               	clrf	__pbssCOMRAM& (0+255),c
   148  001398                     end_of_initialization:
   149                           	opt stack 0
   150  001398                     __end_of__initialization:
   151                           	opt stack 0
   152  001398  0E00               	movlw	low (__Lmediumconst shr (0+16))
   153  00139A  6EF8               	movwf	tblptru,c
   154  00139C  0100               	movlb	0
   155  00139E  EF9C  F008         	goto	_main	;jump to C main() function
   156                           tblptru	equ	0xFF8
   157                           
   158                           	psect	bssCOMRAM
   159  00001B                     __pbssCOMRAM:
   160                           	opt stack 0
   161  00001B                     _analog_result:
   162                           	opt stack 0
   163  00001B                     	ds	2
   164  00001D                     _counter:
   165                           	opt stack 0
   166  00001D                     	ds	2
   167  00001F                     lcd@LCDinterruptState:
   168                           	opt stack 0
   169  00001F                     	ds	1
   170  000020                     	ds	1
   171                           tblptru	equ	0xFF8
   172                           
   173                           	psect	cstackCOMRAM
   174  000001                     __pcstackCOMRAM:
   175                           	opt stack 0
   176  000001                     ?_readADC:
   177                           	opt stack 0
   178  000001                     ?___lwdiv:
   179                           	opt stack 0
   180  000001                     lcdNibble@temp:
   181                           	opt stack 0
   182  000001                     ___lwdiv@dividend:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x0
   186  000001                     	ds	1
   187  000002                     lcdNibble@data:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x1
   191  000002                     	ds	1
   192  000003                     ??_readADC:
   193  000003                     lcdInst@data:
   194                           	opt stack 0
   195  000003                     putch@data:
   196                           	opt stack 0
   197  000003                     ___lwdiv@divisor:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x2
   201  000003                     	ds	1
   202  000004                     ??_initLCD:
   203                           
   204                           ; 1 bytes @ 0x3
   205  000004                     	ds	1
   206  000005                     readADC@channel:
   207                           	opt stack 0
   208  000005                     ___lwdiv@quotient:
   209                           	opt stack 0
   210                           
   211                           ; 2 bytes @ 0x4
   212  000005                     	ds	2
   213  000007                     ___lwdiv@counter:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0x6
   217  000007                     	ds	1
   218  000008                     ?___lwmod:
   219                           	opt stack 0
   220  000008                     ___lwmod@dividend:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x7
   224  000008                     	ds	2
   225  00000A                     ___lwmod@divisor:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x9
   229  00000A                     	ds	2
   230  00000C                     ___lwmod@counter:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0xB
   234  00000C                     	ds	1
   235  00000D                     ?_printf:
   236                           	opt stack 0
   237  00000D                     printf@f:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0xC
   241  00000D                     	ds	4
   242  000011                     ??_printf:
   243                           
   244                           ; 1 bytes @ 0x10
   245  000011                     	ds	1
   246  000012                     printf@ap:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x11
   250  000012                     	ds	2
   251  000014                     printf@flag:
   252                           	opt stack 0
   253                           
   254                           ; 1 bytes @ 0x13
   255  000014                     	ds	1
   256  000015                     printf@prec:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x14
   260  000015                     	ds	1
   261  000016                     printf@val:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x15
   265  000016                     	ds	2
   266  000018                     printf@c:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x17
   270  000018                     	ds	1
   271  000019                     ??_main:
   272                           
   273                           ; 1 bytes @ 0x18
   274  000019                     	ds	2
   275                           tblptru	equ	0xFF8
   276                           
   277 ;;
   278 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   279 ;;
   280 ;; *************** function _main *****************
   281 ;; Defined at:
   282 ;;		line 42 in file "main.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;		None
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   291 ;; Tracked objects:
   292 ;;		On entry : 0/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   300 ;;Total ram usage:        2 bytes
   301 ;; Hardware stack levels required when called:    3
   302 ;; This function calls:
   303 ;;		_initLCD
   304 ;;		_printf
   305 ;;		_readADC
   306 ;; This function is called by:
   307 ;;		Startup code after reset
   308 ;; This function uses a non-reentrant model
   309 ;;
   310                           
   311                           	psect	text0
   312  001138                     __ptext0:
   313                           	opt stack 0
   314  001138                     _main:
   315                           	opt stack 28
   316                           
   317                           ;main.c: 46: OSCCON = 0xF2;
   318                           
   319                           ;incstack = 0
   320  001138  0EF2               	movlw	242
   321  00113A  6ED3               	movwf	4051,c	;volatile
   322                           
   323                           ;main.c: 51: LATA = 0x00;
   324  00113C  0E00               	movlw	0
   325  00113E  6E89               	movwf	3977,c	;volatile
   326                           
   327                           ;main.c: 52: LATB = 0x00;
   328  001140  0E00               	movlw	0
   329  001142  6E8A               	movwf	3978,c	;volatile
   330                           
   331                           ;main.c: 53: LATC = 0x00;
   332  001144  0E00               	movlw	0
   333  001146  6E8B               	movwf	3979,c	;volatile
   334                           
   335                           ;main.c: 54: LATD = 0x00;
   336  001148  0E00               	movlw	0
   337  00114A  6E8C               	movwf	3980,c	;volatile
   338                           
   339                           ;main.c: 55: LATE = 0x00;
   340  00114C  0E00               	movlw	0
   341  00114E  6E8D               	movwf	3981,c	;volatile
   342                           
   343                           ;main.c: 59: TRISA = 0xFF;
   344  001150  6892               	setf	3986,c	;volatile
   345                           
   346                           ;main.c: 60: TRISB = 0xFF;
   347  001152  6893               	setf	3987,c	;volatile
   348                           
   349                           ;main.c: 61: TRISC = 0x00;
   350  001154  0E00               	movlw	0
   351  001156  6E94               	movwf	3988,c	;volatile
   352                           
   353                           ;main.c: 62: TRISD = 0x00;
   354  001158  0E00               	movlw	0
   355  00115A  6E95               	movwf	3989,c	;volatile
   356                           
   357                           ;main.c: 63: TRISE = 0x00;
   358  00115C  0E00               	movlw	0
   359  00115E  6E96               	movwf	3990,c	;volatile
   360                           
   361                           ;main.c: 66: ADCON0 = 0x00;
   362  001160  0E00               	movlw	0
   363  001162  6EC2               	movwf	4034,c	;volatile
   364                           
   365                           ;main.c: 67: ADCON1 = 0x0B;
   366  001164  0E0B               	movlw	11
   367  001166  6EC1               	movwf	4033,c	;volatile
   368                           
   369                           ;main.c: 68: ADCON2bits.ADFM = 1;
   370  001168  8EC0               	bsf	4032,7,c	;volatile
   371                           
   372                           ;main.c: 75: initLCD();
   373  00116A  EC63  F009         	call	_initLCD	;wreg free
   374                           
   375                           ;main.c: 76: printf("%d",counter);
   376  00116E  0E16               	movlw	low STR_1
   377  001170  6E0D               	movwf	printf@f,c
   378  001172  0E10               	movlw	high STR_1
   379  001174  6E0E               	movwf	printf@f+1,c
   380  001176  C01D  F00F         	movff	_counter,?_printf+2
   381  00117A  C01E  F010         	movff	_counter+1,?_printf+3
   382  00117E  EC0D  F008         	call	_printf	;wreg free
   383                           
   384                           ;main.c: 77: _delay((unsigned long)((100)*(8000000/4000.0)));
   385  001182  0E02               	movlw	2
   386  001184  6E1A               	movwf	(??_main+1)& (0+255),c
   387  001186  0E04               	movlw	4
   388  001188  6E19               	movwf	??_main& (0+255),c
   389  00118A  0EBA               	movlw	186
   390  00118C                     u437:
   391  00118C  2EE8               	decfsz	wreg,f,c
   392  00118E  D7FE               	bra	u437
   393  001190  2E19               	decfsz	??_main& (0+255),f,c
   394  001192  D7FC               	bra	u437
   395  001194  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   396  001196  D7FA               	bra	u437
   397  001198  D000               	nop2	
   398  00119A                     
   399                           ;main.c: 81: if (readADC(0000)<=350 ){
   400  00119A  0E00               	movlw	0
   401  00119C  ECAA  F009         	call	_readADC
   402  0011A0  0E5F               	movlw	95
   403  0011A2  5C01               	subwf	?_readADC,w,c
   404  0011A4  0E01               	movlw	1
   405  0011A6  5802               	subwfb	?_readADC+1,w,c
   406  0011A8  B0D8               	btfsc	status,0,c
   407  0011AA  D7F7               	goto	l67
   408                           
   409                           ;main.c: 82: counter ++;
   410  0011AC  4A1D               	infsnz	_counter,f,c
   411  0011AE  2A1E               	incf	_counter+1,f,c
   412                           
   413                           ;main.c: 83: initLCD();
   414  0011B0  EC63  F009         	call	_initLCD	;wreg free
   415                           
   416                           ;main.c: 84: printf("%d", counter);
   417  0011B4  0E16               	movlw	low STR_1
   418  0011B6  6E0D               	movwf	printf@f,c
   419  0011B8  0E10               	movlw	high STR_1
   420  0011BA  6E0E               	movwf	printf@f+1,c
   421  0011BC  C01D  F00F         	movff	_counter,?_printf+2
   422  0011C0  C01E  F010         	movff	_counter+1,?_printf+3
   423  0011C4  EC0D  F008         	call	_printf	;wreg free
   424                           
   425                           ;main.c: 85: if (counter == 5){
   426  0011C8  0E05               	movlw	5
   427  0011CA  181D               	xorwf	_counter,w,c
   428  0011CC  101E               	iorwf	_counter+1,w,c
   429  0011CE  B4D8               	btfsc	status,2,c
   430  0011D0  D008               	goto	l70
   431                           
   432                           ;main.c: 87: }
   433                           ;main.c: 88: _delay((unsigned long)((70)*(8000000/4000.0)));
   434                           
   435                           ;main.c: 86: break;
   436  0011D2  0EB6               	movlw	182
   437  0011D4  6E19               	movwf	??_main& (0+255),c
   438  0011D6  0ED0               	movlw	208
   439  0011D8                     u447:
   440  0011D8  2EE8               	decfsz	wreg,f,c
   441  0011DA  D7FE               	bra	u447
   442  0011DC  2E19               	decfsz	??_main& (0+255),f,c
   443  0011DE  D7FC               	bra	u447
   444  0011E0  D7DB               	goto	L1
   445  0011E2                     l70:
   446                           
   447                           ;main.c: 90: }
   448                           ;main.c: 92: }
   449                           ;main.c: 93: initLCD();
   450  0011E2  EC63  F009         	call	_initLCD	;wreg free
   451                           
   452                           ;main.c: 94: printf("done");
   453  0011E6  0E11               	movlw	low STR_3
   454  0011E8  6E0D               	movwf	printf@f,c
   455  0011EA  0E10               	movlw	high STR_3
   456  0011EC  6E0E               	movwf	printf@f+1,c
   457  0011EE  EC0D  F008         	call	_printf	;wreg free
   458  0011F2  EF00  F000         	goto	start
   459  0011F6                     __end_of_main:
   460                           	opt stack 0
   461                           tblptru	equ	0xFF8
   462                           wreg	equ	0xFE8
   463                           status	equ	0xFD8
   464                           
   465 ;; *************** function _readADC *****************
   466 ;; Defined at:
   467 ;;		line 117 in file "main.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;  channel         1    wreg     unsigned char 
   470 ;; Auto vars:     Size  Location     Type
   471 ;;  channel         1    4[COMRAM] unsigned char 
   472 ;; Return value:  Size  Location     Type
   473 ;;                  2    0[COMRAM] unsigned short 
   474 ;; Registers used:
   475 ;;		wreg, status,2, status,0
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   483 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   484 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   485 ;;Total ram usage:        5 bytes
   486 ;; Hardware stack levels used:    1
   487 ;; This function calls:
   488 ;;		Nothing
   489 ;; This function is called by:
   490 ;;		_main
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494                           	psect	text1
   495  001354                     __ptext1:
   496                           	opt stack 0
   497  001354                     _readADC:
   498                           	opt stack 30
   499                           
   500                           ;incstack = 0
   501                           ;readADC@channel stored from wreg
   502  001354  6E05               	movwf	readADC@channel,c
   503                           
   504                           ;main.c: 126: ADCON0 = (channel & 0x0F) << 2;
   505  001356  C005  F003         	movff	readADC@channel,??_readADC
   506  00135A  0E0F               	movlw	15
   507  00135C  1603               	andwf	??_readADC,f,c
   508  00135E  90D8               	bcf	status,0,c
   509  001360  3603               	rlcf	??_readADC,f,c
   510  001362  90D8               	bcf	status,0,c
   511  001364  3403               	rlcf	??_readADC,w,c
   512  001366  6EC2               	movwf	4034,c	;volatile
   513                           
   514                           ;main.c: 127: ADON = 1;
   515  001368  80C2               	bsf	4034,0,c	;volatile
   516                           
   517                           ;main.c: 128: ADCON0bits.GO = 1;
   518  00136A  82C2               	bsf	4034,1,c	;volatile
   519  00136C  B2C2               	btfsc	4034,1,c	;volatile
   520  00136E  D7FE               	goto	l76
   521                           
   522                           ;main.c: 130: analog_result = ADRESL + (ADRESH*256);
   523  001370  50C4               	movf	4036,w,c	;volatile
   524  001372  6E04               	movwf	(??_readADC+1)& (0+255),c
   525  001374  6A03               	clrf	??_readADC& (0+255),c
   526  001376  50C3               	movf	4035,w,c	;volatile
   527  001378  2403               	addwf	??_readADC,w,c
   528  00137A  6E1B               	movwf	_analog_result,c
   529  00137C  0E00               	movlw	0
   530  00137E  2004               	addwfc	??_readADC+1,w,c
   531  001380  6E1C               	movwf	_analog_result+1,c
   532                           
   533                           ;main.c: 131: return analog_result;
   534  001382  C01B  F001         	movff	_analog_result,?_readADC
   535  001386  C01C  F002         	movff	_analog_result+1,?_readADC+1
   536  00138A  0012               	return	
   537  00138C                     __end_of_readADC:
   538                           	opt stack 0
   539                           tblptru	equ	0xFF8
   540                           wreg	equ	0xFE8
   541                           status	equ	0xFD8
   542                           
   543 ;; *************** function _printf *****************
   544 ;; Defined at:
   545 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;  f               2   12[COMRAM] PTR const unsigned char 
   548 ;;		 -> STR_3(5), STR_2(3), STR_1(3), 
   549 ;; Auto vars:     Size  Location     Type
   550 ;;  tmpval          4    0        struct .
   551 ;;  cp              3    0        PTR const unsigned char 
   552 ;;  val             2   21[COMRAM] unsigned int 
   553 ;;  ap              2   17[COMRAM] PTR void [1]
   554 ;;		 -> ?_printf(2), 
   555 ;;  len             2    0        unsigned int 
   556 ;;  c               1   23[COMRAM] char 
   557 ;;  prec            1   20[COMRAM] char 
   558 ;;  flag            1   19[COMRAM] unsigned char 
   559 ;; Return value:  Size  Location     Type
   560 ;;                  2   12[COMRAM] int 
   561 ;; Registers used:
   562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   568 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   569 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   571 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   572 ;;Total ram usage:       12 bytes
   573 ;; Hardware stack levels used:    1
   574 ;; Hardware stack levels required when called:    2
   575 ;; This function calls:
   576 ;;		___lwdiv
   577 ;;		___lwmod
   578 ;;		_putch
   579 ;; This function is called by:
   580 ;;		_main
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           	psect	text2
   585  00101A                     __ptext2:
   586                           	opt stack 0
   587  00101A                     _printf:
   588                           	opt stack 28
   589                           
   590                           ;doprnt.c: 466: va_list ap;
   591                           ;doprnt.c: 499: signed char c;
   592                           ;doprnt.c: 506: signed char prec;
   593                           ;doprnt.c: 508: unsigned char flag;
   594                           ;doprnt.c: 523: union {
   595                           ;doprnt.c: 524: unsigned long vd;
   596                           ;doprnt.c: 525: double integ;
   597                           ;doprnt.c: 526: } tmpval;
   598                           ;doprnt.c: 528: unsigned int val;
   599                           ;doprnt.c: 529: unsigned len;
   600                           ;doprnt.c: 530: const char * cp;
   601                           ;doprnt.c: 533: *ap = __va_start();
   602                           
   603                           ;incstack = 0
   604  00101A  0E0F               	movlw	low (?_printf+2)
   605  00101C  6E12               	movwf	printf@ap,c
   606  00101E  0E00               	movlw	high (?_printf+2)
   607  001020  6E13               	movwf	printf@ap+1,c
   608                           
   609                           ;doprnt.c: 536: while(c = *f++) {
   610  001022  D07D               	goto	u380
   611  001024                     
   612                           ;doprnt.c: 538: if(c != '%')
   613  001024  0E25               	movlw	37
   614  001026  1818               	xorwf	printf@c,w,c
   615  001028  B4D8               	btfsc	status,2,c
   616  00102A  D004               	goto	l146
   617                           
   618                           ;doprnt.c: 540: {
   619                           ;doprnt.c: 541: (putch(c) );
   620  00102C  5018               	movf	printf@c,w,c
   621  00102E  ECD1  F009         	call	_putch
   622                           
   623                           ;doprnt.c: 542: continue;
   624  001032  D075               	goto	u380
   625  001034                     l146:
   626                           
   627                           ;doprnt.c: 543: }
   628                           ;doprnt.c: 548: flag = 0;
   629  001034  0E00               	movlw	0
   630  001036  6E14               	movwf	printf@flag,c
   631                           
   632                           ;doprnt.c: 822: }
   633                           
   634                           ;doprnt.c: 813: continue;
   635                           
   636                           ;doprnt.c: 802: default:
   637                           
   638                           ;doprnt.c: 698: case 'i':
   639                           ;doprnt.c: 699: break;
   640                           
   641                           ;doprnt.c: 697: case 'd':
   642                           
   643                           ;doprnt.c: 638: goto alldone;
   644                           
   645                           ;doprnt.c: 637: case 0:
   646                           
   647                           ;doprnt.c: 635: switch(c = *f++) {
   648  001038  C00D  FFF6         	movff	printf@f,tblptrl
   649  00103C  C00E  FFF7         	movff	printf@f+1,tblptrh
   650  001040  4A0D               	infsnz	printf@f,f,c
   651  001042  2A0E               	incf	printf@f+1,f,c
   652  001044                     	if	0	;tblptru may be non-zero
   653  001044                     	endif
   654  001044                     	if	0	;tblptru may be non-zero
   655  001044                     	endif
   656  001044  0008               	tblrd		*
   657  001046  CFF5 F018          	movff	tablat,printf@c
   658  00104A  5018               	movf	printf@c,w,c
   659                           
   660                           ; Switch size 1, requested type "space"
   661                           ; Number of cases is 3, Range of values is 0 to 105
   662                           ; switch strategies available:
   663                           ; Name         Instructions Cycles
   664                           ; simple_byte           10     6 (average)
   665                           ;	Chosen strategy is simple_byte
   666  00104C  0A00               	xorlw	0	; case 0
   667  00104E  B4D8               	btfsc	status,2,c
   668  001050  0012               	return	
   669  001052  0A64               	xorlw	100	; case 100
   670  001054  B4D8               	btfsc	status,2,c
   671  001056  D003               	goto	l152
   672  001058  0A0D               	xorlw	13	; case 105
   673  00105A  A4D8               	btfss	status,2,c
   674  00105C  D060               	goto	u380
   675  00105E                     l152:
   676                           
   677                           ;doprnt.c: 1253: {
   678                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   679  00105E  C012  FFD9         	movff	printf@ap,fsr2l
   680  001062  C013  FFDA         	movff	printf@ap+1,fsr2h
   681  001066  CFDE F016          	movff	postinc2,printf@val
   682  00106A  CFDD F017          	movff	postdec2,printf@val+1
   683  00106E  0E02               	movlw	2
   684  001070  2612               	addwf	printf@ap,f,c
   685  001072  0E00               	movlw	0
   686  001074  2213               	addwfc	printf@ap+1,f,c
   687                           
   688                           ;doprnt.c: 1261: if((int)val < 0) {
   689  001076  AE17               	btfss	printf@val+1,7,c
   690  001078  D006               	goto	l154
   691                           
   692                           ;doprnt.c: 1262: flag |= 0x03;
   693  00107A  0E03               	movlw	3
   694  00107C  1214               	iorwf	printf@flag,f,c
   695                           
   696                           ;doprnt.c: 1263: val = -val;
   697  00107E  6C16               	negf	printf@val,c
   698  001080  1E17               	comf	printf@val+1,f,c
   699  001082  B0D8               	btfsc	status,0,c
   700  001084  2A17               	incf	printf@val+1,f,c
   701  001086                     l154:
   702                           
   703                           ;doprnt.c: 1264: }
   704                           ;doprnt.c: 1266: }
   705                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   706  001086  0E01               	movlw	1
   707  001088  6E18               	movwf	printf@c,c
   708  00108A                     l1085:
   709  00108A  0E05               	movlw	5
   710  00108C  1818               	xorwf	printf@c,w,c
   711  00108E  B4D8               	btfsc	status,2,c
   712  001090  D012               	goto	u360
   713                           
   714                           ;doprnt.c: 1306: if(val < dpowers[c])
   715  001092  5018               	movf	printf@c,w,c
   716  001094  0D02               	mullw	2
   717  001096  0E01               	movlw	low _dpowers
   718  001098  24F3               	addwf	prodl,w,c
   719  00109A  6EF6               	movwf	tblptrl,c
   720  00109C  0E10               	movlw	high _dpowers
   721  00109E  20F4               	addwfc	prodh,w,c
   722  0010A0  6EF7               	movwf	tblptrh,c
   723  0010A2                     	if	0	;There are less than 3 active tblptr bytes
   724  0010A2                     	endif
   725  0010A2  0009               	tblrd		*+
   726  0010A4  50F5               	movf	tablat,w,c
   727  0010A6  5C16               	subwf	printf@val,w,c
   728  0010A8  0009               	tblrd		*+
   729  0010AA  50F5               	movf	tablat,w,c
   730  0010AC  5817               	subwfb	printf@val+1,w,c
   731  0010AE  A0D8               	btfss	status,0,c
   732  0010B0  D002               	goto	u360
   733                           
   734                           ;doprnt.c: 1307: break;
   735  0010B2  2A18               	incf	printf@c,f,c
   736  0010B4  D7EA               	goto	l1085
   737  0010B6                     u360:
   738                           
   739                           ;doprnt.c: 1422: {
   740                           ;doprnt.c: 1438: if(flag & 0x03)
   741  0010B6  C014  F011         	movff	printf@flag,??_printf
   742  0010BA  0E03               	movlw	3
   743  0010BC  1611               	andwf	??_printf,f,c
   744  0010BE  B4D8               	btfsc	status,2,c
   745  0010C0  D003               	goto	l158
   746                           
   747                           ;doprnt.c: 1439: (putch('-') );
   748  0010C2  0E2D               	movlw	45
   749  0010C4  ECD1  F009         	call	_putch
   750  0010C8                     l158:
   751                           
   752                           ;doprnt.c: 1469: }
   753                           ;doprnt.c: 1472: prec = c;
   754  0010C8  C018  F015         	movff	printf@c,printf@prec
   755                           
   756                           ;doprnt.c: 1474: while(prec--) {
   757  0010CC  D024               	goto	l159
   758  0010CE                     
   759                           ;doprnt.c: 1478: {
   760                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   761  0010CE  5015               	movf	printf@prec,w,c
   762  0010D0  0D02               	mullw	2
   763  0010D2  0E01               	movlw	low _dpowers
   764  0010D4  24F3               	addwf	prodl,w,c
   765  0010D6  6EF6               	movwf	tblptrl,c
   766  0010D8  0E10               	movlw	high _dpowers
   767  0010DA  20F4               	addwfc	prodh,w,c
   768  0010DC  6EF7               	movwf	tblptrh,c
   769  0010DE                     	if	0	;There are less than 3 active tblptr bytes
   770  0010DE                     	endif
   771  0010DE  0009               	tblrd		*+
   772  0010E0  CFF5 F003          	movff	tablat,___lwdiv@divisor
   773  0010E4  000A               	tblrd		*-
   774  0010E6  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   775  0010EA  C016  F001         	movff	printf@val,___lwdiv@dividend
   776  0010EE  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   777  0010F2  EC3A  F009         	call	___lwdiv	;wreg free
   778  0010F6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   779  0010FA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   780  0010FE  0E00               	movlw	0
   781  001100  6E0B               	movwf	___lwmod@divisor+1,c
   782  001102  0E0A               	movlw	10
   783  001104  6E0A               	movwf	___lwmod@divisor,c
   784  001106  EC89  F009         	call	___lwmod	;wreg free
   785  00110A  5008               	movf	?___lwmod,w,c
   786  00110C  0F30               	addlw	48
   787  00110E  6E18               	movwf	printf@c,c
   788                           
   789                           ;doprnt.c: 1523: }
   790                           ;doprnt.c: 1524: (putch(c) );
   791  001110  5018               	movf	printf@c,w,c
   792  001112  ECD1  F009         	call	_putch
   793  001116                     l159:
   794  001116  0615               	decf	printf@prec,f,c
   795  001118  2815               	incf	printf@prec,w,c
   796  00111A  A4D8               	btfss	status,2,c
   797  00111C  D7D8               	goto	l160
   798  00111E                     u380:
   799  00111E  C00D  FFF6         	movff	printf@f,tblptrl
   800  001122  C00E  FFF7         	movff	printf@f+1,tblptrh
   801  001126  4A0D               	infsnz	printf@f,f,c
   802  001128  2A0E               	incf	printf@f+1,f,c
   803  00112A                     	if	0	;tblptru may be non-zero
   804  00112A                     	endif
   805  00112A                     	if	0	;tblptru may be non-zero
   806  00112A                     	endif
   807  00112A  0008               	tblrd		*
   808  00112C  CFF5 F018          	movff	tablat,printf@c
   809  001130  5018               	movf	printf@c,w,c
   810  001132  B4D8               	btfsc	status,2,c
   811  001134  0012               	return	
   812  001136  D776               	goto	l145
   813  001138                     __end_of_printf:
   814                           	opt stack 0
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           prodh	equ	0xFF4
   820                           prodl	equ	0xFF3
   821                           wreg	equ	0xFE8
   822                           postinc2	equ	0xFDE
   823                           postdec2	equ	0xFDD
   824                           fsr2h	equ	0xFDA
   825                           fsr2l	equ	0xFD9
   826                           status	equ	0xFD8
   827                           
   828 ;; *************** function _putch *****************
   829 ;; Defined at:
   830 ;;		line 24 in file "lcd.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;  data            1    wreg     unsigned char 
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  data            1    2[COMRAM] unsigned char 
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, status,2, status,0, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   848 ;;Total ram usage:        1 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; Hardware stack levels required when called:    1
   851 ;; This function calls:
   852 ;;		_lcdNibble
   853 ;; This function is called by:
   854 ;;		_printf
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text3
   859  0013A2                     __ptext3:
   860                           	opt stack 0
   861  0013A2                     _putch:
   862                           	opt stack 28
   863                           
   864                           ;incstack = 0
   865                           ;putch@data stored from wreg
   866  0013A2  6E03               	movwf	putch@data,c
   867                           
   868                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   869  0013A4  848C               	bsf	3980,2,c	;volatile
   870                           
   871                           ;lcd.c: 33: lcdNibble(data);
   872  0013A6  5003               	movf	putch@data,w,c
   873  0013A8  ECFB  F008         	call	_lcdNibble
   874                           
   875                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
   876  0013AC  0E42               	movlw	66
   877  0013AE                     u457:
   878  0013AE  2EE8               	decfsz	wreg,f,c
   879  0013B0  D7FE               	bra	u457
   880  0013B2  D000               	nop2	
   881  0013B4  0012               	return		;funcret
   882  0013B6                     __end_of_putch:
   883                           	opt stack 0
   884                           tblptru	equ	0xFF8
   885                           tblptrh	equ	0xFF7
   886                           tblptrl	equ	0xFF6
   887                           tablat	equ	0xFF5
   888                           prodh	equ	0xFF4
   889                           prodl	equ	0xFF3
   890                           wreg	equ	0xFE8
   891                           postinc2	equ	0xFDE
   892                           postdec2	equ	0xFDD
   893                           fsr2h	equ	0xFDA
   894                           fsr2l	equ	0xFD9
   895                           status	equ	0xFD8
   896                           
   897 ;; *************** function ___lwmod *****************
   898 ;; Defined at:
   899 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;  dividend        2    7[COMRAM] unsigned int 
   902 ;;  divisor         2    9[COMRAM] unsigned int 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  counter         1   11[COMRAM] unsigned char 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  2    7[COMRAM] unsigned int 
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   914 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;Total ram usage:        5 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; This function calls:
   921 ;;		Nothing
   922 ;; This function is called by:
   923 ;;		_printf
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           	psect	text4
   928  001312                     __ptext4:
   929                           	opt stack 0
   930  001312                     ___lwmod:
   931                           	opt stack 29
   932                           
   933                           ;incstack = 0
   934  001312  500A               	movf	___lwmod@divisor,w,c
   935  001314  100B               	iorwf	___lwmod@divisor+1,w,c
   936  001316  B4D8               	btfsc	status,2,c
   937  001318  D018               	goto	l582
   938  00131A  0E01               	movlw	1
   939  00131C  6E0C               	movwf	___lwmod@counter,c
   940  00131E  D004               	goto	l577
   941  001320  90D8               	bcf	status,0,c
   942  001322  360A               	rlcf	___lwmod@divisor,f,c
   943  001324  360B               	rlcf	___lwmod@divisor+1,f,c
   944  001326  2A0C               	incf	___lwmod@counter,f,c
   945  001328                     l577:
   946  001328  AE0B               	btfss	___lwmod@divisor+1,7,c
   947  00132A  D7FA               	goto	l578
   948  00132C                     u300:
   949  00132C  500A               	movf	___lwmod@divisor,w,c
   950  00132E  5C08               	subwf	___lwmod@dividend,w,c
   951  001330  500B               	movf	___lwmod@divisor+1,w,c
   952  001332  5809               	subwfb	___lwmod@dividend+1,w,c
   953  001334  A0D8               	btfss	status,0,c
   954  001336  D004               	goto	l581
   955  001338  500A               	movf	___lwmod@divisor,w,c
   956  00133A  5E08               	subwf	___lwmod@dividend,f,c
   957  00133C  500B               	movf	___lwmod@divisor+1,w,c
   958  00133E  5A09               	subwfb	___lwmod@dividend+1,f,c
   959  001340                     l581:
   960  001340  90D8               	bcf	status,0,c
   961  001342  320B               	rrcf	___lwmod@divisor+1,f,c
   962  001344  320A               	rrcf	___lwmod@divisor,f,c
   963  001346  2E0C               	decfsz	___lwmod@counter,f,c
   964  001348  D7F1               	goto	u300
   965  00134A                     l582:
   966  00134A  C008  F008         	movff	___lwmod@dividend,?___lwmod
   967  00134E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   968  001352  0012               	return		;funcret
   969  001354                     __end_of___lwmod:
   970                           	opt stack 0
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           prodh	equ	0xFF4
   976                           prodl	equ	0xFF3
   977                           wreg	equ	0xFE8
   978                           postinc2	equ	0xFDE
   979                           postdec2	equ	0xFDD
   980                           fsr2h	equ	0xFDA
   981                           fsr2l	equ	0xFD9
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function ___lwdiv *****************
   985 ;; Defined at:
   986 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  dividend        2    0[COMRAM] unsigned int 
   989 ;;  divisor         2    2[COMRAM] unsigned int 
   990 ;; Auto vars:     Size  Location     Type
   991 ;;  quotient        2    4[COMRAM] unsigned int 
   992 ;;  counter         1    6[COMRAM] unsigned char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  2    0[COMRAM] unsigned int 
   995 ;; Registers used:
   996 ;;		wreg, status,2, status,0
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;Total ram usage:        7 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_printf
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text5
  1016  001274                     __ptext5:
  1017                           	opt stack 0
  1018  001274                     ___lwdiv:
  1019                           	opt stack 29
  1020                           
  1021                           ;incstack = 0
  1022  001274  0E00               	movlw	0
  1023  001276  6E06               	movwf	___lwdiv@quotient+1,c
  1024  001278  0E00               	movlw	0
  1025  00127A  6E05               	movwf	___lwdiv@quotient,c
  1026  00127C  5003               	movf	___lwdiv@divisor,w,c
  1027  00127E  1004               	iorwf	___lwdiv@divisor+1,w,c
  1028  001280  B4D8               	btfsc	status,2,c
  1029  001282  D01C               	goto	l572
  1030  001284  0E01               	movlw	1
  1031  001286  6E07               	movwf	___lwdiv@counter,c
  1032  001288  D004               	goto	l567
  1033  00128A  90D8               	bcf	status,0,c
  1034  00128C  3603               	rlcf	___lwdiv@divisor,f,c
  1035  00128E  3604               	rlcf	___lwdiv@divisor+1,f,c
  1036  001290  2A07               	incf	___lwdiv@counter,f,c
  1037  001292                     l567:
  1038  001292  AE04               	btfss	___lwdiv@divisor+1,7,c
  1039  001294  D7FA               	goto	l568
  1040  001296                     u270:
  1041  001296  90D8               	bcf	status,0,c
  1042  001298  3605               	rlcf	___lwdiv@quotient,f,c
  1043  00129A  3606               	rlcf	___lwdiv@quotient+1,f,c
  1044  00129C  5003               	movf	___lwdiv@divisor,w,c
  1045  00129E  5C01               	subwf	___lwdiv@dividend,w,c
  1046  0012A0  5004               	movf	___lwdiv@divisor+1,w,c
  1047  0012A2  5802               	subwfb	___lwdiv@dividend+1,w,c
  1048  0012A4  A0D8               	btfss	status,0,c
  1049  0012A6  D005               	goto	l571
  1050  0012A8  5003               	movf	___lwdiv@divisor,w,c
  1051  0012AA  5E01               	subwf	___lwdiv@dividend,f,c
  1052  0012AC  5004               	movf	___lwdiv@divisor+1,w,c
  1053  0012AE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1054  0012B0  8005               	bsf	___lwdiv@quotient,0,c
  1055  0012B2                     l571:
  1056  0012B2  90D8               	bcf	status,0,c
  1057  0012B4  3204               	rrcf	___lwdiv@divisor+1,f,c
  1058  0012B6  3203               	rrcf	___lwdiv@divisor,f,c
  1059  0012B8  2E07               	decfsz	___lwdiv@counter,f,c
  1060  0012BA  D7ED               	goto	u270
  1061  0012BC                     l572:
  1062  0012BC  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1063  0012C0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1064  0012C4  0012               	return		;funcret
  1065  0012C6                     __end_of___lwdiv:
  1066                           	opt stack 0
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           prodh	equ	0xFF4
  1072                           prodl	equ	0xFF3
  1073                           wreg	equ	0xFE8
  1074                           postinc2	equ	0xFDE
  1075                           postdec2	equ	0xFDD
  1076                           fsr2h	equ	0xFDA
  1077                           fsr2l	equ	0xFD9
  1078                           status	equ	0xFD8
  1079                           
  1080 ;; *************** function _initLCD *****************
  1081 ;; Defined at:
  1082 ;;		line 60 in file "lcd.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1100 ;;Total ram usage:        1 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; Hardware stack levels required when called:    2
  1103 ;; This function calls:
  1104 ;;		_lcdInst
  1105 ;; This function is called by:
  1106 ;;		_main
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text6
  1111  0012C6                     __ptext6:
  1112                           	opt stack 0
  1113  0012C6                     _initLCD:
  1114                           	opt stack 28
  1115                           
  1116                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  1117                           
  1118                           ;incstack = 0
  1119  0012C6  0E27               	movlw	39
  1120  0012C8  6E04               	movwf	??_initLCD& (0+255),c
  1121  0012CA  0EF5               	movlw	245
  1122  0012CC                     u467:
  1123  0012CC  2EE8               	decfsz	wreg,f,c
  1124  0012CE  D7FE               	bra	u467
  1125  0012D0  2E04               	decfsz	??_initLCD& (0+255),f,c
  1126  0012D2  D7FC               	bra	u467
  1127  0012D4  F000               	nop	
  1128                           
  1129                           ;lcd.c: 69: lcdInst(0b00110011);
  1130  0012D6  0E33               	movlw	51
  1131  0012D8  ECDB  F009         	call	_lcdInst
  1132                           
  1133                           ;lcd.c: 70: lcdInst(0b00110010);
  1134  0012DC  0E32               	movlw	50
  1135  0012DE  ECDB  F009         	call	_lcdInst
  1136                           
  1137                           ;lcd.c: 71: lcdInst(0b00101000);
  1138  0012E2  0E28               	movlw	40
  1139  0012E4  ECDB  F009         	call	_lcdInst
  1140                           
  1141                           ;lcd.c: 72: lcdInst(0b00001111);
  1142  0012E8  0E0F               	movlw	15
  1143  0012EA  ECDB  F009         	call	_lcdInst
  1144                           
  1145                           ;lcd.c: 73: lcdInst(0b00000110);
  1146  0012EE  0E06               	movlw	6
  1147  0012F0  ECDB  F009         	call	_lcdInst
  1148                           
  1149                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  1150  0012F4  0E01               	movlw	1
  1151  0012F6  ECDB  F009         	call	_lcdInst
  1152  0012FA  0E27               	movlw	39
  1153  0012FC  6E04               	movwf	??_initLCD& (0+255),c
  1154  0012FE  0EF5               	movlw	245
  1155  001300                     u477:
  1156  001300  2EE8               	decfsz	wreg,f,c
  1157  001302  D7FE               	bra	u477
  1158  001304  2E04               	decfsz	??_initLCD& (0+255),f,c
  1159  001306  D7FC               	bra	u477
  1160  001308  F000               	nop	
  1161                           
  1162                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1163  00130A  0E0F               	movlw	15
  1164  00130C  ECDB  F009         	call	_lcdInst
  1165  001310  0012               	return		;funcret
  1166  001312                     __end_of_initLCD:
  1167                           	opt stack 0
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           prodh	equ	0xFF4
  1173                           prodl	equ	0xFF3
  1174                           wreg	equ	0xFE8
  1175                           postinc2	equ	0xFDE
  1176                           postdec2	equ	0xFDD
  1177                           fsr2h	equ	0xFDA
  1178                           fsr2l	equ	0xFD9
  1179                           status	equ	0xFD8
  1180                           
  1181 ;; *************** function _lcdInst *****************
  1182 ;; Defined at:
  1183 ;;		line 11 in file "lcd.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;  data            1    wreg     unsigned char 
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  data            1    2[COMRAM] unsigned char 
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, status,2, status,0, cstack
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1198 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;Total ram usage:        1 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; Hardware stack levels required when called:    1
  1204 ;; This function calls:
  1205 ;;		_lcdNibble
  1206 ;; This function is called by:
  1207 ;;		_initLCD
  1208 ;;		_lcd_set_cursor
  1209 ;;		_lcd_shift_cursor
  1210 ;;		_lcd_shift_display
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	text7
  1215  0013B6                     __ptext7:
  1216                           	opt stack 0
  1217  0013B6                     _lcdInst:
  1218                           	opt stack 28
  1219                           
  1220                           ;incstack = 0
  1221                           ;lcdInst@data stored from wreg
  1222  0013B6  6E03               	movwf	lcdInst@data,c
  1223                           
  1224                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1225  0013B8  948C               	bcf	3980,2,c	;volatile
  1226                           
  1227                           ;lcd.c: 20: lcdNibble(data);
  1228  0013BA  5003               	movf	lcdInst@data,w,c
  1229  0013BC  ECFB  F008         	call	_lcdNibble
  1230                           
  1231                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1232  0013C0  0E42               	movlw	66
  1233  0013C2                     u487:
  1234  0013C2  2EE8               	decfsz	wreg,f,c
  1235  0013C4  D7FE               	bra	u487
  1236  0013C6  D000               	nop2	
  1237  0013C8  0012               	return		;funcret
  1238  0013CA                     __end_of_lcdInst:
  1239                           	opt stack 0
  1240                           tblptru	equ	0xFF8
  1241                           tblptrh	equ	0xFF7
  1242                           tblptrl	equ	0xFF6
  1243                           tablat	equ	0xFF5
  1244                           prodh	equ	0xFF4
  1245                           prodl	equ	0xFF3
  1246                           wreg	equ	0xFE8
  1247                           postinc2	equ	0xFDE
  1248                           postdec2	equ	0xFDD
  1249                           fsr2h	equ	0xFDA
  1250                           fsr2l	equ	0xFD9
  1251                           status	equ	0xFD8
  1252                           
  1253 ;; *************** function _lcdNibble *****************
  1254 ;; Defined at:
  1255 ;;		line 37 in file "lcd.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  data            1    wreg     unsigned char 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  data            1    1[COMRAM] unsigned char 
  1260 ;;  temp            1    0[COMRAM] unsigned char 
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, status,2, status,0
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;Total ram usage:        2 bytes
  1275 ;; Hardware stack levels used:    1
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_lcdInst
  1280 ;;		_putch
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text8
  1285  0011F6                     __ptext8:
  1286                           	opt stack 0
  1287  0011F6                     _lcdNibble:
  1288                           	opt stack 28
  1289                           
  1290                           ;incstack = 0
  1291                           ;lcdNibble@data stored from wreg
  1292  0011F6  6E02               	movwf	lcdNibble@data,c
  1293                           
  1294                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1295  0011F8  5002               	movf	lcdNibble@data,w,c
  1296  0011FA  0BF0               	andlw	240
  1297  0011FC  6E01               	movwf	lcdNibble@temp,c
  1298                           
  1299                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1300  0011FE  508C               	movf	3980,w,c	;volatile
  1301  001200  0B0F               	andlw	15
  1302  001202  6E8C               	movwf	3980,c	;volatile
  1303                           
  1304                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1305  001204  5001               	movf	lcdNibble@temp,w,c
  1306  001206  108C               	iorwf	3980,w,c	;volatile
  1307  001208  6E8C               	movwf	3980,c	;volatile
  1308                           
  1309                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1310  00120A  0E00               	movlw	0
  1311  00120C  BEF2               	btfsc	intcon,7,c	;volatile
  1312  00120E  0E01               	movlw	1
  1313  001210  6E1F               	movwf	lcd@LCDinterruptState,c
  1314  001212  9EF2               	bcf	intcon,7,c	;volatile
  1315  001214  868C               	bsf	3980,3,c	;volatile
  1316  001216  0E10               	movlw	16
  1317  001218                     u497:
  1318  001218  2EE8               	decfsz	wreg,f,c
  1319  00121A  D7FE               	bra	u497
  1320  00121C  D000               	nop2	
  1321  00121E  968C               	bcf	3980,3,c	;volatile
  1322  001220  0E42               	movlw	66
  1323  001222                     u507:
  1324  001222  2EE8               	decfsz	wreg,f,c
  1325  001224  D7FE               	bra	u507
  1326  001226  D000               	nop2	
  1327  001228  B01F               	btfsc	lcd@LCDinterruptState,0,c
  1328  00122A  D002               	bra	u15
  1329  00122C  9EF2               	bcf	intcon,7,c	;volatile
  1330  00122E  D001               	bra	u16
  1331  001230                     u15:
  1332  001230  8EF2               	bsf	intcon,7,c	;volatile
  1333  001232                     u16:
  1334                           
  1335                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1336  001232  3802               	swapf	lcdNibble@data,w,c
  1337  001234  0BF0               	andlw	240
  1338  001236  6E02               	movwf	lcdNibble@data,c
  1339                           
  1340                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1341  001238  5002               	movf	lcdNibble@data,w,c
  1342  00123A  0BF0               	andlw	240
  1343  00123C  6E01               	movwf	lcdNibble@temp,c
  1344                           
  1345                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1346  00123E  508C               	movf	3980,w,c	;volatile
  1347  001240  0B0F               	andlw	15
  1348  001242  6E8C               	movwf	3980,c	;volatile
  1349                           
  1350                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1351  001244  5001               	movf	lcdNibble@temp,w,c
  1352  001246  108C               	iorwf	3980,w,c	;volatile
  1353  001248  6E8C               	movwf	3980,c	;volatile
  1354                           
  1355                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1356  00124A  0E00               	movlw	0
  1357  00124C  BEF2               	btfsc	intcon,7,c	;volatile
  1358  00124E  0E01               	movlw	1
  1359  001250  6E1F               	movwf	lcd@LCDinterruptState,c
  1360  001252  9EF2               	bcf	intcon,7,c	;volatile
  1361  001254  868C               	bsf	3980,3,c	;volatile
  1362  001256  0E10               	movlw	16
  1363  001258                     u517:
  1364  001258  2EE8               	decfsz	wreg,f,c
  1365  00125A  D7FE               	bra	u517
  1366  00125C  D000               	nop2	
  1367  00125E  968C               	bcf	3980,3,c	;volatile
  1368  001260  0E42               	movlw	66
  1369  001262                     u527:
  1370  001262  2EE8               	decfsz	wreg,f,c
  1371  001264  D7FE               	bra	u527
  1372  001266  D000               	nop2	
  1373  001268  B01F               	btfsc	lcd@LCDinterruptState,0,c
  1374  00126A  D002               	bra	u25
  1375  00126C  9EF2               	bcf	intcon,7,c	;volatile
  1376  00126E  D001               	bra	u26
  1377  001270                     u25:
  1378  001270  8EF2               	bsf	intcon,7,c	;volatile
  1379  001272                     u26:
  1380  001272  0012               	return		;funcret
  1381  001274                     __end_of_lcdNibble:
  1382                           	opt stack 0
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           prodh	equ	0xFF4
  1388                           prodl	equ	0xFF3
  1389                           intcon	equ	0xFF2
  1390                           wreg	equ	0xFE8
  1391                           postinc2	equ	0xFDE
  1392                           postdec2	equ	0xFDD
  1393                           fsr2h	equ	0xFDA
  1394                           fsr2l	equ	0xFD9
  1395                           status	equ	0xFD8
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           prodh	equ	0xFF4
  1401                           prodl	equ	0xFF3
  1402                           intcon	equ	0xFF2
  1403                           wreg	equ	0xFE8
  1404                           postinc2	equ	0xFDE
  1405                           postdec2	equ	0xFDD
  1406                           fsr2h	equ	0xFDA
  1407                           fsr2l	equ	0xFD9
  1408                           status	equ	0xFD8
  1409                           
  1410                           	psect	rparam
  1411  0000                     tblptru	equ	0xFF8
  1412                           tblptrh	equ	0xFF7
  1413                           tblptrl	equ	0xFF6
  1414                           tablat	equ	0xFF5
  1415                           prodh	equ	0xFF4
  1416                           prodl	equ	0xFF3
  1417                           intcon	equ	0xFF2
  1418                           wreg	equ	0xFE8
  1419                           postinc2	equ	0xFDE
  1420                           postdec2	equ	0xFDD
  1421                           fsr2h	equ	0xFDA
  1422                           fsr2l	equ	0xFD9
  1423                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    16
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      32
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1441
                                             24 COMRAM     2     2      0
                            _initLCD
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1329
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      20       1       25.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20      34        0.0%
DATA                 0      0      20       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar  6 13:33:04 2018

                     l70 11E2                       l67 119A                       l76 136C  
                     u15 1230                       u16 1232                       u25 1270  
                     u26 1272              __CFG_CPD$ON 000000              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l160 10CE                      l152 105E  
                    l145 1024                      l154 1086                      l146 1034  
                    l158 10C8                      l159 1116                      l571 12B2  
                    l572 12BC                      l581 1340                      l582 134A  
                    l567 1292                      l568 128A                      l577 1328  
                    l578 1320             __CFG_CPB$OFF 000000                      u300 132C  
                    u270 1296                      u360 10B6                      u507 1222  
                    u380 111E                      u517 1258                      u437 118C  
                    u527 1262                      u447 11D8                      u457 13AE  
                    u467 12CC                      u477 1300                      u487 13C2  
                    u497 1218                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1085 108A                     _ADON 007E10  
                   STR_1 1016                     STR_2 1016                     STR_3 1011  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _LATE 000F8D                     _main 1138  
                   fsr2h 000FDA                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000         __end_of_LCD_LEFT 100C  
                  ?_main 0001          __end_of___lwdiv 12C6          __end_of___lwmod 1354  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 13CA           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_readADC 138C          __end_of_initLCD 1312  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 100B                    _putch 13A2  
                  tablat 000FF5        _LCDinterruptState 0020                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 138C             __end_of_main 11F6  
      __end_of_LCD_RIGHT 100D                   ??_main 0019            __activetblptr 000002  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   ?_putch 0001                   _OSCCON 000FD3  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??___lwdiv 0005  
              ??___lwmod 000C                ??_lcdInst 0003                   _printf 101A  
              ??_readADC 0003                ??_initLCD 0004             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 1398            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_putch 13B6       __size_of_lcdNibble 007E  
                ??_putch 0003                  ?_printf 000D     lcd@LCDinterruptState 001F  
      __end_of_lcdNibble 1274                  __Hparam 0000                  __Lparam 0000  
                ___lwdiv 1274                  ___lwmod 1312             __psmallconst 1000  
                __pcinit 138C                  __ramtop 1000                  _lcdInst 13B6  
                __ptext0 1138                  __ptext1 1354                  __ptext2 101A  
                __ptext3 13A2                  __ptext4 1312                  __ptext5 1274  
                __ptext6 12C6                  __ptext7 13B6                  __ptext8 11F6  
        __size_of_printf 011E                  _readADC 1354                  _initLCD 12C6  
                _counter 001D                  _dpowers 1001                _LCD_RIGHT 100C  
   end_of_initialization 1398    __end_of_LCD_SIZE_HORZ 100F    __end_of_LCD_SIZE_VERT 100E  
          __Lmediumconst 0000                  printf@c 0018                  printf@f 000D  
                postdec2 000FDD                  postinc2 000FDE           __end_of_printf 1138  
    start_initialization 138C         __CFG_OSC$INTIO67 000000         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0011            _analog_result 001B              __pbssCOMRAM 001B  
       ___lwdiv@dividend 0001        __CFG_CCP2MX$PORTC 000000                _lcdNibble 11F6  
               ?___lwdiv 0001                 ?___lwmod 0008                 ?_lcdInst 0001  
               ?_readADC 0001                 ?_initLCD 0001              __smallconst 1000  
       ___lwdiv@quotient 0005           __size_of_putch 0014                 _LCD_LEFT 100B  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000               ?_lcdNibble 0001  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0            lcdNibble@data 0002  
             printf@flag 0014            lcdNibble@temp 0001               printf@prec 0015  
         _LCD_HORZ_LIMIT 1010                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of___lwdiv 0052         __size_of___lwmod 0042  
         readADC@channel 0005         __size_of_lcdInst 0014         __size_of_readADC 0038  
       __size_of_initLCD 004C   __end_of_LCD_HORZ_LIMIT 1011          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007           _LCD_VERT_LIMIT 100F            __size_of_main 00BE  
            ??_lcdNibble 0001                printf@val 0016                putch@data 0003  
             _INTCONbits 000FF2   __end_of_LCD_VERT_LIMIT 1010            _LCD_SIZE_HORZ 100E  
       ___lwmod@dividend 0008            _LCD_SIZE_VERT 100D                 printf@ap 0012  
            lcdInst@data 0003          ___lwmod@divisor 000A          ___lwmod@counter 000C  
