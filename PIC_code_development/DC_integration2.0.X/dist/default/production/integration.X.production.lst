

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 13 14:51:34 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35  0000                     
    36                           ; Version 1.45
    37                           ; Generated 16/11/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4620 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataCOMRAM
    72  001B08                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _max
    76  001B08  0004               	dw	4
    77                           
    78                           	psect	smallconst
    79  001000                     __psmallconst:
    80                           	opt stack 0
    81  001000  00                 	db	0
    82  001001                     _dpowers:
    83                           	opt stack 0
    84  001001  0001               	dw	1
    85  001003  000A               	dw	10
    86  001005  0064               	dw	100
    87  001007  03E8               	dw	1000
    88  001009  2710               	dw	10000
    89  00100B                     __end_of_dpowers:
    90                           	opt stack 0
    91  00100B                     _LCD_LEFT:
    92                           	opt stack 0
    93  00100B  00                 	db	0
    94  00100C                     __end_of_LCD_LEFT:
    95                           	opt stack 0
    96  00100C                     _LCD_RIGHT:
    97                           	opt stack 0
    98  00100C  01                 	db	1
    99  00100D                     __end_of_LCD_RIGHT:
   100                           	opt stack 0
   101  00100D                     _LCD_SIZE_VERT:
   102                           	opt stack 0
   103  00100D  02                 	db	2
   104  00100E                     __end_of_LCD_SIZE_VERT:
   105                           	opt stack 0
   106  00100E                     _LCD_SIZE_HORZ:
   107                           	opt stack 0
   108  00100E  10                 	db	16
   109  00100F                     __end_of_LCD_SIZE_HORZ:
   110                           	opt stack 0
   111  00100F                     _LCD_VERT_LIMIT:
   112                           	opt stack 0
   113  00100F  02                 	db	2
   114  001010                     __end_of_LCD_VERT_LIMIT:
   115                           	opt stack 0
   116  001010                     _LCD_HORZ_LIMIT:
   117                           	opt stack 0
   118  001010  28                 	db	40
   119  001011                     __end_of_LCD_HORZ_LIMIT:
   120                           	opt stack 0
   121  0000                     _INTCONbits	set	4082
   122  0000                     _TRISDbits	set	3989
   123  0000                     _LATDbits	set	3980
   124  0000                     _TRISCbits	set	3988
   125  0000                     _LATCbits	set	3979
   126  0000                     _ADRESH	set	4036
   127  0000                     _ADRESL	set	4035
   128  0000                     _ADCON0bits	set	4034
   129  0000                     _ADCON2bits	set	4032
   130  0000                     _ADCON1	set	4033
   131  0000                     _ADCON0	set	4034
   132  0000                     _TRISE	set	3990
   133  0000                     _TRISD	set	3989
   134  0000                     _TRISC	set	3988
   135  0000                     _TRISB	set	3987
   136  0000                     _TRISA	set	3986
   137  0000                     _LATE	set	3981
   138  0000                     _LATD	set	3980
   139  0000                     _LATC	set	3979
   140  0000                     _LATB	set	3978
   141  0000                     _LATA	set	3977
   142  0000                     _OSCCON	set	4051
   143  0000                     _ADON	set	32272
   144  001011                     STR_21:
   145  001011  72                 	db	114	;'r'
   146  001012  65                 	db	101	;'e'
   147  001013  6D                 	db	109	;'m'
   148  001014  61                 	db	97	;'a'
   149  001015  69                 	db	105	;'i'
   150  001016  6E                 	db	110	;'n'
   151  001017  20                 	db	32
   152  001018  57                 	db	87	;'W'
   153  001019  61                 	db	97	;'a'
   154  00101A  73                 	db	115	;'s'
   155  00101B  68                 	db	104	;'h'
   156  00101C  65                 	db	101	;'e'
   157  00101D  72                 	db	114	;'r'
   158  00101E  73                 	db	115	;'s'
   159  00101F  3A                 	db	58	;':'
   160  001020  25                 	db	37
   161  001021  64                 	db	100	;'d'
   162  001022  00                 	db	0
   163  001023                     STR_19:
   164  001023  72                 	db	114	;'r'
   165  001024  65                 	db	101	;'e'
   166  001025  6D                 	db	109	;'m'
   167  001026  61                 	db	97	;'a'
   168  001027  69                 	db	105	;'i'
   169  001028  6E                 	db	110	;'n'
   170  001029  20                 	db	32
   171  00102A  73                 	db	115	;'s'
   172  00102B  70                 	db	112	;'p'
   173  00102C  61                 	db	97	;'a'
   174  00102D  63                 	db	99	;'c'
   175  00102E  65                 	db	101	;'e'
   176  00102F  72                 	db	114	;'r'
   177  001030  3A                 	db	58	;':'
   178  001031  25                 	db	37
   179  001032  64                 	db	100	;'d'
   180  001033  00                 	db	0
   181  001034                     STR_20:
   182  001034  72                 	db	114	;'r'
   183  001035  65                 	db	101	;'e'
   184  001036  6D                 	db	109	;'m'
   185  001037  61                 	db	97	;'a'
   186  001038  69                 	db	105	;'i'
   187  001039  6E                 	db	110	;'n'
   188  00103A  20                 	db	32
   189  00103B  6E                 	db	110	;'n'
   190  00103C  75                 	db	117	;'u'
   191  00103D  74                 	db	116	;'t'
   192  00103E  73                 	db	115	;'s'
   193  00103F  3A                 	db	58	;':'
   194  001040  25                 	db	37
   195  001041  64                 	db	100	;'d'
   196  001042  00                 	db	0
   197  001043                     STR_18:
   198  001043  72                 	db	114	;'r'
   199  001044  65                 	db	101	;'e'
   200  001045  6D                 	db	109	;'m'
   201  001046  61                 	db	97	;'a'
   202  001047  69                 	db	105	;'i'
   203  001048  6E                 	db	110	;'n'
   204  001049  20                 	db	32
   205  00104A  62                 	db	98	;'b'
   206  00104B  6F                 	db	111	;'o'
   207  00104C  6C                 	db	108	;'l'
   208  00104D  74                 	db	116	;'t'
   209  00104E  3A                 	db	58	;':'
   210  00104F  25                 	db	37
   211  001050  64                 	db	100	;'d'
   212  001051  00                 	db	0
   213  001052                     STR_16:
   214  001052  53                 	db	83	;'S'
   215  001053  70                 	db	112	;'p'
   216  001054  61                 	db	97	;'a'
   217  001055  63                 	db	99	;'c'
   218  001056  65                 	db	101	;'e'
   219  001057  72                 	db	114	;'r'
   220  001058  3A                 	db	58	;':'
   221  001059  25                 	db	37
   222  00105A  64                 	db	100	;'d'
   223  00105B  00                 	db	0
   224  00105C                     STR_14:
   225  00105C  42                 	db	66	;'B'
   226  00105D  6F                 	db	111	;'o'
   227  00105E  6C                 	db	108	;'l'
   228  00105F  74                 	db	116	;'t'
   229  001060  73                 	db	115	;'s'
   230  001061  3A                 	db	58	;':'
   231  001062  25                 	db	37
   232  001063  64                 	db	100	;'d'
   233  001064  00                 	db	0
   234  001065                     STR_15:
   235  001065  4E                 	db	78	;'N'
   236  001066  75                 	db	117	;'u'
   237  001067  74                 	db	116	;'t'
   238  001068  73                 	db	115	;'s'
   239  001069  3A                 	db	58	;':'
   240  00106A  25                 	db	37
   241  00106B  64                 	db	100	;'d'
   242  00106C  00                 	db	0
   243  00106D                     STR_3:
   244  00106D  64                 	db	100	;'d'
   245  00106E  6F                 	db	111	;'o'
   246  00106F  6E                 	db	110	;'n'
   247  001070  65                 	db	101	;'e'
   248  001071  00                 	db	0
   249  0000                     
   250                           ; #config settings
   251  001072  00                 	db	0	; dummy byte at the end
   252  0000                     
   253                           	psect	cinit
   254  0019C2                     __pcinit:
   255                           	opt stack 0
   256  0019C2                     start_initialization:
   257                           	opt stack 0
   258  0019C2                     __initialization:
   259                           	opt stack 0
   260                           
   261                           ; Initialize objects allocated to COMRAM (2 bytes)
   262                           ; load TBLPTR registers with __pidataCOMRAM
   263  0019C2  0E08               	movlw	low __pidataCOMRAM
   264  0019C4  6EF6               	movwf	tblptrl,c
   265  0019C6  0E1B               	movlw	high __pidataCOMRAM
   266  0019C8  6EF7               	movwf	tblptrh,c
   267  0019CA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   268  0019CC  6EF8               	movwf	tblptru,c
   269  0019CE  0009               	tblrd		*+	;fetch initializer
   270  0019D0  CFF5 F02D          	movff	tablat,__pdataCOMRAM
   271  0019D4  0009               	tblrd		*+	;fetch initializer
   272  0019D6  CFF5 F02E          	movff	tablat,__pdataCOMRAM+1
   273                           
   274                           ; Clear objects allocated to COMRAM (18 bytes)
   275  0019DA  EE00  F01B         	lfsr	0,__pbssCOMRAM
   276  0019DE  0E12               	movlw	18
   277  0019E0                     clear_0:
   278  0019E0  6AEE               	clrf	postinc0,c
   279  0019E2  06E8               	decf	wreg,f,c
   280  0019E4  E1FD               	bnz	clear_0
   281  0019E6                     end_of_initialization:
   282                           	opt stack 0
   283  0019E6                     __end_of__initialization:
   284                           	opt stack 0
   285  0019E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   286  0019E8  6EF8               	movwf	tblptru,c
   287  0019EA  0100               	movlb	0
   288  0019EC  EF3A  F008         	goto	_main	;jump to C main() function
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	bssCOMRAM
   297  00001B                     __pbssCOMRAM:
   298                           	opt stack 0
   299  00001B                     _i:
   300                           	opt stack 0
   301  00001B                     	ds	2
   302  00001D                     _analog_result:
   303                           	opt stack 0
   304  00001D                     	ds	2
   305  00001F                     _B_remain:
   306                           	opt stack 0
   307  00001F                     	ds	2
   308  000021                     _W_counter:
   309                           	opt stack 0
   310  000021                     	ds	2
   311  000023                     _S_counter:
   312                           	opt stack 0
   313  000023                     	ds	2
   314  000025                     _N_counter:
   315                           	opt stack 0
   316  000025                     	ds	2
   317  000027                     _B_counter:
   318                           	opt stack 0
   319  000027                     	ds	2
   320  000029                     _state:
   321                           	opt stack 0
   322  000029                     	ds	2
   323  00002B                     lcd@LCDinterruptState:
   324                           	opt stack 0
   325  00002B                     	ds	1
   326  00002C                     	ds	1
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           
   334                           	psect	dataCOMRAM
   335  00002D                     __pdataCOMRAM:
   336                           	opt stack 0
   337  00002D                     _max:
   338                           	opt stack 0
   339  00002D                     	ds	2
   340                           tblptru	equ	0xFF8
   341                           tblptrh	equ	0xFF7
   342                           tblptrl	equ	0xFF6
   343                           tablat	equ	0xFF5
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           
   347                           	psect	cstackCOMRAM
   348  000001                     __pcstackCOMRAM:
   349                           	opt stack 0
   350  000001                     ??_motorStart_0:
   351  000001                     ??_motorStop_0:
   352  000001                     ??_servoRotate_counter:
   353  000001                     ??_motorStart_1:
   354  000001                     ??_motorStop_1:
   355  000001                     ??_motorStart_2:
   356  000001                     ??_motorStop_2:
   357  000001                     ??_motorStart_3:
   358  000001                     ??_motorStop_3:
   359  000001                     ??_servoRotate80:
   360  000001                     ??_servoRotate80_2:
   361  000001                     ??_servoRotate80_3:
   362  000001                     ??_servoRotate80_4:
   363  000001                     ?_readADC:
   364                           	opt stack 0
   365  000001                     ?___lwdiv:
   366                           	opt stack 0
   367  000001                     lcdNibble@temp:
   368                           	opt stack 0
   369  000001                     ___lwdiv@dividend:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x0
   373  000001                     	ds	1
   374  000002                     lcdNibble@data:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x1
   378  000002                     	ds	1
   379  000003                     ??_readADC:
   380  000003                     lcdInst@data:
   381                           	opt stack 0
   382  000003                     putch@data:
   383                           	opt stack 0
   384  000003                     ___lwdiv@divisor:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x2
   388  000003                     	ds	1
   389  000004                     ??_initLCD:
   390                           
   391                           ; 1 bytes @ 0x3
   392  000004                     	ds	1
   393  000005                     readADC@channel:
   394                           	opt stack 0
   395  000005                     ___lwdiv@quotient:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x4
   399  000005                     	ds	2
   400  000007                     ___lwdiv@counter:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x6
   404  000007                     	ds	1
   405  000008                     ?___lwmod:
   406                           	opt stack 0
   407  000008                     ___lwmod@dividend:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x7
   411  000008                     	ds	2
   412  00000A                     ___lwmod@divisor:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x9
   416  00000A                     	ds	2
   417  00000C                     ___lwmod@counter:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0xB
   421  00000C                     	ds	1
   422  00000D                     ?_printf:
   423                           	opt stack 0
   424  00000D                     printf@f:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0xC
   428  00000D                     	ds	4
   429  000011                     ??_printf:
   430                           
   431                           ; 1 bytes @ 0x10
   432  000011                     	ds	1
   433  000012                     printf@ap:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x11
   437  000012                     	ds	2
   438  000014                     printf@flag:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x13
   442  000014                     	ds	1
   443  000015                     printf@prec:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x14
   447  000015                     	ds	1
   448  000016                     printf@val:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x15
   452  000016                     	ds	2
   453  000018                     printf@c:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x17
   457  000018                     	ds	1
   458  000019                     ??_main:
   459                           
   460                           ; 1 bytes @ 0x18
   461  000019                     	ds	2
   462                           tblptru	equ	0xFF8
   463                           tblptrh	equ	0xFF7
   464                           tblptrl	equ	0xFF6
   465                           tablat	equ	0xFF5
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           
   469 ;;
   470 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   471 ;;
   472 ;; *************** function _main *****************
   473 ;; Defined at:
   474 ;;		line 85 in file "main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   492 ;;Total ram usage:        2 bytes
   493 ;; Hardware stack levels required when called:    3
   494 ;; This function calls:
   495 ;;		_initLCD
   496 ;;		_motorStart_0
   497 ;;		_motorStart_1
   498 ;;		_motorStart_2
   499 ;;		_motorStart_3
   500 ;;		_motorStop_0
   501 ;;		_motorStop_1
   502 ;;		_motorStop_2
   503 ;;		_motorStop_3
   504 ;;		_printf
   505 ;;		_readADC
   506 ;;		_servoRotate80
   507 ;;		_servoRotate80_2
   508 ;;		_servoRotate80_3
   509 ;;		_servoRotate80_4
   510 ;;		_servoRotate_counter
   511 ;; This function is called by:
   512 ;;		Startup code after reset
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           	psect	text0
   517  001074                     __ptext0:
   518                           	opt stack 0
   519  001074                     _main:
   520                           	opt stack 28
   521                           
   522                           ;main.c: 89: OSCCON = 0xF2;
   523                           
   524                           ;incstack = 0
   525  001074  0EF2               	movlw	242
   526  001076  6ED3               	movwf	4051,c	;volatile
   527                           
   528                           ;main.c: 94: LATA = 0x00;
   529  001078  0E00               	movlw	0
   530  00107A  6E89               	movwf	3977,c	;volatile
   531                           
   532                           ;main.c: 95: LATB = 0x00;
   533  00107C  0E00               	movlw	0
   534  00107E  6E8A               	movwf	3978,c	;volatile
   535                           
   536                           ;main.c: 96: LATC = 0x00;
   537  001080  0E00               	movlw	0
   538  001082  6E8B               	movwf	3979,c	;volatile
   539                           
   540                           ;main.c: 97: LATD = 0x00;
   541  001084  0E00               	movlw	0
   542  001086  6E8C               	movwf	3980,c	;volatile
   543                           
   544                           ;main.c: 98: LATE = 0x00;
   545  001088  0E00               	movlw	0
   546  00108A  6E8D               	movwf	3981,c	;volatile
   547                           
   548                           ;main.c: 102: TRISA = 0xFF;
   549  00108C  6892               	setf	3986,c	;volatile
   550                           
   551                           ;main.c: 103: TRISB = 0xFF;
   552  00108E  6893               	setf	3987,c	;volatile
   553                           
   554                           ;main.c: 104: TRISC = 0x00;
   555  001090  0E00               	movlw	0
   556  001092  6E94               	movwf	3988,c	;volatile
   557                           
   558                           ;main.c: 105: TRISD = 0x00;
   559  001094  0E00               	movlw	0
   560  001096  6E95               	movwf	3989,c	;volatile
   561                           
   562                           ;main.c: 106: TRISE = 0x00;
   563  001098  0E00               	movlw	0
   564  00109A  6E96               	movwf	3990,c	;volatile
   565                           
   566                           ;main.c: 109: ADCON0 = 0x00;
   567  00109C  0E00               	movlw	0
   568  00109E  6EC2               	movwf	4034,c	;volatile
   569                           
   570                           ;main.c: 110: ADCON1 = 0x0B;
   571  0010A0  0E0B               	movlw	11
   572  0010A2  6EC1               	movwf	4033,c	;volatile
   573                           
   574                           ;main.c: 111: ADCON2bits.ADFM = 1;
   575  0010A4  8EC0               	bsf	4032,7,c	;volatile
   576                           
   577                           ;main.c: 124: motorStart_0();
   578  0010A6  EC61  F00D         	call	_motorStart_0	;wreg free
   579                           
   580                           ;main.c: 132: initLCD();
   581  0010AA  ECCF  F00B         	call	_initLCD	;wreg free
   582                           
   583                           ;main.c: 133: printf("%d",B_counter);
   584  0010AE  0E59               	movlw	low (STR_16+7)
   585  0010B0  6E0D               	movwf	printf@f,c
   586  0010B2  0E10               	movlw	high (STR_16+7)
   587  0010B4  6E0E               	movwf	printf@f+1,c
   588  0010B6  C027  F00F         	movff	_B_counter,?_printf+2
   589  0010BA  C028  F010         	movff	_B_counter+1,?_printf+3
   590  0010BE  ECD8  F00A         	call	_printf	;wreg free
   591                           
   592                           ;main.c: 134: _delay((unsigned long)((100)*(8000000/4000.0)));
   593  0010C2  0E02               	movlw	2
   594  0010C4  6E1A               	movwf	(??_main+1)& (0+255),c
   595  0010C6  0E04               	movlw	4
   596  0010C8  6E19               	movwf	??_main& (0+255),c
   597  0010CA  0EBA               	movlw	186
   598  0010CC                     u977:
   599  0010CC  2EE8               	decfsz	wreg,f,c
   600  0010CE  D7FE               	bra	u977
   601  0010D0  2E19               	decfsz	??_main& (0+255),f,c
   602  0010D2  D7FC               	bra	u977
   603  0010D4  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   604  0010D6  D7FA               	bra	u977
   605  0010D8  D000               	nop2	
   606                           
   607                           ;main.c: 135: motorStart_0();
   608  0010DA  EC61  F00D         	call	_motorStart_0	;wreg free
   609  0010DE                     l1678:
   610                           
   611                           ;main.c: 140: if (B_counter == max){
   612  0010DE  502D               	movf	_max,w,c
   613  0010E0  1827               	xorwf	_B_counter,w,c
   614  0010E2  E107               	bnz	l1682
   615  0010E4  502E               	movf	_max+1,w,c
   616  0010E6  1828               	xorwf	_B_counter+1,w,c
   617  0010E8  A4D8               	btfss	status,2,c
   618  0010EA  D003               	goto	l116
   619                           
   620                           ;main.c: 141: motorStop_0();
   621  0010EC  EC25  F00D         	call	_motorStop_0	;wreg free
   622                           
   623                           ;main.c: 142: break;
   624  0010F0  D01F               	goto	l117
   625  0010F2                     l116:
   626  0010F2                     l1682:
   627                           
   628                           ;main.c: 143: }
   629                           ;main.c: 144: if (readADC(0)<=250 ){
   630  0010F2  0E00               	movlw	0
   631  0010F4  ECC5  F00C         	call	_readADC
   632  0010F8  5002               	movf	?_readADC+1,w,c
   633  0010FA  E1F1               	bnz	l1678
   634  0010FC  0EFB               	movlw	251
   635  0010FE  5C01               	subwf	?_readADC,w,c
   636  001100  B0D8               	btfsc	status,0,c
   637  001102  D7ED               	goto	l115
   638                           
   639                           ;main.c: 146: B_counter ++;
   640  001104  4A27               	infsnz	_B_counter,f,c
   641  001106  2A28               	incf	_B_counter+1,f,c
   642                           
   643                           ;main.c: 147: initLCD();
   644  001108  ECCF  F00B         	call	_initLCD	;wreg free
   645                           
   646                           ;main.c: 148: printf("%d", B_counter);
   647  00110C  0E59               	movlw	low (STR_16+7)
   648  00110E  6E0D               	movwf	printf@f,c
   649  001110  0E10               	movlw	high (STR_16+7)
   650  001112  6E0E               	movwf	printf@f+1,c
   651  001114  C027  F00F         	movff	_B_counter,?_printf+2
   652  001118  C028  F010         	movff	_B_counter+1,?_printf+3
   653  00111C  ECD8  F00A         	call	_printf	;wreg free
   654                           
   655                           ;main.c: 149: _delay((unsigned long)((50)*(8000000/4000.0)));
   656  001120  0E82               	movlw	130
   657  001122  6E19               	movwf	??_main& (0+255),c
   658  001124  0EDE               	movlw	222
   659  001126                     u987:
   660  001126  2EE8               	decfsz	wreg,f,c
   661  001128  D7FE               	bra	u987
   662  00112A  2E19               	decfsz	??_main& (0+255),f,c
   663  00112C  D7FC               	bra	u987
   664  00112E  D7D7               	goto	l115
   665  001130                     l117:
   666                           
   667                           ;main.c: 150: }
   668                           ;main.c: 155: }
   669                           ;main.c: 156: initLCD();
   670  001130  ECCF  F00B         	call	_initLCD	;wreg free
   671                           
   672                           ;main.c: 157: printf("done");
   673  001134  0E6D               	movlw	low STR_3
   674  001136  6E0D               	movwf	printf@f,c
   675  001138  0E10               	movlw	high STR_3
   676  00113A  6E0E               	movwf	printf@f+1,c
   677  00113C  ECD8  F00A         	call	_printf	;wreg free
   678                           
   679                           ;main.c: 158: _delay((unsigned long)((1000)*(8000000/4000.0)));
   680  001140  0E0B               	movlw	11
   681  001142  6E1A               	movwf	(??_main+1)& (0+255),c
   682  001144  0E26               	movlw	38
   683  001146  6E19               	movwf	??_main& (0+255),c
   684  001148  0E5E               	movlw	94
   685  00114A                     u997:
   686  00114A  2EE8               	decfsz	wreg,f,c
   687  00114C  D7FE               	bra	u997
   688  00114E  2E19               	decfsz	??_main& (0+255),f,c
   689  001150  D7FC               	bra	u997
   690  001152  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   691  001154  D7FA               	bra	u997
   692                           
   693                           ;main.c: 161: for (i = 0; i< 30; i ++){
   694  001156  0E00               	movlw	0
   695  001158  6E1C               	movwf	_i+1,c
   696  00115A  0E00               	movlw	0
   697  00115C  6E1B               	movwf	_i,c
   698  00115E                     l1700:
   699  00115E  BE1C               	btfsc	_i+1,7,c
   700  001160  D006               	goto	l120
   701  001162  501C               	movf	_i+1,w,c
   702  001164  E109               	bnz	l1710
   703  001166  0E1E               	movlw	30
   704  001168  5C1B               	subwf	_i,w,c
   705  00116A  B0D8               	btfsc	status,0,c
   706  00116C  D005               	goto	u820
   707  00116E                     l120:
   708                           
   709                           ;main.c: 162: servoRotate_counter();
   710  00116E  ECF5  F00B         	call	_servoRotate_counter	;wreg free
   711  001172  4A1B               	infsnz	_i,f,c
   712  001174  2A1C               	incf	_i+1,f,c
   713  001176  D7F3               	goto	l1700
   714  001178                     u820:
   715  001178                     l1710:
   716                           
   717                           ;main.c: 163: }
   718                           ;main.c: 169: initLCD();
   719  001178  ECCF  F00B         	call	_initLCD	;wreg free
   720                           
   721                           ;main.c: 170: printf("%d",N_counter);
   722  00117C  0E59               	movlw	low (STR_16+7)
   723  00117E  6E0D               	movwf	printf@f,c
   724  001180  0E10               	movlw	high (STR_16+7)
   725  001182  6E0E               	movwf	printf@f+1,c
   726  001184  C025  F00F         	movff	_N_counter,?_printf+2
   727  001188  C026  F010         	movff	_N_counter+1,?_printf+3
   728  00118C  ECD8  F00A         	call	_printf	;wreg free
   729                           
   730                           ;main.c: 171: _delay((unsigned long)((100)*(8000000/4000.0)));
   731  001190  0E02               	movlw	2
   732  001192  6E1A               	movwf	(??_main+1)& (0+255),c
   733  001194  0E04               	movlw	4
   734  001196  6E19               	movwf	??_main& (0+255),c
   735  001198  0EBA               	movlw	186
   736  00119A                     u1007:
   737  00119A  2EE8               	decfsz	wreg,f,c
   738  00119C  D7FE               	bra	u1007
   739  00119E  2E19               	decfsz	??_main& (0+255),f,c
   740  0011A0  D7FC               	bra	u1007
   741  0011A2  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   742  0011A4  D7FA               	bra	u1007
   743  0011A6  D000               	nop2	
   744                           
   745                           ;main.c: 172: motorStart_1();
   746  0011A8  EC52  F00D         	call	_motorStart_1	;wreg free
   747  0011AC                     l1718:
   748                           
   749                           ;main.c: 176: if (N_counter == max){
   750  0011AC  502D               	movf	_max,w,c
   751  0011AE  1825               	xorwf	_N_counter,w,c
   752  0011B0  E107               	bnz	l1722
   753  0011B2  502E               	movf	_max+1,w,c
   754  0011B4  1826               	xorwf	_N_counter+1,w,c
   755  0011B6  A4D8               	btfss	status,2,c
   756  0011B8  D003               	goto	l123
   757                           
   758                           ;main.c: 177: motorStop_1();
   759  0011BA  EC16  F00D         	call	_motorStop_1	;wreg free
   760                           
   761                           ;main.c: 178: break;
   762  0011BE  D01F               	goto	l124
   763  0011C0                     l123:
   764  0011C0                     l1722:
   765                           
   766                           ;main.c: 179: }
   767                           ;main.c: 180: if (readADC(2)<=250 ){
   768  0011C0  0E02               	movlw	2
   769  0011C2  ECC5  F00C         	call	_readADC
   770  0011C6  5002               	movf	?_readADC+1,w,c
   771  0011C8  E1F1               	bnz	l1718
   772  0011CA  0EFB               	movlw	251
   773  0011CC  5C01               	subwf	?_readADC,w,c
   774  0011CE  B0D8               	btfsc	status,0,c
   775  0011D0  D7ED               	goto	l122
   776                           
   777                           ;main.c: 182: N_counter ++;
   778  0011D2  4A25               	infsnz	_N_counter,f,c
   779  0011D4  2A26               	incf	_N_counter+1,f,c
   780                           
   781                           ;main.c: 183: initLCD();
   782  0011D6  ECCF  F00B         	call	_initLCD	;wreg free
   783                           
   784                           ;main.c: 184: printf("%d", N_counter);
   785  0011DA  0E59               	movlw	low (STR_16+7)
   786  0011DC  6E0D               	movwf	printf@f,c
   787  0011DE  0E10               	movlw	high (STR_16+7)
   788  0011E0  6E0E               	movwf	printf@f+1,c
   789  0011E2  C025  F00F         	movff	_N_counter,?_printf+2
   790  0011E6  C026  F010         	movff	_N_counter+1,?_printf+3
   791  0011EA  ECD8  F00A         	call	_printf	;wreg free
   792                           
   793                           ;main.c: 185: _delay((unsigned long)((50)*(8000000/4000.0)));
   794  0011EE  0E82               	movlw	130
   795  0011F0  6E19               	movwf	??_main& (0+255),c
   796  0011F2  0EDE               	movlw	222
   797  0011F4                     u1017:
   798  0011F4  2EE8               	decfsz	wreg,f,c
   799  0011F6  D7FE               	bra	u1017
   800  0011F8  2E19               	decfsz	??_main& (0+255),f,c
   801  0011FA  D7FC               	bra	u1017
   802  0011FC  D7D7               	goto	l122
   803  0011FE                     l124:
   804                           
   805                           ;main.c: 186: }
   806                           ;main.c: 188: }
   807                           ;main.c: 190: initLCD();
   808  0011FE  ECCF  F00B         	call	_initLCD	;wreg free
   809                           
   810                           ;main.c: 191: printf("done");
   811  001202  0E6D               	movlw	low STR_3
   812  001204  6E0D               	movwf	printf@f,c
   813  001206  0E10               	movlw	high STR_3
   814  001208  6E0E               	movwf	printf@f+1,c
   815  00120A  ECD8  F00A         	call	_printf	;wreg free
   816                           
   817                           ;main.c: 192: _delay((unsigned long)((1000)*(8000000/4000.0)));
   818  00120E  0E0B               	movlw	11
   819  001210  6E1A               	movwf	(??_main+1)& (0+255),c
   820  001212  0E26               	movlw	38
   821  001214  6E19               	movwf	??_main& (0+255),c
   822  001216  0E5E               	movlw	94
   823  001218                     u1027:
   824  001218  2EE8               	decfsz	wreg,f,c
   825  00121A  D7FE               	bra	u1027
   826  00121C  2E19               	decfsz	??_main& (0+255),f,c
   827  00121E  D7FC               	bra	u1027
   828  001220  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   829  001222  D7FA               	bra	u1027
   830                           
   831                           ;main.c: 196: for (i = 0; i< 30; i ++){
   832  001224  0E00               	movlw	0
   833  001226  6E1C               	movwf	_i+1,c
   834  001228  0E00               	movlw	0
   835  00122A  6E1B               	movwf	_i,c
   836  00122C                     l1740:
   837  00122C  BE1C               	btfsc	_i+1,7,c
   838  00122E  D006               	goto	l127
   839  001230  501C               	movf	_i+1,w,c
   840  001232  E109               	bnz	l1750
   841  001234  0E1E               	movlw	30
   842  001236  5C1B               	subwf	_i,w,c
   843  001238  B0D8               	btfsc	status,0,c
   844  00123A  D005               	goto	u860
   845  00123C                     l127:
   846                           
   847                           ;main.c: 197: servoRotate_counter();
   848  00123C  ECF5  F00B         	call	_servoRotate_counter	;wreg free
   849  001240  4A1B               	infsnz	_i,f,c
   850  001242  2A1C               	incf	_i+1,f,c
   851  001244  D7F3               	goto	l1740
   852  001246                     u860:
   853  001246                     l1750:
   854                           
   855                           ;main.c: 198: }
   856                           ;main.c: 204: initLCD();
   857  001246  ECCF  F00B         	call	_initLCD	;wreg free
   858                           
   859                           ;main.c: 205: printf("%d",S_counter);
   860  00124A  0E59               	movlw	low (STR_16+7)
   861  00124C  6E0D               	movwf	printf@f,c
   862  00124E  0E10               	movlw	high (STR_16+7)
   863  001250  6E0E               	movwf	printf@f+1,c
   864  001252  C023  F00F         	movff	_S_counter,?_printf+2
   865  001256  C024  F010         	movff	_S_counter+1,?_printf+3
   866  00125A  ECD8  F00A         	call	_printf	;wreg free
   867                           
   868                           ;main.c: 206: _delay((unsigned long)((100)*(8000000/4000.0)));
   869  00125E  0E02               	movlw	2
   870  001260  6E1A               	movwf	(??_main+1)& (0+255),c
   871  001262  0E04               	movlw	4
   872  001264  6E19               	movwf	??_main& (0+255),c
   873  001266  0EBA               	movlw	186
   874  001268                     u1037:
   875  001268  2EE8               	decfsz	wreg,f,c
   876  00126A  D7FE               	bra	u1037
   877  00126C  2E19               	decfsz	??_main& (0+255),f,c
   878  00126E  D7FC               	bra	u1037
   879  001270  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   880  001272  D7FA               	bra	u1037
   881  001274  D000               	nop2	
   882                           
   883                           ;main.c: 207: motorStart_2();
   884  001276  EC43  F00D         	call	_motorStart_2	;wreg free
   885  00127A                     l1758:
   886                           
   887                           ;main.c: 211: if (S_counter == max){
   888  00127A  502D               	movf	_max,w,c
   889  00127C  1823               	xorwf	_S_counter,w,c
   890  00127E  E107               	bnz	l1762
   891  001280  502E               	movf	_max+1,w,c
   892  001282  1824               	xorwf	_S_counter+1,w,c
   893  001284  A4D8               	btfss	status,2,c
   894  001286  D003               	goto	l130
   895                           
   896                           ;main.c: 212: motorStop_2();
   897  001288  EC07  F00D         	call	_motorStop_2	;wreg free
   898                           
   899                           ;main.c: 213: break;
   900  00128C  D01F               	goto	l131
   901  00128E                     l130:
   902  00128E                     l1762:
   903                           
   904                           ;main.c: 214: }
   905                           ;main.c: 215: if (readADC(2)<=250 ){
   906  00128E  0E02               	movlw	2
   907  001290  ECC5  F00C         	call	_readADC
   908  001294  5002               	movf	?_readADC+1,w,c
   909  001296  E1F1               	bnz	l1758
   910  001298  0EFB               	movlw	251
   911  00129A  5C01               	subwf	?_readADC,w,c
   912  00129C  B0D8               	btfsc	status,0,c
   913  00129E  D7ED               	goto	l129
   914                           
   915                           ;main.c: 217: S_counter ++;
   916  0012A0  4A23               	infsnz	_S_counter,f,c
   917  0012A2  2A24               	incf	_S_counter+1,f,c
   918                           
   919                           ;main.c: 218: initLCD();
   920  0012A4  ECCF  F00B         	call	_initLCD	;wreg free
   921                           
   922                           ;main.c: 219: printf("%d", S_counter);
   923  0012A8  0E59               	movlw	low (STR_16+7)
   924  0012AA  6E0D               	movwf	printf@f,c
   925  0012AC  0E10               	movlw	high (STR_16+7)
   926  0012AE  6E0E               	movwf	printf@f+1,c
   927  0012B0  C023  F00F         	movff	_S_counter,?_printf+2
   928  0012B4  C024  F010         	movff	_S_counter+1,?_printf+3
   929  0012B8  ECD8  F00A         	call	_printf	;wreg free
   930                           
   931                           ;main.c: 220: _delay((unsigned long)((50)*(8000000/4000.0)));
   932  0012BC  0E82               	movlw	130
   933  0012BE  6E19               	movwf	??_main& (0+255),c
   934  0012C0  0EDE               	movlw	222
   935  0012C2                     u1047:
   936  0012C2  2EE8               	decfsz	wreg,f,c
   937  0012C4  D7FE               	bra	u1047
   938  0012C6  2E19               	decfsz	??_main& (0+255),f,c
   939  0012C8  D7FC               	bra	u1047
   940  0012CA  D7D7               	goto	l129
   941  0012CC                     l131:
   942                           
   943                           ;main.c: 221: }
   944                           ;main.c: 223: }
   945                           ;main.c: 225: initLCD();
   946  0012CC  ECCF  F00B         	call	_initLCD	;wreg free
   947                           
   948                           ;main.c: 226: printf("done");
   949  0012D0  0E6D               	movlw	low STR_3
   950  0012D2  6E0D               	movwf	printf@f,c
   951  0012D4  0E10               	movlw	high STR_3
   952  0012D6  6E0E               	movwf	printf@f+1,c
   953  0012D8  ECD8  F00A         	call	_printf	;wreg free
   954                           
   955                           ;main.c: 227: _delay((unsigned long)((1000)*(8000000/4000.0)));
   956  0012DC  0E0B               	movlw	11
   957  0012DE  6E1A               	movwf	(??_main+1)& (0+255),c
   958  0012E0  0E26               	movlw	38
   959  0012E2  6E19               	movwf	??_main& (0+255),c
   960  0012E4  0E5E               	movlw	94
   961  0012E6                     u1057:
   962  0012E6  2EE8               	decfsz	wreg,f,c
   963  0012E8  D7FE               	bra	u1057
   964  0012EA  2E19               	decfsz	??_main& (0+255),f,c
   965  0012EC  D7FC               	bra	u1057
   966  0012EE  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   967  0012F0  D7FA               	bra	u1057
   968                           
   969                           ;main.c: 232: for (i = 0; i< 30; i ++){
   970  0012F2  0E00               	movlw	0
   971  0012F4  6E1C               	movwf	_i+1,c
   972  0012F6  0E00               	movlw	0
   973  0012F8  6E1B               	movwf	_i,c
   974  0012FA                     l1780:
   975  0012FA  BE1C               	btfsc	_i+1,7,c
   976  0012FC  D006               	goto	l134
   977  0012FE  501C               	movf	_i+1,w,c
   978  001300  E107               	bnz	l1788
   979  001302  0E1E               	movlw	30
   980  001304  5C1B               	subwf	_i,w,c
   981  001306  B0D8               	btfsc	status,0,c
   982  001308  D003               	goto	u900
   983  00130A                     l134:
   984  00130A  4A1B               	infsnz	_i,f,c
   985  00130C  2A1C               	incf	_i+1,f,c
   986  00130E  D7F5               	goto	l1780
   987  001310                     u900:
   988  001310                     l1788:
   989                           
   990                           ;main.c: 233: void servoRotate_counter();
   991                           ;main.c: 234: }
   992                           ;main.c: 239: initLCD();
   993  001310  ECCF  F00B         	call	_initLCD	;wreg free
   994                           
   995                           ;main.c: 240: printf("%d",W_counter);
   996  001314  0E59               	movlw	low (STR_16+7)
   997  001316  6E0D               	movwf	printf@f,c
   998  001318  0E10               	movlw	high (STR_16+7)
   999  00131A  6E0E               	movwf	printf@f+1,c
  1000  00131C  C021  F00F         	movff	_W_counter,?_printf+2
  1001  001320  C022  F010         	movff	_W_counter+1,?_printf+3
  1002  001324  ECD8  F00A         	call	_printf	;wreg free
  1003                           
  1004                           ;main.c: 241: _delay((unsigned long)((100)*(8000000/4000.0)));
  1005  001328  0E02               	movlw	2
  1006  00132A  6E1A               	movwf	(??_main+1)& (0+255),c
  1007  00132C  0E04               	movlw	4
  1008  00132E  6E19               	movwf	??_main& (0+255),c
  1009  001330  0EBA               	movlw	186
  1010  001332                     u1067:
  1011  001332  2EE8               	decfsz	wreg,f,c
  1012  001334  D7FE               	bra	u1067
  1013  001336  2E19               	decfsz	??_main& (0+255),f,c
  1014  001338  D7FC               	bra	u1067
  1015  00133A  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1016  00133C  D7FA               	bra	u1067
  1017  00133E  D000               	nop2	
  1018                           
  1019                           ;main.c: 242: motorStart_3();
  1020  001340  EC34  F00D         	call	_motorStart_3	;wreg free
  1021  001344                     l1796:
  1022                           
  1023                           ;main.c: 246: if (W_counter == max){
  1024  001344  502D               	movf	_max,w,c
  1025  001346  1821               	xorwf	_W_counter,w,c
  1026  001348  E107               	bnz	l1800
  1027  00134A  502E               	movf	_max+1,w,c
  1028  00134C  1822               	xorwf	_W_counter+1,w,c
  1029  00134E  A4D8               	btfss	status,2,c
  1030  001350  D003               	goto	l139
  1031                           
  1032                           ;main.c: 247: motorStop_3();
  1033  001352  ECF8  F00C         	call	_motorStop_3	;wreg free
  1034                           
  1035                           ;main.c: 248: break;
  1036  001356  D01F               	goto	l140
  1037  001358                     l139:
  1038  001358                     l1800:
  1039                           
  1040                           ;main.c: 249: }
  1041                           ;main.c: 250: if (readADC(3)<=250 ){
  1042  001358  0E03               	movlw	3
  1043  00135A  ECC5  F00C         	call	_readADC
  1044  00135E  5002               	movf	?_readADC+1,w,c
  1045  001360  E1F1               	bnz	l1796
  1046  001362  0EFB               	movlw	251
  1047  001364  5C01               	subwf	?_readADC,w,c
  1048  001366  B0D8               	btfsc	status,0,c
  1049  001368  D7ED               	goto	l138
  1050                           
  1051                           ;main.c: 252: W_counter ++;
  1052  00136A  4A21               	infsnz	_W_counter,f,c
  1053  00136C  2A22               	incf	_W_counter+1,f,c
  1054                           
  1055                           ;main.c: 253: initLCD();
  1056  00136E  ECCF  F00B         	call	_initLCD	;wreg free
  1057                           
  1058                           ;main.c: 254: printf("%d", W_counter);
  1059  001372  0E59               	movlw	low (STR_16+7)
  1060  001374  6E0D               	movwf	printf@f,c
  1061  001376  0E10               	movlw	high (STR_16+7)
  1062  001378  6E0E               	movwf	printf@f+1,c
  1063  00137A  C021  F00F         	movff	_W_counter,?_printf+2
  1064  00137E  C022  F010         	movff	_W_counter+1,?_printf+3
  1065  001382  ECD8  F00A         	call	_printf	;wreg free
  1066                           
  1067                           ;main.c: 255: _delay((unsigned long)((50)*(8000000/4000.0)));
  1068  001386  0E82               	movlw	130
  1069  001388  6E19               	movwf	??_main& (0+255),c
  1070  00138A  0EDE               	movlw	222
  1071  00138C                     u1077:
  1072  00138C  2EE8               	decfsz	wreg,f,c
  1073  00138E  D7FE               	bra	u1077
  1074  001390  2E19               	decfsz	??_main& (0+255),f,c
  1075  001392  D7FC               	bra	u1077
  1076  001394  D7D7               	goto	l138
  1077  001396                     l140:
  1078                           
  1079                           ;main.c: 256: }
  1080                           ;main.c: 258: }
  1081                           ;main.c: 260: initLCD();
  1082  001396  ECCF  F00B         	call	_initLCD	;wreg free
  1083                           
  1084                           ;main.c: 261: printf("done");
  1085  00139A  0E6D               	movlw	low STR_3
  1086  00139C  6E0D               	movwf	printf@f,c
  1087  00139E  0E10               	movlw	high STR_3
  1088  0013A0  6E0E               	movwf	printf@f+1,c
  1089  0013A2  ECD8  F00A         	call	_printf	;wreg free
  1090                           
  1091                           ;main.c: 262: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1092  0013A6  0E0B               	movlw	11
  1093  0013A8  6E1A               	movwf	(??_main+1)& (0+255),c
  1094  0013AA  0E26               	movlw	38
  1095  0013AC  6E19               	movwf	??_main& (0+255),c
  1096  0013AE  0E5E               	movlw	94
  1097  0013B0                     u1087:
  1098  0013B0  2EE8               	decfsz	wreg,f,c
  1099  0013B2  D7FE               	bra	u1087
  1100  0013B4  2E19               	decfsz	??_main& (0+255),f,c
  1101  0013B6  D7FC               	bra	u1087
  1102  0013B8  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1103  0013BA  D7FA               	bra	u1087
  1104                           
  1105                           ;main.c: 269: for (i = 0; i< 30; i ++){
  1106  0013BC  0E00               	movlw	0
  1107  0013BE  6E1C               	movwf	_i+1,c
  1108  0013C0  0E00               	movlw	0
  1109  0013C2  6E1B               	movwf	_i,c
  1110  0013C4                     l1818:
  1111  0013C4  BE1C               	btfsc	_i+1,7,c
  1112  0013C6  D006               	goto	l143
  1113  0013C8  501C               	movf	_i+1,w,c
  1114  0013CA  E107               	bnz	l1826
  1115  0013CC  0E1E               	movlw	30
  1116  0013CE  5C1B               	subwf	_i,w,c
  1117  0013D0  B0D8               	btfsc	status,0,c
  1118  0013D2  D003               	goto	u940
  1119  0013D4                     l143:
  1120  0013D4  4A1B               	infsnz	_i,f,c
  1121  0013D6  2A1C               	incf	_i+1,f,c
  1122  0013D8  D7F5               	goto	l1818
  1123  0013DA                     u940:
  1124  0013DA                     l1826:
  1125                           
  1126                           ;main.c: 270: void servoRotate_counter();
  1127                           ;main.c: 271: }
  1128                           ;main.c: 276: servoRotate80();
  1129  0013DA  EC81  F00C         	call	_servoRotate80	;wreg free
  1130                           
  1131                           ;main.c: 277: servoRotate80_2();
  1132  0013DE  EC5E  F00C         	call	_servoRotate80_2	;wreg free
  1133                           
  1134                           ;main.c: 278: servoRotate80_3();
  1135  0013E2  EC3B  F00C         	call	_servoRotate80_3	;wreg free
  1136                           
  1137                           ;main.c: 279: servoRotate80_4();
  1138  0013E6  EC18  F00C         	call	_servoRotate80_4	;wreg free
  1139                           
  1140                           ;main.c: 294: motorStart_0();
  1141  0013EA  EC61  F00D         	call	_motorStart_0	;wreg free
  1142  0013EE                     l1830:
  1143                           
  1144                           ;main.c: 297: if (B_remain == 2){
  1145  0013EE  0E02               	movlw	2
  1146  0013F0  181F               	xorwf	_B_remain,w,c
  1147  0013F2  1020               	iorwf	_B_remain+1,w,c
  1148  0013F4  A4D8               	btfss	status,2,c
  1149  0013F6  D003               	goto	l148
  1150                           
  1151                           ;main.c: 298: motorStop_0();
  1152  0013F8  EC25  F00D         	call	_motorStop_0	;wreg free
  1153                           
  1154                           ;main.c: 299: break;
  1155  0013FC  D01F               	goto	l149
  1156  0013FE                     l148:
  1157                           
  1158                           ;main.c: 300: }
  1159                           ;main.c: 301: if (readADC(0)<=250 ){
  1160  0013FE  0E00               	movlw	0
  1161  001400  ECC5  F00C         	call	_readADC
  1162  001404  5002               	movf	?_readADC+1,w,c
  1163  001406  E1F3               	bnz	l1830
  1164  001408  0EFB               	movlw	251
  1165  00140A  5C01               	subwf	?_readADC,w,c
  1166  00140C  B0D8               	btfsc	status,0,c
  1167  00140E  D7EF               	goto	l147
  1168                           
  1169                           ;main.c: 303: B_remain ++;
  1170  001410  4A1F               	infsnz	_B_remain,f,c
  1171  001412  2A20               	incf	_B_remain+1,f,c
  1172                           
  1173                           ;main.c: 304: initLCD();
  1174  001414  ECCF  F00B         	call	_initLCD	;wreg free
  1175                           
  1176                           ;main.c: 305: printf("%d", B_remain);
  1177  001418  0E59               	movlw	low (STR_16+7)
  1178  00141A  6E0D               	movwf	printf@f,c
  1179  00141C  0E10               	movlw	high (STR_16+7)
  1180  00141E  6E0E               	movwf	printf@f+1,c
  1181  001420  C01F  F00F         	movff	_B_remain,?_printf+2
  1182  001424  C020  F010         	movff	_B_remain+1,?_printf+3
  1183  001428  ECD8  F00A         	call	_printf	;wreg free
  1184                           
  1185                           ;main.c: 306: _delay((unsigned long)((50)*(8000000/4000.0)));
  1186  00142C  0E82               	movlw	130
  1187  00142E  6E19               	movwf	??_main& (0+255),c
  1188  001430  0EDE               	movlw	222
  1189  001432                     u1097:
  1190  001432  2EE8               	decfsz	wreg,f,c
  1191  001434  D7FE               	bra	u1097
  1192  001436  2E19               	decfsz	??_main& (0+255),f,c
  1193  001438  D7FC               	bra	u1097
  1194  00143A  D7D9               	goto	l147
  1195  00143C                     l149:
  1196                           
  1197                           ;main.c: 307: }
  1198                           ;main.c: 314: }
  1199                           ;main.c: 318: initLCD();
  1200  00143C  ECCF  F00B         	call	_initLCD	;wreg free
  1201                           
  1202                           ;main.c: 319: printf("Bolts:%d",B_counter);
  1203  001440  0E5C               	movlw	low STR_14
  1204  001442  6E0D               	movwf	printf@f,c
  1205  001444  0E10               	movlw	high STR_14
  1206  001446  6E0E               	movwf	printf@f+1,c
  1207  001448  C027  F00F         	movff	_B_counter,?_printf+2
  1208  00144C  C028  F010         	movff	_B_counter+1,?_printf+3
  1209  001450  ECD8  F00A         	call	_printf	;wreg free
  1210                           
  1211                           ;main.c: 320: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1212  001454  0E0B               	movlw	11
  1213  001456  6E1A               	movwf	(??_main+1)& (0+255),c
  1214  001458  0E26               	movlw	38
  1215  00145A  6E19               	movwf	??_main& (0+255),c
  1216  00145C  0E5E               	movlw	94
  1217  00145E                     u1107:
  1218  00145E  2EE8               	decfsz	wreg,f,c
  1219  001460  D7FE               	bra	u1107
  1220  001462  2E19               	decfsz	??_main& (0+255),f,c
  1221  001464  D7FC               	bra	u1107
  1222  001466  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1223  001468  D7FA               	bra	u1107
  1224                           
  1225                           ;main.c: 322: initLCD();
  1226  00146A  ECCF  F00B         	call	_initLCD	;wreg free
  1227                           
  1228                           ;main.c: 323: printf("Nuts:%d",N_counter);
  1229  00146E  0E65               	movlw	low STR_15
  1230  001470  6E0D               	movwf	printf@f,c
  1231  001472  0E10               	movlw	high STR_15
  1232  001474  6E0E               	movwf	printf@f+1,c
  1233  001476  C025  F00F         	movff	_N_counter,?_printf+2
  1234  00147A  C026  F010         	movff	_N_counter+1,?_printf+3
  1235  00147E  ECD8  F00A         	call	_printf	;wreg free
  1236                           
  1237                           ;main.c: 324: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1238  001482  0E0B               	movlw	11
  1239  001484  6E1A               	movwf	(??_main+1)& (0+255),c
  1240  001486  0E26               	movlw	38
  1241  001488  6E19               	movwf	??_main& (0+255),c
  1242  00148A  0E5E               	movlw	94
  1243  00148C                     u1117:
  1244  00148C  2EE8               	decfsz	wreg,f,c
  1245  00148E  D7FE               	bra	u1117
  1246  001490  2E19               	decfsz	??_main& (0+255),f,c
  1247  001492  D7FC               	bra	u1117
  1248  001494  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1249  001496  D7FA               	bra	u1117
  1250                           
  1251                           ;main.c: 326: initLCD();
  1252  001498  ECCF  F00B         	call	_initLCD	;wreg free
  1253                           
  1254                           ;main.c: 327: printf("Spacer:%d",S_counter);
  1255  00149C  0E52               	movlw	low STR_16
  1256  00149E  6E0D               	movwf	printf@f,c
  1257  0014A0  0E10               	movlw	high STR_16
  1258  0014A2  6E0E               	movwf	printf@f+1,c
  1259  0014A4  C023  F00F         	movff	_S_counter,?_printf+2
  1260  0014A8  C024  F010         	movff	_S_counter+1,?_printf+3
  1261  0014AC  ECD8  F00A         	call	_printf	;wreg free
  1262                           
  1263                           ;main.c: 328: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1264  0014B0  0E0B               	movlw	11
  1265  0014B2  6E1A               	movwf	(??_main+1)& (0+255),c
  1266  0014B4  0E26               	movlw	38
  1267  0014B6  6E19               	movwf	??_main& (0+255),c
  1268  0014B8  0E5E               	movlw	94
  1269  0014BA                     u1127:
  1270  0014BA  2EE8               	decfsz	wreg,f,c
  1271  0014BC  D7FE               	bra	u1127
  1272  0014BE  2E19               	decfsz	??_main& (0+255),f,c
  1273  0014C0  D7FC               	bra	u1127
  1274  0014C2  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1275  0014C4  D7FA               	bra	u1127
  1276                           
  1277                           ;main.c: 330: initLCD();
  1278  0014C6  ECCF  F00B         	call	_initLCD	;wreg free
  1279                           
  1280                           ;main.c: 331: printf("Washers:%d",W_counter);
  1281  0014CA  0E18               	movlw	low (STR_21+7)
  1282  0014CC  6E0D               	movwf	printf@f,c
  1283  0014CE  0E10               	movlw	high (STR_21+7)
  1284  0014D0  6E0E               	movwf	printf@f+1,c
  1285  0014D2  C021  F00F         	movff	_W_counter,?_printf+2
  1286  0014D6  C022  F010         	movff	_W_counter+1,?_printf+3
  1287  0014DA  ECD8  F00A         	call	_printf	;wreg free
  1288                           
  1289                           ;main.c: 332: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1290  0014DE  0E0B               	movlw	11
  1291  0014E0  6E1A               	movwf	(??_main+1)& (0+255),c
  1292  0014E2  0E26               	movlw	38
  1293  0014E4  6E19               	movwf	??_main& (0+255),c
  1294  0014E6  0E5E               	movlw	94
  1295  0014E8                     u1137:
  1296  0014E8  2EE8               	decfsz	wreg,f,c
  1297  0014EA  D7FE               	bra	u1137
  1298  0014EC  2E19               	decfsz	??_main& (0+255),f,c
  1299  0014EE  D7FC               	bra	u1137
  1300  0014F0  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1301  0014F2  D7FA               	bra	u1137
  1302                           
  1303                           ;main.c: 334: initLCD();
  1304  0014F4  ECCF  F00B         	call	_initLCD	;wreg free
  1305                           
  1306                           ;main.c: 335: printf("remain bolt:%d",W_counter);
  1307  0014F8  0E43               	movlw	low STR_18
  1308  0014FA  6E0D               	movwf	printf@f,c
  1309  0014FC  0E10               	movlw	high STR_18
  1310  0014FE  6E0E               	movwf	printf@f+1,c
  1311  001500  C021  F00F         	movff	_W_counter,?_printf+2
  1312  001504  C022  F010         	movff	_W_counter+1,?_printf+3
  1313  001508  ECD8  F00A         	call	_printf	;wreg free
  1314                           
  1315                           ;main.c: 336: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1316  00150C  0E0B               	movlw	11
  1317  00150E  6E1A               	movwf	(??_main+1)& (0+255),c
  1318  001510  0E26               	movlw	38
  1319  001512  6E19               	movwf	??_main& (0+255),c
  1320  001514  0E5E               	movlw	94
  1321  001516                     u1147:
  1322  001516  2EE8               	decfsz	wreg,f,c
  1323  001518  D7FE               	bra	u1147
  1324  00151A  2E19               	decfsz	??_main& (0+255),f,c
  1325  00151C  D7FC               	bra	u1147
  1326  00151E  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1327  001520  D7FA               	bra	u1147
  1328                           
  1329                           ;main.c: 337: initLCD();
  1330  001522  ECCF  F00B         	call	_initLCD	;wreg free
  1331                           
  1332                           ;main.c: 338: printf("remain spacer:%d",W_counter);
  1333  001526  0E23               	movlw	low STR_19
  1334  001528  6E0D               	movwf	printf@f,c
  1335  00152A  0E10               	movlw	high STR_19
  1336  00152C  6E0E               	movwf	printf@f+1,c
  1337  00152E  C021  F00F         	movff	_W_counter,?_printf+2
  1338  001532  C022  F010         	movff	_W_counter+1,?_printf+3
  1339  001536  ECD8  F00A         	call	_printf	;wreg free
  1340                           
  1341                           ;main.c: 339: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1342  00153A  0E0B               	movlw	11
  1343  00153C  6E1A               	movwf	(??_main+1)& (0+255),c
  1344  00153E  0E26               	movlw	38
  1345  001540  6E19               	movwf	??_main& (0+255),c
  1346  001542  0E5E               	movlw	94
  1347  001544                     u1157:
  1348  001544  2EE8               	decfsz	wreg,f,c
  1349  001546  D7FE               	bra	u1157
  1350  001548  2E19               	decfsz	??_main& (0+255),f,c
  1351  00154A  D7FC               	bra	u1157
  1352  00154C  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1353  00154E  D7FA               	bra	u1157
  1354                           
  1355                           ;main.c: 340: initLCD();
  1356  001550  ECCF  F00B         	call	_initLCD	;wreg free
  1357                           
  1358                           ;main.c: 341: printf("remain nuts:%d",W_counter);
  1359  001554  0E34               	movlw	low STR_20
  1360  001556  6E0D               	movwf	printf@f,c
  1361  001558  0E10               	movlw	high STR_20
  1362  00155A  6E0E               	movwf	printf@f+1,c
  1363  00155C  C021  F00F         	movff	_W_counter,?_printf+2
  1364  001560  C022  F010         	movff	_W_counter+1,?_printf+3
  1365  001564  ECD8  F00A         	call	_printf	;wreg free
  1366                           
  1367                           ;main.c: 342: _delay((unsigned long)((1000)*(8000000/4000.0)));initLCD();
  1368  001568  0E0B               	movlw	11
  1369  00156A  6E1A               	movwf	(??_main+1)& (0+255),c
  1370  00156C  0E26               	movlw	38
  1371  00156E  6E19               	movwf	??_main& (0+255),c
  1372  001570  0E5E               	movlw	94
  1373  001572                     u1167:
  1374  001572  2EE8               	decfsz	wreg,f,c
  1375  001574  D7FE               	bra	u1167
  1376  001576  2E19               	decfsz	??_main& (0+255),f,c
  1377  001578  D7FC               	bra	u1167
  1378  00157A  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1379  00157C  D7FA               	bra	u1167
  1380  00157E  ECCF  F00B         	call	_initLCD	;wreg free
  1381                           
  1382                           ;main.c: 343: printf("remain Washers:%d",W_counter);
  1383  001582  0E11               	movlw	low STR_21
  1384  001584  6E0D               	movwf	printf@f,c
  1385  001586  0E10               	movlw	high STR_21
  1386  001588  6E0E               	movwf	printf@f+1,c
  1387  00158A  C021  F00F         	movff	_W_counter,?_printf+2
  1388  00158E  C022  F010         	movff	_W_counter+1,?_printf+3
  1389  001592  ECD8  F00A         	call	_printf	;wreg free
  1390                           
  1391                           ;main.c: 344: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1392  001596  0E0B               	movlw	11
  1393  001598  6E1A               	movwf	(??_main+1)& (0+255),c
  1394  00159A  0E26               	movlw	38
  1395  00159C  6E19               	movwf	??_main& (0+255),c
  1396  00159E  0E5E               	movlw	94
  1397  0015A0                     u1177:
  1398  0015A0  2EE8               	decfsz	wreg,f,c
  1399  0015A2  D7FE               	bra	u1177
  1400  0015A4  2E19               	decfsz	??_main& (0+255),f,c
  1401  0015A6  D7FC               	bra	u1177
  1402  0015A8  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1403  0015AA  D7FA               	bra	u1177
  1404  0015AC  EF00  F000         	goto	start
  1405  0015B0                     __end_of_main:
  1406                           	opt stack 0
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           status	equ	0xFD8
  1414                           
  1415 ;; *************** function _servoRotate_counter *****************
  1416 ;; Defined at:
  1417 ;;		line 605 in file "main.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;		None
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;		None
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, status,2, status,0
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;Total ram usage:        1 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text1
  1445  0017EA                     __ptext1:
  1446                           	opt stack 0
  1447  0017EA                     _servoRotate_counter:
  1448                           	opt stack 30
  1449                           
  1450                           ;main.c: 607: for (i = 0; i<50; i++){
  1451                           
  1452                           ;incstack = 0
  1453  0017EA  0E00               	movlw	0
  1454  0017EC  6E1C               	movwf	_i+1,c
  1455  0017EE  0E00               	movlw	0
  1456  0017F0  6E1B               	movwf	_i,c
  1457  0017F2                     l1120:
  1458  0017F2  BE1C               	btfsc	_i+1,7,c
  1459  0017F4  D006               	goto	l235
  1460  0017F6  501C               	movf	_i+1,w,c
  1461  0017F8  E11A               	bnz	l237
  1462  0017FA  0E32               	movlw	50
  1463  0017FC  5C1B               	subwf	_i,w,c
  1464  0017FE  B0D8               	btfsc	status,0,c
  1465  001800  0012               	return	
  1466  001802                     l235:
  1467                           
  1468                           ;main.c: 608: LATDbits.LATD0 = 1;
  1469  001802  808C               	bsf	3980,0,c	;volatile
  1470                           
  1471                           ;main.c: 609: TRISDbits.RD0 = 0;
  1472  001804  9095               	bcf	3989,0,c	;volatile
  1473                           
  1474                           ;main.c: 610: _delay((unsigned long)((2200)*(8000000/4000000.0)));
  1475  001806  0E06               	movlw	6
  1476  001808  6E01               	movwf	??_servoRotate_counter& (0+255),c
  1477  00180A  0EB6               	movlw	182
  1478  00180C                     u1187:
  1479  00180C  2EE8               	decfsz	wreg,f,c
  1480  00180E  D7FE               	bra	u1187
  1481  001810  2E01               	decfsz	??_servoRotate_counter& (0+255),f,c
  1482  001812  D7FC               	bra	u1187
  1483                           
  1484                           ;main.c: 611: LATDbits.LATD0 = 0;
  1485  001814  908C               	bcf	3980,0,c	;volatile
  1486                           
  1487                           ;main.c: 612: TRISDbits.RD0 = 0;
  1488  001816  9095               	bcf	3989,0,c	;volatile
  1489                           
  1490                           ;main.c: 613: _delay((unsigned long)((17800)*(8000000/4000000.0)));
  1491  001818  0E2F               	movlw	47
  1492  00181A  6E01               	movwf	??_servoRotate_counter& (0+255),c
  1493  00181C  0E3A               	movlw	58
  1494  00181E                     u1197:
  1495  00181E  2EE8               	decfsz	wreg,f,c
  1496  001820  D7FE               	bra	u1197
  1497  001822  2E01               	decfsz	??_servoRotate_counter& (0+255),f,c
  1498  001824  D7FC               	bra	u1197
  1499  001826  D000               	nop2	
  1500  001828  4A1B               	infsnz	_i,f,c
  1501  00182A  2A1C               	incf	_i+1,f,c
  1502  00182C  D7E2               	goto	l1120
  1503  00182E                     l237:
  1504  00182E  0012               	return		;funcret
  1505  001830                     __end_of_servoRotate_counter:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _servoRotate80_4 *****************
  1516 ;; Defined at:
  1517 ;;		line 562 in file "main.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;		None
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;		None
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, status,2, status,0
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;Total ram usage:        1 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text2
  1545  001830                     __ptext2:
  1546                           	opt stack 0
  1547  001830                     _servoRotate80_4:
  1548                           	opt stack 30
  1549                           
  1550                           ;main.c: 564: for (i = 0; i<50; i++){
  1551                           
  1552                           ;incstack = 0
  1553  001830  0E00               	movlw	0
  1554  001832  6E1C               	movwf	_i+1,c
  1555  001834  0E00               	movlw	0
  1556  001836  6E1B               	movwf	_i,c
  1557  001838                     l1200:
  1558  001838  BE1C               	btfsc	_i+1,7,c
  1559  00183A  D006               	goto	l220
  1560  00183C  501C               	movf	_i+1,w,c
  1561  00183E  E11A               	bnz	l222
  1562  001840  0E32               	movlw	50
  1563  001842  5C1B               	subwf	_i,w,c
  1564  001844  B0D8               	btfsc	status,0,c
  1565  001846  0012               	return	
  1566  001848                     l220:
  1567                           
  1568                           ;main.c: 565: LATDbits.LATD4 = 1;
  1569  001848  888C               	bsf	3980,4,c	;volatile
  1570                           
  1571                           ;main.c: 566: TRISDbits.RD4 = 0;
  1572  00184A  9895               	bcf	3989,4,c	;volatile
  1573                           
  1574                           ;main.c: 567: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  1575  00184C  0E04               	movlw	4
  1576  00184E  6E01               	movwf	??_servoRotate80_4& (0+255),c
  1577  001850  0EE4               	movlw	228
  1578  001852                     u1207:
  1579  001852  2EE8               	decfsz	wreg,f,c
  1580  001854  D7FE               	bra	u1207
  1581  001856  2E01               	decfsz	??_servoRotate80_4& (0+255),f,c
  1582  001858  D7FC               	bra	u1207
  1583  00185A  D000               	nop2	
  1584                           
  1585                           ;main.c: 568: LATDbits.LATD4 = 0;
  1586  00185C  988C               	bcf	3980,4,c	;volatile
  1587                           
  1588                           ;main.c: 569: TRISDbits.RD4 = 0;
  1589  00185E  9895               	bcf	3989,4,c	;volatile
  1590                           
  1591                           ;main.c: 570: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  1592  001860  0E31               	movlw	49
  1593  001862  6E01               	movwf	??_servoRotate80_4& (0+255),c
  1594  001864  0E0C               	movlw	12
  1595  001866                     u1217:
  1596  001866  2EE8               	decfsz	wreg,f,c
  1597  001868  D7FE               	bra	u1217
  1598  00186A  2E01               	decfsz	??_servoRotate80_4& (0+255),f,c
  1599  00186C  D7FC               	bra	u1217
  1600  00186E  4A1B               	infsnz	_i,f,c
  1601  001870  2A1C               	incf	_i+1,f,c
  1602  001872  D7E2               	goto	l1200
  1603  001874                     l222:
  1604  001874  0012               	return		;funcret
  1605  001876                     __end_of_servoRotate80_4:
  1606                           	opt stack 0
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           status	equ	0xFD8
  1614                           
  1615 ;; *************** function _servoRotate80_3 *****************
  1616 ;; Defined at:
  1617 ;;		line 531 in file "main.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;		None
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;		None
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, status,2, status,0
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1634 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;Total ram usage:        1 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_main
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text3
  1645  001876                     __ptext3:
  1646                           	opt stack 0
  1647  001876                     _servoRotate80_3:
  1648                           	opt stack 30
  1649                           
  1650                           ;main.c: 533: for (i = 0; i<50; i++){
  1651                           
  1652                           ;incstack = 0
  1653  001876  0E00               	movlw	0
  1654  001878  6E1C               	movwf	_i+1,c
  1655  00187A  0E00               	movlw	0
  1656  00187C  6E1B               	movwf	_i,c
  1657  00187E                     l1186:
  1658  00187E  BE1C               	btfsc	_i+1,7,c
  1659  001880  D006               	goto	l210
  1660  001882  501C               	movf	_i+1,w,c
  1661  001884  E11A               	bnz	l212
  1662  001886  0E32               	movlw	50
  1663  001888  5C1B               	subwf	_i,w,c
  1664  00188A  B0D8               	btfsc	status,0,c
  1665  00188C  0012               	return	
  1666  00188E                     l210:
  1667                           
  1668                           ;main.c: 534: LATDbits.LATD3 = 1;
  1669  00188E  868C               	bsf	3980,3,c	;volatile
  1670                           
  1671                           ;main.c: 535: TRISDbits.RD3 = 0;
  1672  001890  9695               	bcf	3989,3,c	;volatile
  1673                           
  1674                           ;main.c: 536: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  1675  001892  0E04               	movlw	4
  1676  001894  6E01               	movwf	??_servoRotate80_3& (0+255),c
  1677  001896  0EE4               	movlw	228
  1678  001898                     u1227:
  1679  001898  2EE8               	decfsz	wreg,f,c
  1680  00189A  D7FE               	bra	u1227
  1681  00189C  2E01               	decfsz	??_servoRotate80_3& (0+255),f,c
  1682  00189E  D7FC               	bra	u1227
  1683  0018A0  D000               	nop2	
  1684                           
  1685                           ;main.c: 537: LATDbits.LATD3 = 0;
  1686  0018A2  968C               	bcf	3980,3,c	;volatile
  1687                           
  1688                           ;main.c: 538: TRISDbits.RD3 = 0;
  1689  0018A4  9695               	bcf	3989,3,c	;volatile
  1690                           
  1691                           ;main.c: 539: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  1692  0018A6  0E31               	movlw	49
  1693  0018A8  6E01               	movwf	??_servoRotate80_3& (0+255),c
  1694  0018AA  0E0C               	movlw	12
  1695  0018AC                     u1237:
  1696  0018AC  2EE8               	decfsz	wreg,f,c
  1697  0018AE  D7FE               	bra	u1237
  1698  0018B0  2E01               	decfsz	??_servoRotate80_3& (0+255),f,c
  1699  0018B2  D7FC               	bra	u1237
  1700  0018B4  4A1B               	infsnz	_i,f,c
  1701  0018B6  2A1C               	incf	_i+1,f,c
  1702  0018B8  D7E2               	goto	l1186
  1703  0018BA                     l212:
  1704  0018BA  0012               	return		;funcret
  1705  0018BC                     __end_of_servoRotate80_3:
  1706                           	opt stack 0
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _servoRotate80_2 *****************
  1716 ;; Defined at:
  1717 ;;		line 501 in file "main.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;Total ram usage:        1 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_main
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text4
  1745  0018BC                     __ptext4:
  1746                           	opt stack 0
  1747  0018BC                     _servoRotate80_2:
  1748                           	opt stack 30
  1749                           
  1750                           ;main.c: 503: for (i = 0; i<50; i++){
  1751                           
  1752                           ;incstack = 0
  1753  0018BC  0E00               	movlw	0
  1754  0018BE  6E1C               	movwf	_i+1,c
  1755  0018C0  0E00               	movlw	0
  1756  0018C2  6E1B               	movwf	_i,c
  1757  0018C4                     l1172:
  1758  0018C4  BE1C               	btfsc	_i+1,7,c
  1759  0018C6  D006               	goto	l200
  1760  0018C8  501C               	movf	_i+1,w,c
  1761  0018CA  E11A               	bnz	l202
  1762  0018CC  0E32               	movlw	50
  1763  0018CE  5C1B               	subwf	_i,w,c
  1764  0018D0  B0D8               	btfsc	status,0,c
  1765  0018D2  0012               	return	
  1766  0018D4                     l200:
  1767                           
  1768                           ;main.c: 504: LATDbits.LATD2 = 1;
  1769  0018D4  848C               	bsf	3980,2,c	;volatile
  1770                           
  1771                           ;main.c: 505: TRISDbits.RD1 = 0;
  1772  0018D6  9295               	bcf	3989,1,c	;volatile
  1773                           
  1774                           ;main.c: 506: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  1775  0018D8  0E04               	movlw	4
  1776  0018DA  6E01               	movwf	??_servoRotate80_2& (0+255),c
  1777  0018DC  0EE4               	movlw	228
  1778  0018DE                     u1247:
  1779  0018DE  2EE8               	decfsz	wreg,f,c
  1780  0018E0  D7FE               	bra	u1247
  1781  0018E2  2E01               	decfsz	??_servoRotate80_2& (0+255),f,c
  1782  0018E4  D7FC               	bra	u1247
  1783  0018E6  D000               	nop2	
  1784                           
  1785                           ;main.c: 507: LATDbits.LATD2 = 0;
  1786  0018E8  948C               	bcf	3980,2,c	;volatile
  1787                           
  1788                           ;main.c: 508: TRISDbits.RD2 = 0;
  1789  0018EA  9495               	bcf	3989,2,c	;volatile
  1790                           
  1791                           ;main.c: 509: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  1792  0018EC  0E31               	movlw	49
  1793  0018EE  6E01               	movwf	??_servoRotate80_2& (0+255),c
  1794  0018F0  0E0C               	movlw	12
  1795  0018F2                     u1257:
  1796  0018F2  2EE8               	decfsz	wreg,f,c
  1797  0018F4  D7FE               	bra	u1257
  1798  0018F6  2E01               	decfsz	??_servoRotate80_2& (0+255),f,c
  1799  0018F8  D7FC               	bra	u1257
  1800  0018FA  4A1B               	infsnz	_i,f,c
  1801  0018FC  2A1C               	incf	_i+1,f,c
  1802  0018FE  D7E2               	goto	l1172
  1803  001900                     l202:
  1804  001900  0012               	return		;funcret
  1805  001902                     __end_of_servoRotate80_2:
  1806                           	opt stack 0
  1807                           tblptru	equ	0xFF8
  1808                           tblptrh	equ	0xFF7
  1809                           tblptrl	equ	0xFF6
  1810                           tablat	equ	0xFF5
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _servoRotate80 *****************
  1816 ;; Defined at:
  1817 ;;		line 467 in file "main.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2, status,0
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;Total ram usage:        1 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text5
  1845  001902                     __ptext5:
  1846                           	opt stack 0
  1847  001902                     _servoRotate80:
  1848                           	opt stack 30
  1849                           
  1850                           ;main.c: 469: for (i = 0; i<50; i++){
  1851                           
  1852                           ;incstack = 0
  1853  001902  0E00               	movlw	0
  1854  001904  6E1C               	movwf	_i+1,c
  1855  001906  0E00               	movlw	0
  1856  001908  6E1B               	movwf	_i,c
  1857  00190A                     l1158:
  1858  00190A  BE1C               	btfsc	_i+1,7,c
  1859  00190C  D006               	goto	l190
  1860  00190E  501C               	movf	_i+1,w,c
  1861  001910  E11A               	bnz	l192
  1862  001912  0E32               	movlw	50
  1863  001914  5C1B               	subwf	_i,w,c
  1864  001916  B0D8               	btfsc	status,0,c
  1865  001918  0012               	return	
  1866  00191A                     l190:
  1867                           
  1868                           ;main.c: 470: LATDbits.LATD1 = 1;
  1869  00191A  828C               	bsf	3980,1,c	;volatile
  1870                           
  1871                           ;main.c: 471: TRISDbits.RD1 = 0;
  1872  00191C  9295               	bcf	3989,1,c	;volatile
  1873                           
  1874                           ;main.c: 472: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  1875  00191E  0E04               	movlw	4
  1876  001920  6E01               	movwf	??_servoRotate80& (0+255),c
  1877  001922  0EE4               	movlw	228
  1878  001924                     u1267:
  1879  001924  2EE8               	decfsz	wreg,f,c
  1880  001926  D7FE               	bra	u1267
  1881  001928  2E01               	decfsz	??_servoRotate80& (0+255),f,c
  1882  00192A  D7FC               	bra	u1267
  1883  00192C  D000               	nop2	
  1884                           
  1885                           ;main.c: 473: LATDbits.LATD1 = 0;
  1886  00192E  928C               	bcf	3980,1,c	;volatile
  1887                           
  1888                           ;main.c: 474: TRISDbits.RD1 = 0;
  1889  001930  9295               	bcf	3989,1,c	;volatile
  1890                           
  1891                           ;main.c: 475: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  1892  001932  0E31               	movlw	49
  1893  001934  6E01               	movwf	??_servoRotate80& (0+255),c
  1894  001936  0E0C               	movlw	12
  1895  001938                     u1277:
  1896  001938  2EE8               	decfsz	wreg,f,c
  1897  00193A  D7FE               	bra	u1277
  1898  00193C  2E01               	decfsz	??_servoRotate80& (0+255),f,c
  1899  00193E  D7FC               	bra	u1277
  1900  001940  4A1B               	infsnz	_i,f,c
  1901  001942  2A1C               	incf	_i+1,f,c
  1902  001944  D7E2               	goto	l1158
  1903  001946                     l192:
  1904  001946  0012               	return		;funcret
  1905  001948                     __end_of_servoRotate80:
  1906                           	opt stack 0
  1907                           tblptru	equ	0xFF8
  1908                           tblptrh	equ	0xFF7
  1909                           tblptrl	equ	0xFF6
  1910                           tablat	equ	0xFF5
  1911                           postinc0	equ	0xFEE
  1912                           wreg	equ	0xFE8
  1913                           status	equ	0xFD8
  1914                           
  1915 ;; *************** function _readADC *****************
  1916 ;; Defined at:
  1917 ;;		line 351 in file "main.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  channel         1    wreg     unsigned char 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  channel         1    4[COMRAM] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  2    0[COMRAM] unsigned short 
  1924 ;; Registers used:
  1925 ;;		wreg, status,2, status,0
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1931 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;Total ram usage:        5 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; This function calls:
  1938 ;;		Nothing
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text6
  1945  00198A                     __ptext6:
  1946                           	opt stack 0
  1947  00198A                     _readADC:
  1948                           	opt stack 30
  1949                           
  1950                           ;incstack = 0
  1951                           ;readADC@channel stored from wreg
  1952  00198A  6E05               	movwf	readADC@channel,c
  1953                           
  1954                           ;main.c: 360: ADCON0 = (channel & 0x0F) << 2;
  1955  00198C  C005  F003         	movff	readADC@channel,??_readADC
  1956  001990  0E0F               	movlw	15
  1957  001992  1603               	andwf	??_readADC,f,c
  1958  001994  90D8               	bcf	status,0,c
  1959  001996  3603               	rlcf	??_readADC,f,c
  1960  001998  90D8               	bcf	status,0,c
  1961  00199A  3403               	rlcf	??_readADC,w,c
  1962  00199C  6EC2               	movwf	4034,c	;volatile
  1963                           
  1964                           ;main.c: 361: ADON = 1;
  1965  00199E  80C2               	bsf	4034,0,c	;volatile
  1966                           
  1967                           ;main.c: 362: ADCON0bits.GO = 1;
  1968  0019A0  82C2               	bsf	4034,1,c	;volatile
  1969  0019A2  B2C2               	btfsc	4034,1,c	;volatile
  1970  0019A4  D7FE               	goto	l156
  1971                           
  1972                           ;main.c: 364: analog_result = ADRESL + (ADRESH*256);
  1973  0019A6  50C4               	movf	4036,w,c	;volatile
  1974  0019A8  6E04               	movwf	(??_readADC+1)& (0+255),c
  1975  0019AA  6A03               	clrf	??_readADC& (0+255),c
  1976  0019AC  50C3               	movf	4035,w,c	;volatile
  1977  0019AE  2403               	addwf	??_readADC,w,c
  1978  0019B0  6E1D               	movwf	_analog_result,c
  1979  0019B2  0E00               	movlw	0
  1980  0019B4  2004               	addwfc	??_readADC+1,w,c
  1981  0019B6  6E1E               	movwf	_analog_result+1,c
  1982                           
  1983                           ;main.c: 365: return analog_result;
  1984  0019B8  C01D  F001         	movff	_analog_result,?_readADC
  1985  0019BC  C01E  F002         	movff	_analog_result+1,?_readADC+1
  1986  0019C0  0012               	return	
  1987  0019C2                     __end_of_readADC:
  1988                           	opt stack 0
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           postinc0	equ	0xFEE
  1994                           wreg	equ	0xFE8
  1995                           status	equ	0xFD8
  1996                           
  1997 ;; *************** function _printf *****************
  1998 ;; Defined at:
  1999 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2002 ;;		 -> STR_21(18), STR_20(15), STR_19(17), STR_18(15), 
  2003 ;;		 -> STR_17(11), STR_16(10), STR_15(8), STR_14(9), 
  2004 ;;		 -> STR_13(3), STR_12(5), STR_11(3), STR_10(3), 
  2005 ;;		 -> STR_9(5), STR_8(3), STR_7(3), STR_6(5), 
  2006 ;;		 -> STR_5(3), STR_4(3), STR_3(5), STR_2(3), 
  2007 ;;		 -> STR_1(3), 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  tmpval          4    0        struct .
  2010 ;;  cp              3    0        PTR const unsigned char 
  2011 ;;  val             2   21[COMRAM] unsigned int 
  2012 ;;  ap              2   17[COMRAM] PTR void [1]
  2013 ;;		 -> ?_printf(2), 
  2014 ;;  len             2    0        unsigned int 
  2015 ;;  c               1   23[COMRAM] char 
  2016 ;;  prec            1   20[COMRAM] char 
  2017 ;;  flag            1   19[COMRAM] unsigned char 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  2   12[COMRAM] int 
  2020 ;; Registers used:
  2021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2027 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;Total ram usage:       12 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    2
  2034 ;; This function calls:
  2035 ;;		___lwdiv
  2036 ;;		___lwmod
  2037 ;;		_putch
  2038 ;; This function is called by:
  2039 ;;		_main
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           	psect	text7
  2044  0015B0                     __ptext7:
  2045                           	opt stack 0
  2046  0015B0                     _printf:
  2047                           	opt stack 28
  2048                           
  2049                           ;doprnt.c: 466: va_list ap;
  2050                           ;doprnt.c: 499: signed char c;
  2051                           ;doprnt.c: 506: signed char prec;
  2052                           ;doprnt.c: 508: unsigned char flag;
  2053                           ;doprnt.c: 523: union {
  2054                           ;doprnt.c: 524: unsigned long vd;
  2055                           ;doprnt.c: 525: double integ;
  2056                           ;doprnt.c: 526: } tmpval;
  2057                           ;doprnt.c: 528: unsigned int val;
  2058                           ;doprnt.c: 529: unsigned len;
  2059                           ;doprnt.c: 530: const char * cp;
  2060                           ;doprnt.c: 533: *ap = __va_start();
  2061                           
  2062                           ;incstack = 0
  2063  0015B0  0E0F               	movlw	low (?_printf+2)
  2064  0015B2  6E12               	movwf	printf@ap,c
  2065  0015B4  0E00               	movlw	high (?_printf+2)
  2066  0015B6  6E13               	movwf	printf@ap+1,c
  2067                           
  2068                           ;doprnt.c: 536: while(c = *f++) {
  2069  0015B8  D07D               	goto	u760
  2070  0015BA                     
  2071                           ;doprnt.c: 538: if(c != '%')
  2072  0015BA  0E25               	movlw	37
  2073  0015BC  1818               	xorwf	printf@c,w,c
  2074  0015BE  B4D8               	btfsc	status,2,c
  2075  0015C0  D004               	goto	l305
  2076                           
  2077                           ;doprnt.c: 540: {
  2078                           ;doprnt.c: 541: (putch(c) );
  2079  0015C2  5018               	movf	printf@c,w,c
  2080  0015C4  EC70  F00D         	call	_putch
  2081                           
  2082                           ;doprnt.c: 542: continue;
  2083  0015C8  D075               	goto	u760
  2084  0015CA                     l305:
  2085                           
  2086                           ;doprnt.c: 543: }
  2087                           ;doprnt.c: 548: flag = 0;
  2088  0015CA  0E00               	movlw	0
  2089  0015CC  6E14               	movwf	printf@flag,c
  2090                           
  2091                           ;doprnt.c: 822: }
  2092                           
  2093                           ;doprnt.c: 813: continue;
  2094                           
  2095                           ;doprnt.c: 802: default:
  2096                           
  2097                           ;doprnt.c: 698: case 'i':
  2098                           ;doprnt.c: 699: break;
  2099                           
  2100                           ;doprnt.c: 697: case 'd':
  2101                           
  2102                           ;doprnt.c: 638: goto alldone;
  2103                           
  2104                           ;doprnt.c: 637: case 0:
  2105                           
  2106                           ;doprnt.c: 635: switch(c = *f++) {
  2107  0015CE  C00D  FFF6         	movff	printf@f,tblptrl
  2108  0015D2  C00E  FFF7         	movff	printf@f+1,tblptrh
  2109  0015D6  4A0D               	infsnz	printf@f,f,c
  2110  0015D8  2A0E               	incf	printf@f+1,f,c
  2111  0015DA                     	if	0	;tblptru may be non-zero
  2112  0015DA                     	endif
  2113  0015DA                     	if	0	;tblptru may be non-zero
  2114  0015DA                     	endif
  2115  0015DA  0008               	tblrd		*
  2116  0015DC  CFF5 F018          	movff	tablat,printf@c
  2117  0015E0  5018               	movf	printf@c,w,c
  2118                           
  2119                           ; Switch size 1, requested type "space"
  2120                           ; Number of cases is 3, Range of values is 0 to 105
  2121                           ; switch strategies available:
  2122                           ; Name         Instructions Cycles
  2123                           ; simple_byte           10     6 (average)
  2124                           ;	Chosen strategy is simple_byte
  2125  0015E2  0A00               	xorlw	0	; case 0
  2126  0015E4  B4D8               	btfsc	status,2,c
  2127  0015E6  0012               	return	
  2128  0015E8  0A64               	xorlw	100	; case 100
  2129  0015EA  B4D8               	btfsc	status,2,c
  2130  0015EC  D003               	goto	l311
  2131  0015EE  0A0D               	xorlw	13	; case 105
  2132  0015F0  A4D8               	btfss	status,2,c
  2133  0015F2  D060               	goto	u760
  2134  0015F4                     l311:
  2135                           
  2136                           ;doprnt.c: 1253: {
  2137                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2138  0015F4  C012  FFD9         	movff	printf@ap,fsr2l
  2139  0015F8  C013  FFDA         	movff	printf@ap+1,fsr2h
  2140  0015FC  CFDE F016          	movff	postinc2,printf@val
  2141  001600  CFDD F017          	movff	postdec2,printf@val+1
  2142  001604  0E02               	movlw	2
  2143  001606  2612               	addwf	printf@ap,f,c
  2144  001608  0E00               	movlw	0
  2145  00160A  2213               	addwfc	printf@ap+1,f,c
  2146                           
  2147                           ;doprnt.c: 1261: if((int)val < 0) {
  2148  00160C  AE17               	btfss	printf@val+1,7,c
  2149  00160E  D006               	goto	l313
  2150                           
  2151                           ;doprnt.c: 1262: flag |= 0x03;
  2152  001610  0E03               	movlw	3
  2153  001612  1214               	iorwf	printf@flag,f,c
  2154                           
  2155                           ;doprnt.c: 1263: val = -val;
  2156  001614  6C16               	negf	printf@val,c
  2157  001616  1E17               	comf	printf@val+1,f,c
  2158  001618  B0D8               	btfsc	status,0,c
  2159  00161A  2A17               	incf	printf@val+1,f,c
  2160  00161C                     l313:
  2161                           
  2162                           ;doprnt.c: 1264: }
  2163                           ;doprnt.c: 1266: }
  2164                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2165  00161C  0E01               	movlw	1
  2166  00161E  6E18               	movwf	printf@c,c
  2167  001620                     l1622:
  2168  001620  0E05               	movlw	5
  2169  001622  1818               	xorwf	printf@c,w,c
  2170  001624  B4D8               	btfsc	status,2,c
  2171  001626  D012               	goto	u740
  2172                           
  2173                           ;doprnt.c: 1306: if(val < dpowers[c])
  2174  001628  5018               	movf	printf@c,w,c
  2175  00162A  0D02               	mullw	2
  2176  00162C  0E01               	movlw	low _dpowers
  2177  00162E  24F3               	addwf	prodl,w,c
  2178  001630  6EF6               	movwf	tblptrl,c
  2179  001632  0E10               	movlw	high _dpowers
  2180  001634  20F4               	addwfc	prodh,w,c
  2181  001636  6EF7               	movwf	tblptrh,c
  2182  001638                     	if	0	;There are less than 3 active tblptr bytes
  2183  001638                     	endif
  2184  001638  0009               	tblrd		*+
  2185  00163A  50F5               	movf	tablat,w,c
  2186  00163C  5C16               	subwf	printf@val,w,c
  2187  00163E  0009               	tblrd		*+
  2188  001640  50F5               	movf	tablat,w,c
  2189  001642  5817               	subwfb	printf@val+1,w,c
  2190  001644  A0D8               	btfss	status,0,c
  2191  001646  D002               	goto	u740
  2192                           
  2193                           ;doprnt.c: 1307: break;
  2194  001648  2A18               	incf	printf@c,f,c
  2195  00164A  D7EA               	goto	l1622
  2196  00164C                     u740:
  2197                           
  2198                           ;doprnt.c: 1422: {
  2199                           ;doprnt.c: 1438: if(flag & 0x03)
  2200  00164C  C014  F011         	movff	printf@flag,??_printf
  2201  001650  0E03               	movlw	3
  2202  001652  1611               	andwf	??_printf,f,c
  2203  001654  B4D8               	btfsc	status,2,c
  2204  001656  D003               	goto	l317
  2205                           
  2206                           ;doprnt.c: 1439: (putch('-') );
  2207  001658  0E2D               	movlw	45
  2208  00165A  EC70  F00D         	call	_putch
  2209  00165E                     l317:
  2210                           
  2211                           ;doprnt.c: 1469: }
  2212                           ;doprnt.c: 1472: prec = c;
  2213  00165E  C018  F015         	movff	printf@c,printf@prec
  2214                           
  2215                           ;doprnt.c: 1474: while(prec--) {
  2216  001662  D024               	goto	l318
  2217  001664                     
  2218                           ;doprnt.c: 1478: {
  2219                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2220  001664  5015               	movf	printf@prec,w,c
  2221  001666  0D02               	mullw	2
  2222  001668  0E01               	movlw	low _dpowers
  2223  00166A  24F3               	addwf	prodl,w,c
  2224  00166C  6EF6               	movwf	tblptrl,c
  2225  00166E  0E10               	movlw	high _dpowers
  2226  001670  20F4               	addwfc	prodh,w,c
  2227  001672  6EF7               	movwf	tblptrh,c
  2228  001674                     	if	0	;There are less than 3 active tblptr bytes
  2229  001674                     	endif
  2230  001674  0009               	tblrd		*+
  2231  001676  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2232  00167A  000A               	tblrd		*-
  2233  00167C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2234  001680  C016  F001         	movff	printf@val,___lwdiv@dividend
  2235  001684  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2236  001688  ECA6  F00B         	call	___lwdiv	;wreg free
  2237  00168C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2238  001690  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2239  001694  0E00               	movlw	0
  2240  001696  6E0B               	movwf	___lwmod@divisor+1,c
  2241  001698  0E0A               	movlw	10
  2242  00169A  6E0A               	movwf	___lwmod@divisor,c
  2243  00169C  ECA4  F00C         	call	___lwmod	;wreg free
  2244  0016A0  5008               	movf	?___lwmod,w,c
  2245  0016A2  0F30               	addlw	48
  2246  0016A4  6E18               	movwf	printf@c,c
  2247                           
  2248                           ;doprnt.c: 1523: }
  2249                           ;doprnt.c: 1524: (putch(c) );
  2250  0016A6  5018               	movf	printf@c,w,c
  2251  0016A8  EC70  F00D         	call	_putch
  2252  0016AC                     l318:
  2253  0016AC  0615               	decf	printf@prec,f,c
  2254  0016AE  2815               	incf	printf@prec,w,c
  2255  0016B0  A4D8               	btfss	status,2,c
  2256  0016B2  D7D8               	goto	l319
  2257  0016B4                     u760:
  2258  0016B4  C00D  FFF6         	movff	printf@f,tblptrl
  2259  0016B8  C00E  FFF7         	movff	printf@f+1,tblptrh
  2260  0016BC  4A0D               	infsnz	printf@f,f,c
  2261  0016BE  2A0E               	incf	printf@f+1,f,c
  2262  0016C0                     	if	0	;tblptru may be non-zero
  2263  0016C0                     	endif
  2264  0016C0                     	if	0	;tblptru may be non-zero
  2265  0016C0                     	endif
  2266  0016C0  0008               	tblrd		*
  2267  0016C2  CFF5 F018          	movff	tablat,printf@c
  2268  0016C6  5018               	movf	printf@c,w,c
  2269  0016C8  B4D8               	btfsc	status,2,c
  2270  0016CA  0012               	return	
  2271  0016CC  D776               	goto	l304
  2272  0016CE                     __end_of_printf:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           postinc0	equ	0xFEE
  2281                           wreg	equ	0xFE8
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _putch *****************
  2289 ;; Defined at:
  2290 ;;		line 24 in file "lcd.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  data            1    wreg     unsigned char 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  data            1    2[COMRAM] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;Total ram usage:        1 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    1
  2311 ;; This function calls:
  2312 ;;		_lcdNibble
  2313 ;; This function is called by:
  2314 ;;		_printf
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text8
  2319  001AE0                     __ptext8:
  2320                           	opt stack 0
  2321  001AE0                     _putch:
  2322                           	opt stack 28
  2323                           
  2324                           ;incstack = 0
  2325                           ;putch@data stored from wreg
  2326  001AE0  6E03               	movwf	putch@data,c
  2327                           
  2328                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2329  001AE2  848C               	bsf	3980,2,c	;volatile
  2330                           
  2331                           ;lcd.c: 33: lcdNibble(data);
  2332  001AE4  5003               	movf	putch@data,w,c
  2333  001AE6  EC67  F00B         	call	_lcdNibble
  2334                           
  2335                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2336  001AEA  0E42               	movlw	66
  2337  001AEC                     u1287:
  2338  001AEC  2EE8               	decfsz	wreg,f,c
  2339  001AEE  D7FE               	bra	u1287
  2340  001AF0  D000               	nop2	
  2341  001AF2  0012               	return		;funcret
  2342  001AF4                     __end_of_putch:
  2343                           	opt stack 0
  2344                           tblptru	equ	0xFF8
  2345                           tblptrh	equ	0xFF7
  2346                           tblptrl	equ	0xFF6
  2347                           tablat	equ	0xFF5
  2348                           prodh	equ	0xFF4
  2349                           prodl	equ	0xFF3
  2350                           postinc0	equ	0xFEE
  2351                           wreg	equ	0xFE8
  2352                           postinc2	equ	0xFDE
  2353                           postdec2	equ	0xFDD
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358 ;; *************** function ___lwmod *****************
  2359 ;; Defined at:
  2360 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  dividend        2    7[COMRAM] unsigned int 
  2363 ;;  divisor         2    9[COMRAM] unsigned int 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  counter         1   11[COMRAM] unsigned char 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  2    7[COMRAM] unsigned int 
  2368 ;; Registers used:
  2369 ;;		wreg, status,2, status,0
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2378 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;Total ram usage:        5 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; This function calls:
  2382 ;;		Nothing
  2383 ;; This function is called by:
  2384 ;;		_printf
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text9
  2389  001948                     __ptext9:
  2390                           	opt stack 0
  2391  001948                     ___lwmod:
  2392                           	opt stack 29
  2393                           
  2394                           ;incstack = 0
  2395  001948  500A               	movf	___lwmod@divisor,w,c
  2396  00194A  100B               	iorwf	___lwmod@divisor+1,w,c
  2397  00194C  B4D8               	btfsc	status,2,c
  2398  00194E  D018               	goto	l741
  2399  001950  0E01               	movlw	1
  2400  001952  6E0C               	movwf	___lwmod@counter,c
  2401  001954  D004               	goto	l736
  2402  001956  90D8               	bcf	status,0,c
  2403  001958  360A               	rlcf	___lwmod@divisor,f,c
  2404  00195A  360B               	rlcf	___lwmod@divisor+1,f,c
  2405  00195C  2A0C               	incf	___lwmod@counter,f,c
  2406  00195E                     l736:
  2407  00195E  AE0B               	btfss	___lwmod@divisor+1,7,c
  2408  001960  D7FA               	goto	l737
  2409  001962                     u680:
  2410  001962  500A               	movf	___lwmod@divisor,w,c
  2411  001964  5C08               	subwf	___lwmod@dividend,w,c
  2412  001966  500B               	movf	___lwmod@divisor+1,w,c
  2413  001968  5809               	subwfb	___lwmod@dividend+1,w,c
  2414  00196A  A0D8               	btfss	status,0,c
  2415  00196C  D004               	goto	l740
  2416  00196E  500A               	movf	___lwmod@divisor,w,c
  2417  001970  5E08               	subwf	___lwmod@dividend,f,c
  2418  001972  500B               	movf	___lwmod@divisor+1,w,c
  2419  001974  5A09               	subwfb	___lwmod@dividend+1,f,c
  2420  001976                     l740:
  2421  001976  90D8               	bcf	status,0,c
  2422  001978  320B               	rrcf	___lwmod@divisor+1,f,c
  2423  00197A  320A               	rrcf	___lwmod@divisor,f,c
  2424  00197C  2E0C               	decfsz	___lwmod@counter,f,c
  2425  00197E  D7F1               	goto	u680
  2426  001980                     l741:
  2427  001980  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2428  001984  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2429  001988  0012               	return		;funcret
  2430  00198A                     __end_of___lwmod:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           prodh	equ	0xFF4
  2437                           prodl	equ	0xFF3
  2438                           postinc0	equ	0xFEE
  2439                           wreg	equ	0xFE8
  2440                           postinc2	equ	0xFDE
  2441                           postdec2	equ	0xFDD
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function ___lwdiv *****************
  2447 ;; Defined at:
  2448 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  dividend        2    0[COMRAM] unsigned int 
  2451 ;;  divisor         2    2[COMRAM] unsigned int 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  quotient        2    4[COMRAM] unsigned int 
  2454 ;;  counter         1    6[COMRAM] unsigned char 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  2    0[COMRAM] unsigned int 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2465 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2467 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;Total ram usage:        7 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_printf
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text10
  2478  00174C                     __ptext10:
  2479                           	opt stack 0
  2480  00174C                     ___lwdiv:
  2481                           	opt stack 29
  2482                           
  2483                           ;incstack = 0
  2484  00174C  0E00               	movlw	0
  2485  00174E  6E06               	movwf	___lwdiv@quotient+1,c
  2486  001750  0E00               	movlw	0
  2487  001752  6E05               	movwf	___lwdiv@quotient,c
  2488  001754  5003               	movf	___lwdiv@divisor,w,c
  2489  001756  1004               	iorwf	___lwdiv@divisor+1,w,c
  2490  001758  B4D8               	btfsc	status,2,c
  2491  00175A  D01C               	goto	l731
  2492  00175C  0E01               	movlw	1
  2493  00175E  6E07               	movwf	___lwdiv@counter,c
  2494  001760  D004               	goto	l726
  2495  001762  90D8               	bcf	status,0,c
  2496  001764  3603               	rlcf	___lwdiv@divisor,f,c
  2497  001766  3604               	rlcf	___lwdiv@divisor+1,f,c
  2498  001768  2A07               	incf	___lwdiv@counter,f,c
  2499  00176A                     l726:
  2500  00176A  AE04               	btfss	___lwdiv@divisor+1,7,c
  2501  00176C  D7FA               	goto	l727
  2502  00176E                     u650:
  2503  00176E  90D8               	bcf	status,0,c
  2504  001770  3605               	rlcf	___lwdiv@quotient,f,c
  2505  001772  3606               	rlcf	___lwdiv@quotient+1,f,c
  2506  001774  5003               	movf	___lwdiv@divisor,w,c
  2507  001776  5C01               	subwf	___lwdiv@dividend,w,c
  2508  001778  5004               	movf	___lwdiv@divisor+1,w,c
  2509  00177A  5802               	subwfb	___lwdiv@dividend+1,w,c
  2510  00177C  A0D8               	btfss	status,0,c
  2511  00177E  D005               	goto	l730
  2512  001780  5003               	movf	___lwdiv@divisor,w,c
  2513  001782  5E01               	subwf	___lwdiv@dividend,f,c
  2514  001784  5004               	movf	___lwdiv@divisor+1,w,c
  2515  001786  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2516  001788  8005               	bsf	___lwdiv@quotient,0,c
  2517  00178A                     l730:
  2518  00178A  90D8               	bcf	status,0,c
  2519  00178C  3204               	rrcf	___lwdiv@divisor+1,f,c
  2520  00178E  3203               	rrcf	___lwdiv@divisor,f,c
  2521  001790  2E07               	decfsz	___lwdiv@counter,f,c
  2522  001792  D7ED               	goto	u650
  2523  001794                     l731:
  2524  001794  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2525  001798  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2526  00179C  0012               	return		;funcret
  2527  00179E                     __end_of___lwdiv:
  2528                           	opt stack 0
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           prodh	equ	0xFF4
  2534                           prodl	equ	0xFF3
  2535                           postinc0	equ	0xFEE
  2536                           wreg	equ	0xFE8
  2537                           postinc2	equ	0xFDE
  2538                           postdec2	equ	0xFDD
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           
  2543 ;; *************** function _motorStop_3 *****************
  2544 ;; Defined at:
  2545 ;;		line 433 in file "main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;Total ram usage:        2 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text11
  2573  0019F0                     __ptext11:
  2574                           	opt stack 0
  2575  0019F0                     _motorStop_3:
  2576                           	opt stack 30
  2577                           
  2578                           ;main.c: 434: LATCbits.LATC3 = 0;
  2579                           
  2580                           ;incstack = 0
  2581  0019F0  968B               	bcf	3979,3,c	;volatile
  2582                           
  2583                           ;main.c: 435: TRISCbits.RC3 = 0;
  2584  0019F2  9694               	bcf	3988,3,c	;volatile
  2585                           
  2586                           ;main.c: 437: _delay((unsigned long)((200)*(8000000/4000.0)));
  2587  0019F4  0E03               	movlw	3
  2588  0019F6  6E02               	movwf	(??_motorStop_3+1)& (0+255),c
  2589  0019F8  0E08               	movlw	8
  2590  0019FA  6E01               	movwf	??_motorStop_3& (0+255),c
  2591  0019FC  0E77               	movlw	119
  2592  0019FE                     u1297:
  2593  0019FE  2EE8               	decfsz	wreg,f,c
  2594  001A00  D7FE               	bra	u1297
  2595  001A02  2E01               	decfsz	??_motorStop_3& (0+255),f,c
  2596  001A04  D7FC               	bra	u1297
  2597  001A06  2E02               	decfsz	(??_motorStop_3+1)& (0+255),f,c
  2598  001A08  D7FA               	bra	u1297
  2599  001A0A  F000               	nop	
  2600  001A0C  0012               	return		;funcret
  2601  001A0E                     __end_of_motorStop_3:
  2602                           	opt stack 0
  2603                           tblptru	equ	0xFF8
  2604                           tblptrh	equ	0xFF7
  2605                           tblptrl	equ	0xFF6
  2606                           tablat	equ	0xFF5
  2607                           prodh	equ	0xFF4
  2608                           prodl	equ	0xFF3
  2609                           postinc0	equ	0xFEE
  2610                           wreg	equ	0xFE8
  2611                           postinc2	equ	0xFDE
  2612                           postdec2	equ	0xFDD
  2613                           fsr2h	equ	0xFDA
  2614                           fsr2l	equ	0xFD9
  2615                           status	equ	0xFD8
  2616                           
  2617 ;; *************** function _motorStop_2 *****************
  2618 ;; Defined at:
  2619 ;;		line 415 in file "main.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;Total ram usage:        2 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; This function calls:
  2640 ;;		Nothing
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text12
  2647  001A0E                     __ptext12:
  2648                           	opt stack 0
  2649  001A0E                     _motorStop_2:
  2650                           	opt stack 30
  2651                           
  2652                           ;main.c: 416: LATCbits.LATC2 = 0;
  2653                           
  2654                           ;incstack = 0
  2655  001A0E  948B               	bcf	3979,2,c	;volatile
  2656                           
  2657                           ;main.c: 417: TRISCbits.RC2 = 0;
  2658  001A10  9494               	bcf	3988,2,c	;volatile
  2659                           
  2660                           ;main.c: 419: _delay((unsigned long)((200)*(8000000/4000.0)));
  2661  001A12  0E03               	movlw	3
  2662  001A14  6E02               	movwf	(??_motorStop_2+1)& (0+255),c
  2663  001A16  0E08               	movlw	8
  2664  001A18  6E01               	movwf	??_motorStop_2& (0+255),c
  2665  001A1A  0E77               	movlw	119
  2666  001A1C                     u1307:
  2667  001A1C  2EE8               	decfsz	wreg,f,c
  2668  001A1E  D7FE               	bra	u1307
  2669  001A20  2E01               	decfsz	??_motorStop_2& (0+255),f,c
  2670  001A22  D7FC               	bra	u1307
  2671  001A24  2E02               	decfsz	(??_motorStop_2+1)& (0+255),f,c
  2672  001A26  D7FA               	bra	u1307
  2673  001A28  F000               	nop	
  2674  001A2A  0012               	return		;funcret
  2675  001A2C                     __end_of_motorStop_2:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           postinc0	equ	0xFEE
  2684                           wreg	equ	0xFE8
  2685                           postinc2	equ	0xFDE
  2686                           postdec2	equ	0xFDD
  2687                           fsr2h	equ	0xFDA
  2688                           fsr2l	equ	0xFD9
  2689                           status	equ	0xFD8
  2690                           
  2691 ;; *************** function _motorStop_1 *****************
  2692 ;; Defined at:
  2693 ;;		line 398 in file "main.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		wreg
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;Total ram usage:        2 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_main
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text13
  2721  001A2C                     __ptext13:
  2722                           	opt stack 0
  2723  001A2C                     _motorStop_1:
  2724                           	opt stack 30
  2725                           
  2726                           ;main.c: 399: LATCbits.LATC1 = 0;
  2727                           
  2728                           ;incstack = 0
  2729  001A2C  928B               	bcf	3979,1,c	;volatile
  2730                           
  2731                           ;main.c: 400: TRISCbits.RC1 = 0;
  2732  001A2E  9294               	bcf	3988,1,c	;volatile
  2733                           
  2734                           ;main.c: 402: _delay((unsigned long)((200)*(8000000/4000.0)));
  2735  001A30  0E03               	movlw	3
  2736  001A32  6E02               	movwf	(??_motorStop_1+1)& (0+255),c
  2737  001A34  0E08               	movlw	8
  2738  001A36  6E01               	movwf	??_motorStop_1& (0+255),c
  2739  001A38  0E77               	movlw	119
  2740  001A3A                     u1317:
  2741  001A3A  2EE8               	decfsz	wreg,f,c
  2742  001A3C  D7FE               	bra	u1317
  2743  001A3E  2E01               	decfsz	??_motorStop_1& (0+255),f,c
  2744  001A40  D7FC               	bra	u1317
  2745  001A42  2E02               	decfsz	(??_motorStop_1+1)& (0+255),f,c
  2746  001A44  D7FA               	bra	u1317
  2747  001A46  F000               	nop	
  2748  001A48  0012               	return		;funcret
  2749  001A4A                     __end_of_motorStop_1:
  2750                           	opt stack 0
  2751                           tblptru	equ	0xFF8
  2752                           tblptrh	equ	0xFF7
  2753                           tblptrl	equ	0xFF6
  2754                           tablat	equ	0xFF5
  2755                           prodh	equ	0xFF4
  2756                           prodl	equ	0xFF3
  2757                           postinc0	equ	0xFEE
  2758                           wreg	equ	0xFE8
  2759                           postinc2	equ	0xFDE
  2760                           postdec2	equ	0xFDD
  2761                           fsr2h	equ	0xFDA
  2762                           fsr2l	equ	0xFD9
  2763                           status	equ	0xFD8
  2764                           
  2765 ;; *************** function _motorStop_0 *****************
  2766 ;; Defined at:
  2767 ;;		line 381 in file "main.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;		None
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;		None
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;Total ram usage:        2 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_main
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text14
  2795  001A4A                     __ptext14:
  2796                           	opt stack 0
  2797  001A4A                     _motorStop_0:
  2798                           	opt stack 30
  2799                           
  2800                           ;main.c: 382: LATCbits.LATC0 = 0;
  2801                           
  2802                           ;incstack = 0
  2803  001A4A  908B               	bcf	3979,0,c	;volatile
  2804                           
  2805                           ;main.c: 383: TRISCbits.RC0 = 0;
  2806  001A4C  9094               	bcf	3988,0,c	;volatile
  2807                           
  2808                           ;main.c: 385: _delay((unsigned long)((200)*(8000000/4000.0)));
  2809  001A4E  0E03               	movlw	3
  2810  001A50  6E02               	movwf	(??_motorStop_0+1)& (0+255),c
  2811  001A52  0E08               	movlw	8
  2812  001A54  6E01               	movwf	??_motorStop_0& (0+255),c
  2813  001A56  0E77               	movlw	119
  2814  001A58                     u1327:
  2815  001A58  2EE8               	decfsz	wreg,f,c
  2816  001A5A  D7FE               	bra	u1327
  2817  001A5C  2E01               	decfsz	??_motorStop_0& (0+255),f,c
  2818  001A5E  D7FC               	bra	u1327
  2819  001A60  2E02               	decfsz	(??_motorStop_0+1)& (0+255),f,c
  2820  001A62  D7FA               	bra	u1327
  2821  001A64  F000               	nop	
  2822  001A66  0012               	return		;funcret
  2823  001A68                     __end_of_motorStop_0:
  2824                           	opt stack 0
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           prodh	equ	0xFF4
  2830                           prodl	equ	0xFF3
  2831                           postinc0	equ	0xFEE
  2832                           wreg	equ	0xFE8
  2833                           postinc2	equ	0xFDE
  2834                           postdec2	equ	0xFDD
  2835                           fsr2h	equ	0xFDA
  2836                           fsr2l	equ	0xFD9
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function _motorStart_3 *****************
  2840 ;; Defined at:
  2841 ;;		line 424 in file "main.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;		None
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;Total ram usage:        2 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; This function calls:
  2862 ;;		Nothing
  2863 ;; This function is called by:
  2864 ;;		_main
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text15
  2869  001A68                     __ptext15:
  2870                           	opt stack 0
  2871  001A68                     _motorStart_3:
  2872                           	opt stack 30
  2873                           
  2874                           ;main.c: 426: LATCbits.LATC3 = 1;
  2875                           
  2876                           ;incstack = 0
  2877  001A68  868B               	bsf	3979,3,c	;volatile
  2878                           
  2879                           ;main.c: 427: TRISCbits.RC3 = 0;
  2880  001A6A  9694               	bcf	3988,3,c	;volatile
  2881                           
  2882                           ;main.c: 429: _delay((unsigned long)((200)*(8000000/4000.0)));
  2883  001A6C  0E03               	movlw	3
  2884  001A6E  6E02               	movwf	(??_motorStart_3+1)& (0+255),c
  2885  001A70  0E08               	movlw	8
  2886  001A72  6E01               	movwf	??_motorStart_3& (0+255),c
  2887  001A74  0E77               	movlw	119
  2888  001A76                     u1337:
  2889  001A76  2EE8               	decfsz	wreg,f,c
  2890  001A78  D7FE               	bra	u1337
  2891  001A7A  2E01               	decfsz	??_motorStart_3& (0+255),f,c
  2892  001A7C  D7FC               	bra	u1337
  2893  001A7E  2E02               	decfsz	(??_motorStart_3+1)& (0+255),f,c
  2894  001A80  D7FA               	bra	u1337
  2895  001A82  F000               	nop	
  2896  001A84  0012               	return		;funcret
  2897  001A86                     __end_of_motorStart_3:
  2898                           	opt stack 0
  2899                           tblptru	equ	0xFF8
  2900                           tblptrh	equ	0xFF7
  2901                           tblptrl	equ	0xFF6
  2902                           tablat	equ	0xFF5
  2903                           prodh	equ	0xFF4
  2904                           prodl	equ	0xFF3
  2905                           postinc0	equ	0xFEE
  2906                           wreg	equ	0xFE8
  2907                           postinc2	equ	0xFDE
  2908                           postdec2	equ	0xFDD
  2909                           fsr2h	equ	0xFDA
  2910                           fsr2l	equ	0xFD9
  2911                           status	equ	0xFD8
  2912                           
  2913 ;; *************** function _motorStart_2 *****************
  2914 ;; Defined at:
  2915 ;;		line 406 in file "main.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;		None
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;		None
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  1    wreg      void 
  2922 ;; Registers used:
  2923 ;;		wreg
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;Total ram usage:        2 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; This function calls:
  2936 ;;		Nothing
  2937 ;; This function is called by:
  2938 ;;		_main
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text16
  2943  001A86                     __ptext16:
  2944                           	opt stack 0
  2945  001A86                     _motorStart_2:
  2946                           	opt stack 30
  2947                           
  2948                           ;main.c: 408: LATCbits.LATC2 = 1;
  2949                           
  2950                           ;incstack = 0
  2951  001A86  848B               	bsf	3979,2,c	;volatile
  2952                           
  2953                           ;main.c: 409: TRISCbits.RC2 = 0;
  2954  001A88  9494               	bcf	3988,2,c	;volatile
  2955                           
  2956                           ;main.c: 411: _delay((unsigned long)((200)*(8000000/4000.0)));
  2957  001A8A  0E03               	movlw	3
  2958  001A8C  6E02               	movwf	(??_motorStart_2+1)& (0+255),c
  2959  001A8E  0E08               	movlw	8
  2960  001A90  6E01               	movwf	??_motorStart_2& (0+255),c
  2961  001A92  0E77               	movlw	119
  2962  001A94                     u1347:
  2963  001A94  2EE8               	decfsz	wreg,f,c
  2964  001A96  D7FE               	bra	u1347
  2965  001A98  2E01               	decfsz	??_motorStart_2& (0+255),f,c
  2966  001A9A  D7FC               	bra	u1347
  2967  001A9C  2E02               	decfsz	(??_motorStart_2+1)& (0+255),f,c
  2968  001A9E  D7FA               	bra	u1347
  2969  001AA0  F000               	nop	
  2970  001AA2  0012               	return		;funcret
  2971  001AA4                     __end_of_motorStart_2:
  2972                           	opt stack 0
  2973                           tblptru	equ	0xFF8
  2974                           tblptrh	equ	0xFF7
  2975                           tblptrl	equ	0xFF6
  2976                           tablat	equ	0xFF5
  2977                           prodh	equ	0xFF4
  2978                           prodl	equ	0xFF3
  2979                           postinc0	equ	0xFEE
  2980                           wreg	equ	0xFE8
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _motorStart_1 *****************
  2988 ;; Defined at:
  2989 ;;		line 389 in file "main.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        2 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_main
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text17
  3017  001AA4                     __ptext17:
  3018                           	opt stack 0
  3019  001AA4                     _motorStart_1:
  3020                           	opt stack 30
  3021                           
  3022                           ;main.c: 391: LATCbits.LATC1 = 1;
  3023                           
  3024                           ;incstack = 0
  3025  001AA4  828B               	bsf	3979,1,c	;volatile
  3026                           
  3027                           ;main.c: 392: TRISCbits.RC1 = 0;
  3028  001AA6  9294               	bcf	3988,1,c	;volatile
  3029                           
  3030                           ;main.c: 394: _delay((unsigned long)((200)*(8000000/4000.0)));
  3031  001AA8  0E03               	movlw	3
  3032  001AAA  6E02               	movwf	(??_motorStart_1+1)& (0+255),c
  3033  001AAC  0E08               	movlw	8
  3034  001AAE  6E01               	movwf	??_motorStart_1& (0+255),c
  3035  001AB0  0E77               	movlw	119
  3036  001AB2                     u1357:
  3037  001AB2  2EE8               	decfsz	wreg,f,c
  3038  001AB4  D7FE               	bra	u1357
  3039  001AB6  2E01               	decfsz	??_motorStart_1& (0+255),f,c
  3040  001AB8  D7FC               	bra	u1357
  3041  001ABA  2E02               	decfsz	(??_motorStart_1+1)& (0+255),f,c
  3042  001ABC  D7FA               	bra	u1357
  3043  001ABE  F000               	nop	
  3044  001AC0  0012               	return		;funcret
  3045  001AC2                     __end_of_motorStart_1:
  3046                           	opt stack 0
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           prodh	equ	0xFF4
  3052                           prodl	equ	0xFF3
  3053                           postinc0	equ	0xFEE
  3054                           wreg	equ	0xFE8
  3055                           postinc2	equ	0xFDE
  3056                           postdec2	equ	0xFDD
  3057                           fsr2h	equ	0xFDA
  3058                           fsr2l	equ	0xFD9
  3059                           status	equ	0xFD8
  3060                           
  3061 ;; *************** function _motorStart_0 *****************
  3062 ;; Defined at:
  3063 ;;		line 372 in file "main.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;		None
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;		None
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;Total ram usage:        2 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; This function calls:
  3084 ;;		Nothing
  3085 ;; This function is called by:
  3086 ;;		_main
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text18
  3091  001AC2                     __ptext18:
  3092                           	opt stack 0
  3093  001AC2                     _motorStart_0:
  3094                           	opt stack 30
  3095                           
  3096                           ;main.c: 374: LATCbits.LATC0 = 1;
  3097                           
  3098                           ;incstack = 0
  3099  001AC2  808B               	bsf	3979,0,c	;volatile
  3100                           
  3101                           ;main.c: 375: TRISCbits.RC0 = 0;
  3102  001AC4  9094               	bcf	3988,0,c	;volatile
  3103                           
  3104                           ;main.c: 377: _delay((unsigned long)((200)*(8000000/4000.0)));
  3105  001AC6  0E03               	movlw	3
  3106  001AC8  6E02               	movwf	(??_motorStart_0+1)& (0+255),c
  3107  001ACA  0E08               	movlw	8
  3108  001ACC  6E01               	movwf	??_motorStart_0& (0+255),c
  3109  001ACE  0E77               	movlw	119
  3110  001AD0                     u1367:
  3111  001AD0  2EE8               	decfsz	wreg,f,c
  3112  001AD2  D7FE               	bra	u1367
  3113  001AD4  2E01               	decfsz	??_motorStart_0& (0+255),f,c
  3114  001AD6  D7FC               	bra	u1367
  3115  001AD8  2E02               	decfsz	(??_motorStart_0+1)& (0+255),f,c
  3116  001ADA  D7FA               	bra	u1367
  3117  001ADC  F000               	nop	
  3118  001ADE  0012               	return		;funcret
  3119  001AE0                     __end_of_motorStart_0:
  3120                           	opt stack 0
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           prodh	equ	0xFF4
  3126                           prodl	equ	0xFF3
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           postinc2	equ	0xFDE
  3130                           postdec2	equ	0xFDD
  3131                           fsr2h	equ	0xFDA
  3132                           fsr2l	equ	0xFD9
  3133                           status	equ	0xFD8
  3134                           
  3135 ;; *************** function _initLCD *****************
  3136 ;; Defined at:
  3137 ;;		line 60 in file "lcd.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg, status,2, status,0, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;Total ram usage:        1 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    2
  3158 ;; This function calls:
  3159 ;;		_lcdInst
  3160 ;; This function is called by:
  3161 ;;		_main
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text19
  3166  00179E                     __ptext19:
  3167                           	opt stack 0
  3168  00179E                     _initLCD:
  3169                           	opt stack 28
  3170                           
  3171                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  3172                           
  3173                           ;incstack = 0
  3174  00179E  0E27               	movlw	39
  3175  0017A0  6E04               	movwf	??_initLCD& (0+255),c
  3176  0017A2  0EF5               	movlw	245
  3177  0017A4                     u1377:
  3178  0017A4  2EE8               	decfsz	wreg,f,c
  3179  0017A6  D7FE               	bra	u1377
  3180  0017A8  2E04               	decfsz	??_initLCD& (0+255),f,c
  3181  0017AA  D7FC               	bra	u1377
  3182  0017AC  F000               	nop	
  3183                           
  3184                           ;lcd.c: 69: lcdInst(0b00110011);
  3185  0017AE  0E33               	movlw	51
  3186  0017B0  EC7A  F00D         	call	_lcdInst
  3187                           
  3188                           ;lcd.c: 70: lcdInst(0b00110010);
  3189  0017B4  0E32               	movlw	50
  3190  0017B6  EC7A  F00D         	call	_lcdInst
  3191                           
  3192                           ;lcd.c: 71: lcdInst(0b00101000);
  3193  0017BA  0E28               	movlw	40
  3194  0017BC  EC7A  F00D         	call	_lcdInst
  3195                           
  3196                           ;lcd.c: 72: lcdInst(0b00001111);
  3197  0017C0  0E0F               	movlw	15
  3198  0017C2  EC7A  F00D         	call	_lcdInst
  3199                           
  3200                           ;lcd.c: 73: lcdInst(0b00000110);
  3201  0017C6  0E06               	movlw	6
  3202  0017C8  EC7A  F00D         	call	_lcdInst
  3203                           
  3204                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  3205  0017CC  0E01               	movlw	1
  3206  0017CE  EC7A  F00D         	call	_lcdInst
  3207  0017D2  0E27               	movlw	39
  3208  0017D4  6E04               	movwf	??_initLCD& (0+255),c
  3209  0017D6  0EF5               	movlw	245
  3210  0017D8                     u1387:
  3211  0017D8  2EE8               	decfsz	wreg,f,c
  3212  0017DA  D7FE               	bra	u1387
  3213  0017DC  2E04               	decfsz	??_initLCD& (0+255),f,c
  3214  0017DE  D7FC               	bra	u1387
  3215  0017E0  F000               	nop	
  3216                           
  3217                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3218  0017E2  0E0F               	movlw	15
  3219  0017E4  EC7A  F00D         	call	_lcdInst
  3220  0017E8  0012               	return		;funcret
  3221  0017EA                     __end_of_initLCD:
  3222                           	opt stack 0
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           prodh	equ	0xFF4
  3228                           prodl	equ	0xFF3
  3229                           postinc0	equ	0xFEE
  3230                           wreg	equ	0xFE8
  3231                           postinc2	equ	0xFDE
  3232                           postdec2	equ	0xFDD
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _lcdInst *****************
  3238 ;; Defined at:
  3239 ;;		line 11 in file "lcd.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  data            1    wreg     unsigned char 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  data            1    2[COMRAM] unsigned char 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  1    wreg      void 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0, cstack
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;Total ram usage:        1 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    1
  3260 ;; This function calls:
  3261 ;;		_lcdNibble
  3262 ;; This function is called by:
  3263 ;;		_initLCD
  3264 ;;		_lcd_set_cursor
  3265 ;;		_lcd_shift_cursor
  3266 ;;		_lcd_shift_display
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text20
  3271  001AF4                     __ptext20:
  3272                           	opt stack 0
  3273  001AF4                     _lcdInst:
  3274                           	opt stack 28
  3275                           
  3276                           ;incstack = 0
  3277                           ;lcdInst@data stored from wreg
  3278  001AF4  6E03               	movwf	lcdInst@data,c
  3279                           
  3280                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  3281  001AF6  948C               	bcf	3980,2,c	;volatile
  3282                           
  3283                           ;lcd.c: 20: lcdNibble(data);
  3284  001AF8  5003               	movf	lcdInst@data,w,c
  3285  001AFA  EC67  F00B         	call	_lcdNibble
  3286                           
  3287                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  3288  001AFE  0E42               	movlw	66
  3289  001B00                     u1397:
  3290  001B00  2EE8               	decfsz	wreg,f,c
  3291  001B02  D7FE               	bra	u1397
  3292  001B04  D000               	nop2	
  3293  001B06  0012               	return		;funcret
  3294  001B08                     __end_of_lcdInst:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           prodh	equ	0xFF4
  3301                           prodl	equ	0xFF3
  3302                           postinc0	equ	0xFEE
  3303                           wreg	equ	0xFE8
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _lcdNibble *****************
  3311 ;; Defined at:
  3312 ;;		line 37 in file "lcd.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  data            1    wreg     unsigned char 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  data            1    1[COMRAM] unsigned char 
  3317 ;;  temp            1    0[COMRAM] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;Total ram usage:        2 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_lcdInst
  3337 ;;		_putch
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text21
  3342  0016CE                     __ptext21:
  3343                           	opt stack 0
  3344  0016CE                     _lcdNibble:
  3345                           	opt stack 28
  3346                           
  3347                           ;incstack = 0
  3348                           ;lcdNibble@data stored from wreg
  3349  0016CE  6E02               	movwf	lcdNibble@data,c
  3350                           
  3351                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3352  0016D0  5002               	movf	lcdNibble@data,w,c
  3353  0016D2  0BF0               	andlw	240
  3354  0016D4  6E01               	movwf	lcdNibble@temp,c
  3355                           
  3356                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3357  0016D6  508C               	movf	3980,w,c	;volatile
  3358  0016D8  0B0F               	andlw	15
  3359  0016DA  6E8C               	movwf	3980,c	;volatile
  3360                           
  3361                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3362  0016DC  5001               	movf	lcdNibble@temp,w,c
  3363  0016DE  108C               	iorwf	3980,w,c	;volatile
  3364  0016E0  6E8C               	movwf	3980,c	;volatile
  3365                           
  3366                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3367  0016E2  0E00               	movlw	0
  3368  0016E4  BEF2               	btfsc	intcon,7,c	;volatile
  3369  0016E6  0E01               	movlw	1
  3370  0016E8  6E2B               	movwf	lcd@LCDinterruptState,c
  3371  0016EA  9EF2               	bcf	intcon,7,c	;volatile
  3372  0016EC  868C               	bsf	3980,3,c	;volatile
  3373  0016EE  0E10               	movlw	16
  3374  0016F0                     u1407:
  3375  0016F0  2EE8               	decfsz	wreg,f,c
  3376  0016F2  D7FE               	bra	u1407
  3377  0016F4  D000               	nop2	
  3378  0016F6  968C               	bcf	3980,3,c	;volatile
  3379  0016F8  0E42               	movlw	66
  3380  0016FA                     u1417:
  3381  0016FA  2EE8               	decfsz	wreg,f,c
  3382  0016FC  D7FE               	bra	u1417
  3383  0016FE  D000               	nop2	
  3384  001700  B02B               	btfsc	lcd@LCDinterruptState,0,c
  3385  001702  D002               	bra	u15
  3386  001704  9EF2               	bcf	intcon,7,c	;volatile
  3387  001706  D001               	bra	u16
  3388  001708                     u15:
  3389  001708  8EF2               	bsf	intcon,7,c	;volatile
  3390  00170A                     u16:
  3391                           
  3392                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3393  00170A  3802               	swapf	lcdNibble@data,w,c
  3394  00170C  0BF0               	andlw	240
  3395  00170E  6E02               	movwf	lcdNibble@data,c
  3396                           
  3397                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3398  001710  5002               	movf	lcdNibble@data,w,c
  3399  001712  0BF0               	andlw	240
  3400  001714  6E01               	movwf	lcdNibble@temp,c
  3401                           
  3402                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3403  001716  508C               	movf	3980,w,c	;volatile
  3404  001718  0B0F               	andlw	15
  3405  00171A  6E8C               	movwf	3980,c	;volatile
  3406                           
  3407                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3408  00171C  5001               	movf	lcdNibble@temp,w,c
  3409  00171E  108C               	iorwf	3980,w,c	;volatile
  3410  001720  6E8C               	movwf	3980,c	;volatile
  3411                           
  3412                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3413  001722  0E00               	movlw	0
  3414  001724  BEF2               	btfsc	intcon,7,c	;volatile
  3415  001726  0E01               	movlw	1
  3416  001728  6E2B               	movwf	lcd@LCDinterruptState,c
  3417  00172A  9EF2               	bcf	intcon,7,c	;volatile
  3418  00172C  868C               	bsf	3980,3,c	;volatile
  3419  00172E  0E10               	movlw	16
  3420  001730                     u1427:
  3421  001730  2EE8               	decfsz	wreg,f,c
  3422  001732  D7FE               	bra	u1427
  3423  001734  D000               	nop2	
  3424  001736  968C               	bcf	3980,3,c	;volatile
  3425  001738  0E42               	movlw	66
  3426  00173A                     u1437:
  3427  00173A  2EE8               	decfsz	wreg,f,c
  3428  00173C  D7FE               	bra	u1437
  3429  00173E  D000               	nop2	
  3430  001740  B02B               	btfsc	lcd@LCDinterruptState,0,c
  3431  001742  D002               	bra	u25
  3432  001744  9EF2               	bcf	intcon,7,c	;volatile
  3433  001746  D001               	bra	u26
  3434  001748                     u25:
  3435  001748  8EF2               	bsf	intcon,7,c	;volatile
  3436  00174A                     u26:
  3437  00174A  0012               	return		;funcret
  3438  00174C                     __end_of_lcdNibble:
  3439                           	opt stack 0
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           intcon	equ	0xFF2
  3447                           postinc0	equ	0xFEE
  3448                           wreg	equ	0xFE8
  3449                           postinc2	equ	0xFDE
  3450                           postdec2	equ	0xFDD
  3451                           fsr2h	equ	0xFDA
  3452                           fsr2l	equ	0xFD9
  3453                           status	equ	0xFD8
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           intcon	equ	0xFF2
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469                           	psect	rparam
  3470  0000                     tblptru	equ	0xFF8
  3471                           tblptrh	equ	0xFF7
  3472                           tblptrl	equ	0xFF6
  3473                           tablat	equ	0xFF5
  3474                           prodh	equ	0xFF4
  3475                           prodl	equ	0xFF3
  3476                           intcon	equ	0xFF2
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           postinc2	equ	0xFDE
  3480                           postdec2	equ	0xFDD
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8


Data Sizes:
    Strings     97
    Constant    16
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      46
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_21(CODE[18]), STR_20(CODE[15]), STR_19(CODE[17]), STR_18(CODE[15]), 
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[8]), STR_14(CODE[9]), 
		 -> STR_13(CODE[3]), STR_12(CODE[5]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[5]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[5]), 
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[5]), STR_2(CODE[3]), 
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2809
                                             24 COMRAM     2     2      0
                            _initLCD
                       _motorStart_0
                       _motorStart_1
                       _motorStart_2
                       _motorStart_3
                        _motorStop_0
                        _motorStop_1
                        _motorStop_2
                        _motorStop_3
                             _printf
                            _readADC
                      _servoRotate80
                    _servoRotate80_2
                    _servoRotate80_3
                    _servoRotate80_4
                _servoRotate_counter
 ---------------------------------------------------------------------------------
 (1) _servoRotate_counter                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate80_4                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate80_3                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate80_2                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate80                                        1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    2697
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_3                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_2                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_3                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_2                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _motorStart_0
   _motorStart_1
   _motorStart_2
   _motorStart_3
   _motorStop_0
   _motorStop_1
   _motorStop_2
   _motorStop_3
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC
   _servoRotate80
   _servoRotate80_2
   _servoRotate80_3
   _servoRotate80_4
   _servoRotate_counter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      2E       1       36.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2E      34        0.0%
DATA                 0      0      2E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 13 14:51:34 2018

                           _i 001B                            u15 1708                            u16 170A  
                          u25 1748                            u26 174A                   __CFG_CPD$ON 000000  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l200 18D4  
                         l120 116E                           l202 1900                           l210 188E  
                         l130 128E                           l122 11AC                           l131 12CC  
                         l123 11C0                           l115 10DE                           l212 18BA  
                         l220 1848                           l140 1396                           l124 11FE  
                         l116 10F2                           l117 1130                           l222 1874  
                         l134 130A                           l311 15F4                           l143 13D4  
                         l127 123C                           l304 15BA                           l313 161C  
                         l305 15CA                           l129 127A                           l138 1344  
                         l235 1802                           l147 13EE                           l139 1358  
                         l156 19A2                           l148 13FE                           l317 165E  
                         l237 182E                           l149 143C                           l318 16AC  
                         l190 191A                           l319 1664                           l192 1946  
                         l730 178A                           l731 1794                           l740 1976  
                         l741 1980                           l726 176A                           l727 1762  
                         l736 195E                           l737 1956                  __CFG_CPB$OFF 000000  
                         u650 176E                           u740 164C                           u900 1310  
                         u820 1178                           u680 1962                           u760 16B4  
                         u940 13DA                           u860 1246                           u977 10CC  
                         u987 1126                           u997 114A                           _max 002D  
                         wreg 000FE8                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l1200 1838                          l1120 17F2                          l1172 18C4  
                        l1158 190A                          l1186 187E                          l1700 115E  
                        l1622 1620                          l1710 1178                          l1800 1358  
                        l1722 11C0                          l1740 122C                          l1830 13EE  
                        l1750 1246                          l1718 11AC                          l1826 13DA  
                        l1818 13C4                          l1762 128E                          l1682 10F2  
                        l1780 12FA                          l1758 127A                          l1678 10DE  
                        l1796 1344                          l1788 1310                          _ADON 007E10  
                        STR_1 1059                          STR_2 1059                          STR_3 106D  
                        STR_4 1059                          STR_5 1059                          STR_6 106D  
                        STR_7 1059                          STR_8 1059                          STR_9 106D  
                        u1007 119A                          u1017 11F4                          u1107 145E  
                        u1027 1218                          u1117 148C                          u1037 1268  
                        u1207 1852                          u1127 14BA                          u1047 12C2  
                        u1217 1866                          u1137 14E8                          u1057 12E6  
                        u1307 1A1C                          u1227 1898                          u1147 1516  
                        u1067 1332                          u1317 1A3A                          u1237 18AC  
                        u1157 1544                          u1077 138C                          _LATA 000F89  
                        _LATB 000F8A                          u1407 16F0                          u1327 1A58  
                        u1247 18DE                          u1167 1572                          u1087 13B0  
                        _LATC 000F8B                          _LATD 000F8C                          u1417 16FA  
                        u1337 1A76                          u1257 18F2                          u1177 15A0  
                        u1097 1432                          _LATE 000F8D                          u1427 1730  
                        u1347 1A94                          u1267 1924                          u1187 180C  
                        u1437 173A                          u1357 1AB2                          u1277 1938  
                        u1197 181E                          u1367 1AD0                          u1287 1AEC  
                        u1377 17A4                          u1297 19FE                          u1387 17D8  
                        u1397 1B00                          _main 1074           _servoRotate_counter 17EA  
                        fsr2h 000FDA                          fsr2l 000FD9                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
             ??_servoRotate80 0001                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
            __end_of_LCD_LEFT 100C          ?_servoRotate_counter 0001                         ?_main 0001  
                       STR_10 1059                         STR_11 1059                         STR_12 106D  
                       STR_20 1034                         STR_13 1059                         STR_21 1011  
                       STR_14 105C                         STR_15 1065                         STR_16 1052  
                       STR_17 1018                         STR_18 1043                         STR_19 1023  
             __end_of___lwdiv 179E               __end_of___lwmod 198A                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
    __size_of_servoRotate80_2 0046      __size_of_servoRotate80_3 0046      __size_of_servoRotate80_4 0046  
             __end_of_lcdInst 1B08                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_readADC 19C2               __end_of_initLCD 17EA                __CFG_EBTRB$OFF 000000  
             __end_of_dpowers 100B                         _state 0029                         _putch 1AE0  
                       tablat 000FF5             _LCDinterruptState 002C                         status 000FD8  
              __CFG_PBADEN$ON 000000               __initialization 19C2                  __end_of_main 15B0  
       ??_servoRotate_counter 0001             __end_of_LCD_RIGHT 100D                        ??_main 0019  
               __activetblptr 000002                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        ?_putch 0001  
                      _OSCCON 000FD3                __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 19E0  
                ?_motorStop_0 0001                  ?_motorStop_1 0001                  ?_motorStop_2 0001  
                ?_motorStop_3 0001                     ??_lcdInst 0003                        _printf 15B0  
                   ??_readADC 0003                     ??_initLCD 0004                  __pdataCOMRAM 002D  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8             ??_servoRotate80_2 0001             ??_servoRotate80_3 0001  
           ??_servoRotate80_4 0001                    __accesstop 0080       __end_of__initialization 19E6  
               ___rparam_used 000001                __pcstackCOMRAM 0001                 __end_of_putch 1AF4  
          __size_of_lcdNibble 007E                       ??_putch 0003                       ?_printf 000D  
        lcd@LCDinterruptState 002B             __end_of_lcdNibble 174C                       __Hparam 0000  
                     __Lparam 0000         __end_of_servoRotate80 1948                       ___lwdiv 174C  
                     ___lwmod 1948                  __psmallconst 1000                       __pcinit 19C2  
                     __ramtop 1000                       _lcdInst 1AF4                       __ptext0 1074  
                     __ptext1 17EA                       __ptext2 1830                       __ptext3 1876  
                     __ptext4 18BC                       __ptext5 1902                       __ptext6 198A  
                     __ptext7 15B0                       __ptext8 1AE0                       __ptext9 1948  
             __size_of_printf 011E                       _readADC 198A                       _initLCD 179E  
        __size_of_motorStop_0 001E          __size_of_motorStop_1 001E          __size_of_motorStop_2 001E  
        __size_of_motorStop_3 001E                       _dpowers 1001                 ?_motorStart_0 0001  
               ?_motorStart_1 0001                 ?_motorStart_2 0001                 ?_motorStart_3 0001  
                   _LCD_RIGHT 100C          end_of_initialization 19E6         __end_of_LCD_SIZE_HORZ 100F  
       __end_of_LCD_SIZE_VERT 100E                 __Lmediumconst 0000   __end_of_servoRotate_counter 1830  
                     printf@c 0018                       printf@f 000D                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                ??_motorStart_0 0001  
              ??_motorStart_1 0001                ??_motorStart_2 0001                ??_motorStart_3 0001  
             _servoRotate80_2 18BC               _servoRotate80_3 1876               _servoRotate80_4 1830  
                   _TRISCbits 000F94                     _TRISDbits 000F95                     _B_counter 0027  
               __pidataCOMRAM 1B08                __end_of_printf 16CE                     _N_counter 0025  
         start_initialization 19C2                     _S_counter 0023              __CFG_OSC$INTIO67 000000  
                   _W_counter 0021       __end_of_servoRotate80_2 1902       __end_of_servoRotate80_3 18BC  
     __end_of_servoRotate80_4 1876              __CFG_LPT1OSC$OFF 000000                      ??_printf 0011  
               _analog_result 001D                   __pbssCOMRAM 001B          __end_of_motorStart_0 1AE0  
        __end_of_motorStart_1 1AC2          __end_of_motorStart_2 1AA4          __end_of_motorStart_3 1A86  
            ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000                     _lcdNibble 16CE  
                    ?___lwdiv 0001                      ?___lwmod 0008                      ?_lcdInst 0001  
                    ?_readADC 0001                      ?_initLCD 0001                   __smallconst 1000  
            ___lwdiv@quotient 0005                __size_of_putch 0014                      _LCD_LEFT 100B  
                    _LATCbits 000F8B                      _LATDbits 000F8C              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001              ?_servoRotate80_2 0001              ?_servoRotate80_3 0001  
            ?_servoRotate80_4 0001                 ??_motorStop_0 0001                 ??_motorStop_1 0001  
               ??_motorStop_2 0001                 ??_motorStop_3 0001                    _ADCON0bits 000FC2  
                  _ADCON2bits 000FC0                 lcdNibble@data 0002                      _B_remain 001F  
                  printf@flag 0014                 lcdNibble@temp 0001                    printf@prec 0015  
              _LCD_HORZ_LIMIT 1010        __size_of_servoRotate80 0046                      __Hrparam 0000  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000              __size_of___lwdiv 0052  
            __size_of___lwmod 0042                readADC@channel 0005  __size_of_servoRotate_counter 0046  
            __size_of_lcdInst 0014              __size_of_readADC 0038              __size_of_initLCD 004C  
      __end_of_LCD_HORZ_LIMIT 1011           __end_of_motorStop_0 1A68           __end_of_motorStop_1 1A4A  
         __end_of_motorStop_2 1A2C           __end_of_motorStop_3 1A0E               ___lwdiv@divisor 0003  
             ___lwdiv@counter 0007                      __ptext10 174C                      __ptext11 19F0  
                    __ptext20 1AF4                      __ptext12 1A0E                      __ptext21 16CE  
                    __ptext13 1A2C                      __ptext14 1A4A                      __ptext15 1A68  
                    __ptext16 1A86                      __ptext17 1AA4                      __ptext18 1AC2  
                    __ptext19 179E                _LCD_VERT_LIMIT 100F         __size_of_motorStart_0 001E  
       __size_of_motorStart_1 001E         __size_of_motorStart_2 001E         __size_of_motorStart_3 001E  
               __size_of_main 053C                   ??_lcdNibble 0001                 _servoRotate80 1902  
                   printf@val 0016                     putch@data 0003                    _INTCONbits 000FF2  
                _motorStart_0 1AC2                  _motorStart_1 1AA4                  _motorStart_2 1A86  
                _motorStart_3 1A68        __end_of_LCD_VERT_LIMIT 1010                 _LCD_SIZE_HORZ 100E  
            ___lwmod@dividend 0008                 _LCD_SIZE_VERT 100D                ?_servoRotate80 0001  
                    printf@ap 0012                   lcdInst@data 0003                   _motorStop_0 1A4A  
                 _motorStop_1 1A2C                   _motorStop_2 1A0E                   _motorStop_3 19F0  
             ___lwmod@divisor 000A               ___lwmod@counter 000C  
