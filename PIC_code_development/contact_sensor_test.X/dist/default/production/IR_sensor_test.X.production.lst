

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 21 11:47:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	smallconst
    59  001000                     __psmallconst:
    60                           	opt stack 0
    61  001000  00                 	db	0
    62  001001                     _keys:
    63                           	opt stack 0
    64  001001  31                 	db	49
    65  001002  32                 	db	50
    66  001003  33                 	db	51
    67  001004  41                 	db	65
    68  001005  34                 	db	52
    69  001006  35                 	db	53
    70  001007  36                 	db	54
    71  001008  42                 	db	66
    72  001009  37                 	db	55
    73  00100A  38                 	db	56
    74  00100B  39                 	db	57
    75  00100C  43                 	db	67
    76  00100D  2A                 	db	42
    77  00100E  30                 	db	48
    78  00100F  23                 	db	35
    79  001010  44                 	db	68
    80  001011  00                 	db	0
    81  001012                     __end_of_keys:
    82                           	opt stack 0
    83  001012                     _array:
    84                           	opt stack 0
    85  001012  31                 	db	49
    86  001013  30                 	db	48
    87  001014  00                 	db	0
    88  001015                     __end_of_array:
    89                           	opt stack 0
    90  001015                     _LCD_LEFT:
    91                           	opt stack 0
    92  001015  00                 	db	0
    93  001016                     __end_of_LCD_LEFT:
    94                           	opt stack 0
    95  001016                     _LCD_RIGHT:
    96                           	opt stack 0
    97  001016  01                 	db	1
    98  001017                     __end_of_LCD_RIGHT:
    99                           	opt stack 0
   100  001017                     _LCD_SIZE_VERT:
   101                           	opt stack 0
   102  001017  02                 	db	2
   103  001018                     __end_of_LCD_SIZE_VERT:
   104                           	opt stack 0
   105  001018                     _LCD_SIZE_HORZ:
   106                           	opt stack 0
   107  001018  10                 	db	16
   108  001019                     __end_of_LCD_SIZE_HORZ:
   109                           	opt stack 0
   110  001019                     _LCD_VERT_LIMIT:
   111                           	opt stack 0
   112  001019  02                 	db	2
   113  00101A                     __end_of_LCD_VERT_LIMIT:
   114                           	opt stack 0
   115  00101A                     _LCD_HORZ_LIMIT:
   116                           	opt stack 0
   117  00101A  28                 	db	40
   118  00101B                     __end_of_LCD_HORZ_LIMIT:
   119                           	opt stack 0
   120  0000                     _LATDbits	set	3980
   121  0000                     _PORTB	set	3969
   122  0000                     _PORTAbits	set	3968
   123  0000                     _TRISAbits	set	3986
   124  0000                     _INTCONbits	set	4082
   125  0000                     _ADCON1	set	4033
   126  0000                     _ADCON0	set	4034
   127  0000                     _TRISE	set	3990
   128  0000                     _TRISD	set	3989
   129  0000                     _TRISC	set	3988
   130  0000                     _TRISB	set	3987
   131  0000                     _TRISA	set	3986
   132  0000                     _LATE	set	3981
   133  0000                     _LATD	set	3980
   134  0000                     _LATC	set	3979
   135  0000                     _LATB	set	3978
   136  0000                     _LATA	set	3977
   137  0000                     _INT1IF	set	32640
   138  0000                     _INT1IE	set	32643
   139                           
   140                           ; #config settings
   141  00101B  00                 	db	0	; dummy byte at the end
   142  0000                     
   143                           	psect	cinit
   144  0012C2                     __pcinit:
   145                           	opt stack 0
   146  0012C2                     start_initialization:
   147                           	opt stack 0
   148  0012C2                     __initialization:
   149                           	opt stack 0
   150                           
   151                           ; Clear objects allocated to COMRAM (2 bytes)
   152  0012C2  6A20               	clrf	(__pbssCOMRAM+1)& (0+255),c
   153  0012C4  6A1F               	clrf	__pbssCOMRAM& (0+255),c
   154  0012C6                     end_of_initialization:
   155                           	opt stack 0
   156  0012C6                     __end_of__initialization:
   157                           	opt stack 0
   158  0012C6  9021               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   159  0012C8  9221               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   160  0012CA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   161  0012CC  6EF8               	movwf	tblptru,c
   162  0012CE  0E10               	movlw	high __Lsmallconst
   163  0012D0  6EF7               	movwf	tblptrh,c
   164  0012D2  0100               	movlb	0
   165  0012D4  EF7A  F008         	goto	_main	;jump to C main() function
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           
   169                           	psect	bssCOMRAM
   170  00001F                     __pbssCOMRAM:
   171                           	opt stack 0
   172  00001F                     lcd@LCDinterruptState:
   173                           	opt stack 0
   174  00001F                     	ds	1
   175  000020                     	ds	1
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           
   179                           	psect	cstackCOMRAM
   180  000001                     __pcstackCOMRAM:
   181                           	opt stack 0
   182  000001                     i2lcdNibble@temp:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x0
   186  000001                     	ds	1
   187  000002                     i2lcdNibble@data:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x1
   191  000002                     	ds	1
   192  000003                     i2lcdInst@data:
   193                           	opt stack 0
   194  000003                     i2putch@data:
   195                           	opt stack 0
   196                           
   197                           ; 1 bytes @ 0x2
   198  000003                     	ds	1
   199  000004                     ??_interruptHandler:
   200                           
   201                           ; 1 bytes @ 0x3
   202  000004                     	ds	19
   203  000017                     interruptHandler@keypress:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x16
   207  000017                     	ds	1
   208  000018                     lcdNibble@temp:
   209                           	opt stack 0
   210                           
   211                           ; 1 bytes @ 0x17
   212  000018                     	ds	1
   213  000019                     lcdNibble@data:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0x18
   217  000019                     	ds	1
   218  00001A                     lcdInst@data:
   219                           	opt stack 0
   220  00001A                     putch@data:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x19
   224  00001A                     	ds	1
   225  00001B                     ??_initLCD:
   226                           
   227                           ; 1 bytes @ 0x1A
   228  00001B                     	ds	1
   229  00001C                     ??_main:
   230                           
   231                           ; 1 bytes @ 0x1B
   232  00001C                     	ds	2
   233  00001E                     main@input:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x1D
   237  00001E                     	ds	1
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           
   241 ;;
   242 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   243 ;;
   244 ;; *************** function _main *****************
   245 ;; Defined at:
   246 ;;		line 11 in file "main.c"
   247 ;; Parameters:    Size  Location     Type
   248 ;;		None
   249 ;; Auto vars:     Size  Location     Type
   250 ;;  input           1   29[COMRAM] unsigned char 
   251 ;; Return value:  Size  Location     Type
   252 ;;                  1    wreg      void 
   253 ;; Registers used:
   254 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   255 ;; Tracked objects:
   256 ;;		On entry : 0/0
   257 ;;		On exit  : 0/0
   258 ;;		Unchanged: 0/0
   259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   263 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   264 ;;Total ram usage:        3 bytes
   265 ;; Hardware stack levels required when called:    6
   266 ;; This function calls:
   267 ;;		_initLCD
   268 ;;		_lcdInst
   269 ;;		_putch
   270 ;; This function is called by:
   271 ;;		Startup code after reset
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275                           	psect	text0
   276  0010F4                     __ptext0:
   277                           	opt stack 0
   278  0010F4                     _main:
   279                           	opt stack 25
   280                           
   281                           ;main.c: 17: LATA = 0x00;
   282                           
   283                           ;incstack = 0
   284  0010F4  0E00               	movlw	0
   285  0010F6  6E89               	movwf	3977,c	;volatile
   286                           
   287                           ;main.c: 18: LATB = 0x00;
   288  0010F8  0E00               	movlw	0
   289  0010FA  6E8A               	movwf	3978,c	;volatile
   290                           
   291                           ;main.c: 19: LATC = 0x00;
   292  0010FC  0E00               	movlw	0
   293  0010FE  6E8B               	movwf	3979,c	;volatile
   294                           
   295                           ;main.c: 20: LATD = 0x00;
   296  001100  0E00               	movlw	0
   297  001102  6E8C               	movwf	3980,c	;volatile
   298                           
   299                           ;main.c: 21: LATE = 0x00;
   300  001104  0E00               	movlw	0
   301  001106  6E8D               	movwf	3981,c	;volatile
   302                           
   303                           ;main.c: 25: TRISA = 0xFF;
   304  001108  6892               	setf	3986,c	;volatile
   305                           
   306                           ;main.c: 26: TRISB = 0xFF;
   307  00110A  6893               	setf	3987,c	;volatile
   308                           
   309                           ;main.c: 27: TRISC = 0x00;
   310  00110C  0E00               	movlw	0
   311  00110E  6E94               	movwf	3988,c	;volatile
   312                           
   313                           ;main.c: 28: TRISD = 0x00;
   314  001110  0E00               	movlw	0
   315  001112  6E95               	movwf	3989,c	;volatile
   316                           
   317                           ;main.c: 29: TRISE = 0x00;
   318  001114  0E00               	movlw	0
   319  001116  6E96               	movwf	3990,c	;volatile
   320                           
   321                           ;main.c: 32: ADCON0 = 0x00;
   322  001118  0E00               	movlw	0
   323  00111A  6EC2               	movwf	4034,c	;volatile
   324                           
   325                           ;main.c: 33: ADCON1 = 0b00001111;
   326  00111C  0E0F               	movlw	15
   327  00111E  6EC1               	movwf	4033,c	;volatile
   328                           
   329                           ;main.c: 36: INT1IE = 1;
   330  001120  86F0               	bsf	intcon3,3,c	;volatile
   331                           
   332                           ;main.c: 37: (INTCONbits.GIE = 1);
   333  001122  8EF2               	bsf	intcon,7,c	;volatile
   334                           
   335                           ;main.c: 40: initLCD();
   336  001124  EC3B  F009         	call	_initLCD	;wreg free
   337  001128                     
   338                           ;main.c: 42: TRISAbits.RA4 = 1;
   339  001128  8892               	bsf	3986,4,c	;volatile
   340                           
   341                           ;main.c: 43: unsigned char input = PORTAbits.RA4;
   342  00112A  0E00               	movlw	0
   343  00112C  B880               	btfsc	3968,4,c	;volatile
   344  00112E  0E01               	movlw	1
   345  001130  6E1E               	movwf	main@input,c
   346                           
   347                           ;main.c: 45: putch(array[input]);
   348  001132  501E               	movf	main@input,w,c
   349  001134  0D01               	mullw	1
   350  001136  0E12               	movlw	low _array
   351  001138  24F3               	addwf	prodl,w,c
   352  00113A  6EF6               	movwf	tblptrl,c
   353  00113C  0E10               	movlw	high _array
   354  00113E  20F4               	addwfc	prodh,w,c
   355  001140  6EF7               	movwf	tblptrh,c
   356  001142                     	if	0	;There are less than 3 active tblptr bytes
   357  001142                     	endif
   358  001142  0008               	tblrd		*
   359  001144  50F5               	movf	tablat,w,c
   360  001146  EC6C  F009         	call	_putch
   361                           
   362                           ;main.c: 46: _delay((unsigned long)((500)*(40000000/4000.0)));
   363  00114A  0E1A               	movlw	26
   364  00114C  6E1D               	movwf	(??_main+1)& (0+255),c
   365  00114E  0E5E               	movlw	94
   366  001150  6E1C               	movwf	??_main& (0+255),c
   367  001152  0E6E               	movlw	110
   368  001154                     u157:
   369  001154  2EE8               	decfsz	wreg,f,c
   370  001156  D7FE               	bra	u157
   371  001158  2E1C               	decfsz	??_main& (0+255),f,c
   372  00115A  D7FC               	bra	u157
   373  00115C  2E1D               	decfsz	(??_main+1)& (0+255),f,c
   374  00115E  D7FA               	bra	u157
   375  001160  D000               	nop2	
   376                           
   377                           ;main.c: 47: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   378  001162  0E80               	movlw	128
   379  001164  EC76  F009         	call	_lcdInst
   380  001168  0E41               	movlw	65
   381  00116A  6E1C               	movwf	??_main& (0+255),c
   382  00116C  0EEE               	movlw	238
   383  00116E                     u167:
   384  00116E  2EE8               	decfsz	wreg,f,c
   385  001170  D7FE               	bra	u167
   386  001172  2E1C               	decfsz	??_main& (0+255),f,c
   387  001174  D7FC               	bra	u167
   388  001176  D000               	nop2	
   389  001178  D7D7               	goto	l67
   390  00117A                     __end_of_main:
   391                           	opt stack 0
   392                           tblptru	equ	0xFF8
   393                           tblptrh	equ	0xFF7
   394                           tblptrl	equ	0xFF6
   395                           tablat	equ	0xFF5
   396                           prodh	equ	0xFF4
   397                           prodl	equ	0xFF3
   398                           intcon	equ	0xFF2
   399                           intcon3	equ	0xFF0
   400                           wreg	equ	0xFE8
   401                           
   402 ;; *************** function _putch *****************
   403 ;; Defined at:
   404 ;;		line 24 in file "lcd.c"
   405 ;; Parameters:    Size  Location     Type
   406 ;;  data            1    wreg     unsigned char 
   407 ;; Auto vars:     Size  Location     Type
   408 ;;  data            1   25[COMRAM] unsigned char 
   409 ;; Return value:  Size  Location     Type
   410 ;;                  1    wreg      void 
   411 ;; Registers used:
   412 ;;		wreg, status,2, status,0, cstack
   413 ;; Tracked objects:
   414 ;;		On entry : 0/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   422 ;;Total ram usage:        1 bytes
   423 ;; Hardware stack levels used:    1
   424 ;; Hardware stack levels required when called:    4
   425 ;; This function calls:
   426 ;;		_lcdNibble
   427 ;; This function is called by:
   428 ;;		_main
   429 ;; This function uses a non-reentrant model
   430 ;;
   431                           
   432                           	psect	text1
   433  0012D8                     __ptext1:
   434                           	opt stack 0
   435  0012D8                     _putch:
   436                           	opt stack 26
   437                           
   438                           ;incstack = 0
   439                           ;putch@data stored from wreg
   440  0012D8  6E1A               	movwf	putch@data,c
   441                           
   442                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   443  0012DA  848C               	bsf	3980,2,c	;volatile
   444                           
   445                           ;lcd.c: 33: lcdNibble(data);
   446  0012DC  501A               	movf	putch@data,w,c
   447  0012DE  ECBD  F008         	call	_lcdNibble
   448                           
   449                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   450  0012E2  0EC8               	movlw	200
   451  0012E4                     u177:
   452  0012E4  D000               	nop2	
   453  0012E6  2EE8               	decfsz	wreg,f,c
   454  0012E8  D7FD               	bra	u177
   455  0012EA  0012               	return		;funcret
   456  0012EC                     __end_of_putch:
   457                           	opt stack 0
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           prodh	equ	0xFF4
   463                           prodl	equ	0xFF3
   464                           intcon	equ	0xFF2
   465                           intcon3	equ	0xFF0
   466                           wreg	equ	0xFE8
   467                           
   468 ;; *************** function _initLCD *****************
   469 ;; Defined at:
   470 ;;		line 60 in file "lcd.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, status,2, status,0, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   487 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   488 ;;Total ram usage:        1 bytes
   489 ;; Hardware stack levels used:    1
   490 ;; Hardware stack levels required when called:    5
   491 ;; This function calls:
   492 ;;		_lcdInst
   493 ;; This function is called by:
   494 ;;		_main
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text2
   499  001276                     __ptext2:
   500                           	opt stack 0
   501  001276                     _initLCD:
   502                           	opt stack 25
   503                           
   504                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
   505                           
   506                           ;incstack = 0
   507  001276  0EC3               	movlw	195
   508  001278  6E1B               	movwf	??_initLCD& (0+255),c
   509  00127A  0ECD               	movlw	205
   510  00127C                     u187:
   511  00127C  2EE8               	decfsz	wreg,f,c
   512  00127E  D7FE               	bra	u187
   513  001280  2E1B               	decfsz	??_initLCD& (0+255),f,c
   514  001282  D7FC               	bra	u187
   515  001284  F000               	nop	
   516                           
   517                           ;lcd.c: 69: lcdInst(0b00110011);
   518  001286  0E33               	movlw	51
   519  001288  EC76  F009         	call	_lcdInst
   520                           
   521                           ;lcd.c: 70: lcdInst(0b00110010);
   522  00128C  0E32               	movlw	50
   523  00128E  EC76  F009         	call	_lcdInst
   524                           
   525                           ;lcd.c: 71: lcdInst(0b00101000);
   526  001292  0E28               	movlw	40
   527  001294  EC76  F009         	call	_lcdInst
   528                           
   529                           ;lcd.c: 72: lcdInst(0b00001111);
   530  001298  0E0F               	movlw	15
   531  00129A  EC76  F009         	call	_lcdInst
   532                           
   533                           ;lcd.c: 73: lcdInst(0b00000110);
   534  00129E  0E06               	movlw	6
   535  0012A0  EC76  F009         	call	_lcdInst
   536                           
   537                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
   538  0012A4  0E01               	movlw	1
   539  0012A6  EC76  F009         	call	_lcdInst
   540  0012AA  0EC3               	movlw	195
   541  0012AC  6E1B               	movwf	??_initLCD& (0+255),c
   542  0012AE  0ECD               	movlw	205
   543  0012B0                     u197:
   544  0012B0  2EE8               	decfsz	wreg,f,c
   545  0012B2  D7FE               	bra	u197
   546  0012B4  2E1B               	decfsz	??_initLCD& (0+255),f,c
   547  0012B6  D7FC               	bra	u197
   548  0012B8  F000               	nop	
   549                           
   550                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
   551  0012BA  0E0F               	movlw	15
   552  0012BC  EC76  F009         	call	_lcdInst
   553  0012C0  0012               	return		;funcret
   554  0012C2                     __end_of_initLCD:
   555                           	opt stack 0
   556                           tblptru	equ	0xFF8
   557                           tblptrh	equ	0xFF7
   558                           tblptrl	equ	0xFF6
   559                           tablat	equ	0xFF5
   560                           prodh	equ	0xFF4
   561                           prodl	equ	0xFF3
   562                           intcon	equ	0xFF2
   563                           intcon3	equ	0xFF0
   564                           wreg	equ	0xFE8
   565                           
   566 ;; *************** function _lcdInst *****************
   567 ;; Defined at:
   568 ;;		line 11 in file "lcd.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;  data            1    wreg     unsigned char 
   571 ;; Auto vars:     Size  Location     Type
   572 ;;  data            1   25[COMRAM] unsigned char 
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      void 
   575 ;; Registers used:
   576 ;;		wreg, status,2, status,0, cstack
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   586 ;;Total ram usage:        1 bytes
   587 ;; Hardware stack levels used:    1
   588 ;; Hardware stack levels required when called:    4
   589 ;; This function calls:
   590 ;;		_lcdNibble
   591 ;; This function is called by:
   592 ;;		_main
   593 ;;		_initLCD
   594 ;;		_lcd_set_cursor
   595 ;;		_lcd_shift_cursor
   596 ;;		_lcd_shift_display
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           	psect	text3
   601  0012EC                     __ptext3:
   602                           	opt stack 0
   603  0012EC                     _lcdInst:
   604                           	opt stack 26
   605                           
   606                           ;incstack = 0
   607                           ;lcdInst@data stored from wreg
   608  0012EC  6E1A               	movwf	lcdInst@data,c
   609                           
   610                           ;lcd.c: 19: LATDbits.LATD2 = 0;
   611  0012EE  948C               	bcf	3980,2,c	;volatile
   612                           
   613                           ;lcd.c: 20: lcdNibble(data);
   614  0012F0  501A               	movf	lcdInst@data,w,c
   615  0012F2  ECBD  F008         	call	_lcdNibble
   616                           
   617                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
   618  0012F6  0EC8               	movlw	200
   619  0012F8                     u207:
   620  0012F8  D000               	nop2	
   621  0012FA  2EE8               	decfsz	wreg,f,c
   622  0012FC  D7FD               	bra	u207
   623  0012FE  0012               	return		;funcret
   624  001300                     __end_of_lcdInst:
   625                           	opt stack 0
   626                           tblptru	equ	0xFF8
   627                           tblptrh	equ	0xFF7
   628                           tblptrl	equ	0xFF6
   629                           tablat	equ	0xFF5
   630                           prodh	equ	0xFF4
   631                           prodl	equ	0xFF3
   632                           intcon	equ	0xFF2
   633                           intcon3	equ	0xFF0
   634                           wreg	equ	0xFE8
   635                           
   636 ;; *************** function _lcdNibble *****************
   637 ;; Defined at:
   638 ;;		line 37 in file "lcd.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;  data            1    wreg     unsigned char 
   641 ;; Auto vars:     Size  Location     Type
   642 ;;  data            1   24[COMRAM] unsigned char 
   643 ;;  temp            1   23[COMRAM] unsigned char 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  1    wreg      void 
   646 ;; Registers used:
   647 ;;		wreg, status,2, status,0
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   656 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   657 ;;Total ram usage:        2 bytes
   658 ;; Hardware stack levels used:    1
   659 ;; Hardware stack levels required when called:    3
   660 ;; This function calls:
   661 ;;		Nothing
   662 ;; This function is called by:
   663 ;;		_lcdInst
   664 ;;		_putch
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text4
   669  00117A                     __ptext4:
   670                           	opt stack 0
   671  00117A                     _lcdNibble:
   672                           	opt stack 26
   673                           
   674                           ;incstack = 0
   675                           ;lcdNibble@data stored from wreg
   676  00117A  6E19               	movwf	lcdNibble@data,c
   677                           
   678                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
   679  00117C  5019               	movf	lcdNibble@data,w,c
   680  00117E  0BF0               	andlw	240
   681  001180  6E18               	movwf	lcdNibble@temp,c
   682                           
   683                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
   684  001182  508C               	movf	3980,w,c	;volatile
   685  001184  0B0F               	andlw	15
   686  001186  6E8C               	movwf	3980,c	;volatile
   687                           
   688                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
   689  001188  5018               	movf	lcdNibble@temp,w,c
   690  00118A  108C               	iorwf	3980,w,c	;volatile
   691  00118C  6E8C               	movwf	3980,c	;volatile
   692                           
   693                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   694  00118E  0E00               	movlw	0
   695  001190  BEF2               	btfsc	intcon,7,c	;volatile
   696  001192  0E01               	movlw	1
   697  001194  6E1F               	movwf	lcd@LCDinterruptState,c
   698  001196  9EF2               	bcf	intcon,7,c	;volatile
   699  001198  868C               	bsf	3980,3,c	;volatile
   700  00119A  0E53               	movlw	83
   701  00119C                     u217:
   702  00119C  2EE8               	decfsz	wreg,f,c
   703  00119E  D7FE               	bra	u217
   704  0011A0  F000               	nop	
   705  0011A2  968C               	bcf	3980,3,c	;volatile
   706  0011A4  0EC8               	movlw	200
   707  0011A6                     u227:
   708  0011A6  D000               	nop2	
   709  0011A8  2EE8               	decfsz	wreg,f,c
   710  0011AA  D7FD               	bra	u227
   711  0011AC  B01F               	btfsc	lcd@LCDinterruptState,0,c
   712  0011AE  D002               	bra	u15
   713  0011B0  9EF2               	bcf	intcon,7,c	;volatile
   714  0011B2  D001               	bra	u16
   715  0011B4                     u15:
   716  0011B4  8EF2               	bsf	intcon,7,c	;volatile
   717  0011B6                     u16:
   718                           
   719                           ;lcd.c: 52: data = (unsigned char) (data << 4);
   720  0011B6  3819               	swapf	lcdNibble@data,w,c
   721  0011B8  0BF0               	andlw	240
   722  0011BA  6E19               	movwf	lcdNibble@data,c
   723                           
   724                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
   725  0011BC  5019               	movf	lcdNibble@data,w,c
   726  0011BE  0BF0               	andlw	240
   727  0011C0  6E18               	movwf	lcdNibble@temp,c
   728                           
   729                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
   730  0011C2  508C               	movf	3980,w,c	;volatile
   731  0011C4  0B0F               	andlw	15
   732  0011C6  6E8C               	movwf	3980,c	;volatile
   733                           
   734                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
   735  0011C8  5018               	movf	lcdNibble@temp,w,c
   736  0011CA  108C               	iorwf	3980,w,c	;volatile
   737  0011CC  6E8C               	movwf	3980,c	;volatile
   738                           
   739                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   740  0011CE  0E00               	movlw	0
   741  0011D0  BEF2               	btfsc	intcon,7,c	;volatile
   742  0011D2  0E01               	movlw	1
   743  0011D4  6E1F               	movwf	lcd@LCDinterruptState,c
   744  0011D6  9EF2               	bcf	intcon,7,c	;volatile
   745  0011D8  868C               	bsf	3980,3,c	;volatile
   746  0011DA  0E53               	movlw	83
   747  0011DC                     u237:
   748  0011DC  2EE8               	decfsz	wreg,f,c
   749  0011DE  D7FE               	bra	u237
   750  0011E0  F000               	nop	
   751  0011E2  968C               	bcf	3980,3,c	;volatile
   752  0011E4  0EC8               	movlw	200
   753  0011E6                     u247:
   754  0011E6  D000               	nop2	
   755  0011E8  2EE8               	decfsz	wreg,f,c
   756  0011EA  D7FD               	bra	u247
   757  0011EC  B01F               	btfsc	lcd@LCDinterruptState,0,c
   758  0011EE  D002               	bra	u25
   759  0011F0  9EF2               	bcf	intcon,7,c	;volatile
   760  0011F2  D001               	bra	u26
   761  0011F4                     u25:
   762  0011F4  8EF2               	bsf	intcon,7,c	;volatile
   763  0011F6                     u26:
   764  0011F6  0012               	return		;funcret
   765  0011F8                     __end_of_lcdNibble:
   766                           	opt stack 0
   767                           tblptru	equ	0xFF8
   768                           tblptrh	equ	0xFF7
   769                           tblptrl	equ	0xFF6
   770                           tablat	equ	0xFF5
   771                           prodh	equ	0xFF4
   772                           prodl	equ	0xFF3
   773                           intcon	equ	0xFF2
   774                           intcon3	equ	0xFF0
   775                           wreg	equ	0xFE8
   776                           
   777 ;; *************** function _interruptHandler *****************
   778 ;; Defined at:
   779 ;;		line 53 in file "main.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;  keypress        1   22[COMRAM] unsigned char 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   795 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   796 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;Total ram usage:       20 bytes
   798 ;; Hardware stack levels used:    1
   799 ;; Hardware stack levels required when called:    2
   800 ;; This function calls:
   801 ;;		i2_lcdInst
   802 ;;		i2_putch
   803 ;; This function is called by:
   804 ;;		Interrupt level 2
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808                           	psect	intcode
   809  000008                     __pintcode:
   810                           	opt stack 0
   811  000008                     _interruptHandler:
   812                           	opt stack 25
   813                           
   814                           ;incstack = 0
   815  000008  8221               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   816  00000A  ED0E  F008         	call	int_func,f	;refresh shadow registers
   817                           tblptru	equ	0xFF8
   818                           tblptrh	equ	0xFF7
   819                           tblptrl	equ	0xFF6
   820                           tablat	equ	0xFF5
   821                           prodh	equ	0xFF4
   822                           prodl	equ	0xFF3
   823                           intcon	equ	0xFF2
   824                           intcon3	equ	0xFF0
   825                           wreg	equ	0xFE8
   826                           
   827                           	psect	intcode_body
   828  00101C                     __pintcode_body:
   829                           	opt stack 25
   830  00101C                     int_func:
   831                           	opt stack 25
   832  00101C  0006               	pop		; remove dummy address from shadow register refresh
   833  00101E  CFFA F005          	movff	pclath,??_interruptHandler+1
   834  001022  CFFB F006          	movff	pclatu,??_interruptHandler+2
   835  001026  CFE9 F007          	movff	fsr0l,??_interruptHandler+3
   836  00102A  CFEA F008          	movff	fsr0h,??_interruptHandler+4
   837  00102E  CFE1 F009          	movff	fsr1l,??_interruptHandler+5
   838  001032  CFE2 F00A          	movff	fsr1h,??_interruptHandler+6
   839  001036  CFD9 F00B          	movff	fsr2l,??_interruptHandler+7
   840  00103A  CFDA F00C          	movff	fsr2h,??_interruptHandler+8
   841  00103E  CFF3 F00D          	movff	prodl,??_interruptHandler+9
   842  001042  CFF4 F00E          	movff	prodh,??_interruptHandler+10
   843  001046  CFF6 F00F          	movff	tblptrl,??_interruptHandler+11
   844  00104A  CFF7 F010          	movff	tblptrh,??_interruptHandler+12
   845  00104E  CFF8 F011          	movff	tblptru,??_interruptHandler+13
   846  001052  CFF5 F012          	movff	tablat,??_interruptHandler+14
   847  001056  C021  F013         	movff	btemp,??_interruptHandler+15
   848  00105A  C022  F014         	movff	btemp+1,??_interruptHandler+16
   849  00105E  C023  F015         	movff	btemp+2,??_interruptHandler+17
   850  001062  C024  F016         	movff	btemp+3,??_interruptHandler+18
   851                           
   852                           ;main.c: 64: if(INT1IF){
   853  001066  A0F0               	btfss	intcon3,0,c	;volatile
   854  001068  D01F               	goto	i2l75
   855                           
   856                           ;main.c: 68: lcdInst(0xC0);;
   857  00106A  0EC0               	movlw	192
   858  00106C  EC8A  F009         	call	i2_lcdInst
   859                           
   860                           ;main.c: 69: unsigned char keypress = (PORTB & 0xF0) >> 4;
   861  001070  3881               	swapf	3969,w,c	;volatile
   862  001072  0B0F               	andlw	15
   863  001074  0B0F               	andlw	15
   864  001076  6E17               	movwf	interruptHandler@keypress,c
   865                           
   866                           ;main.c: 70: putch(keys[keypress]);
   867  001078  5017               	movf	interruptHandler@keypress,w,c
   868  00107A  0D01               	mullw	1
   869  00107C  0E01               	movlw	low _keys
   870  00107E  24F3               	addwf	prodl,w,c
   871  001080  6EF6               	movwf	tblptrl,c
   872  001082  0E10               	movlw	high _keys
   873  001084  20F4               	addwfc	prodh,w,c
   874  001086  6EF7               	movwf	tblptrh,c
   875  001088                     	if	0	;There are less than 3 active tblptr bytes
   876  001088                     	endif
   877  001088  0008               	tblrd		*
   878  00108A  50F5               	movf	tablat,w,c
   879  00108C  EC80  F009         	call	i2_putch
   880                           
   881                           ;main.c: 71: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   882  001090  0E80               	movlw	128
   883  001092  EC8A  F009         	call	i2_lcdInst
   884  001096  0E41               	movlw	65
   885  001098  6E04               	movwf	??_interruptHandler& (0+255),c
   886  00109A  0EEE               	movlw	238
   887  00109C                     i2u25_47:
   888  00109C  2EE8               	decfsz	wreg,f,c
   889  00109E  D7FE               	bra	i2u25_47
   890  0010A0  2E04               	decfsz	??_interruptHandler& (0+255),f,c
   891  0010A2  D7FC               	bra	i2u25_47
   892  0010A4  D000               	nop2	
   893                           
   894                           ;main.c: 73: INT1IF = 0;
   895  0010A6  90F0               	bcf	intcon3,0,c	;volatile
   896  0010A8                     i2l75:
   897  0010A8  C016  F024         	movff	??_interruptHandler+18,btemp+3
   898  0010AC  C015  F023         	movff	??_interruptHandler+17,btemp+2
   899  0010B0  C014  F022         	movff	??_interruptHandler+16,btemp+1
   900  0010B4  C013  F021         	movff	??_interruptHandler+15,btemp
   901  0010B8  C012  FFF5         	movff	??_interruptHandler+14,tablat
   902  0010BC  C011  FFF8         	movff	??_interruptHandler+13,tblptru
   903  0010C0  C010  FFF7         	movff	??_interruptHandler+12,tblptrh
   904  0010C4  C00F  FFF6         	movff	??_interruptHandler+11,tblptrl
   905  0010C8  C00E  FFF4         	movff	??_interruptHandler+10,prodh
   906  0010CC  C00D  FFF3         	movff	??_interruptHandler+9,prodl
   907  0010D0  C00C  FFDA         	movff	??_interruptHandler+8,fsr2h
   908  0010D4  C00B  FFD9         	movff	??_interruptHandler+7,fsr2l
   909  0010D8  C00A  FFE2         	movff	??_interruptHandler+6,fsr1h
   910  0010DC  C009  FFE1         	movff	??_interruptHandler+5,fsr1l
   911  0010E0  C008  FFEA         	movff	??_interruptHandler+4,fsr0h
   912  0010E4  C007  FFE9         	movff	??_interruptHandler+3,fsr0l
   913  0010E8  C006  FFFB         	movff	??_interruptHandler+2,pclatu
   914  0010EC  C005  FFFA         	movff	??_interruptHandler+1,pclath
   915  0010F0  9221               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   916  0010F2  0011               	retfie		f
   917  0010F4                     __end_of_interruptHandler:
   918                           	opt stack 0
   919                           pclatu	equ	0xFFB
   920                           pclath	equ	0xFFA
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           prodh	equ	0xFF4
   926                           prodl	equ	0xFF3
   927                           intcon	equ	0xFF2
   928                           intcon3	equ	0xFF0
   929                           fsr0h	equ	0xFEA
   930                           fsr0l	equ	0xFE9
   931                           wreg	equ	0xFE8
   932                           fsr1h	equ	0xFE2
   933                           fsr1l	equ	0xFE1
   934                           fsr2h	equ	0xFDA
   935                           fsr2l	equ	0xFD9
   936                           
   937 ;; *************** function i2_putch *****************
   938 ;; Defined at:
   939 ;;		line 24 in file "lcd.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  data            1    wreg     unsigned char 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  data            1    2[COMRAM] unsigned char 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, status,2, status,0, cstack
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;Total ram usage:        1 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; Hardware stack levels required when called:    1
   960 ;; This function calls:
   961 ;;		i2_lcdNibble
   962 ;; This function is called by:
   963 ;;		_interruptHandler
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text6
   968  001300                     __ptext6:
   969                           	opt stack 0
   970  001300                     i2_putch:
   971                           	opt stack 25
   972                           
   973                           ;incstack = 0
   974                           ;i2putch@data stored from wreg
   975  001300  6E03               	movwf	i2putch@data,c
   976                           
   977                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   978  001302  848C               	bsf	3980,2,c	;volatile
   979                           
   980                           ;lcd.c: 33: lcdNibble(data);
   981  001304  5003               	movf	i2putch@data,w,c
   982  001306  ECFC  F008         	call	i2_lcdNibble
   983                           
   984                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   985  00130A  0EC8               	movlw	200
   986  00130C                     i2u26_47:
   987  00130C  D000               	nop2	
   988  00130E  2EE8               	decfsz	wreg,f,c
   989  001310  D7FD               	bra	i2u26_47
   990  001312  0012               	return		;funcret
   991  001314                     __end_ofi2_putch:
   992                           	opt stack 0
   993                           pclatu	equ	0xFFB
   994                           pclath	equ	0xFFA
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           prodh	equ	0xFF4
  1000                           prodl	equ	0xFF3
  1001                           intcon	equ	0xFF2
  1002                           intcon3	equ	0xFF0
  1003                           fsr0h	equ	0xFEA
  1004                           fsr0l	equ	0xFE9
  1005                           wreg	equ	0xFE8
  1006                           fsr1h	equ	0xFE2
  1007                           fsr1l	equ	0xFE1
  1008                           fsr2h	equ	0xFDA
  1009                           fsr2l	equ	0xFD9
  1010                           
  1011 ;; *************** function i2_lcdInst *****************
  1012 ;; Defined at:
  1013 ;;		line 11 in file "lcd.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  data            1    wreg     unsigned char 
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  data            1    2[COMRAM] unsigned char 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  1    wreg      void 
  1020 ;; Registers used:
  1021 ;;		wreg, status,2, status,0, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1031 ;;Total ram usage:        1 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; Hardware stack levels required when called:    1
  1034 ;; This function calls:
  1035 ;;		i2_lcdNibble
  1036 ;; This function is called by:
  1037 ;;		_interruptHandler
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           	psect	text7
  1042  001314                     __ptext7:
  1043                           	opt stack 0
  1044  001314                     i2_lcdInst:
  1045                           	opt stack 25
  1046                           
  1047                           ;incstack = 0
  1048                           ;i2lcdInst@data stored from wreg
  1049  001314  6E03               	movwf	i2lcdInst@data,c
  1050                           
  1051                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1052  001316  948C               	bcf	3980,2,c	;volatile
  1053                           
  1054                           ;lcd.c: 20: lcdNibble(data);
  1055  001318  5003               	movf	i2lcdInst@data,w,c
  1056  00131A  ECFC  F008         	call	i2_lcdNibble
  1057                           
  1058                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1059  00131E  0EC8               	movlw	200
  1060  001320                     i2u27_47:
  1061  001320  D000               	nop2	
  1062  001322  2EE8               	decfsz	wreg,f,c
  1063  001324  D7FD               	bra	i2u27_47
  1064  001326  0012               	return		;funcret
  1065  001328                     __end_ofi2_lcdInst:
  1066                           	opt stack 0
  1067                           pclatu	equ	0xFFB
  1068                           pclath	equ	0xFFA
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           prodh	equ	0xFF4
  1074                           prodl	equ	0xFF3
  1075                           intcon	equ	0xFF2
  1076                           intcon3	equ	0xFF0
  1077                           fsr0h	equ	0xFEA
  1078                           fsr0l	equ	0xFE9
  1079                           wreg	equ	0xFE8
  1080                           fsr1h	equ	0xFE2
  1081                           fsr1l	equ	0xFE1
  1082                           fsr2h	equ	0xFDA
  1083                           fsr2l	equ	0xFD9
  1084                           
  1085 ;; *************** function i2_lcdNibble *****************
  1086 ;; Defined at:
  1087 ;;		line 37 in file "lcd.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  data            1    wreg     unsigned char 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  data            1    1[COMRAM] unsigned char 
  1092 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  1    wreg      void 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1103 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1105 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1106 ;;Total ram usage:        2 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		i2_lcdInst
  1112 ;;		i2_putch
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text8
  1117  0011F8                     __ptext8:
  1118                           	opt stack 0
  1119  0011F8                     i2_lcdNibble:
  1120                           	opt stack 25
  1121                           
  1122                           ;incstack = 0
  1123                           ;i2lcdNibble@data stored from wreg
  1124  0011F8  6E02               	movwf	i2lcdNibble@data,c
  1125                           
  1126                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1127  0011FA  5002               	movf	i2lcdNibble@data,w,c
  1128  0011FC  0BF0               	andlw	240
  1129  0011FE  6E01               	movwf	i2lcdNibble@temp,c
  1130                           
  1131                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1132  001200  508C               	movf	3980,w,c	;volatile
  1133  001202  0B0F               	andlw	15
  1134  001204  6E8C               	movwf	3980,c	;volatile
  1135                           
  1136                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1137  001206  5001               	movf	i2lcdNibble@temp,w,c
  1138  001208  108C               	iorwf	3980,w,c	;volatile
  1139  00120A  6E8C               	movwf	3980,c	;volatile
  1140                           
  1141                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1142  00120C  0E00               	movlw	0
  1143  00120E  BEF2               	btfsc	intcon,7,c	;volatile
  1144  001210  0E01               	movlw	1
  1145  001212  6E1F               	movwf	lcd@LCDinterruptState,c
  1146  001214  9EF2               	bcf	intcon,7,c	;volatile
  1147  001216  868C               	bsf	3980,3,c	;volatile
  1148  001218  0E53               	movlw	83
  1149  00121A                     i2u28_47:
  1150  00121A  2EE8               	decfsz	wreg,f,c
  1151  00121C  D7FE               	bra	i2u28_47
  1152  00121E  F000               	nop	
  1153  001220  968C               	bcf	3980,3,c	;volatile
  1154  001222  0EC8               	movlw	200
  1155  001224                     i2u29_47:
  1156  001224  D000               	nop2	
  1157  001226  2EE8               	decfsz	wreg,f,c
  1158  001228  D7FD               	bra	i2u29_47
  1159  00122A  B01F               	btfsc	lcd@LCDinterruptState,0,c
  1160  00122C  D002               	bra	i2u12_45
  1161  00122E  9EF2               	bcf	intcon,7,c	;volatile
  1162  001230  D001               	bra	i2u12_46
  1163  001232                     i2u12_45:
  1164  001232  8EF2               	bsf	intcon,7,c	;volatile
  1165  001234                     i2u12_46:
  1166                           
  1167                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1168  001234  3802               	swapf	i2lcdNibble@data,w,c
  1169  001236  0BF0               	andlw	240
  1170  001238  6E02               	movwf	i2lcdNibble@data,c
  1171                           
  1172                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1173  00123A  5002               	movf	i2lcdNibble@data,w,c
  1174  00123C  0BF0               	andlw	240
  1175  00123E  6E01               	movwf	i2lcdNibble@temp,c
  1176                           
  1177                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1178  001240  508C               	movf	3980,w,c	;volatile
  1179  001242  0B0F               	andlw	15
  1180  001244  6E8C               	movwf	3980,c	;volatile
  1181                           
  1182                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1183  001246  5001               	movf	i2lcdNibble@temp,w,c
  1184  001248  108C               	iorwf	3980,w,c	;volatile
  1185  00124A  6E8C               	movwf	3980,c	;volatile
  1186                           
  1187                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1188  00124C  0E00               	movlw	0
  1189  00124E  BEF2               	btfsc	intcon,7,c	;volatile
  1190  001250  0E01               	movlw	1
  1191  001252  6E1F               	movwf	lcd@LCDinterruptState,c
  1192  001254  9EF2               	bcf	intcon,7,c	;volatile
  1193  001256  868C               	bsf	3980,3,c	;volatile
  1194  001258  0E53               	movlw	83
  1195  00125A                     i2u30_47:
  1196  00125A  2EE8               	decfsz	wreg,f,c
  1197  00125C  D7FE               	bra	i2u30_47
  1198  00125E  F000               	nop	
  1199  001260  968C               	bcf	3980,3,c	;volatile
  1200  001262  0EC8               	movlw	200
  1201  001264                     i2u31_47:
  1202  001264  D000               	nop2	
  1203  001266  2EE8               	decfsz	wreg,f,c
  1204  001268  D7FD               	bra	i2u31_47
  1205  00126A  B01F               	btfsc	lcd@LCDinterruptState,0,c
  1206  00126C  D002               	bra	i2u13_45
  1207  00126E  9EF2               	bcf	intcon,7,c	;volatile
  1208  001270  D001               	bra	i2u13_46
  1209  001272                     i2u13_45:
  1210  001272  8EF2               	bsf	intcon,7,c	;volatile
  1211  001274                     i2u13_46:
  1212  001274  0012               	return		;funcret
  1213  001276                     __end_ofi2_lcdNibble:
  1214                           	opt stack 0
  1215                           pclatu	equ	0xFFB
  1216                           pclath	equ	0xFFA
  1217                           tblptru	equ	0xFF8
  1218                           tblptrh	equ	0xFF7
  1219                           tblptrl	equ	0xFF6
  1220                           tablat	equ	0xFF5
  1221                           prodh	equ	0xFF4
  1222                           prodl	equ	0xFF3
  1223                           intcon	equ	0xFF2
  1224                           intcon3	equ	0xFF0
  1225                           fsr0h	equ	0xFEA
  1226                           fsr0l	equ	0xFE9
  1227                           wreg	equ	0xFE8
  1228                           fsr1h	equ	0xFE2
  1229                           fsr1l	equ	0xFE1
  1230                           fsr2h	equ	0xFDA
  1231                           fsr2l	equ	0xFD9
  1232                           pclatu	equ	0xFFB
  1233                           pclath	equ	0xFFA
  1234                           tblptru	equ	0xFF8
  1235                           tblptrh	equ	0xFF7
  1236                           tblptrl	equ	0xFF6
  1237                           tablat	equ	0xFF5
  1238                           prodh	equ	0xFF4
  1239                           prodl	equ	0xFF3
  1240                           intcon	equ	0xFF2
  1241                           intcon3	equ	0xFF0
  1242                           fsr0h	equ	0xFEA
  1243                           fsr0l	equ	0xFE9
  1244                           wreg	equ	0xFE8
  1245                           fsr1h	equ	0xFE2
  1246                           fsr1l	equ	0xFE1
  1247                           fsr2h	equ	0xFDA
  1248                           fsr2l	equ	0xFD9
  1249                           
  1250                           	psect	rparam
  1251  0000                     pclatu	equ	0xFFB
  1252                           pclath	equ	0xFFA
  1253                           tblptru	equ	0xFF8
  1254                           tblptrh	equ	0xFF7
  1255                           tblptrl	equ	0xFF6
  1256                           tablat	equ	0xFF5
  1257                           prodh	equ	0xFF4
  1258                           prodl	equ	0xFF3
  1259                           intcon	equ	0xFF2
  1260                           intcon3	equ	0xFF0
  1261                           fsr0h	equ	0xFEA
  1262                           fsr0l	equ	0xFE9
  1263                           wreg	equ	0xFE8
  1264                           fsr1h	equ	0xFE2
  1265                           fsr1l	equ	0xFE1
  1266                           fsr2h	equ	0xFDA
  1267                           fsr2l	equ	0xFD9
  1268                           
  1269                           	psect	temp
  1270  000021                     btemp:
  1271                           	opt stack 0
  1272  000021                     	ds	1
  1273  0000                     int$flags	set	btemp
  1274  0000                     wtemp6	set	btemp+1
  1275                           pclatu	equ	0xFFB
  1276                           pclath	equ	0xFFA
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           prodh	equ	0xFF4
  1282                           prodl	equ	0xFF3
  1283                           intcon	equ	0xFF2
  1284                           intcon3	equ	0xFF0
  1285                           fsr0h	equ	0xFEA
  1286                           fsr0l	equ	0xFE9
  1287                           wreg	equ	0xFE8
  1288                           fsr1h	equ	0xFE2
  1289                           fsr1l	equ	0xFE1
  1290                           fsr2h	equ	0xFDA
  1291                           fsr2l	equ	0xFD9


Data Sizes:
    Strings     0
    Constant    26
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     30      32
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_initLCD
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_lcdInst
    _interruptHandler->i2_putch
    i2_putch->i2_lcdNibble
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     285
                                             27 COMRAM     3     3      0
                            _initLCD
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                             25 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             26 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             25 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    20    20      0     293
                                              3 COMRAM    20    20      0
                          i2_lcdInst
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _putch
     _lcdNibble

 _interruptHandler (ROOT)
   i2_lcdInst
     i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1E      20       1       25.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20      34        0.0%
DATA                 0      0      20       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 21 11:47:04 2018

                       l67 1128                         u15 11B4                         u16 11B6  
                       u25 11F4                         u26 11F6                __CFG_CPD$ON 000000  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000               __CFG_CPB$OFF 000000  
                      u207 12F8                        u217 119C                        u227 11A6  
                      u237 11DC                        u157 1154                        u247 11E6  
                      u167 116E                        u177 12E4                        u187 127C  
                      u197 12B0                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     i2l75 10A8                       _main 10F4   __end_of_interruptHandler 10F4  
                     _keys 1001                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0021                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 1314              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 11F8           __end_of_LCD_LEFT 1016                      ?_main 0001  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 1300  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 12C2  
           __CFG_EBTRB$OFF 000000                      _array 1012                      _putch 12D8  
                    pclath 000FFA                      tablat 000FF5          _LCDinterruptState 0020  
                    wtemp6 0022             __CFG_PBADEN$ON 000000            __initialization 12C2  
       __size_ofi2_lcdInst 0014               __end_of_main 117A               __end_of_keys 1012  
           __CFG_OSC$HSPLL 000000          __end_of_LCD_RIGHT 1017                     ??_main 001C  
            __activetblptr 000001                     _ADCON0 000FC2                     _ADCON1 000FC1  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                  ??i2_putch 0003  
           __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000                  ??_lcdInst 001A  
                ??_initLCD 001B               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8          __end_ofi2_lcdInst 1328  
               __accesstop 0080    __end_of__initialization 12C6              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_array 1015              __end_of_putch 12EC  
       __size_of_lcdNibble 007E                i2putch@data 0003                    ??_putch 001A  
        ?_interruptHandler 0001         ??_interruptHandler 0004               ?i2_lcdNibble 0001  
                  i2u12_45 1232                    i2u12_46 1234                    i2u13_45 1272  
                  i2u13_46 1274                    i2u30_47 125A                    i2u31_47 1264  
                  i2u25_47 109C                    i2u26_47 130C                    i2u27_47 1320  
                  i2u28_47 121A                    i2u29_47 1224       lcd@LCDinterruptState 001F  
                  i2_putch 1300          __end_of_lcdNibble 11F8                    __Hparam 0000  
                  __Lparam 0000               __psmallconst 1000   interruptHandler@keypress 0017  
                  __pcinit 12C2                    __ramtop 1000                    _lcdInst 12EC  
                  __ptext0 10F4                    __ptext1 12D8                    __ptext2 1276  
                  __ptext3 12EC                    __ptext4 117A                    __ptext6 1300  
                  __ptext7 1314                    __ptext8 11F8                    _initLCD 1276  
                _LCD_RIGHT 1016             __pintcode_body 101C       end_of_initialization 12C6  
    __end_of_LCD_SIZE_HORZ 1019      __end_of_LCD_SIZE_VERT 1018                    int_func 101C  
                _PORTAbits 000F80                  _TRISAbits 000F92                  i2_lcdInst 1314  
     __size_ofi2_lcdNibble 007E              i2lcdInst@data 0003        start_initialization 12C2  
               ?i2_lcdInst 0001           __CFG_LPT1OSC$OFF 000000  __size_of_interruptHandler 10EC  
              __pbssCOMRAM 001F                   ?i2_putch 0001          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008                  _lcdNibble 117A                   ?_lcdInst 0001  
                 ?_initLCD 0001                __smallconst 1000             __size_of_putch 0014  
                 _LCD_LEFT 1015                ??i2_lcdInst 0003                   _LATDbits 000F8C  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001              lcdNibble@data 0019  
            lcdNibble@temp 0018                  main@input 001E             _LCD_HORZ_LIMIT 101A  
         __size_ofi2_putch 0014                   __Hrparam 0000                   __Lrparam 0000  
             __Lsmallconst 1000         __CFG_BOREN$SBORDIS 000000           _interruptHandler 0008  
         __size_of_lcdInst 0014           __size_of_initLCD 004C     __end_of_LCD_HORZ_LIMIT 101B  
           _LCD_VERT_LIMIT 1019              __size_of_main 0086              ??i2_lcdNibble 0001  
              ??_lcdNibble 0018                   int$flags 0021                  putch@data 001A  
               _INTCONbits 000FF2     __end_of_LCD_VERT_LIMIT 101A                   intlevel2 0000  
            _LCD_SIZE_HORZ 1018              _LCD_SIZE_VERT 1017                lcdInst@data 001A  
      __end_ofi2_lcdNibble 1276  
