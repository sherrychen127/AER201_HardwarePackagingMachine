

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 26 16:07:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4620 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  001678                     __pidataCOMRAM:
    66                           	opt stack 0
    67                           
    68                           ;initializer for _max
    69  001678  0004               	dw	4
    70                           
    71                           ;initializer for _white_tape
    72  00167A  0001               	dw	1
    73                           
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt stack 0
    77  001000  00                 	db	0
    78  001001                     _keys:
    79                           	opt stack 0
    80  001001  31                 	db	49
    81  001002  32                 	db	50
    82  001003  33                 	db	51
    83  001004  41                 	db	65
    84  001005  34                 	db	52
    85  001006  35                 	db	53
    86  001007  36                 	db	54
    87  001008  42                 	db	66
    88  001009  37                 	db	55
    89  00100A  38                 	db	56
    90  00100B  39                 	db	57
    91  00100C  43                 	db	67
    92  00100D  2A                 	db	42
    93  00100E  30                 	db	48
    94  00100F  23                 	db	35
    95  001010  44                 	db	68
    96  001011  00                 	db	0
    97  001012                     __end_of_keys:
    98                           	opt stack 0
    99  001012                     _dpowers:
   100                           	opt stack 0
   101  001012  0001               	dw	1
   102  001014  000A               	dw	10
   103  001016  0064               	dw	100
   104  001018  03E8               	dw	1000
   105  00101A  2710               	dw	10000
   106  00101C                     __end_of_dpowers:
   107                           	opt stack 0
   108  00101C                     _array:
   109                           	opt stack 0
   110  00101C  31                 	db	49
   111  00101D  30                 	db	48
   112  00101E  00                 	db	0
   113  00101F                     __end_of_array:
   114                           	opt stack 0
   115  00101F                     _LCD_LEFT:
   116                           	opt stack 0
   117  00101F  00                 	db	0
   118  001020                     __end_of_LCD_LEFT:
   119                           	opt stack 0
   120  001020                     _LCD_RIGHT:
   121                           	opt stack 0
   122  001020  01                 	db	1
   123  001021                     __end_of_LCD_RIGHT:
   124                           	opt stack 0
   125  001021                     _LCD_SIZE_VERT:
   126                           	opt stack 0
   127  001021  02                 	db	2
   128  001022                     __end_of_LCD_SIZE_VERT:
   129                           	opt stack 0
   130  001022                     _LCD_SIZE_HORZ:
   131                           	opt stack 0
   132  001022  10                 	db	16
   133  001023                     __end_of_LCD_SIZE_HORZ:
   134                           	opt stack 0
   135  001023                     _LCD_VERT_LIMIT:
   136                           	opt stack 0
   137  001023  02                 	db	2
   138  001024                     __end_of_LCD_VERT_LIMIT:
   139                           	opt stack 0
   140  001024                     _LCD_HORZ_LIMIT:
   141                           	opt stack 0
   142  001024  28                 	db	40
   143  001025                     __end_of_LCD_HORZ_LIMIT:
   144                           	opt stack 0
   145  0000                     _ADRESL	set	4035
   146  0000                     _ADRESH	set	4036
   147  0000                     _ADCON0bits	set	4034
   148  0000                     _PORTB	set	3969
   149  0000                     _TRISDbits	set	3989
   150  0000                     _LATDbits	set	3980
   151  0000                     _PORTAbits	set	3968
   152  0000                     _TRISAbits	set	3986
   153  0000                     _INTCONbits	set	4082
   154  0000                     _ADCON1	set	4033
   155  0000                     _ADCON0	set	4034
   156  0000                     _TRISE	set	3990
   157  0000                     _TRISD	set	3989
   158  0000                     _TRISC	set	3988
   159  0000                     _TRISB	set	3987
   160  0000                     _TRISA	set	3986
   161  0000                     _LATE	set	3981
   162  0000                     _LATD	set	3980
   163  0000                     _LATC	set	3979
   164  0000                     _LATB	set	3978
   165  0000                     _LATA	set	3977
   166  0000                     _ADON	set	32272
   167  0000                     _INT1IF	set	32640
   168  0000                     _INT1IE	set	32643
   169  001025                     STR_1:
   170  001025  79                 	db	121	;'y'
   171  001026  6F                 	db	111	;'o'
   172  001027  75                 	db	117	;'u'
   173  001028  72                 	db	114	;'r'
   174  001029  20                 	db	32
   175  00102A  64                 	db	100	;'d'
   176  00102B  6F                 	db	111	;'o'
   177  00102C  6E                 	db	110	;'n'
   178  00102D  65                 	db	101	;'e'
   179  00102E  00                 	db	0
   180  00102F                     STR_2:
   181  00102F  25                 	db	37
   182  001030  64                 	db	100	;'d'
   183  001031  00                 	db	0
   184  0000                     
   185                           ; #config settings
   186  001032  00                 	db	0	; dummy byte at the end
   187  0000                     
   188                           	psect	cinit
   189  0015BA                     __pcinit:
   190                           	opt stack 0
   191  0015BA                     start_initialization:
   192                           	opt stack 0
   193  0015BA                     __initialization:
   194                           	opt stack 0
   195                           
   196                           ; Initialize objects allocated to COMRAM (4 bytes)
   197                           ; load TBLPTR registers with __pidataCOMRAM
   198  0015BA  0E78               	movlw	low __pidataCOMRAM
   199  0015BC  6EF6               	movwf	tblptrl,c
   200  0015BE  0E16               	movlw	high __pidataCOMRAM
   201  0015C0  6EF7               	movwf	tblptrh,c
   202  0015C2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   203  0015C4  6EF8               	movwf	tblptru,c
   204  0015C6  EE00  F03B         	lfsr	0,__pdataCOMRAM
   205  0015CA  EE10 F004          	lfsr	1,4
   206  0015CE                     copy_data0:
   207  0015CE  0009               	tblrd		*+
   208  0015D0  CFF5 FFEE          	movff	tablat,postinc0
   209  0015D4  50E5               	movf	postdec1,w,c
   210  0015D6  50E1               	movf	fsr1l,w,c
   211  0015D8  E1FA               	bnz	copy_data0
   212                           
   213                           ; Clear objects allocated to COMRAM (8 bytes)
   214  0015DA  EE00  F033         	lfsr	0,__pbssCOMRAM
   215  0015DE  0E08               	movlw	8
   216  0015E0                     clear_0:
   217  0015E0  6AEE               	clrf	postinc0,c
   218  0015E2  06E8               	decf	wreg,f,c
   219  0015E4  E1FD               	bnz	clear_0
   220  0015E6                     end_of_initialization:
   221                           	opt stack 0
   222  0015E6                     __end_of__initialization:
   223                           	opt stack 0
   224  0015E6  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   225  0015E8  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   226  0015EA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   227  0015EC  6EF8               	movwf	tblptru,c
   228  0015EE  0100               	movlb	0
   229  0015F0  EF1A  F008         	goto	_main	;jump to C main() function
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           postdec1	equ	0xFE5
   237                           fsr1l	equ	0xFE1
   238                           
   239                           	psect	bssCOMRAM
   240  000033                     __pbssCOMRAM:
   241                           	opt stack 0
   242  000033                     _counter:
   243                           	opt stack 0
   244  000033                     	ds	2
   245  000035                     _analog_result:
   246                           	opt stack 0
   247  000035                     	ds	2
   248  000037                     _i:
   249                           	opt stack 0
   250  000037                     	ds	2
   251  000039                     lcd@LCDinterruptState:
   252                           	opt stack 0
   253  000039                     	ds	1
   254  00003A                     	ds	1
   255                           tblptru	equ	0xFF8
   256                           tblptrh	equ	0xFF7
   257                           tblptrl	equ	0xFF6
   258                           tablat	equ	0xFF5
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           postdec1	equ	0xFE5
   262                           fsr1l	equ	0xFE1
   263                           
   264                           	psect	dataCOMRAM
   265  00003B                     __pdataCOMRAM:
   266                           	opt stack 0
   267  00003B                     _max:
   268                           	opt stack 0
   269  00003B                     	ds	2
   270  00003D                     _white_tape:
   271                           	opt stack 0
   272  00003D                     	ds	2
   273                           tblptru	equ	0xFF8
   274                           tblptrh	equ	0xFF7
   275                           tblptrl	equ	0xFF6
   276                           tablat	equ	0xFF5
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           postdec1	equ	0xFE5
   280                           fsr1l	equ	0xFE1
   281                           
   282                           	psect	cstackCOMRAM
   283  000001                     __pcstackCOMRAM:
   284                           	opt stack 0
   285  000001                     i2lcdNibble@temp:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x0
   289  000001                     	ds	1
   290  000002                     i2lcdNibble@data:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x1
   294  000002                     	ds	1
   295  000003                     i2lcdInst@data:
   296                           	opt stack 0
   297  000003                     i2putch@data:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x2
   301  000003                     	ds	1
   302  000004                     ??_interruptHandler:
   303                           
   304                           ; 1 bytes @ 0x3
   305  000004                     	ds	19
   306  000017                     interruptHandler@keypress:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x16
   310  000017                     	ds	1
   311  000018                     ?_readADC:
   312                           	opt stack 0
   313  000018                     ?___lwdiv:
   314                           	opt stack 0
   315  000018                     lcdNibble@temp:
   316                           	opt stack 0
   317  000018                     ___lwdiv@dividend:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x17
   321  000018                     	ds	1
   322  000019                     lcdNibble@data:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x18
   326  000019                     	ds	1
   327  00001A                     ??_readADC:
   328  00001A                     lcdInst@data:
   329                           	opt stack 0
   330  00001A                     putch@data:
   331                           	opt stack 0
   332  00001A                     ___lwdiv@divisor:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x19
   336  00001A                     	ds	1
   337  00001B                     ??_initLCD:
   338                           
   339                           ; 1 bytes @ 0x1A
   340  00001B                     	ds	1
   341  00001C                     readADC@channel:
   342                           	opt stack 0
   343  00001C                     ___lwdiv@quotient:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x1B
   347  00001C                     	ds	2
   348  00001E                     ___lwdiv@counter:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x1D
   352  00001E                     	ds	1
   353  00001F                     ?___lwmod:
   354                           	opt stack 0
   355  00001F                     ___lwmod@dividend:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x1E
   359  00001F                     	ds	2
   360  000021                     ___lwmod@divisor:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x20
   364  000021                     	ds	2
   365  000023                     ___lwmod@counter:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x22
   369  000023                     	ds	1
   370  000024                     ?_printf:
   371                           	opt stack 0
   372  000024                     printf@f:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x23
   376  000024                     	ds	4
   377  000028                     ??_printf:
   378                           
   379                           ; 1 bytes @ 0x27
   380  000028                     	ds	1
   381  000029                     printf@ap:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x28
   385  000029                     	ds	2
   386  00002B                     printf@flag:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x2A
   390  00002B                     	ds	1
   391  00002C                     printf@prec:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x2B
   395  00002C                     	ds	1
   396  00002D                     printf@val:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x2C
   400  00002D                     	ds	2
   401  00002F                     printf@c:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x2E
   405  00002F                     	ds	1
   406  000030                     ??_main:
   407                           
   408                           ; 1 bytes @ 0x2F
   409  000030                     	ds	2
   410  000032                     main@input:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x31
   414  000032                     	ds	1
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           postdec1	equ	0xFE5
   422                           fsr1l	equ	0xFE1
   423                           
   424 ;;
   425 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   426 ;;
   427 ;; *************** function _main *****************
   428 ;; Defined at:
   429 ;;		line 30 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;  input           1   49[COMRAM] unsigned char 
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;Total ram usage:        3 bytes
   448 ;; Hardware stack levels required when called:    6
   449 ;; This function calls:
   450 ;;		_initLCD
   451 ;;		_lcdInst
   452 ;;		_printf
   453 ;;		_putch
   454 ;;		_readADC
   455 ;; This function is called by:
   456 ;;		Startup code after reset
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460                           	psect	text0
   461  001034                     __ptext0:
   462                           	opt stack 0
   463  001034                     _main:
   464                           	opt stack 25
   465                           
   466                           ;main.c: 36: LATA = 0x00;
   467                           
   468                           ;incstack = 0
   469  001034  0E00               	movlw	0
   470  001036  6E89               	movwf	3977,c	;volatile
   471                           
   472                           ;main.c: 37: LATB = 0x00;
   473  001038  0E00               	movlw	0
   474  00103A  6E8A               	movwf	3978,c	;volatile
   475                           
   476                           ;main.c: 38: LATC = 0x00;
   477  00103C  0E00               	movlw	0
   478  00103E  6E8B               	movwf	3979,c	;volatile
   479                           
   480                           ;main.c: 39: LATD = 0x00;
   481  001040  0E00               	movlw	0
   482  001042  6E8C               	movwf	3980,c	;volatile
   483                           
   484                           ;main.c: 40: LATE = 0x00;
   485  001044  0E00               	movlw	0
   486  001046  6E8D               	movwf	3981,c	;volatile
   487                           
   488                           ;main.c: 44: TRISA = 0xFF;
   489  001048  6892               	setf	3986,c	;volatile
   490                           
   491                           ;main.c: 45: TRISB = 0xFF;
   492  00104A  6893               	setf	3987,c	;volatile
   493                           
   494                           ;main.c: 46: TRISC = 0x00;
   495  00104C  0E00               	movlw	0
   496  00104E  6E94               	movwf	3988,c	;volatile
   497                           
   498                           ;main.c: 47: TRISD = 0x00;
   499  001050  0E00               	movlw	0
   500  001052  6E95               	movwf	3989,c	;volatile
   501                           
   502                           ;main.c: 48: TRISE = 0x00;
   503  001054  0E00               	movlw	0
   504  001056  6E96               	movwf	3990,c	;volatile
   505                           
   506                           ;main.c: 51: ADCON0 = 0x00;
   507  001058  0E00               	movlw	0
   508  00105A  6EC2               	movwf	4034,c	;volatile
   509                           
   510                           ;main.c: 52: ADCON1 = 0b00001111;
   511  00105C  0E0F               	movlw	15
   512  00105E  6EC1               	movwf	4033,c	;volatile
   513                           
   514                           ;main.c: 55: INT1IE = 1;
   515  001060  86F0               	bsf	intcon3,3,c	;volatile
   516                           
   517                           ;main.c: 56: (INTCONbits.GIE = 1);
   518  001062  8EF2               	bsf	intcon,7,c	;volatile
   519                           
   520                           ;main.c: 59: initLCD();
   521  001064  EC96  F00A         	call	_initLCD	;wreg free
   522  001068                     
   523                           ;main.c: 61: TRISAbits.RA4 = 1;
   524  001068  8892               	bsf	3986,4,c	;volatile
   525                           
   526                           ;main.c: 62: unsigned char input = PORTAbits.RA4;
   527  00106A  0E00               	movlw	0
   528  00106C  B880               	btfsc	3968,4,c	;volatile
   529  00106E  0E01               	movlw	1
   530  001070  6E32               	movwf	main@input,c
   531                           
   532                           ;main.c: 63: putch(array[input]);
   533  001072  5032               	movf	main@input,w,c
   534  001074  0D01               	mullw	1
   535  001076  0E1C               	movlw	low _array
   536  001078  24F3               	addwf	prodl,w,c
   537  00107A  6EF6               	movwf	tblptrl,c
   538  00107C  0E10               	movlw	high _array
   539  00107E  20F4               	addwfc	prodh,w,c
   540  001080  6EF7               	movwf	tblptrh,c
   541  001082                     	if	0	;There are less than 3 active tblptr bytes
   542  001082                     	endif
   543  001082  0008               	tblrd		*
   544  001084  50F5               	movf	tablat,w,c
   545  001086  EC14  F00B         	call	_putch
   546                           
   547                           ;main.c: 64: _delay((unsigned long)((100)*(40000000/4000.0)));
   548  00108A  0E06               	movlw	6
   549  00108C  6E31               	movwf	(??_main+1)& (0+255),c
   550  00108E  0E13               	movlw	19
   551  001090  6E30               	movwf	??_main& (0+255),c
   552  001092  0EAE               	movlw	174
   553  001094                     u617:
   554  001094  2EE8               	decfsz	wreg,f,c
   555  001096  D7FE               	bra	u617
   556  001098  2E30               	decfsz	??_main& (0+255),f,c
   557  00109A  D7FC               	bra	u617
   558  00109C  2E31               	decfsz	(??_main+1)& (0+255),f,c
   559  00109E  D7FA               	bra	u617
   560                           
   561                           ;main.c: 65: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   562  0010A0  0E80               	movlw	128
   563  0010A2  EC1E  F00B         	call	_lcdInst
   564  0010A6  0E41               	movlw	65
   565  0010A8  6E30               	movwf	??_main& (0+255),c
   566  0010AA  0EEE               	movlw	238
   567  0010AC                     u627:
   568  0010AC  2EE8               	decfsz	wreg,f,c
   569  0010AE  D7FE               	bra	u627
   570  0010B0  2E30               	decfsz	??_main& (0+255),f,c
   571  0010B2  D7FC               	bra	u627
   572  0010B4  D000               	nop2	
   573                           
   574                           ;main.c: 67: if (white_tape == 0){
   575  0010B6  503D               	movf	_white_tape,w,c
   576  0010B8  103E               	iorwf	_white_tape+1,w,c
   577  0010BA  A4D8               	btfss	status,2,c
   578  0010BC  D01D               	goto	l94
   579                           
   580                           ;main.c: 68: if (array[input]=='1'){
   581  0010BE  5032               	movf	main@input,w,c
   582  0010C0  0D01               	mullw	1
   583  0010C2  0E1C               	movlw	low _array
   584  0010C4  24F3               	addwf	prodl,w,c
   585  0010C6  6EF6               	movwf	tblptrl,c
   586  0010C8  0E10               	movlw	high _array
   587  0010CA  20F4               	addwfc	prodh,w,c
   588  0010CC  6EF7               	movwf	tblptrh,c
   589  0010CE                     	if	0	;There are less than 3 active tblptr bytes
   590  0010CE                     	endif
   591  0010CE  0008               	tblrd		*
   592  0010D0  50F5               	movf	tablat,w,c
   593  0010D2  0A31               	xorlw	49
   594  0010D4  A4D8               	btfss	status,2,c
   595  0010D6  D7C8               	goto	l93
   596                           
   597                           ;main.c: 69: white_tape = 1;
   598  0010D8  0E00               	movlw	0
   599  0010DA  6E3E               	movwf	_white_tape+1,c
   600  0010DC  0E01               	movlw	1
   601  0010DE  6E3D               	movwf	_white_tape,c
   602                           
   603                           ;main.c: 71: _delay((unsigned long)((200)*(40000000/4000.0)));
   604  0010E0  0E0B               	movlw	11
   605  0010E2  6E31               	movwf	(??_main+1)& (0+255),c
   606  0010E4  0E26               	movlw	38
   607  0010E6  6E30               	movwf	??_main& (0+255),c
   608  0010E8  0E5E               	movlw	94
   609  0010EA                     u637:
   610  0010EA  2EE8               	decfsz	wreg,f,c
   611  0010EC  D7FE               	bra	u637
   612  0010EE  2E30               	decfsz	??_main& (0+255),f,c
   613  0010F0  D7FC               	bra	u637
   614  0010F2  2E31               	decfsz	(??_main+1)& (0+255),f,c
   615  0010F4  D7FA               	bra	u637
   616                           
   617                           ;main.c: 74: }
   618                           ;main.c: 75: }
   619  0010F6  D7B8               	goto	l93
   620  0010F8                     l94:
   621                           
   622                           ;main.c: 81: else if (white_tape == 1){
   623  0010F8  043D               	decf	_white_tape,w,c
   624  0010FA  103E               	iorwf	_white_tape+1,w,c
   625  0010FC  A4D8               	btfss	status,2,c
   626  0010FE  D7B4               	goto	l93
   627                           
   628                           ;main.c: 88: if (counter>=max){
   629  001100  503B               	movf	_max,w,c
   630  001102  5C33               	subwf	_counter,w,c
   631  001104  5034               	movf	_counter+1,w,c
   632  001106  0A80               	xorlw	128
   633  001108  6E30               	movwf	??_main& (0+255),c
   634  00110A  503C               	movf	_max+1,w,c
   635  00110C  0A80               	xorlw	128
   636  00110E  5830               	subwfb	??_main& (0+255),w,c
   637  001110  A0D8               	btfss	status,0,c
   638  001112  D01E               	goto	l98
   639                           
   640                           ;main.c: 89: initLCD();
   641  001114  EC96  F00A         	call	_initLCD	;wreg free
   642                           
   643                           ;main.c: 90: printf("your done");
   644  001118  0E25               	movlw	low STR_1
   645  00111A  6E24               	movwf	printf@f,c
   646  00111C  0E10               	movlw	high STR_1
   647  00111E  6E25               	movwf	printf@f+1,c
   648  001120  ECF4  F008         	call	_printf	;wreg free
   649                           
   650                           ;main.c: 91: _delay((unsigned long)((200)*(40000000/4000.0)));
   651  001124  0E0B               	movlw	11
   652  001126  6E31               	movwf	(??_main+1)& (0+255),c
   653  001128  0E26               	movlw	38
   654  00112A  6E30               	movwf	??_main& (0+255),c
   655  00112C  0E5E               	movlw	94
   656  00112E                     u647:
   657  00112E  2EE8               	decfsz	wreg,f,c
   658  001130  D7FE               	bra	u647
   659  001132  2E30               	decfsz	??_main& (0+255),f,c
   660  001134  D7FC               	bra	u647
   661  001136  2E31               	decfsz	(??_main+1)& (0+255),f,c
   662  001138  D7FA               	bra	u647
   663                           
   664                           ;main.c: 92: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   665  00113A  0E80               	movlw	128
   666  00113C  EC1E  F00B         	call	_lcdInst
   667  001140  0E41               	movlw	65
   668  001142  6E30               	movwf	??_main& (0+255),c
   669  001144  0EEE               	movlw	238
   670  001146                     u657:
   671  001146  2EE8               	decfsz	wreg,f,c
   672  001148  D7FE               	bra	u657
   673  00114A  2E30               	decfsz	??_main& (0+255),f,c
   674  00114C  D7FC               	bra	u657
   675  00114E  D04A               	goto	L1
   676  001150                     l98:
   677                           
   678                           ;main.c: 100: else{
   679                           ;main.c: 101: printf("%d",counter);
   680  001150  0E2F               	movlw	low STR_2
   681  001152  6E24               	movwf	printf@f,c
   682  001154  0E10               	movlw	high STR_2
   683  001156  6E25               	movwf	printf@f+1,c
   684  001158  C033  F026         	movff	_counter,?_printf+2
   685  00115C  C034  F027         	movff	_counter+1,?_printf+3
   686  001160  ECF4  F008         	call	_printf	;wreg free
   687                           
   688                           ;main.c: 102: _delay((unsigned long)((200)*(40000000/4000.0)));
   689  001164  0E0B               	movlw	11
   690  001166  6E31               	movwf	(??_main+1)& (0+255),c
   691  001168  0E26               	movlw	38
   692  00116A  6E30               	movwf	??_main& (0+255),c
   693  00116C  0E5E               	movlw	94
   694  00116E                     u667:
   695  00116E  2EE8               	decfsz	wreg,f,c
   696  001170  D7FE               	bra	u667
   697  001172  2E30               	decfsz	??_main& (0+255),f,c
   698  001174  D7FC               	bra	u667
   699  001176  2E31               	decfsz	(??_main+1)& (0+255),f,c
   700  001178  D7FA               	bra	u667
   701                           
   702                           ;main.c: 103: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   703  00117A  0E80               	movlw	128
   704  00117C  EC1E  F00B         	call	_lcdInst
   705  001180  0E41               	movlw	65
   706  001182  6E30               	movwf	??_main& (0+255),c
   707  001184  0EEE               	movlw	238
   708  001186                     u677:
   709  001186  2EE8               	decfsz	wreg,f,c
   710  001188  D7FE               	bra	u677
   711  00118A  2E30               	decfsz	??_main& (0+255),f,c
   712  00118C  D7FC               	bra	u677
   713  00118E  D000               	nop2	
   714                           
   715                           ;main.c: 112: if (readADC(2)>32760){
   716  001190  0E02               	movlw	2
   717  001192  ECFA  F00A         	call	_readADC
   718  001196  0EF9               	movlw	249
   719  001198  5C18               	subwf	?_readADC,w,c
   720  00119A  0E7F               	movlw	127
   721  00119C  5819               	subwfb	?_readADC+1,w,c
   722  00119E  A0D8               	btfss	status,0,c
   723  0011A0  D763               	goto	l93
   724                           
   725                           ;main.c: 114: counter++;
   726  0011A2  4A33               	infsnz	_counter,f,c
   727  0011A4  2A34               	incf	_counter+1,f,c
   728                           
   729                           ;main.c: 116: printf("%d",counter);
   730  0011A6  0E2F               	movlw	low STR_2
   731  0011A8  6E24               	movwf	printf@f,c
   732  0011AA  0E10               	movlw	high STR_2
   733  0011AC  6E25               	movwf	printf@f+1,c
   734  0011AE  C033  F026         	movff	_counter,?_printf+2
   735  0011B2  C034  F027         	movff	_counter+1,?_printf+3
   736  0011B6  ECF4  F008         	call	_printf	;wreg free
   737                           
   738                           ;main.c: 117: _delay((unsigned long)((100)*(40000000/4000.0)));
   739  0011BA  0E06               	movlw	6
   740  0011BC  6E31               	movwf	(??_main+1)& (0+255),c
   741  0011BE  0E13               	movlw	19
   742  0011C0  6E30               	movwf	??_main& (0+255),c
   743  0011C2  0EAE               	movlw	174
   744  0011C4                     u687:
   745  0011C4  2EE8               	decfsz	wreg,f,c
   746  0011C6  D7FE               	bra	u687
   747  0011C8  2E30               	decfsz	??_main& (0+255),f,c
   748  0011CA  D7FC               	bra	u687
   749  0011CC  2E31               	decfsz	(??_main+1)& (0+255),f,c
   750  0011CE  D7FA               	bra	u687
   751                           
   752                           ;main.c: 118: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   753  0011D0  0E80               	movlw	128
   754  0011D2  EC1E  F00B         	call	_lcdInst
   755  0011D6  0E41               	movlw	65
   756  0011D8  6E30               	movwf	??_main& (0+255),c
   757  0011DA  0EEE               	movlw	238
   758  0011DC                     u697:
   759  0011DC  2EE8               	decfsz	wreg,f,c
   760  0011DE  D7FE               	bra	u697
   761  0011E0  2E30               	decfsz	??_main& (0+255),f,c
   762  0011E2  D7FC               	bra	u697
   763  0011E4                     L1:
   764  0011E4  D000               	nop2	
   765  0011E6  D740               	goto	l93
   766  0011E8                     __end_of_main:
   767                           	opt stack 0
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           prodh	equ	0xFF4
   773                           prodl	equ	0xFF3
   774                           intcon	equ	0xFF2
   775                           intcon3	equ	0xFF0
   776                           postinc0	equ	0xFEE
   777                           wreg	equ	0xFE8
   778                           postdec1	equ	0xFE5
   779                           fsr1l	equ	0xFE1
   780                           status	equ	0xFD8
   781                           
   782 ;; *************** function _readADC *****************
   783 ;; Defined at:
   784 ;;		line 207 in file "main.c"
   785 ;; Parameters:    Size  Location     Type
   786 ;;  channel         1    wreg     unsigned char 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  channel         1   27[COMRAM] unsigned char 
   789 ;; Return value:  Size  Location     Type
   790 ;;                  2   23[COMRAM] unsigned short 
   791 ;; Registers used:
   792 ;;		wreg, status,2, status,0
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   798 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   801 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   802 ;;Total ram usage:        5 bytes
   803 ;; Hardware stack levels used:    1
   804 ;; Hardware stack levels required when called:    3
   805 ;; This function calls:
   806 ;;		Nothing
   807 ;; This function is called by:
   808 ;;		_main
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           	psect	text1
   813  0015F4                     __ptext1:
   814                           	opt stack 0
   815  0015F4                     _readADC:
   816                           	opt stack 27
   817                           
   818                           ;incstack = 0
   819                           ;readADC@channel stored from wreg
   820  0015F4  6E1C               	movwf	readADC@channel,c
   821                           
   822                           ;main.c: 216: ADCON0 = (channel & 0x0F) << 2;
   823  0015F6  C01C  F01A         	movff	readADC@channel,??_readADC
   824  0015FA  0E0F               	movlw	15
   825  0015FC  161A               	andwf	??_readADC,f,c
   826  0015FE  90D8               	bcf	status,0,c
   827  001600  361A               	rlcf	??_readADC,f,c
   828  001602  90D8               	bcf	status,0,c
   829  001604  341A               	rlcf	??_readADC,w,c
   830  001606  6EC2               	movwf	4034,c	;volatile
   831                           
   832                           ;main.c: 217: ADON = 1;
   833  001608  80C2               	bsf	4034,0,c	;volatile
   834                           
   835                           ;main.c: 218: ADCON0bits.GO = 1;
   836  00160A  82C2               	bsf	4034,1,c	;volatile
   837  00160C  B2C2               	btfsc	4034,1,c	;volatile
   838  00160E  D7FE               	goto	l128
   839                           
   840                           ;main.c: 220: return (ADRESH << 8) | ADRESL;
   841  001610  50C3               	movf	4035,w,c	;volatile
   842  001612  CFC4 F01A          	movff	4036,??_readADC	;volatile
   843  001616  6A1B               	clrf	(??_readADC+1)& (0+255),c
   844  001618  C01A  F01B         	movff	??_readADC,??_readADC+1
   845  00161C  6A1A               	clrf	??_readADC,c
   846  00161E  101A               	iorwf	??_readADC,w,c
   847  001620  6E18               	movwf	?_readADC,c
   848  001622  501B               	movf	??_readADC+1,w,c
   849  001624  6E19               	movwf	?_readADC+1,c
   850  001626  0012               	return	
   851  001628                     __end_of_readADC:
   852                           	opt stack 0
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           prodh	equ	0xFF4
   858                           prodl	equ	0xFF3
   859                           intcon	equ	0xFF2
   860                           intcon3	equ	0xFF0
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           postdec1	equ	0xFE5
   864                           fsr1l	equ	0xFE1
   865                           status	equ	0xFD8
   866                           
   867 ;; *************** function _printf *****************
   868 ;; Defined at:
   869 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  f               2   35[COMRAM] PTR const unsigned char 
   872 ;;		 -> STR_3(3), STR_2(3), STR_1(10), 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  tmpval          4    0        struct .
   875 ;;  cp              3    0        PTR const unsigned char 
   876 ;;  val             2   44[COMRAM] unsigned int 
   877 ;;  ap              2   40[COMRAM] PTR void [1]
   878 ;;		 -> ?_printf(2), 
   879 ;;  len             2    0        unsigned int 
   880 ;;  c               1   46[COMRAM] char 
   881 ;;  prec            1   43[COMRAM] char 
   882 ;;  flag            1   42[COMRAM] unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  2   35[COMRAM] int 
   885 ;; Registers used:
   886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   892 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   893 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;Total ram usage:       12 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    5
   899 ;; This function calls:
   900 ;;		___lwdiv
   901 ;;		___lwmod
   902 ;;		_putch
   903 ;; This function is called by:
   904 ;;		_main
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text2
   909  0011E8                     __ptext2:
   910                           	opt stack 0
   911  0011E8                     _printf:
   912                           	opt stack 25
   913                           
   914                           ;doprnt.c: 466: va_list ap;
   915                           ;doprnt.c: 499: signed char c;
   916                           ;doprnt.c: 506: signed char prec;
   917                           ;doprnt.c: 508: unsigned char flag;
   918                           ;doprnt.c: 523: union {
   919                           ;doprnt.c: 524: unsigned long vd;
   920                           ;doprnt.c: 525: double integ;
   921                           ;doprnt.c: 526: } tmpval;
   922                           ;doprnt.c: 528: unsigned int val;
   923                           ;doprnt.c: 529: unsigned len;
   924                           ;doprnt.c: 530: const char * cp;
   925                           ;doprnt.c: 533: *ap = __va_start();
   926                           
   927                           ;incstack = 0
   928  0011E8  0E26               	movlw	low (?_printf+2)
   929  0011EA  6E29               	movwf	printf@ap,c
   930  0011EC  0E00               	movlw	high (?_printf+2)
   931  0011EE  6E2A               	movwf	printf@ap+1,c
   932                           
   933                           ;doprnt.c: 536: while(c = *f++) {
   934  0011F0  D07D               	goto	u520
   935  0011F2                     
   936                           ;doprnt.c: 538: if(c != '%')
   937  0011F2  0E25               	movlw	37
   938  0011F4  182F               	xorwf	printf@c,w,c
   939  0011F6  B4D8               	btfsc	status,2,c
   940  0011F8  D004               	goto	l198
   941                           
   942                           ;doprnt.c: 540: {
   943                           ;doprnt.c: 541: (putch(c) );
   944  0011FA  502F               	movf	printf@c,w,c
   945  0011FC  EC14  F00B         	call	_putch
   946                           
   947                           ;doprnt.c: 542: continue;
   948  001200  D075               	goto	u520
   949  001202                     l198:
   950                           
   951                           ;doprnt.c: 543: }
   952                           ;doprnt.c: 548: flag = 0;
   953  001202  0E00               	movlw	0
   954  001204  6E2B               	movwf	printf@flag,c
   955                           
   956                           ;doprnt.c: 822: }
   957                           
   958                           ;doprnt.c: 813: continue;
   959                           
   960                           ;doprnt.c: 802: default:
   961                           
   962                           ;doprnt.c: 698: case 'i':
   963                           ;doprnt.c: 699: break;
   964                           
   965                           ;doprnt.c: 697: case 'd':
   966                           
   967                           ;doprnt.c: 638: goto alldone;
   968                           
   969                           ;doprnt.c: 637: case 0:
   970                           
   971                           ;doprnt.c: 635: switch(c = *f++) {
   972  001206  C024  FFF6         	movff	printf@f,tblptrl
   973  00120A  C025  FFF7         	movff	printf@f+1,tblptrh
   974  00120E  4A24               	infsnz	printf@f,f,c
   975  001210  2A25               	incf	printf@f+1,f,c
   976  001212                     	if	0	;tblptru may be non-zero
   977  001212                     	endif
   978  001212                     	if	0	;tblptru may be non-zero
   979  001212                     	endif
   980  001212  0008               	tblrd		*
   981  001214  CFF5 F02F          	movff	tablat,printf@c
   982  001218  502F               	movf	printf@c,w,c
   983                           
   984                           ; Switch size 1, requested type "space"
   985                           ; Number of cases is 3, Range of values is 0 to 105
   986                           ; switch strategies available:
   987                           ; Name         Instructions Cycles
   988                           ; simple_byte           10     6 (average)
   989                           ;	Chosen strategy is simple_byte
   990  00121A  0A00               	xorlw	0	; case 0
   991  00121C  B4D8               	btfsc	status,2,c
   992  00121E  0012               	return	
   993  001220  0A64               	xorlw	100	; case 100
   994  001222  B4D8               	btfsc	status,2,c
   995  001224  D003               	goto	l204
   996  001226  0A0D               	xorlw	13	; case 105
   997  001228  A4D8               	btfss	status,2,c
   998  00122A  D060               	goto	u520
   999  00122C                     l204:
  1000                           
  1001                           ;doprnt.c: 1253: {
  1002                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1003  00122C  C029  FFD9         	movff	printf@ap,fsr2l
  1004  001230  C02A  FFDA         	movff	printf@ap+1,fsr2h
  1005  001234  CFDE F02D          	movff	postinc2,printf@val
  1006  001238  CFDD F02E          	movff	postdec2,printf@val+1
  1007  00123C  0E02               	movlw	2
  1008  00123E  2629               	addwf	printf@ap,f,c
  1009  001240  0E00               	movlw	0
  1010  001242  222A               	addwfc	printf@ap+1,f,c
  1011                           
  1012                           ;doprnt.c: 1261: if((int)val < 0) {
  1013  001244  AE2E               	btfss	printf@val+1,7,c
  1014  001246  D006               	goto	l206
  1015                           
  1016                           ;doprnt.c: 1262: flag |= 0x03;
  1017  001248  0E03               	movlw	3
  1018  00124A  122B               	iorwf	printf@flag,f,c
  1019                           
  1020                           ;doprnt.c: 1263: val = -val;
  1021  00124C  6C2D               	negf	printf@val,c
  1022  00124E  1E2E               	comf	printf@val+1,f,c
  1023  001250  B0D8               	btfsc	status,0,c
  1024  001252  2A2E               	incf	printf@val+1,f,c
  1025  001254                     l206:
  1026                           
  1027                           ;doprnt.c: 1264: }
  1028                           ;doprnt.c: 1266: }
  1029                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1030  001254  0E01               	movlw	1
  1031  001256  6E2F               	movwf	printf@c,c
  1032  001258                     l1313:
  1033  001258  0E05               	movlw	5
  1034  00125A  182F               	xorwf	printf@c,w,c
  1035  00125C  B4D8               	btfsc	status,2,c
  1036  00125E  D012               	goto	u500
  1037                           
  1038                           ;doprnt.c: 1306: if(val < dpowers[c])
  1039  001260  502F               	movf	printf@c,w,c
  1040  001262  0D02               	mullw	2
  1041  001264  0E12               	movlw	low _dpowers
  1042  001266  24F3               	addwf	prodl,w,c
  1043  001268  6EF6               	movwf	tblptrl,c
  1044  00126A  0E10               	movlw	high _dpowers
  1045  00126C  20F4               	addwfc	prodh,w,c
  1046  00126E  6EF7               	movwf	tblptrh,c
  1047  001270                     	if	0	;There are less than 3 active tblptr bytes
  1048  001270                     	endif
  1049  001270  0009               	tblrd		*+
  1050  001272  50F5               	movf	tablat,w,c
  1051  001274  5C2D               	subwf	printf@val,w,c
  1052  001276  0009               	tblrd		*+
  1053  001278  50F5               	movf	tablat,w,c
  1054  00127A  582E               	subwfb	printf@val+1,w,c
  1055  00127C  A0D8               	btfss	status,0,c
  1056  00127E  D002               	goto	u500
  1057                           
  1058                           ;doprnt.c: 1307: break;
  1059  001280  2A2F               	incf	printf@c,f,c
  1060  001282  D7EA               	goto	l1313
  1061  001284                     u500:
  1062                           
  1063                           ;doprnt.c: 1422: {
  1064                           ;doprnt.c: 1438: if(flag & 0x03)
  1065  001284  C02B  F028         	movff	printf@flag,??_printf
  1066  001288  0E03               	movlw	3
  1067  00128A  1628               	andwf	??_printf,f,c
  1068  00128C  B4D8               	btfsc	status,2,c
  1069  00128E  D003               	goto	l210
  1070                           
  1071                           ;doprnt.c: 1439: (putch('-') );
  1072  001290  0E2D               	movlw	45
  1073  001292  EC14  F00B         	call	_putch
  1074  001296                     l210:
  1075                           
  1076                           ;doprnt.c: 1469: }
  1077                           ;doprnt.c: 1472: prec = c;
  1078  001296  C02F  F02C         	movff	printf@c,printf@prec
  1079                           
  1080                           ;doprnt.c: 1474: while(prec--) {
  1081  00129A  D024               	goto	l211
  1082  00129C                     
  1083                           ;doprnt.c: 1478: {
  1084                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1085  00129C  502C               	movf	printf@prec,w,c
  1086  00129E  0D02               	mullw	2
  1087  0012A0  0E12               	movlw	low _dpowers
  1088  0012A2  24F3               	addwf	prodl,w,c
  1089  0012A4  6EF6               	movwf	tblptrl,c
  1090  0012A6  0E10               	movlw	high _dpowers
  1091  0012A8  20F4               	addwfc	prodh,w,c
  1092  0012AA  6EF7               	movwf	tblptrh,c
  1093  0012AC                     	if	0	;There are less than 3 active tblptr bytes
  1094  0012AC                     	endif
  1095  0012AC  0009               	tblrd		*+
  1096  0012AE  CFF5 F01A          	movff	tablat,___lwdiv@divisor
  1097  0012B2  000A               	tblrd		*-
  1098  0012B4  CFF5 F01B          	movff	tablat,___lwdiv@divisor+1
  1099  0012B8  C02D  F018         	movff	printf@val,___lwdiv@dividend
  1100  0012BC  C02E  F019         	movff	printf@val+1,___lwdiv@dividend+1
  1101  0012C0  EC6D  F00A         	call	___lwdiv	;wreg free
  1102  0012C4  C018  F01F         	movff	?___lwdiv,___lwmod@dividend
  1103  0012C8  C019  F020         	movff	?___lwdiv+1,___lwmod@dividend+1
  1104  0012CC  0E00               	movlw	0
  1105  0012CE  6E22               	movwf	___lwmod@divisor+1,c
  1106  0012D0  0E0A               	movlw	10
  1107  0012D2  6E21               	movwf	___lwmod@divisor,c
  1108  0012D4  ECBC  F00A         	call	___lwmod	;wreg free
  1109  0012D8  501F               	movf	?___lwmod,w,c
  1110  0012DA  0F30               	addlw	48
  1111  0012DC  6E2F               	movwf	printf@c,c
  1112                           
  1113                           ;doprnt.c: 1523: }
  1114                           ;doprnt.c: 1524: (putch(c) );
  1115  0012DE  502F               	movf	printf@c,w,c
  1116  0012E0  EC14  F00B         	call	_putch
  1117  0012E4                     l211:
  1118  0012E4  062C               	decf	printf@prec,f,c
  1119  0012E6  282C               	incf	printf@prec,w,c
  1120  0012E8  A4D8               	btfss	status,2,c
  1121  0012EA  D7D8               	goto	l212
  1122  0012EC                     u520:
  1123  0012EC  C024  FFF6         	movff	printf@f,tblptrl
  1124  0012F0  C025  FFF7         	movff	printf@f+1,tblptrh
  1125  0012F4  4A24               	infsnz	printf@f,f,c
  1126  0012F6  2A25               	incf	printf@f+1,f,c
  1127  0012F8                     	if	0	;tblptru may be non-zero
  1128  0012F8                     	endif
  1129  0012F8                     	if	0	;tblptru may be non-zero
  1130  0012F8                     	endif
  1131  0012F8  0008               	tblrd		*
  1132  0012FA  CFF5 F02F          	movff	tablat,printf@c
  1133  0012FE  502F               	movf	printf@c,w,c
  1134  001300  B4D8               	btfsc	status,2,c
  1135  001302  0012               	return	
  1136  001304  D776               	goto	l197
  1137  001306                     __end_of_printf:
  1138                           	opt stack 0
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           prodh	equ	0xFF4
  1144                           prodl	equ	0xFF3
  1145                           intcon	equ	0xFF2
  1146                           intcon3	equ	0xFF0
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           postinc2	equ	0xFDE
  1152                           postdec2	equ	0xFDD
  1153                           fsr2h	equ	0xFDA
  1154                           fsr2l	equ	0xFD9
  1155                           status	equ	0xFD8
  1156                           
  1157 ;; *************** function _putch *****************
  1158 ;; Defined at:
  1159 ;;		line 24 in file "lcd.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  data            1    wreg     unsigned char 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  data            1   25[COMRAM] unsigned char 
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, status,2, status,0, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1177 ;;Total ram usage:        1 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    4
  1180 ;; This function calls:
  1181 ;;		_lcdNibble
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;;		_printf
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text3
  1189  001628                     __ptext3:
  1190                           	opt stack 0
  1191  001628                     _putch:
  1192                           	opt stack 26
  1193                           
  1194                           ;incstack = 0
  1195                           ;putch@data stored from wreg
  1196  001628  6E1A               	movwf	putch@data,c
  1197                           
  1198                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1199  00162A  848C               	bsf	3980,2,c	;volatile
  1200                           
  1201                           ;lcd.c: 33: lcdNibble(data);
  1202  00162C  501A               	movf	putch@data,w,c
  1203  00162E  ECEF  F009         	call	_lcdNibble
  1204                           
  1205                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1206  001632  0EC8               	movlw	200
  1207  001634                     u707:
  1208  001634  D000               	nop2	
  1209  001636  2EE8               	decfsz	wreg,f,c
  1210  001638  D7FD               	bra	u707
  1211  00163A  0012               	return		;funcret
  1212  00163C                     __end_of_putch:
  1213                           	opt stack 0
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           tblptrl	equ	0xFF6
  1217                           tablat	equ	0xFF5
  1218                           prodh	equ	0xFF4
  1219                           prodl	equ	0xFF3
  1220                           intcon	equ	0xFF2
  1221                           intcon3	equ	0xFF0
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           postdec1	equ	0xFE5
  1225                           fsr1l	equ	0xFE1
  1226                           postinc2	equ	0xFDE
  1227                           postdec2	equ	0xFDD
  1228                           fsr2h	equ	0xFDA
  1229                           fsr2l	equ	0xFD9
  1230                           status	equ	0xFD8
  1231                           
  1232 ;; *************** function ___lwmod *****************
  1233 ;; Defined at:
  1234 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  dividend        2   30[COMRAM] unsigned int 
  1237 ;;  divisor         2   32[COMRAM] unsigned int 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  counter         1   34[COMRAM] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  2   30[COMRAM] unsigned int 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, status,0
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1249 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;Total ram usage:        5 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    3
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_printf
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text4
  1264  001578                     __ptext4:
  1265                           	opt stack 0
  1266  001578                     ___lwmod:
  1267                           	opt stack 26
  1268                           
  1269                           ;incstack = 0
  1270  001578  5021               	movf	___lwmod@divisor,w,c
  1271  00157A  1022               	iorwf	___lwmod@divisor+1,w,c
  1272  00157C  B4D8               	btfsc	status,2,c
  1273  00157E  D018               	goto	l634
  1274  001580  0E01               	movlw	1
  1275  001582  6E23               	movwf	___lwmod@counter,c
  1276  001584  D004               	goto	l629
  1277  001586  90D8               	bcf	status,0,c
  1278  001588  3621               	rlcf	___lwmod@divisor,f,c
  1279  00158A  3622               	rlcf	___lwmod@divisor+1,f,c
  1280  00158C  2A23               	incf	___lwmod@counter,f,c
  1281  00158E                     l629:
  1282  00158E  AE22               	btfss	___lwmod@divisor+1,7,c
  1283  001590  D7FA               	goto	l630
  1284  001592                     u420:
  1285  001592  5021               	movf	___lwmod@divisor,w,c
  1286  001594  5C1F               	subwf	___lwmod@dividend,w,c
  1287  001596  5022               	movf	___lwmod@divisor+1,w,c
  1288  001598  5820               	subwfb	___lwmod@dividend+1,w,c
  1289  00159A  A0D8               	btfss	status,0,c
  1290  00159C  D004               	goto	l633
  1291  00159E  5021               	movf	___lwmod@divisor,w,c
  1292  0015A0  5E1F               	subwf	___lwmod@dividend,f,c
  1293  0015A2  5022               	movf	___lwmod@divisor+1,w,c
  1294  0015A4  5A20               	subwfb	___lwmod@dividend+1,f,c
  1295  0015A6                     l633:
  1296  0015A6  90D8               	bcf	status,0,c
  1297  0015A8  3222               	rrcf	___lwmod@divisor+1,f,c
  1298  0015AA  3221               	rrcf	___lwmod@divisor,f,c
  1299  0015AC  2E23               	decfsz	___lwmod@counter,f,c
  1300  0015AE  D7F1               	goto	u420
  1301  0015B0                     l634:
  1302  0015B0  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
  1303  0015B4  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
  1304  0015B8  0012               	return		;funcret
  1305  0015BA                     __end_of___lwmod:
  1306                           	opt stack 0
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           prodh	equ	0xFF4
  1312                           prodl	equ	0xFF3
  1313                           intcon	equ	0xFF2
  1314                           intcon3	equ	0xFF0
  1315                           postinc0	equ	0xFEE
  1316                           wreg	equ	0xFE8
  1317                           postdec1	equ	0xFE5
  1318                           fsr1l	equ	0xFE1
  1319                           postinc2	equ	0xFDE
  1320                           postdec2	equ	0xFDD
  1321                           fsr2h	equ	0xFDA
  1322                           fsr2l	equ	0xFD9
  1323                           status	equ	0xFD8
  1324                           
  1325 ;; *************** function ___lwdiv *****************
  1326 ;; Defined at:
  1327 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  dividend        2   23[COMRAM] unsigned int 
  1330 ;;  divisor         2   25[COMRAM] unsigned int 
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;  quotient        2   27[COMRAM] unsigned int 
  1333 ;;  counter         1   29[COMRAM] unsigned char 
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  2   23[COMRAM] unsigned int 
  1336 ;; Registers used:
  1337 ;;		wreg, status,2, status,0
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1343 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;Total ram usage:        7 bytes
  1348 ;; Hardware stack levels used:    1
  1349 ;; Hardware stack levels required when called:    3
  1350 ;; This function calls:
  1351 ;;		Nothing
  1352 ;; This function is called by:
  1353 ;;		_printf
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text5
  1358  0014DA                     __ptext5:
  1359                           	opt stack 0
  1360  0014DA                     ___lwdiv:
  1361                           	opt stack 26
  1362                           
  1363                           ;incstack = 0
  1364  0014DA  0E00               	movlw	0
  1365  0014DC  6E1D               	movwf	___lwdiv@quotient+1,c
  1366  0014DE  0E00               	movlw	0
  1367  0014E0  6E1C               	movwf	___lwdiv@quotient,c
  1368  0014E2  501A               	movf	___lwdiv@divisor,w,c
  1369  0014E4  101B               	iorwf	___lwdiv@divisor+1,w,c
  1370  0014E6  B4D8               	btfsc	status,2,c
  1371  0014E8  D01C               	goto	l624
  1372  0014EA  0E01               	movlw	1
  1373  0014EC  6E1E               	movwf	___lwdiv@counter,c
  1374  0014EE  D004               	goto	l619
  1375  0014F0  90D8               	bcf	status,0,c
  1376  0014F2  361A               	rlcf	___lwdiv@divisor,f,c
  1377  0014F4  361B               	rlcf	___lwdiv@divisor+1,f,c
  1378  0014F6  2A1E               	incf	___lwdiv@counter,f,c
  1379  0014F8                     l619:
  1380  0014F8  AE1B               	btfss	___lwdiv@divisor+1,7,c
  1381  0014FA  D7FA               	goto	l620
  1382  0014FC                     u390:
  1383  0014FC  90D8               	bcf	status,0,c
  1384  0014FE  361C               	rlcf	___lwdiv@quotient,f,c
  1385  001500  361D               	rlcf	___lwdiv@quotient+1,f,c
  1386  001502  501A               	movf	___lwdiv@divisor,w,c
  1387  001504  5C18               	subwf	___lwdiv@dividend,w,c
  1388  001506  501B               	movf	___lwdiv@divisor+1,w,c
  1389  001508  5819               	subwfb	___lwdiv@dividend+1,w,c
  1390  00150A  A0D8               	btfss	status,0,c
  1391  00150C  D005               	goto	l623
  1392  00150E  501A               	movf	___lwdiv@divisor,w,c
  1393  001510  5E18               	subwf	___lwdiv@dividend,f,c
  1394  001512  501B               	movf	___lwdiv@divisor+1,w,c
  1395  001514  5A19               	subwfb	___lwdiv@dividend+1,f,c
  1396  001516  801C               	bsf	___lwdiv@quotient,0,c
  1397  001518                     l623:
  1398  001518  90D8               	bcf	status,0,c
  1399  00151A  321B               	rrcf	___lwdiv@divisor+1,f,c
  1400  00151C  321A               	rrcf	___lwdiv@divisor,f,c
  1401  00151E  2E1E               	decfsz	___lwdiv@counter,f,c
  1402  001520  D7ED               	goto	u390
  1403  001522                     l624:
  1404  001522  C01C  F018         	movff	___lwdiv@quotient,?___lwdiv
  1405  001526  C01D  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1406  00152A  0012               	return		;funcret
  1407  00152C                     __end_of___lwdiv:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           prodh	equ	0xFF4
  1414                           prodl	equ	0xFF3
  1415                           intcon	equ	0xFF2
  1416                           intcon3	equ	0xFF0
  1417                           postinc0	equ	0xFEE
  1418                           wreg	equ	0xFE8
  1419                           postdec1	equ	0xFE5
  1420                           fsr1l	equ	0xFE1
  1421                           postinc2	equ	0xFDE
  1422                           postdec2	equ	0xFDD
  1423                           fsr2h	equ	0xFDA
  1424                           fsr2l	equ	0xFD9
  1425                           status	equ	0xFD8
  1426                           
  1427 ;; *************** function _initLCD *****************
  1428 ;; Defined at:
  1429 ;;		line 60 in file "lcd.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;		None
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;		None
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, status,2, status,0, cstack
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;Total ram usage:        1 bytes
  1448 ;; Hardware stack levels used:    1
  1449 ;; Hardware stack levels required when called:    5
  1450 ;; This function calls:
  1451 ;;		_lcdInst
  1452 ;; This function is called by:
  1453 ;;		_main
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text6
  1458  00152C                     __ptext6:
  1459                           	opt stack 0
  1460  00152C                     _initLCD:
  1461                           	opt stack 25
  1462                           
  1463                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1464                           
  1465                           ;incstack = 0
  1466  00152C  0EC3               	movlw	195
  1467  00152E  6E1B               	movwf	??_initLCD& (0+255),c
  1468  001530  0ECD               	movlw	205
  1469  001532                     u717:
  1470  001532  2EE8               	decfsz	wreg,f,c
  1471  001534  D7FE               	bra	u717
  1472  001536  2E1B               	decfsz	??_initLCD& (0+255),f,c
  1473  001538  D7FC               	bra	u717
  1474  00153A  F000               	nop	
  1475                           
  1476                           ;lcd.c: 69: lcdInst(0b00110011);
  1477  00153C  0E33               	movlw	51
  1478  00153E  EC1E  F00B         	call	_lcdInst
  1479                           
  1480                           ;lcd.c: 70: lcdInst(0b00110010);
  1481  001542  0E32               	movlw	50
  1482  001544  EC1E  F00B         	call	_lcdInst
  1483                           
  1484                           ;lcd.c: 71: lcdInst(0b00101000);
  1485  001548  0E28               	movlw	40
  1486  00154A  EC1E  F00B         	call	_lcdInst
  1487                           
  1488                           ;lcd.c: 72: lcdInst(0b00001111);
  1489  00154E  0E0F               	movlw	15
  1490  001550  EC1E  F00B         	call	_lcdInst
  1491                           
  1492                           ;lcd.c: 73: lcdInst(0b00000110);
  1493  001554  0E06               	movlw	6
  1494  001556  EC1E  F00B         	call	_lcdInst
  1495                           
  1496                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1497  00155A  0E01               	movlw	1
  1498  00155C  EC1E  F00B         	call	_lcdInst
  1499  001560  0EC3               	movlw	195
  1500  001562  6E1B               	movwf	??_initLCD& (0+255),c
  1501  001564  0ECD               	movlw	205
  1502  001566                     u727:
  1503  001566  2EE8               	decfsz	wreg,f,c
  1504  001568  D7FE               	bra	u727
  1505  00156A  2E1B               	decfsz	??_initLCD& (0+255),f,c
  1506  00156C  D7FC               	bra	u727
  1507  00156E  F000               	nop	
  1508                           
  1509                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1510  001570  0E0F               	movlw	15
  1511  001572  EC1E  F00B         	call	_lcdInst
  1512  001576  0012               	return		;funcret
  1513  001578                     __end_of_initLCD:
  1514                           	opt stack 0
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           prodh	equ	0xFF4
  1520                           prodl	equ	0xFF3
  1521                           intcon	equ	0xFF2
  1522                           intcon3	equ	0xFF0
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1l	equ	0xFE1
  1527                           postinc2	equ	0xFDE
  1528                           postdec2	equ	0xFDD
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _lcdInst *****************
  1534 ;; Defined at:
  1535 ;;		line 11 in file "lcd.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  data            1    wreg     unsigned char 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  data            1   25[COMRAM] unsigned char 
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2, status,0, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;Total ram usage:        1 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    4
  1556 ;; This function calls:
  1557 ;;		_lcdNibble
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;;		_initLCD
  1561 ;;		_lcd_set_cursor
  1562 ;;		_lcd_shift_cursor
  1563 ;;		_lcd_shift_display
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text7
  1568  00163C                     __ptext7:
  1569                           	opt stack 0
  1570  00163C                     _lcdInst:
  1571                           	opt stack 26
  1572                           
  1573                           ;incstack = 0
  1574                           ;lcdInst@data stored from wreg
  1575  00163C  6E1A               	movwf	lcdInst@data,c
  1576                           
  1577                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1578  00163E  948C               	bcf	3980,2,c	;volatile
  1579                           
  1580                           ;lcd.c: 20: lcdNibble(data);
  1581  001640  501A               	movf	lcdInst@data,w,c
  1582  001642  ECEF  F009         	call	_lcdNibble
  1583                           
  1584                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1585  001646  0EC8               	movlw	200
  1586  001648                     u737:
  1587  001648  D000               	nop2	
  1588  00164A  2EE8               	decfsz	wreg,f,c
  1589  00164C  D7FD               	bra	u737
  1590  00164E  0012               	return		;funcret
  1591  001650                     __end_of_lcdInst:
  1592                           	opt stack 0
  1593                           tblptru	equ	0xFF8
  1594                           tblptrh	equ	0xFF7
  1595                           tblptrl	equ	0xFF6
  1596                           tablat	equ	0xFF5
  1597                           prodh	equ	0xFF4
  1598                           prodl	equ	0xFF3
  1599                           intcon	equ	0xFF2
  1600                           intcon3	equ	0xFF0
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           postdec1	equ	0xFE5
  1604                           fsr1l	equ	0xFE1
  1605                           postinc2	equ	0xFDE
  1606                           postdec2	equ	0xFDD
  1607                           fsr2h	equ	0xFDA
  1608                           fsr2l	equ	0xFD9
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _lcdNibble *****************
  1612 ;; Defined at:
  1613 ;;		line 37 in file "lcd.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  data            1    wreg     unsigned char 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  data            1   24[COMRAM] unsigned char 
  1618 ;;  temp            1   23[COMRAM] unsigned char 
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg, status,2, status,0
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1629 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1632 ;;Total ram usage:        2 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    3
  1635 ;; This function calls:
  1636 ;;		Nothing
  1637 ;; This function is called by:
  1638 ;;		_lcdInst
  1639 ;;		_putch
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text8
  1644  0013DE                     __ptext8:
  1645                           	opt stack 0
  1646  0013DE                     _lcdNibble:
  1647                           	opt stack 26
  1648                           
  1649                           ;incstack = 0
  1650                           ;lcdNibble@data stored from wreg
  1651  0013DE  6E19               	movwf	lcdNibble@data,c
  1652                           
  1653                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1654  0013E0  5019               	movf	lcdNibble@data,w,c
  1655  0013E2  0BF0               	andlw	240
  1656  0013E4  6E18               	movwf	lcdNibble@temp,c
  1657                           
  1658                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1659  0013E6  508C               	movf	3980,w,c	;volatile
  1660  0013E8  0B0F               	andlw	15
  1661  0013EA  6E8C               	movwf	3980,c	;volatile
  1662                           
  1663                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1664  0013EC  5018               	movf	lcdNibble@temp,w,c
  1665  0013EE  108C               	iorwf	3980,w,c	;volatile
  1666  0013F0  6E8C               	movwf	3980,c	;volatile
  1667                           
  1668                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1669  0013F2  0E00               	movlw	0
  1670  0013F4  BEF2               	btfsc	intcon,7,c	;volatile
  1671  0013F6  0E01               	movlw	1
  1672  0013F8  6E39               	movwf	lcd@LCDinterruptState,c
  1673  0013FA  9EF2               	bcf	intcon,7,c	;volatile
  1674  0013FC  868C               	bsf	3980,3,c	;volatile
  1675  0013FE  0E53               	movlw	83
  1676  001400                     u747:
  1677  001400  2EE8               	decfsz	wreg,f,c
  1678  001402  D7FE               	bra	u747
  1679  001404  F000               	nop	
  1680  001406  968C               	bcf	3980,3,c	;volatile
  1681  001408  0EC8               	movlw	200
  1682  00140A                     u757:
  1683  00140A  D000               	nop2	
  1684  00140C  2EE8               	decfsz	wreg,f,c
  1685  00140E  D7FD               	bra	u757
  1686  001410  B039               	btfsc	lcd@LCDinterruptState,0,c
  1687  001412  D002               	bra	u15
  1688  001414  9EF2               	bcf	intcon,7,c	;volatile
  1689  001416  D001               	bra	u16
  1690  001418                     u15:
  1691  001418  8EF2               	bsf	intcon,7,c	;volatile
  1692  00141A                     u16:
  1693                           
  1694                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1695  00141A  3819               	swapf	lcdNibble@data,w,c
  1696  00141C  0BF0               	andlw	240
  1697  00141E  6E19               	movwf	lcdNibble@data,c
  1698                           
  1699                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1700  001420  5019               	movf	lcdNibble@data,w,c
  1701  001422  0BF0               	andlw	240
  1702  001424  6E18               	movwf	lcdNibble@temp,c
  1703                           
  1704                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1705  001426  508C               	movf	3980,w,c	;volatile
  1706  001428  0B0F               	andlw	15
  1707  00142A  6E8C               	movwf	3980,c	;volatile
  1708                           
  1709                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1710  00142C  5018               	movf	lcdNibble@temp,w,c
  1711  00142E  108C               	iorwf	3980,w,c	;volatile
  1712  001430  6E8C               	movwf	3980,c	;volatile
  1713                           
  1714                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1715  001432  0E00               	movlw	0
  1716  001434  BEF2               	btfsc	intcon,7,c	;volatile
  1717  001436  0E01               	movlw	1
  1718  001438  6E39               	movwf	lcd@LCDinterruptState,c
  1719  00143A  9EF2               	bcf	intcon,7,c	;volatile
  1720  00143C  868C               	bsf	3980,3,c	;volatile
  1721  00143E  0E53               	movlw	83
  1722  001440                     u767:
  1723  001440  2EE8               	decfsz	wreg,f,c
  1724  001442  D7FE               	bra	u767
  1725  001444  F000               	nop	
  1726  001446  968C               	bcf	3980,3,c	;volatile
  1727  001448  0EC8               	movlw	200
  1728  00144A                     u777:
  1729  00144A  D000               	nop2	
  1730  00144C  2EE8               	decfsz	wreg,f,c
  1731  00144E  D7FD               	bra	u777
  1732  001450  B039               	btfsc	lcd@LCDinterruptState,0,c
  1733  001452  D002               	bra	u25
  1734  001454  9EF2               	bcf	intcon,7,c	;volatile
  1735  001456  D001               	bra	u26
  1736  001458                     u25:
  1737  001458  8EF2               	bsf	intcon,7,c	;volatile
  1738  00145A                     u26:
  1739  00145A  0012               	return		;funcret
  1740  00145C                     __end_of_lcdNibble:
  1741                           	opt stack 0
  1742                           tblptru	equ	0xFF8
  1743                           tblptrh	equ	0xFF7
  1744                           tblptrl	equ	0xFF6
  1745                           tablat	equ	0xFF5
  1746                           prodh	equ	0xFF4
  1747                           prodl	equ	0xFF3
  1748                           intcon	equ	0xFF2
  1749                           intcon3	equ	0xFF0
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           postdec1	equ	0xFE5
  1753                           fsr1l	equ	0xFE1
  1754                           postinc2	equ	0xFDE
  1755                           postdec2	equ	0xFDD
  1756                           fsr2h	equ	0xFDA
  1757                           fsr2l	equ	0xFD9
  1758                           status	equ	0xFD8
  1759                           
  1760 ;; *************** function _interruptHandler *****************
  1761 ;; Defined at:
  1762 ;;		line 182 in file "main.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  keypress        1   22[COMRAM] unsigned char 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1778 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1779 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1780 ;;Total ram usage:       20 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    2
  1783 ;; This function calls:
  1784 ;;		i2_lcdInst
  1785 ;;		i2_putch
  1786 ;; This function is called by:
  1787 ;;		Interrupt level 2
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           	psect	intcode
  1792  000008                     __pintcode:
  1793                           	opt stack 0
  1794  000008                     _interruptHandler:
  1795                           	opt stack 25
  1796                           
  1797                           ;incstack = 0
  1798  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1799  00000A  ED83  F009         	call	int_func,f	;refresh shadow registers
  1800                           tblptru	equ	0xFF8
  1801                           tblptrh	equ	0xFF7
  1802                           tblptrl	equ	0xFF6
  1803                           tablat	equ	0xFF5
  1804                           prodh	equ	0xFF4
  1805                           prodl	equ	0xFF3
  1806                           intcon	equ	0xFF2
  1807                           intcon3	equ	0xFF0
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           fsr1l	equ	0xFE1
  1812                           postinc2	equ	0xFDE
  1813                           postdec2	equ	0xFDD
  1814                           fsr2h	equ	0xFDA
  1815                           fsr2l	equ	0xFD9
  1816                           status	equ	0xFD8
  1817                           
  1818                           	psect	intcode_body
  1819  001306                     __pintcode_body:
  1820                           	opt stack 25
  1821  001306                     int_func:
  1822                           	opt stack 25
  1823  001306  0006               	pop		; remove dummy address from shadow register refresh
  1824  001308  CFFA F005          	movff	pclath,??_interruptHandler+1
  1825  00130C  CFFB F006          	movff	pclatu,??_interruptHandler+2
  1826  001310  CFE9 F007          	movff	fsr0l,??_interruptHandler+3
  1827  001314  CFEA F008          	movff	fsr0h,??_interruptHandler+4
  1828  001318  CFE1 F009          	movff	fsr1l,??_interruptHandler+5
  1829  00131C  CFE2 F00A          	movff	fsr1h,??_interruptHandler+6
  1830  001320  CFD9 F00B          	movff	fsr2l,??_interruptHandler+7
  1831  001324  CFDA F00C          	movff	fsr2h,??_interruptHandler+8
  1832  001328  CFF3 F00D          	movff	prodl,??_interruptHandler+9
  1833  00132C  CFF4 F00E          	movff	prodh,??_interruptHandler+10
  1834  001330  CFF6 F00F          	movff	tblptrl,??_interruptHandler+11
  1835  001334  CFF7 F010          	movff	tblptrh,??_interruptHandler+12
  1836  001338  CFF8 F011          	movff	tblptru,??_interruptHandler+13
  1837  00133C  CFF5 F012          	movff	tablat,??_interruptHandler+14
  1838  001340  C03F  F013         	movff	btemp,??_interruptHandler+15
  1839  001344  C040  F014         	movff	btemp+1,??_interruptHandler+16
  1840  001348  C041  F015         	movff	btemp+2,??_interruptHandler+17
  1841  00134C  C042  F016         	movff	btemp+3,??_interruptHandler+18
  1842                           
  1843                           ;main.c: 193: if(INT1IF){
  1844  001350  A0F0               	btfss	intcon3,0,c	;volatile
  1845  001352  D01F               	goto	i2l123
  1846                           
  1847                           ;main.c: 197: lcdInst(0xC0);;
  1848  001354  0EC0               	movlw	192
  1849  001356  EC32  F00B         	call	i2_lcdInst
  1850                           
  1851                           ;main.c: 198: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1852  00135A  3881               	swapf	3969,w,c	;volatile
  1853  00135C  0B0F               	andlw	15
  1854  00135E  0B0F               	andlw	15
  1855  001360  6E17               	movwf	interruptHandler@keypress,c
  1856                           
  1857                           ;main.c: 199: putch(keys[keypress]);
  1858  001362  5017               	movf	interruptHandler@keypress,w,c
  1859  001364  0D01               	mullw	1
  1860  001366  0E01               	movlw	low _keys
  1861  001368  24F3               	addwf	prodl,w,c
  1862  00136A  6EF6               	movwf	tblptrl,c
  1863  00136C  0E10               	movlw	high _keys
  1864  00136E  20F4               	addwfc	prodh,w,c
  1865  001370  6EF7               	movwf	tblptrh,c
  1866  001372                     	if	0	;There are less than 3 active tblptr bytes
  1867  001372                     	endif
  1868  001372  0008               	tblrd		*
  1869  001374  50F5               	movf	tablat,w,c
  1870  001376  EC28  F00B         	call	i2_putch
  1871                           
  1872                           ;main.c: 200: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1873  00137A  0E80               	movlw	128
  1874  00137C  EC32  F00B         	call	i2_lcdInst
  1875  001380  0E41               	movlw	65
  1876  001382  6E04               	movwf	??_interruptHandler& (0+255),c
  1877  001384  0EEE               	movlw	238
  1878  001386                     i2u78_47:
  1879  001386  2EE8               	decfsz	wreg,f,c
  1880  001388  D7FE               	bra	i2u78_47
  1881  00138A  2E04               	decfsz	??_interruptHandler& (0+255),f,c
  1882  00138C  D7FC               	bra	i2u78_47
  1883  00138E  D000               	nop2	
  1884                           
  1885                           ;main.c: 202: INT1IF = 0;
  1886  001390  90F0               	bcf	intcon3,0,c	;volatile
  1887  001392                     i2l123:
  1888  001392  C016  F042         	movff	??_interruptHandler+18,btemp+3
  1889  001396  C015  F041         	movff	??_interruptHandler+17,btemp+2
  1890  00139A  C014  F040         	movff	??_interruptHandler+16,btemp+1
  1891  00139E  C013  F03F         	movff	??_interruptHandler+15,btemp
  1892  0013A2  C012  FFF5         	movff	??_interruptHandler+14,tablat
  1893  0013A6  C011  FFF8         	movff	??_interruptHandler+13,tblptru
  1894  0013AA  C010  FFF7         	movff	??_interruptHandler+12,tblptrh
  1895  0013AE  C00F  FFF6         	movff	??_interruptHandler+11,tblptrl
  1896  0013B2  C00E  FFF4         	movff	??_interruptHandler+10,prodh
  1897  0013B6  C00D  FFF3         	movff	??_interruptHandler+9,prodl
  1898  0013BA  C00C  FFDA         	movff	??_interruptHandler+8,fsr2h
  1899  0013BE  C00B  FFD9         	movff	??_interruptHandler+7,fsr2l
  1900  0013C2  C00A  FFE2         	movff	??_interruptHandler+6,fsr1h
  1901  0013C6  C009  FFE1         	movff	??_interruptHandler+5,fsr1l
  1902  0013CA  C008  FFEA         	movff	??_interruptHandler+4,fsr0h
  1903  0013CE  C007  FFE9         	movff	??_interruptHandler+3,fsr0l
  1904  0013D2  C006  FFFB         	movff	??_interruptHandler+2,pclatu
  1905  0013D6  C005  FFFA         	movff	??_interruptHandler+1,pclath
  1906  0013DA  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1907  0013DC  0011               	retfie		f
  1908  0013DE                     __end_of_interruptHandler:
  1909                           	opt stack 0
  1910                           pclatu	equ	0xFFB
  1911                           pclath	equ	0xFFA
  1912                           tblptru	equ	0xFF8
  1913                           tblptrh	equ	0xFF7
  1914                           tblptrl	equ	0xFF6
  1915                           tablat	equ	0xFF5
  1916                           prodh	equ	0xFF4
  1917                           prodl	equ	0xFF3
  1918                           intcon	equ	0xFF2
  1919                           intcon3	equ	0xFF0
  1920                           postinc0	equ	0xFEE
  1921                           fsr0h	equ	0xFEA
  1922                           fsr0l	equ	0xFE9
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           postinc2	equ	0xFDE
  1928                           postdec2	equ	0xFDD
  1929                           fsr2h	equ	0xFDA
  1930                           fsr2l	equ	0xFD9
  1931                           status	equ	0xFD8
  1932                           
  1933 ;; *************** function i2_putch *****************
  1934 ;; Defined at:
  1935 ;;		line 24 in file "lcd.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  data            1    wreg     unsigned char 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  data            1    2[COMRAM] unsigned char 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        1 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    1
  1956 ;; This function calls:
  1957 ;;		i2_lcdNibble
  1958 ;; This function is called by:
  1959 ;;		_interruptHandler
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text10
  1964  001650                     __ptext10:
  1965                           	opt stack 0
  1966  001650                     i2_putch:
  1967                           	opt stack 25
  1968                           
  1969                           ;incstack = 0
  1970                           ;i2putch@data stored from wreg
  1971  001650  6E03               	movwf	i2putch@data,c
  1972                           
  1973                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1974  001652  848C               	bsf	3980,2,c	;volatile
  1975                           
  1976                           ;lcd.c: 33: lcdNibble(data);
  1977  001654  5003               	movf	i2putch@data,w,c
  1978  001656  EC2E  F00A         	call	i2_lcdNibble
  1979                           
  1980                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1981  00165A  0EC8               	movlw	200
  1982  00165C                     i2u79_47:
  1983  00165C  D000               	nop2	
  1984  00165E  2EE8               	decfsz	wreg,f,c
  1985  001660  D7FD               	bra	i2u79_47
  1986  001662  0012               	return		;funcret
  1987  001664                     __end_ofi2_putch:
  1988                           	opt stack 0
  1989                           pclatu	equ	0xFFB
  1990                           pclath	equ	0xFFA
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           prodh	equ	0xFF4
  1996                           prodl	equ	0xFF3
  1997                           intcon	equ	0xFF2
  1998                           intcon3	equ	0xFF0
  1999                           postinc0	equ	0xFEE
  2000                           fsr0h	equ	0xFEA
  2001                           fsr0l	equ	0xFE9
  2002                           wreg	equ	0xFE8
  2003                           postdec1	equ	0xFE5
  2004                           fsr1h	equ	0xFE2
  2005                           fsr1l	equ	0xFE1
  2006                           postinc2	equ	0xFDE
  2007                           postdec2	equ	0xFDD
  2008                           fsr2h	equ	0xFDA
  2009                           fsr2l	equ	0xFD9
  2010                           status	equ	0xFD8
  2011                           
  2012 ;; *************** function i2_lcdInst *****************
  2013 ;; Defined at:
  2014 ;;		line 11 in file "lcd.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  data            1    wreg     unsigned char 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  data            1    2[COMRAM] unsigned char 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2, status,0, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;Total ram usage:        1 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:    1
  2035 ;; This function calls:
  2036 ;;		i2_lcdNibble
  2037 ;; This function is called by:
  2038 ;;		_interruptHandler
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text11
  2043  001664                     __ptext11:
  2044                           	opt stack 0
  2045  001664                     i2_lcdInst:
  2046                           	opt stack 25
  2047                           
  2048                           ;incstack = 0
  2049                           ;i2lcdInst@data stored from wreg
  2050  001664  6E03               	movwf	i2lcdInst@data,c
  2051                           
  2052                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2053  001666  948C               	bcf	3980,2,c	;volatile
  2054                           
  2055                           ;lcd.c: 20: lcdNibble(data);
  2056  001668  5003               	movf	i2lcdInst@data,w,c
  2057  00166A  EC2E  F00A         	call	i2_lcdNibble
  2058                           
  2059                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2060  00166E  0EC8               	movlw	200
  2061  001670                     i2u80_47:
  2062  001670  D000               	nop2	
  2063  001672  2EE8               	decfsz	wreg,f,c
  2064  001674  D7FD               	bra	i2u80_47
  2065  001676  0012               	return		;funcret
  2066  001678                     __end_ofi2_lcdInst:
  2067                           	opt stack 0
  2068                           pclatu	equ	0xFFB
  2069                           pclath	equ	0xFFA
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           tblptrl	equ	0xFF6
  2073                           tablat	equ	0xFF5
  2074                           prodh	equ	0xFF4
  2075                           prodl	equ	0xFF3
  2076                           intcon	equ	0xFF2
  2077                           intcon3	equ	0xFF0
  2078                           postinc0	equ	0xFEE
  2079                           fsr0h	equ	0xFEA
  2080                           fsr0l	equ	0xFE9
  2081                           wreg	equ	0xFE8
  2082                           postdec1	equ	0xFE5
  2083                           fsr1h	equ	0xFE2
  2084                           fsr1l	equ	0xFE1
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function i2_lcdNibble *****************
  2092 ;; Defined at:
  2093 ;;		line 37 in file "lcd.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  data            1    wreg     unsigned char 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  data            1    1[COMRAM] unsigned char 
  2098 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg, status,2, status,0
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;Total ram usage:        2 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		i2_lcdInst
  2118 ;;		i2_putch
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text12
  2123  00145C                     __ptext12:
  2124                           	opt stack 0
  2125  00145C                     i2_lcdNibble:
  2126                           	opt stack 25
  2127                           
  2128                           ;incstack = 0
  2129                           ;i2lcdNibble@data stored from wreg
  2130  00145C  6E02               	movwf	i2lcdNibble@data,c
  2131                           
  2132                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2133  00145E  5002               	movf	i2lcdNibble@data,w,c
  2134  001460  0BF0               	andlw	240
  2135  001462  6E01               	movwf	i2lcdNibble@temp,c
  2136                           
  2137                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2138  001464  508C               	movf	3980,w,c	;volatile
  2139  001466  0B0F               	andlw	15
  2140  001468  6E8C               	movwf	3980,c	;volatile
  2141                           
  2142                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2143  00146A  5001               	movf	i2lcdNibble@temp,w,c
  2144  00146C  108C               	iorwf	3980,w,c	;volatile
  2145  00146E  6E8C               	movwf	3980,c	;volatile
  2146                           
  2147                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2148  001470  0E00               	movlw	0
  2149  001472  BEF2               	btfsc	intcon,7,c	;volatile
  2150  001474  0E01               	movlw	1
  2151  001476  6E39               	movwf	lcd@LCDinterruptState,c
  2152  001478  9EF2               	bcf	intcon,7,c	;volatile
  2153  00147A  868C               	bsf	3980,3,c	;volatile
  2154  00147C  0E53               	movlw	83
  2155  00147E                     i2u81_47:
  2156  00147E  2EE8               	decfsz	wreg,f,c
  2157  001480  D7FE               	bra	i2u81_47
  2158  001482  F000               	nop	
  2159  001484  968C               	bcf	3980,3,c	;volatile
  2160  001486  0EC8               	movlw	200
  2161  001488                     i2u82_47:
  2162  001488  D000               	nop2	
  2163  00148A  2EE8               	decfsz	wreg,f,c
  2164  00148C  D7FD               	bra	i2u82_47
  2165  00148E  B039               	btfsc	lcd@LCDinterruptState,0,c
  2166  001490  D002               	bra	i2u44_45
  2167  001492  9EF2               	bcf	intcon,7,c	;volatile
  2168  001494  D001               	bra	i2u44_46
  2169  001496                     i2u44_45:
  2170  001496  8EF2               	bsf	intcon,7,c	;volatile
  2171  001498                     i2u44_46:
  2172                           
  2173                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2174  001498  3802               	swapf	i2lcdNibble@data,w,c
  2175  00149A  0BF0               	andlw	240
  2176  00149C  6E02               	movwf	i2lcdNibble@data,c
  2177                           
  2178                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2179  00149E  5002               	movf	i2lcdNibble@data,w,c
  2180  0014A0  0BF0               	andlw	240
  2181  0014A2  6E01               	movwf	i2lcdNibble@temp,c
  2182                           
  2183                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2184  0014A4  508C               	movf	3980,w,c	;volatile
  2185  0014A6  0B0F               	andlw	15
  2186  0014A8  6E8C               	movwf	3980,c	;volatile
  2187                           
  2188                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2189  0014AA  5001               	movf	i2lcdNibble@temp,w,c
  2190  0014AC  108C               	iorwf	3980,w,c	;volatile
  2191  0014AE  6E8C               	movwf	3980,c	;volatile
  2192                           
  2193                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2194  0014B0  0E00               	movlw	0
  2195  0014B2  BEF2               	btfsc	intcon,7,c	;volatile
  2196  0014B4  0E01               	movlw	1
  2197  0014B6  6E39               	movwf	lcd@LCDinterruptState,c
  2198  0014B8  9EF2               	bcf	intcon,7,c	;volatile
  2199  0014BA  868C               	bsf	3980,3,c	;volatile
  2200  0014BC  0E53               	movlw	83
  2201  0014BE                     i2u83_47:
  2202  0014BE  2EE8               	decfsz	wreg,f,c
  2203  0014C0  D7FE               	bra	i2u83_47
  2204  0014C2  F000               	nop	
  2205  0014C4  968C               	bcf	3980,3,c	;volatile
  2206  0014C6  0EC8               	movlw	200
  2207  0014C8                     i2u84_47:
  2208  0014C8  D000               	nop2	
  2209  0014CA  2EE8               	decfsz	wreg,f,c
  2210  0014CC  D7FD               	bra	i2u84_47
  2211  0014CE  B039               	btfsc	lcd@LCDinterruptState,0,c
  2212  0014D0  D002               	bra	i2u45_45
  2213  0014D2  9EF2               	bcf	intcon,7,c	;volatile
  2214  0014D4  D001               	bra	i2u45_46
  2215  0014D6                     i2u45_45:
  2216  0014D6  8EF2               	bsf	intcon,7,c	;volatile
  2217  0014D8                     i2u45_46:
  2218  0014D8  0012               	return		;funcret
  2219  0014DA                     __end_ofi2_lcdNibble:
  2220                           	opt stack 0
  2221                           pclatu	equ	0xFFB
  2222                           pclath	equ	0xFFA
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           intcon	equ	0xFF2
  2230                           intcon3	equ	0xFF0
  2231                           postinc0	equ	0xFEE
  2232                           fsr0h	equ	0xFEA
  2233                           fsr0l	equ	0xFE9
  2234                           wreg	equ	0xFE8
  2235                           postdec1	equ	0xFE5
  2236                           fsr1h	equ	0xFE2
  2237                           fsr1l	equ	0xFE1
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           fsr2h	equ	0xFDA
  2241                           fsr2l	equ	0xFD9
  2242                           status	equ	0xFD8
  2243                           pclatu	equ	0xFFB
  2244                           pclath	equ	0xFFA
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           prodh	equ	0xFF4
  2250                           prodl	equ	0xFF3
  2251                           intcon	equ	0xFF2
  2252                           intcon3	equ	0xFF0
  2253                           postinc0	equ	0xFEE
  2254                           fsr0h	equ	0xFEA
  2255                           fsr0l	equ	0xFE9
  2256                           wreg	equ	0xFE8
  2257                           postdec1	equ	0xFE5
  2258                           fsr1h	equ	0xFE2
  2259                           fsr1l	equ	0xFE1
  2260                           postinc2	equ	0xFDE
  2261                           postdec2	equ	0xFDD
  2262                           fsr2h	equ	0xFDA
  2263                           fsr2l	equ	0xFD9
  2264                           status	equ	0xFD8
  2265                           
  2266                           	psect	rparam
  2267  0000                     pclatu	equ	0xFFB
  2268                           pclath	equ	0xFFA
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           prodh	equ	0xFF4
  2274                           prodl	equ	0xFF3
  2275                           intcon	equ	0xFF2
  2276                           intcon3	equ	0xFF0
  2277                           postinc0	equ	0xFEE
  2278                           fsr0h	equ	0xFEA
  2279                           fsr0l	equ	0xFE9
  2280                           wreg	equ	0xFE8
  2281                           postdec1	equ	0xFE5
  2282                           fsr1h	equ	0xFE2
  2283                           fsr1l	equ	0xFE1
  2284                           postinc2	equ	0xFDE
  2285                           postdec2	equ	0xFDD
  2286                           fsr2h	equ	0xFDA
  2287                           fsr2l	equ	0xFD9
  2288                           status	equ	0xFD8
  2289                           
  2290                           	psect	temp
  2291  00003F                     btemp:
  2292                           	opt stack 0
  2293  00003F                     	ds	1
  2294  0000                     int$flags	set	btemp
  2295  0000                     wtemp6	set	btemp+1
  2296                           pclatu	equ	0xFFB
  2297                           pclath	equ	0xFFA
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           prodh	equ	0xFF4
  2303                           prodl	equ	0xFF3
  2304                           intcon	equ	0xFF2
  2305                           intcon3	equ	0xFF0
  2306                           postinc0	equ	0xFEE
  2307                           fsr0h	equ	0xFEA
  2308                           fsr0l	equ	0xFE9
  2309                           wreg	equ	0xFE8
  2310                           postdec1	equ	0xFE5
  2311                           fsr1h	equ	0xFE2
  2312                           fsr1l	equ	0xFE1
  2313                           postinc2	equ	0xFDE
  2314                           postdec2	equ	0xFDD
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    36
    Data        4
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     50      62
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_lcdInst
    _interruptHandler->i2_putch
    i2_putch->i2_lcdNibble
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1666
                                             47 COMRAM     3     3      0
                            _initLCD
                            _lcdInst
                             _printf
                              _putch
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1329
                                             35 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                             25 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             30 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             26 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             25 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    20    20      0     293
                                              3 COMRAM    20    20      0
                          i2_lcdInst
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _putch
     _lcdNibble
   _readADC

 _interruptHandler (ROOT)
   i2_lcdInst
     i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     32      3E       1       49.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E      34        0.0%
DATA                 0      0      3E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 26 16:07:30 2018

                        _i 0037                         l93 1068                         l94 10F8  
                       l98 1150                         u15 1418                         u16 141A  
                       u25 1458                         u26 145A                __CFG_CPD$ON 000000  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                        l210 1296  
                      l211 12E4                        l212 129C                        l204 122C  
                      l206 1254                        l128 160C                        l620 14F0  
                      l197 11F2                        l630 1586                        l198 1202  
                      l623 1518                        l624 1522                        l633 15A6  
                      l634 15B0                        l619 14F8                        l629 158E  
             __CFG_CPB$OFF 000000                        u420 1592                        u500 1284  
                      u520 12EC                        u390 14FC                        u617 1094  
                      u707 1634                        u627 10AC                        u717 1532  
                      u637 10EA                        u727 1566                        u647 112E  
                      u737 1648                        u657 1146                        u747 1400  
                      u667 116E                        u757 140A                        u677 1186  
                      u767 1440                        u687 11C4                        u777 144A  
                      u697 11DC                        _max 003B                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1313 1258  
                     _ADON 007E10                       STR_1 1025                       STR_2 102F  
                     STR_3 102F                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     _main 1034   __end_of_interruptHandler 13DE                       _keys 1001  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 003F                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000            __end_ofi2_putch 1664  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                i2_lcdNibble 145C  
         __end_of_LCD_LEFT 1020                      ?_main 0001            __end_of___lwdiv 152C  
          __end_of___lwmod 15BA                      i2l123 1392                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 1650             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 1628            __end_of_initLCD 1578  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers 101C                      _array 101C  
                    _putch 1628                      pclath 000FFA                      tablat 000FF5  
        _LCDinterruptState 003A                      status 000FD8                      wtemp6 0040  
           __CFG_PBADEN$ON 000000            __initialization 15BA         __size_ofi2_lcdInst 0014  
             __end_of_main 11E8               __end_of_keys 1012             __CFG_OSC$HSPLL 000000  
        __end_of_LCD_RIGHT 1021                     ??_main 0030              __activetblptr 000002  
                   _ADCON0 000FC2                     _ADCON1 000FC1                     _ADRESH 000FC4  
                   _ADRESL 000FC3            i2lcdNibble@data 0002                     ?_putch 0001  
          i2lcdNibble@temp 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                ??i2_putch 0003             __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000  
                ??___lwdiv 001C                  ??___lwmod 0023                     clear_0 15E0  
                ??_lcdInst 001A                     _printf 11E8                  ??_readADC 001A  
                ??_initLCD 001B               __pdataCOMRAM 003B               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
        __end_ofi2_lcdInst 1678                 __accesstop 0080    __end_of__initialization 15E6  
            ___rparam_used 000001             __pcstackCOMRAM 0001              __end_of_array 101F  
            __end_of_putch 163C         __size_of_lcdNibble 007E                i2putch@data 0003  
                  ??_putch 001A          ?_interruptHandler 0001         ??_interruptHandler 0004  
             ?i2_lcdNibble 0001                    ?_printf 0024                    i2u44_45 1496  
                  i2u44_46 1498                    i2u45_45 14D6                    i2u45_46 14D8  
                  i2u80_47 1670                    i2u81_47 147E                    i2u82_47 1488  
                  i2u83_47 14BE                    i2u84_47 14C8                    i2u78_47 1386  
                  i2u79_47 165C       lcd@LCDinterruptState 0039                    i2_putch 1650  
        __end_of_lcdNibble 145C                    __Hparam 0000                    __Lparam 0000  
                  ___lwdiv 14DA                    ___lwmod 1578               __psmallconst 1000  
 interruptHandler@keypress 0017                    __pcinit 15BA                    __ramtop 1000  
                  _lcdInst 163C                    __ptext0 1034                    __ptext1 15F4  
                  __ptext2 11E8                    __ptext3 1628                    __ptext4 1578  
                  __ptext5 14DA                    __ptext6 152C                    __ptext7 163C  
                  __ptext8 13DE            __size_of_printf 011E                    _readADC 15F4  
                  _initLCD 152C                    _counter 0033                    _dpowers 1012  
                _LCD_RIGHT 1020             __pintcode_body 1306       end_of_initialization 15E6  
    __end_of_LCD_SIZE_HORZ 1023      __end_of_LCD_SIZE_VERT 1022              __Lmediumconst 0000  
                  int_func 1306                    printf@c 002F                    printf@f 0024  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                  _PORTAbits 000F80                  _TRISAbits 000F92  
                _TRISDbits 000F95                 _white_tape 003D                  i2_lcdInst 1664  
     __size_ofi2_lcdNibble 007E              __pidataCOMRAM 1678              i2lcdInst@data 0003  
           __end_of_printf 1306        start_initialization 15BA                 ?i2_lcdInst 0001  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0028              _analog_result 0035  
__size_of_interruptHandler 13D6                __pbssCOMRAM 0033                   ?i2_putch 0001  
         ___lwdiv@dividend 0018          __CFG_CCP2MX$PORTC 000000                  __pintcode 0008  
                _lcdNibble 13DE                   ?___lwdiv 0018                   ?___lwmod 001F  
                 ?_lcdInst 0001                   ?_readADC 0018                   ?_initLCD 0001  
              __smallconst 1000           ___lwdiv@quotient 001C             __size_of_putch 0014  
                 _LCD_LEFT 101F                ??i2_lcdInst 0003                   _LATDbits 000F8C  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001                 _ADCON0bits 000FC2  
            lcdNibble@data 0019                 printf@flag 002B              lcdNibble@temp 0018  
               printf@prec 002C                  main@input 0032             _LCD_HORZ_LIMIT 1024  
                copy_data0 15CE           __size_ofi2_putch 0014                   __Hrparam 0000  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000           __size_of___lwdiv 0052  
         __size_of___lwmod 0042             readADC@channel 001C           _interruptHandler 0008  
         __size_of_lcdInst 0014           __size_of_readADC 0034           __size_of_initLCD 004C  
   __end_of_LCD_HORZ_LIMIT 1025            ___lwdiv@divisor 001A            ___lwdiv@counter 001E  
                 __ptext10 1650                   __ptext11 1664                   __ptext12 145C  
           _LCD_VERT_LIMIT 1023              __size_of_main 01B4              ??i2_lcdNibble 0001  
              ??_lcdNibble 0018                   int$flags 003F                  printf@val 002D  
                putch@data 001A                 _INTCONbits 000FF2     __end_of_LCD_VERT_LIMIT 1024  
                 intlevel2 0000              _LCD_SIZE_HORZ 1022           ___lwmod@dividend 001F  
            _LCD_SIZE_VERT 1021                   printf@ap 0029                lcdInst@data 001A  
      __end_ofi2_lcdNibble 14DA            ___lwmod@divisor 0021            ___lwmod@counter 0023  
