

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 10:58:50 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4620 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	smallconst
    68  001000                     __psmallconst:
    69                           	opt stack 0
    70  001000  00                 	db	0
    71  001001                     _keys:
    72                           	opt stack 0
    73  001001  31                 	db	49
    74  001002  32                 	db	50
    75  001003  33                 	db	51
    76  001004  41                 	db	65
    77  001005  34                 	db	52
    78  001006  35                 	db	53
    79  001007  36                 	db	54
    80  001008  42                 	db	66
    81  001009  37                 	db	55
    82  00100A  38                 	db	56
    83  00100B  39                 	db	57
    84  00100C  43                 	db	67
    85  00100D  2A                 	db	42
    86  00100E  30                 	db	48
    87  00100F  23                 	db	35
    88  001010  44                 	db	68
    89  001011  00                 	db	0
    90  001012                     __end_of_keys:
    91                           	opt stack 0
    92  001012                     _dpowers:
    93                           	opt stack 0
    94  001012  0001               	dw	1
    95  001014  000A               	dw	10
    96  001016  0064               	dw	100
    97  001018  03E8               	dw	1000
    98  00101A  2710               	dw	10000
    99  00101C                     __end_of_dpowers:
   100                           	opt stack 0
   101  00101C                     _hexpowers:
   102                           	opt stack 0
   103  00101C  0001               	dw	1
   104  00101E  0010               	dw	16
   105  001020  0100               	dw	256
   106  001022  1000               	dw	4096
   107  001024                     __end_of_hexpowers:
   108                           	opt stack 0
   109  001024                     _happynewyear:
   110                           	opt stack 0
   111  001024  45                 	db	69
   112  001025  14                 	db	20
   113  001026  14                 	db	20
   114  001027  00                 	db	0
   115  001028  11                 	db	17
   116  001029  03                 	db	3
   117  00102A  18                 	db	24
   118  00102B                     __end_of_happynewyear:
   119                           	opt stack 0
   120  00102B                     _LCD_LEFT:
   121                           	opt stack 0
   122  00102B  00                 	db	0
   123  00102C                     __end_of_LCD_LEFT:
   124                           	opt stack 0
   125  00102C                     _LCD_RIGHT:
   126                           	opt stack 0
   127  00102C  01                 	db	1
   128  00102D                     __end_of_LCD_RIGHT:
   129                           	opt stack 0
   130  00102D                     _LCD_SIZE_VERT:
   131                           	opt stack 0
   132  00102D  02                 	db	2
   133  00102E                     __end_of_LCD_SIZE_VERT:
   134                           	opt stack 0
   135  00102E                     _LCD_SIZE_HORZ:
   136                           	opt stack 0
   137  00102E  10                 	db	16
   138  00102F                     __end_of_LCD_SIZE_HORZ:
   139                           	opt stack 0
   140  00102F                     _LCD_VERT_LIMIT:
   141                           	opt stack 0
   142  00102F  02                 	db	2
   143  001030                     __end_of_LCD_VERT_LIMIT:
   144                           	opt stack 0
   145  001030                     _LCD_HORZ_LIMIT:
   146                           	opt stack 0
   147  001030  28                 	db	40
   148  001031                     __end_of_LCD_HORZ_LIMIT:
   149                           	opt stack 0
   150  0000                     _LATDbits	set	3980
   151  0000                     _SSPBUF	set	4041
   152  0000                     _SSPCON2bits	set	4037
   153  0000                     _SSPADD	set	4040
   154  0000                     _SSPCON2	set	4037
   155  0000                     _SSPCON1	set	4038
   156  0000                     _SSPSTAT	set	4039
   157  0000                     _TRISCbits	set	3988
   158  0000                     _SSPCON1bits	set	4038
   159  0000                     _INTCONbits	set	4082
   160  0000                     _ADCON1	set	4033
   161  0000                     _ADCON0	set	4034
   162  0000                     _TRISE	set	3990
   163  0000                     _TRISD	set	3989
   164  0000                     _TRISC	set	3988
   165  0000                     _TRISB	set	3987
   166  0000                     _TRISA	set	3986
   167  0000                     _LATE	set	3981
   168  0000                     _LATD	set	3980
   169  0000                     _LATC	set	3979
   170  0000                     _LATB	set	3978
   171  0000                     _LATA	set	3977
   172  001031                     STR_4:
   173  001031  30                 	db	48	;'0'
   174  001032  31                 	db	49	;'1'
   175  001033  32                 	db	50	;'2'
   176  001034  33                 	db	51	;'3'
   177  001035  34                 	db	52	;'4'
   178  001036  35                 	db	53	;'5'
   179  001037  36                 	db	54	;'6'
   180  001038  37                 	db	55	;'7'
   181  001039  38                 	db	56	;'8'
   182  00103A  39                 	db	57	;'9'
   183  00103B  61                 	db	97	;'a'
   184  00103C  62                 	db	98	;'b'
   185  00103D  63                 	db	99	;'c'
   186  00103E  64                 	db	100	;'d'
   187  00103F  65                 	db	101	;'e'
   188  001040  66                 	db	102	;'f'
   189  001041  00                 	db	0
   190  001042                     STR_2:
   191  001042  25                 	db	37
   192  001043  30                 	db	48	;'0'
   193  001044  32                 	db	50	;'2'
   194  001045  78                 	db	120	;'x'
   195  001046  2F                 	db	47
   196  001047  25                 	db	37
   197  001048  30                 	db	48	;'0'
   198  001049  32                 	db	50	;'2'
   199  00104A  78                 	db	120	;'x'
   200  00104B  2F                 	db	47
   201  00104C  25                 	db	37
   202  00104D  30                 	db	48	;'0'
   203  00104E  32                 	db	50	;'2'
   204  00104F  78                 	db	120	;'x'
   205  001050  00                 	db	0
   206  001051                     STR_3:
   207  001051  25                 	db	37
   208  001052  30                 	db	48	;'0'
   209  001053  32                 	db	50	;'2'
   210  001054  78                 	db	120	;'x'
   211  001055  3A                 	db	58	;':'
   212  001056  25                 	db	37
   213  001057  30                 	db	48	;'0'
   214  001058  32                 	db	50	;'2'
   215  001059  78                 	db	120	;'x'
   216  00105A  3A                 	db	58	;':'
   217  00105B  25                 	db	37
   218  00105C  30                 	db	48	;'0'
   219  00105D  32                 	db	50	;'2'
   220  00105E  78                 	db	120	;'x'
   221  00105F  00                 	db	0
   222  001060                     STR_1:
   223  001060  25                 	db	37
   224  001061  64                 	db	100	;'d'
   225  001062  2C                 	db	44
   226  001063  25                 	db	37
   227  001064  64                 	db	100	;'d'
   228  001065  2C                 	db	44
   229  001066  25                 	db	37
   230  001067  64                 	db	100	;'d'
   231  001068  00                 	db	0
   232                           
   233                           ; #config settings
   234  001069  00                 	db	0	; dummy byte at the end
   235  0000                     
   236                           	psect	cinit
   237  001AF0                     __pcinit:
   238                           	opt stack 0
   239  001AF0                     start_initialization:
   240                           	opt stack 0
   241  001AF0                     __initialization:
   242                           	opt stack 0
   243                           
   244                           ; Clear objects allocated to COMRAM (28 bytes)
   245  001AF0  EE00  F027         	lfsr	0,__pbssCOMRAM
   246  001AF4  0E1C               	movlw	28
   247  001AF6                     clear_0:
   248  001AF6  6AEE               	clrf	postinc0,c
   249  001AF8  06E8               	decf	wreg,f,c
   250  001AFA  E1FD               	bnz	clear_0
   251  001AFC                     end_of_initialization:
   252                           	opt stack 0
   253  001AFC                     __end_of__initialization:
   254                           	opt stack 0
   255  001AFC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   256  001AFE  6EF8               	movwf	tblptru,c
   257  001B00  0100               	movlb	0
   258  001B02  EFBB  F009         	goto	_main	;jump to C main() function
   259                           tblptru	equ	0xFF8
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	bssCOMRAM
   264  000027                     __pbssCOMRAM:
   265                           	opt stack 0
   266  000027                     _time:
   267                           	opt stack 0
   268  000027                     	ds	7
   269  00002E                     _operation_time:
   270                           	opt stack 0
   271  00002E                     	ds	2
   272  000030                     _final_time:
   273                           	opt stack 0
   274  000030                     	ds	2
   275  000032                     _sec_final:
   276                           	opt stack 0
   277  000032                     	ds	2
   278  000034                     _min_final:
   279                           	opt stack 0
   280  000034                     	ds	2
   281  000036                     _hr_final:
   282                           	opt stack 0
   283  000036                     	ds	2
   284  000038                     _initial_time:
   285                           	opt stack 0
   286  000038                     	ds	2
   287  00003A                     _sec_initial:
   288                           	opt stack 0
   289  00003A                     	ds	2
   290  00003C                     _min_initial:
   291                           	opt stack 0
   292  00003C                     	ds	2
   293  00003E                     _hr_initial:
   294                           	opt stack 0
   295  00003E                     	ds	2
   296  000040                     lcd@LCDinterruptState:
   297                           	opt stack 0
   298  000040                     	ds	1
   299  000041                     _i:
   300                           	opt stack 0
   301  000041                     	ds	1
   302  000042                     	ds	1
   303                           tblptru	equ	0xFF8
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           
   307                           	psect	cstackCOMRAM
   308  000001                     __pcstackCOMRAM:
   309                           	opt stack 0
   310  000001                     ??_isdigit:
   311  000001                     ??_I2C_Master_Wait:
   312  000001                     ?___awdiv:
   313                           	opt stack 0
   314  000001                     ?___lwdiv:
   315                           	opt stack 0
   316  000001                     ?___lldiv:
   317                           	opt stack 0
   318  000001                     lcdNibble@temp:
   319                           	opt stack 0
   320  000001                     ___awdiv@dividend:
   321                           	opt stack 0
   322  000001                     ___lwdiv@dividend:
   323                           	opt stack 0
   324  000001                     ___lldiv@dividend:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0x0
   328  000001                     	ds	1
   329  000002                     I2C_Master_Read@ackBit:
   330                           	opt stack 0
   331  000002                     lcdNibble@data:
   332                           	opt stack 0
   333  000002                     _isdigit$663:
   334                           	opt stack 0
   335  000002                     I2C_Master_Write@byteToWrite:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x1
   339  000002                     	ds	1
   340  000003                     I2C_Master_Read@receivedByte:
   341                           	opt stack 0
   342  000003                     lcdInst@data:
   343                           	opt stack 0
   344  000003                     putch@data:
   345                           	opt stack 0
   346  000003                     isdigit@c:
   347                           	opt stack 0
   348  000003                     ___awdiv@divisor:
   349                           	opt stack 0
   350  000003                     ___lwdiv@divisor:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x2
   354  000003                     	ds	1
   355  000004                     ??_initLCD:
   356  000004                     
   357                           ; 1 bytes @ 0x3
   358  000004                     	ds	1
   359  000005                     ___awdiv@counter:
   360                           	opt stack 0
   361  000005                     ___lwdiv@quotient:
   362                           	opt stack 0
   363  000005                     ___lldiv@divisor:
   364                           	opt stack 0
   365                           
   366                           ; 4 bytes @ 0x4
   367  000005                     	ds	1
   368  000006                     ___awdiv@sign:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x5
   372  000006                     	ds	1
   373  000007                     ___lwdiv@counter:
   374                           	opt stack 0
   375  000007                     ___awdiv@quotient:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x6
   379  000007                     	ds	1
   380  000008                     ?___lwmod:
   381                           	opt stack 0
   382  000008                     ___lwmod@dividend:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x7
   386  000008                     	ds	1
   387  000009                     ?___wmul:
   388                           	opt stack 0
   389  000009                     ___wmul@multiplier:
   390                           	opt stack 0
   391  000009                     ___lldiv@quotient:
   392                           	opt stack 0
   393                           
   394                           ; 4 bytes @ 0x8
   395  000009                     	ds	1
   396  00000A                     ___lwmod@divisor:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x9
   400  00000A                     	ds	1
   401  00000B                     ___wmul@multiplicand:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0xA
   405  00000B                     	ds	1
   406  00000C                     ___lwmod@counter:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0xB
   410  00000C                     	ds	1
   411  00000D                     ___lldiv@counter:
   412                           	opt stack 0
   413  00000D                     ___wmul@product:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0xC
   417  00000D                     	ds	1
   418  00000E                     I2C_Master_Init@clockFreq:
   419                           	opt stack 0
   420                           
   421                           ; 4 bytes @ 0xD
   422  00000E                     	ds	1
   423  00000F                     ??_get_RTC_initial:
   424  00000F                     ??_get_RTC_final:
   425  00000F                     ?_printf:
   426                           	opt stack 0
   427  00000F                     printf@f:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0xE
   431  00000F                     	ds	3
   432  000012                     ??_I2C_Master_Init:
   433                           
   434                           ; 1 bytes @ 0x11
   435  000012                     	ds	5
   436  000017                     ??_printf:
   437                           
   438                           ; 1 bytes @ 0x16
   439  000017                     	ds	4
   440  00001B                     printf@idx:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x1A
   444  00001B                     	ds	1
   445  00001C                     printf@ap:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x1B
   449  00001C                     	ds	2
   450  00001E                     printf@prec:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1D
   454  00001E                     	ds	1
   455  00001F                     printf@val:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x1E
   459  00001F                     	ds	2
   460  000021                     printf@flag:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x20
   464  000021                     	ds	1
   465  000022                     printf@width:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x21
   469  000022                     	ds	2
   470  000024                     printf@c:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x23
   474  000024                     	ds	1
   475  000025                     ??_main:
   476                           
   477                           ; 1 bytes @ 0x24
   478  000025                     	ds	2
   479                           tblptru	equ	0xFF8
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           
   483 ;;
   484 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   485 ;;
   486 ;; *************** function _main *****************
   487 ;; Defined at:
   488 ;;		line 61 in file "main.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;		None
   491 ;; Auto vars:     Size  Location     Type
   492 ;;		None
   493 ;; Return value:  Size  Location     Type
   494 ;;                  1    wreg      void 
   495 ;; Registers used:
   496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;Total ram usage:        2 bytes
   507 ;; Hardware stack levels required when called:    3
   508 ;; This function calls:
   509 ;;		_I2C_Master_Init
   510 ;;		___wmul
   511 ;;		_get_RTC_final
   512 ;;		_get_RTC_initial
   513 ;;		_initLCD
   514 ;;		_lcdInst
   515 ;;		_printf
   516 ;; This function is called by:
   517 ;;		Startup code after reset
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text0
   522  001376                     __ptext0:
   523                           	opt stack 0
   524  001376                     _main:
   525                           	opt stack 28
   526                           
   527                           ;main.c: 67: LATA = 0x00;
   528                           
   529                           ;incstack = 0
   530  001376  0E00               	movlw	0
   531  001378  6E89               	movwf	3977,c	;volatile
   532                           
   533                           ;main.c: 68: LATB = 0x00;
   534  00137A  0E00               	movlw	0
   535  00137C  6E8A               	movwf	3978,c	;volatile
   536                           
   537                           ;main.c: 69: LATC = 0x00;
   538  00137E  0E00               	movlw	0
   539  001380  6E8B               	movwf	3979,c	;volatile
   540                           
   541                           ;main.c: 70: LATD = 0x00;
   542  001382  0E00               	movlw	0
   543  001384  6E8C               	movwf	3980,c	;volatile
   544                           
   545                           ;main.c: 71: LATE = 0x00;
   546  001386  0E00               	movlw	0
   547  001388  6E8D               	movwf	3981,c	;volatile
   548                           
   549                           ;main.c: 75: TRISA = 0xFF;
   550  00138A  6892               	setf	3986,c	;volatile
   551                           
   552                           ;main.c: 76: TRISB = 0xFF;
   553  00138C  6893               	setf	3987,c	;volatile
   554                           
   555                           ;main.c: 77: TRISC = 0b10000000;
   556  00138E  0E80               	movlw	128
   557  001390  6E94               	movwf	3988,c	;volatile
   558                           
   559                           ;main.c: 81: TRISD = 0x00;
   560  001392  0E00               	movlw	0
   561  001394  6E95               	movwf	3989,c	;volatile
   562                           
   563                           ;main.c: 82: TRISE = 0x00;
   564  001396  0E00               	movlw	0
   565  001398  6E96               	movwf	3990,c	;volatile
   566                           
   567                           ;main.c: 85: ADCON0 = 0x00;
   568  00139A  0E00               	movlw	0
   569  00139C  6EC2               	movwf	4034,c	;volatile
   570                           
   571                           ;main.c: 86: ADCON1 = 0b00001111;
   572  00139E  0E0F               	movlw	15
   573  0013A0  6EC1               	movwf	4033,c	;volatile
   574                           
   575                           ;main.c: 90: initLCD();
   576  0013A2  ECFD  F00C         	call	_initLCD	;wreg free
   577                           
   578                           ;main.c: 91: _delay((unsigned long)((100)*(40000000/4000.0)));
   579  0013A6  0E06               	movlw	6
   580  0013A8  6E26               	movwf	(??_main+1)& (0+255),c
   581  0013AA  0E13               	movlw	19
   582  0013AC  6E25               	movwf	??_main& (0+255),c
   583  0013AE  0EAE               	movlw	174
   584  0013B0                     u1067:
   585  0013B0  2EE8               	decfsz	wreg,f,c
   586  0013B2  D7FE               	bra	u1067
   587  0013B4  2E25               	decfsz	??_main& (0+255),f,c
   588  0013B6  D7FC               	bra	u1067
   589  0013B8  2E26               	decfsz	(??_main+1)& (0+255),f,c
   590  0013BA  D7FA               	bra	u1067
   591                           
   592                           ;main.c: 92: I2C_Master_Init(100000);
   593  0013BC  0EA0               	movlw	160
   594  0013BE  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   595  0013C0  0E86               	movlw	134
   596  0013C2  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   597  0013C4  0E01               	movlw	1
   598  0013C6  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   599  0013C8  0E00               	movlw	0
   600  0013CA  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   601  0013CC  ECA6  F00C         	call	_I2C_Master_Init	;wreg free
   602                           
   603                           ;main.c: 93: (INTCONbits.GIE = 0);
   604  0013D0  9EF2               	bcf	intcon,7,c	;volatile
   605                           
   606                           ;main.c: 104: get_RTC_initial();
   607  0013D2  ECD0  F00A         	call	_get_RTC_initial	;wreg free
   608                           
   609                           ;main.c: 106: initLCD();
   610  0013D6  ECFD  F00C         	call	_initLCD	;wreg free
   611                           
   612                           ;main.c: 108: _delay((unsigned long)((300)*(40000000/4000.0)));
   613  0013DA  0E10               	movlw	16
   614  0013DC  6E26               	movwf	(??_main+1)& (0+255),c
   615  0013DE  0E39               	movlw	57
   616  0013E0  6E25               	movwf	??_main& (0+255),c
   617  0013E2  0E0E               	movlw	14
   618  0013E4                     u1077:
   619  0013E4  2EE8               	decfsz	wreg,f,c
   620  0013E6  D7FE               	bra	u1077
   621  0013E8  2E25               	decfsz	??_main& (0+255),f,c
   622  0013EA  D7FC               	bra	u1077
   623  0013EC  2E26               	decfsz	(??_main+1)& (0+255),f,c
   624  0013EE  D7FA               	bra	u1077
   625                           
   626                           ;main.c: 110: _delay((unsigned long)((4000)*(40000000/4000.0)));
   627  0013F0  0ECB               	movlw	203
   628  0013F2  6E26               	movwf	(??_main+1)& (0+255),c
   629  0013F4  0EEC               	movlw	236
   630  0013F6  6E25               	movwf	??_main& (0+255),c
   631  0013F8  0E84               	movlw	132
   632  0013FA                     u1087:
   633  0013FA  2EE8               	decfsz	wreg,f,c
   634  0013FC  D7FE               	bra	u1087
   635  0013FE  2E25               	decfsz	??_main& (0+255),f,c
   636  001400  D7FC               	bra	u1087
   637  001402  2E26               	decfsz	(??_main+1)& (0+255),f,c
   638  001404  D7FA               	bra	u1087
   639  001406  D000               	nop2	
   640                           
   641                           ;main.c: 111: _delay((unsigned long)((4000)*(40000000/4000.0)));
   642  001408  0ECB               	movlw	203
   643  00140A  6E26               	movwf	(??_main+1)& (0+255),c
   644  00140C  0EEC               	movlw	236
   645  00140E  6E25               	movwf	??_main& (0+255),c
   646  001410  0E84               	movlw	132
   647  001412                     u1097:
   648  001412  2EE8               	decfsz	wreg,f,c
   649  001414  D7FE               	bra	u1097
   650  001416  2E25               	decfsz	??_main& (0+255),f,c
   651  001418  D7FC               	bra	u1097
   652  00141A  2E26               	decfsz	(??_main+1)& (0+255),f,c
   653  00141C  D7FA               	bra	u1097
   654  00141E  D000               	nop2	
   655                           
   656                           ;main.c: 114: get_RTC_final();
   657  001420  EC5A  F00B         	call	_get_RTC_final	;wreg free
   658                           
   659                           ;main.c: 118: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
   660  001424  C03E  F009         	movff	_hr_initial,___wmul@multiplier
   661  001428  C03F  F00A         	movff	_hr_initial+1,___wmul@multiplier+1
   662  00142C  0E0E               	movlw	14
   663  00142E  6E0C               	movwf	___wmul@multiplicand+1,c
   664  001430  0E10               	movlw	16
   665  001432  6E0B               	movwf	___wmul@multiplicand,c
   666  001434  EC44  F00D         	call	___wmul	;wreg free
   667  001438  C009  F025         	movff	?___wmul,??_main
   668  00143C  C00A  F026         	movff	?___wmul+1,??_main+1
   669  001440  C03C  F009         	movff	_min_initial,___wmul@multiplier
   670  001444  C03D  F00A         	movff	_min_initial+1,___wmul@multiplier+1
   671  001448  0E00               	movlw	0
   672  00144A  6E0C               	movwf	___wmul@multiplicand+1,c
   673  00144C  0E3C               	movlw	60
   674  00144E  6E0B               	movwf	___wmul@multiplicand,c
   675  001450  EC44  F00D         	call	___wmul	;wreg free
   676  001454  5009               	movf	?___wmul,w,c
   677  001456  2625               	addwf	??_main,f,c
   678  001458  500A               	movf	?___wmul+1,w,c
   679  00145A  2226               	addwfc	??_main+1,f,c
   680  00145C  503A               	movf	_sec_initial,w,c
   681  00145E  2425               	addwf	??_main,w,c
   682  001460  6E38               	movwf	_initial_time,c
   683  001462  503B               	movf	_sec_initial+1,w,c
   684  001464  2026               	addwfc	??_main+1,w,c
   685  001466  6E39               	movwf	_initial_time+1,c
   686                           
   687                           ;main.c: 119: final_time = hr_final*3600 + min_final*60 + sec_final;
   688  001468  C036  F009         	movff	_hr_final,___wmul@multiplier
   689  00146C  C037  F00A         	movff	_hr_final+1,___wmul@multiplier+1
   690  001470  0E0E               	movlw	14
   691  001472  6E0C               	movwf	___wmul@multiplicand+1,c
   692  001474  0E10               	movlw	16
   693  001476  6E0B               	movwf	___wmul@multiplicand,c
   694  001478  EC44  F00D         	call	___wmul	;wreg free
   695  00147C  C009  F025         	movff	?___wmul,??_main
   696  001480  C00A  F026         	movff	?___wmul+1,??_main+1
   697  001484  C034  F009         	movff	_min_final,___wmul@multiplier
   698  001488  C035  F00A         	movff	_min_final+1,___wmul@multiplier+1
   699  00148C  0E00               	movlw	0
   700  00148E  6E0C               	movwf	___wmul@multiplicand+1,c
   701  001490  0E3C               	movlw	60
   702  001492  6E0B               	movwf	___wmul@multiplicand,c
   703  001494  EC44  F00D         	call	___wmul	;wreg free
   704  001498  5009               	movf	?___wmul,w,c
   705  00149A  2625               	addwf	??_main,f,c
   706  00149C  500A               	movf	?___wmul+1,w,c
   707  00149E  2226               	addwfc	??_main+1,f,c
   708  0014A0  5032               	movf	_sec_final,w,c
   709  0014A2  2425               	addwf	??_main,w,c
   710  0014A4  6E30               	movwf	_final_time,c
   711  0014A6  5033               	movf	_sec_final+1,w,c
   712  0014A8  2026               	addwfc	??_main+1,w,c
   713  0014AA  6E31               	movwf	_final_time+1,c
   714                           
   715                           ;main.c: 120: operation_time = final_time - initial_time;
   716  0014AC  C038  F025         	movff	_initial_time,??_main
   717  0014B0  C039  F026         	movff	_initial_time+1,??_main+1
   718  0014B4  1E25               	comf	??_main,f,c
   719  0014B6  1E26               	comf	??_main+1,f,c
   720  0014B8  4A25               	infsnz	??_main,f,c
   721  0014BA  2A26               	incf	??_main+1,f,c
   722  0014BC  5030               	movf	_final_time,w,c
   723  0014BE  2425               	addwf	??_main,w,c
   724  0014C0  6E2E               	movwf	_operation_time,c
   725  0014C2  5031               	movf	_final_time+1,w,c
   726  0014C4  2026               	addwfc	??_main+1,w,c
   727  0014C6  6E2F               	movwf	_operation_time+1,c
   728                           
   729                           ;main.c: 121: initLCD();
   730  0014C8  ECFD  F00C         	call	_initLCD	;wreg free
   731                           
   732                           ;main.c: 125: printf("%d,%d,%d",initial_time,final_time,operation_time);
   733  0014CC  0E60               	movlw	low STR_1
   734  0014CE  6E0F               	movwf	printf@f,c
   735  0014D0  0E10               	movlw	high STR_1
   736  0014D2  6E10               	movwf	printf@f+1,c
   737  0014D4  C038  F011         	movff	_initial_time,?_printf+2
   738  0014D8  C039  F012         	movff	_initial_time+1,?_printf+3
   739  0014DC  C030  F013         	movff	_final_time,?_printf+4
   740  0014E0  C031  F014         	movff	_final_time+1,?_printf+5
   741  0014E4  C02E  F015         	movff	_operation_time,?_printf+6
   742  0014E8  C02F  F016         	movff	_operation_time+1,?_printf+7
   743  0014EC  EC35  F008         	call	_printf	;wreg free
   744                           
   745                           ;main.c: 126: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   746  0014F0  0E80               	movlw	128
   747  0014F2  EC8D  F00D         	call	_lcdInst
   748  0014F6  0E41               	movlw	65
   749  0014F8  6E25               	movwf	??_main& (0+255),c
   750  0014FA  0EEE               	movlw	238
   751  0014FC                     u1107:
   752  0014FC  2EE8               	decfsz	wreg,f,c
   753  0014FE  D7FE               	bra	u1107
   754  001500  2E25               	decfsz	??_main& (0+255),f,c
   755  001502  D7FC               	bra	u1107
   756  001504  D000               	nop2	
   757                           
   758                           ;main.c: 127: _delay((unsigned long)((2000)*(40000000/4000.0)));
   759  001506  0E66               	movlw	102
   760  001508  6E26               	movwf	(??_main+1)& (0+255),c
   761  00150A  0E76               	movlw	118
   762  00150C  6E25               	movwf	??_main& (0+255),c
   763  00150E  0EC1               	movlw	193
   764  001510                     u1117:
   765  001510  2EE8               	decfsz	wreg,f,c
   766  001512  D7FE               	bra	u1117
   767  001514  2E25               	decfsz	??_main& (0+255),f,c
   768  001516  D7FC               	bra	u1117
   769  001518  2E26               	decfsz	(??_main+1)& (0+255),f,c
   770  00151A  D7FA               	bra	u1117
   771  00151C  F000               	nop	
   772                           
   773                           ;main.c: 129: initial_time = 0;
   774  00151E  0E00               	movlw	0
   775  001520  6E39               	movwf	_initial_time+1,c
   776  001522  0E00               	movlw	0
   777  001524  6E38               	movwf	_initial_time,c
   778                           
   779                           ;main.c: 130: final_time = 0;
   780  001526  0E00               	movlw	0
   781  001528  6E31               	movwf	_final_time+1,c
   782  00152A  0E00               	movlw	0
   783  00152C  6E30               	movwf	_final_time,c
   784                           
   785                           ;main.c: 134: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   786  00152E  0E80               	movlw	128
   787  001530  EC8D  F00D         	call	_lcdInst
   788  001534  0E41               	movlw	65
   789  001536  6E25               	movwf	??_main& (0+255),c
   790  001538  0EEE               	movlw	238
   791  00153A                     u1127:
   792  00153A  2EE8               	decfsz	wreg,f,c
   793  00153C  D7FE               	bra	u1127
   794  00153E  2E25               	decfsz	??_main& (0+255),f,c
   795  001540  D7FC               	bra	u1127
   796  001542  D000               	nop2	
   797                           
   798                           ;main.c: 135: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
   799  001544  0E42               	movlw	low STR_2
   800  001546  6E0F               	movwf	printf@f,c
   801  001548  0E10               	movlw	high STR_2
   802  00154A  6E10               	movwf	printf@f+1,c
   803  00154C  C02D  F011         	movff	_time+6,?_printf+2
   804  001550  6A12               	clrf	?_printf+3,c
   805  001552  C02C  F013         	movff	_time+5,?_printf+4
   806  001556  6A14               	clrf	?_printf+5,c
   807  001558  C02B  F015         	movff	_time+4,?_printf+6
   808  00155C  6A16               	clrf	?_printf+7,c
   809  00155E  EC35  F008         	call	_printf	;wreg free
   810                           
   811                           ;main.c: 136: lcdInst(0xC0);;
   812  001562  0EC0               	movlw	192
   813  001564  EC8D  F00D         	call	_lcdInst
   814                           
   815                           ;main.c: 137: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
   816  001568  0E51               	movlw	low STR_3
   817  00156A  6E0F               	movwf	printf@f,c
   818  00156C  0E10               	movlw	high STR_3
   819  00156E  6E10               	movwf	printf@f+1,c
   820  001570  C029  F011         	movff	_time+2,?_printf+2
   821  001574  6A12               	clrf	?_printf+3,c
   822  001576  C028  F013         	movff	_time+1,?_printf+4
   823  00157A  6A14               	clrf	?_printf+5,c
   824  00157C  C027  F015         	movff	_time,?_printf+6
   825  001580  6A16               	clrf	?_printf+7,c
   826  001582  EC35  F008         	call	_printf	;wreg free
   827                           
   828                           ;main.c: 138: _delay((unsigned long)((1000)*(40000000/4000.0)));
   829  001586  0E33               	movlw	51
   830  001588  6E26               	movwf	(??_main+1)& (0+255),c
   831  00158A  0EBB               	movlw	187
   832  00158C  6E25               	movwf	??_main& (0+255),c
   833  00158E  0EE0               	movlw	224
   834  001590                     u1137:
   835  001590  2EE8               	decfsz	wreg,f,c
   836  001592  D7FE               	bra	u1137
   837  001594  2E25               	decfsz	??_main& (0+255),f,c
   838  001596  D7FC               	bra	u1137
   839  001598  2E26               	decfsz	(??_main+1)& (0+255),f,c
   840  00159A  D7FA               	bra	u1137
   841  00159C  EF00  F000         	goto	start
   842  0015A0                     __end_of_main:
   843                           	opt stack 0
   844                           tblptru	equ	0xFF8
   845                           intcon	equ	0xFF2
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           
   849 ;; *************** function _printf *****************
   850 ;; Defined at:
   851 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;  f               2   14[COMRAM] PTR const unsigned char 
   854 ;;		 -> STR_3(15), STR_2(15), STR_1(9), 
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  idx             1   26[COMRAM] unsigned char 
   857 ;;  tmpval          4    0        struct .
   858 ;;  cp              3    0        PTR const unsigned char 
   859 ;;  width           2   33[COMRAM] int 
   860 ;;  val             2   30[COMRAM] unsigned int 
   861 ;;  ap              2   27[COMRAM] PTR void [1]
   862 ;;		 -> ?_printf(2), 
   863 ;;  len             2    0        unsigned int 
   864 ;;  c               1   35[COMRAM] char 
   865 ;;  flag            1   32[COMRAM] unsigned char 
   866 ;;  prec            1   29[COMRAM] char 
   867 ;; Return value:  Size  Location     Type
   868 ;;                  2   14[COMRAM] int 
   869 ;; Registers used:
   870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   876 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;Total ram usage:       22 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    2
   883 ;; This function calls:
   884 ;;		___lwdiv
   885 ;;		___lwmod
   886 ;;		___wmul
   887 ;;		_isdigit
   888 ;;		_putch
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text1
   895  00106A                     __ptext1:
   896                           	opt stack 0
   897  00106A                     _printf:
   898                           	opt stack 28
   899                           
   900                           ;doprnt.c: 466: va_list ap;
   901                           ;doprnt.c: 499: signed char c;
   902                           ;doprnt.c: 501: int width;
   903                           ;doprnt.c: 506: signed char prec;
   904                           ;doprnt.c: 508: unsigned char flag;
   905                           ;doprnt.c: 523: union {
   906                           ;doprnt.c: 524: unsigned long vd;
   907                           ;doprnt.c: 525: double integ;
   908                           ;doprnt.c: 526: } tmpval;
   909                           ;doprnt.c: 528: unsigned int val;
   910                           ;doprnt.c: 529: unsigned len;
   911                           ;doprnt.c: 530: const char * cp;
   912                           ;doprnt.c: 533: *ap = __va_start();
   913                           
   914                           ;incstack = 0
   915  00106A  0E11               	movlw	low (?_printf+2)
   916  00106C  6E1C               	movwf	printf@ap,c
   917  00106E  0E00               	movlw	high (?_printf+2)
   918  001070  6E1D               	movwf	printf@ap+1,c
   919                           
   920                           ;doprnt.c: 536: while(c = *f++) {
   921  001072  D174               	goto	u1020
   922  001074                     
   923                           ;doprnt.c: 538: if(c != '%')
   924  001074  0E25               	movlw	37
   925  001076  1824               	xorwf	printf@c,w,c
   926  001078  B4D8               	btfsc	status,2,c
   927  00107A  D004               	goto	l220
   928                           
   929                           ;doprnt.c: 540: {
   930                           ;doprnt.c: 541: (putch(c) );
   931  00107C  5024               	movf	printf@c,w,c
   932  00107E  EC83  F00D         	call	_putch
   933                           
   934                           ;doprnt.c: 542: continue;
   935  001082  D16C               	goto	u1020
   936  001084                     l220:
   937                           
   938                           ;doprnt.c: 543: }
   939                           ;doprnt.c: 546: width = 0;
   940  001084  0E00               	movlw	0
   941  001086  6E23               	movwf	printf@width+1,c
   942  001088  0E00               	movlw	0
   943  00108A  6E22               	movwf	printf@width,c
   944                           
   945                           ;doprnt.c: 548: flag = 0;
   946  00108C  0E00               	movlw	0
   947  00108E  6E21               	movwf	printf@flag,c
   948                           
   949                           ;doprnt.c: 551: switch(*f) {
   950                           
   951                           ;doprnt.c: 550: for(;;) {
   952  001090  D003               	goto	l222
   953  001092                     
   954                           ;doprnt.c: 580: flag |= 0x04;
   955  001092  8421               	bsf	printf@flag,2,c
   956                           
   957                           ;doprnt.c: 581: f++;
   958  001094  4A0F               	infsnz	printf@f,f,c
   959  001096  2A10               	incf	printf@f+1,f,c
   960  001098                     l222:
   961  001098  C00F  FFF6         	movff	printf@f,tblptrl
   962  00109C  C010  FFF7         	movff	printf@f+1,tblptrh
   963  0010A0                     	if	0	;tblptru may be non-zero
   964  0010A0                     	endif
   965  0010A0                     	if	0	;tblptru may be non-zero
   966  0010A0                     	endif
   967  0010A0  0008               	tblrd		*
   968  0010A2  50F5               	movf	tablat,w,c
   969                           
   970                           ; Switch size 1, requested type "space"
   971                           ; Number of cases is 1, Range of values is 48 to 48
   972                           ; switch strategies available:
   973                           ; Name         Instructions Cycles
   974                           ; simple_byte            4     3 (average)
   975                           ;	Chosen strategy is simple_byte
   976  0010A4  0A30               	xorlw	48	; case 48
   977  0010A6  B4D8               	btfsc	status,2,c
   978  0010A8  D7F4               	goto	l223
   979                           
   980                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   981                           
   982                           ;doprnt.c: 586: }
   983                           
   984                           ;doprnt.c: 585: break;
   985  0010AA  C00F  FFF6         	movff	printf@f,tblptrl
   986  0010AE  C010  FFF7         	movff	printf@f+1,tblptrh
   987  0010B2                     	if	0	;tblptru may be non-zero
   988  0010B2                     	endif
   989  0010B2                     	if	0	;tblptru may be non-zero
   990  0010B2                     	endif
   991  0010B2  0008               	tblrd		*
   992  0010B4  50F5               	movf	tablat,w,c
   993  0010B6  EC69  F00D         	call	_isdigit
   994  0010BA  A0D8               	btfss	status,0,c
   995  0010BC  D035               	goto	l230
   996                           
   997                           ;doprnt.c: 598: width = 0;
   998  0010BE  0E00               	movlw	0
   999  0010C0  6E23               	movwf	printf@width+1,c
  1000  0010C2  0E00               	movlw	0
  1001  0010C4  6E22               	movwf	printf@width,c
  1002  0010C6                     
  1003                           ;doprnt.c: 600: width *= 10;
  1004  0010C6  C022  F009         	movff	printf@width,___wmul@multiplier
  1005  0010CA  C023  F00A         	movff	printf@width+1,___wmul@multiplier+1
  1006  0010CE  0E00               	movlw	0
  1007  0010D0  6E0C               	movwf	___wmul@multiplicand+1,c
  1008  0010D2  0E0A               	movlw	10
  1009  0010D4  6E0B               	movwf	___wmul@multiplicand,c
  1010  0010D6  EC44  F00D         	call	___wmul	;wreg free
  1011  0010DA  C009  F022         	movff	?___wmul,printf@width
  1012  0010DE  C00A  F023         	movff	?___wmul+1,printf@width+1
  1013                           
  1014                           ;doprnt.c: 601: width += *f++ - '0';
  1015  0010E2  0ED0               	movlw	208
  1016  0010E4  6E17               	movwf	??_printf& (0+255),c
  1017  0010E6  0EFF               	movlw	255
  1018  0010E8  6E18               	movwf	(??_printf+1)& (0+255),c
  1019  0010EA  C00F  FFF6         	movff	printf@f,tblptrl
  1020  0010EE  C010  FFF7         	movff	printf@f+1,tblptrh
  1021  0010F2                     	if	0	;tblptru may be non-zero
  1022  0010F2                     	endif
  1023  0010F2                     	if	0	;tblptru may be non-zero
  1024  0010F2                     	endif
  1025  0010F2  0008               	tblrd		*
  1026  0010F4  50F5               	movf	tablat,w,c
  1027  0010F6  6E19               	movwf	(??_printf+2)& (0+255),c
  1028  0010F8  6A1A               	clrf	(??_printf+3)& (0+255),c
  1029  0010FA  5017               	movf	??_printf,w,c
  1030  0010FC  2619               	addwf	??_printf+2,f,c
  1031  0010FE  5018               	movf	??_printf+1,w,c
  1032  001100  221A               	addwfc	??_printf+3,f,c
  1033  001102  5019               	movf	??_printf+2,w,c
  1034  001104  2622               	addwf	printf@width,f,c
  1035  001106  501A               	movf	??_printf+3,w,c
  1036  001108  2223               	addwfc	printf@width+1,f,c
  1037  00110A  4A0F               	infsnz	printf@f,f,c
  1038  00110C  2A10               	incf	printf@f+1,f,c
  1039                           
  1040                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1041  00110E  C00F  FFF6         	movff	printf@f,tblptrl
  1042  001112  C010  FFF7         	movff	printf@f+1,tblptrh
  1043  001116                     	if	0	;tblptru may be non-zero
  1044  001116                     	endif
  1045  001116                     	if	0	;tblptru may be non-zero
  1046  001116                     	endif
  1047  001116  0008               	tblrd		*
  1048  001118  50F5               	movf	tablat,w,c
  1049  00111A  EC69  F00D         	call	_isdigit
  1050  00111E  A0D8               	btfss	status,0,c
  1051  001120  D003               	goto	l230
  1052  001122  D7D1               	goto	l228
  1053  001124                     
  1054                           ;doprnt.c: 721: flag |= 0x80;
  1055  001124  8E21               	bsf	printf@flag,7,c
  1056                           
  1057                           ;doprnt.c: 723: break;
  1058  001126  D017               	goto	l235
  1059  001128                     l230:
  1060  001128  C00F  FFF6         	movff	printf@f,tblptrl
  1061  00112C  C010  FFF7         	movff	printf@f+1,tblptrh
  1062  001130  4A0F               	infsnz	printf@f,f,c
  1063  001132  2A10               	incf	printf@f+1,f,c
  1064  001134                     	if	0	;tblptru may be non-zero
  1065  001134                     	endif
  1066  001134                     	if	0	;tblptru may be non-zero
  1067  001134                     	endif
  1068  001134  0008               	tblrd		*
  1069  001136  CFF5 F024          	movff	tablat,printf@c
  1070  00113A  5024               	movf	printf@c,w,c
  1071                           
  1072                           ; Switch size 1, requested type "space"
  1073                           ; Number of cases is 4, Range of values is 0 to 120
  1074                           ; switch strategies available:
  1075                           ; Name         Instructions Cycles
  1076                           ; simple_byte           13     7 (average)
  1077                           ;	Chosen strategy is simple_byte
  1078  00113C  0A00               	xorlw	0	; case 0
  1079  00113E  B4D8               	btfsc	status,2,c
  1080  001140  0012               	return	
  1081  001142  0A64               	xorlw	100	; case 100
  1082  001144  B4D8               	btfsc	status,2,c
  1083  001146  D007               	goto	l235
  1084  001148  0A0D               	xorlw	13	; case 105
  1085  00114A  B4D8               	btfsc	status,2,c
  1086  00114C  D004               	goto	l235
  1087  00114E  0A11               	xorlw	17	; case 120
  1088  001150  B4D8               	btfsc	status,2,c
  1089  001152  D7E8               	goto	l236
  1090  001154  D103               	goto	u1020
  1091  001156                     l235:
  1092                           
  1093                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1094  001156  BE21               	btfsc	printf@flag,7,c
  1095  001158  D015               	goto	l238
  1096                           
  1097                           ;doprnt.c: 1253: {
  1098                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1099  00115A  C01C  FFD9         	movff	printf@ap,fsr2l
  1100  00115E  C01D  FFDA         	movff	printf@ap+1,fsr2h
  1101  001162  CFDE F01F          	movff	postinc2,printf@val
  1102  001166  CFDD F020          	movff	postdec2,printf@val+1
  1103  00116A  0E02               	movlw	2
  1104  00116C  261C               	addwf	printf@ap,f,c
  1105  00116E  0E00               	movlw	0
  1106  001170  221D               	addwfc	printf@ap+1,f,c
  1107                           
  1108                           ;doprnt.c: 1261: if((int)val < 0) {
  1109  001172  AE20               	btfss	printf@val+1,7,c
  1110  001174  D044               	goto	l241
  1111                           
  1112                           ;doprnt.c: 1262: flag |= 0x03;
  1113  001176  0E03               	movlw	3
  1114  001178  1221               	iorwf	printf@flag,f,c
  1115                           
  1116                           ;doprnt.c: 1263: val = -val;
  1117  00117A  6C1F               	negf	printf@val,c
  1118  00117C  1E20               	comf	printf@val+1,f,c
  1119  00117E  B0D8               	btfsc	status,0,c
  1120  001180  2A20               	incf	printf@val+1,f,c
  1121                           
  1122                           ;doprnt.c: 1264: }
  1123                           ;doprnt.c: 1266: }
  1124  001182  D03D               	goto	l241
  1125  001184                     l238:
  1126                           
  1127                           ;doprnt.c: 1268: else
  1128                           ;doprnt.c: 1273: {
  1129                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1130  001184  C01C  FFD9         	movff	printf@ap,fsr2l
  1131  001188  C01D  FFDA         	movff	printf@ap+1,fsr2h
  1132  00118C  CFDE F01F          	movff	postinc2,printf@val
  1133  001190  CFDD F020          	movff	postdec2,printf@val+1
  1134  001194  0E02               	movlw	2
  1135  001196  261C               	addwf	printf@ap,f,c
  1136  001198  0E00               	movlw	0
  1137  00119A  221D               	addwfc	printf@ap+1,f,c
  1138                           
  1139                           ;doprnt.c: 1287: }
  1140                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1141  00119C  D030               	goto	l241
  1142  00119E                     
  1143                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1144  00119E  0E01               	movlw	1
  1145  0011A0  6E24               	movwf	printf@c,c
  1146  0011A2                     l1639:
  1147  0011A2  0E05               	movlw	5
  1148  0011A4  1824               	xorwf	printf@c,w,c
  1149  0011A6  B4D8               	btfsc	status,2,c
  1150  0011A8  D032               	goto	l246
  1151                           
  1152                           ;doprnt.c: 1306: if(val < dpowers[c])
  1153  0011AA  5024               	movf	printf@c,w,c
  1154  0011AC  0D02               	mullw	2
  1155  0011AE  0E12               	movlw	low _dpowers
  1156  0011B0  24F3               	addwf	prodl,w,c
  1157  0011B2  6EF6               	movwf	tblptrl,c
  1158  0011B4  0E10               	movlw	high _dpowers
  1159  0011B6  20F4               	addwfc	prodh,w,c
  1160  0011B8  6EF7               	movwf	tblptrh,c
  1161  0011BA                     	if	0	;There are less than 3 active tblptr bytes
  1162  0011BA                     	endif
  1163  0011BA  0009               	tblrd		*+
  1164  0011BC  50F5               	movf	tablat,w,c
  1165  0011BE  5C1F               	subwf	printf@val,w,c
  1166  0011C0  0009               	tblrd		*+
  1167  0011C2  50F5               	movf	tablat,w,c
  1168  0011C4  5820               	subwfb	printf@val+1,w,c
  1169  0011C6  A0D8               	btfss	status,0,c
  1170  0011C8  D022               	goto	l246
  1171                           
  1172                           ;doprnt.c: 1307: break;
  1173  0011CA  2A24               	incf	printf@c,f,c
  1174  0011CC  D7EA               	goto	l1639
  1175  0011CE                     
  1176                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1177  0011CE  0E01               	movlw	1
  1178  0011D0  6E24               	movwf	printf@c,c
  1179  0011D2                     l1653:
  1180  0011D2  0E04               	movlw	4
  1181  0011D4  1824               	xorwf	printf@c,w,c
  1182  0011D6  B4D8               	btfsc	status,2,c
  1183  0011D8  D01A               	goto	l246
  1184                           
  1185                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1186  0011DA  5024               	movf	printf@c,w,c
  1187  0011DC  0D02               	mullw	2
  1188  0011DE  0E1C               	movlw	low _hexpowers
  1189  0011E0  24F3               	addwf	prodl,w,c
  1190  0011E2  6EF6               	movwf	tblptrl,c
  1191  0011E4  0E10               	movlw	high _hexpowers
  1192  0011E6  20F4               	addwfc	prodh,w,c
  1193  0011E8  6EF7               	movwf	tblptrh,c
  1194  0011EA                     	if	0	;There are less than 3 active tblptr bytes
  1195  0011EA                     	endif
  1196  0011EA  0009               	tblrd		*+
  1197  0011EC  50F5               	movf	tablat,w,c
  1198  0011EE  5C1F               	subwf	printf@val,w,c
  1199  0011F0  0009               	tblrd		*+
  1200  0011F2  50F5               	movf	tablat,w,c
  1201  0011F4  5820               	subwfb	printf@val+1,w,c
  1202  0011F6  A0D8               	btfss	status,0,c
  1203  0011F8  D00A               	goto	l246
  1204                           
  1205                           ;doprnt.c: 1318: break;
  1206  0011FA  2A24               	incf	printf@c,f,c
  1207  0011FC  D7EA               	goto	l1653
  1208  0011FE                     l241:
  1209  0011FE  5021               	movf	printf@flag,w,c
  1210  001200  0B80               	andlw	128
  1211                           
  1212                           ; Switch size 1, requested type "space"
  1213                           ; Number of cases is 2, Range of values is 0 to 128
  1214                           ; switch strategies available:
  1215                           ; Name         Instructions Cycles
  1216                           ; simple_byte            7     4 (average)
  1217                           ;	Chosen strategy is simple_byte
  1218  001202  0A00               	xorlw	0	; case 0
  1219  001204  B4D8               	btfsc	status,2,c
  1220  001206  D7CB               	goto	l242
  1221  001208  0A80               	xorlw	128	; case 128
  1222  00120A  B4D8               	btfsc	status,2,c
  1223  00120C  D7E0               	goto	l247
  1224  00120E                     l246:
  1225                           
  1226                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1227  00120E  5022               	movf	printf@width,w,c
  1228  001210  1023               	iorwf	printf@width+1,w,c
  1229  001212  B4D8               	btfsc	status,2,c
  1230  001214  D009               	goto	l251
  1231  001216  C021  F017         	movff	printf@flag,??_printf
  1232  00121A  0E03               	movlw	3
  1233  00121C  1617               	andwf	??_printf,f,c
  1234  00121E  B4D8               	btfsc	status,2,c
  1235  001220  D003               	goto	l251
  1236                           
  1237                           ;doprnt.c: 1346: width--;
  1238  001222  0622               	decf	printf@width,f,c
  1239  001224  A0D8               	btfss	status,0,c
  1240  001226  0623               	decf	printf@width+1,f,c
  1241  001228                     l251:
  1242                           
  1243                           ;doprnt.c: 1381: if(width > c)
  1244  001228  0E80               	movlw	128
  1245  00122A  BE24               	btfsc	printf@c,7,c
  1246  00122C  0E7F               	movlw	127
  1247  00122E  6E17               	movwf	??_printf& (0+255),c
  1248  001230  5022               	movf	printf@width,w,c
  1249  001232  5C24               	subwf	printf@c,w,c
  1250  001234  5023               	movf	printf@width+1,w,c
  1251  001236  0A80               	xorlw	128
  1252  001238  5817               	subwfb	??_printf& (0+255),w,c
  1253  00123A  B0D8               	btfsc	status,0,c
  1254  00123C  D007               	goto	l252
  1255                           
  1256                           ;doprnt.c: 1382: width -= c;
  1257  00123E  5024               	movf	printf@c,w,c
  1258  001240  5E22               	subwf	printf@width,f,c
  1259  001242  0E00               	movlw	0
  1260  001244  BE24               	btfsc	printf@c,7,c
  1261  001246  0EFF               	movlw	255
  1262  001248  5A23               	subwfb	printf@width+1,f,c
  1263  00124A  D004               	goto	l253
  1264  00124C                     l252:
  1265                           
  1266                           ;doprnt.c: 1383: else
  1267                           ;doprnt.c: 1384: width = 0;
  1268  00124C  0E00               	movlw	0
  1269  00124E  6E23               	movwf	printf@width+1,c
  1270  001250  0E00               	movlw	0
  1271  001252  6E22               	movwf	printf@width,c
  1272  001254                     l253:
  1273                           
  1274                           ;doprnt.c: 1387: if(flag & 0x04) {
  1275  001254  A421               	btfss	printf@flag,2,c
  1276  001256  D014               	goto	l254
  1277                           
  1278                           ;doprnt.c: 1392: if(flag & 0x03)
  1279  001258  C021  F017         	movff	printf@flag,??_printf
  1280  00125C  0E03               	movlw	3
  1281  00125E  1617               	andwf	??_printf,f,c
  1282  001260  B4D8               	btfsc	status,2,c
  1283  001262  D003               	goto	l255
  1284                           
  1285                           ;doprnt.c: 1393: (putch('-') );
  1286  001264  0E2D               	movlw	45
  1287  001266  EC83  F00D         	call	_putch
  1288  00126A                     l255:
  1289                           
  1290                           ;doprnt.c: 1415: if(width)
  1291  00126A  5022               	movf	printf@width,w,c
  1292  00126C  1023               	iorwf	printf@width+1,w,c
  1293  00126E  B4D8               	btfsc	status,2,c
  1294  001270  D01E               	goto	l263
  1295                           
  1296                           ;doprnt.c: 1417: (putch('0') );
  1297                           
  1298                           ;doprnt.c: 1416: do
  1299  001272  0E30               	movlw	48
  1300  001274  EC83  F00D         	call	_putch
  1301                           
  1302                           ;doprnt.c: 1418: while(--width);
  1303  001278  0622               	decf	printf@width,f,c
  1304  00127A  A0D8               	btfss	status,0,c
  1305  00127C  0623               	decf	printf@width+1,f,c
  1306  00127E  D7F5               	goto	l255
  1307  001280                     l254:
  1308                           
  1309                           ;doprnt.c: 1422: {
  1310                           ;doprnt.c: 1424: if(width
  1311                           ;doprnt.c: 1428: )
  1312  001280  5022               	movf	printf@width,w,c
  1313  001282  1023               	iorwf	printf@width+1,w,c
  1314  001284  B4D8               	btfsc	status,2,c
  1315  001286  D00A               	goto	u1000
  1316  001288                     u990:
  1317                           
  1318                           ;doprnt.c: 1430: (putch(' ') );
  1319                           
  1320                           ;doprnt.c: 1429: do
  1321  001288  0E20               	movlw	32
  1322  00128A  EC83  F00D         	call	_putch
  1323                           
  1324                           ;doprnt.c: 1431: while(--width);
  1325  00128E  0622               	decf	printf@width,f,c
  1326  001290  A0D8               	btfss	status,0,c
  1327  001292  0623               	decf	printf@width+1,f,c
  1328  001294  5022               	movf	printf@width,w,c
  1329  001296  1023               	iorwf	printf@width+1,w,c
  1330  001298  A4D8               	btfss	status,2,c
  1331  00129A  D7F6               	goto	u990
  1332  00129C                     u1000:
  1333                           
  1334                           ;doprnt.c: 1438: if(flag & 0x03)
  1335  00129C  C021  F017         	movff	printf@flag,??_printf
  1336  0012A0  0E03               	movlw	3
  1337  0012A2  1617               	andwf	??_printf,f,c
  1338  0012A4  B4D8               	btfsc	status,2,c
  1339  0012A6  D003               	goto	l263
  1340                           
  1341                           ;doprnt.c: 1439: (putch('-') );
  1342  0012A8  0E2D               	movlw	45
  1343  0012AA  EC83  F00D         	call	_putch
  1344  0012AE                     l263:
  1345                           
  1346                           ;doprnt.c: 1469: }
  1347                           ;doprnt.c: 1472: prec = c;
  1348  0012AE  C024  F01E         	movff	printf@c,printf@prec
  1349                           
  1350                           ;doprnt.c: 1474: while(prec--) {
  1351  0012B2  D050               	goto	l264
  1352  0012B4                     
  1353                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1354  0012B4  501E               	movf	printf@prec,w,c
  1355  0012B6  0D02               	mullw	2
  1356  0012B8  0E12               	movlw	low _dpowers
  1357  0012BA  24F3               	addwf	prodl,w,c
  1358  0012BC  6EF6               	movwf	tblptrl,c
  1359  0012BE  0E10               	movlw	high _dpowers
  1360  0012C0  20F4               	addwfc	prodh,w,c
  1361  0012C2  6EF7               	movwf	tblptrh,c
  1362  0012C4                     	if	0	;There are less than 3 active tblptr bytes
  1363  0012C4                     	endif
  1364  0012C4  0009               	tblrd		*+
  1365  0012C6  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1366  0012CA  000A               	tblrd		*-
  1367  0012CC  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1368  0012D0  C01F  F001         	movff	printf@val,___lwdiv@dividend
  1369  0012D4  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1370  0012D8  ECD4  F00C         	call	___lwdiv	;wreg free
  1371  0012DC  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1372  0012E0  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1373  0012E4  0E00               	movlw	0
  1374  0012E6  6E0B               	movwf	___lwmod@divisor+1,c
  1375  0012E8  0E0A               	movlw	10
  1376  0012EA  6E0A               	movwf	___lwmod@divisor,c
  1377  0012EC  EC23  F00D         	call	___lwmod	;wreg free
  1378  0012F0  5008               	movf	?___lwmod,w,c
  1379  0012F2  0F30               	addlw	48
  1380  0012F4  6E24               	movwf	printf@c,c
  1381                           
  1382                           ;doprnt.c: 1491: break;
  1383  0012F6  D02B               	goto	l268
  1384  0012F8                     
  1385                           ;doprnt.c: 1499: {
  1386                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1387  0012F8  C01F  F001         	movff	printf@val,___lwdiv@dividend
  1388  0012FC  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1389  001300  501E               	movf	printf@prec,w,c
  1390  001302  0D02               	mullw	2
  1391  001304  0E1C               	movlw	low _hexpowers
  1392  001306  24F3               	addwf	prodl,w,c
  1393  001308  6EF6               	movwf	tblptrl,c
  1394  00130A  0E10               	movlw	high _hexpowers
  1395  00130C  20F4               	addwfc	prodh,w,c
  1396  00130E  6EF7               	movwf	tblptrh,c
  1397  001310                     	if	0	;There are less than 3 active tblptr bytes
  1398  001310                     	endif
  1399  001310  0009               	tblrd		*+
  1400  001312  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1401  001316  000A               	tblrd		*-
  1402  001318  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1403  00131C  ECD4  F00C         	call	___lwdiv	;wreg free
  1404  001320  5001               	movf	?___lwdiv,w,c
  1405  001322  0B0F               	andlw	15
  1406  001324  6E1B               	movwf	printf@idx,c
  1407                           
  1408                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1409  001326  501B               	movf	printf@idx,w,c
  1410  001328  0D01               	mullw	1
  1411  00132A  0E31               	movlw	low STR_4
  1412  00132C  24F3               	addwf	prodl,w,c
  1413  00132E  6EF6               	movwf	tblptrl,c
  1414  001330  0E10               	movlw	high STR_4
  1415  001332  20F4               	addwfc	prodh,w,c
  1416  001334  6EF7               	movwf	tblptrh,c
  1417  001336                     	if	0	;There are less than 3 active tblptr bytes
  1418  001336                     	endif
  1419  001336  0008               	tblrd		*
  1420  001338  CFF5 F024          	movff	tablat,printf@c
  1421                           
  1422                           ;doprnt.c: 1523: }
  1423                           
  1424                           ;doprnt.c: 1508: }
  1425                           ;doprnt.c: 1510: break;
  1426  00133C  D008               	goto	l268
  1427  00133E  5021               	movf	printf@flag,w,c
  1428  001340  0B80               	andlw	128
  1429                           
  1430                           ; Switch size 1, requested type "space"
  1431                           ; Number of cases is 2, Range of values is 0 to 128
  1432                           ; switch strategies available:
  1433                           ; Name         Instructions Cycles
  1434                           ; simple_byte            7     4 (average)
  1435                           ;	Chosen strategy is simple_byte
  1436  001342  0A00               	xorlw	0	; case 0
  1437  001344  B4D8               	btfsc	status,2,c
  1438  001346  D7B6               	goto	l267
  1439  001348  0A80               	xorlw	128	; case 128
  1440  00134A  B4D8               	btfsc	status,2,c
  1441  00134C  D7D5               	goto	l269
  1442  00134E                     l268:
  1443                           
  1444                           ;doprnt.c: 1524: (putch(c) );
  1445  00134E  5024               	movf	printf@c,w,c
  1446  001350  EC83  F00D         	call	_putch
  1447  001354                     l264:
  1448  001354  061E               	decf	printf@prec,f,c
  1449  001356  281E               	incf	printf@prec,w,c
  1450  001358  A4D8               	btfss	status,2,c
  1451  00135A  D7F1               	goto	l266
  1452  00135C                     u1020:
  1453  00135C  C00F  FFF6         	movff	printf@f,tblptrl
  1454  001360  C010  FFF7         	movff	printf@f+1,tblptrh
  1455  001364  4A0F               	infsnz	printf@f,f,c
  1456  001366  2A10               	incf	printf@f+1,f,c
  1457  001368                     	if	0	;tblptru may be non-zero
  1458  001368                     	endif
  1459  001368                     	if	0	;tblptru may be non-zero
  1460  001368                     	endif
  1461  001368  0008               	tblrd		*
  1462  00136A  CFF5 F024          	movff	tablat,printf@c
  1463  00136E  5024               	movf	printf@c,w,c
  1464  001370  B4D8               	btfsc	status,2,c
  1465  001372  0012               	return	
  1466  001374  D67F               	goto	l219
  1467  001376                     __end_of_printf:
  1468                           	opt stack 0
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           prodh	equ	0xFF4
  1474                           prodl	equ	0xFF3
  1475                           intcon	equ	0xFF2
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           postinc2	equ	0xFDE
  1479                           postdec2	equ	0xFDD
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _putch *****************
  1485 ;; Defined at:
  1486 ;;		line 24 in file "lcd.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  data            1    wreg     unsigned char 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  data            1    2[COMRAM] unsigned char 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;Total ram usage:        1 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    1
  1507 ;; This function calls:
  1508 ;;		_lcdNibble
  1509 ;; This function is called by:
  1510 ;;		_printf
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text2
  1515  001B06                     __ptext2:
  1516                           	opt stack 0
  1517  001B06                     _putch:
  1518                           	opt stack 28
  1519                           
  1520                           ;incstack = 0
  1521                           ;putch@data stored from wreg
  1522  001B06  6E03               	movwf	putch@data,c
  1523                           
  1524                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1525  001B08  848C               	bsf	3980,2,c	;volatile
  1526                           
  1527                           ;lcd.c: 33: lcdNibble(data);
  1528  001B0A  5003               	movf	putch@data,w,c
  1529  001B0C  EC67  F00C         	call	_lcdNibble
  1530                           
  1531                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1532  001B10  0EC8               	movlw	200
  1533  001B12                     u1147:
  1534  001B12  D000               	nop2	
  1535  001B14  2EE8               	decfsz	wreg,f,c
  1536  001B16  D7FD               	bra	u1147
  1537  001B18  0012               	return		;funcret
  1538  001B1A                     __end_of_putch:
  1539                           	opt stack 0
  1540                           tblptru	equ	0xFF8
  1541                           tblptrh	equ	0xFF7
  1542                           tblptrl	equ	0xFF6
  1543                           tablat	equ	0xFF5
  1544                           prodh	equ	0xFF4
  1545                           prodl	equ	0xFF3
  1546                           intcon	equ	0xFF2
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           postinc2	equ	0xFDE
  1550                           postdec2	equ	0xFDD
  1551                           fsr2h	equ	0xFDA
  1552                           fsr2l	equ	0xFD9
  1553                           status	equ	0xFD8
  1554                           
  1555 ;; *************** function _isdigit *****************
  1556 ;; Defined at:
  1557 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  c               1    wreg     unsigned char 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  c               1    2[COMRAM] unsigned char 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;		None               void
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1575 ;;Total ram usage:        3 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_printf
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text3
  1585  001AD2                     __ptext3:
  1586                           	opt stack 0
  1587  001AD2                     _isdigit:
  1588                           	opt stack 29
  1589                           
  1590                           ;incstack = 0
  1591                           ;isdigit@c stored from wreg
  1592  001AD2  6E03               	movwf	isdigit@c,c
  1593  001AD4  0E00               	movlw	0
  1594  001AD6  6E02               	movwf	_isdigit$663,c
  1595  001AD8  0E3A               	movlw	58
  1596  001ADA  6003               	cpfslt	isdigit@c,c
  1597  001ADC  D005               	goto	l602
  1598  001ADE  0E2F               	movlw	47
  1599  001AE0  6403               	cpfsgt	isdigit@c,c
  1600  001AE2  D002               	goto	l602
  1601  001AE4  0E01               	movlw	1
  1602  001AE6  6E02               	movwf	_isdigit$663,c
  1603  001AE8                     l602:
  1604  001AE8  C002  F001         	movff	_isdigit$663,??_isdigit
  1605  001AEC  3001               	rrcf	??_isdigit,w,c
  1606  001AEE  0012               	return	
  1607  001AF0                     __end_of_isdigit:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           prodh	equ	0xFF4
  1614                           prodl	equ	0xFF3
  1615                           intcon	equ	0xFF2
  1616                           postinc0	equ	0xFEE
  1617                           wreg	equ	0xFE8
  1618                           postinc2	equ	0xFDE
  1619                           postdec2	equ	0xFDD
  1620                           fsr2h	equ	0xFDA
  1621                           fsr2l	equ	0xFD9
  1622                           status	equ	0xFD8
  1623                           
  1624 ;; *************** function ___lwmod *****************
  1625 ;; Defined at:
  1626 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  dividend        2    7[COMRAM] unsigned int 
  1629 ;;  divisor         2    9[COMRAM] unsigned int 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;  counter         1   11[COMRAM] unsigned char 
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  2    7[COMRAM] unsigned int 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, status,0
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1641 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;Total ram usage:        5 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; This function calls:
  1648 ;;		Nothing
  1649 ;; This function is called by:
  1650 ;;		_printf
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text4
  1655  001A46                     __ptext4:
  1656                           	opt stack 0
  1657  001A46                     ___lwmod:
  1658                           	opt stack 29
  1659                           
  1660                           ;incstack = 0
  1661  001A46  500A               	movf	___lwmod@divisor,w,c
  1662  001A48  100B               	iorwf	___lwmod@divisor+1,w,c
  1663  001A4A  B4D8               	btfsc	status,2,c
  1664  001A4C  D018               	goto	l696
  1665  001A4E  0E01               	movlw	1
  1666  001A50  6E0C               	movwf	___lwmod@counter,c
  1667  001A52  D004               	goto	l691
  1668  001A54  90D8               	bcf	status,0,c
  1669  001A56  360A               	rlcf	___lwmod@divisor,f,c
  1670  001A58  360B               	rlcf	___lwmod@divisor+1,f,c
  1671  001A5A  2A0C               	incf	___lwmod@counter,f,c
  1672  001A5C                     l691:
  1673  001A5C  AE0B               	btfss	___lwmod@divisor+1,7,c
  1674  001A5E  D7FA               	goto	l692
  1675  001A60                     u740:
  1676  001A60  500A               	movf	___lwmod@divisor,w,c
  1677  001A62  5C08               	subwf	___lwmod@dividend,w,c
  1678  001A64  500B               	movf	___lwmod@divisor+1,w,c
  1679  001A66  5809               	subwfb	___lwmod@dividend+1,w,c
  1680  001A68  A0D8               	btfss	status,0,c
  1681  001A6A  D004               	goto	l695
  1682  001A6C  500A               	movf	___lwmod@divisor,w,c
  1683  001A6E  5E08               	subwf	___lwmod@dividend,f,c
  1684  001A70  500B               	movf	___lwmod@divisor+1,w,c
  1685  001A72  5A09               	subwfb	___lwmod@dividend+1,f,c
  1686  001A74                     l695:
  1687  001A74  90D8               	bcf	status,0,c
  1688  001A76  320B               	rrcf	___lwmod@divisor+1,f,c
  1689  001A78  320A               	rrcf	___lwmod@divisor,f,c
  1690  001A7A  2E0C               	decfsz	___lwmod@counter,f,c
  1691  001A7C  D7F1               	goto	u740
  1692  001A7E                     l696:
  1693  001A7E  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1694  001A82  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1695  001A86  0012               	return		;funcret
  1696  001A88                     __end_of___lwmod:
  1697                           	opt stack 0
  1698                           tblptru	equ	0xFF8
  1699                           tblptrh	equ	0xFF7
  1700                           tblptrl	equ	0xFF6
  1701                           tablat	equ	0xFF5
  1702                           prodh	equ	0xFF4
  1703                           prodl	equ	0xFF3
  1704                           intcon	equ	0xFF2
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postinc2	equ	0xFDE
  1708                           postdec2	equ	0xFDD
  1709                           fsr2h	equ	0xFDA
  1710                           fsr2l	equ	0xFD9
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function ___lwdiv *****************
  1714 ;; Defined at:
  1715 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  dividend        2    0[COMRAM] unsigned int 
  1718 ;;  divisor         2    2[COMRAM] unsigned int 
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;  quotient        2    4[COMRAM] unsigned int 
  1721 ;;  counter         1    6[COMRAM] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  2    0[COMRAM] unsigned int 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1731 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;Total ram usage:        7 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_printf
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text5
  1745  0019A8                     __ptext5:
  1746                           	opt stack 0
  1747  0019A8                     ___lwdiv:
  1748                           	opt stack 29
  1749                           
  1750                           ;incstack = 0
  1751  0019A8  0E00               	movlw	0
  1752  0019AA  6E06               	movwf	___lwdiv@quotient+1,c
  1753  0019AC  0E00               	movlw	0
  1754  0019AE  6E05               	movwf	___lwdiv@quotient,c
  1755  0019B0  5003               	movf	___lwdiv@divisor,w,c
  1756  0019B2  1004               	iorwf	___lwdiv@divisor+1,w,c
  1757  0019B4  B4D8               	btfsc	status,2,c
  1758  0019B6  D01C               	goto	l686
  1759  0019B8  0E01               	movlw	1
  1760  0019BA  6E07               	movwf	___lwdiv@counter,c
  1761  0019BC  D004               	goto	l681
  1762  0019BE  90D8               	bcf	status,0,c
  1763  0019C0  3603               	rlcf	___lwdiv@divisor,f,c
  1764  0019C2  3604               	rlcf	___lwdiv@divisor+1,f,c
  1765  0019C4  2A07               	incf	___lwdiv@counter,f,c
  1766  0019C6                     l681:
  1767  0019C6  AE04               	btfss	___lwdiv@divisor+1,7,c
  1768  0019C8  D7FA               	goto	l682
  1769  0019CA                     u710:
  1770  0019CA  90D8               	bcf	status,0,c
  1771  0019CC  3605               	rlcf	___lwdiv@quotient,f,c
  1772  0019CE  3606               	rlcf	___lwdiv@quotient+1,f,c
  1773  0019D0  5003               	movf	___lwdiv@divisor,w,c
  1774  0019D2  5C01               	subwf	___lwdiv@dividend,w,c
  1775  0019D4  5004               	movf	___lwdiv@divisor+1,w,c
  1776  0019D6  5802               	subwfb	___lwdiv@dividend+1,w,c
  1777  0019D8  A0D8               	btfss	status,0,c
  1778  0019DA  D005               	goto	l685
  1779  0019DC  5003               	movf	___lwdiv@divisor,w,c
  1780  0019DE  5E01               	subwf	___lwdiv@dividend,f,c
  1781  0019E0  5004               	movf	___lwdiv@divisor+1,w,c
  1782  0019E2  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1783  0019E4  8005               	bsf	___lwdiv@quotient,0,c
  1784  0019E6                     l685:
  1785  0019E6  90D8               	bcf	status,0,c
  1786  0019E8  3204               	rrcf	___lwdiv@divisor+1,f,c
  1787  0019EA  3203               	rrcf	___lwdiv@divisor,f,c
  1788  0019EC  2E07               	decfsz	___lwdiv@counter,f,c
  1789  0019EE  D7ED               	goto	u710
  1790  0019F0                     l686:
  1791  0019F0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1792  0019F4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1793  0019F8  0012               	return		;funcret
  1794  0019FA                     __end_of___lwdiv:
  1795                           	opt stack 0
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           prodh	equ	0xFF4
  1801                           prodl	equ	0xFF3
  1802                           intcon	equ	0xFF2
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postinc2	equ	0xFDE
  1806                           postdec2	equ	0xFDD
  1807                           fsr2h	equ	0xFDA
  1808                           fsr2l	equ	0xFD9
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _initLCD *****************
  1812 ;; Defined at:
  1813 ;;		line 60 in file "lcd.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;Total ram usage:        1 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    2
  1834 ;; This function calls:
  1835 ;;		_lcdInst
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text6
  1842  0019FA                     __ptext6:
  1843                           	opt stack 0
  1844  0019FA                     _initLCD:
  1845                           	opt stack 28
  1846                           
  1847                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1848                           
  1849                           ;incstack = 0
  1850  0019FA  0EC3               	movlw	195
  1851  0019FC  6E04               	movwf	??_initLCD& (0+255),c
  1852  0019FE  0ECD               	movlw	205
  1853  001A00                     u1157:
  1854  001A00  2EE8               	decfsz	wreg,f,c
  1855  001A02  D7FE               	bra	u1157
  1856  001A04  2E04               	decfsz	??_initLCD& (0+255),f,c
  1857  001A06  D7FC               	bra	u1157
  1858  001A08  F000               	nop	
  1859                           
  1860                           ;lcd.c: 69: lcdInst(0b00110011);
  1861  001A0A  0E33               	movlw	51
  1862  001A0C  EC8D  F00D         	call	_lcdInst
  1863                           
  1864                           ;lcd.c: 70: lcdInst(0b00110010);
  1865  001A10  0E32               	movlw	50
  1866  001A12  EC8D  F00D         	call	_lcdInst
  1867                           
  1868                           ;lcd.c: 71: lcdInst(0b00101000);
  1869  001A16  0E28               	movlw	40
  1870  001A18  EC8D  F00D         	call	_lcdInst
  1871                           
  1872                           ;lcd.c: 72: lcdInst(0b00001111);
  1873  001A1C  0E0F               	movlw	15
  1874  001A1E  EC8D  F00D         	call	_lcdInst
  1875                           
  1876                           ;lcd.c: 73: lcdInst(0b00000110);
  1877  001A22  0E06               	movlw	6
  1878  001A24  EC8D  F00D         	call	_lcdInst
  1879                           
  1880                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1881  001A28  0E01               	movlw	1
  1882  001A2A  EC8D  F00D         	call	_lcdInst
  1883  001A2E  0EC3               	movlw	195
  1884  001A30  6E04               	movwf	??_initLCD& (0+255),c
  1885  001A32  0ECD               	movlw	205
  1886  001A34                     u1167:
  1887  001A34  2EE8               	decfsz	wreg,f,c
  1888  001A36  D7FE               	bra	u1167
  1889  001A38  2E04               	decfsz	??_initLCD& (0+255),f,c
  1890  001A3A  D7FC               	bra	u1167
  1891  001A3C  F000               	nop	
  1892                           
  1893                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1894  001A3E  0E0F               	movlw	15
  1895  001A40  EC8D  F00D         	call	_lcdInst
  1896  001A44  0012               	return		;funcret
  1897  001A46                     __end_of_initLCD:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           prodh	equ	0xFF4
  1904                           prodl	equ	0xFF3
  1905                           intcon	equ	0xFF2
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postinc2	equ	0xFDE
  1909                           postdec2	equ	0xFDD
  1910                           fsr2h	equ	0xFDA
  1911                           fsr2l	equ	0xFD9
  1912                           status	equ	0xFD8
  1913                           
  1914 ;; *************** function _lcdInst *****************
  1915 ;; Defined at:
  1916 ;;		line 11 in file "lcd.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  data            1    wreg     unsigned char 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;  data            1    2[COMRAM] unsigned char 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;Total ram usage:        1 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    1
  1937 ;; This function calls:
  1938 ;;		_lcdNibble
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;;		_initLCD
  1942 ;;		_lcd_set_cursor
  1943 ;;		_lcd_shift_cursor
  1944 ;;		_lcd_shift_display
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text7
  1949  001B1A                     __ptext7:
  1950                           	opt stack 0
  1951  001B1A                     _lcdInst:
  1952                           	opt stack 29
  1953                           
  1954                           ;incstack = 0
  1955                           ;lcdInst@data stored from wreg
  1956  001B1A  6E03               	movwf	lcdInst@data,c
  1957                           
  1958                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1959  001B1C  948C               	bcf	3980,2,c	;volatile
  1960                           
  1961                           ;lcd.c: 20: lcdNibble(data);
  1962  001B1E  5003               	movf	lcdInst@data,w,c
  1963  001B20  EC67  F00C         	call	_lcdNibble
  1964                           
  1965                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1966  001B24  0EC8               	movlw	200
  1967  001B26                     u1177:
  1968  001B26  D000               	nop2	
  1969  001B28  2EE8               	decfsz	wreg,f,c
  1970  001B2A  D7FD               	bra	u1177
  1971  001B2C  0012               	return		;funcret
  1972  001B2E                     __end_of_lcdInst:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           prodh	equ	0xFF4
  1979                           prodl	equ	0xFF3
  1980                           intcon	equ	0xFF2
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           fsr2h	equ	0xFDA
  1986                           fsr2l	equ	0xFD9
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function _lcdNibble *****************
  1990 ;; Defined at:
  1991 ;;		line 37 in file "lcd.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  data            1    wreg     unsigned char 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  data            1    1[COMRAM] unsigned char 
  1996 ;;  temp            1    0[COMRAM] unsigned char 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;Total ram usage:        2 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_lcdInst
  2016 ;;		_putch
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text8
  2021  0018CE                     __ptext8:
  2022                           	opt stack 0
  2023  0018CE                     _lcdNibble:
  2024                           	opt stack 28
  2025                           
  2026                           ;incstack = 0
  2027                           ;lcdNibble@data stored from wreg
  2028  0018CE  6E02               	movwf	lcdNibble@data,c
  2029                           
  2030                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2031  0018D0  5002               	movf	lcdNibble@data,w,c
  2032  0018D2  0BF0               	andlw	240
  2033  0018D4  6E01               	movwf	lcdNibble@temp,c
  2034                           
  2035                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2036  0018D6  508C               	movf	3980,w,c	;volatile
  2037  0018D8  0B0F               	andlw	15
  2038  0018DA  6E8C               	movwf	3980,c	;volatile
  2039                           
  2040                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2041  0018DC  5001               	movf	lcdNibble@temp,w,c
  2042  0018DE  108C               	iorwf	3980,w,c	;volatile
  2043  0018E0  6E8C               	movwf	3980,c	;volatile
  2044                           
  2045                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2046  0018E2  0E00               	movlw	0
  2047  0018E4  BEF2               	btfsc	intcon,7,c	;volatile
  2048  0018E6  0E01               	movlw	1
  2049  0018E8  6E40               	movwf	lcd@LCDinterruptState,c
  2050  0018EA  9EF2               	bcf	intcon,7,c	;volatile
  2051  0018EC  868C               	bsf	3980,3,c	;volatile
  2052  0018EE  0E53               	movlw	83
  2053  0018F0                     u1187:
  2054  0018F0  2EE8               	decfsz	wreg,f,c
  2055  0018F2  D7FE               	bra	u1187
  2056  0018F4  F000               	nop	
  2057  0018F6  968C               	bcf	3980,3,c	;volatile
  2058  0018F8  0EC8               	movlw	200
  2059  0018FA                     u1197:
  2060  0018FA  D000               	nop2	
  2061  0018FC  2EE8               	decfsz	wreg,f,c
  2062  0018FE  D7FD               	bra	u1197
  2063  001900  B040               	btfsc	lcd@LCDinterruptState,0,c
  2064  001902  D002               	bra	u35
  2065  001904  9EF2               	bcf	intcon,7,c	;volatile
  2066  001906  D001               	bra	u36
  2067  001908                     u35:
  2068  001908  8EF2               	bsf	intcon,7,c	;volatile
  2069  00190A                     u36:
  2070                           
  2071                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2072  00190A  3802               	swapf	lcdNibble@data,w,c
  2073  00190C  0BF0               	andlw	240
  2074  00190E  6E02               	movwf	lcdNibble@data,c
  2075                           
  2076                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2077  001910  5002               	movf	lcdNibble@data,w,c
  2078  001912  0BF0               	andlw	240
  2079  001914  6E01               	movwf	lcdNibble@temp,c
  2080                           
  2081                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2082  001916  508C               	movf	3980,w,c	;volatile
  2083  001918  0B0F               	andlw	15
  2084  00191A  6E8C               	movwf	3980,c	;volatile
  2085                           
  2086                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2087  00191C  5001               	movf	lcdNibble@temp,w,c
  2088  00191E  108C               	iorwf	3980,w,c	;volatile
  2089  001920  6E8C               	movwf	3980,c	;volatile
  2090                           
  2091                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2092  001922  0E00               	movlw	0
  2093  001924  BEF2               	btfsc	intcon,7,c	;volatile
  2094  001926  0E01               	movlw	1
  2095  001928  6E40               	movwf	lcd@LCDinterruptState,c
  2096  00192A  9EF2               	bcf	intcon,7,c	;volatile
  2097  00192C  868C               	bsf	3980,3,c	;volatile
  2098  00192E  0E53               	movlw	83
  2099  001930                     u1207:
  2100  001930  2EE8               	decfsz	wreg,f,c
  2101  001932  D7FE               	bra	u1207
  2102  001934  F000               	nop	
  2103  001936  968C               	bcf	3980,3,c	;volatile
  2104  001938  0EC8               	movlw	200
  2105  00193A                     u1217:
  2106  00193A  D000               	nop2	
  2107  00193C  2EE8               	decfsz	wreg,f,c
  2108  00193E  D7FD               	bra	u1217
  2109  001940  B040               	btfsc	lcd@LCDinterruptState,0,c
  2110  001942  D002               	bra	u45
  2111  001944  9EF2               	bcf	intcon,7,c	;volatile
  2112  001946  D001               	bra	u46
  2113  001948                     u45:
  2114  001948  8EF2               	bsf	intcon,7,c	;volatile
  2115  00194A                     u46:
  2116  00194A  0012               	return		;funcret
  2117  00194C                     __end_of_lcdNibble:
  2118                           	opt stack 0
  2119                           tblptru	equ	0xFF8
  2120                           tblptrh	equ	0xFF7
  2121                           tblptrl	equ	0xFF6
  2122                           tablat	equ	0xFF5
  2123                           prodh	equ	0xFF4
  2124                           prodl	equ	0xFF3
  2125                           intcon	equ	0xFF2
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           postinc2	equ	0xFDE
  2129                           postdec2	equ	0xFDD
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _get_RTC_initial *****************
  2135 ;; Defined at:
  2136 ;;		line 161 in file "main.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      void 
  2143 ;; Registers used:
  2144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;Total ram usage:        1 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    2
  2157 ;; This function calls:
  2158 ;;		_I2C_Master_Read
  2159 ;;		_I2C_Master_Start
  2160 ;;		_I2C_Master_Stop
  2161 ;;		_I2C_Master_Write
  2162 ;;		___awdiv
  2163 ;;		___wmul
  2164 ;; This function is called by:
  2165 ;;		_main
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text9
  2170  0015A0                     __ptext9:
  2171                           	opt stack 0
  2172  0015A0                     _get_RTC_initial:
  2173                           	opt stack 28
  2174                           
  2175                           ;main.c: 163: I2C_Master_Start();
  2176                           
  2177                           ;incstack = 0
  2178  0015A0  ECA9  F00D         	call	_I2C_Master_Start	;wreg free
  2179                           
  2180                           ;main.c: 164: I2C_Master_Write(0b11010000);
  2181  0015A4  0E00               	movlw	0
  2182  0015A6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2183  0015A8  0ED0               	movlw	208
  2184  0015AA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2185  0015AC  ECA0  F00D         	call	_I2C_Master_Write	;wreg free
  2186                           
  2187                           ;main.c: 165: I2C_Master_Write(0x00);
  2188  0015B0  0E00               	movlw	0
  2189  0015B2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2190  0015B4  0E00               	movlw	0
  2191  0015B6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2192  0015B8  ECA0  F00D         	call	_I2C_Master_Write	;wreg free
  2193                           
  2194                           ;main.c: 166: I2C_Master_Stop();
  2195  0015BC  ECA5  F00D         	call	_I2C_Master_Stop	;wreg free
  2196                           
  2197                           ;main.c: 169: I2C_Master_Start();
  2198  0015C0  ECA9  F00D         	call	_I2C_Master_Start	;wreg free
  2199                           
  2200                           ;main.c: 170: I2C_Master_Write(0b11010001);
  2201  0015C4  0E00               	movlw	0
  2202  0015C6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2203  0015C8  0ED1               	movlw	209
  2204  0015CA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2205  0015CC  ECA0  F00D         	call	_I2C_Master_Write	;wreg free
  2206                           
  2207                           ;main.c: 171: for(i = 0; i < 6; i++){
  2208  0015D0  0E00               	movlw	0
  2209  0015D2  6E41               	movwf	_i,c
  2210  0015D4                     l1551:
  2211  0015D4  0E05               	movlw	5
  2212  0015D6  6441               	cpfsgt	_i,c
  2213  0015D8  D001               	goto	l101
  2214  0015DA  D00E               	goto	u780
  2215  0015DC                     l101:
  2216                           
  2217                           ;main.c: 172: time[i] = I2C_Master_Read(0);
  2218  0015DC  5041               	movf	_i,w,c
  2219  0015DE  0D01               	mullw	1
  2220  0015E0  0E27               	movlw	low _time
  2221  0015E2  24F3               	addwf	prodl,w,c
  2222  0015E4  6ED9               	movwf	fsr2l,c
  2223  0015E6  0E00               	movlw	high _time
  2224  0015E8  20F4               	addwfc	prodh,w,c
  2225  0015EA  6EDA               	movwf	fsr2h,c
  2226  0015EC  0E00               	movlw	0
  2227  0015EE  EC57  F00D         	call	_I2C_Master_Read
  2228  0015F2  6EDF               	movwf	indf2,c
  2229  0015F4  2A41               	incf	_i,f,c
  2230  0015F6  D7EE               	goto	l1551
  2231  0015F8                     u780:
  2232                           
  2233                           ;main.c: 173: }
  2234                           ;main.c: 174: time[6] = I2C_Master_Read(1);
  2235  0015F8  0E01               	movlw	1
  2236  0015FA  EC57  F00D         	call	_I2C_Master_Read
  2237  0015FE  6E2D               	movwf	_time+6,c
  2238                           
  2239                           ;main.c: 175: I2C_Master_Stop();
  2240  001600  ECA5  F00D         	call	_I2C_Master_Stop	;wreg free
  2241                           
  2242                           ;main.c: 177: hr_initial = time[2]/16*10+time[2]%16;
  2243  001604  C029  F00F         	movff	_time+2,??_get_RTC_initial
  2244  001608  0E0F               	movlw	15
  2245  00160A  160F               	andwf	??_get_RTC_initial,f,c
  2246  00160C  0E00               	movlw	0
  2247  00160E  6E04               	movwf	___awdiv@divisor+1,c
  2248  001610  0E10               	movlw	16
  2249  001612  6E03               	movwf	___awdiv@divisor,c
  2250  001614  C029  F001         	movff	_time+2,___awdiv@dividend
  2251  001618  6A02               	clrf	___awdiv@dividend+1,c
  2252  00161A  ECE4  F00B         	call	___awdiv	;wreg free
  2253  00161E  C001  F009         	movff	?___awdiv,___wmul@multiplier
  2254  001622  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  2255  001626  0E00               	movlw	0
  2256  001628  6E0C               	movwf	___wmul@multiplicand+1,c
  2257  00162A  0E0A               	movlw	10
  2258  00162C  6E0B               	movwf	___wmul@multiplicand,c
  2259  00162E  EC44  F00D         	call	___wmul	;wreg free
  2260  001632  500F               	movf	??_get_RTC_initial,w,c
  2261  001634  2409               	addwf	?___wmul,w,c
  2262  001636  6E3E               	movwf	_hr_initial,c
  2263  001638  0E00               	movlw	0
  2264  00163A  200A               	addwfc	?___wmul+1,w,c
  2265  00163C  6E3F               	movwf	_hr_initial+1,c
  2266                           
  2267                           ;main.c: 178: min_initial = time[1]/16*10 + time[1]%16;
  2268  00163E  C028  F00F         	movff	_time+1,??_get_RTC_initial
  2269  001642  0E0F               	movlw	15
  2270  001644  160F               	andwf	??_get_RTC_initial,f,c
  2271  001646  0E00               	movlw	0
  2272  001648  6E04               	movwf	___awdiv@divisor+1,c
  2273  00164A  0E10               	movlw	16
  2274  00164C  6E03               	movwf	___awdiv@divisor,c
  2275  00164E  C028  F001         	movff	_time+1,___awdiv@dividend
  2276  001652  6A02               	clrf	___awdiv@dividend+1,c
  2277  001654  ECE4  F00B         	call	___awdiv	;wreg free
  2278  001658  C001  F009         	movff	?___awdiv,___wmul@multiplier
  2279  00165C  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  2280  001660  0E00               	movlw	0
  2281  001662  6E0C               	movwf	___wmul@multiplicand+1,c
  2282  001664  0E0A               	movlw	10
  2283  001666  6E0B               	movwf	___wmul@multiplicand,c
  2284  001668  EC44  F00D         	call	___wmul	;wreg free
  2285  00166C  500F               	movf	??_get_RTC_initial,w,c
  2286  00166E  2409               	addwf	?___wmul,w,c
  2287  001670  6E3C               	movwf	_min_initial,c
  2288  001672  0E00               	movlw	0
  2289  001674  200A               	addwfc	?___wmul+1,w,c
  2290  001676  6E3D               	movwf	_min_initial+1,c
  2291                           
  2292                           ;main.c: 179: sec_initial = time[0]/16*10 +time[0]%16;
  2293  001678  C027  F00F         	movff	_time,??_get_RTC_initial
  2294  00167C  0E0F               	movlw	15
  2295  00167E  160F               	andwf	??_get_RTC_initial,f,c
  2296  001680  0E00               	movlw	0
  2297  001682  6E04               	movwf	___awdiv@divisor+1,c
  2298  001684  0E10               	movlw	16
  2299  001686  6E03               	movwf	___awdiv@divisor,c
  2300  001688  C027  F001         	movff	_time,___awdiv@dividend
  2301  00168C  6A02               	clrf	___awdiv@dividend+1,c
  2302  00168E  ECE4  F00B         	call	___awdiv	;wreg free
  2303  001692  C001  F009         	movff	?___awdiv,___wmul@multiplier
  2304  001696  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  2305  00169A  0E00               	movlw	0
  2306  00169C  6E0C               	movwf	___wmul@multiplicand+1,c
  2307  00169E  0E0A               	movlw	10
  2308  0016A0  6E0B               	movwf	___wmul@multiplicand,c
  2309  0016A2  EC44  F00D         	call	___wmul	;wreg free
  2310  0016A6  500F               	movf	??_get_RTC_initial,w,c
  2311  0016A8  2409               	addwf	?___wmul,w,c
  2312  0016AA  6E3A               	movwf	_sec_initial,c
  2313  0016AC  0E00               	movlw	0
  2314  0016AE  200A               	addwfc	?___wmul+1,w,c
  2315  0016B0  6E3B               	movwf	_sec_initial+1,c
  2316  0016B2  0012               	return		;funcret
  2317  0016B4                     __end_of_get_RTC_initial:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           postinc0	equ	0xFEE
  2327                           wreg	equ	0xFE8
  2328                           indf2	equ	0xFDF
  2329                           postinc2	equ	0xFDE
  2330                           postdec2	equ	0xFDD
  2331                           fsr2h	equ	0xFDA
  2332                           fsr2l	equ	0xFD9
  2333                           status	equ	0xFD8
  2334                           
  2335 ;; *************** function _get_RTC_final *****************
  2336 ;; Defined at:
  2337 ;;		line 182 in file "main.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;		None
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;		None
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      void 
  2344 ;; Registers used:
  2345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;Total ram usage:        1 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    2
  2358 ;; This function calls:
  2359 ;;		_I2C_Master_Read
  2360 ;;		_I2C_Master_Start
  2361 ;;		_I2C_Master_Stop
  2362 ;;		_I2C_Master_Write
  2363 ;;		___awdiv
  2364 ;;		___wmul
  2365 ;; This function is called by:
  2366 ;;		_main
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text10
  2371  0016B4                     __ptext10:
  2372                           	opt stack 0
  2373  0016B4                     _get_RTC_final:
  2374                           	opt stack 28
  2375                           
  2376                           ;main.c: 183: I2C_Master_Start();
  2377                           
  2378                           ;incstack = 0
  2379  0016B4  ECA9  F00D         	call	_I2C_Master_Start	;wreg free
  2380                           
  2381                           ;main.c: 184: I2C_Master_Write(0b11010000);
  2382  0016B8  0E00               	movlw	0
  2383  0016BA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2384  0016BC  0ED0               	movlw	208
  2385  0016BE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2386  0016C0  ECA0  F00D         	call	_I2C_Master_Write	;wreg free
  2387                           
  2388                           ;main.c: 185: I2C_Master_Write(0x00);
  2389  0016C4  0E00               	movlw	0
  2390  0016C6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2391  0016C8  0E00               	movlw	0
  2392  0016CA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2393  0016CC  ECA0  F00D         	call	_I2C_Master_Write	;wreg free
  2394                           
  2395                           ;main.c: 186: I2C_Master_Stop();
  2396  0016D0  ECA5  F00D         	call	_I2C_Master_Stop	;wreg free
  2397                           
  2398                           ;main.c: 189: I2C_Master_Start();
  2399  0016D4  ECA9  F00D         	call	_I2C_Master_Start	;wreg free
  2400                           
  2401                           ;main.c: 190: I2C_Master_Write(0b11010001);
  2402  0016D8  0E00               	movlw	0
  2403  0016DA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2404  0016DC  0ED1               	movlw	209
  2405  0016DE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2406  0016E0  ECA0  F00D         	call	_I2C_Master_Write	;wreg free
  2407                           
  2408                           ;main.c: 191: for(i = 0; i < 6; i++){
  2409  0016E4  0E00               	movlw	0
  2410  0016E6  6E41               	movwf	_i,c
  2411  0016E8                     l1573:
  2412  0016E8  0E05               	movlw	5
  2413  0016EA  6441               	cpfsgt	_i,c
  2414  0016EC  D001               	goto	l106
  2415  0016EE  D00E               	goto	u800
  2416  0016F0                     l106:
  2417                           
  2418                           ;main.c: 192: time[i] = I2C_Master_Read(0);
  2419  0016F0  5041               	movf	_i,w,c
  2420  0016F2  0D01               	mullw	1
  2421  0016F4  0E27               	movlw	low _time
  2422  0016F6  24F3               	addwf	prodl,w,c
  2423  0016F8  6ED9               	movwf	fsr2l,c
  2424  0016FA  0E00               	movlw	high _time
  2425  0016FC  20F4               	addwfc	prodh,w,c
  2426  0016FE  6EDA               	movwf	fsr2h,c
  2427  001700  0E00               	movlw	0
  2428  001702  EC57  F00D         	call	_I2C_Master_Read
  2429  001706  6EDF               	movwf	indf2,c
  2430  001708  2A41               	incf	_i,f,c
  2431  00170A  D7EE               	goto	l1573
  2432  00170C                     u800:
  2433                           
  2434                           ;main.c: 193: }
  2435                           ;main.c: 194: time[6] = I2C_Master_Read(1);
  2436  00170C  0E01               	movlw	1
  2437  00170E  EC57  F00D         	call	_I2C_Master_Read
  2438  001712  6E2D               	movwf	_time+6,c
  2439                           
  2440                           ;main.c: 195: I2C_Master_Stop();
  2441  001714  ECA5  F00D         	call	_I2C_Master_Stop	;wreg free
  2442                           
  2443                           ;main.c: 197: hr_final = time[2]/16*10+time[2]%16;
  2444  001718  C029  F00F         	movff	_time+2,??_get_RTC_final
  2445  00171C  0E0F               	movlw	15
  2446  00171E  160F               	andwf	??_get_RTC_final,f,c
  2447  001720  0E00               	movlw	0
  2448  001722  6E04               	movwf	___awdiv@divisor+1,c
  2449  001724  0E10               	movlw	16
  2450  001726  6E03               	movwf	___awdiv@divisor,c
  2451  001728  C029  F001         	movff	_time+2,___awdiv@dividend
  2452  00172C  6A02               	clrf	___awdiv@dividend+1,c
  2453  00172E  ECE4  F00B         	call	___awdiv	;wreg free
  2454  001732  C001  F009         	movff	?___awdiv,___wmul@multiplier
  2455  001736  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  2456  00173A  0E00               	movlw	0
  2457  00173C  6E0C               	movwf	___wmul@multiplicand+1,c
  2458  00173E  0E0A               	movlw	10
  2459  001740  6E0B               	movwf	___wmul@multiplicand,c
  2460  001742  EC44  F00D         	call	___wmul	;wreg free
  2461  001746  500F               	movf	??_get_RTC_final,w,c
  2462  001748  2409               	addwf	?___wmul,w,c
  2463  00174A  6E36               	movwf	_hr_final,c
  2464  00174C  0E00               	movlw	0
  2465  00174E  200A               	addwfc	?___wmul+1,w,c
  2466  001750  6E37               	movwf	_hr_final+1,c
  2467                           
  2468                           ;main.c: 198: min_final = time[1]/16*10 + time[1]%16;
  2469  001752  C028  F00F         	movff	_time+1,??_get_RTC_final
  2470  001756  0E0F               	movlw	15
  2471  001758  160F               	andwf	??_get_RTC_final,f,c
  2472  00175A  0E00               	movlw	0
  2473  00175C  6E04               	movwf	___awdiv@divisor+1,c
  2474  00175E  0E10               	movlw	16
  2475  001760  6E03               	movwf	___awdiv@divisor,c
  2476  001762  C028  F001         	movff	_time+1,___awdiv@dividend
  2477  001766  6A02               	clrf	___awdiv@dividend+1,c
  2478  001768  ECE4  F00B         	call	___awdiv	;wreg free
  2479  00176C  C001  F009         	movff	?___awdiv,___wmul@multiplier
  2480  001770  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  2481  001774  0E00               	movlw	0
  2482  001776  6E0C               	movwf	___wmul@multiplicand+1,c
  2483  001778  0E0A               	movlw	10
  2484  00177A  6E0B               	movwf	___wmul@multiplicand,c
  2485  00177C  EC44  F00D         	call	___wmul	;wreg free
  2486  001780  500F               	movf	??_get_RTC_final,w,c
  2487  001782  2409               	addwf	?___wmul,w,c
  2488  001784  6E34               	movwf	_min_final,c
  2489  001786  0E00               	movlw	0
  2490  001788  200A               	addwfc	?___wmul+1,w,c
  2491  00178A  6E35               	movwf	_min_final+1,c
  2492                           
  2493                           ;main.c: 199: sec_final = time[0]/16*10 + time[0]%16;
  2494  00178C  C027  F00F         	movff	_time,??_get_RTC_final
  2495  001790  0E0F               	movlw	15
  2496  001792  160F               	andwf	??_get_RTC_final,f,c
  2497  001794  0E00               	movlw	0
  2498  001796  6E04               	movwf	___awdiv@divisor+1,c
  2499  001798  0E10               	movlw	16
  2500  00179A  6E03               	movwf	___awdiv@divisor,c
  2501  00179C  C027  F001         	movff	_time,___awdiv@dividend
  2502  0017A0  6A02               	clrf	___awdiv@dividend+1,c
  2503  0017A2  ECE4  F00B         	call	___awdiv	;wreg free
  2504  0017A6  C001  F009         	movff	?___awdiv,___wmul@multiplier
  2505  0017AA  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  2506  0017AE  0E00               	movlw	0
  2507  0017B0  6E0C               	movwf	___wmul@multiplicand+1,c
  2508  0017B2  0E0A               	movlw	10
  2509  0017B4  6E0B               	movwf	___wmul@multiplicand,c
  2510  0017B6  EC44  F00D         	call	___wmul	;wreg free
  2511  0017BA  500F               	movf	??_get_RTC_final,w,c
  2512  0017BC  2409               	addwf	?___wmul,w,c
  2513  0017BE  6E32               	movwf	_sec_final,c
  2514  0017C0  0E00               	movlw	0
  2515  0017C2  200A               	addwfc	?___wmul+1,w,c
  2516  0017C4  6E33               	movwf	_sec_final+1,c
  2517  0017C6  0012               	return		;funcret
  2518  0017C8                     __end_of_get_RTC_final:
  2519                           	opt stack 0
  2520                           tblptru	equ	0xFF8
  2521                           tblptrh	equ	0xFF7
  2522                           tblptrl	equ	0xFF6
  2523                           tablat	equ	0xFF5
  2524                           prodh	equ	0xFF4
  2525                           prodl	equ	0xFF3
  2526                           intcon	equ	0xFF2
  2527                           postinc0	equ	0xFEE
  2528                           wreg	equ	0xFE8
  2529                           indf2	equ	0xFDF
  2530                           postinc2	equ	0xFDE
  2531                           postdec2	equ	0xFDD
  2532                           fsr2h	equ	0xFDA
  2533                           fsr2l	equ	0xFD9
  2534                           status	equ	0xFD8
  2535                           
  2536 ;; *************** function ___wmul *****************
  2537 ;; Defined at:
  2538 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;  multiplier      2    8[COMRAM] unsigned int 
  2541 ;;  multiplicand    2   10[COMRAM] unsigned int 
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  product         2   12[COMRAM] unsigned int 
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  2    8[COMRAM] unsigned int 
  2546 ;; Registers used:
  2547 ;;		wreg, status,2, status,0, prodl, prodh
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2553 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;Total ram usage:        6 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; This function calls:
  2560 ;;		Nothing
  2561 ;; This function is called by:
  2562 ;;		_main
  2563 ;;		_get_RTC_initial
  2564 ;;		_get_RTC_final
  2565 ;;		_printf
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text11
  2570  001A88                     __ptext11:
  2571                           	opt stack 0
  2572  001A88                     ___wmul:
  2573                           	opt stack 29
  2574                           
  2575                           ;incstack = 0
  2576  001A88  5009               	movf	___wmul@multiplier,w,c
  2577  001A8A  020B               	mulwf	___wmul@multiplicand,c
  2578  001A8C  CFF3 F00D          	movff	prodl,___wmul@product
  2579  001A90  CFF4 F00E          	movff	prodh,___wmul@product+1
  2580  001A94  5009               	movf	___wmul@multiplier,w,c
  2581  001A96  020C               	mulwf	___wmul@multiplicand+1,c
  2582  001A98  50F3               	movf	prodl,w,c
  2583  001A9A  260E               	addwf	___wmul@product+1,f,c
  2584  001A9C  500A               	movf	___wmul@multiplier+1,w,c
  2585  001A9E  020B               	mulwf	___wmul@multiplicand,c
  2586  001AA0  50F3               	movf	prodl,w,c
  2587  001AA2  260E               	addwf	___wmul@product+1,f,c
  2588  001AA4  C00D  F009         	movff	___wmul@product,?___wmul
  2589  001AA8  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  2590  001AAC  0012               	return	
  2591  001AAE                     __end_of___wmul:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           prodh	equ	0xFF4
  2598                           prodl	equ	0xFF3
  2599                           intcon	equ	0xFF2
  2600                           postinc0	equ	0xFEE
  2601                           wreg	equ	0xFE8
  2602                           indf2	equ	0xFDF
  2603                           postinc2	equ	0xFDE
  2604                           postdec2	equ	0xFDD
  2605                           fsr2h	equ	0xFDA
  2606                           fsr2l	equ	0xFD9
  2607                           status	equ	0xFD8
  2608                           
  2609 ;; *************** function ___awdiv *****************
  2610 ;; Defined at:
  2611 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;  dividend        2    0[COMRAM] int 
  2614 ;;  divisor         2    2[COMRAM] int 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  quotient        2    6[COMRAM] int 
  2617 ;;  sign            1    5[COMRAM] unsigned char 
  2618 ;;  counter         1    4[COMRAM] unsigned char 
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  2    0[COMRAM] int 
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2628 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;Total ram usage:        8 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; This function calls:
  2635 ;;		Nothing
  2636 ;; This function is called by:
  2637 ;;		_get_RTC_initial
  2638 ;;		_get_RTC_final
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text12
  2643  0017C8                     __ptext12:
  2644                           	opt stack 0
  2645  0017C8                     ___awdiv:
  2646                           	opt stack 29
  2647                           
  2648                           ;incstack = 0
  2649  0017C8  0E00               	movlw	0
  2650  0017CA  6E06               	movwf	___awdiv@sign,c
  2651  0017CC  AE04               	btfss	___awdiv@divisor+1,7,c
  2652  0017CE  D006               	goto	l440
  2653  0017D0  6C03               	negf	___awdiv@divisor,c
  2654  0017D2  1E04               	comf	___awdiv@divisor+1,f,c
  2655  0017D4  B0D8               	btfsc	status,0,c
  2656  0017D6  2A04               	incf	___awdiv@divisor+1,f,c
  2657  0017D8  0E01               	movlw	1
  2658  0017DA  6E06               	movwf	___awdiv@sign,c
  2659  0017DC                     l440:
  2660  0017DC  AE02               	btfss	___awdiv@dividend+1,7,c
  2661  0017DE  D006               	goto	l441
  2662  0017E0  6C01               	negf	___awdiv@dividend,c
  2663  0017E2  1E02               	comf	___awdiv@dividend+1,f,c
  2664  0017E4  B0D8               	btfsc	status,0,c
  2665  0017E6  2A02               	incf	___awdiv@dividend+1,f,c
  2666  0017E8  0E01               	movlw	1
  2667  0017EA  1A06               	xorwf	___awdiv@sign,f,c
  2668  0017EC                     l441:
  2669  0017EC  0E00               	movlw	0
  2670  0017EE  6E08               	movwf	___awdiv@quotient+1,c
  2671  0017F0  0E00               	movlw	0
  2672  0017F2  6E07               	movwf	___awdiv@quotient,c
  2673  0017F4  5003               	movf	___awdiv@divisor,w,c
  2674  0017F6  1004               	iorwf	___awdiv@divisor+1,w,c
  2675  0017F8  B4D8               	btfsc	status,2,c
  2676  0017FA  D01C               	goto	l448
  2677  0017FC  0E01               	movlw	1
  2678  0017FE  6E05               	movwf	___awdiv@counter,c
  2679  001800  D004               	goto	l443
  2680  001802  90D8               	bcf	status,0,c
  2681  001804  3603               	rlcf	___awdiv@divisor,f,c
  2682  001806  3604               	rlcf	___awdiv@divisor+1,f,c
  2683  001808  2A05               	incf	___awdiv@counter,f,c
  2684  00180A                     l443:
  2685  00180A  AE04               	btfss	___awdiv@divisor+1,7,c
  2686  00180C  D7FA               	goto	l444
  2687  00180E                     u640:
  2688  00180E  90D8               	bcf	status,0,c
  2689  001810  3607               	rlcf	___awdiv@quotient,f,c
  2690  001812  3608               	rlcf	___awdiv@quotient+1,f,c
  2691  001814  5003               	movf	___awdiv@divisor,w,c
  2692  001816  5C01               	subwf	___awdiv@dividend,w,c
  2693  001818  5004               	movf	___awdiv@divisor+1,w,c
  2694  00181A  5802               	subwfb	___awdiv@dividend+1,w,c
  2695  00181C  A0D8               	btfss	status,0,c
  2696  00181E  D005               	goto	l447
  2697  001820  5003               	movf	___awdiv@divisor,w,c
  2698  001822  5E01               	subwf	___awdiv@dividend,f,c
  2699  001824  5004               	movf	___awdiv@divisor+1,w,c
  2700  001826  5A02               	subwfb	___awdiv@dividend+1,f,c
  2701  001828  8007               	bsf	___awdiv@quotient,0,c
  2702  00182A                     l447:
  2703  00182A  90D8               	bcf	status,0,c
  2704  00182C  3204               	rrcf	___awdiv@divisor+1,f,c
  2705  00182E  3203               	rrcf	___awdiv@divisor,f,c
  2706  001830  2E05               	decfsz	___awdiv@counter,f,c
  2707  001832  D7ED               	goto	u640
  2708  001834                     l448:
  2709  001834  5006               	movf	___awdiv@sign,w,c
  2710  001836  B4D8               	btfsc	status,2,c
  2711  001838  D004               	goto	l449
  2712  00183A  6C07               	negf	___awdiv@quotient,c
  2713  00183C  1E08               	comf	___awdiv@quotient+1,f,c
  2714  00183E  B0D8               	btfsc	status,0,c
  2715  001840  2A08               	incf	___awdiv@quotient+1,f,c
  2716  001842                     l449:
  2717  001842  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2718  001846  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2719  00184A  0012               	return	
  2720  00184C                     __end_of___awdiv:
  2721                           	opt stack 0
  2722                           tblptru	equ	0xFF8
  2723                           tblptrh	equ	0xFF7
  2724                           tblptrl	equ	0xFF6
  2725                           tablat	equ	0xFF5
  2726                           prodh	equ	0xFF4
  2727                           prodl	equ	0xFF3
  2728                           intcon	equ	0xFF2
  2729                           postinc0	equ	0xFEE
  2730                           wreg	equ	0xFE8
  2731                           indf2	equ	0xFDF
  2732                           postinc2	equ	0xFDE
  2733                           postdec2	equ	0xFDD
  2734                           fsr2h	equ	0xFDA
  2735                           fsr2l	equ	0xFD9
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _I2C_Master_Write *****************
  2739 ;; Defined at:
  2740 ;;		line 108 in file "I2C.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, status,0, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;Total ram usage:        2 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    1
  2761 ;; This function calls:
  2762 ;;		_I2C_Master_Wait
  2763 ;; This function is called by:
  2764 ;;		_get_RTC_initial
  2765 ;;		_get_RTC_final
  2766 ;;		_RTC_setTime
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text13
  2771  001B40                     __ptext13:
  2772                           	opt stack 0
  2773  001B40                     _I2C_Master_Write:
  2774                           	opt stack 28
  2775                           
  2776                           ;I2C.c: 116: I2C_Master_Wait();
  2777                           
  2778                           ;incstack = 0
  2779  001B40  EC97  F00D         	call	_I2C_Master_Wait	;wreg free
  2780                           
  2781                           ;I2C.c: 117: SSPBUF = byteToWrite;
  2782  001B44  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2783  001B48  0012               	return		;funcret
  2784  001B4A                     __end_of_I2C_Master_Write:
  2785                           	opt stack 0
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           intcon	equ	0xFF2
  2793                           postinc0	equ	0xFEE
  2794                           wreg	equ	0xFE8
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _I2C_Master_Stop *****************
  2803 ;; Defined at:
  2804 ;;		line 95 in file "I2C.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;		None
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;		None
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;Total ram usage:        0 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    1
  2825 ;; This function calls:
  2826 ;;		_I2C_Master_Wait
  2827 ;; This function is called by:
  2828 ;;		_get_RTC_initial
  2829 ;;		_get_RTC_final
  2830 ;;		_RTC_setTime
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text14
  2835  001B4A                     __ptext14:
  2836                           	opt stack 0
  2837  001B4A                     _I2C_Master_Stop:
  2838                           	opt stack 28
  2839                           
  2840                           ;I2C.c: 104: I2C_Master_Wait();
  2841                           
  2842                           ;incstack = 0
  2843  001B4A  EC97  F00D         	call	_I2C_Master_Wait	;wreg free
  2844                           
  2845                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  2846  001B4E  84C5               	bsf	4037,2,c	;volatile
  2847  001B50  0012               	return		;funcret
  2848  001B52                     __end_of_I2C_Master_Stop:
  2849                           	opt stack 0
  2850                           tblptru	equ	0xFF8
  2851                           tblptrh	equ	0xFF7
  2852                           tblptrl	equ	0xFF6
  2853                           tablat	equ	0xFF5
  2854                           prodh	equ	0xFF4
  2855                           prodl	equ	0xFF3
  2856                           intcon	equ	0xFF2
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           indf2	equ	0xFDF
  2860                           postinc2	equ	0xFDE
  2861                           postdec2	equ	0xFDD
  2862                           fsr2h	equ	0xFDA
  2863                           fsr2l	equ	0xFD9
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _I2C_Master_Start *****************
  2867 ;; Defined at:
  2868 ;;		line 69 in file "I2C.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;Total ram usage:        0 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    1
  2889 ;; This function calls:
  2890 ;;		_I2C_Master_Wait
  2891 ;; This function is called by:
  2892 ;;		_get_RTC_initial
  2893 ;;		_get_RTC_final
  2894 ;;		_RTC_setTime
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text15
  2899  001B52                     __ptext15:
  2900                           	opt stack 0
  2901  001B52                     _I2C_Master_Start:
  2902                           	opt stack 28
  2903                           
  2904                           ;I2C.c: 78: I2C_Master_Wait();
  2905                           
  2906                           ;incstack = 0
  2907  001B52  EC97  F00D         	call	_I2C_Master_Wait	;wreg free
  2908                           
  2909                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  2910  001B56  80C5               	bsf	4037,0,c	;volatile
  2911  001B58  0012               	return		;funcret
  2912  001B5A                     __end_of_I2C_Master_Start:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           indf2	equ	0xFDF
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           fsr2h	equ	0xFDA
  2927                           fsr2l	equ	0xFD9
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _I2C_Master_Read *****************
  2931 ;; Defined at:
  2932 ;;		line 120 in file "I2C.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  ackBit          1    wreg     unsigned char 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  ackBit          1    1[COMRAM] unsigned char 
  2937 ;;  receivedByte    1    2[COMRAM] unsigned char 
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      unsigned char 
  2940 ;; Registers used:
  2941 ;;		wreg, status,2, status,0, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;Total ram usage:        2 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    1
  2954 ;; This function calls:
  2955 ;;		_I2C_Master_Wait
  2956 ;; This function is called by:
  2957 ;;		_get_RTC_initial
  2958 ;;		_get_RTC_final
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text16
  2963  001AAE                     __ptext16:
  2964                           	opt stack 0
  2965  001AAE                     _I2C_Master_Read:
  2966                           	opt stack 28
  2967                           
  2968                           ;incstack = 0
  2969                           ;I2C_Master_Read@ackBit stored from wreg
  2970  001AAE  6E02               	movwf	I2C_Master_Read@ackBit,c
  2971                           
  2972                           ;I2C.c: 130: unsigned char receivedByte;
  2973                           ;I2C.c: 132: I2C_Master_Wait();
  2974  001AB0  EC97  F00D         	call	_I2C_Master_Wait	;wreg free
  2975                           
  2976                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  2977  001AB4  86C5               	bsf	4037,3,c	;volatile
  2978                           
  2979                           ;I2C.c: 135: I2C_Master_Wait();
  2980  001AB6  EC97  F00D         	call	_I2C_Master_Wait	;wreg free
  2981                           
  2982                           ;I2C.c: 136: receivedByte = SSPBUF;
  2983  001ABA  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  2984                           
  2985                           ;I2C.c: 138: I2C_Master_Wait();
  2986  001ABE  EC97  F00D         	call	_I2C_Master_Wait	;wreg free
  2987                           
  2988                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  2989  001AC2  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  2990  001AC4  D002               	bra	u55
  2991  001AC6  9AC5               	bcf	4037,5,c	;volatile
  2992  001AC8  D001               	bra	u56
  2993  001ACA                     u55:
  2994  001ACA  8AC5               	bsf	4037,5,c	;volatile
  2995  001ACC                     u56:
  2996                           
  2997                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  2998  001ACC  88C5               	bsf	4037,4,c	;volatile
  2999                           
  3000                           ;I2C.c: 142: return receivedByte;
  3001  001ACE  5003               	movf	I2C_Master_Read@receivedByte,w,c
  3002  001AD0  0012               	return	
  3003  001AD2                     __end_of_I2C_Master_Read:
  3004                           	opt stack 0
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           prodh	equ	0xFF4
  3010                           prodl	equ	0xFF3
  3011                           intcon	equ	0xFF2
  3012                           postinc0	equ	0xFEE
  3013                           wreg	equ	0xFE8
  3014                           indf2	equ	0xFDF
  3015                           postinc2	equ	0xFDE
  3016                           postdec2	equ	0xFDD
  3017                           fsr2h	equ	0xFDA
  3018                           fsr2l	equ	0xFD9
  3019                           status	equ	0xFD8
  3020                           
  3021 ;; *************** function _I2C_Master_Wait *****************
  3022 ;; Defined at:
  3023 ;;		line 51 in file "I2C.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;		None
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;		None
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;Total ram usage:        1 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; This function calls:
  3044 ;;		Nothing
  3045 ;; This function is called by:
  3046 ;;		_I2C_Master_Start
  3047 ;;		_I2C_Master_Stop
  3048 ;;		_I2C_Master_Write
  3049 ;;		_I2C_Master_Read
  3050 ;;		_I2C_Master_RepeatedStart
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text17
  3055  001B2E                     __ptext17:
  3056                           	opt stack 0
  3057  001B2E                     _I2C_Master_Wait:
  3058                           	opt stack 28
  3059                           
  3060                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3061                           
  3062                           ;incstack = 0
  3063  001B2E  B4C7               	btfsc	4039,2,c	;volatile
  3064  001B30  D7FE               	goto	_I2C_Master_Wait
  3065  001B32  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  3066  001B36  0E1F               	movlw	31
  3067  001B38  1601               	andwf	??_I2C_Master_Wait,f,c
  3068  001B3A  B4D8               	btfsc	status,2,c
  3069  001B3C  0012               	return	
  3070  001B3E  D7F7               	goto	_I2C_Master_Wait
  3071  001B40                     __end_of_I2C_Master_Wait:
  3072                           	opt stack 0
  3073                           tblptru	equ	0xFF8
  3074                           tblptrh	equ	0xFF7
  3075                           tblptrl	equ	0xFF6
  3076                           tablat	equ	0xFF5
  3077                           prodh	equ	0xFF4
  3078                           prodl	equ	0xFF3
  3079                           intcon	equ	0xFF2
  3080                           postinc0	equ	0xFEE
  3081                           wreg	equ	0xFE8
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           postdec2	equ	0xFDD
  3085                           fsr2h	equ	0xFDA
  3086                           fsr2l	equ	0xFD9
  3087                           status	equ	0xFD8
  3088                           
  3089 ;; *************** function _I2C_Master_Init *****************
  3090 ;; Defined at:
  3091 ;;		line 14 in file "I2C.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;		None
  3096 ;; Return value:  Size  Location     Type
  3097 ;;                  1    wreg      void 
  3098 ;; Registers used:
  3099 ;;		wreg, status,2, status,0, cstack
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3105 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;Total ram usage:        8 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    1
  3112 ;; This function calls:
  3113 ;;		___lldiv
  3114 ;; This function is called by:
  3115 ;;		_main
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text18
  3120  00194C                     __ptext18:
  3121                           	opt stack 0
  3122  00194C                     _I2C_Master_Init:
  3123                           	opt stack 29
  3124                           
  3125                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  3126                           
  3127                           ;incstack = 0
  3128  00194C  9AC6               	bcf	4038,5,c	;volatile
  3129                           
  3130                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  3131  00194E  8694               	bsf	3988,3,c	;volatile
  3132                           
  3133                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  3134  001950  8894               	bsf	3988,4,c	;volatile
  3135                           
  3136                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  3137  001952  0E80               	movlw	128
  3138  001954  6EC7               	movwf	4039,c	;volatile
  3139                           
  3140                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  3141  001956  0E28               	movlw	40
  3142  001958  6EC6               	movwf	4038,c	;volatile
  3143                           
  3144                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  3145  00195A  0E00               	movlw	0
  3146  00195C  6EC5               	movwf	4037,c	;volatile
  3147                           
  3148                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  3149  00195E  0E00               	movlw	0
  3150  001960  6E01               	movwf	___lldiv@dividend,c
  3151  001962  0E5A               	movlw	90
  3152  001964  6E02               	movwf	___lldiv@dividend+1,c
  3153  001966  0E62               	movlw	98
  3154  001968  6E03               	movwf	___lldiv@dividend+2,c
  3155  00196A  0E02               	movlw	2
  3156  00196C  6E04               	movwf	___lldiv@dividend+3,c
  3157  00196E  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  3158  001972  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  3159  001976  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  3160  00197A  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  3161  00197E  0E02               	movlw	2
  3162  001980                     u765:
  3163  001980  90D8               	bcf	status,0,c
  3164  001982  3612               	rlcf	??_I2C_Master_Init,f,c
  3165  001984  3613               	rlcf	??_I2C_Master_Init+1,f,c
  3166  001986  3614               	rlcf	??_I2C_Master_Init+2,f,c
  3167  001988  3615               	rlcf	??_I2C_Master_Init+3,f,c
  3168  00198A  2EE8               	decfsz	wreg,f,c
  3169  00198C  D7F9               	goto	u765
  3170  00198E  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  3171  001992  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3172  001996  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3173  00199A  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3174  00199E  EC26  F00C         	call	___lldiv	;wreg free
  3175  0019A2  0401               	decf	?___lldiv,w,c
  3176  0019A4  6EC8               	movwf	4040,c	;volatile
  3177  0019A6  0012               	return		;funcret
  3178  0019A8                     __end_of_I2C_Master_Init:
  3179                           	opt stack 0
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           prodh	equ	0xFF4
  3185                           prodl	equ	0xFF3
  3186                           intcon	equ	0xFF2
  3187                           postinc0	equ	0xFEE
  3188                           wreg	equ	0xFE8
  3189                           indf2	equ	0xFDF
  3190                           postinc2	equ	0xFDE
  3191                           postdec2	equ	0xFDD
  3192                           fsr2h	equ	0xFDA
  3193                           fsr2l	equ	0xFD9
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function ___lldiv *****************
  3197 ;; Defined at:
  3198 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  dividend        4    0[COMRAM] unsigned long 
  3201 ;;  divisor         4    4[COMRAM] unsigned long 
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;  quotient        4    8[COMRAM] unsigned long 
  3204 ;;  counter         1   12[COMRAM] unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  4    0[COMRAM] unsigned long 
  3207 ;; Registers used:
  3208 ;;		wreg, status,2, status,0
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3214 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;Total ram usage:       13 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; This function calls:
  3221 ;;		Nothing
  3222 ;; This function is called by:
  3223 ;;		_I2C_Master_Init
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text19
  3228  00184C                     __ptext19:
  3229                           	opt stack 0
  3230  00184C                     ___lldiv:
  3231                           	opt stack 29
  3232                           
  3233                           ;incstack = 0
  3234  00184C  0E00               	movlw	0
  3235  00184E  6E09               	movwf	___lldiv@quotient,c
  3236  001850  0E00               	movlw	0
  3237  001852  6E0A               	movwf	___lldiv@quotient+1,c
  3238  001854  0E00               	movlw	0
  3239  001856  6E0B               	movwf	___lldiv@quotient+2,c
  3240  001858  0E00               	movlw	0
  3241  00185A  6E0C               	movwf	___lldiv@quotient+3,c
  3242  00185C  5005               	movf	___lldiv@divisor,w,c
  3243  00185E  1006               	iorwf	___lldiv@divisor+1,w,c
  3244  001860  1007               	iorwf	___lldiv@divisor+2,w,c
  3245  001862  1008               	iorwf	___lldiv@divisor+3,w,c
  3246  001864  B4D8               	btfsc	status,2,c
  3247  001866  D02A               	goto	l633
  3248  001868  0E01               	movlw	1
  3249  00186A  6E0D               	movwf	___lldiv@counter,c
  3250  00186C  D006               	goto	l628
  3251  00186E  90D8               	bcf	status,0,c
  3252  001870  3605               	rlcf	___lldiv@divisor,f,c
  3253  001872  3606               	rlcf	___lldiv@divisor+1,f,c
  3254  001874  3607               	rlcf	___lldiv@divisor+2,f,c
  3255  001876  3608               	rlcf	___lldiv@divisor+3,f,c
  3256  001878  2A0D               	incf	___lldiv@counter,f,c
  3257  00187A                     l628:
  3258  00187A  AE08               	btfss	___lldiv@divisor+3,7,c
  3259  00187C  D7F8               	goto	l629
  3260  00187E                     u680:
  3261  00187E  90D8               	bcf	status,0,c
  3262  001880  3609               	rlcf	___lldiv@quotient,f,c
  3263  001882  360A               	rlcf	___lldiv@quotient+1,f,c
  3264  001884  360B               	rlcf	___lldiv@quotient+2,f,c
  3265  001886  360C               	rlcf	___lldiv@quotient+3,f,c
  3266  001888  5005               	movf	___lldiv@divisor,w,c
  3267  00188A  5C01               	subwf	___lldiv@dividend,w,c
  3268  00188C  5006               	movf	___lldiv@divisor+1,w,c
  3269  00188E  5802               	subwfb	___lldiv@dividend+1,w,c
  3270  001890  5007               	movf	___lldiv@divisor+2,w,c
  3271  001892  5803               	subwfb	___lldiv@dividend+2,w,c
  3272  001894  5008               	movf	___lldiv@divisor+3,w,c
  3273  001896  5804               	subwfb	___lldiv@dividend+3,w,c
  3274  001898  A0D8               	btfss	status,0,c
  3275  00189A  D009               	goto	l632
  3276  00189C  5005               	movf	___lldiv@divisor,w,c
  3277  00189E  5E01               	subwf	___lldiv@dividend,f,c
  3278  0018A0  5006               	movf	___lldiv@divisor+1,w,c
  3279  0018A2  5A02               	subwfb	___lldiv@dividend+1,f,c
  3280  0018A4  5007               	movf	___lldiv@divisor+2,w,c
  3281  0018A6  5A03               	subwfb	___lldiv@dividend+2,f,c
  3282  0018A8  5008               	movf	___lldiv@divisor+3,w,c
  3283  0018AA  5A04               	subwfb	___lldiv@dividend+3,f,c
  3284  0018AC  8009               	bsf	___lldiv@quotient,0,c
  3285  0018AE                     l632:
  3286  0018AE  90D8               	bcf	status,0,c
  3287  0018B0  3208               	rrcf	___lldiv@divisor+3,f,c
  3288  0018B2  3207               	rrcf	___lldiv@divisor+2,f,c
  3289  0018B4  3206               	rrcf	___lldiv@divisor+1,f,c
  3290  0018B6  3205               	rrcf	___lldiv@divisor,f,c
  3291  0018B8  2E0D               	decfsz	___lldiv@counter,f,c
  3292  0018BA  D7E1               	goto	u680
  3293  0018BC                     l633:
  3294  0018BC  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3295  0018C0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3296  0018C4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3297  0018C8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3298  0018CC  0012               	return		;funcret
  3299  0018CE                     __end_of___lldiv:
  3300                           	opt stack 0
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           prodh	equ	0xFF4
  3306                           prodl	equ	0xFF3
  3307                           intcon	equ	0xFF2
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           indf2	equ	0xFDF
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           prodh	equ	0xFF4
  3321                           prodl	equ	0xFF3
  3322                           intcon	equ	0xFF2
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           indf2	equ	0xFDF
  3326                           postinc2	equ	0xFDE
  3327                           postdec2	equ	0xFDD
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8
  3331                           
  3332                           	psect	rparam
  3333  0000                     tblptru	equ	0xFF8
  3334                           tblptrh	equ	0xFF7
  3335                           tblptrl	equ	0xFF6
  3336                           tablat	equ	0xFF5
  3337                           prodh	equ	0xFF4
  3338                           prodl	equ	0xFF3
  3339                           intcon	equ	0xFF2
  3340                           postinc0	equ	0xFEE
  3341                           wreg	equ	0xFE8
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    48
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     38      66
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), STR_2(CODE[15]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _get_RTC_initial->___wmul
    _get_RTC_final->___wmul
    ___wmul->___awdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13972
                                             36 COMRAM     2     2      0
                    _I2C_Master_Init
                             ___wmul
                      _get_RTC_final
                    _get_RTC_initial
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3991
                                             14 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_RTC_initial                                      1     1      0    3779
                                             14 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_RTC_final                                        1     1      0    3779
                                             14 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1831
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     706
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   ___wmul
     ___awdiv (ARG)
   _get_RTC_final
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _get_RTC_initial
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     26      42       1       52.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      42      34        0.0%
DATA                 0      0      42       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 10:58:50 2018

                          _i 0041                  __CFG_CPD$ON 000000                           u35 1908  
                         u36 190A                           u45 1948                           u46 194A  
                         u55 1ACA                           u56 1ACC                 ___awdiv@sign 0006  
        ___wmul@multiplicand 000B                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l101 15DC                          l106 16F0                          l220 1084  
                        l230 1128                          l222 1098                          l223 1092  
                        l241 11FE                          l242 119E                          l251 1228  
                        l235 1156                          l219 1074                          l252 124C  
                        l236 1124                          l228 10C6                          l253 1254  
                        l254 1280                          l246 120E                          l238 1184  
                        l263 12AE                          l255 126A                          l247 11CE  
                        l440 17DC                          l264 1354                          l441 17EC  
                        l602 1AE8                          l266 133E                          l443 180A  
                        l267 12B4                          l444 1802                          l268 134E  
                        l269 12F8                          l447 182A                          l632 18AE  
                        l448 1834                          l633 18BC                          l449 1842  
                        l628 187A                          l629 186E                          l681 19C6  
                        l682 19BE                          l691 1A5C                          l692 1A54  
                        l685 19E6                          l686 19F0                          l695 1A74  
                        l696 1A7E                 __CFG_CPB$OFF 000000                          u710 19CA  
                        u640 180E                          u800 170C                          u740 1A60  
                        u680 187E                          u780 15F8                          u765 1980  
                        u990 1288                          prod 000FF3                          wreg 000FE8  
    __end_of_get_RTC_initial 16B4                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1551 15D4                         l1573 16E8                         l1653 11D2  
                       l1639 11A2                         STR_1 1060                         STR_2 1042  
                       STR_3 1051                         STR_4 1031                         u1000 129C  
                       u1020 135C                         u1107 14FC                         u1117 1510  
                       u1207 1930                         u1127 153A                         u1217 193A  
                       u1137 1590                         u1147 1B12                         u1067 13B0  
                       u1157 1A00                         u1077 13E4                         _LATA 000F89  
                       _LATB 000F8A                         u1167 1A34                         u1087 13FA  
                       _LATC 000F8B                         _LATD 000F8C                         u1177 1B26  
                       u1097 1412                         _LATE 000F8D                         u1187 18F0  
                       u1197 18FA                         _main 1376                         _keys 1001  
                       _time 0027                         fsr2h 000FDA                         indf2 000FDF  
                       fsr2l 000FD9                         prodh 000FF4                         prodl 000FF3  
                       start 0000                __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000  
               ___param_bank 000000             __end_of_LCD_LEFT 102C        I2C_Master_Read@ackBit 0002  
           ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___awdiv 184C  
            __end_of___lldiv 18CE              ___awdiv@divisor 0003              __end_of___lwdiv 19FA  
            __end_of___lwmod 1A88              ___awdiv@counter 0005                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 1B2E               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 1A46               __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C  
            __end_of_isdigit 1AF0                        _putch 1B06                        tablat 000FF5  
          _LCDinterruptState 0042                        status 000FD8  I2C_Master_Read@receivedByte 0003  
             __CFG_PBADEN$ON 000000              __initialization 1AF0                 __end_of_main 15A0  
               __end_of_keys 1012               __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 102D  
                     ??_main 0025                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0002             ?_get_RTC_initial 0001           ??_I2C_Master_Start 0002  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0004  
           ___awdiv@dividend 0001                       ?_putch 0001                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000                       ___wmul 1A88  
                  ??___awdiv 0005               __CFG_STVREN$ON 000000                    ??___lldiv 0009  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 1AF6  
           ___awdiv@quotient 0007                    ??_lcdInst 0003                       _printf 106A  
                  ??_initLCD 0004                    ??_isdigit 0001                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                 __accesstop 0080      __end_of__initialization 1AFC        __end_of_get_RTC_final 17C8  
              ___rparam_used 000001         __end_of_happynewyear 102B               __pcstackCOMRAM 0001  
              __end_of_putch 1B1A           __size_of_lcdNibble 007E                      ??_putch 0003  
                    ?___wmul 0009                      ?_printf 000F                   _final_time 0030  
       lcd@LCDinterruptState 0040                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7            __end_of_lcdNibble 194C                      __Hparam 0000  
                 _hr_initial 003E                      __Lparam 0000                      ___awdiv 17C8  
                    ___lldiv 184C              __size_of___wmul 0026                      ___lwdiv 19A8  
                    ___lwmod 1A46                 __psmallconst 1000                      __pcinit 1AF0  
                    __ramtop 1000                      _lcdInst 1B1A                      __ptext0 1376  
                    __ptext1 106A                      __ptext2 1B06                      __ptext3 1AD2  
                    __ptext4 1A46                      __ptext5 19A8                      __ptext6 19FA  
                    __ptext7 1B1A                      __ptext8 18CE                      __ptext9 15A0  
            __size_of_printf 030C                      _initLCD 19FA            __end_of_hexpowers 1024  
                    _dpowers 1012                      _isdigit 1AD2                    _LCD_RIGHT 102C  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012  
   __size_of_I2C_Master_Stop 0008         end_of_initialization 1AFC        __end_of_LCD_SIZE_HORZ 102F  
      __end_of_LCD_SIZE_VERT 102E                __Lmediumconst 0000               _operation_time 002E  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                      printf@c 0024                      printf@f 000F  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                  _TRISCbits 000F94                 _happynewyear 1024     __size_of_get_RTC_initial 0114  
                printf@width 0022               __end_of___wmul 1AAE               __end_of_printf 1376  
        start_initialization 1AF0            ??_I2C_Master_Init 0012            ??_I2C_Master_Read 0002  
          ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002                     ??___wmul 000D  
   I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000                     ??_printf 0017  
     __size_of_get_RTC_final 0114                  __pbssCOMRAM 0027             _I2C_Master_Start 1B52  
           _I2C_Master_Write 1B40             ___lwdiv@dividend 0001                 _initial_time 0038  
          __CFG_CCP2MX$PORTC 000000            ??_get_RTC_initial 000F                    _lcdNibble 18CE  
                   ?___awdiv 0001                     ?___lldiv 0001                     ?___lwdiv 0001  
                   ?___lwmod 0008                     ?_lcdInst 0001                     ?_initLCD 0001  
                __smallconst 1000                     ?_isdigit 0001                    _hexpowers 101C  
           ___lwdiv@quotient 0005                    _min_final 0034               __size_of_putch 0014  
                  _sec_final 0032                     _LCD_LEFT 102B               ___wmul@product 000D  
                   _LATDbits 000F8C                _get_RTC_final 16B4             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001            ___wmul@multiplier 0009                lcdNibble@data 0002  
                 printf@flag 0021                lcdNibble@temp 0001                   printf@prec 001E  
             _LCD_HORZ_LIMIT 1030               ?_get_RTC_final 0001                     __Hrparam 0000  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 0084  
           __size_of___lldiv 0082             __size_of___lwdiv 0052             __size_of___lwmod 0042  
                _isdigit$663 0002             __size_of_lcdInst 0014              _I2C_Master_Init 194C  
            _I2C_Master_Read 1AAE             __size_of_initLCD 004C              _I2C_Master_Wait 1B2E  
            _I2C_Master_Stop 1B4A       __end_of_LCD_HORZ_LIMIT 1031             __size_of_isdigit 001E  
            ___lwdiv@divisor 0003              ___lwdiv@counter 0007                     __ptext10 16B4  
                   __ptext11 1A88                     __ptext12 17C8                     __ptext13 1B40  
                   __ptext14 1B4A                     __ptext15 1B52                     __ptext16 1AAE  
                   __ptext17 1B2E                     __ptext18 194C                     __ptext19 184C  
             _LCD_VERT_LIMIT 102F                  _min_initial 003C                     _hr_final 0036  
              __size_of_main 022A                  _sec_initial 003A                  ??_lcdNibble 0001  
                  printf@idx 001B                    printf@val 001F  I2C_Master_Write@byteToWrite 0002  
                  putch@data 0003     __end_of_I2C_Master_Start 1B5A     __end_of_I2C_Master_Write 1B4A  
                 _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1030                     isdigit@c 0003  
            _get_RTC_initial 15A0              ??_get_RTC_final 000F                _LCD_SIZE_HORZ 102E  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 102D             ___lldiv@dividend 0001  
                   printf@ap 001C      __end_of_I2C_Master_Init 19A8      __end_of_I2C_Master_Read 1AD2  
    __end_of_I2C_Master_Wait 1B40      __end_of_I2C_Master_Stop 1B52                  lcdInst@data 0003  
           ___lldiv@quotient 0009              ___lwmod@divisor 000A              ___lwmod@counter 000C  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
