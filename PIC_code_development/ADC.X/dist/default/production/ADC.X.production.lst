

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 30 15:25:32 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4620 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  0011C2                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _mode
    60  0011C2  0001               	dw	1
    61                           
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt stack 0
    65  001000  00                 	db	0
    66  001001                     _LCD_LEFT:
    67                           	opt stack 0
    68  001001  00                 	db	0
    69  001002                     __end_of_LCD_LEFT:
    70                           	opt stack 0
    71  001002                     _LCD_RIGHT:
    72                           	opt stack 0
    73  001002  01                 	db	1
    74  001003                     __end_of_LCD_RIGHT:
    75                           	opt stack 0
    76  001003                     _LCD_SIZE_VERT:
    77                           	opt stack 0
    78  001003  02                 	db	2
    79  001004                     __end_of_LCD_SIZE_VERT:
    80                           	opt stack 0
    81  001004                     _LCD_SIZE_HORZ:
    82                           	opt stack 0
    83  001004  10                 	db	16
    84  001005                     __end_of_LCD_SIZE_HORZ:
    85                           	opt stack 0
    86  001005                     _LCD_VERT_LIMIT:
    87                           	opt stack 0
    88  001005  02                 	db	2
    89  001006                     __end_of_LCD_VERT_LIMIT:
    90                           	opt stack 0
    91  001006                     _LCD_HORZ_LIMIT:
    92                           	opt stack 0
    93  001006  28                 	db	40
    94  001007                     __end_of_LCD_HORZ_LIMIT:
    95                           	opt stack 0
    96  0000                     _INTCONbits	set	4082
    97  0000                     _LATDbits	set	3980
    98  0000                     _ADRESL	set	4035
    99  0000                     _ADRESH	set	4036
   100  0000                     _ADCON0bits	set	4034
   101  0000                     _ADCON2bits	set	4032
   102  0000                     _ADCON1	set	4033
   103  0000                     _ADCON0	set	4034
   104  0000                     _TRISE	set	3990
   105  0000                     _TRISD	set	3989
   106  0000                     _TRISC	set	3988
   107  0000                     _TRISB	set	3987
   108  0000                     _TRISA	set	3986
   109  0000                     _LATE	set	3981
   110  0000                     _LATD	set	3980
   111  0000                     _LATC	set	3979
   112  0000                     _LATB	set	3978
   113  0000                     _LATA	set	3977
   114  0000                     _ADON	set	32272
   115  001007                     STR_1:
   116  001007  73                 	db	115	;'s'
   117  001008  74                 	db	116	;'t'
   118  001009  61                 	db	97	;'a'
   119  00100A  72                 	db	114	;'r'
   120  00100B  74                 	db	116	;'t'
   121  00100C  00                 	db	0
   122                           
   123                           ; #config settings
   124  00100D  00                 	db	0	; dummy byte at the end
   125  0000                     
   126                           	psect	cinit
   127  001142                     __pcinit:
   128                           	opt stack 0
   129  001142                     start_initialization:
   130                           	opt stack 0
   131  001142                     __initialization:
   132                           	opt stack 0
   133                           
   134                           ; Initialize objects allocated to COMRAM (2 bytes)
   135                           ; load TBLPTR registers with __pidataCOMRAM
   136  001142  0EC2               	movlw	low __pidataCOMRAM
   137  001144  6EF6               	movwf	tblptrl,c
   138  001146  0E11               	movlw	high __pidataCOMRAM
   139  001148  6EF7               	movwf	tblptrh,c
   140  00114A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   141  00114C  6EF8               	movwf	tblptru,c
   142  00114E  0009               	tblrd		*+	;fetch initializer
   143  001150  CFF5 F00F          	movff	tablat,__pdataCOMRAM
   144  001154  0009               	tblrd		*+	;fetch initializer
   145  001156  CFF5 F010          	movff	tablat,__pdataCOMRAM+1
   146                           
   147                           ; Clear objects allocated to COMRAM (4 bytes)
   148  00115A  6A0E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   149  00115C  6A0D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   150  00115E  6A0C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   151  001160  6A0B               	clrf	__pbssCOMRAM& (0+255),c
   152  001162                     end_of_initialization:
   153                           	opt stack 0
   154  001162                     __end_of__initialization:
   155                           	opt stack 0
   156  001162  0E00               	movlw	low (__Lsmallconst shr (0+16))
   157  001164  6EF8               	movwf	tblptru,c
   158  001166  0E10               	movlw	high __Lsmallconst
   159  001168  6EF7               	movwf	tblptrh,c
   160  00116A  0100               	movlb	0
   161  00116C  EF46  F008         	goto	_main	;jump to C main() function
   162                           tblptru	equ	0xFF8
   163                           tblptrh	equ	0xFF7
   164                           tblptrl	equ	0xFF6
   165                           tablat	equ	0xFF5
   166                           
   167                           	psect	bssCOMRAM
   168  00000B                     __pbssCOMRAM:
   169                           	opt stack 0
   170  00000B                     _counter:
   171                           	opt stack 0
   172  00000B                     	ds	2
   173  00000D                     lcd@LCDinterruptState:
   174                           	opt stack 0
   175  00000D                     	ds	1
   176  00000E                     	ds	1
   177                           tblptru	equ	0xFF8
   178                           tblptrh	equ	0xFF7
   179                           tblptrl	equ	0xFF6
   180                           tablat	equ	0xFF5
   181                           
   182                           	psect	dataCOMRAM
   183  00000F                     __pdataCOMRAM:
   184                           	opt stack 0
   185  00000F                     _mode:
   186                           	opt stack 0
   187  00000F                     	ds	2
   188                           tblptru	equ	0xFF8
   189                           tblptrh	equ	0xFF7
   190                           tblptrl	equ	0xFF6
   191                           tablat	equ	0xFF5
   192                           
   193                           	psect	cstackCOMRAM
   194  000001                     __pcstackCOMRAM:
   195                           	opt stack 0
   196  000001                     lcdNibble@temp:
   197                           	opt stack 0
   198                           
   199                           ; 1 bytes @ 0x0
   200  000001                     	ds	1
   201  000002                     lcdNibble@data:
   202                           	opt stack 0
   203                           
   204                           ; 1 bytes @ 0x1
   205  000002                     	ds	1
   206  000003                     lcdInst@data:
   207                           	opt stack 0
   208  000003                     putch@data:
   209                           	opt stack 0
   210                           
   211                           ; 1 bytes @ 0x2
   212  000003                     	ds	1
   213  000004                     ??_initLCD:
   214  000004                     ?_printf:
   215                           	opt stack 0
   216  000004                     printf@f:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x3
   220  000004                     	ds	2
   221  000006                     printf@ap:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x5
   225  000006                     	ds	2
   226  000008                     printf@c:
   227                           	opt stack 0
   228                           
   229                           ; 1 bytes @ 0x7
   230  000008                     	ds	1
   231  000009                     ??_main:
   232                           
   233                           ; 1 bytes @ 0x8
   234  000009                     	ds	2
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 24 in file "main.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   261 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   263 ;;Total ram usage:        2 bytes
   264 ;; Hardware stack levels required when called:    3
   265 ;; This function calls:
   266 ;;		_initLCD
   267 ;;		_lcdInst
   268 ;;		_printf
   269 ;; This function is called by:
   270 ;;		Startup code after reset
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           	psect	text0
   275  00108C                     __ptext0:
   276                           	opt stack 0
   277  00108C                     _main:
   278                           	opt stack 28
   279                           
   280                           ;main.c: 42: LATA = 0x00;
   281                           
   282                           ;incstack = 0
   283  00108C  0E00               	movlw	0
   284  00108E  6E89               	movwf	3977,c	;volatile
   285                           
   286                           ;main.c: 43: LATB = 0x00;
   287  001090  0E00               	movlw	0
   288  001092  6E8A               	movwf	3978,c	;volatile
   289                           
   290                           ;main.c: 44: LATC = 0x00;
   291  001094  0E00               	movlw	0
   292  001096  6E8B               	movwf	3979,c	;volatile
   293                           
   294                           ;main.c: 45: LATD = 0x00;
   295  001098  0E00               	movlw	0
   296  00109A  6E8C               	movwf	3980,c	;volatile
   297                           
   298                           ;main.c: 46: LATE = 0x00;
   299  00109C  0E00               	movlw	0
   300  00109E  6E8D               	movwf	3981,c	;volatile
   301                           
   302                           ;main.c: 50: TRISA = 0xFF;
   303  0010A0  6892               	setf	3986,c	;volatile
   304                           
   305                           ;main.c: 51: TRISB = 0xFF;
   306  0010A2  6893               	setf	3987,c	;volatile
   307                           
   308                           ;main.c: 52: TRISC = 0x00;
   309  0010A4  0E00               	movlw	0
   310  0010A6  6E94               	movwf	3988,c	;volatile
   311                           
   312                           ;main.c: 53: TRISD = 0x00;
   313  0010A8  0E00               	movlw	0
   314  0010AA  6E95               	movwf	3989,c	;volatile
   315                           
   316                           ;main.c: 54: TRISE = 0x00;
   317  0010AC  0E00               	movlw	0
   318  0010AE  6E96               	movwf	3990,c	;volatile
   319                           
   320                           ;main.c: 57: ADCON0 = 0x00;
   321  0010B0  0E00               	movlw	0
   322  0010B2  6EC2               	movwf	4034,c	;volatile
   323                           
   324                           ;main.c: 58: ADCON1 = 0x0B;
   325  0010B4  0E0B               	movlw	11
   326  0010B6  6EC1               	movwf	4033,c	;volatile
   327                           
   328                           ;main.c: 59: ADCON2bits.ADFM = 1;
   329  0010B8  8EC0               	bsf	4032,7,c	;volatile
   330                           
   331                           ;main.c: 61: initLCD();
   332  0010BA  EC7D  F008         	call	_initLCD	;wreg free
   333                           
   334                           ;main.c: 62: printf("start");
   335  0010BE  0E07               	movlw	low STR_1
   336  0010C0  6E04               	movwf	printf@f,c
   337  0010C2  0E10               	movlw	high STR_1
   338  0010C4  6E05               	movwf	printf@f+1,c
   339  0010C6  ECB8  F008         	call	_printf	;wreg free
   340                           
   341                           ;main.c: 63: lcdInst(0x80);_delay((unsigned long)((5)*(4000000/4000.0)));;
   342  0010CA  0E80               	movlw	128
   343  0010CC  ECD7  F008         	call	_lcdInst
   344  0010D0  0E07               	movlw	7
   345  0010D2  6E09               	movwf	??_main& (0+255),c
   346  0010D4  0E7D               	movlw	125
   347  0010D6                     u127:
   348  0010D6  2EE8               	decfsz	wreg,f,c
   349  0010D8  D7FE               	bra	u127
   350  0010DA  2E09               	decfsz	??_main& (0+255),f,c
   351  0010DC  D7FC               	bra	u127
   352  0010DE  F000               	nop	
   353                           
   354                           ;main.c: 64: _delay((unsigned long)((3000)*(4000000/4000.0)));
   355  0010E0  0E10               	movlw	16
   356  0010E2  6E0A               	movwf	(??_main+1)& (0+255),c
   357  0010E4  0E39               	movlw	57
   358  0010E6  6E09               	movwf	??_main& (0+255),c
   359  0010E8  0E0E               	movlw	14
   360  0010EA                     u137:
   361  0010EA  2EE8               	decfsz	wreg,f,c
   362  0010EC  D7FE               	bra	u137
   363  0010EE  2E09               	decfsz	??_main& (0+255),f,c
   364  0010F0  D7FC               	bra	u137
   365  0010F2  2E0A               	decfsz	(??_main+1)& (0+255),f,c
   366  0010F4  D7FA               	bra	u137
   367  0010F6  EF00  F000         	goto	start
   368  0010FA                     __end_of_main:
   369                           	opt stack 0
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           wreg	equ	0xFE8
   375                           
   376 ;; *************** function _printf *****************
   377 ;; Defined at:
   378 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;  f               2    3[COMRAM] PTR const unsigned char 
   381 ;;		 -> STR_1(6), 
   382 ;; Auto vars:     Size  Location     Type
   383 ;;  tmpval          4    0        struct .
   384 ;;  cp              3    0        PTR const unsigned char 
   385 ;;  ap              2    5[COMRAM] PTR void [1]
   386 ;;		 -> ?_printf(2), 
   387 ;;  len             2    0        unsigned int 
   388 ;;  val             2    0        unsigned int 
   389 ;;  c               1    7[COMRAM] char 
   390 ;;  flag            1    0        unsigned char 
   391 ;;  prec            1    0        char 
   392 ;; Return value:  Size  Location     Type
   393 ;;                  2    3[COMRAM] int 
   394 ;; Registers used:
   395 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   396 ;; Tracked objects:
   397 ;;		On entry : 0/0
   398 ;;		On exit  : 0/0
   399 ;;		Unchanged: 0/0
   400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   401 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   402 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   404 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   405 ;;Total ram usage:        5 bytes
   406 ;; Hardware stack levels used:    1
   407 ;; Hardware stack levels required when called:    2
   408 ;; This function calls:
   409 ;;		_putch
   410 ;; This function is called by:
   411 ;;		_main
   412 ;; This function uses a non-reentrant model
   413 ;;
   414                           
   415                           	psect	text1
   416  001170                     __ptext1:
   417                           	opt stack 0
   418  001170                     _printf:
   419                           	opt stack 28
   420                           
   421                           ;doprnt.c: 466: va_list ap;
   422                           ;doprnt.c: 499: signed char c;
   423                           ;doprnt.c: 506: signed char prec;
   424                           ;doprnt.c: 508: unsigned char flag;
   425                           ;doprnt.c: 523: union {
   426                           ;doprnt.c: 524: unsigned long vd;
   427                           ;doprnt.c: 525: double integ;
   428                           ;doprnt.c: 526: } tmpval;
   429                           ;doprnt.c: 528: unsigned int val;
   430                           ;doprnt.c: 529: unsigned len;
   431                           ;doprnt.c: 530: const char * cp;
   432                           ;doprnt.c: 533: *ap = __va_start();
   433                           
   434                           ;incstack = 0
   435  001170  0E06               	movlw	low (?_printf+2)
   436  001172  6E06               	movwf	printf@ap,c
   437  001174  0E00               	movlw	high (?_printf+2)
   438  001176  6E07               	movwf	printf@ap+1,c
   439                           
   440                           ;doprnt.c: 536: while(c = *f++) {
   441  001178  D003               	goto	l133
   442  00117A                     
   443                           ;doprnt.c: 540: {
   444                           ;doprnt.c: 541: (putch(c) );
   445  00117A  5008               	movf	printf@c,w,c
   446  00117C  ECCD  F008         	call	_putch
   447  001180                     l133:
   448  001180  C004  FFF6         	movff	printf@f,tblptrl
   449  001184  C005  FFF7         	movff	printf@f+1,tblptrh
   450  001188  4A04               	infsnz	printf@f,f,c
   451  00118A  2A05               	incf	printf@f+1,f,c
   452  00118C                     	if	0	;tblptru may be non-zero
   453  00118C                     	endif
   454  00118C                     	if	0	;tblptru may be non-zero
   455  00118C                     	endif
   456  00118C  0008               	tblrd		*
   457  00118E  CFF5 F008          	movff	tablat,printf@c
   458  001192  5008               	movf	printf@c,w,c
   459  001194  B4D8               	btfsc	status,2,c
   460  001196  0012               	return	
   461  001198  D7F0               	goto	l134
   462  00119A                     __end_of_printf:
   463                           	opt stack 0
   464                           tblptru	equ	0xFF8
   465                           tblptrh	equ	0xFF7
   466                           tblptrl	equ	0xFF6
   467                           tablat	equ	0xFF5
   468                           wreg	equ	0xFE8
   469                           status	equ	0xFD8
   470                           
   471 ;; *************** function _putch *****************
   472 ;; Defined at:
   473 ;;		line 24 in file "lcd.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;  data            1    wreg     unsigned char 
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  data            1    2[COMRAM] unsigned char 
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, status,2, status,0, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   490 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   491 ;;Total ram usage:        1 bytes
   492 ;; Hardware stack levels used:    1
   493 ;; Hardware stack levels required when called:    1
   494 ;; This function calls:
   495 ;;		_lcdNibble
   496 ;; This function is called by:
   497 ;;		_printf
   498 ;; This function uses a non-reentrant model
   499 ;;
   500                           
   501                           	psect	text2
   502  00119A                     __ptext2:
   503                           	opt stack 0
   504  00119A                     _putch:
   505                           	opt stack 28
   506                           
   507                           ;incstack = 0
   508                           ;putch@data stored from wreg
   509  00119A  6E03               	movwf	putch@data,c
   510                           
   511                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   512  00119C  848C               	bsf	3980,2,c	;volatile
   513                           
   514                           ;lcd.c: 33: lcdNibble(data);
   515  00119E  5003               	movf	putch@data,w,c
   516  0011A0  EC07  F008         	call	_lcdNibble
   517                           
   518                           ;lcd.c: 34: _delay((unsigned long)((100)*(4000000/4000000.0)));
   519  0011A4  0E21               	movlw	33
   520  0011A6                     u147:
   521  0011A6  2EE8               	decfsz	wreg,f,c
   522  0011A8  D7FE               	bra	u147
   523  0011AA  F000               	nop	
   524  0011AC  0012               	return		;funcret
   525  0011AE                     __end_of_putch:
   526                           	opt stack 0
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           wreg	equ	0xFE8
   532                           status	equ	0xFD8
   533                           
   534 ;; *************** function _initLCD *****************
   535 ;; Defined at:
   536 ;;		line 60 in file "lcd.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, status,2, status,0, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   552 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;Total ram usage:        1 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; Hardware stack levels required when called:    2
   557 ;; This function calls:
   558 ;;		_lcdInst
   559 ;; This function is called by:
   560 ;;		_main
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           	psect	text3
   565  0010FA                     __ptext3:
   566                           	opt stack 0
   567  0010FA                     _initLCD:
   568                           	opt stack 28
   569                           
   570                           ;lcd.c: 68: _delay((unsigned long)((15)*(4000000/4000.0)));
   571                           
   572                           ;incstack = 0
   573  0010FA  0E14               	movlw	20
   574  0010FC  6E04               	movwf	??_initLCD& (0+255),c
   575  0010FE  0E7A               	movlw	122
   576  001100                     u157:
   577  001100  2EE8               	decfsz	wreg,f,c
   578  001102  D7FE               	bra	u157
   579  001104  2E04               	decfsz	??_initLCD& (0+255),f,c
   580  001106  D7FC               	bra	u157
   581                           
   582                           ;lcd.c: 69: lcdInst(0b00110011);
   583  001108  0E33               	movlw	51
   584  00110A  ECD7  F008         	call	_lcdInst
   585                           
   586                           ;lcd.c: 70: lcdInst(0b00110010);
   587  00110E  0E32               	movlw	50
   588  001110  ECD7  F008         	call	_lcdInst
   589                           
   590                           ;lcd.c: 71: lcdInst(0b00101000);
   591  001114  0E28               	movlw	40
   592  001116  ECD7  F008         	call	_lcdInst
   593                           
   594                           ;lcd.c: 72: lcdInst(0b00001111);
   595  00111A  0E0F               	movlw	15
   596  00111C  ECD7  F008         	call	_lcdInst
   597                           
   598                           ;lcd.c: 73: lcdInst(0b00000110);
   599  001120  0E06               	movlw	6
   600  001122  ECD7  F008         	call	_lcdInst
   601                           
   602                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(4000000/4000.0)));;
   603  001126  0E01               	movlw	1
   604  001128  ECD7  F008         	call	_lcdInst
   605  00112C  0E14               	movlw	20
   606  00112E  6E04               	movwf	??_initLCD& (0+255),c
   607  001130  0E7A               	movlw	122
   608  001132                     u167:
   609  001132  2EE8               	decfsz	wreg,f,c
   610  001134  D7FE               	bra	u167
   611  001136  2E04               	decfsz	??_initLCD& (0+255),f,c
   612  001138  D7FC               	bra	u167
   613                           
   614                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
   615  00113A  0E0F               	movlw	15
   616  00113C  ECD7  F008         	call	_lcdInst
   617  001140  0012               	return		;funcret
   618  001142                     __end_of_initLCD:
   619                           	opt stack 0
   620                           tblptru	equ	0xFF8
   621                           tblptrh	equ	0xFF7
   622                           tblptrl	equ	0xFF6
   623                           tablat	equ	0xFF5
   624                           wreg	equ	0xFE8
   625                           status	equ	0xFD8
   626                           
   627 ;; *************** function _lcdInst *****************
   628 ;; Defined at:
   629 ;;		line 11 in file "lcd.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  data            1    wreg     unsigned char 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  data            1    2[COMRAM] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   647 ;;Total ram usage:        1 bytes
   648 ;; Hardware stack levels used:    1
   649 ;; Hardware stack levels required when called:    1
   650 ;; This function calls:
   651 ;;		_lcdNibble
   652 ;; This function is called by:
   653 ;;		_main
   654 ;;		_initLCD
   655 ;;		_lcd_set_cursor
   656 ;;		_lcd_shift_cursor
   657 ;;		_lcd_shift_display
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text4
   662  0011AE                     __ptext4:
   663                           	opt stack 0
   664  0011AE                     _lcdInst:
   665                           	opt stack 29
   666                           
   667                           ;incstack = 0
   668                           ;lcdInst@data stored from wreg
   669  0011AE  6E03               	movwf	lcdInst@data,c
   670                           
   671                           ;lcd.c: 19: LATDbits.LATD2 = 0;
   672  0011B0  948C               	bcf	3980,2,c	;volatile
   673                           
   674                           ;lcd.c: 20: lcdNibble(data);
   675  0011B2  5003               	movf	lcdInst@data,w,c
   676  0011B4  EC07  F008         	call	_lcdNibble
   677                           
   678                           ;lcd.c: 21: _delay((unsigned long)((100)*(4000000/4000000.0)));
   679  0011B8  0E21               	movlw	33
   680  0011BA                     u177:
   681  0011BA  2EE8               	decfsz	wreg,f,c
   682  0011BC  D7FE               	bra	u177
   683  0011BE  F000               	nop	
   684  0011C0  0012               	return		;funcret
   685  0011C2                     __end_of_lcdInst:
   686                           	opt stack 0
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           wreg	equ	0xFE8
   692                           status	equ	0xFD8
   693                           
   694 ;; *************** function _lcdNibble *****************
   695 ;; Defined at:
   696 ;;		line 37 in file "lcd.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  data            1    wreg     unsigned char 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  data            1    1[COMRAM] unsigned char 
   701 ;;  temp            1    0[COMRAM] unsigned char 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, status,2, status,0
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   715 ;;Total ram usage:        2 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_lcdInst
   721 ;;		_putch
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text5
   726  00100E                     __ptext5:
   727                           	opt stack 0
   728  00100E                     _lcdNibble:
   729                           	opt stack 28
   730                           
   731                           ;incstack = 0
   732                           ;lcdNibble@data stored from wreg
   733  00100E  6E02               	movwf	lcdNibble@data,c
   734                           
   735                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
   736  001010  5002               	movf	lcdNibble@data,w,c
   737  001012  0BF0               	andlw	240
   738  001014  6E01               	movwf	lcdNibble@temp,c
   739                           
   740                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
   741  001016  508C               	movf	3980,w,c	;volatile
   742  001018  0B0F               	andlw	15
   743  00101A  6E8C               	movwf	3980,c	;volatile
   744                           
   745                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
   746  00101C  5001               	movf	lcdNibble@temp,w,c
   747  00101E  108C               	iorwf	3980,w,c	;volatile
   748  001020  6E8C               	movwf	3980,c	;volatile
   749                           
   750                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(4000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(4000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   751  001022  0E00               	movlw	0
   752  001024  BEF2               	btfsc	intcon,7,c	;volatile
   753  001026  0E01               	movlw	1
   754  001028  6E0D               	movwf	lcd@LCDinterruptState,c
   755  00102A  9EF2               	bcf	intcon,7,c	;volatile
   756  00102C  868C               	bsf	3980,3,c	;volatile
   757  00102E  0E08               	movlw	8
   758  001030                     u187:
   759  001030  2EE8               	decfsz	wreg,f,c
   760  001032  D7FE               	bra	u187
   761  001034  F000               	nop	
   762  001036  968C               	bcf	3980,3,c	;volatile
   763  001038  0E21               	movlw	33
   764  00103A                     u197:
   765  00103A  2EE8               	decfsz	wreg,f,c
   766  00103C  D7FE               	bra	u197
   767  00103E  F000               	nop	
   768  001040  B00D               	btfsc	lcd@LCDinterruptState,0,c
   769  001042  D002               	bra	u15
   770  001044  9EF2               	bcf	intcon,7,c	;volatile
   771  001046  D001               	bra	u16
   772  001048                     u15:
   773  001048  8EF2               	bsf	intcon,7,c	;volatile
   774  00104A                     u16:
   775                           
   776                           ;lcd.c: 52: data = (unsigned char) (data << 4);
   777  00104A  3802               	swapf	lcdNibble@data,w,c
   778  00104C  0BF0               	andlw	240
   779  00104E  6E02               	movwf	lcdNibble@data,c
   780                           
   781                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
   782  001050  5002               	movf	lcdNibble@data,w,c
   783  001052  0BF0               	andlw	240
   784  001054  6E01               	movwf	lcdNibble@temp,c
   785                           
   786                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
   787  001056  508C               	movf	3980,w,c	;volatile
   788  001058  0B0F               	andlw	15
   789  00105A  6E8C               	movwf	3980,c	;volatile
   790                           
   791                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
   792  00105C  5001               	movf	lcdNibble@temp,w,c
   793  00105E  108C               	iorwf	3980,w,c	;volatile
   794  001060  6E8C               	movwf	3980,c	;volatile
   795                           
   796                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(4000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(4000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   797  001062  0E00               	movlw	0
   798  001064  BEF2               	btfsc	intcon,7,c	;volatile
   799  001066  0E01               	movlw	1
   800  001068  6E0D               	movwf	lcd@LCDinterruptState,c
   801  00106A  9EF2               	bcf	intcon,7,c	;volatile
   802  00106C  868C               	bsf	3980,3,c	;volatile
   803  00106E  0E08               	movlw	8
   804  001070                     u207:
   805  001070  2EE8               	decfsz	wreg,f,c
   806  001072  D7FE               	bra	u207
   807  001074  F000               	nop	
   808  001076  968C               	bcf	3980,3,c	;volatile
   809  001078  0E21               	movlw	33
   810  00107A                     u217:
   811  00107A  2EE8               	decfsz	wreg,f,c
   812  00107C  D7FE               	bra	u217
   813  00107E  F000               	nop	
   814  001080  B00D               	btfsc	lcd@LCDinterruptState,0,c
   815  001082  D002               	bra	u25
   816  001084  9EF2               	bcf	intcon,7,c	;volatile
   817  001086  D001               	bra	u26
   818  001088                     u25:
   819  001088  8EF2               	bsf	intcon,7,c	;volatile
   820  00108A                     u26:
   821  00108A  0012               	return		;funcret
   822  00108C                     __end_of_lcdNibble:
   823                           	opt stack 0
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           intcon	equ	0xFF2
   829                           wreg	equ	0xFE8
   830                           status	equ	0xFD8
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           intcon	equ	0xFF2
   836                           wreg	equ	0xFE8
   837                           status	equ	0xFD8
   838                           
   839                           	psect	rparam
   840  0000                     tblptru	equ	0xFF8
   841                           tblptrh	equ	0xFF7
   842                           tblptrl	equ	0xFF6
   843                           tablat	equ	0xFF5
   844                           intcon	equ	0xFF2
   845                           wreg	equ	0xFE8
   846                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    6
    Data        2
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     10      16
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_putch
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     392
                                              8 COMRAM     2     2      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     212
                                              3 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F      A      10       1       12.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      10      34        0.0%
DATA                 0      0      10       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 30 15:25:32 2018

                     u15 1048                       u16 104A                       u25 1088  
                     u26 108A              __CFG_CPD$ON 000000              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l133 1180                      l134 117A  
           __CFG_CPB$OFF 000000                      u207 1070                      u127 10D6  
                    u217 107A                      u137 10EA                      u147 11A6  
                    u157 1100                      u167 1132                      u177 11BA  
                    u187 1030                      u197 103A                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     _ADON 007E10  
                   STR_1 1007                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _LATE 000F8D  
                   _main 108C                     _mode 000F                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
       __end_of_LCD_LEFT 1002                    ?_main 0001                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
        __end_of_lcdInst 11C2           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initLCD 1142           __CFG_EBTRB$OFF 000000                    _putch 119A  
                  tablat 000FF5        _LCDinterruptState 000E                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 1142             __end_of_main 10FA  
         __CFG_OSC$HSPLL 000000        __end_of_LCD_RIGHT 1003                   ??_main 0009  
          __activetblptr 000001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_putch 0001  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??_lcdInst 0003  
                 _printf 1170                ??_initLCD 0004             __pdataCOMRAM 000F  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 1162  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 11AE  
     __size_of_lcdNibble 007E                  ??_putch 0003                  ?_printf 0004  
   lcd@LCDinterruptState 000D        __end_of_lcdNibble 108C                  __Hparam 0000  
                __Lparam 0000             __psmallconst 1000                  __pcinit 1142  
                __ramtop 1000                  _lcdInst 11AE                  __ptext0 108C  
                __ptext1 1170                  __ptext2 119A                  __ptext3 10FA  
                __ptext4 11AE                  __ptext5 100E          __size_of_printf 002A  
                _initLCD 10FA                  _counter 000B                _LCD_RIGHT 1002  
   end_of_initialization 1162    __end_of_LCD_SIZE_HORZ 1005    __end_of_LCD_SIZE_VERT 1004  
                printf@c 0008                  printf@f 0004            __pidataCOMRAM 11C2  
         __end_of_printf 119A      start_initialization 1142         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0006              __pbssCOMRAM 000B        __CFG_CCP2MX$PORTC 000000  
              _lcdNibble 100E                 ?_lcdInst 0001                 ?_initLCD 0001  
            __smallconst 1000           __size_of_putch 0014                 _LCD_LEFT 1001  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000               ?_lcdNibble 0001  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0            lcdNibble@data 0002  
          lcdNibble@temp 0001           _LCD_HORZ_LIMIT 1006                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000  
       __size_of_lcdInst 0014         __size_of_initLCD 0048   __end_of_LCD_HORZ_LIMIT 1007  
         _LCD_VERT_LIMIT 1005            __size_of_main 006E              ??_lcdNibble 0001  
              putch@data 0003               _INTCONbits 000FF2   __end_of_LCD_VERT_LIMIT 1006  
          _LCD_SIZE_HORZ 1004            _LCD_SIZE_VERT 1003                 printf@ap 0006  
            lcdInst@data 0003  
