

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 03:04:40 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.45
    71                           ; Generated 16/11/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4620 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataBANK0
   106  003A4C                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _compartment_array
   110  003A4C  0000               	dw	0
   111  003A4E  0001               	dw	1
   112  003A50  0000               	dw	0
   113  003A52  0001               	dw	1
   114  003A54  0000               	dw	0
   115  003A56  0001               	dw	1
   116  003A58  0000               	dw	0
   117  003A5A  0001               	dw	1
   118                           
   119                           ;initializer for _mode
   120  003A5C  0002               	dw	2
   121                           
   122                           ;initializer for _close_handle
   123  003A5E  0E                 	db	14
   124                           
   125                           ;initializer for _servo_ramp
   126  003A5F  0D                 	db	13
   127                           
   128                           ;initializer for _motorStop_3
   129  003A60  0C                 	db	12
   130                           
   131                           ;initializer for _motorStart_3
   132  003A61  0B                 	db	11
   133                           
   134                           ;initializer for _motorStop_2
   135  003A62  0A                 	db	10
   136                           
   137                           ;initializer for _motorStart_2
   138  003A63  39                 	db	57
   139                           
   140                           ;initializer for _motorStop_1
   141  003A64  38                 	db	56
   142                           
   143                           ;initializer for _motorStart_1
   144  003A65  37                 	db	55
   145                           
   146                           ;initializer for _motorStop_0
   147  003A66  36                 	db	54
   148                           
   149                           ;initializer for _motorStart_0
   150  003A67  35                 	db	53
   151                           
   152                           ;initializer for _S_dispense
   153  003A68  34                 	db	52
   154                           
   155                           ;initializer for _N_dispense
   156  003A69  33                 	db	51
   157                           
   158                           ;initializer for _B_dispense
   159  003A6A  32                 	db	50
   160                           
   161                           ;initializer for _rotate_1compartment
   162  003A6B  31                 	db	49
   163                           
   164                           ;initializer for _rotate_gear
   165  003A6C  30                 	db	48
   166                           
   167                           	psect	idataBANK1
   168  00378A                     __pidataBANK1:
   169                           	opt stack 0
   170                           
   171                           ;initializer for _W_array
   172  00378A  0000               	dw	0
   173  00378C  0000               	dw	0
   174  00378E  0000               	dw	0
   175  003790  0000               	dw	0
   176  003792  0000               	dw	0
   177  003794  0000               	dw	0
   178  003796  0000               	dw	0
   179  003798  0001               	dw	1
   180                           
   181                           ;initializer for _N_array
   182  00379A  0000               	dw	0
   183  00379C  0002               	dw	2
   184  00379E  0000               	dw	0
   185  0037A0  0001               	dw	1
   186  0037A2  0000               	dw	0
   187  0037A4  0000               	dw	0
   188  0037A6  0000               	dw	0
   189  0037A8  0003               	dw	3
   190                           
   191                           ;initializer for _S_array
   192  0037AA  0000               	dw	0
   193  0037AC  0001               	dw	1
   194  0037AE  0000               	dw	0
   195  0037B0  0001               	dw	1
   196  0037B2  0000               	dw	0
   197  0037B4  0001               	dw	1
   198  0037B6  0000               	dw	0
   199  0037B8  0000               	dw	0
   200                           
   201                           ;initializer for _B_array
   202  0037BA  0000               	dw	0
   203  0037BC  0001               	dw	1
   204  0037BE  0000               	dw	0
   205  0037C0  0001               	dw	1
   206  0037C2  0000               	dw	0
   207  0037C4  0003               	dw	3
   208  0037C6  0000               	dw	0
   209  0037C8  0000               	dw	0
   210                           
   211                           ;initializer for _W_max
   212  0037CA  0004               	dw	4
   213                           
   214                           ;initializer for _S_max
   215  0037CC  0004               	dw	4
   216                           
   217                           ;initializer for _N_max
   218  0037CE  0004               	dw	4
   219                           
   220                           ;initializer for _B_max
   221  0037D0  0004               	dw	4
   222                           
   223                           ;initializer for _init_position
   224  0037D2  0005               	dw	5
   225                           
   226                           	psect	mediumconst
   227  00FD6A                     __pmediumconst:
   228                           	opt stack 0
   229  00FD6A  00                 	db	0
   230  00FD6B                     _keys:
   231                           	opt stack 0
   232  00FD6B  31                 	db	49
   233  00FD6C  32                 	db	50
   234  00FD6D  33                 	db	51
   235  00FD6E  41                 	db	65
   236  00FD6F  34                 	db	52
   237  00FD70  35                 	db	53
   238  00FD71  36                 	db	54
   239  00FD72  42                 	db	66
   240  00FD73  37                 	db	55
   241  00FD74  38                 	db	56
   242  00FD75  39                 	db	57
   243  00FD76  43                 	db	67
   244  00FD77  2A                 	db	42
   245  00FD78  30                 	db	48
   246  00FD79  23                 	db	35
   247  00FD7A  44                 	db	68
   248  00FD7B  00                 	db	0
   249  00FD7C                     __end_of_keys:
   250                           	opt stack 0
   251  00FD7C                     _dpowers:
   252                           	opt stack 0
   253  00FD7C  0001               	dw	1
   254  00FD7E  000A               	dw	10
   255  00FD80  0064               	dw	100
   256  00FD82  03E8               	dw	1000
   257  00FD84  2710               	dw	10000
   258  00FD86                     __end_of_dpowers:
   259                           	opt stack 0
   260  00FD86                     _hexpowers:
   261                           	opt stack 0
   262  00FD86  0001               	dw	1
   263  00FD88  0010               	dw	16
   264  00FD8A  0100               	dw	256
   265  00FD8C  1000               	dw	4096
   266  00FD8E                     __end_of_hexpowers:
   267                           	opt stack 0
   268  00FD8E                     _happynewyear:
   269                           	opt stack 0
   270  00FD8E  45                 	db	69
   271  00FD8F  14                 	db	20
   272  00FD90  14                 	db	20
   273  00FD91  00                 	db	0
   274  00FD92  11                 	db	17
   275  00FD93  03                 	db	3
   276  00FD94  18                 	db	24
   277  00FD95                     __end_of_happynewyear:
   278                           	opt stack 0
   279  00FD95                     _array:
   280                           	opt stack 0
   281  00FD95  30                 	db	48
   282  00FD96  31                 	db	49
   283  00FD97  00                 	db	0
   284  00FD98                     __end_of_array:
   285                           	opt stack 0
   286  00FD98                     _LCD_LEFT:
   287                           	opt stack 0
   288  00FD98  00                 	db	0
   289  00FD99                     __end_of_LCD_LEFT:
   290                           	opt stack 0
   291  00FD99                     _LCD_RIGHT:
   292                           	opt stack 0
   293  00FD99  01                 	db	1
   294  00FD9A                     __end_of_LCD_RIGHT:
   295                           	opt stack 0
   296  00FD9A                     _LCD_SIZE_VERT:
   297                           	opt stack 0
   298  00FD9A  02                 	db	2
   299  00FD9B                     __end_of_LCD_SIZE_VERT:
   300                           	opt stack 0
   301  00FD9B                     _LCD_SIZE_HORZ:
   302                           	opt stack 0
   303  00FD9B  10                 	db	16
   304  00FD9C                     __end_of_LCD_SIZE_HORZ:
   305                           	opt stack 0
   306  00FD9C                     _LCD_VERT_LIMIT:
   307                           	opt stack 0
   308  00FD9C  02                 	db	2
   309  00FD9D                     __end_of_LCD_VERT_LIMIT:
   310                           	opt stack 0
   311  00FD9D                     _LCD_HORZ_LIMIT:
   312                           	opt stack 0
   313  00FD9D  28                 	db	40
   314  00FD9E                     __end_of_LCD_HORZ_LIMIT:
   315                           	opt stack 0
   316  00FD9E                     _strs:
   317                           	opt stack 0
   318  00FD9E  42                 	db	66
   319  00FD9F  00                 	db	0
   320  00FDA0  00                 	db	0
   321  00FDA1  00                 	db	0
   322  00FDA2  00                 	db	0
   323  00FDA3  4E                 	db	78
   324  00FDA4  00                 	db	0
   325  00FDA5  00                 	db	0
   326  00FDA6  00                 	db	0
   327  00FDA7  00                 	db	0
   328  00FDA8  53                 	db	83
   329  00FDA9  00                 	db	0
   330  00FDAA  00                 	db	0
   331  00FDAB  00                 	db	0
   332  00FDAC  00                 	db	0
   333  00FDAD  57                 	db	87
   334  00FDAE  00                 	db	0
   335  00FDAF  00                 	db	0
   336  00FDB0  00                 	db	0
   337  00FDB1  00                 	db	0
   338  00FDB2  42                 	db	66
   339  00FDB3  4E                 	db	78
   340  00FDB4  00                 	db	0
   341  00FDB5  00                 	db	0
   342  00FDB6  00                 	db	0
   343  00FDB7  42                 	db	66
   344  00FDB8  53                 	db	83
   345  00FDB9  00                 	db	0
   346  00FDBA  00                 	db	0
   347  00FDBB  00                 	db	0
   348  00FDBC  42                 	db	66
   349  00FDBD  57                 	db	87
   350  00FDBE  00                 	db	0
   351  00FDBF  00                 	db	0
   352  00FDC0  00                 	db	0
   353  00FDC1  42                 	db	66
   354  00FDC2  42                 	db	66
   355  00FDC3  4E                 	db	78
   356  00FDC4  00                 	db	0
   357  00FDC5  00                 	db	0
   358  00FDC6  42                 	db	66
   359  00FDC7  42                 	db	66
   360  00FDC8  53                 	db	83
   361  00FDC9  00                 	db	0
   362  00FDCA  00                 	db	0
   363  00FDCB  42                 	db	66
   364  00FDCC  42                 	db	66
   365  00FDCD  57                 	db	87
   366  00FDCE  00                 	db	0
   367  00FDCF  00                 	db	0
   368  00FDD0  42                 	db	66
   369  00FDD1  4E                 	db	78
   370  00FDD2  57                 	db	87
   371  00FDD3  00                 	db	0
   372  00FDD4  00                 	db	0
   373  00FDD5  42                 	db	66
   374  00FDD6  53                 	db	83
   375  00FDD7  57                 	db	87
   376  00FDD8  00                 	db	0
   377  00FDD9  00                 	db	0
   378  00FDDA  42                 	db	66
   379  00FDDB  57                 	db	87
   380  00FDDC  57                 	db	87
   381  00FDDD  00                 	db	0
   382  00FDDE  00                 	db	0
   383  00FDDF  42                 	db	66
   384  00FDE0  4E                 	db	78
   385  00FDE1  57                 	db	87
   386  00FDE2  57                 	db	87
   387  00FDE3  00                 	db	0
   388  00FDE4  42                 	db	66
   389  00FDE5  53                 	db	83
   390  00FDE6  57                 	db	87
   391  00FDE7  57                 	db	87
   392  00FDE8  00                 	db	0
   393  00FDE9  42                 	db	66
   394  00FDEA  42                 	db	66
   395  00FDEB  53                 	db	83
   396  00FDEC  57                 	db	87
   397  00FDED  00                 	db	0
   398  00FDEE  42                 	db	66
   399  00FDEF  42                 	db	66
   400  00FDF0  4E                 	db	78
   401  00FDF1  57                 	db	87
   402  00FDF2  00                 	db	0
   403  00FDF3  42                 	db	66
   404  00FDF4  4E                 	db	78
   405  00FDF5  4E                 	db	78
   406  00FDF6  57                 	db	87
   407  00FDF7  00                 	db	0
   408  00FDF8  42                 	db	66
   409  00FDF9  4E                 	db	78
   410  00FDFA  4E                 	db	78
   411  00FDFB  4E                 	db	78
   412  00FDFC  00                 	db	0
   413  00FDFD  42                 	db	66
   414  00FDFE  57                 	db	87
   415  00FDFF  57                 	db	87
   416  00FE00  57                 	db	87
   417  00FE01  00                 	db	0
   418  00FE02                     __end_of_strs:
   419                           	opt stack 0
   420  0000                     _SSPBUF	set	4041
   421  0000                     _SSPCON2bits	set	4037
   422  0000                     _SSPADD	set	4040
   423  0000                     _SSPCON2	set	4037
   424  0000                     _SSPCON1	set	4038
   425  0000                     _SSPSTAT	set	4039
   426  0000                     _TRISCbits	set	3988
   427  0000                     _SSPCON1bits	set	4038
   428  0000                     _PORTAbits	set	3968
   429  0000                     _TRISAbits	set	3986
   430  0000                     _TRISDbits	set	3989
   431  0000                     _ADRESL	set	4035
   432  0000                     _ADRESH	set	4036
   433  0000                     _ADCON0bits	set	4034
   434  0000                     _PORTB	set	3969
   435  0000                     _ADCON1	set	4033
   436  0000                     _ADCON0	set	4034
   437  0000                     _TRISE	set	3990
   438  0000                     _TRISD	set	3989
   439  0000                     _TRISC	set	3988
   440  0000                     _TRISB	set	3987
   441  0000                     _TRISA	set	3986
   442  0000                     _LATE	set	3981
   443  0000                     _LATC	set	3979
   444  0000                     _LATB	set	3978
   445  0000                     _LATA	set	3977
   446  0000                     _INTCONbits	set	4082
   447  0000                     _LATD	set	3980
   448  0000                     _LATDbits	set	3980
   449  0000                     _ADON	set	32272
   450  0000                     _INT1IF	set	32640
   451  0000                     _INT1IE	set	32643
   452  00FE02                     STR_11:
   453  00FE02  73                 	db	115	;'s'
   454  00FE03  70                 	db	112	;'p'
   455  00FE04  61                 	db	97	;'a'
   456  00FE05  63                 	db	99	;'c'
   457  00FE06  65                 	db	101	;'e'
   458  00FE07  72                 	db	114	;'r'
   459  00FE08  73                 	db	115	;'s'
   460  00FE09  20                 	db	32
   461  00FE0A  64                 	db	100	;'d'
   462  00FE0B  69                 	db	105	;'i'
   463  00FE0C  73                 	db	115	;'s'
   464  00FE0D  70                 	db	112	;'p'
   465  00FE0E  65                 	db	101	;'e'
   466  00FE0F  6E                 	db	110	;'n'
   467  00FE10  73                 	db	115	;'s'
   468  00FE11  65                 	db	101	;'e'
   469  00FE12  64                 	db	100	;'d'
   470  00FE13  3A                 	db	58	;':'
   471  00FE14  25                 	db	37
   472  00FE15  64                 	db	100	;'d'
   473  00FE16  00                 	db	0
   474  00FE17                     STR_14:
   475  00FE17  57                 	db	87	;'W'
   476  00FE18  61                 	db	97	;'a'
   477  00FE19  73                 	db	115	;'s'
   478  00FE1A  68                 	db	104	;'h'
   479  00FE1B  65                 	db	101	;'e'
   480  00FE1C  72                 	db	114	;'r'
   481  00FE1D  20                 	db	32
   482  00FE1E  64                 	db	100	;'d'
   483  00FE1F  69                 	db	105	;'i'
   484  00FE20  73                 	db	115	;'s'
   485  00FE21  70                 	db	112	;'p'
   486  00FE22  65                 	db	101	;'e'
   487  00FE23  6E                 	db	110	;'n'
   488  00FE24  73                 	db	115	;'s'
   489  00FE25  65                 	db	101	;'e'
   490  00FE26  64                 	db	100	;'d'
   491  00FE27  3A                 	db	58	;':'
   492  00FE28  25                 	db	37
   493  00FE29  64                 	db	100	;'d'
   494  00FE2A  00                 	db	0
   495  00FE2B                     STR_5:
   496  00FE2B  62                 	db	98	;'b'
   497  00FE2C  6F                 	db	111	;'o'
   498  00FE2D  6C                 	db	108	;'l'
   499  00FE2E  74                 	db	116	;'t'
   500  00FE2F  73                 	db	115	;'s'
   501  00FE30  20                 	db	32
   502  00FE31  64                 	db	100	;'d'
   503  00FE32  69                 	db	105	;'i'
   504  00FE33  73                 	db	115	;'s'
   505  00FE34  70                 	db	112	;'p'
   506  00FE35  65                 	db	101	;'e'
   507  00FE36  6E                 	db	110	;'n'
   508  00FE37  73                 	db	115	;'s'
   509  00FE38  65                 	db	101	;'e'
   510  00FE39  64                 	db	100	;'d'
   511  00FE3A  3A                 	db	58	;':'
   512  00FE3B  25                 	db	37
   513  00FE3C  64                 	db	100	;'d'
   514  00FE3D  00                 	db	0
   515  00FE3E                     STR_22:
   516  00FE3E  20                 	db	32
   517  00FE3F  32                 	db	50	;'2'
   518  00FE40  3A                 	db	58	;':'
   519  00FE41  20                 	db	32
   520  00FE42  4F                 	db	79	;'O'
   521  00FE43  70                 	db	112	;'p'
   522  00FE44  65                 	db	101	;'e'
   523  00FE45  72                 	db	114	;'r'
   524  00FE46  61                 	db	97	;'a'
   525  00FE47  74                 	db	116	;'t'
   526  00FE48  69                 	db	105	;'i'
   527  00FE49  6F                 	db	111	;'o'
   528  00FE4A  6E                 	db	110	;'n'
   529  00FE4B  20                 	db	32
   530  00FE4C  54                 	db	84	;'T'
   531  00FE4D  69                 	db	105	;'i'
   532  00FE4E  6D                 	db	109	;'m'
   533  00FE4F  65                 	db	101	;'e'
   534  00FE50  00                 	db	0
   535  00FE51                     STR_8:
   536  00FE51  6E                 	db	110	;'n'
   537  00FE52  75                 	db	117	;'u'
   538  00FE53  74                 	db	116	;'t'
   539  00FE54  73                 	db	115	;'s'
   540  00FE55  20                 	db	32
   541  00FE56  64                 	db	100	;'d'
   542  00FE57  69                 	db	105	;'i'
   543  00FE58  73                 	db	115	;'s'
   544  00FE59  70                 	db	112	;'p'
   545  00FE5A  65                 	db	101	;'e'
   546  00FE5B  6E                 	db	110	;'n'
   547  00FE5C  73                 	db	115	;'s'
   548  00FE5D  65                 	db	101	;'e'
   549  00FE5E  64                 	db	100	;'d'
   550  00FE5F  3A                 	db	58	;':'
   551  00FE60  25                 	db	37
   552  00FE61  64                 	db	100	;'d'
   553  00FE62  00                 	db	0
   554  00FE63                     STR_67:
   555  00FE63  30                 	db	48	;'0'
   556  00FE64  31                 	db	49	;'1'
   557  00FE65  32                 	db	50	;'2'
   558  00FE66  33                 	db	51	;'3'
   559  00FE67  34                 	db	52	;'4'
   560  00FE68  35                 	db	53	;'5'
   561  00FE69  36                 	db	54	;'6'
   562  00FE6A  37                 	db	55	;'7'
   563  00FE6B  38                 	db	56	;'8'
   564  00FE6C  39                 	db	57	;'9'
   565  00FE6D  61                 	db	97	;'a'
   566  00FE6E  62                 	db	98	;'b'
   567  00FE6F  63                 	db	99	;'c'
   568  00FE70  64                 	db	100	;'d'
   569  00FE71  65                 	db	101	;'e'
   570  00FE72  66                 	db	102	;'f'
   571  00FE73  00                 	db	0
   572  00FE74                     STR_18:
   573  00FE74  53                 	db	83	;'S'
   574  00FE75  70                 	db	112	;'p'
   575  00FE76  61                 	db	97	;'a'
   576  00FE77  63                 	db	99	;'c'
   577  00FE78  65                 	db	101	;'e'
   578  00FE79  72                 	db	114	;'r'
   579  00FE7A  5F                 	db	95	;'_'
   580  00FE7B  72                 	db	114	;'r'
   581  00FE7C  65                 	db	101	;'e'
   582  00FE7D  6D                 	db	109	;'m'
   583  00FE7E  61                 	db	97	;'a'
   584  00FE7F  69                 	db	105	;'i'
   585  00FE80  6E                 	db	110	;'n'
   586  00FE81  3A                 	db	58	;':'
   587  00FE82  25                 	db	37
   588  00FE83  64                 	db	100	;'d'
   589  00FE84  00                 	db	0
   590  00FE85                     STR_19:
   591  00FE85  57                 	db	87	;'W'
   592  00FE86  61                 	db	97	;'a'
   593  00FE87  73                 	db	115	;'s'
   594  00FE88  68                 	db	104	;'h'
   595  00FE89  65                 	db	101	;'e'
   596  00FE8A  72                 	db	114	;'r'
   597  00FE8B  5F                 	db	95	;'_'
   598  00FE8C  72                 	db	114	;'r'
   599  00FE8D  65                 	db	101	;'e'
   600  00FE8E  6D                 	db	109	;'m'
   601  00FE8F  61                 	db	97	;'a'
   602  00FE90  69                 	db	105	;'i'
   603  00FE91  6E                 	db	110	;'n'
   604  00FE92  3A                 	db	58	;':'
   605  00FE93  25                 	db	37
   606  00FE94  64                 	db	100	;'d'
   607  00FE95  00                 	db	0
   608  00FE96                     STR_21:
   609  00FE96  31                 	db	49	;'1'
   610  00FE97  3A                 	db	58	;':'
   611  00FE98  20                 	db	32
   612  00FE99  44                 	db	68	;'D'
   613  00FE9A  61                 	db	97	;'a'
   614  00FE9B  74                 	db	116	;'t'
   615  00FE9C  65                 	db	101	;'e'
   616  00FE9D  20                 	db	32
   617  00FE9E  61                 	db	97	;'a'
   618  00FE9F  6E                 	db	110	;'n'
   619  00FEA0  64                 	db	100	;'d'
   620  00FEA1  20                 	db	32
   621  00FEA2  54                 	db	84	;'T'
   622  00FEA3  69                 	db	105	;'i'
   623  00FEA4  6D                 	db	109	;'m'
   624  00FEA5  65                 	db	101	;'e'
   625  00FEA6  00                 	db	0
   626  00FEA7                     STR_28:
   627  00FEA7  6F                 	db	111	;'o'
   628  00FEA8  70                 	db	112	;'p'
   629  00FEA9  65                 	db	101	;'e'
   630  00FEAA  72                 	db	114	;'r'
   631  00FEAB  61                 	db	97	;'a'
   632  00FEAC  74                 	db	116	;'t'
   633  00FEAD  69                 	db	105	;'i'
   634  00FEAE  6F                 	db	111	;'o'
   635  00FEAF  6E                 	db	110	;'n'
   636  00FEB0  20                 	db	32
   637  00FEB1  74                 	db	116	;'t'
   638  00FEB2  69                 	db	105	;'i'
   639  00FEB3  6D                 	db	109	;'m'
   640  00FEB4  65                 	db	101	;'e'
   641  00FEB5  3A                 	db	58	;':'
   642  00FEB6  00                 	db	0
   643  00FEB7                     STR_30:
   644  00FEB7  57                 	db	87	;'W'
   645  00FEB8  72                 	db	114	;'r'
   646  00FEB9  6F                 	db	111	;'o'
   647  00FEBA  6E                 	db	110	;'n'
   648  00FEBB  67                 	db	103	;'g'
   649  00FEBC  20                 	db	32
   650  00FEBD  6E                 	db	110	;'n'
   651  00FEBE  75                 	db	117	;'u'
   652  00FEBF  6D                 	db	109	;'m'
   653  00FEC0  62                 	db	98	;'b'
   654  00FEC1  65                 	db	101	;'e'
   655  00FEC2  72                 	db	114	;'r'
   656  00FEC3  21                 	db	33
   657  00FEC4  20                 	db	32
   658  00FEC5  00                 	db	0
   659  00FEC6                     STR_16:
   660  00FEC6  42                 	db	66	;'B'
   661  00FEC7  6F                 	db	111	;'o'
   662  00FEC8  6C                 	db	108	;'l'
   663  00FEC9  74                 	db	116	;'t'
   664  00FECA  5F                 	db	95	;'_'
   665  00FECB  72                 	db	114	;'r'
   666  00FECC  65                 	db	101	;'e'
   667  00FECD  6D                 	db	109	;'m'
   668  00FECE  61                 	db	97	;'a'
   669  00FECF  69                 	db	105	;'i'
   670  00FED0  6E                 	db	110	;'n'
   671  00FED1  3A                 	db	58	;':'
   672  00FED2  25                 	db	37
   673  00FED3  64                 	db	100	;'d'
   674  00FED4  00                 	db	0
   675  00FED5                     STR_2:
   676  00FED5  70                 	db	112	;'p'
   677  00FED6  72                 	db	114	;'r'
   678  00FED7  6F                 	db	111	;'o'
   679  00FED8  63                 	db	99	;'c'
   680  00FED9  65                 	db	101	;'e'
   681  00FEDA  73                 	db	115	;'s'
   682  00FEDB  73                 	db	115	;'s'
   683  00FEDC  69                 	db	105	;'i'
   684  00FEDD  6E                 	db	110	;'n'
   685  00FEDE  67                 	db	103	;'g'
   686  00FEDF  20                 	db	32
   687  00FEE0  43                 	db	67	;'C'
   688  00FEE1  25                 	db	37
   689  00FEE2  64                 	db	100	;'d'
   690  00FEE3  00                 	db	0
   691  00FEE4                     STR_24:
   692  00FEE4  25                 	db	37
   693  00FEE5  30                 	db	48	;'0'
   694  00FEE6  32                 	db	50	;'2'
   695  00FEE7  78                 	db	120	;'x'
   696  00FEE8  2F                 	db	47
   697  00FEE9  25                 	db	37
   698  00FEEA  30                 	db	48	;'0'
   699  00FEEB  32                 	db	50	;'2'
   700  00FEEC  78                 	db	120	;'x'
   701  00FEED  2F                 	db	47
   702  00FEEE  25                 	db	37
   703  00FEEF  30                 	db	48	;'0'
   704  00FEF0  32                 	db	50	;'2'
   705  00FEF1  78                 	db	120	;'x'
   706  00FEF2  00                 	db	0
   707  00FEF3                     STR_25:
   708  00FEF3  25                 	db	37
   709  00FEF4  30                 	db	48	;'0'
   710  00FEF5  32                 	db	50	;'2'
   711  00FEF6  78                 	db	120	;'x'
   712  00FEF7  3A                 	db	58	;':'
   713  00FEF8  25                 	db	37
   714  00FEF9  30                 	db	48	;'0'
   715  00FEFA  32                 	db	50	;'2'
   716  00FEFB  78                 	db	120	;'x'
   717  00FEFC  3A                 	db	58	;':'
   718  00FEFD  25                 	db	37
   719  00FEFE  30                 	db	48	;'0'
   720  00FEFF  32                 	db	50	;'2'
   721  00FF00  78                 	db	120	;'x'
   722  00FF01  00                 	db	0
   723  00FF02                     STR_17:
   724  00FF02  4E                 	db	78	;'N'
   725  00FF03  75                 	db	117	;'u'
   726  00FF04  74                 	db	116	;'t'
   727  00FF05  5F                 	db	95	;'_'
   728  00FF06  72                 	db	114	;'r'
   729  00FF07  65                 	db	101	;'e'
   730  00FF08  6D                 	db	109	;'m'
   731  00FF09  61                 	db	97	;'a'
   732  00FF0A  69                 	db	105	;'i'
   733  00FF0B  6E                 	db	110	;'n'
   734  00FF0C  3A                 	db	58	;':'
   735  00FF0D  25                 	db	37
   736  00FF0E  64                 	db	100	;'d'
   737  00FF0F  00                 	db	0
   738  00FF10                     STR_3:
   739  00FF10  42                 	db	66	;'B'
   740  00FF11  5F                 	db	95	;'_'
   741  00FF12  63                 	db	99	;'c'
   742  00FF13  6F                 	db	111	;'o'
   743  00FF14  75                 	db	117	;'u'
   744  00FF15  6E                 	db	110	;'n'
   745  00FF16  74                 	db	116	;'t'
   746  00FF17  65                 	db	101	;'e'
   747  00FF18  72                 	db	114	;'r'
   748  00FF19  3A                 	db	58	;':'
   749  00FF1A  25                 	db	37
   750  00FF1B  64                 	db	100	;'d'
   751  00FF1C  00                 	db	0
   752  00FF1D                     STR_6:
   753  00FF1D  4E                 	db	78	;'N'
   754  00FF1E  5F                 	db	95	;'_'
   755  00FF1F  63                 	db	99	;'c'
   756  00FF20  6F                 	db	111	;'o'
   757  00FF21  75                 	db	117	;'u'
   758  00FF22  6E                 	db	110	;'n'
   759  00FF23  74                 	db	116	;'t'
   760  00FF24  65                 	db	101	;'e'
   761  00FF25  72                 	db	114	;'r'
   762  00FF26  3A                 	db	58	;':'
   763  00FF27  25                 	db	37
   764  00FF28  64                 	db	100	;'d'
   765  00FF29  00                 	db	0
   766  00FF2A                     STR_9:
   767  00FF2A  53                 	db	83	;'S'
   768  00FF2B  5F                 	db	95	;'_'
   769  00FF2C  63                 	db	99	;'c'
   770  00FF2D  6F                 	db	111	;'o'
   771  00FF2E  75                 	db	117	;'u'
   772  00FF2F  6E                 	db	110	;'n'
   773  00FF30  74                 	db	116	;'t'
   774  00FF31  65                 	db	101	;'e'
   775  00FF32  72                 	db	114	;'r'
   776  00FF33  3A                 	db	58	;':'
   777  00FF34  25                 	db	37
   778  00FF35  64                 	db	100	;'d'
   779  00FF36  00                 	db	0
   780  00FF37                     STR_29:
   781  00FF37  25                 	db	37
   782  00FF38  64                 	db	100	;'d'
   783  00FF39  6D                 	db	109	;'m'
   784  00FF3A  69                 	db	105	;'i'
   785  00FF3B  6E                 	db	110	;'n'
   786  00FF3C  20                 	db	32
   787  00FF3D  25                 	db	37
   788  00FF3E  64                 	db	100	;'d'
   789  00FF3F  73                 	db	115	;'s'
   790  00FF40  65                 	db	101	;'e'
   791  00FF41  63                 	db	99	;'c'
   792  00FF42  73                 	db	115	;'s'
   793  00FF43  00                 	db	0
   794  00FF44                     STR_1:
   795  00FF44  43                 	db	67	;'C'
   796  00FF45  30                 	db	48	;'0'
   797  00FF46  20                 	db	32
   798  00FF47  69                 	db	105	;'i'
   799  00FF48  73                 	db	115	;'s'
   800  00FF49  20                 	db	32
   801  00FF4A  66                 	db	102	;'f'
   802  00FF4B  6F                 	db	111	;'o'
   803  00FF4C  75                 	db	117	;'u'
   804  00FF4D  6E                 	db	110	;'n'
   805  00FF4E  64                 	db	100	;'d'
   806  00FF4F  00                 	db	0
   807  00FF50                     STR_20:
   808  00FF50  79                 	db	121	;'y'
   809  00FF51  6F                 	db	111	;'o'
   810  00FF52  75                 	db	117	;'u'
   811  00FF53  27                 	db	39
   812  00FF54  72                 	db	114	;'r'
   813  00FF55  65                 	db	101	;'e'
   814  00FF56  20                 	db	32
   815  00FF57  64                 	db	100	;'d'
   816  00FF58  6F                 	db	111	;'o'
   817  00FF59  6E                 	db	110	;'n'
   818  00FF5A  65                 	db	101	;'e'
   819  00FF5B  00                 	db	0
   820  00FF5C                     STR_43:
   821  00FF5C  57                 	db	87	;'W'
   822  00FF5D  72                 	db	114	;'r'
   823  00FF5E  6F                 	db	111	;'o'
   824  00FF5F  6E                 	db	110	;'n'
   825  00FF60  67                 	db	103	;'g'
   826  00FF61  20                 	db	32
   827  00FF62  69                 	db	105	;'i'
   828  00FF63  6E                 	db	110	;'n'
   829  00FF64  70                 	db	112	;'p'
   830  00FF65  75                 	db	117	;'u'
   831  00FF66  74                 	db	116	;'t'
   832  00FF67  00                 	db	0
   833  00FF68                     STR_38:
   834  00FF68  77                 	db	119	;'w'
   835  00FF69  72                 	db	114	;'r'
   836  00FF6A  6F                 	db	111	;'o'
   837  00FF6B  6E                 	db	110	;'n'
   838  00FF6C  67                 	db	103	;'g'
   839  00FF6D  20                 	db	32
   840  00FF6E  73                 	db	115	;'s'
   841  00FF6F  65                 	db	101	;'e'
   842  00FF70  74                 	db	116	;'t'
   843  00FF71  21                 	db	33
   844  00FF72  00                 	db	0
   845  00FF73                     STR_4:
   846  00FF73  42                 	db	66	;'B'
   847  00FF74  5F                 	db	95	;'_'
   848  00FF75  63                 	db	99	;'c'
   849  00FF76  6F                 	db	111	;'o'
   850  00FF77  75                 	db	117	;'u'
   851  00FF78  6E                 	db	110	;'n'
   852  00FF79  74                 	db	116	;'t'
   853  00FF7A  3A                 	db	58	;':'
   854  00FF7B  25                 	db	37
   855  00FF7C  64                 	db	100	;'d'
   856  00FF7D  00                 	db	0
   857  00FF7E                     STR_7:
   858  00FF7E  4E                 	db	78	;'N'
   859  00FF7F  5F                 	db	95	;'_'
   860  00FF80  63                 	db	99	;'c'
   861  00FF81  6F                 	db	111	;'o'
   862  00FF82  75                 	db	117	;'u'
   863  00FF83  6E                 	db	110	;'n'
   864  00FF84  74                 	db	116	;'t'
   865  00FF85  3A                 	db	58	;':'
   866  00FF86  25                 	db	37
   867  00FF87  64                 	db	100	;'d'
   868  00FF88  00                 	db	0
   869  00FF89                     STR_10:
   870  00FF89  53                 	db	83	;'S'
   871  00FF8A  5F                 	db	95	;'_'
   872  00FF8B  63                 	db	99	;'c'
   873  00FF8C  6F                 	db	111	;'o'
   874  00FF8D  75                 	db	117	;'u'
   875  00FF8E  6E                 	db	110	;'n'
   876  00FF8F  74                 	db	116	;'t'
   877  00FF90  3A                 	db	58	;':'
   878  00FF91  25                 	db	37
   879  00FF92  64                 	db	100	;'d'
   880  00FF93  00                 	db	0
   881  00FF94                     STR_23:
   882  00FF94  33                 	db	51	;'3'
   883  00FF95  3A                 	db	58	;':'
   884  00FF96  73                 	db	115	;'s'
   885  00FF97  75                 	db	117	;'u'
   886  00FF98  6D                 	db	109	;'m'
   887  00FF99  6D                 	db	109	;'m'
   888  00FF9A  61                 	db	97	;'a'
   889  00FF9B  72                 	db	114	;'r'
   890  00FF9C  79                 	db	121	;'y'
   891  00FF9D  00                 	db	0
   892  00FF9E                     STR_35:
   893  00FF9E  63                 	db	99	;'c'
   894  00FF9F  6F                 	db	111	;'o'
   895  00FFA0  72                 	db	114	;'r'
   896  00FFA1  72                 	db	114	;'r'
   897  00FFA2  65                 	db	101	;'e'
   898  00FFA3  63                 	db	99	;'c'
   899  00FFA4  74                 	db	116	;'t'
   900  00FFA5  21                 	db	33
   901  00FFA6  00                 	db	0
   902  00FFA7                     STR_44:
   903  00FFA7  54                 	db	84	;'T'
   904  00FFA8  4F                 	db	79	;'O'
   905  00FFA9  4F                 	db	79	;'O'
   906  00FFAA  20                 	db	32
   907  00FFAB  4D                 	db	77	;'M'
   908  00FFAC  41                 	db	65	;'A'
   909  00FFAD  4E                 	db	78	;'N'
   910  00FFAE  59                 	db	89	;'Y'
   911  00FFAF  00                 	db	0
   912  00FFB0                     STR_15:
   913  00FFB0  64                 	db	100	;'d'
   914  00FFB1  6F                 	db	111	;'o'
   915  00FFB2  6E                 	db	110	;'n'
   916  00FFB3  65                 	db	101	;'e'
   917  00FFB4  20                 	db	32
   918  00FFB5  43                 	db	67	;'C'
   919  00FFB6  25                 	db	37
   920  00FFB7  64                 	db	100	;'d'
   921  00FFB8  00                 	db	0
   922  00FFB9                     STR_66:
   923  00FFB9  28                 	db	40
   924  00FFBA  6E                 	db	110	;'n'
   925  00FFBB  75                 	db	117	;'u'
   926  00FFBC  6C                 	db	108	;'l'
   927  00FFBD  6C                 	db	108	;'l'
   928  00FFBE  29                 	db	41
   929  00FFBF  00                 	db	0
   930  00FFC0                     STR_41:
   931  00FFC0  77                 	db	119	;'w'
   932  00FFC1  72                 	db	114	;'r'
   933  00FFC2  6F                 	db	111	;'o'
   934  00FFC3  6E                 	db	110	;'n'
   935  00FFC4  67                 	db	103	;'g'
   936  00FFC5  21                 	db	33
   937  00FFC6  00                 	db	0
   938  00FFC7                     STR_64:
   939  00FFC7  42                 	db	66	;'B'
   940  00FFC8  4E                 	db	78	;'N'
   941  00FFC9  4E                 	db	78	;'N'
   942  00FFCA  4E                 	db	78	;'N'
   943  00FFCB  00                 	db	0
   944  00FFCC                     STR_62:
   945  00FFCC  42                 	db	66	;'B'
   946  00FFCD  42                 	db	66	;'B'
   947  00FFCE  4E                 	db	78	;'N'
   948  00FFCF  57                 	db	87	;'W'
   949  00FFD0  00                 	db	0
   950  00FFD1                     STR_63:
   951  00FFD1  42                 	db	66	;'B'
   952  00FFD2  4E                 	db	78	;'N'
   953  00FFD3  4E                 	db	78	;'N'
   954  00FFD4  57                 	db	87	;'W'
   955  00FFD5  00                 	db	0
   956  00FFD6                     STR_61:
   957  00FFD6  42                 	db	66	;'B'
   958  00FFD7  42                 	db	66	;'B'
   959  00FFD8  53                 	db	83	;'S'
   960  00FFD9  57                 	db	87	;'W'
   961  00FFDA  00                 	db	0
   962  00FFDB                     STR_59:
   963  00FFDB  42                 	db	66	;'B'
   964  00FFDC  4E                 	db	78	;'N'
   965  00FFDD  57                 	db	87	;'W'
   966  00FFDE  57                 	db	87	;'W'
   967  00FFDF  00                 	db	0
   968  00FFE0                     STR_60:
   969  00FFE0  42                 	db	66	;'B'
   970  00FFE1  53                 	db	83	;'S'
   971  00FFE2  57                 	db	87	;'W'
   972  00FFE3  57                 	db	87	;'W'
   973  00FFE4  00                 	db	0
   974  00FFE5                     STR_65:
   975  00FFE5  42                 	db	66	;'B'
   976  00FFE6  57                 	db	87	;'W'
   977  00FFE7  57                 	db	87	;'W'
   978  00FFE8  57                 	db	87	;'W'
   979  00FFE9  00                 	db	0
   980  00FFEA                     STR_53:
   981  00FFEA  42                 	db	66	;'B'
   982  00FFEB  42                 	db	66	;'B'
   983  00FFEC  4E                 	db	78	;'N'
   984  00FFED  00                 	db	0
   985  00FFEE                     STR_54:
   986  00FFEE  42                 	db	66	;'B'
   987  00FFEF  42                 	db	66	;'B'
   988  00FFF0  53                 	db	83	;'S'
   989  00FFF1  00                 	db	0
   990  00FFF2                     STR_55:
   991  00FFF2  42                 	db	66	;'B'
   992  00FFF3  42                 	db	66	;'B'
   993  00FFF4  57                 	db	87	;'W'
   994  00FFF5  00                 	db	0
   995  00FFF6                     STR_58:
   996  00FFF6  42                 	db	66	;'B'
   997  00FFF7  57                 	db	87	;'W'
   998  00FFF8  57                 	db	87	;'W'
   999  00FFF9  00                 	db	0
  1000  00FFFA                     STR_36:
  1001  00FFFA  25                 	db	37
  1002  00FFFB  73                 	db	115	;'s'
  1003  00FFFC  00                 	db	0
  1004  00FFFD                     STR_31:
  1005  00FFFD  42                 	db	66	;'B'
  1006  00FFFE  00                 	db	0
  1007  0000                     
  1008                           ; #config settings
  1009  00FFFF  00                 	db	0	; dummy byte at the end
  1010  0000                     
  1011                           	psect	cinit
  1012  003442                     __pcinit:
  1013                           	opt stack 0
  1014  003442                     start_initialization:
  1015                           	opt stack 0
  1016  003442                     __initialization:
  1017                           	opt stack 0
  1018                           
  1019                           ; Initialize objects allocated to BANK1 (74 bytes)
  1020                           ; load TBLPTR registers with __pidataBANK1
  1021  003442  0E8A               	movlw	low __pidataBANK1
  1022  003444  6EF6               	movwf	tblptrl,c
  1023  003446  0E37               	movlw	high __pidataBANK1
  1024  003448  6EF7               	movwf	tblptrh,c
  1025  00344A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1026  00344C  6EF8               	movwf	tblptru,c
  1027  00344E  EE01  F084         	lfsr	0,__pdataBANK1
  1028  003452  EE10 F04A          	lfsr	1,74
  1029  003456                     copy_data0:
  1030  003456  0009               	tblrd		*+
  1031  003458  CFF5 FFEE          	movff	tablat,postinc0
  1032  00345C  50E5               	movf	postdec1,w,c
  1033  00345E  50E1               	movf	fsr1l,w,c
  1034  003460  E1FA               	bnz	copy_data0
  1035                           
  1036                           ; Initialize objects allocated to BANK0 (33 bytes)
  1037                           ; load TBLPTR registers with __pidataBANK0
  1038  003462  0E4C               	movlw	low __pidataBANK0
  1039  003464  6EF6               	movwf	tblptrl,c
  1040  003466  0E3A               	movlw	high __pidataBANK0
  1041  003468  6EF7               	movwf	tblptrh,c
  1042  00346A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1043  00346C  6EF8               	movwf	tblptru,c
  1044  00346E  EE00  F0DF         	lfsr	0,__pdataBANK0
  1045  003472  EE10 F021          	lfsr	1,33
  1046  003476                     copy_data1:
  1047  003476  0009               	tblrd		*+
  1048  003478  CFF5 FFEE          	movff	tablat,postinc0
  1049  00347C  50E5               	movf	postdec1,w,c
  1050  00347E  50E1               	movf	fsr1l,w,c
  1051  003480  E1FA               	bnz	copy_data1
  1052                           
  1053                           ; Clear objects allocated to BANK2 (200 bytes)
  1054  003482  EE02  F000         	lfsr	0,__pbssBANK2
  1055  003486  0EC8               	movlw	200
  1056  003488                     clear_0:
  1057  003488  6AEE               	clrf	postinc0,c
  1058  00348A  06E8               	decf	wreg,f,c
  1059  00348C  E1FD               	bnz	clear_0
  1060                           
  1061                           ; Clear objects allocated to BANK1 (132 bytes)
  1062  00348E  EE01  F000         	lfsr	0,__pbssBANK1
  1063  003492  0E84               	movlw	132
  1064  003494                     clear_1:
  1065  003494  6AEE               	clrf	postinc0,c
  1066  003496  06E8               	decf	wreg,f,c
  1067  003498  E1FD               	bnz	clear_1
  1068                           
  1069                           ; Clear objects allocated to BANK0 (57 bytes)
  1070  00349A  EE00  F080         	lfsr	0,__pbssBANK0
  1071  00349E  0E39               	movlw	57
  1072  0034A0                     clear_2:
  1073  0034A0  6AEE               	clrf	postinc0,c
  1074  0034A2  06E8               	decf	wreg,f,c
  1075  0034A4  E1FD               	bnz	clear_2
  1076                           
  1077                           ; Clear objects allocated to COMRAM (61 bytes)
  1078  0034A6  EE00  F042         	lfsr	0,__pbssCOMRAM
  1079  0034AA  0E3D               	movlw	61
  1080  0034AC                     clear_3:
  1081  0034AC  6AEE               	clrf	postinc0,c
  1082  0034AE  06E8               	decf	wreg,f,c
  1083  0034B0  E1FD               	bnz	clear_3
  1084  0034B2                     end_of_initialization:
  1085                           	opt stack 0
  1086  0034B2                     __end_of__initialization:
  1087                           	opt stack 0
  1088  0034B2  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1089  0034B4  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1090  0034B6  0100               	movlb	0
  1091  0034B8  EF22  F00D         	goto	_main	;jump to C main() function
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           postinc0	equ	0xFEE
  1097                           wreg	equ	0xFE8
  1098                           postdec1	equ	0xFE5
  1099                           fsr1l	equ	0xFE1
  1100                           
  1101                           	psect	bssCOMRAM
  1102  000042                     __pbssCOMRAM:
  1103                           	opt stack 0
  1104  000042                     _compartment_number:
  1105                           	opt stack 0
  1106  000042                     	ds	16
  1107  000052                     _time:
  1108                           	opt stack 0
  1109  000052                     	ds	7
  1110  000059                     _W:
  1111                           	opt stack 0
  1112  000059                     	ds	2
  1113  00005B                     _S:
  1114                           	opt stack 0
  1115  00005B                     	ds	2
  1116  00005D                     _N:
  1117                           	opt stack 0
  1118  00005D                     	ds	2
  1119  00005F                     _B:
  1120                           	opt stack 0
  1121  00005F                     	ds	2
  1122  000061                     _prev_state:
  1123                           	opt stack 0
  1124  000061                     	ds	2
  1125  000063                     _total_number:
  1126                           	opt stack 0
  1127  000063                     	ds	2
  1128  000065                     _valid:
  1129                           	opt stack 0
  1130  000065                     	ds	2
  1131  000067                     _counter_step:
  1132                           	opt stack 0
  1133  000067                     	ds	2
  1134  000069                     _counter:
  1135                           	opt stack 0
  1136  000069                     	ds	2
  1137  00006B                     _assembly_step:
  1138                           	opt stack 0
  1139  00006B                     	ds	2
  1140  00006D                     _state:
  1141                           	opt stack 0
  1142  00006D                     	ds	2
  1143  00006F                     _operationTime:
  1144                           	opt stack 0
  1145  00006F                     	ds	2
  1146  000071                     _operation:
  1147                           	opt stack 0
  1148  000071                     	ds	2
  1149  000073                     _change_mode:
  1150                           	opt stack 0
  1151  000073                     	ds	2
  1152  000075                     _j:
  1153                           	opt stack 0
  1154  000075                     	ds	1
  1155  000076                     _temp:
  1156                           	opt stack 0
  1157  000076                     	ds	1
  1158  000077                     	ds	1
  1159  000078                     _current_set2:
  1160                           	opt stack 0
  1161  000078                     	ds	5
  1162  00007D                     _number:
  1163                           	opt stack 0
  1164  00007D                     	ds	2
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           postinc0	equ	0xFEE
  1170                           wreg	equ	0xFE8
  1171                           postdec1	equ	0xFE5
  1172                           fsr1l	equ	0xFE1
  1173                           
  1174                           	psect	bssBANK0
  1175  000080                     __pbssBANK0:
  1176                           	opt stack 0
  1177  000080                     _final_time:
  1178                           	opt stack 0
  1179  000080                     	ds	2
  1180  000082                     _sec_final:
  1181                           	opt stack 0
  1182  000082                     	ds	2
  1183  000084                     _min_final:
  1184                           	opt stack 0
  1185  000084                     	ds	2
  1186  000086                     _hr_final:
  1187                           	opt stack 0
  1188  000086                     	ds	2
  1189  000088                     _initial_time:
  1190                           	opt stack 0
  1191  000088                     	ds	2
  1192  00008A                     _sec_initial:
  1193                           	opt stack 0
  1194  00008A                     	ds	2
  1195  00008C                     _min_initial:
  1196                           	opt stack 0
  1197  00008C                     	ds	2
  1198  00008E                     _hr_initial:
  1199                           	opt stack 0
  1200  00008E                     	ds	2
  1201  000090                     _W_remain:
  1202                           	opt stack 0
  1203  000090                     	ds	2
  1204  000092                     _S_remain:
  1205                           	opt stack 0
  1206  000092                     	ds	2
  1207  000094                     _N_remain:
  1208                           	opt stack 0
  1209  000094                     	ds	2
  1210  000096                     _B_remain:
  1211                           	opt stack 0
  1212  000096                     	ds	2
  1213  000098                     _W_counter:
  1214                           	opt stack 0
  1215  000098                     	ds	2
  1216  00009A                     _N_counter:
  1217                           	opt stack 0
  1218  00009A                     	ds	2
  1219  00009C                     _S_counter:
  1220                           	opt stack 0
  1221  00009C                     	ds	2
  1222  00009E                     _B_counter:
  1223                           	opt stack 0
  1224  00009E                     	ds	2
  1225  0000A0                     _compartment_pos:
  1226                           	opt stack 0
  1227  0000A0                     	ds	2
  1228  0000A2                     _prev:
  1229                           	opt stack 0
  1230  0000A2                     	ds	2
  1231  0000A4                     _gear_counter:
  1232                           	opt stack 0
  1233  0000A4                     	ds	2
  1234  0000A6                     _operation_done:
  1235                           	opt stack 0
  1236  0000A6                     	ds	2
  1237  0000A8                     _white_tape:
  1238                           	opt stack 0
  1239  0000A8                     	ds	2
  1240  0000AA                     _i:
  1241                           	opt stack 0
  1242  0000AA                     	ds	2
  1243  0000AC                     _nuts_data:
  1244                           	opt stack 0
  1245  0000AC                     	ds	1
  1246  0000AD                     _openHandle_data:
  1247                           	opt stack 0
  1248  0000AD                     	ds	1
  1249  0000AE                     _LCDinterruptState:
  1250                           	opt stack 0
  1251  0000AE                     	ds	1
  1252  0000AF                     _temp_set:
  1253                           	opt stack 0
  1254  0000AF                     	ds	5
  1255  0000B4                     _current_set:
  1256                           	opt stack 0
  1257  0000B4                     	ds	5
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1l	equ	0xFE1
  1266                           
  1267                           	psect	dataBANK0
  1268  0000DF                     __pdataBANK0:
  1269                           	opt stack 0
  1270  0000DF                     _compartment_array:
  1271                           	opt stack 0
  1272  0000DF                     	ds	16
  1273  0000EF                     _mode:
  1274                           	opt stack 0
  1275  0000EF                     	ds	2
  1276  0000F1                     _close_handle:
  1277                           	opt stack 0
  1278  0000F1                     	ds	1
  1279  0000F2                     _servo_ramp:
  1280                           	opt stack 0
  1281  0000F2                     	ds	1
  1282  0000F3                     _motorStop_3:
  1283                           	opt stack 0
  1284  0000F3                     	ds	1
  1285  0000F4                     _motorStart_3:
  1286                           	opt stack 0
  1287  0000F4                     	ds	1
  1288  0000F5                     _motorStop_2:
  1289                           	opt stack 0
  1290  0000F5                     	ds	1
  1291  0000F6                     _motorStart_2:
  1292                           	opt stack 0
  1293  0000F6                     	ds	1
  1294  0000F7                     _motorStop_1:
  1295                           	opt stack 0
  1296  0000F7                     	ds	1
  1297  0000F8                     _motorStart_1:
  1298                           	opt stack 0
  1299  0000F8                     	ds	1
  1300  0000F9                     _motorStop_0:
  1301                           	opt stack 0
  1302  0000F9                     	ds	1
  1303  0000FA                     _motorStart_0:
  1304                           	opt stack 0
  1305  0000FA                     	ds	1
  1306  0000FB                     _S_dispense:
  1307                           	opt stack 0
  1308  0000FB                     	ds	1
  1309  0000FC                     _N_dispense:
  1310                           	opt stack 0
  1311  0000FC                     	ds	1
  1312  0000FD                     _B_dispense:
  1313                           	opt stack 0
  1314  0000FD                     	ds	1
  1315  0000FE                     _rotate_1compartment:
  1316                           	opt stack 0
  1317  0000FE                     	ds	1
  1318  0000FF                     _rotate_gear:
  1319                           	opt stack 0
  1320  0000FF                     	ds	1
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           postdec1	equ	0xFE5
  1328                           fsr1l	equ	0xFE1
  1329                           
  1330                           	psect	bssBANK1
  1331  000100                     __pbssBANK1:
  1332                           	opt stack 0
  1333  000100                     _prev_number:
  1334                           	opt stack 0
  1335  000100                     	ds	16
  1336  000110                     _final_number:
  1337                           	opt stack 0
  1338  000110                     	ds	16
  1339  000120                     _W_done:
  1340                           	opt stack 0
  1341  000120                     	ds	2
  1342  000122                     _S_done:
  1343                           	opt stack 0
  1344  000122                     	ds	2
  1345  000124                     _N_done:
  1346                           	opt stack 0
  1347  000124                     	ds	2
  1348  000126                     _B_done:
  1349                           	opt stack 0
  1350  000126                     	ds	2
  1351  000128                     _W_spacingTime:
  1352                           	opt stack 0
  1353  000128                     	ds	2
  1354  00012A                     _S_spacingTime:
  1355                           	opt stack 0
  1356  00012A                     	ds	2
  1357  00012C                     _N_spacingTime:
  1358                           	opt stack 0
  1359  00012C                     	ds	2
  1360  00012E                     _B_spacingTime:
  1361                           	opt stack 0
  1362  00012E                     	ds	2
  1363  000130                     _error:
  1364                           	opt stack 0
  1365  000130                     	ds	2
  1366  000132                     _angle:
  1367                           	opt stack 0
  1368  000132                     	ds	2
  1369  000134                     _prev_set:
  1370                           	opt stack 0
  1371  000134                     	ds	40
  1372  00015C                     _final_set:
  1373                           	opt stack 0
  1374  00015C                     	ds	40
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1l	equ	0xFE1
  1383                           
  1384                           	psect	dataBANK1
  1385  000184                     __pdataBANK1:
  1386                           	opt stack 0
  1387  000184                     _W_array:
  1388                           	opt stack 0
  1389  000184                     	ds	16
  1390  000194                     _N_array:
  1391                           	opt stack 0
  1392  000194                     	ds	16
  1393  0001A4                     _S_array:
  1394                           	opt stack 0
  1395  0001A4                     	ds	16
  1396  0001B4                     _B_array:
  1397                           	opt stack 0
  1398  0001B4                     	ds	16
  1399  0001C4                     _W_max:
  1400                           	opt stack 0
  1401  0001C4                     	ds	2
  1402  0001C6                     _S_max:
  1403                           	opt stack 0
  1404  0001C6                     	ds	2
  1405  0001C8                     _N_max:
  1406                           	opt stack 0
  1407  0001C8                     	ds	2
  1408  0001CA                     _B_max:
  1409                           	opt stack 0
  1410  0001CA                     	ds	2
  1411  0001CC                     _init_position:
  1412                           	opt stack 0
  1413  0001CC                     	ds	2
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           postdec1	equ	0xFE5
  1421                           fsr1l	equ	0xFE1
  1422                           
  1423                           	psect	bssBANK2
  1424  000200                     __pbssBANK2:
  1425                           	opt stack 0
  1426  000200                     _fastener:
  1427                           	opt stack 0
  1428  000200                     	ds	200
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postdec1	equ	0xFE5
  1436                           fsr1l	equ	0xFE1
  1437                           
  1438                           	psect	cstackBANK0
  1439  0000B9                     __pcstackBANK0:
  1440                           	opt stack 0
  1441  0000B9                     ??_isdigit:
  1442  0000B9                     ??_I2C_Master_Wait:
  1443  0000B9                     ?_readADC:
  1444                           	opt stack 0
  1445  0000B9                     ?___awdiv:
  1446                           	opt stack 0
  1447  0000B9                     ?___lwdiv:
  1448                           	opt stack 0
  1449  0000B9                     ?___lldiv:
  1450                           	opt stack 0
  1451  0000B9                     lcdNibble@temp:
  1452                           	opt stack 0
  1453  0000B9                     ___awdiv@dividend:
  1454                           	opt stack 0
  1455  0000B9                     ___lwdiv@dividend:
  1456                           	opt stack 0
  1457  0000B9                     ___lldiv@dividend:
  1458                           	opt stack 0
  1459                           
  1460                           ; 4 bytes @ 0x0
  1461  0000B9                     	ds	1
  1462  0000BA                     lcdNibble@data:
  1463                           	opt stack 0
  1464  0000BA                     I2C_Master_Read@ackBit:
  1465                           	opt stack 0
  1466  0000BA                     _isdigit$1254:
  1467                           	opt stack 0
  1468  0000BA                     I2C_Master_Write@byteToWrite:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x1
  1472  0000BA                     	ds	1
  1473  0000BB                     ??_readADC:
  1474  0000BB                     lcdInst@data:
  1475                           	opt stack 0
  1476  0000BB                     putch@data:
  1477                           	opt stack 0
  1478  0000BB                     I2C_Master_Read@receivedByte:
  1479                           	opt stack 0
  1480  0000BB                     isdigit@c:
  1481                           	opt stack 0
  1482  0000BB                     ___awdiv@divisor:
  1483                           	opt stack 0
  1484  0000BB                     ___lwdiv@divisor:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x2
  1488  0000BB                     	ds	1
  1489  0000BC                     ??_initLCD:
  1490  0000BC                     I2C_sendData@char_data:
  1491                           	opt stack 0
  1492                           
  1493                           ; 1 bytes @ 0x3
  1494  0000BC                     	ds	1
  1495  0000BD                     readADC@channel:
  1496                           	opt stack 0
  1497  0000BD                     ___awdiv@counter:
  1498                           	opt stack 0
  1499  0000BD                     ___lwdiv@quotient:
  1500                           	opt stack 0
  1501  0000BD                     ___lldiv@divisor:
  1502                           	opt stack 0
  1503                           
  1504                           ; 4 bytes @ 0x4
  1505  0000BD                     	ds	1
  1506  0000BE                     ___awdiv@sign:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x5
  1510  0000BE                     	ds	1
  1511  0000BF                     ___lwdiv@counter:
  1512                           	opt stack 0
  1513  0000BF                     ___awdiv@quotient:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x6
  1517  0000BF                     	ds	1
  1518  0000C0                     ?___lwmod:
  1519                           	opt stack 0
  1520  0000C0                     ___lwmod@dividend:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x7
  1524  0000C0                     	ds	1
  1525  0000C1                     ?___wmul:
  1526                           	opt stack 0
  1527  0000C1                     ___wmul@multiplier:
  1528                           	opt stack 0
  1529  0000C1                     ___lldiv@quotient:
  1530                           	opt stack 0
  1531                           
  1532                           ; 4 bytes @ 0x8
  1533  0000C1                     	ds	1
  1534  0000C2                     ___lwmod@divisor:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x9
  1538  0000C2                     	ds	1
  1539  0000C3                     ___wmul@multiplicand:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0xA
  1543  0000C3                     	ds	1
  1544  0000C4                     ___lwmod@counter:
  1545                           	opt stack 0
  1546                           
  1547                           ; 1 bytes @ 0xB
  1548  0000C4                     	ds	1
  1549  0000C5                     ___lldiv@counter:
  1550                           	opt stack 0
  1551  0000C5                     ___wmul@product:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0xC
  1555  0000C5                     	ds	1
  1556  0000C6                     I2C_Master_Init@clockFreq:
  1557                           	opt stack 0
  1558                           
  1559                           ; 4 bytes @ 0xD
  1560  0000C6                     	ds	1
  1561  0000C7                     ??_get_RTC_final:
  1562  0000C7                     ?_printf:
  1563                           	opt stack 0
  1564  0000C7                     printf@f:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0xE
  1568  0000C7                     	ds	3
  1569  0000CA                     ??_I2C_Master_Init:
  1570                           
  1571                           ; 1 bytes @ 0x11
  1572  0000CA                     	ds	1
  1573  0000CB                     ??_printf:
  1574                           
  1575                           ; 1 bytes @ 0x12
  1576  0000CB                     	ds	4
  1577  0000CF                     printf@idx:
  1578                           	opt stack 0
  1579                           
  1580                           ; 1 bytes @ 0x16
  1581  0000CF                     	ds	1
  1582  0000D0                     printf@prec:
  1583                           	opt stack 0
  1584                           
  1585                           ; 1 bytes @ 0x17
  1586  0000D0                     	ds	1
  1587  0000D1                     printf@cp:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x18
  1591  0000D1                     	ds	2
  1592  0000D3                     printf@ap:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x1A
  1596  0000D3                     	ds	2
  1597  0000D5                     printf@len:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x1C
  1601  0000D5                     	ds	2
  1602  0000D7                     printf@val:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x1E
  1606  0000D7                     	ds	2
  1607  0000D9                     printf@flag:
  1608                           	opt stack 0
  1609                           
  1610                           ; 1 bytes @ 0x20
  1611  0000D9                     	ds	1
  1612  0000DA                     printf@width:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x21
  1616  0000DA                     	ds	2
  1617  0000DC                     printf@c:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x23
  1621  0000DC                     	ds	1
  1622  0000DD                     ??_main:
  1623                           
  1624                           ; 1 bytes @ 0x24
  1625  0000DD                     	ds	2
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           
  1635                           	psect	cstackCOMRAM
  1636  000001                     __pcstackCOMRAM:
  1637                           	opt stack 0
  1638  000001                     ??i2_I2C_Master_Wait:
  1639  000001                     ??i2_isdigit:
  1640  000001                     ?_check:
  1641                           	opt stack 0
  1642  000001                     ?_strcmp:
  1643                           	opt stack 0
  1644  000001                     ?___awmod:
  1645                           	opt stack 0
  1646  000001                     ?i2___wmul:
  1647                           	opt stack 0
  1648  000001                     ?i2___awdiv:
  1649                           	opt stack 0
  1650  000001                     ?i2___lwdiv:
  1651                           	opt stack 0
  1652  000001                     ?i2___lldiv:
  1653                           	opt stack 0
  1654  000001                     i2lcdNibble@temp:
  1655                           	opt stack 0
  1656  000001                     generate_compartment_array@step:
  1657                           	opt stack 0
  1658  000001                     ___awmod@dividend:
  1659                           	opt stack 0
  1660  000001                     strcat@to:
  1661                           	opt stack 0
  1662  000001                     strcmp@s1:
  1663                           	opt stack 0
  1664  000001                     i2___wmul@multiplier:
  1665                           	opt stack 0
  1666  000001                     i2___awdiv@dividend:
  1667                           	opt stack 0
  1668  000001                     i2___lwdiv@dividend:
  1669                           	opt stack 0
  1670  000001                     i2___lldiv@dividend:
  1671                           	opt stack 0
  1672                           
  1673                           ; 4 bytes @ 0x0
  1674  000001                     	ds	1
  1675  000002                     i2lcdNibble@data:
  1676                           	opt stack 0
  1677  000002                     i2I2C_Master_Read@ackBit:
  1678                           	opt stack 0
  1679  000002                     i2_isdigit$1254:
  1680                           	opt stack 0
  1681  000002                     i2I2C_Master_Write@byteToWrite:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x1
  1685  000002                     	ds	1
  1686  000003                     ??_generate_compartment_array:
  1687  000003                     i2lcdInst@data:
  1688                           	opt stack 0
  1689  000003                     i2putch@data:
  1690                           	opt stack 0
  1691  000003                     i2I2C_Master_Read@receivedByte:
  1692                           	opt stack 0
  1693  000003                     i2isdigit@c:
  1694                           	opt stack 0
  1695  000003                     ___awmod@divisor:
  1696                           	opt stack 0
  1697  000003                     strcat@from:
  1698                           	opt stack 0
  1699  000003                     strcmp@s2:
  1700                           	opt stack 0
  1701  000003                     i2___wmul@multiplicand:
  1702                           	opt stack 0
  1703  000003                     i2___awdiv@divisor:
  1704                           	opt stack 0
  1705  000003                     i2___lwdiv@divisor:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x2
  1709  000003                     	ds	1
  1710  000004                     ??i2_initLCD:
  1711  000004                     
  1712                           ; 1 bytes @ 0x3
  1713  000004                     	ds	1
  1714  000005                     ??_strcmp:
  1715  000005                     ___awmod@counter:
  1716                           	opt stack 0
  1717  000005                     i2___awdiv@counter:
  1718                           	opt stack 0
  1719  000005                     strcat@cp:
  1720                           	opt stack 0
  1721  000005                     i2___wmul@product:
  1722                           	opt stack 0
  1723  000005                     i2___lwdiv@quotient:
  1724                           	opt stack 0
  1725  000005                     i2___lldiv@divisor:
  1726                           	opt stack 0
  1727                           
  1728                           ; 4 bytes @ 0x4
  1729  000005                     	ds	1
  1730  000006                     ___awmod@sign:
  1731                           	opt stack 0
  1732  000006                     strcmp@r:
  1733                           	opt stack 0
  1734  000006                     i2___awdiv@sign:
  1735                           	opt stack 0
  1736                           
  1737                           ; 1 bytes @ 0x5
  1738  000006                     	ds	1
  1739  000007                     ??_is_valid:
  1740  000007                     ?_strncmp:
  1741                           	opt stack 0
  1742  000007                     i2___lwdiv@counter:
  1743                           	opt stack 0
  1744  000007                     strcpy@to:
  1745                           	opt stack 0
  1746  000007                     strncmp@s1:
  1747                           	opt stack 0
  1748  000007                     i2___awdiv@quotient:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x6
  1752  000007                     	ds	1
  1753  000008                     ?i2___lwmod:
  1754                           	opt stack 0
  1755  000008                     i2___lwmod@dividend:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x7
  1759  000008                     	ds	1
  1760  000009                     strcpy@from:
  1761                           	opt stack 0
  1762  000009                     strncmp@s2:
  1763                           	opt stack 0
  1764  000009                     i2___lldiv@quotient:
  1765                           	opt stack 0
  1766                           
  1767                           ; 4 bytes @ 0x8
  1768  000009                     	ds	1
  1769  00000A                     i2___lwmod@divisor:
  1770                           	opt stack 0
  1771                           
  1772                           ; 2 bytes @ 0x9
  1773  00000A                     	ds	1
  1774  00000B                     strcpy@cp:
  1775                           	opt stack 0
  1776  00000B                     strncmp@len:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0xA
  1780  00000B                     	ds	1
  1781  00000C                     i2___lwmod@counter:
  1782                           	opt stack 0
  1783                           
  1784                           ; 1 bytes @ 0xB
  1785  00000C                     	ds	1
  1786  00000D                     ??_strncmp:
  1787  00000D                     ?i2_printf:
  1788                           	opt stack 0
  1789  00000D                     i2___lldiv@counter:
  1790                           	opt stack 0
  1791  00000D                     i2printf@f:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0xC
  1795  00000D                     	ds	1
  1796  00000E                     i2I2C_Master_Init@clockFreq:
  1797                           	opt stack 0
  1798                           
  1799                           ; 4 bytes @ 0xD
  1800  00000E                     	ds	4
  1801  000012                     ??i2_I2C_Master_Init:
  1802                           
  1803                           ; 1 bytes @ 0x11
  1804  000012                     	ds	3
  1805  000015                     ??i2_printf:
  1806                           
  1807                           ; 1 bytes @ 0x14
  1808  000015                     	ds	4
  1809  000019                     i2printf@idx:
  1810                           	opt stack 0
  1811                           
  1812                           ; 1 bytes @ 0x18
  1813  000019                     	ds	1
  1814  00001A                     i2printf@prec:
  1815                           	opt stack 0
  1816                           
  1817                           ; 1 bytes @ 0x19
  1818  00001A                     	ds	1
  1819  00001B                     i2printf@cp:
  1820                           	opt stack 0
  1821                           
  1822                           ; 2 bytes @ 0x1A
  1823  00001B                     	ds	2
  1824  00001D                     i2printf@ap:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x1C
  1828  00001D                     	ds	2
  1829  00001F                     i2printf@len:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x1E
  1833  00001F                     	ds	2
  1834  000021                     i2printf@val:
  1835                           	opt stack 0
  1836                           
  1837                           ; 2 bytes @ 0x20
  1838  000021                     	ds	2
  1839  000023                     i2printf@flag:
  1840                           	opt stack 0
  1841                           
  1842                           ; 1 bytes @ 0x22
  1843  000023                     	ds	1
  1844  000024                     i2printf@width:
  1845                           	opt stack 0
  1846                           
  1847                           ; 2 bytes @ 0x23
  1848  000024                     	ds	2
  1849  000026                     i2printf@c:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x25
  1853  000026                     	ds	1
  1854  000027                     ??_interruptHandler:
  1855                           
  1856                           ; 1 bytes @ 0x26
  1857  000027                     	ds	23
  1858  00003E                     interruptHandler@i:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0x3D
  1862  00003E                     	ds	2
  1863  000040                     interruptHandler@keypress:
  1864                           	opt stack 0
  1865                           
  1866                           ; 1 bytes @ 0x3F
  1867  000040                     	ds	1
  1868  000041                     interruptHandler@temp:
  1869                           	opt stack 0
  1870                           
  1871                           ; 1 bytes @ 0x40
  1872  000041                     	ds	1
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postdec1	equ	0xFE5
  1880                           fsr1l	equ	0xFE1
  1881                           
  1882 ;;
  1883 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1884 ;;
  1885 ;; *************** function _main *****************
  1886 ;; Defined at:
  1887 ;;		line 65 in file "main.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;Total ram usage:        2 bytes
  1906 ;; Hardware stack levels required when called:    7
  1907 ;; This function calls:
  1908 ;;		_I2C_Master_Init
  1909 ;;		_I2C_Master_Read
  1910 ;;		_I2C_Master_Start
  1911 ;;		_I2C_Master_Stop
  1912 ;;		_I2C_Master_Write
  1913 ;;		_I2C_sendData
  1914 ;;		_get_RTC_final
  1915 ;;		_initLCD
  1916 ;;		_initialize
  1917 ;;		_lcdInst
  1918 ;;		_printf
  1919 ;;		_readADC
  1920 ;; This function is called by:
  1921 ;;		Startup code after reset
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text0
  1926  001A44                     __ptext0:
  1927                           	opt stack 0
  1928  001A44                     _main:
  1929                           	opt stack 24
  1930                           
  1931                           ;main.c: 74: LATA = 0x00;
  1932                           
  1933                           ;incstack = 0
  1934  001A44  0E00               	movlw	0
  1935  001A46  6E89               	movwf	3977,c	;volatile
  1936                           
  1937                           ;main.c: 75: LATB = 0x00;
  1938  001A48  0E00               	movlw	0
  1939  001A4A  6E8A               	movwf	3978,c	;volatile
  1940                           
  1941                           ;main.c: 76: LATC = 0x00;
  1942  001A4C  0E00               	movlw	0
  1943  001A4E  6E8B               	movwf	3979,c	;volatile
  1944                           
  1945                           ;main.c: 77: LATD = 0x00;
  1946  001A50  0E00               	movlw	0
  1947  001A52  6E8C               	movwf	3980,c	;volatile
  1948                           
  1949                           ;main.c: 78: LATE = 0x00;
  1950  001A54  0E00               	movlw	0
  1951  001A56  6E8D               	movwf	3981,c	;volatile
  1952                           
  1953                           ;main.c: 82: TRISA = 0xFF;
  1954  001A58  6892               	setf	3986,c	;volatile
  1955                           
  1956                           ;main.c: 83: TRISB = 0xFF;
  1957  001A5A  6893               	setf	3987,c	;volatile
  1958                           
  1959                           ;main.c: 84: TRISC = 0x00;
  1960  001A5C  0E00               	movlw	0
  1961  001A5E  6E94               	movwf	3988,c	;volatile
  1962                           
  1963                           ;main.c: 85: TRISD = 0x00;
  1964  001A60  0E00               	movlw	0
  1965  001A62  6E95               	movwf	3989,c	;volatile
  1966                           
  1967                           ;main.c: 86: TRISE = 0x00;
  1968  001A64  0E00               	movlw	0
  1969  001A66  6E96               	movwf	3990,c	;volatile
  1970                           
  1971                           ;main.c: 89: ADCON0 = 0x00;
  1972  001A68  0E00               	movlw	0
  1973  001A6A  6EC2               	movwf	4034,c	;volatile
  1974                           
  1975                           ;main.c: 90: ADCON1 = 0b00001111;
  1976  001A6C  0E0F               	movlw	15
  1977  001A6E  6EC1               	movwf	4033,c	;volatile
  1978                           
  1979                           ;main.c: 93: INT1IE = 1;
  1980  001A70  86F0               	bsf	intcon3,3,c	;volatile
  1981                           
  1982                           ;main.c: 94: (INTCONbits.GIE = 1);
  1983  001A72  8EF2               	bsf	intcon,7,c	;volatile
  1984                           
  1985                           ;main.c: 97: initLCD();
  1986  001A74  EC79  F01B         	call	_initLCD	;wreg free
  1987  001A78                     
  1988                           ;main.c: 221: if (mode == 2){
  1989  001A78  0E02               	movlw	2
  1990  001A7A  0100               	movlb	0	; () banked
  1991  001A7C  19EF               	xorwf	_mode& (0+255),w,b
  1992  001A7E  11F0               	iorwf	(_mode+1)& (0+255),w,b
  1993  001A80  A4D8               	btfss	status,2,c
  1994  001A82  D7FA               	goto	l336
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;main.c: 222: (INTCONbits.GIE = 0);
  1998  001A84  9EF2               	bcf	intcon,7,c	;volatile
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;main.c: 223: initLCD();
  2002  001A86  EC79  F01B         	call	_initLCD	;wreg free
  2003                           
  2004                           ;main.c: 225: I2C_Master_Init(100000);
  2005  001A8A  0EA0               	movlw	160
  2006  001A8C  0100               	movlb	0	; () banked
  2007  001A8E  6FC6               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2008  001A90  0E86               	movlw	134
  2009  001A92  6FC7               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2010  001A94  0E01               	movlw	1
  2011  001A96  6FC8               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2012  001A98  0E00               	movlw	0
  2013  001A9A  6FC9               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2014  001A9C  ECC8  F01A         	call	_I2C_Master_Init	;wreg free
  2015                           
  2016                           ;main.c: 226: I2C_Master_Start();
  2017  001AA0  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  2018                           
  2019                           ;main.c: 229: I2C_Master_Write(0b00010000);
  2020  001AA4  0E00               	movlw	0
  2021  001AA6  0100               	movlb	0	; () banked
  2022  001AA8  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2023  001AAA  0E10               	movlw	16
  2024  001AAC  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2025  001AAE  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  2026                           
  2027                           ;main.c: 230: I2C_Master_Stop();
  2028  001AB2  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  2029                           
  2030                           ;main.c: 233: I2C_sendData(rotate_gear);
  2031  001AB6  0100               	movlb	0	; () banked
  2032  001AB8  51FF               	movf	_rotate_gear& (0+255),w,b
  2033  001ABA  ECDC  F01C         	call	_I2C_sendData
  2034  001ABE                     l338:
  2035                           
  2036                           ;main.c: 239: I2C_Master_Start();
  2037  001ABE  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  2038                           
  2039                           ;main.c: 240: I2C_Master_Write(0b00010001);
  2040  001AC2  0E00               	movlw	0
  2041  001AC4  0100               	movlb	0	; () banked
  2042  001AC6  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2043  001AC8  0E11               	movlw	17
  2044  001ACA  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2045  001ACC  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  2046                           
  2047                           ;main.c: 241: openHandle_data = I2C_Master_Read(1);
  2048  001AD0  0E01               	movlw	1
  2049  001AD2  ECB3  F01C         	call	_I2C_Master_Read
  2050  001AD6  0100               	movlb	0	; () banked
  2051  001AD8  6FAD               	movwf	_openHandle_data& (0+255),b
  2052                           
  2053                           ;main.c: 242: I2C_Master_Stop();
  2054  001ADA  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  2055                           
  2056                           ;main.c: 244: if (openHandle_data == '0'){
  2057  001ADE  0E30               	movlw	48
  2058  001AE0  0100               	movlb	0	; () banked
  2059  001AE2  19AD               	xorwf	_openHandle_data& (0+255),w,b
  2060  001AE4  A4D8               	btfss	status,2,c
  2061  001AE6  D7EB               	goto	l338
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 245: initLCD();
  2065  001AE8  EC79  F01B         	call	_initLCD	;wreg free
  2066                           
  2067                           ;main.c: 246: printf("C0 is found");
  2068  001AEC  0E44               	movlw	low STR_1
  2069  001AEE  0100               	movlb	0	; () banked
  2070  001AF0  6FC7               	movwf	printf@f& (0+255),b
  2071  001AF2  0EFF               	movlw	high STR_1
  2072  001AF4  6FC8               	movwf	(printf@f+1)& (0+255),b
  2073  001AF6  ECAA  F011         	call	_printf	;wreg free
  2074                           
  2075                           ;main.c: 247: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2076  001AFA  0E80               	movlw	128
  2077  001AFC  EC52  F01D         	call	_lcdInst
  2078  001B00  0E41               	movlw	65
  2079  001B02  0100               	movlb	0	; () banked
  2080  001B04  6FDD               	movwf	??_main& (0+255),b
  2081  001B06  0EEE               	movlw	238
  2082  001B08                     u4787:
  2083  001B08  2EE8               	decfsz	wreg,f,c
  2084  001B0A  D7FE               	bra	u4787
  2085  001B0C  2FDD               	decfsz	??_main& (0+255),f,b
  2086  001B0E  D7FC               	bra	u4787
  2087  001B10  F000               	nop	
  2088                           
  2089                           ;main.c: 250: }
  2090                           ;main.c: 251: }
  2091                           ;main.c: 257: I2C_Master_Init(100000);
  2092                           
  2093                           ;main.c: 249: break;
  2094  001B12  0EA0               	movlw	160
  2095  001B14  0100               	movlb	0	; () banked
  2096  001B16  6FC6               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2097  001B18  0E86               	movlw	134
  2098  001B1A  6FC7               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2099  001B1C  0E01               	movlw	1
  2100  001B1E  6FC8               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2101  001B20  0E00               	movlw	0
  2102  001B22  6FC9               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2103  001B24  ECC8  F01A         	call	_I2C_Master_Init	;wreg free
  2104                           
  2105                           ;main.c: 258: I2C_Master_Start();
  2106  001B28  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  2107                           
  2108                           ;main.c: 261: I2C_Master_Write(0b00010000);
  2109  001B2C  0E00               	movlw	0
  2110  001B2E  0100               	movlb	0	; () banked
  2111  001B30  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2112  001B32  0E10               	movlw	16
  2113  001B34  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2114  001B36  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  2115                           
  2116                           ;main.c: 262: I2C_Master_Stop();
  2117  001B3A  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  2118                           
  2119                           ;main.c: 264: I2C_sendData(15);
  2120  001B3E  0E0F               	movlw	15
  2121  001B40  ECDC  F01C         	call	_I2C_sendData
  2122                           
  2123                           ;main.c: 265: _delay((unsigned long)((200)*(40000000/4000.0)));
  2124  001B44  0E0B               	movlw	11
  2125  001B46  0100               	movlb	0	; () banked
  2126  001B48  6FDE               	movwf	(??_main+1)& (0+255),b
  2127  001B4A  0E26               	movlw	38
  2128  001B4C  6FDD               	movwf	??_main& (0+255),b
  2129  001B4E  0E5D               	movlw	93
  2130  001B50                     u4797:
  2131  001B50  2EE8               	decfsz	wreg,f,c
  2132  001B52  D7FE               	bra	u4797
  2133  001B54  2FDD               	decfsz	??_main& (0+255),f,b
  2134  001B56  D7FC               	bra	u4797
  2135  001B58  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2136  001B5A  D7FA               	bra	u4797
  2137  001B5C  D000               	nop2	
  2138                           
  2139                           ;main.c: 267: i = 0;
  2140  001B5E  0E00               	movlw	0
  2141  001B60  0100               	movlb	0	; () banked
  2142  001B62  6FAB               	movwf	(_i+1)& (0+255),b
  2143  001B64  0E00               	movlw	0
  2144  001B66  6FAA               	movwf	_i& (0+255),b
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;main.c: 268: compartment_pos = 0;
  2148  001B68  0E00               	movlw	0
  2149  001B6A  6FA1               	movwf	(_compartment_pos+1)& (0+255),b
  2150  001B6C  0E00               	movlw	0
  2151  001B6E  6FA0               	movwf	_compartment_pos& (0+255),b
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;main.c: 270: for (i = 0; i<8; i++){
  2155  001B70  0E00               	movlw	0
  2156  001B72  6FAB               	movwf	(_i+1)& (0+255),b
  2157  001B74  0E00               	movlw	0
  2158  001B76  6FAA               	movwf	_i& (0+255),b
  2159                           
  2160                           ; BSR set to: 0
  2161  001B78  51AB               	movf	(_i+1)& (0+255),w,b
  2162  001B7A  E105               	bnz	u3970
  2163  001B7C  0E08               	movlw	8
  2164  001B7E  5DAA               	subwf	_i& (0+255),w,b
  2165  001B80  B0D8               	btfsc	status,0,c
  2166  001B82  D2A1               	goto	u4130
  2167  001B84  D001               	goto	l342
  2168  001B86                     u3970:
  2169                           
  2170                           ; BSR set to: 0
  2171  001B86  D29F               	goto	u4130
  2172  001B88                     l342:
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;main.c: 272: initLCD();
  2176                           
  2177                           ; BSR set to: 0
  2178  001B88  EC79  F01B         	call	_initLCD	;wreg free
  2179                           
  2180                           ;main.c: 273: printf("processing C%d",i);
  2181  001B8C  0ED5               	movlw	low STR_2
  2182  001B8E  0100               	movlb	0	; () banked
  2183  001B90  6FC7               	movwf	printf@f& (0+255),b
  2184  001B92  0EFE               	movlw	high STR_2
  2185  001B94  6FC8               	movwf	(printf@f+1)& (0+255),b
  2186  001B96  C0AA  F0C9         	movff	_i,?_printf+2
  2187  001B9A  C0AB  F0CA         	movff	_i+1,?_printf+3
  2188  001B9E  ECAA  F011         	call	_printf	;wreg free
  2189                           
  2190                           ;main.c: 274: _delay((unsigned long)((200)*(40000000/4000.0)));
  2191  001BA2  0E0B               	movlw	11
  2192  001BA4  0100               	movlb	0	; () banked
  2193  001BA6  6FDE               	movwf	(??_main+1)& (0+255),b
  2194  001BA8  0E26               	movlw	38
  2195  001BAA  6FDD               	movwf	??_main& (0+255),b
  2196  001BAC  0E5D               	movlw	93
  2197  001BAE                     u4807:
  2198  001BAE  2EE8               	decfsz	wreg,f,c
  2199  001BB0  D7FE               	bra	u4807
  2200  001BB2  2FDD               	decfsz	??_main& (0+255),f,b
  2201  001BB4  D7FC               	bra	u4807
  2202  001BB6  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2203  001BB8  D7FA               	bra	u4807
  2204  001BBA  D000               	nop2	
  2205                           
  2206                           ;main.c: 277: if (compartment_array[compartment_pos] != 0){
  2207  001BBC  90D8               	bcf	status,0,c
  2208  001BBE  0100               	movlb	0	; () banked
  2209  001BC0  35A0               	rlcf	_compartment_pos& (0+255),w,b
  2210  001BC2  6ED9               	movwf	fsr2l,c
  2211  001BC4  35A1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2212  001BC6  6EDA               	movwf	fsr2h,c
  2213  001BC8  0EDF               	movlw	low _compartment_array
  2214  001BCA  26D9               	addwf	fsr2l,f,c
  2215  001BCC  0E00               	movlw	high _compartment_array
  2216  001BCE  22DA               	addwfc	fsr2h,f,c
  2217  001BD0  50DE               	movf	postinc2,w,c
  2218  001BD2  10DE               	iorwf	postinc2,w,c
  2219  001BD4  B4D8               	btfsc	status,2,c
  2220  001BD6  D261               	goto	l344
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;main.c: 281: initLCD();
  2224  001BD8  EC79  F01B         	call	_initLCD	;wreg free
  2225                           
  2226                           ;main.c: 283: printf("B_counter:%d",B_counter);
  2227  001BDC  0E10               	movlw	low STR_3
  2228  001BDE  0100               	movlb	0	; () banked
  2229  001BE0  6FC7               	movwf	printf@f& (0+255),b
  2230  001BE2  0EFF               	movlw	high STR_3
  2231  001BE4  6FC8               	movwf	(printf@f+1)& (0+255),b
  2232  001BE6  C09E  F0C9         	movff	_B_counter,?_printf+2
  2233  001BEA  C09F  F0CA         	movff	_B_counter+1,?_printf+3
  2234  001BEE  ECAA  F011         	call	_printf	;wreg free
  2235                           
  2236                           ;main.c: 284: B_counter = B_array[compartment_pos];
  2237  001BF2  90D8               	bcf	status,0,c
  2238  001BF4  0100               	movlb	0	; () banked
  2239  001BF6  35A0               	rlcf	_compartment_pos& (0+255),w,b
  2240  001BF8  6ED9               	movwf	fsr2l,c
  2241  001BFA  35A1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2242  001BFC  6EDA               	movwf	fsr2h,c
  2243  001BFE  0EB4               	movlw	low _B_array
  2244  001C00  26D9               	addwf	fsr2l,f,c
  2245  001C02  0E01               	movlw	high _B_array
  2246  001C04  22DA               	addwfc	fsr2h,f,c
  2247  001C06  CFDE F09E          	movff	postinc2,_B_counter
  2248  001C0A  CFDD F09F          	movff	postdec2,_B_counter+1
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;main.c: 285: if(B_counter != 0){
  2252  001C0E  519E               	movf	_B_counter& (0+255),w,b
  2253  001C10  119F               	iorwf	(_B_counter+1)& (0+255),w,b
  2254  001C12  B4D8               	btfsc	status,2,c
  2255  001C14  D047               	goto	l350
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;main.c: 286: I2C_sendData(motorStart_0);
  2259  001C16  51FA               	movf	_motorStart_0& (0+255),w,b
  2260  001C18  ECDC  F01C         	call	_I2C_sendData
  2261                           
  2262                           ;main.c: 287: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2263  001C1C  0E33               	movlw	51
  2264  001C1E  0100               	movlb	0	; () banked
  2265  001C20  6FDE               	movwf	(??_main+1)& (0+255),b
  2266  001C22  0EBB               	movlw	187
  2267  001C24  6FDD               	movwf	??_main& (0+255),b
  2268  001C26  0EDF               	movlw	223
  2269  001C28                     u4817:
  2270  001C28  2EE8               	decfsz	wreg,f,c
  2271  001C2A  D7FE               	bra	u4817
  2272  001C2C  2FDD               	decfsz	??_main& (0+255),f,b
  2273  001C2E  D7FC               	bra	u4817
  2274  001C30  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2275  001C32  D7FA               	bra	u4817
  2276  001C34  D000               	nop2	
  2277                           
  2278                           ;main.c: 288: I2C_sendData(B_dispense);
  2279  001C36  0100               	movlb	0	; () banked
  2280  001C38  51FD               	movf	_B_dispense& (0+255),w,b
  2281  001C3A  ECDC  F01C         	call	_I2C_sendData
  2282                           
  2283                           ;main.c: 289: }
  2284                           ;main.c: 291: while(B_counter > 0){
  2285  001C3E  D032               	goto	l350
  2286  001C40                     l4858:
  2287                           
  2288                           ;main.c: 294: I2C_Master_Start();
  2289  001C40  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  2290                           
  2291                           ;main.c: 295: I2C_Master_Write(0b00010001);
  2292  001C44  0E00               	movlw	0
  2293  001C46  0100               	movlb	0	; () banked
  2294  001C48  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2295  001C4A  0E11               	movlw	17
  2296  001C4C  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2297  001C4E  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  2298                           
  2299                           ;main.c: 296: nuts_data = I2C_Master_Read(1);
  2300  001C52  0E01               	movlw	1
  2301  001C54  ECB3  F01C         	call	_I2C_Master_Read
  2302  001C58  0100               	movlb	0	; () banked
  2303  001C5A  6FAC               	movwf	_nuts_data& (0+255),b
  2304                           
  2305                           ;main.c: 297: I2C_Master_Stop();
  2306  001C5C  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  2307                           
  2308                           ;main.c: 298: if (nuts_data == '2'){
  2309  001C60  0E32               	movlw	50
  2310  001C62  0100               	movlb	0	; () banked
  2311  001C64  19AC               	xorwf	_nuts_data& (0+255),w,b
  2312  001C66  A4D8               	btfss	status,2,c
  2313  001C68  D01D               	goto	l350
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;main.c: 299: B_counter --;
  2317  001C6A  079E               	decf	_B_counter& (0+255),f,b
  2318  001C6C  A0D8               	btfss	status,0,c
  2319  001C6E  079F               	decf	(_B_counter+1)& (0+255),f,b
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;main.c: 300: initLCD();
  2323  001C70  EC79  F01B         	call	_initLCD	;wreg free
  2324                           
  2325                           ;main.c: 301: printf("B_count:%d", B_counter);
  2326  001C74  0E73               	movlw	low STR_4
  2327  001C76  0100               	movlb	0	; () banked
  2328  001C78  6FC7               	movwf	printf@f& (0+255),b
  2329  001C7A  0EFF               	movlw	high STR_4
  2330  001C7C  6FC8               	movwf	(printf@f+1)& (0+255),b
  2331  001C7E  C09E  F0C9         	movff	_B_counter,?_printf+2
  2332  001C82  C09F  F0CA         	movff	_B_counter+1,?_printf+3
  2333  001C86  ECAA  F011         	call	_printf	;wreg free
  2334                           
  2335                           ;main.c: 303: if (B_counter ==0){
  2336  001C8A  0100               	movlb	0	; () banked
  2337  001C8C  519E               	movf	_B_counter& (0+255),w,b
  2338  001C8E  119F               	iorwf	(_B_counter+1)& (0+255),w,b
  2339  001C90  A4D8               	btfss	status,2,c
  2340  001C92  D004               	goto	l349
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 304: I2C_sendData(motorStop_0);
  2344  001C94  51F9               	movf	_motorStop_0& (0+255),w,b
  2345  001C96  ECDC  F01C         	call	_I2C_sendData
  2346                           
  2347                           ;main.c: 305: }
  2348  001C9A  D004               	goto	l350
  2349  001C9C                     l349:
  2350                           
  2351                           ;main.c: 306: else{
  2352                           ;main.c: 307: I2C_sendData(B_dispense);
  2353  001C9C  0100               	movlb	0	; () banked
  2354  001C9E  51FD               	movf	_B_dispense& (0+255),w,b
  2355  001CA0  ECDC  F01C         	call	_I2C_sendData
  2356  001CA4                     l350:
  2357  001CA4  0100               	movlb	0	; () banked
  2358  001CA6  BF9F               	btfsc	(_B_counter+1)& (0+255),7,b
  2359  001CA8  D005               	goto	u4020
  2360  001CAA  519F               	movf	(_B_counter+1)& (0+255),w,b
  2361  001CAC  E1C9               	bnz	l4858
  2362  001CAE  059E               	decf	_B_counter& (0+255),w,b
  2363  001CB0  B0D8               	btfsc	status,0,c
  2364  001CB2  D7C6               	goto	l347
  2365  001CB4                     u4020:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;main.c: 308: }
  2369                           ;main.c: 309: }
  2370                           ;main.c: 310: }
  2371                           ;main.c: 314: initLCD();
  2372                           
  2373                           ; BSR set to: 0
  2374  001CB4  EC79  F01B         	call	_initLCD	;wreg free
  2375                           
  2376                           ;main.c: 316: printf("bolts dispensed:%d",B_array[compartment_pos]);
  2377  001CB8  0E2B               	movlw	low STR_5
  2378  001CBA  0100               	movlb	0	; () banked
  2379  001CBC  6FC7               	movwf	printf@f& (0+255),b
  2380  001CBE  0EFE               	movlw	high STR_5
  2381  001CC0  6FC8               	movwf	(printf@f+1)& (0+255),b
  2382  001CC2  90D8               	bcf	status,0,c
  2383  001CC4  35A0               	rlcf	_compartment_pos& (0+255),w,b
  2384  001CC6  6ED9               	movwf	fsr2l,c
  2385  001CC8  35A1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2386  001CCA  6EDA               	movwf	fsr2h,c
  2387  001CCC  0EB4               	movlw	low _B_array
  2388  001CCE  26D9               	addwf	fsr2l,f,c
  2389  001CD0  0E01               	movlw	high _B_array
  2390  001CD2  22DA               	addwfc	fsr2h,f,c
  2391  001CD4  CFDE F0C9          	movff	postinc2,?_printf+2
  2392  001CD8  CFDD F0CA          	movff	postdec2,?_printf+3
  2393  001CDC  ECAA  F011         	call	_printf	;wreg free
  2394                           
  2395                           ;main.c: 317: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2396  001CE0  0E33               	movlw	51
  2397  001CE2  0100               	movlb	0	; () banked
  2398  001CE4  6FDE               	movwf	(??_main+1)& (0+255),b
  2399  001CE6  0EBB               	movlw	187
  2400  001CE8  6FDD               	movwf	??_main& (0+255),b
  2401  001CEA  0EDF               	movlw	223
  2402  001CEC                     u4827:
  2403  001CEC  2EE8               	decfsz	wreg,f,c
  2404  001CEE  D7FE               	bra	u4827
  2405  001CF0  2FDD               	decfsz	??_main& (0+255),f,b
  2406  001CF2  D7FC               	bra	u4827
  2407  001CF4  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2408  001CF6  D7FA               	bra	u4827
  2409  001CF8  D000               	nop2	
  2410                           
  2411                           ;main.c: 318: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2412  001CFA  0E80               	movlw	128
  2413  001CFC  EC52  F01D         	call	_lcdInst
  2414  001D00  0E41               	movlw	65
  2415  001D02  0100               	movlb	0	; () banked
  2416  001D04  6FDD               	movwf	??_main& (0+255),b
  2417  001D06  0EEE               	movlw	238
  2418  001D08                     u4837:
  2419  001D08  2EE8               	decfsz	wreg,f,c
  2420  001D0A  D7FE               	bra	u4837
  2421  001D0C  2FDD               	decfsz	??_main& (0+255),f,b
  2422  001D0E  D7FC               	bra	u4837
  2423  001D10  F000               	nop	
  2424                           
  2425                           ;main.c: 319: B_counter = 0;
  2426  001D12  0E00               	movlw	0
  2427  001D14  0100               	movlb	0	; () banked
  2428  001D16  6F9F               	movwf	(_B_counter+1)& (0+255),b
  2429  001D18  0E00               	movlw	0
  2430  001D1A  6F9E               	movwf	_B_counter& (0+255),b
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;main.c: 328: initLCD();
  2434  001D1C  EC79  F01B         	call	_initLCD	;wreg free
  2435                           
  2436                           ;main.c: 330: printf("N_counter:%d",N_counter);
  2437  001D20  0E1D               	movlw	low STR_6
  2438  001D22  0100               	movlb	0	; () banked
  2439  001D24  6FC7               	movwf	printf@f& (0+255),b
  2440  001D26  0EFF               	movlw	high STR_6
  2441  001D28  6FC8               	movwf	(printf@f+1)& (0+255),b
  2442  001D2A  C09A  F0C9         	movff	_N_counter,?_printf+2
  2443  001D2E  C09B  F0CA         	movff	_N_counter+1,?_printf+3
  2444  001D32  ECAA  F011         	call	_printf	;wreg free
  2445                           
  2446                           ;main.c: 331: N_counter = N_array[compartment_pos];
  2447  001D36  90D8               	bcf	status,0,c
  2448  001D38  0100               	movlb	0	; () banked
  2449  001D3A  35A0               	rlcf	_compartment_pos& (0+255),w,b
  2450  001D3C  6ED9               	movwf	fsr2l,c
  2451  001D3E  35A1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2452  001D40  6EDA               	movwf	fsr2h,c
  2453  001D42  0E94               	movlw	low _N_array
  2454  001D44  26D9               	addwf	fsr2l,f,c
  2455  001D46  0E01               	movlw	high _N_array
  2456  001D48  22DA               	addwfc	fsr2h,f,c
  2457  001D4A  CFDE F09A          	movff	postinc2,_N_counter
  2458  001D4E  CFDD F09B          	movff	postdec2,_N_counter+1
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;main.c: 332: if(N_counter != 0){
  2462  001D52  519A               	movf	_N_counter& (0+255),w,b
  2463  001D54  119B               	iorwf	(_N_counter+1)& (0+255),w,b
  2464  001D56  B4D8               	btfsc	status,2,c
  2465  001D58  D03A               	goto	l357
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;main.c: 333: I2C_sendData(motorStart_1);
  2469  001D5A  51F8               	movf	_motorStart_1& (0+255),w,b
  2470  001D5C  ECDC  F01C         	call	_I2C_sendData
  2471                           
  2472                           ;main.c: 334: I2C_sendData(N_dispense);
  2473  001D60  0100               	movlb	0	; () banked
  2474  001D62  51FC               	movf	_N_dispense& (0+255),w,b
  2475  001D64  ECDC  F01C         	call	_I2C_sendData
  2476                           
  2477                           ;main.c: 335: }
  2478                           ;main.c: 337: while(N_counter > 0){
  2479  001D68  D032               	goto	l357
  2480  001D6A                     l4898:
  2481                           
  2482                           ;main.c: 340: I2C_Master_Start();
  2483  001D6A  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  2484                           
  2485                           ;main.c: 341: I2C_Master_Write(0b00010001);
  2486  001D6E  0E00               	movlw	0
  2487  001D70  0100               	movlb	0	; () banked
  2488  001D72  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2489  001D74  0E11               	movlw	17
  2490  001D76  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2491  001D78  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  2492                           
  2493                           ;main.c: 342: nuts_data = I2C_Master_Read(1);
  2494  001D7C  0E01               	movlw	1
  2495  001D7E  ECB3  F01C         	call	_I2C_Master_Read
  2496  001D82  0100               	movlb	0	; () banked
  2497  001D84  6FAC               	movwf	_nuts_data& (0+255),b
  2498                           
  2499                           ;main.c: 343: I2C_Master_Stop();
  2500  001D86  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  2501                           
  2502                           ;main.c: 344: if (nuts_data == '3'){
  2503  001D8A  0E33               	movlw	51
  2504  001D8C  0100               	movlb	0	; () banked
  2505  001D8E  19AC               	xorwf	_nuts_data& (0+255),w,b
  2506  001D90  A4D8               	btfss	status,2,c
  2507  001D92  D01D               	goto	l357
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 345: N_counter --;
  2511  001D94  079A               	decf	_N_counter& (0+255),f,b
  2512  001D96  A0D8               	btfss	status,0,c
  2513  001D98  079B               	decf	(_N_counter+1)& (0+255),f,b
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;main.c: 346: initLCD();
  2517  001D9A  EC79  F01B         	call	_initLCD	;wreg free
  2518                           
  2519                           ;main.c: 347: printf("N_count:%d", N_counter);
  2520  001D9E  0E7E               	movlw	low STR_7
  2521  001DA0  0100               	movlb	0	; () banked
  2522  001DA2  6FC7               	movwf	printf@f& (0+255),b
  2523  001DA4  0EFF               	movlw	high STR_7
  2524  001DA6  6FC8               	movwf	(printf@f+1)& (0+255),b
  2525  001DA8  C09A  F0C9         	movff	_N_counter,?_printf+2
  2526  001DAC  C09B  F0CA         	movff	_N_counter+1,?_printf+3
  2527  001DB0  ECAA  F011         	call	_printf	;wreg free
  2528                           
  2529                           ;main.c: 349: if (N_counter ==0){
  2530  001DB4  0100               	movlb	0	; () banked
  2531  001DB6  519A               	movf	_N_counter& (0+255),w,b
  2532  001DB8  119B               	iorwf	(_N_counter+1)& (0+255),w,b
  2533  001DBA  A4D8               	btfss	status,2,c
  2534  001DBC  D004               	goto	l356
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;main.c: 350: I2C_sendData(motorStop_1);
  2538  001DBE  51F7               	movf	_motorStop_1& (0+255),w,b
  2539  001DC0  ECDC  F01C         	call	_I2C_sendData
  2540                           
  2541                           ;main.c: 351: }
  2542  001DC4  D004               	goto	l357
  2543  001DC6                     l356:
  2544                           
  2545                           ;main.c: 352: else{
  2546                           ;main.c: 353: I2C_sendData(N_dispense);
  2547  001DC6  0100               	movlb	0	; () banked
  2548  001DC8  51FC               	movf	_N_dispense& (0+255),w,b
  2549  001DCA  ECDC  F01C         	call	_I2C_sendData
  2550  001DCE                     l357:
  2551  001DCE  0100               	movlb	0	; () banked
  2552  001DD0  BF9B               	btfsc	(_N_counter+1)& (0+255),7,b
  2553  001DD2  D005               	goto	u4060
  2554  001DD4  519B               	movf	(_N_counter+1)& (0+255),w,b
  2555  001DD6  E1C9               	bnz	l4898
  2556  001DD8  059A               	decf	_N_counter& (0+255),w,b
  2557  001DDA  B0D8               	btfsc	status,0,c
  2558  001DDC  D7C6               	goto	l354
  2559  001DDE                     u4060:
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main.c: 354: }
  2563                           ;main.c: 355: }
  2564                           ;main.c: 356: }
  2565                           ;main.c: 360: initLCD();
  2566                           
  2567                           ; BSR set to: 0
  2568  001DDE  EC79  F01B         	call	_initLCD	;wreg free
  2569                           
  2570                           ;main.c: 362: printf("nuts dispensed:%d",N_array[compartment_pos]);
  2571  001DE2  0E51               	movlw	low STR_8
  2572  001DE4  0100               	movlb	0	; () banked
  2573  001DE6  6FC7               	movwf	printf@f& (0+255),b
  2574  001DE8  0EFE               	movlw	high STR_8
  2575  001DEA  6FC8               	movwf	(printf@f+1)& (0+255),b
  2576  001DEC  90D8               	bcf	status,0,c
  2577  001DEE  35A0               	rlcf	_compartment_pos& (0+255),w,b
  2578  001DF0  6ED9               	movwf	fsr2l,c
  2579  001DF2  35A1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2580  001DF4  6EDA               	movwf	fsr2h,c
  2581  001DF6  0E94               	movlw	low _N_array
  2582  001DF8  26D9               	addwf	fsr2l,f,c
  2583  001DFA  0E01               	movlw	high _N_array
  2584  001DFC  22DA               	addwfc	fsr2h,f,c
  2585  001DFE  CFDE F0C9          	movff	postinc2,?_printf+2
  2586  001E02  CFDD F0CA          	movff	postdec2,?_printf+3
  2587  001E06  ECAA  F011         	call	_printf	;wreg free
  2588                           
  2589                           ;main.c: 363: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2590  001E0A  0E33               	movlw	51
  2591  001E0C  0100               	movlb	0	; () banked
  2592  001E0E  6FDE               	movwf	(??_main+1)& (0+255),b
  2593  001E10  0EBB               	movlw	187
  2594  001E12  6FDD               	movwf	??_main& (0+255),b
  2595  001E14  0EDF               	movlw	223
  2596  001E16                     u4847:
  2597  001E16  2EE8               	decfsz	wreg,f,c
  2598  001E18  D7FE               	bra	u4847
  2599  001E1A  2FDD               	decfsz	??_main& (0+255),f,b
  2600  001E1C  D7FC               	bra	u4847
  2601  001E1E  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2602  001E20  D7FA               	bra	u4847
  2603  001E22  D000               	nop2	
  2604                           
  2605                           ;main.c: 364: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2606  001E24  0E80               	movlw	128
  2607  001E26  EC52  F01D         	call	_lcdInst
  2608  001E2A  0E41               	movlw	65
  2609  001E2C  0100               	movlb	0	; () banked
  2610  001E2E  6FDD               	movwf	??_main& (0+255),b
  2611  001E30  0EEE               	movlw	238
  2612  001E32                     u4857:
  2613  001E32  2EE8               	decfsz	wreg,f,c
  2614  001E34  D7FE               	bra	u4857
  2615  001E36  2FDD               	decfsz	??_main& (0+255),f,b
  2616  001E38  D7FC               	bra	u4857
  2617  001E3A  F000               	nop	
  2618                           
  2619                           ;main.c: 365: N_counter = 0;
  2620  001E3C  0E00               	movlw	0
  2621  001E3E  0100               	movlb	0	; () banked
  2622  001E40  6F9B               	movwf	(_N_counter+1)& (0+255),b
  2623  001E42  0E00               	movlw	0
  2624  001E44  6F9A               	movwf	_N_counter& (0+255),b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;main.c: 375: initLCD();
  2628  001E46  EC79  F01B         	call	_initLCD	;wreg free
  2629                           
  2630                           ;main.c: 377: printf("S_counter:%d",S_counter);
  2631  001E4A  0E2A               	movlw	low STR_9
  2632  001E4C  0100               	movlb	0	; () banked
  2633  001E4E  6FC7               	movwf	printf@f& (0+255),b
  2634  001E50  0EFF               	movlw	high STR_9
  2635  001E52  6FC8               	movwf	(printf@f+1)& (0+255),b
  2636  001E54  C09C  F0C9         	movff	_S_counter,?_printf+2
  2637  001E58  C09D  F0CA         	movff	_S_counter+1,?_printf+3
  2638  001E5C  ECAA  F011         	call	_printf	;wreg free
  2639                           
  2640                           ;main.c: 378: S_counter = S_array[compartment_pos];
  2641  001E60  90D8               	bcf	status,0,c
  2642  001E62  0100               	movlb	0	; () banked
  2643  001E64  35A0               	rlcf	_compartment_pos& (0+255),w,b
  2644  001E66  6ED9               	movwf	fsr2l,c
  2645  001E68  35A1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2646  001E6A  6EDA               	movwf	fsr2h,c
  2647  001E6C  0EA4               	movlw	low _S_array
  2648  001E6E  26D9               	addwf	fsr2l,f,c
  2649  001E70  0E01               	movlw	high _S_array
  2650  001E72  22DA               	addwfc	fsr2h,f,c
  2651  001E74  CFDE F09C          	movff	postinc2,_S_counter
  2652  001E78  CFDD F09D          	movff	postdec2,_S_counter+1
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 379: if(S_counter != 0){
  2656  001E7C  519C               	movf	_S_counter& (0+255),w,b
  2657  001E7E  119D               	iorwf	(_S_counter+1)& (0+255),w,b
  2658  001E80  B4D8               	btfsc	status,2,c
  2659  001E82  D03A               	goto	l364
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 380: I2C_sendData(motorStart_2);
  2663  001E84  51F6               	movf	_motorStart_2& (0+255),w,b
  2664  001E86  ECDC  F01C         	call	_I2C_sendData
  2665                           
  2666                           ;main.c: 381: I2C_sendData(S_dispense);
  2667  001E8A  0100               	movlb	0	; () banked
  2668  001E8C  51FB               	movf	_S_dispense& (0+255),w,b
  2669  001E8E  ECDC  F01C         	call	_I2C_sendData
  2670                           
  2671                           ;main.c: 382: }
  2672                           ;main.c: 384: while(S_counter > 0){
  2673  001E92  D032               	goto	l364
  2674  001E94                     l4938:
  2675                           
  2676                           ;main.c: 387: I2C_Master_Start();
  2677  001E94  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  2678                           
  2679                           ;main.c: 388: I2C_Master_Write(0b00010001);
  2680  001E98  0E00               	movlw	0
  2681  001E9A  0100               	movlb	0	; () banked
  2682  001E9C  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2683  001E9E  0E11               	movlw	17
  2684  001EA0  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2685  001EA2  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  2686                           
  2687                           ;main.c: 389: nuts_data = I2C_Master_Read(1);
  2688  001EA6  0E01               	movlw	1
  2689  001EA8  ECB3  F01C         	call	_I2C_Master_Read
  2690  001EAC  0100               	movlb	0	; () banked
  2691  001EAE  6FAC               	movwf	_nuts_data& (0+255),b
  2692                           
  2693                           ;main.c: 390: I2C_Master_Stop();
  2694  001EB0  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  2695                           
  2696                           ;main.c: 391: if (nuts_data == '4'){
  2697  001EB4  0E34               	movlw	52
  2698  001EB6  0100               	movlb	0	; () banked
  2699  001EB8  19AC               	xorwf	_nuts_data& (0+255),w,b
  2700  001EBA  A4D8               	btfss	status,2,c
  2701  001EBC  D01D               	goto	l364
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;main.c: 392: S_counter --;
  2705  001EBE  079C               	decf	_S_counter& (0+255),f,b
  2706  001EC0  A0D8               	btfss	status,0,c
  2707  001EC2  079D               	decf	(_S_counter+1)& (0+255),f,b
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;main.c: 393: initLCD();
  2711  001EC4  EC79  F01B         	call	_initLCD	;wreg free
  2712                           
  2713                           ;main.c: 394: printf("S_count:%d", S_counter);
  2714  001EC8  0E89               	movlw	low STR_10
  2715  001ECA  0100               	movlb	0	; () banked
  2716  001ECC  6FC7               	movwf	printf@f& (0+255),b
  2717  001ECE  0EFF               	movlw	high STR_10
  2718  001ED0  6FC8               	movwf	(printf@f+1)& (0+255),b
  2719  001ED2  C09C  F0C9         	movff	_S_counter,?_printf+2
  2720  001ED6  C09D  F0CA         	movff	_S_counter+1,?_printf+3
  2721  001EDA  ECAA  F011         	call	_printf	;wreg free
  2722                           
  2723                           ;main.c: 396: if (S_counter ==0){
  2724  001EDE  0100               	movlb	0	; () banked
  2725  001EE0  519C               	movf	_S_counter& (0+255),w,b
  2726  001EE2  119D               	iorwf	(_S_counter+1)& (0+255),w,b
  2727  001EE4  A4D8               	btfss	status,2,c
  2728  001EE6  D004               	goto	l363
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;main.c: 397: I2C_sendData(motorStop_2);
  2732  001EE8  51F5               	movf	_motorStop_2& (0+255),w,b
  2733  001EEA  ECDC  F01C         	call	_I2C_sendData
  2734                           
  2735                           ;main.c: 398: }
  2736  001EEE  D004               	goto	l364
  2737  001EF0                     l363:
  2738                           
  2739                           ;main.c: 399: else{
  2740                           ;main.c: 400: I2C_sendData(S_dispense);
  2741  001EF0  0100               	movlb	0	; () banked
  2742  001EF2  51FB               	movf	_S_dispense& (0+255),w,b
  2743  001EF4  ECDC  F01C         	call	_I2C_sendData
  2744  001EF8                     l364:
  2745  001EF8  0100               	movlb	0	; () banked
  2746  001EFA  BF9D               	btfsc	(_S_counter+1)& (0+255),7,b
  2747  001EFC  D005               	goto	u4100
  2748  001EFE  519D               	movf	(_S_counter+1)& (0+255),w,b
  2749  001F00  E1C9               	bnz	l4938
  2750  001F02  059C               	decf	_S_counter& (0+255),w,b
  2751  001F04  B0D8               	btfsc	status,0,c
  2752  001F06  D7C6               	goto	l361
  2753  001F08                     u4100:
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;main.c: 401: }
  2757                           ;main.c: 402: }
  2758                           ;main.c: 403: }
  2759                           ;main.c: 407: initLCD();
  2760                           
  2761                           ; BSR set to: 0
  2762  001F08  EC79  F01B         	call	_initLCD	;wreg free
  2763                           
  2764                           ;main.c: 409: printf("spacers dispensed:%d",S_array[compartment_pos]);
  2765  001F0C  0E02               	movlw	low STR_11
  2766  001F0E  0100               	movlb	0	; () banked
  2767  001F10  6FC7               	movwf	printf@f& (0+255),b
  2768  001F12  0EFE               	movlw	high STR_11
  2769  001F14  6FC8               	movwf	(printf@f+1)& (0+255),b
  2770  001F16  90D8               	bcf	status,0,c
  2771  001F18  35A0               	rlcf	_compartment_pos& (0+255),w,b
  2772  001F1A  6ED9               	movwf	fsr2l,c
  2773  001F1C  35A1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2774  001F1E  6EDA               	movwf	fsr2h,c
  2775  001F20  0EA4               	movlw	low _S_array
  2776  001F22  26D9               	addwf	fsr2l,f,c
  2777  001F24  0E01               	movlw	high _S_array
  2778  001F26  22DA               	addwfc	fsr2h,f,c
  2779  001F28  CFDE F0C9          	movff	postinc2,?_printf+2
  2780  001F2C  CFDD F0CA          	movff	postdec2,?_printf+3
  2781  001F30  ECAA  F011         	call	_printf	;wreg free
  2782                           
  2783                           ;main.c: 410: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2784  001F34  0E33               	movlw	51
  2785  001F36  0100               	movlb	0	; () banked
  2786  001F38  6FDE               	movwf	(??_main+1)& (0+255),b
  2787  001F3A  0EBB               	movlw	187
  2788  001F3C  6FDD               	movwf	??_main& (0+255),b
  2789  001F3E  0EDF               	movlw	223
  2790  001F40                     u4867:
  2791  001F40  2EE8               	decfsz	wreg,f,c
  2792  001F42  D7FE               	bra	u4867
  2793  001F44  2FDD               	decfsz	??_main& (0+255),f,b
  2794  001F46  D7FC               	bra	u4867
  2795  001F48  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2796  001F4A  D7FA               	bra	u4867
  2797  001F4C  D000               	nop2	
  2798                           
  2799                           ;main.c: 411: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2800  001F4E  0E80               	movlw	128
  2801  001F50  EC52  F01D         	call	_lcdInst
  2802  001F54  0E41               	movlw	65
  2803  001F56  0100               	movlb	0	; () banked
  2804  001F58  6FDD               	movwf	??_main& (0+255),b
  2805  001F5A  0EEE               	movlw	238
  2806  001F5C                     u4877:
  2807  001F5C  2EE8               	decfsz	wreg,f,c
  2808  001F5E  D7FE               	bra	u4877
  2809  001F60  2FDD               	decfsz	??_main& (0+255),f,b
  2810  001F62  D7FC               	bra	u4877
  2811  001F64  F000               	nop	
  2812                           
  2813                           ;main.c: 412: S_counter = 0;
  2814  001F66  0E00               	movlw	0
  2815  001F68  0100               	movlb	0	; () banked
  2816  001F6A  6F9D               	movwf	(_S_counter+1)& (0+255),b
  2817  001F6C  0E00               	movlw	0
  2818  001F6E  6F9C               	movwf	_S_counter& (0+255),b
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 422: initLCD();
  2822  001F70  EC79  F01B         	call	_initLCD	;wreg free
  2823                           
  2824                           ;main.c: 423: printf("%d",W_counter);
  2825  001F74  0E28               	movlw	low (STR_14+17)
  2826  001F76  0100               	movlb	0	; () banked
  2827  001F78  6FC7               	movwf	printf@f& (0+255),b
  2828  001F7A  0EFE               	movlw	high (STR_14+17)
  2829  001F7C  6FC8               	movwf	(printf@f+1)& (0+255),b
  2830  001F7E  C098  F0C9         	movff	_W_counter,?_printf+2
  2831  001F82  C099  F0CA         	movff	_W_counter+1,?_printf+3
  2832  001F86  ECAA  F011         	call	_printf	;wreg free
  2833                           
  2834                           ;main.c: 424: _delay((unsigned long)((50)*(40000000/4000.0)));
  2835  001F8A  0E03               	movlw	3
  2836  001F8C  0100               	movlb	0	; () banked
  2837  001F8E  6FDE               	movwf	(??_main+1)& (0+255),b
  2838  001F90  0E8A               	movlw	138
  2839  001F92  6FDD               	movwf	??_main& (0+255),b
  2840  001F94  0E55               	movlw	85
  2841  001F96                     u4887:
  2842  001F96  2EE8               	decfsz	wreg,f,c
  2843  001F98  D7FE               	bra	u4887
  2844  001F9A  2FDD               	decfsz	??_main& (0+255),f,b
  2845  001F9C  D7FC               	bra	u4887
  2846  001F9E  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2847  001FA0  D7FA               	bra	u4887
  2848  001FA2  D000               	nop2	
  2849                           
  2850                           ;main.c: 425: I2C_sendData(motorStart_3);
  2851  001FA4  0100               	movlb	0	; () banked
  2852  001FA6  51F4               	movf	_motorStart_3& (0+255),w,b
  2853  001FA8  ECDC  F01C         	call	_I2C_sendData
  2854  001FAC                     l4976:
  2855                           
  2856                           ;main.c: 429: if (W_counter == W_array[compartment_pos]){
  2857  001FAC  90D8               	bcf	status,0,c
  2858  001FAE  0100               	movlb	0	; () banked
  2859  001FB0  35A0               	rlcf	_compartment_pos& (0+255),w,b
  2860  001FB2  6ED9               	movwf	fsr2l,c
  2861  001FB4  35A1               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2862  001FB6  6EDA               	movwf	fsr2h,c
  2863  001FB8  0E84               	movlw	low _W_array
  2864  001FBA  26D9               	addwf	fsr2l,f,c
  2865  001FBC  0E01               	movlw	high _W_array
  2866  001FBE  22DA               	addwfc	fsr2h,f,c
  2867  001FC0  5198               	movf	_W_counter& (0+255),w,b
  2868  001FC2  18DE               	xorwf	postinc2,w,c
  2869  001FC4  E108               	bnz	l4980
  2870  001FC6  5199               	movf	(_W_counter+1)& (0+255),w,b
  2871  001FC8  18DE               	xorwf	postinc2,w,c
  2872  001FCA  A4D8               	btfss	status,2,c
  2873  001FCC  D004               	goto	l367
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 430: I2C_sendData(motorStop_3);
  2877  001FCE  51F3               	movf	_motorStop_3& (0+255),w,b
  2878  001FD0  ECDC  F01C         	call	_I2C_sendData
  2879                           
  2880                           ;main.c: 431: break;
  2881  001FD4  D027               	goto	l368
  2882  001FD6                     l367:
  2883  001FD6                     l4980:
  2884                           
  2885                           ;main.c: 432: }
  2886                           ;main.c: 433: if (readADC(3)<=250 ){
  2887  001FD6  0E03               	movlw	3
  2888  001FD8  EC96  F01C         	call	_readADC
  2889  001FDC  0100               	movlb	0	; () banked
  2890  001FDE  51BA               	movf	(?_readADC+1)& (0+255),w,b
  2891  001FE0  E1E5               	bnz	l4976
  2892  001FE2  0EFB               	movlw	251
  2893  001FE4  5DB9               	subwf	?_readADC& (0+255),w,b
  2894  001FE6  B0D8               	btfsc	status,0,c
  2895  001FE8  D7E1               	goto	l366
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;main.c: 435: W_counter ++;
  2899  001FEA  4B98               	infsnz	_W_counter& (0+255),f,b
  2900  001FEC  2B99               	incf	(_W_counter+1)& (0+255),f,b
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;main.c: 436: initLCD();
  2904  001FEE  EC79  F01B         	call	_initLCD	;wreg free
  2905                           
  2906                           ;main.c: 437: printf("%d", W_counter);
  2907  001FF2  0E28               	movlw	low (STR_14+17)
  2908  001FF4  0100               	movlb	0	; () banked
  2909  001FF6  6FC7               	movwf	printf@f& (0+255),b
  2910  001FF8  0EFE               	movlw	high (STR_14+17)
  2911  001FFA  6FC8               	movwf	(printf@f+1)& (0+255),b
  2912  001FFC  C098  F0C9         	movff	_W_counter,?_printf+2
  2913  002000  C099  F0CA         	movff	_W_counter+1,?_printf+3
  2914  002004  ECAA  F011         	call	_printf	;wreg free
  2915                           
  2916                           ;main.c: 438: _delay((unsigned long)((50)*(40000000/4000.0)));
  2917  002008  0E03               	movlw	3
  2918  00200A  0100               	movlb	0	; () banked
  2919  00200C  6FDE               	movwf	(??_main+1)& (0+255),b
  2920  00200E  0E8A               	movlw	138
  2921  002010  6FDD               	movwf	??_main& (0+255),b
  2922  002012  0E55               	movlw	85
  2923  002014                     u4897:
  2924  002014  2EE8               	decfsz	wreg,f,c
  2925  002016  D7FE               	bra	u4897
  2926  002018  2FDD               	decfsz	??_main& (0+255),f,b
  2927  00201A  D7FC               	bra	u4897
  2928  00201C  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2929  00201E  D7FA               	bra	u4897
  2930  002020  D000               	nop2	
  2931  002022  D7C4               	goto	l366
  2932  002024                     l368:
  2933                           
  2934                           ;main.c: 439: }
  2935                           ;main.c: 441: }
  2936                           ;main.c: 443: initLCD();
  2937  002024  EC79  F01B         	call	_initLCD	;wreg free
  2938                           
  2939                           ;main.c: 445: printf("Washer dispensed:%d",W_counter);
  2940  002028  0E17               	movlw	low STR_14
  2941  00202A  0100               	movlb	0	; () banked
  2942  00202C  6FC7               	movwf	printf@f& (0+255),b
  2943  00202E  0EFE               	movlw	high STR_14
  2944  002030  6FC8               	movwf	(printf@f+1)& (0+255),b
  2945  002032  C098  F0C9         	movff	_W_counter,?_printf+2
  2946  002036  C099  F0CA         	movff	_W_counter+1,?_printf+3
  2947  00203A  ECAA  F011         	call	_printf	;wreg free
  2948                           
  2949                           ;main.c: 446: _delay((unsigned long)((200)*(40000000/4000.0)));
  2950  00203E  0E0B               	movlw	11
  2951  002040  0100               	movlb	0	; () banked
  2952  002042  6FDE               	movwf	(??_main+1)& (0+255),b
  2953  002044  0E26               	movlw	38
  2954  002046  6FDD               	movwf	??_main& (0+255),b
  2955  002048  0E5D               	movlw	93
  2956  00204A                     u4907:
  2957  00204A  2EE8               	decfsz	wreg,f,c
  2958  00204C  D7FE               	bra	u4907
  2959  00204E  2FDD               	decfsz	??_main& (0+255),f,b
  2960  002050  D7FC               	bra	u4907
  2961  002052  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  2962  002054  D7FA               	bra	u4907
  2963  002056  D000               	nop2	
  2964                           
  2965                           ;main.c: 447: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2966  002058  0E80               	movlw	128
  2967  00205A  EC52  F01D         	call	_lcdInst
  2968  00205E  0E41               	movlw	65
  2969  002060  0100               	movlb	0	; () banked
  2970  002062  6FDD               	movwf	??_main& (0+255),b
  2971  002064  0EEE               	movlw	238
  2972  002066                     u4917:
  2973  002066  2EE8               	decfsz	wreg,f,c
  2974  002068  D7FE               	bra	u4917
  2975  00206A  2FDD               	decfsz	??_main& (0+255),f,b
  2976  00206C  D7FC               	bra	u4917
  2977  00206E  F000               	nop	
  2978                           
  2979                           ;main.c: 448: W_counter = 0;
  2980  002070  0E00               	movlw	0
  2981  002072  0100               	movlb	0	; () banked
  2982  002074  6F99               	movwf	(_W_counter+1)& (0+255),b
  2983  002076  0E00               	movlw	0
  2984  002078  6F98               	movwf	_W_counter& (0+255),b
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;main.c: 453: B_counter = 0;
  2988  00207A  0E00               	movlw	0
  2989  00207C  6F9F               	movwf	(_B_counter+1)& (0+255),b
  2990  00207E  0E00               	movlw	0
  2991  002080  6F9E               	movwf	_B_counter& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 454: N_counter = 0;
  2995  002082  0E00               	movlw	0
  2996  002084  6F9B               	movwf	(_N_counter+1)& (0+255),b
  2997  002086  0E00               	movlw	0
  2998  002088  6F9A               	movwf	_N_counter& (0+255),b
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;main.c: 455: S_counter = 0;
  3002  00208A  0E00               	movlw	0
  3003  00208C  6F9D               	movwf	(_S_counter+1)& (0+255),b
  3004  00208E  0E00               	movlw	0
  3005  002090  6F9C               	movwf	_S_counter& (0+255),b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;main.c: 456: W_counter = 0;
  3009  002092  0E00               	movlw	0
  3010  002094  6F99               	movwf	(_W_counter+1)& (0+255),b
  3011  002096  0E00               	movlw	0
  3012  002098  6F98               	movwf	_W_counter& (0+255),b
  3013  00209A                     l344:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;main.c: 458: }
  3017                           ;main.c: 462: printf("done C%d",compartment_pos);
  3018                           
  3019                           ; BSR set to: 0
  3020  00209A  0EB0               	movlw	low STR_15
  3021  00209C  6FC7               	movwf	printf@f& (0+255),b
  3022  00209E  0EFF               	movlw	high STR_15
  3023  0020A0  6FC8               	movwf	(printf@f+1)& (0+255),b
  3024  0020A2  C0A0  F0C9         	movff	_compartment_pos,?_printf+2
  3025  0020A6  C0A1  F0CA         	movff	_compartment_pos+1,?_printf+3
  3026  0020AA  ECAA  F011         	call	_printf	;wreg free
  3027                           
  3028                           ;main.c: 463: I2C_sendData(rotate_1compartment);
  3029  0020AE  0100               	movlb	0	; () banked
  3030  0020B0  51FE               	movf	_rotate_1compartment& (0+255),w,b
  3031  0020B2  ECDC  F01C         	call	_I2C_sendData
  3032                           
  3033                           ;main.c: 464: compartment_pos ++;
  3034  0020B6  0100               	movlb	0	; () banked
  3035  0020B8  4BA0               	infsnz	_compartment_pos& (0+255),f,b
  3036  0020BA  2BA1               	incf	(_compartment_pos+1)& (0+255),f,b
  3037                           
  3038                           ; BSR set to: 0
  3039  0020BC  4BAA               	infsnz	_i& (0+255),f,b
  3040  0020BE  2BAB               	incf	(_i+1)& (0+255),f,b
  3041                           
  3042                           ; BSR set to: 0
  3043  0020C0  51AB               	movf	(_i+1)& (0+255),w,b
  3044  0020C2  E101               	bnz	l5020
  3045  0020C4  D55B               	goto	L1
  3046  0020C6                     u4130:
  3047  0020C6                     l5020:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;main.c: 465: }
  3051                           ;main.c: 473: I2C_sendData(servo_ramp);
  3052  0020C6  51F2               	movf	_servo_ramp& (0+255),w,b
  3053  0020C8  ECDC  F01C         	call	_I2C_sendData
  3054                           
  3055                           ;main.c: 487: I2C_sendData(close_handle);
  3056  0020CC  0100               	movlb	0	; () banked
  3057  0020CE  51F1               	movf	_close_handle& (0+255),w,b
  3058  0020D0  ECDC  F01C         	call	_I2C_sendData
  3059                           
  3060                           ;main.c: 572: get_RTC_final();
  3061  0020D4  ECB6  F017         	call	_get_RTC_final	;wreg free
  3062                           
  3063                           ;main.c: 574: printf("Bolt_remain:%d",B_remain);
  3064  0020D8  0EC6               	movlw	low STR_16
  3065  0020DA  0100               	movlb	0	; () banked
  3066  0020DC  6FC7               	movwf	printf@f& (0+255),b
  3067  0020DE  0EFE               	movlw	high STR_16
  3068  0020E0  6FC8               	movwf	(printf@f+1)& (0+255),b
  3069  0020E2  C096  F0C9         	movff	_B_remain,?_printf+2
  3070  0020E6  C097  F0CA         	movff	_B_remain+1,?_printf+3
  3071  0020EA  ECAA  F011         	call	_printf	;wreg free
  3072                           
  3073                           ;main.c: 575: _delay((unsigned long)((300)*(40000000/4000.0)));
  3074  0020EE  0E10               	movlw	16
  3075  0020F0  0100               	movlb	0	; () banked
  3076  0020F2  6FDE               	movwf	(??_main+1)& (0+255),b
  3077  0020F4  0E39               	movlw	57
  3078  0020F6  6FDD               	movwf	??_main& (0+255),b
  3079  0020F8  0E0D               	movlw	13
  3080  0020FA                     u4927:
  3081  0020FA  2EE8               	decfsz	wreg,f,c
  3082  0020FC  D7FE               	bra	u4927
  3083  0020FE  2FDD               	decfsz	??_main& (0+255),f,b
  3084  002100  D7FC               	bra	u4927
  3085  002102  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  3086  002104  D7FA               	bra	u4927
  3087  002106  D000               	nop2	
  3088                           
  3089                           ;main.c: 576: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3090  002108  0E01               	movlw	1
  3091  00210A  EC52  F01D         	call	_lcdInst
  3092  00210E  0EC3               	movlw	195
  3093  002110  0100               	movlb	0	; () banked
  3094  002112  6FDD               	movwf	??_main& (0+255),b
  3095  002114  0ECD               	movlw	205
  3096  002116                     u4937:
  3097  002116  2EE8               	decfsz	wreg,f,c
  3098  002118  D7FE               	bra	u4937
  3099  00211A  2FDD               	decfsz	??_main& (0+255),f,b
  3100  00211C  D7FC               	bra	u4937
  3101                           
  3102                           ;main.c: 577: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3103  00211E  0E80               	movlw	128
  3104  002120  EC52  F01D         	call	_lcdInst
  3105  002124  0E41               	movlw	65
  3106  002126  0100               	movlb	0	; () banked
  3107  002128  6FDD               	movwf	??_main& (0+255),b
  3108  00212A  0EEE               	movlw	238
  3109  00212C                     u4947:
  3110  00212C  2EE8               	decfsz	wreg,f,c
  3111  00212E  D7FE               	bra	u4947
  3112  002130  2FDD               	decfsz	??_main& (0+255),f,b
  3113  002132  D7FC               	bra	u4947
  3114  002134  F000               	nop	
  3115                           
  3116                           ;main.c: 578: printf("Nut_remain:%d",N_remain);
  3117  002136  0E02               	movlw	low STR_17
  3118  002138  0100               	movlb	0	; () banked
  3119  00213A  6FC7               	movwf	printf@f& (0+255),b
  3120  00213C  0EFF               	movlw	high STR_17
  3121  00213E  6FC8               	movwf	(printf@f+1)& (0+255),b
  3122  002140  C094  F0C9         	movff	_N_remain,?_printf+2
  3123  002144  C095  F0CA         	movff	_N_remain+1,?_printf+3
  3124  002148  ECAA  F011         	call	_printf	;wreg free
  3125                           
  3126                           ;main.c: 579: _delay((unsigned long)((300)*(40000000/4000.0)));
  3127  00214C  0E10               	movlw	16
  3128  00214E  0100               	movlb	0	; () banked
  3129  002150  6FDE               	movwf	(??_main+1)& (0+255),b
  3130  002152  0E39               	movlw	57
  3131  002154  6FDD               	movwf	??_main& (0+255),b
  3132  002156  0E0D               	movlw	13
  3133  002158                     u4957:
  3134  002158  2EE8               	decfsz	wreg,f,c
  3135  00215A  D7FE               	bra	u4957
  3136  00215C  2FDD               	decfsz	??_main& (0+255),f,b
  3137  00215E  D7FC               	bra	u4957
  3138  002160  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  3139  002162  D7FA               	bra	u4957
  3140  002164  D000               	nop2	
  3141                           
  3142                           ;main.c: 580: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3143  002166  0E01               	movlw	1
  3144  002168  EC52  F01D         	call	_lcdInst
  3145  00216C  0EC3               	movlw	195
  3146  00216E  0100               	movlb	0	; () banked
  3147  002170  6FDD               	movwf	??_main& (0+255),b
  3148  002172  0ECD               	movlw	205
  3149  002174                     u4967:
  3150  002174  2EE8               	decfsz	wreg,f,c
  3151  002176  D7FE               	bra	u4967
  3152  002178  2FDD               	decfsz	??_main& (0+255),f,b
  3153  00217A  D7FC               	bra	u4967
  3154                           
  3155                           ;main.c: 581: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3156  00217C  0E80               	movlw	128
  3157  00217E  EC52  F01D         	call	_lcdInst
  3158  002182  0E41               	movlw	65
  3159  002184  0100               	movlb	0	; () banked
  3160  002186  6FDD               	movwf	??_main& (0+255),b
  3161  002188  0EEE               	movlw	238
  3162  00218A                     u4977:
  3163  00218A  2EE8               	decfsz	wreg,f,c
  3164  00218C  D7FE               	bra	u4977
  3165  00218E  2FDD               	decfsz	??_main& (0+255),f,b
  3166  002190  D7FC               	bra	u4977
  3167  002192  F000               	nop	
  3168                           
  3169                           ;main.c: 582: printf("Spacer_remain:%d",S_remain);
  3170  002194  0E74               	movlw	low STR_18
  3171  002196  0100               	movlb	0	; () banked
  3172  002198  6FC7               	movwf	printf@f& (0+255),b
  3173  00219A  0EFE               	movlw	high STR_18
  3174  00219C  6FC8               	movwf	(printf@f+1)& (0+255),b
  3175  00219E  C092  F0C9         	movff	_S_remain,?_printf+2
  3176  0021A2  C093  F0CA         	movff	_S_remain+1,?_printf+3
  3177  0021A6  ECAA  F011         	call	_printf	;wreg free
  3178                           
  3179                           ;main.c: 583: _delay((unsigned long)((300)*(40000000/4000.0)));
  3180  0021AA  0E10               	movlw	16
  3181  0021AC  0100               	movlb	0	; () banked
  3182  0021AE  6FDE               	movwf	(??_main+1)& (0+255),b
  3183  0021B0  0E39               	movlw	57
  3184  0021B2  6FDD               	movwf	??_main& (0+255),b
  3185  0021B4  0E0D               	movlw	13
  3186  0021B6                     u4987:
  3187  0021B6  2EE8               	decfsz	wreg,f,c
  3188  0021B8  D7FE               	bra	u4987
  3189  0021BA  2FDD               	decfsz	??_main& (0+255),f,b
  3190  0021BC  D7FC               	bra	u4987
  3191  0021BE  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  3192  0021C0  D7FA               	bra	u4987
  3193  0021C2  D000               	nop2	
  3194                           
  3195                           ;main.c: 584: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3196  0021C4  0E01               	movlw	1
  3197  0021C6  EC52  F01D         	call	_lcdInst
  3198  0021CA  0EC3               	movlw	195
  3199  0021CC  0100               	movlb	0	; () banked
  3200  0021CE  6FDD               	movwf	??_main& (0+255),b
  3201  0021D0  0ECD               	movlw	205
  3202  0021D2                     u4997:
  3203  0021D2  2EE8               	decfsz	wreg,f,c
  3204  0021D4  D7FE               	bra	u4997
  3205  0021D6  2FDD               	decfsz	??_main& (0+255),f,b
  3206  0021D8  D7FC               	bra	u4997
  3207                           
  3208                           ;main.c: 585: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3209  0021DA  0E80               	movlw	128
  3210  0021DC  EC52  F01D         	call	_lcdInst
  3211  0021E0  0E41               	movlw	65
  3212  0021E2  0100               	movlb	0	; () banked
  3213  0021E4  6FDD               	movwf	??_main& (0+255),b
  3214  0021E6  0EEE               	movlw	238
  3215  0021E8                     u5007:
  3216  0021E8  2EE8               	decfsz	wreg,f,c
  3217  0021EA  D7FE               	bra	u5007
  3218  0021EC  2FDD               	decfsz	??_main& (0+255),f,b
  3219  0021EE  D7FC               	bra	u5007
  3220  0021F0  F000               	nop	
  3221                           
  3222                           ;main.c: 586: printf("Washer_remain:%d",W_remain);
  3223  0021F2  0E85               	movlw	low STR_19
  3224  0021F4  0100               	movlb	0	; () banked
  3225  0021F6  6FC7               	movwf	printf@f& (0+255),b
  3226  0021F8  0EFE               	movlw	high STR_19
  3227  0021FA  6FC8               	movwf	(printf@f+1)& (0+255),b
  3228  0021FC  C090  F0C9         	movff	_W_remain,?_printf+2
  3229  002200  C091  F0CA         	movff	_W_remain+1,?_printf+3
  3230  002204  ECAA  F011         	call	_printf	;wreg free
  3231                           
  3232                           ;main.c: 587: _delay((unsigned long)((300)*(40000000/4000.0)));
  3233  002208  0E10               	movlw	16
  3234  00220A  0100               	movlb	0	; () banked
  3235  00220C  6FDE               	movwf	(??_main+1)& (0+255),b
  3236  00220E  0E39               	movlw	57
  3237  002210  6FDD               	movwf	??_main& (0+255),b
  3238  002212  0E0D               	movlw	13
  3239  002214                     u5017:
  3240  002214  2EE8               	decfsz	wreg,f,c
  3241  002216  D7FE               	bra	u5017
  3242  002218  2FDD               	decfsz	??_main& (0+255),f,b
  3243  00221A  D7FC               	bra	u5017
  3244  00221C  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  3245  00221E  D7FA               	bra	u5017
  3246  002220  D000               	nop2	
  3247                           
  3248                           ;main.c: 588: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3249  002222  0E01               	movlw	1
  3250  002224  EC52  F01D         	call	_lcdInst
  3251  002228  0EC3               	movlw	195
  3252  00222A  0100               	movlb	0	; () banked
  3253  00222C  6FDD               	movwf	??_main& (0+255),b
  3254  00222E  0ECD               	movlw	205
  3255  002230                     u5027:
  3256  002230  2EE8               	decfsz	wreg,f,c
  3257  002232  D7FE               	bra	u5027
  3258  002234  2FDD               	decfsz	??_main& (0+255),f,b
  3259  002236  D7FC               	bra	u5027
  3260                           
  3261                           ;main.c: 589: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3262  002238  0E80               	movlw	128
  3263  00223A  EC52  F01D         	call	_lcdInst
  3264  00223E  0E41               	movlw	65
  3265  002240  0100               	movlb	0	; () banked
  3266  002242  6FDD               	movwf	??_main& (0+255),b
  3267  002244  0EEE               	movlw	238
  3268  002246                     u5037:
  3269  002246  2EE8               	decfsz	wreg,f,c
  3270  002248  D7FE               	bra	u5037
  3271  00224A  2FDD               	decfsz	??_main& (0+255),f,b
  3272  00224C  D7FC               	bra	u5037
  3273  00224E  F000               	nop	
  3274                           
  3275                           ;main.c: 590: printf("you're done");
  3276  002250  0E50               	movlw	low STR_20
  3277  002252  0100               	movlb	0	; () banked
  3278  002254  6FC7               	movwf	printf@f& (0+255),b
  3279  002256  0EFF               	movlw	high STR_20
  3280  002258  6FC8               	movwf	(printf@f+1)& (0+255),b
  3281  00225A  ECAA  F011         	call	_printf	;wreg free
  3282                           
  3283                           ;main.c: 591: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3284  00225E  0E33               	movlw	51
  3285  002260  0100               	movlb	0	; () banked
  3286  002262  6FDE               	movwf	(??_main+1)& (0+255),b
  3287  002264  0EBB               	movlw	187
  3288  002266  6FDD               	movwf	??_main& (0+255),b
  3289  002268  0EDF               	movlw	223
  3290  00226A                     u5047:
  3291  00226A  2EE8               	decfsz	wreg,f,c
  3292  00226C  D7FE               	bra	u5047
  3293  00226E  2FDD               	decfsz	??_main& (0+255),f,b
  3294  002270  D7FC               	bra	u5047
  3295  002272  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  3296  002274  D7FA               	bra	u5047
  3297  002276  D000               	nop2	
  3298                           
  3299                           ;main.c: 592: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3300  002278  0E80               	movlw	128
  3301  00227A  EC52  F01D         	call	_lcdInst
  3302  00227E  0E41               	movlw	65
  3303  002280  0100               	movlb	0	; () banked
  3304  002282  6FDD               	movwf	??_main& (0+255),b
  3305  002284  0EEE               	movlw	238
  3306  002286                     u5057:
  3307  002286  2EE8               	decfsz	wreg,f,c
  3308  002288  D7FE               	bra	u5057
  3309  00228A  2FDD               	decfsz	??_main& (0+255),f,b
  3310  00228C  D7FC               	bra	u5057
  3311  00228E  F000               	nop	
  3312  002290                     
  3313                           ;main.c: 616: (INTCONbits.GIE = 1);
  3314  002290  8EF2               	bsf	intcon,7,c	;volatile
  3315                           
  3316                           ;main.c: 617: operation = 1;
  3317  002292  0E00               	movlw	0
  3318  002294  6E72               	movwf	_operation+1,c
  3319  002296  0E01               	movlw	1
  3320  002298  6E71               	movwf	_operation,c
  3321                           
  3322                           ;main.c: 618: printf("1: Date and Time");
  3323  00229A  0E96               	movlw	low STR_21
  3324  00229C  0100               	movlb	0	; () banked
  3325  00229E  6FC7               	movwf	printf@f& (0+255),b
  3326  0022A0  0EFE               	movlw	high STR_21
  3327  0022A2  6FC8               	movwf	(printf@f+1)& (0+255),b
  3328  0022A4  ECAA  F011         	call	_printf	;wreg free
  3329                           
  3330                           ;main.c: 619: lcdInst(0xC0);;
  3331  0022A8  0EC0               	movlw	192
  3332  0022AA  EC52  F01D         	call	_lcdInst
  3333                           
  3334                           ;main.c: 620: printf(" 2: Operation Time");
  3335  0022AE  0E3E               	movlw	low STR_22
  3336  0022B0  0100               	movlb	0	; () banked
  3337  0022B2  6FC7               	movwf	printf@f& (0+255),b
  3338  0022B4  0EFE               	movlw	high STR_22
  3339  0022B6  6FC8               	movwf	(printf@f+1)& (0+255),b
  3340  0022B8  ECAA  F011         	call	_printf	;wreg free
  3341                           
  3342                           ;main.c: 621: _delay((unsigned long)((600)*(40000000/4000.0)));
  3343  0022BC  0E1F               	movlw	31
  3344  0022BE  0100               	movlb	0	; () banked
  3345  0022C0  6FDE               	movwf	(??_main+1)& (0+255),b
  3346  0022C2  0E71               	movlw	113
  3347  0022C4  6FDD               	movwf	??_main& (0+255),b
  3348  0022C6  0E1E               	movlw	30
  3349  0022C8                     u5067:
  3350  0022C8  2EE8               	decfsz	wreg,f,c
  3351  0022CA  D7FE               	bra	u5067
  3352  0022CC  2FDD               	decfsz	??_main& (0+255),f,b
  3353  0022CE  D7FC               	bra	u5067
  3354  0022D0  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  3355  0022D2  D7FA               	bra	u5067
  3356  0022D4  F000               	nop	
  3357                           
  3358                           ;main.c: 622: initLCD();
  3359  0022D6  EC79  F01B         	call	_initLCD	;wreg free
  3360                           
  3361                           ;main.c: 623: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3362  0022DA  0E80               	movlw	128
  3363  0022DC  EC52  F01D         	call	_lcdInst
  3364  0022E0  0E41               	movlw	65
  3365  0022E2  0100               	movlb	0	; () banked
  3366  0022E4  6FDD               	movwf	??_main& (0+255),b
  3367  0022E6  0EEE               	movlw	238
  3368  0022E8                     u5077:
  3369  0022E8  2EE8               	decfsz	wreg,f,c
  3370  0022EA  D7FE               	bra	u5077
  3371  0022EC  2FDD               	decfsz	??_main& (0+255),f,b
  3372  0022EE  D7FC               	bra	u5077
  3373  0022F0  F000               	nop	
  3374                           
  3375                           ;main.c: 624: printf("3:summary");
  3376  0022F2  0E94               	movlw	low STR_23
  3377  0022F4  0100               	movlb	0	; () banked
  3378  0022F6  6FC7               	movwf	printf@f& (0+255),b
  3379  0022F8  0EFF               	movlw	high STR_23
  3380  0022FA  6FC8               	movwf	(printf@f+1)& (0+255),b
  3381  0022FC  ECAA  F011         	call	_printf	;wreg free
  3382                           
  3383                           ;main.c: 625: lcdInst(0xC0);;
  3384  002300  0EC0               	movlw	192
  3385  002302  EC52  F01D         	call	_lcdInst
  3386                           
  3387                           ;main.c: 627: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3388  002306  0E33               	movlw	51
  3389  002308  0100               	movlb	0	; () banked
  3390  00230A  6FDE               	movwf	(??_main+1)& (0+255),b
  3391  00230C  0EBB               	movlw	187
  3392  00230E  6FDD               	movwf	??_main& (0+255),b
  3393  002310  0EDF               	movlw	223
  3394  002312                     u5087:
  3395  002312  2EE8               	decfsz	wreg,f,c
  3396  002314  D7FE               	bra	u5087
  3397  002316  2FDD               	decfsz	??_main& (0+255),f,b
  3398  002318  D7FC               	bra	u5087
  3399  00231A  2FDE               	decfsz	(??_main+1)& (0+255),f,b
  3400  00231C  D7FA               	bra	u5087
  3401  00231E  D000               	nop2	
  3402                           
  3403                           ;main.c: 628: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3404  002320  0E80               	movlw	128
  3405  002322  EC52  F01D         	call	_lcdInst
  3406  002326  0E41               	movlw	65
  3407  002328  0100               	movlb	0	; () banked
  3408  00232A  6FDD               	movwf	??_main& (0+255),b
  3409  00232C  0EEE               	movlw	238
  3410  00232E                     u5097:
  3411  00232E  2EE8               	decfsz	wreg,f,c
  3412  002330  D7FE               	bra	u5097
  3413  002332  2FDD               	decfsz	??_main& (0+255),f,b
  3414  002334  D7FC               	bra	u5097
  3415  002336  F000               	nop	
  3416                           
  3417                           ;main.c: 630: if(operation_done == 1){
  3418  002338  0100               	movlb	0	; () banked
  3419  00233A  05A6               	decf	_operation_done& (0+255),w,b
  3420  00233C  11A7               	iorwf	(_operation_done+1)& (0+255),w,b
  3421  00233E  A4D8               	btfss	status,2,c
  3422  002340  D7A7               	goto	l371
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;main.c: 632: }
  3426                           ;main.c: 633: }
  3427                           ;main.c: 634: initialize();
  3428                           
  3429                           ; BSR set to: 0
  3430                           
  3431                           ; BSR set to: 0
  3432                           
  3433                           ; BSR set to: 0
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;main.c: 631: break;
  3437  002342  EC11  F017         	call	_initialize	;wreg free
  3438                           
  3439                           ;main.c: 635: mode = 0;
  3440  002346  0E00               	movlw	0
  3441  002348  0100               	movlb	0	; () banked
  3442  00234A  6FF0               	movwf	(_mode+1)& (0+255),b
  3443  00234C  0E00               	movlw	0
  3444  00234E  6FEF               	movwf	_mode& (0+255),b
  3445                           
  3446                           ; BSR set to: 0
  3447                           
  3448                           ; BSR set to: 0
  3449  002350  EF3C  F00D         	goto	l336
  3450  002354                     __end_of_main:
  3451                           	opt stack 0
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           intcon	equ	0xFF2
  3457                           intcon3	equ	0xFF0
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           postdec1	equ	0xFE5
  3461                           fsr1l	equ	0xFE1
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _readADC *****************
  3469 ;; Defined at:
  3470 ;;		line 1116 in file "main.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  channel         1    wreg     unsigned char 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  channel         1    4[BANK0 ] unsigned char 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  2    0[BANK0 ] unsigned short 
  3477 ;; Registers used:
  3478 ;;		wreg, status,2, status,0
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3484 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;Total ram usage:        5 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    4
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;;		_count_gear
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text1
  3500  00392C                     __ptext1:
  3501                           	opt stack 0
  3502  00392C                     _readADC:
  3503                           	opt stack 26
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;incstack = 0
  3507                           ;readADC@channel stored from wreg
  3508  00392C  0100               	movlb	0	; () banked
  3509  00392E  6FBD               	movwf	readADC@channel& (0+255),b
  3510                           
  3511                           ;main.c: 1125: ADCON0 = (channel & 0x0F) << 2;
  3512  003930  C0BD  F0BB         	movff	readADC@channel,??_readADC
  3513  003934  0E0F               	movlw	15
  3514  003936  0100               	movlb	0	; () banked
  3515  003938  17BB               	andwf	??_readADC& (0+255),f,b
  3516  00393A  90D8               	bcf	status,0,c
  3517  00393C  37BB               	rlcf	??_readADC& (0+255),f,b
  3518  00393E  90D8               	bcf	status,0,c
  3519  003940  35BB               	rlcf	??_readADC& (0+255),w,b
  3520  003942  6EC2               	movwf	4034,c	;volatile
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;main.c: 1126: ADON = 1;
  3524  003944  80C2               	bsf	4034,0,c	;volatile
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;main.c: 1127: ADCON0bits.GO = 1;
  3528  003946  82C2               	bsf	4034,1,c	;volatile
  3529  003948                     
  3530                           ; BSR set to: 0
  3531  003948  B2C2               	btfsc	4034,1,c	;volatile
  3532  00394A  D7FE               	goto	l449
  3533                           
  3534                           ;main.c: 1129: return (ADRESH << 8) | ADRESL;
  3535  00394C  50C3               	movf	4035,w,c	;volatile
  3536  00394E  CFC4 F0BB          	movff	4036,??_readADC	;volatile
  3537  003952  0100               	movlb	0	; () banked
  3538  003954  6BBC               	clrf	(??_readADC+1)& (0+255),b
  3539  003956  C0BB  F0BC         	movff	??_readADC,??_readADC+1
  3540  00395A  6BBB               	clrf	??_readADC& (0+255),b
  3541  00395C  11BB               	iorwf	??_readADC& (0+255),w,b
  3542  00395E  6FB9               	movwf	?_readADC& (0+255),b
  3543  003960  51BC               	movf	(??_readADC+1)& (0+255),w,b
  3544  003962  6FBA               	movwf	(?_readADC+1)& (0+255),b
  3545  003964  0012               	return	
  3546  003966                     __end_of_readADC:
  3547                           	opt stack 0
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           intcon	equ	0xFF2
  3553                           intcon3	equ	0xFF0
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           postdec1	equ	0xFE5
  3557                           fsr1l	equ	0xFE1
  3558                           postinc2	equ	0xFDE
  3559                           postdec2	equ	0xFDD
  3560                           fsr2h	equ	0xFDA
  3561                           fsr2l	equ	0xFD9
  3562                           status	equ	0xFD8
  3563                           
  3564 ;; *************** function _printf *****************
  3565 ;; Defined at:
  3566 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  3569 ;;		 -> STR_45(3), STR_44(9), STR_43(12), STR_41(7), 
  3570 ;;		 -> STR_39(3), STR_38(11), STR_36(3), STR_35(9), 
  3571 ;;		 -> STR_30(15), STR_29(13), STR_28(16), STR_27(15), 
  3572 ;;		 -> STR_26(15), STR_25(15), STR_24(15), STR_23(10), 
  3573 ;;		 -> STR_22(19), STR_21(17), STR_20(12), STR_19(17), 
  3574 ;;		 -> STR_18(17), STR_17(14), STR_16(15), STR_15(9), 
  3575 ;;		 -> STR_14(20), STR_13(3), STR_12(3), STR_11(21), 
  3576 ;;		 -> STR_10(11), STR_9(13), STR_8(18), STR_7(11), 
  3577 ;;		 -> STR_6(13), STR_5(19), STR_4(11), STR_3(13), 
  3578 ;;		 -> STR_2(15), STR_1(12), 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  idx             1   22[BANK0 ] unsigned char 
  3581 ;;  tmpval          4    0        struct .
  3582 ;;  width           2   33[BANK0 ] int 
  3583 ;;  val             2   30[BANK0 ] unsigned int 
  3584 ;;  len             2   28[BANK0 ] unsigned int 
  3585 ;;  ap              2   26[BANK0 ] PTR void [1]
  3586 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3587 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  3588 ;;		 -> STR_66(7), number(2), current_set(5), 
  3589 ;;  c               1   35[BANK0 ] char 
  3590 ;;  flag            1   32[BANK0 ] unsigned char 
  3591 ;;  prec            1   23[BANK0 ] char 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  2   14[BANK0 ] int 
  3594 ;; Registers used:
  3595 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3601 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3605 ;;Total ram usage:       22 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    6
  3608 ;; This function calls:
  3609 ;;		___lwdiv
  3610 ;;		___lwmod
  3611 ;;		___wmul
  3612 ;;		_isdigit
  3613 ;;		_putch
  3614 ;; This function is called by:
  3615 ;;		_main
  3616 ;;		_count_gear
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text2
  3621  002354                     __ptext2:
  3622                           	opt stack 0
  3623  002354                     _printf:
  3624                           	opt stack 24
  3625                           
  3626                           ;doprnt.c: 466: va_list ap;
  3627                           ;doprnt.c: 499: signed char c;
  3628                           ;doprnt.c: 501: int width;
  3629                           ;doprnt.c: 506: signed char prec;
  3630                           ;doprnt.c: 508: unsigned char flag;
  3631                           ;doprnt.c: 523: union {
  3632                           ;doprnt.c: 524: unsigned long vd;
  3633                           ;doprnt.c: 525: double integ;
  3634                           ;doprnt.c: 526: } tmpval;
  3635                           ;doprnt.c: 528: unsigned int val;
  3636                           ;doprnt.c: 529: unsigned len;
  3637                           ;doprnt.c: 530: const char * cp;
  3638                           ;doprnt.c: 533: *ap = __va_start();
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;incstack = 0
  3642  002354  0EC9               	movlw	low (?_printf+2)
  3643  002356  0100               	movlb	0	; () banked
  3644  002358  6FD3               	movwf	printf@ap& (0+255),b
  3645  00235A  0E00               	movlw	high (?_printf+2)
  3646  00235C  6FD4               	movwf	(printf@ap+1)& (0+255),b
  3647                           
  3648                           ;doprnt.c: 536: while(c = *f++) {
  3649  00235E  D20F               	goto	u3060
  3650  002360                     
  3651                           ; BSR set to: 0
  3652                           ;doprnt.c: 538: if(c != '%')
  3653                           
  3654                           ; BSR set to: 0
  3655  002360  0E25               	movlw	37
  3656  002362  19DC               	xorwf	printf@c& (0+255),w,b
  3657  002364  B4D8               	btfsc	status,2,c
  3658  002366  D004               	goto	l800
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;doprnt.c: 540: {
  3662                           ;doprnt.c: 541: (putch(c) );
  3663  002368  51DC               	movf	printf@c& (0+255),w,b
  3664  00236A  EC46  F01D         	call	_putch
  3665                           
  3666                           ;doprnt.c: 542: continue;
  3667  00236E  D207               	goto	u3060
  3668  002370                     l800:
  3669                           
  3670                           ;doprnt.c: 543: }
  3671                           ;doprnt.c: 546: width = 0;
  3672  002370  0E00               	movlw	0
  3673  002372  0100               	movlb	0	; () banked
  3674  002374  6FDB               	movwf	(printf@width+1)& (0+255),b
  3675  002376  0E00               	movlw	0
  3676  002378  6FDA               	movwf	printf@width& (0+255),b
  3677                           
  3678                           ;doprnt.c: 548: flag = 0;
  3679  00237A  0E00               	movlw	0
  3680  00237C  6FD9               	movwf	printf@flag& (0+255),b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;doprnt.c: 551: switch(*f) {
  3684                           
  3685                           ;doprnt.c: 550: for(;;) {
  3686  00237E  D004               	goto	l802
  3687  002380                     
  3688                           ;doprnt.c: 580: flag |= 0x04;
  3689                           
  3690                           ; BSR set to: 0
  3691  002380  0100               	movlb	0	; () banked
  3692  002382  85D9               	bsf	printf@flag& (0+255),2,b
  3693                           
  3694                           ;doprnt.c: 581: f++;
  3695  002384  4BC7               	infsnz	printf@f& (0+255),f,b
  3696  002386  2BC8               	incf	(printf@f+1)& (0+255),f,b
  3697  002388                     l802:
  3698                           
  3699                           ; BSR set to: 0
  3700  002388  C0C7  FFF6         	movff	printf@f,tblptrl
  3701  00238C  C0C8  FFF7         	movff	printf@f+1,tblptrh
  3702  002390                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3703  002390  6AF8               	clrf	tblptru,c
  3704  002392                     	endif
  3705  002392                     	if	0	;tblptru may be non-zero
  3706  002392                     	endif
  3707  002392  0008               	tblrd		*
  3708  002394  50F5               	movf	tablat,w,c
  3709                           
  3710                           ; Switch size 1, requested type "space"
  3711                           ; Number of cases is 1, Range of values is 48 to 48
  3712                           ; switch strategies available:
  3713                           ; Name         Instructions Cycles
  3714                           ; simple_byte            4     3 (average)
  3715                           ;	Chosen strategy is simple_byte
  3716  002396  0A30               	xorlw	48	; case 48
  3717  002398  B4D8               	btfsc	status,2,c
  3718  00239A  D7F2               	goto	l803
  3719                           
  3720                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3721                           
  3722                           ;doprnt.c: 586: }
  3723                           
  3724                           ;doprnt.c: 585: break;
  3725  00239C  C0C7  FFF6         	movff	printf@f,tblptrl
  3726  0023A0  C0C8  FFF7         	movff	printf@f+1,tblptrh
  3727  0023A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3728  0023A4  6AF8               	clrf	tblptru,c
  3729  0023A6                     	endif
  3730  0023A6                     	if	0	;tblptru may be non-zero
  3731  0023A6                     	endif
  3732  0023A6  0008               	tblrd		*
  3733  0023A8  50F5               	movf	tablat,w,c
  3734  0023AA  EC15  F01D         	call	_isdigit
  3735  0023AE  A0D8               	btfss	status,0,c
  3736  0023B0  D0AE               	goto	l810
  3737                           
  3738                           ;doprnt.c: 598: width = 0;
  3739  0023B2  0E00               	movlw	0
  3740  0023B4  0100               	movlb	0	; () banked
  3741  0023B6  6FDB               	movwf	(printf@width+1)& (0+255),b
  3742  0023B8  0E00               	movlw	0
  3743  0023BA  6FDA               	movwf	printf@width& (0+255),b
  3744  0023BC                     
  3745                           ;doprnt.c: 600: width *= 10;
  3746                           
  3747                           ; BSR set to: 0
  3748  0023BC  C0DA  F0C1         	movff	printf@width,___wmul@multiplier
  3749  0023C0  C0DB  F0C2         	movff	printf@width+1,___wmul@multiplier+1
  3750  0023C4  0E00               	movlw	0
  3751  0023C6  0100               	movlb	0	; () banked
  3752  0023C8  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3753  0023CA  0E0A               	movlw	10
  3754  0023CC  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  3755  0023CE  ECC8  F01C         	call	___wmul	;wreg free
  3756  0023D2  C0C1  F0DA         	movff	?___wmul,printf@width
  3757  0023D6  C0C2  F0DB         	movff	?___wmul+1,printf@width+1
  3758                           
  3759                           ;doprnt.c: 601: width += *f++ - '0';
  3760  0023DA  0ED0               	movlw	208
  3761  0023DC  0100               	movlb	0	; () banked
  3762  0023DE  6FCB               	movwf	??_printf& (0+255),b
  3763  0023E0  0EFF               	movlw	255
  3764  0023E2  6FCC               	movwf	(??_printf+1)& (0+255),b
  3765  0023E4  C0C7  FFF6         	movff	printf@f,tblptrl
  3766  0023E8  C0C8  FFF7         	movff	printf@f+1,tblptrh
  3767  0023EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3768  0023EC  6AF8               	clrf	tblptru,c
  3769  0023EE                     	endif
  3770  0023EE                     	if	0	;tblptru may be non-zero
  3771  0023EE                     	endif
  3772  0023EE  0008               	tblrd		*
  3773  0023F0  50F5               	movf	tablat,w,c
  3774  0023F2  6FCD               	movwf	(??_printf+2)& (0+255),b
  3775  0023F4  6BCE               	clrf	(??_printf+3)& (0+255),b
  3776  0023F6  51CB               	movf	??_printf& (0+255),w,b
  3777  0023F8  27CD               	addwf	(??_printf+2)& (0+255),f,b
  3778  0023FA  51CC               	movf	(??_printf+1)& (0+255),w,b
  3779  0023FC  23CE               	addwfc	(??_printf+3)& (0+255),f,b
  3780  0023FE  51CD               	movf	(??_printf+2)& (0+255),w,b
  3781  002400  27DA               	addwf	printf@width& (0+255),f,b
  3782  002402  51CE               	movf	(??_printf+3)& (0+255),w,b
  3783  002404  23DB               	addwfc	(printf@width+1)& (0+255),f,b
  3784                           
  3785                           ; BSR set to: 0
  3786  002406  4BC7               	infsnz	printf@f& (0+255),f,b
  3787  002408  2BC8               	incf	(printf@f+1)& (0+255),f,b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3791  00240A  C0C7  FFF6         	movff	printf@f,tblptrl
  3792  00240E  C0C8  FFF7         	movff	printf@f+1,tblptrh
  3793  002412                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3794  002412  6AF8               	clrf	tblptru,c
  3795  002414                     	endif
  3796  002414                     	if	0	;tblptru may be non-zero
  3797  002414                     	endif
  3798  002414  0008               	tblrd		*
  3799  002416  50F5               	movf	tablat,w,c
  3800  002418  EC15  F01D         	call	_isdigit
  3801  00241C  A0D8               	btfss	status,0,c
  3802  00241E  D077               	goto	l810
  3803  002420  D7CD               	goto	l808
  3804  002422                     
  3805                           ;doprnt.c: 721: flag |= 0x80;
  3806  002422  0100               	movlb	0	; () banked
  3807  002424  8FD9               	bsf	printf@flag& (0+255),7,b
  3808                           
  3809                           ;doprnt.c: 723: break;
  3810  002426  D08F               	goto	l815
  3811  002428                     
  3812                           ; BSR set to: 0
  3813                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3814                           
  3815                           ; BSR set to: 0
  3816  002428  C0D3  FFD9         	movff	printf@ap,fsr2l
  3817  00242C  C0D4  FFDA         	movff	printf@ap+1,fsr2h
  3818  002430  CFDE F0D1          	movff	postinc2,printf@cp
  3819  002434  CFDD F0D2          	movff	postdec2,printf@cp+1
  3820                           
  3821                           ; BSR set to: 0
  3822  002438  0E02               	movlw	2
  3823  00243A  27D3               	addwf	printf@ap& (0+255),f,b
  3824  00243C  0E00               	movlw	0
  3825  00243E  23D4               	addwfc	(printf@ap+1)& (0+255),f,b
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;doprnt.c: 740: if(!cp)
  3829  002440  51D1               	movf	printf@cp& (0+255),w,b
  3830  002442  11D2               	iorwf	(printf@cp+1)& (0+255),w,b
  3831  002444  A4D8               	btfss	status,2,c
  3832  002446  D004               	goto	l818
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;doprnt.c: 741: cp = "(null)";
  3836  002448  0EB9               	movlw	low STR_66
  3837  00244A  6FD1               	movwf	printf@cp& (0+255),b
  3838  00244C  0EFF               	movlw	high STR_66
  3839  00244E  6FD2               	movwf	(printf@cp+1)& (0+255),b
  3840  002450                     l818:
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;doprnt.c: 745: len = 0;
  3844                           
  3845                           ; BSR set to: 0
  3846  002450  0E00               	movlw	0
  3847  002452  6FD6               	movwf	(printf@len+1)& (0+255),b
  3848  002454  0E00               	movlw	0
  3849  002456  6FD5               	movwf	printf@len& (0+255),b
  3850                           
  3851                           ;doprnt.c: 746: while(cp[len])
  3852  002458  D003               	goto	l819
  3853  00245A                     
  3854                           ;doprnt.c: 747: len++;
  3855                           
  3856                           ; BSR set to: 0
  3857  00245A  0100               	movlb	0	; () banked
  3858  00245C  4BD5               	infsnz	printf@len& (0+255),f,b
  3859  00245E  2BD6               	incf	(printf@len+1)& (0+255),f,b
  3860  002460                     l819:
  3861                           
  3862                           ; BSR set to: 0
  3863                           
  3864                           ; BSR set to: 0
  3865  002460  51D5               	movf	printf@len& (0+255),w,b
  3866  002462  25D1               	addwf	printf@cp& (0+255),w,b
  3867  002464  6FCB               	movwf	??_printf& (0+255),b
  3868  002466  51D6               	movf	(printf@len+1)& (0+255),w,b
  3869  002468  21D2               	addwfc	(printf@cp+1)& (0+255),w,b
  3870  00246A  6FCC               	movwf	(??_printf+1)& (0+255),b
  3871  00246C  C0CB  FFF6         	movff	??_printf,tblptrl
  3872  002470  C0CC  FFF7         	movff	??_printf+1,tblptrh
  3873  002474  0E00               	movlw	low (__mediumconst shr (0+16))
  3874  002476  6EF8               	movwf	tblptru,c
  3875  002478  0E0F               	movlw	(high __ramtop+-1)
  3876  00247A  64F7               	cpfsgt	tblptrh,c
  3877  00247C  D003               	bra	u2827
  3878  00247E  0008               	tblrd		*
  3879  002480  50F5               	movf	tablat,w,c
  3880  002482  D005               	bra	u2820
  3881  002484                     u2827:
  3882  002484  CFF6 FFE9          	movff	tblptrl,fsr0l
  3883  002488  CFF7 FFEA          	movff	tblptrh,fsr0h
  3884  00248C  50EF               	movf	indf0,w,c
  3885  00248E                     u2820:
  3886  00248E  0900               	iorlw	0
  3887  002490  A4D8               	btfss	status,2,c
  3888  002492  D7E3               	goto	l820
  3889                           
  3890                           ;doprnt.c: 757: if(width > len)
  3891  002494  0100               	movlb	0	; () banked
  3892  002496  51DA               	movf	printf@width& (0+255),w,b
  3893  002498  5DD5               	subwf	printf@len& (0+255),w,b
  3894  00249A  51DB               	movf	(printf@width+1)& (0+255),w,b
  3895  00249C  59D6               	subwfb	(printf@len+1)& (0+255),w,b
  3896  00249E  B0D8               	btfsc	status,0,c
  3897  0024A0  D005               	goto	l822
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;doprnt.c: 758: width -= len;
  3901  0024A2  51D5               	movf	printf@len& (0+255),w,b
  3902  0024A4  5FDA               	subwf	printf@width& (0+255),f,b
  3903  0024A6  51D6               	movf	(printf@len+1)& (0+255),w,b
  3904  0024A8  5BDB               	subwfb	(printf@width+1)& (0+255),f,b
  3905  0024AA  D008               	goto	l824
  3906  0024AC                     l822:
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;doprnt.c: 759: else
  3910                           ;doprnt.c: 760: width = 0;
  3911                           
  3912                           ; BSR set to: 0
  3913  0024AC  0E00               	movlw	0
  3914  0024AE  6FDB               	movwf	(printf@width+1)& (0+255),b
  3915  0024B0  0E00               	movlw	0
  3916  0024B2  6FDA               	movwf	printf@width& (0+255),b
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;doprnt.c: 764: while(width--)
  3920  0024B4  D003               	goto	l824
  3921  0024B6                     l4010:
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;doprnt.c: 765: (putch(' ') );
  3925  0024B6  0E20               	movlw	32
  3926  0024B8  EC46  F01D         	call	_putch
  3927  0024BC                     l824:
  3928  0024BC  0100               	movlb	0	; () banked
  3929  0024BE  07DA               	decf	printf@width& (0+255),f,b
  3930  0024C0  A0D8               	btfss	status,0,c
  3931  0024C2  07DB               	decf	(printf@width+1)& (0+255),f,b
  3932  0024C4  29DA               	incf	printf@width& (0+255),w,b
  3933  0024C6  E1F7               	bnz	l4010
  3934  0024C8  29DB               	incf	(printf@width+1)& (0+255),w,b
  3935  0024CA  B4D8               	btfsc	status,2,c
  3936  0024CC  D017               	goto	l827
  3937  0024CE  D7F3               	goto	l825
  3938  0024D0                     l4014:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;doprnt.c: 768: (putch(*cp++) );
  3942  0024D0  C0D1  FFF6         	movff	printf@cp,tblptrl
  3943  0024D4  C0D2  FFF7         	movff	printf@cp+1,tblptrh
  3944  0024D8  0E00               	movlw	low (__mediumconst shr (0+16))
  3945  0024DA  6EF8               	movwf	tblptru,c
  3946  0024DC  0E0F               	movlw	(high __ramtop+-1)
  3947  0024DE  64F7               	cpfsgt	tblptrh,c
  3948  0024E0  D003               	bra	u2867
  3949  0024E2  0008               	tblrd		*
  3950  0024E4  50F5               	movf	tablat,w,c
  3951  0024E6  D005               	bra	u2860
  3952  0024E8                     u2867:
  3953  0024E8  CFF6 FFE9          	movff	tblptrl,fsr0l
  3954  0024EC  CFF7 FFEA          	movff	tblptrh,fsr0h
  3955  0024F0  50EF               	movf	indf0,w,c
  3956  0024F2                     u2860:
  3957  0024F2  EC46  F01D         	call	_putch
  3958  0024F6  0100               	movlb	0	; () banked
  3959  0024F8  4BD1               	infsnz	printf@cp& (0+255),f,b
  3960  0024FA  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  3961  0024FC                     l827:
  3962                           
  3963                           ; BSR set to: 0
  3964                           
  3965                           ; BSR set to: 0
  3966  0024FC  07D5               	decf	printf@len& (0+255),f,b
  3967  0024FE  A0D8               	btfss	status,0,c
  3968  002500  07D6               	decf	(printf@len+1)& (0+255),f,b
  3969  002502  29D5               	incf	printf@len& (0+255),w,b
  3970  002504  E1E5               	bnz	l4014
  3971  002506  29D6               	incf	(printf@len+1)& (0+255),w,b
  3972  002508  B4D8               	btfsc	status,2,c
  3973  00250A  D139               	goto	u3060
  3974  00250C  D7E1               	goto	l828
  3975  00250E                     l810:
  3976                           
  3977                           ; BSR set to: 0
  3978  00250E  C0C7  FFF6         	movff	printf@f,tblptrl
  3979  002512  C0C8  FFF7         	movff	printf@f+1,tblptrh
  3980  002516  0100               	movlb	0	; () banked
  3981  002518  4BC7               	infsnz	printf@f& (0+255),f,b
  3982  00251A  2BC8               	incf	(printf@f+1)& (0+255),f,b
  3983  00251C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3984  00251C  6AF8               	clrf	tblptru,c
  3985  00251E                     	endif
  3986  00251E                     	if	0	;tblptru may be non-zero
  3987  00251E                     	endif
  3988  00251E  0008               	tblrd		*
  3989  002520  CFF5 F0DC          	movff	tablat,printf@c
  3990  002524  51DC               	movf	printf@c& (0+255),w,b
  3991                           
  3992                           ; Switch size 1, requested type "space"
  3993                           ; Number of cases is 5, Range of values is 0 to 120
  3994                           ; switch strategies available:
  3995                           ; Name         Instructions Cycles
  3996                           ; simple_byte           16     9 (average)
  3997                           ;	Chosen strategy is simple_byte
  3998  002526  0A00               	xorlw	0	; case 0
  3999  002528  B4D8               	btfsc	status,2,c
  4000  00252A  0012               	return	
  4001  00252C  0A64               	xorlw	100	; case 100
  4002  00252E  B4D8               	btfsc	status,2,c
  4003  002530  D00A               	goto	l815
  4004  002532  0A0D               	xorlw	13	; case 105
  4005  002534  B4D8               	btfsc	status,2,c
  4006  002536  D007               	goto	l815
  4007  002538  0A1A               	xorlw	26	; case 115
  4008  00253A  B4D8               	btfsc	status,2,c
  4009  00253C  D775               	goto	l817
  4010  00253E  0A0B               	xorlw	11	; case 120
  4011  002540  B4D8               	btfsc	status,2,c
  4012  002542  D76F               	goto	l816
  4013  002544  D11C               	goto	u3060
  4014  002546                     l815:
  4015                           
  4016                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4017  002546  0100               	movlb	0	; () banked
  4018  002548  BFD9               	btfsc	printf@flag& (0+255),7,b
  4019  00254A  D015               	goto	l831
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;doprnt.c: 1253: {
  4023                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4024  00254C  C0D3  FFD9         	movff	printf@ap,fsr2l
  4025  002550  C0D4  FFDA         	movff	printf@ap+1,fsr2h
  4026  002554  CFDE F0D7          	movff	postinc2,printf@val
  4027  002558  CFDD F0D8          	movff	postdec2,printf@val+1
  4028                           
  4029                           ; BSR set to: 0
  4030  00255C  0E02               	movlw	2
  4031  00255E  27D3               	addwf	printf@ap& (0+255),f,b
  4032  002560  0E00               	movlw	0
  4033  002562  23D4               	addwfc	(printf@ap+1)& (0+255),f,b
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;doprnt.c: 1261: if((int)val < 0) {
  4037  002564  AFD8               	btfss	(printf@val+1)& (0+255),7,b
  4038  002566  D04A               	goto	l834
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;doprnt.c: 1262: flag |= 0x03;
  4042  002568  0E03               	movlw	3
  4043  00256A  13D9               	iorwf	printf@flag& (0+255),f,b
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;doprnt.c: 1263: val = -val;
  4047  00256C  6DD7               	negf	printf@val& (0+255),b
  4048  00256E  1FD8               	comf	(printf@val+1)& (0+255),f,b
  4049  002570  B0D8               	btfsc	status,0,c
  4050  002572  2BD8               	incf	(printf@val+1)& (0+255),f,b
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;doprnt.c: 1264: }
  4054                           ;doprnt.c: 1266: }
  4055  002574  D043               	goto	l834
  4056  002576                     l831:
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;doprnt.c: 1268: else
  4060                           ;doprnt.c: 1273: {
  4061                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4062                           
  4063                           ; BSR set to: 0
  4064  002576  C0D3  FFD9         	movff	printf@ap,fsr2l
  4065  00257A  C0D4  FFDA         	movff	printf@ap+1,fsr2h
  4066  00257E  CFDE F0D7          	movff	postinc2,printf@val
  4067  002582  CFDD F0D8          	movff	postdec2,printf@val+1
  4068                           
  4069                           ; BSR set to: 0
  4070  002586  0E02               	movlw	2
  4071  002588  27D3               	addwf	printf@ap& (0+255),f,b
  4072  00258A  0E00               	movlw	0
  4073  00258C  23D4               	addwfc	(printf@ap+1)& (0+255),f,b
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;doprnt.c: 1287: }
  4077                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4078  00258E  D036               	goto	l834
  4079  002590                     
  4080                           ; BSR set to: 0
  4081                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4082                           
  4083                           ; BSR set to: 0
  4084  002590  0E01               	movlw	1
  4085  002592  6FDC               	movwf	printf@c& (0+255),b
  4086  002594                     l4040:
  4087                           
  4088                           ; BSR set to: 0
  4089  002594  0E05               	movlw	5
  4090  002596  19DC               	xorwf	printf@c& (0+255),w,b
  4091  002598  B4D8               	btfsc	status,2,c
  4092  00259A  D038               	goto	l839
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;doprnt.c: 1306: if(val < dpowers[c])
  4096                           
  4097                           ; BSR set to: 0
  4098                           
  4099                           ; BSR set to: 0
  4100  00259C  51DC               	movf	printf@c& (0+255),w,b
  4101  00259E  0D02               	mullw	2
  4102  0025A0  0E7C               	movlw	low _dpowers
  4103  0025A2  24F3               	addwf	prodl,w,c
  4104  0025A4  6EF6               	movwf	tblptrl,c
  4105  0025A6  0EFD               	movlw	high _dpowers
  4106  0025A8  20F4               	addwfc	prodh,w,c
  4107  0025AA  6EF7               	movwf	tblptrh,c
  4108  0025AC                     	if	1	;There are 3 active tblptr bytes
  4109  0025AC  6AF8               	clrf	tblptru,c
  4110  0025AE  0E00               	movlw	low (__mediumconst shr (0+16))
  4111  0025B0  22F8               	addwfc	tblptru,f,c
  4112  0025B2                     	endif
  4113  0025B2  0009               	tblrd		*+
  4114  0025B4  50F5               	movf	tablat,w,c
  4115  0025B6  5DD7               	subwf	printf@val& (0+255),w,b
  4116  0025B8  0009               	tblrd		*+
  4117  0025BA  50F5               	movf	tablat,w,c
  4118  0025BC  59D8               	subwfb	(printf@val+1)& (0+255),w,b
  4119  0025BE  A0D8               	btfss	status,0,c
  4120  0025C0  D025               	goto	l839
  4121                           
  4122                           ; BSR set to: 0
  4123                           
  4124                           ; BSR set to: 0
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;doprnt.c: 1307: break;
  4128  0025C2  2BDC               	incf	printf@c& (0+255),f,b
  4129  0025C4  D7E7               	goto	l4040
  4130  0025C6                     
  4131                           ; BSR set to: 0
  4132                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4133                           
  4134                           ; BSR set to: 0
  4135  0025C6  0E01               	movlw	1
  4136  0025C8  6FDC               	movwf	printf@c& (0+255),b
  4137  0025CA                     l4054:
  4138                           
  4139                           ; BSR set to: 0
  4140  0025CA  0E04               	movlw	4
  4141  0025CC  19DC               	xorwf	printf@c& (0+255),w,b
  4142  0025CE  B4D8               	btfsc	status,2,c
  4143  0025D0  D01D               	goto	l839
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4147                           
  4148                           ; BSR set to: 0
  4149                           
  4150                           ; BSR set to: 0
  4151  0025D2  51DC               	movf	printf@c& (0+255),w,b
  4152  0025D4  0D02               	mullw	2
  4153  0025D6  0E86               	movlw	low _hexpowers
  4154  0025D8  24F3               	addwf	prodl,w,c
  4155  0025DA  6EF6               	movwf	tblptrl,c
  4156  0025DC  0EFD               	movlw	high _hexpowers
  4157  0025DE  20F4               	addwfc	prodh,w,c
  4158  0025E0  6EF7               	movwf	tblptrh,c
  4159  0025E2                     	if	1	;There are 3 active tblptr bytes
  4160  0025E2  6AF8               	clrf	tblptru,c
  4161  0025E4  0E00               	movlw	low (__mediumconst shr (0+16))
  4162  0025E6  22F8               	addwfc	tblptru,f,c
  4163  0025E8                     	endif
  4164  0025E8  0009               	tblrd		*+
  4165  0025EA  50F5               	movf	tablat,w,c
  4166  0025EC  5DD7               	subwf	printf@val& (0+255),w,b
  4167  0025EE  0009               	tblrd		*+
  4168  0025F0  50F5               	movf	tablat,w,c
  4169  0025F2  59D8               	subwfb	(printf@val+1)& (0+255),w,b
  4170  0025F4  A0D8               	btfss	status,0,c
  4171  0025F6  D00A               	goto	l839
  4172                           
  4173                           ; BSR set to: 0
  4174                           
  4175                           ; BSR set to: 0
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;doprnt.c: 1318: break;
  4179  0025F8  2BDC               	incf	printf@c& (0+255),f,b
  4180  0025FA  D7E7               	goto	l4054
  4181  0025FC                     l834:
  4182                           
  4183                           ; BSR set to: 0
  4184                           
  4185                           ; BSR set to: 0
  4186  0025FC  51D9               	movf	printf@flag& (0+255),w,b
  4187  0025FE  0B80               	andlw	128
  4188                           
  4189                           ; Switch size 1, requested type "space"
  4190                           ; Number of cases is 2, Range of values is 0 to 128
  4191                           ; switch strategies available:
  4192                           ; Name         Instructions Cycles
  4193                           ; simple_byte            7     4 (average)
  4194                           ;	Chosen strategy is simple_byte
  4195  002600  0A00               	xorlw	0	; case 0
  4196  002602  B4D8               	btfsc	status,2,c
  4197  002604  D7C5               	goto	l835
  4198  002606  0A80               	xorlw	128	; case 128
  4199  002608  B4D8               	btfsc	status,2,c
  4200  00260A  D7DD               	goto	l840
  4201  00260C                     l839:
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4205                           
  4206                           ; BSR set to: 0
  4207  00260C  51DA               	movf	printf@width& (0+255),w,b
  4208  00260E  11DB               	iorwf	(printf@width+1)& (0+255),w,b
  4209  002610  B4D8               	btfsc	status,2,c
  4210  002612  D009               	goto	l844
  4211                           
  4212                           ; BSR set to: 0
  4213  002614  C0D9  F0CB         	movff	printf@flag,??_printf
  4214  002618  0E03               	movlw	3
  4215  00261A  17CB               	andwf	??_printf& (0+255),f,b
  4216  00261C  B4D8               	btfsc	status,2,c
  4217  00261E  D003               	goto	l844
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;doprnt.c: 1346: width--;
  4221  002620  07DA               	decf	printf@width& (0+255),f,b
  4222  002622  A0D8               	btfss	status,0,c
  4223  002624  07DB               	decf	(printf@width+1)& (0+255),f,b
  4224  002626                     l844:
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 1381: if(width > c)
  4228                           
  4229                           ; BSR set to: 0
  4230  002626  0E80               	movlw	128
  4231  002628  BFDC               	btfsc	printf@c& (0+255),7,b
  4232  00262A  0E7F               	movlw	127
  4233  00262C  6FCB               	movwf	??_printf& (0+255),b
  4234  00262E  51DA               	movf	printf@width& (0+255),w,b
  4235  002630  5DDC               	subwf	printf@c& (0+255),w,b
  4236  002632  51DB               	movf	(printf@width+1)& (0+255),w,b
  4237  002634  0A80               	xorlw	128
  4238  002636  59CB               	subwfb	??_printf& (0+255),w,b
  4239  002638  B0D8               	btfsc	status,0,c
  4240  00263A  D007               	goto	l845
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;doprnt.c: 1382: width -= c;
  4244  00263C  51DC               	movf	printf@c& (0+255),w,b
  4245  00263E  5FDA               	subwf	printf@width& (0+255),f,b
  4246  002640  0E00               	movlw	0
  4247  002642  BFDC               	btfsc	printf@c& (0+255),7,b
  4248  002644  0EFF               	movlw	255
  4249  002646  5BDB               	subwfb	(printf@width+1)& (0+255),f,b
  4250  002648  D004               	goto	l846
  4251  00264A                     l845:
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;doprnt.c: 1383: else
  4255                           ;doprnt.c: 1384: width = 0;
  4256                           
  4257                           ; BSR set to: 0
  4258  00264A  0E00               	movlw	0
  4259  00264C  6FDB               	movwf	(printf@width+1)& (0+255),b
  4260  00264E  0E00               	movlw	0
  4261  002650  6FDA               	movwf	printf@width& (0+255),b
  4262  002652                     l846:
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;doprnt.c: 1387: if(flag & 0x04) {
  4266                           
  4267                           ; BSR set to: 0
  4268  002652  A5D9               	btfss	printf@flag& (0+255),2,b
  4269  002654  D016               	goto	l847
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;doprnt.c: 1392: if(flag & 0x03)
  4273  002656  C0D9  F0CB         	movff	printf@flag,??_printf
  4274  00265A  0E03               	movlw	3
  4275  00265C  17CB               	andwf	??_printf& (0+255),f,b
  4276  00265E  B4D8               	btfsc	status,2,c
  4277  002660  D003               	goto	l848
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;doprnt.c: 1393: (putch('-') );
  4281  002662  0E2D               	movlw	45
  4282  002664  EC46  F01D         	call	_putch
  4283  002668                     l848:
  4284                           
  4285                           ;doprnt.c: 1415: if(width)
  4286  002668  0100               	movlb	0	; () banked
  4287  00266A  51DA               	movf	printf@width& (0+255),w,b
  4288  00266C  11DB               	iorwf	(printf@width+1)& (0+255),w,b
  4289  00266E  B4D8               	btfsc	status,2,c
  4290  002670  D020               	goto	l856
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;doprnt.c: 1417: (putch('0') );
  4294                           
  4295                           ; BSR set to: 0
  4296                           
  4297                           ;doprnt.c: 1416: do
  4298  002672  0E30               	movlw	48
  4299  002674  EC46  F01D         	call	_putch
  4300                           
  4301                           ;doprnt.c: 1418: while(--width);
  4302  002678  0100               	movlb	0	; () banked
  4303  00267A  07DA               	decf	printf@width& (0+255),f,b
  4304  00267C  A0D8               	btfss	status,0,c
  4305  00267E  07DB               	decf	(printf@width+1)& (0+255),f,b
  4306  002680  D7F4               	goto	L10
  4307  002682                     l847:
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;doprnt.c: 1422: {
  4311                           ;doprnt.c: 1424: if(width
  4312                           ;doprnt.c: 1428: )
  4313                           
  4314                           ; BSR set to: 0
  4315  002682  51DA               	movf	printf@width& (0+255),w,b
  4316  002684  11DB               	iorwf	(printf@width+1)& (0+255),w,b
  4317  002686  B4D8               	btfsc	status,2,c
  4318  002688  D00B               	goto	u3040
  4319  00268A                     u3030:
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;doprnt.c: 1430: (putch(' ') );
  4323                           
  4324                           ; BSR set to: 0
  4325                           
  4326                           ;doprnt.c: 1429: do
  4327  00268A  0E20               	movlw	32
  4328  00268C  EC46  F01D         	call	_putch
  4329                           
  4330                           ;doprnt.c: 1431: while(--width);
  4331  002690  0100               	movlb	0	; () banked
  4332  002692  07DA               	decf	printf@width& (0+255),f,b
  4333  002694  A0D8               	btfss	status,0,c
  4334  002696  07DB               	decf	(printf@width+1)& (0+255),f,b
  4335  002698  51DA               	movf	printf@width& (0+255),w,b
  4336  00269A  11DB               	iorwf	(printf@width+1)& (0+255),w,b
  4337  00269C  A4D8               	btfss	status,2,c
  4338  00269E  D7F5               	goto	u3030
  4339  0026A0                     u3040:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 1438: if(flag & 0x03)
  4343                           
  4344                           ; BSR set to: 0
  4345                           
  4346                           ; BSR set to: 0
  4347  0026A0  C0D9  F0CB         	movff	printf@flag,??_printf
  4348  0026A4  0E03               	movlw	3
  4349  0026A6  17CB               	andwf	??_printf& (0+255),f,b
  4350  0026A8  B4D8               	btfsc	status,2,c
  4351  0026AA  D003               	goto	l856
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;doprnt.c: 1439: (putch('-') );
  4355  0026AC  0E2D               	movlw	45
  4356  0026AE  EC46  F01D         	call	_putch
  4357  0026B2                     l856:
  4358                           
  4359                           ;doprnt.c: 1469: }
  4360                           ;doprnt.c: 1472: prec = c;
  4361  0026B2  C0DC  F0D0         	movff	printf@c,printf@prec
  4362                           
  4363                           ;doprnt.c: 1474: while(prec--) {
  4364  0026B6  D05E               	goto	l857
  4365  0026B8                     
  4366                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4367  0026B8  0100               	movlb	0	; () banked
  4368  0026BA  51D0               	movf	printf@prec& (0+255),w,b
  4369  0026BC  0D02               	mullw	2
  4370  0026BE  0E7C               	movlw	low _dpowers
  4371  0026C0  24F3               	addwf	prodl,w,c
  4372  0026C2  6EF6               	movwf	tblptrl,c
  4373  0026C4  0EFD               	movlw	high _dpowers
  4374  0026C6  20F4               	addwfc	prodh,w,c
  4375  0026C8  6EF7               	movwf	tblptrh,c
  4376  0026CA                     	if	1	;There are 3 active tblptr bytes
  4377  0026CA  6AF8               	clrf	tblptru,c
  4378  0026CC  0E00               	movlw	low (__mediumconst shr (0+16))
  4379  0026CE  22F8               	addwfc	tblptru,f,c
  4380  0026D0                     	endif
  4381  0026D0  0009               	tblrd		*+
  4382  0026D2  CFF5 F0BB          	movff	tablat,___lwdiv@divisor
  4383  0026D6  000A               	tblrd		*-
  4384  0026D8  CFF5 F0BC          	movff	tablat,___lwdiv@divisor+1
  4385  0026DC  C0D7  F0B9         	movff	printf@val,___lwdiv@dividend
  4386  0026E0  C0D8  F0BA         	movff	printf@val+1,___lwdiv@dividend+1
  4387  0026E4  EC26  F01B         	call	___lwdiv	;wreg free
  4388  0026E8  C0B9  F0C0         	movff	?___lwdiv,___lwmod@dividend
  4389  0026EC  C0BA  F0C1         	movff	?___lwdiv+1,___lwmod@dividend+1
  4390  0026F0  0E00               	movlw	0
  4391  0026F2  0100               	movlb	0	; () banked
  4392  0026F4  6FC3               	movwf	(___lwmod@divisor+1)& (0+255),b
  4393  0026F6  0E0A               	movlw	10
  4394  0026F8  6FC2               	movwf	___lwmod@divisor& (0+255),b
  4395  0026FA  EC32  F01C         	call	___lwmod	;wreg free
  4396  0026FE  0100               	movlb	0	; () banked
  4397  002700  51C0               	movf	?___lwmod& (0+255),w,b
  4398  002702  0F30               	addlw	48
  4399  002704  6FDC               	movwf	printf@c& (0+255),b
  4400                           
  4401                           ;doprnt.c: 1491: break;
  4402  002706  D033               	goto	l861
  4403  002708                     
  4404                           ; BSR set to: 0
  4405                           ;doprnt.c: 1499: {
  4406                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4407                           
  4408                           ; BSR set to: 0
  4409  002708  C0D7  F0B9         	movff	printf@val,___lwdiv@dividend
  4410  00270C  C0D8  F0BA         	movff	printf@val+1,___lwdiv@dividend+1
  4411  002710  51D0               	movf	printf@prec& (0+255),w,b
  4412  002712  0D02               	mullw	2
  4413  002714  0E86               	movlw	low _hexpowers
  4414  002716  24F3               	addwf	prodl,w,c
  4415  002718  6EF6               	movwf	tblptrl,c
  4416  00271A  0EFD               	movlw	high _hexpowers
  4417  00271C  20F4               	addwfc	prodh,w,c
  4418  00271E  6EF7               	movwf	tblptrh,c
  4419  002720                     	if	1	;There are 3 active tblptr bytes
  4420  002720  6AF8               	clrf	tblptru,c
  4421  002722  0E00               	movlw	low (__mediumconst shr (0+16))
  4422  002724  22F8               	addwfc	tblptru,f,c
  4423  002726                     	endif
  4424  002726  0009               	tblrd		*+
  4425  002728  CFF5 F0BB          	movff	tablat,___lwdiv@divisor
  4426  00272C  000A               	tblrd		*-
  4427  00272E  CFF5 F0BC          	movff	tablat,___lwdiv@divisor+1
  4428  002732  EC26  F01B         	call	___lwdiv	;wreg free
  4429  002736  0100               	movlb	0	; () banked
  4430  002738  51B9               	movf	?___lwdiv& (0+255),w,b
  4431  00273A  0B0F               	andlw	15
  4432  00273C  6FCF               	movwf	printf@idx& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4436  00273E  51CF               	movf	printf@idx& (0+255),w,b
  4437  002740  0D01               	mullw	1
  4438  002742  0E63               	movlw	low STR_67
  4439  002744  24F3               	addwf	prodl,w,c
  4440  002746  6EF6               	movwf	tblptrl,c
  4441  002748  0EFE               	movlw	high STR_67
  4442  00274A  20F4               	addwfc	prodh,w,c
  4443  00274C  6EF7               	movwf	tblptrh,c
  4444  00274E                     	if	1	;There are 3 active tblptr bytes
  4445  00274E  6AF8               	clrf	tblptru,c
  4446  002750  0E00               	movlw	low (__mediumconst shr (0+16))
  4447  002752  22F8               	addwfc	tblptru,f,c
  4448  002754                     	endif
  4449  002754  0008               	tblrd		*
  4450  002756  CFF5 F0DC          	movff	tablat,printf@c
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;doprnt.c: 1523: }
  4454                           
  4455                           ;doprnt.c: 1508: }
  4456                           ;doprnt.c: 1510: break;
  4457  00275A  D009               	goto	l861
  4458  00275C                     
  4459                           ; BSR set to: 0
  4460  00275C  0100               	movlb	0	; () banked
  4461  00275E  51D9               	movf	printf@flag& (0+255),w,b
  4462  002760  0B80               	andlw	128
  4463                           
  4464                           ; Switch size 1, requested type "space"
  4465                           ; Number of cases is 2, Range of values is 0 to 128
  4466                           ; switch strategies available:
  4467                           ; Name         Instructions Cycles
  4468                           ; simple_byte            7     4 (average)
  4469                           ;	Chosen strategy is simple_byte
  4470  002762  0A00               	xorlw	0	; case 0
  4471  002764  B4D8               	btfsc	status,2,c
  4472  002766  D7A8               	goto	l860
  4473  002768  0A80               	xorlw	128	; case 128
  4474  00276A  B4D8               	btfsc	status,2,c
  4475  00276C  D7CD               	goto	l862
  4476  00276E                     l861:
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;doprnt.c: 1524: (putch(c) );
  4480                           
  4481                           ; BSR set to: 0
  4482  00276E  51DC               	movf	printf@c& (0+255),w,b
  4483  002770  EC46  F01D         	call	_putch
  4484  002774                     l857:
  4485  002774  0100               	movlb	0	; () banked
  4486  002776  07D0               	decf	printf@prec& (0+255),f,b
  4487  002778  29D0               	incf	printf@prec& (0+255),w,b
  4488  00277A  A4D8               	btfss	status,2,c
  4489  00277C  D7EF               	goto	l859
  4490  00277E                     u3060:
  4491                           
  4492                           ; BSR set to: 0
  4493                           
  4494                           ; BSR set to: 0
  4495  00277E  C0C7  FFF6         	movff	printf@f,tblptrl
  4496  002782  C0C8  FFF7         	movff	printf@f+1,tblptrh
  4497  002786  0100               	movlb	0	; () banked
  4498  002788  4BC7               	infsnz	printf@f& (0+255),f,b
  4499  00278A  2BC8               	incf	(printf@f+1)& (0+255),f,b
  4500  00278C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4501  00278C  6AF8               	clrf	tblptru,c
  4502  00278E                     	endif
  4503  00278E                     	if	0	;tblptru may be non-zero
  4504  00278E                     	endif
  4505  00278E  0008               	tblrd		*
  4506  002790  CFF5 F0DC          	movff	tablat,printf@c
  4507  002794  51DC               	movf	printf@c& (0+255),w,b
  4508  002796  B4D8               	btfsc	status,2,c
  4509  002798  0012               	return	
  4510  00279A  D5E2               	goto	l799
  4511  00279C                     __end_of_printf:
  4512                           	opt stack 0
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           intcon	equ	0xFF2
  4520                           intcon3	equ	0xFF0
  4521                           indf0	equ	0xFEF
  4522                           postinc0	equ	0xFEE
  4523                           fsr0h	equ	0xFEA
  4524                           fsr0l	equ	0xFE9
  4525                           wreg	equ	0xFE8
  4526                           postdec1	equ	0xFE5
  4527                           fsr1l	equ	0xFE1
  4528                           postinc2	equ	0xFDE
  4529                           postdec2	equ	0xFDD
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function _putch *****************
  4535 ;; Defined at:
  4536 ;;		line 24 in file "lcd.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  data            1    wreg     unsigned char 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  data            1    2[BANK0 ] unsigned char 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;Total ram usage:        1 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    5
  4557 ;; This function calls:
  4558 ;;		_lcdNibble
  4559 ;; This function is called by:
  4560 ;;		_printf
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text3
  4565  003A8C                     __ptext3:
  4566                           	opt stack 0
  4567  003A8C                     _putch:
  4568                           	opt stack 24
  4569                           
  4570                           ;incstack = 0
  4571                           ;putch@data stored from wreg
  4572  003A8C  0100               	movlb	0	; () banked
  4573  003A8E  6FBB               	movwf	putch@data& (0+255),b
  4574                           
  4575                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4576  003A90  848C               	bsf	3980,2,c	;volatile
  4577                           
  4578                           ;lcd.c: 33: lcdNibble(data);
  4579  003A92  0100               	movlb	0	; () banked
  4580  003A94  51BB               	movf	putch@data& (0+255),w,b
  4581  003A96  EC4F  F018         	call	_lcdNibble
  4582                           
  4583                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4584  003A9A  0EC8               	movlw	200
  4585  003A9C                     u5107:
  4586  003A9C  D000               	nop2	
  4587  003A9E  2EE8               	decfsz	wreg,f,c
  4588  003AA0  D7FD               	bra	u5107
  4589  003AA2  0012               	return		;funcret
  4590  003AA4                     __end_of_putch:
  4591                           	opt stack 0
  4592                           tblptru	equ	0xFF8
  4593                           tblptrh	equ	0xFF7
  4594                           tblptrl	equ	0xFF6
  4595                           tablat	equ	0xFF5
  4596                           prodh	equ	0xFF4
  4597                           prodl	equ	0xFF3
  4598                           intcon	equ	0xFF2
  4599                           intcon3	equ	0xFF0
  4600                           indf0	equ	0xFEF
  4601                           postinc0	equ	0xFEE
  4602                           fsr0h	equ	0xFEA
  4603                           fsr0l	equ	0xFE9
  4604                           wreg	equ	0xFE8
  4605                           postdec1	equ	0xFE5
  4606                           fsr1l	equ	0xFE1
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _isdigit *****************
  4614 ;; Defined at:
  4615 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  c               1    wreg     unsigned char 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  c               1    2[BANK0 ] unsigned char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;		None               void
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, status,0
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;Total ram usage:        3 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    4
  4636 ;; This function calls:
  4637 ;;		Nothing
  4638 ;; This function is called by:
  4639 ;;		_printf
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text4
  4644  003A2A                     __ptext4:
  4645                           	opt stack 0
  4646  003A2A                     _isdigit:
  4647                           	opt stack 25
  4648                           
  4649                           ;incstack = 0
  4650                           ;isdigit@c stored from wreg
  4651  003A2A  0100               	movlb	0	; () banked
  4652  003A2C  6FBB               	movwf	isdigit@c& (0+255),b
  4653  003A2E  0E00               	movlw	0
  4654  003A30  0100               	movlb	0	; () banked
  4655  003A32  6FBA               	movwf	_isdigit$1254& (0+255),b
  4656                           
  4657                           ; BSR set to: 0
  4658  003A34  0E3A               	movlw	58
  4659  003A36  61BB               	cpfslt	isdigit@c& (0+255),b
  4660  003A38  D005               	goto	l1195
  4661                           
  4662                           ; BSR set to: 0
  4663  003A3A  0E2F               	movlw	47
  4664  003A3C  65BB               	cpfsgt	isdigit@c& (0+255),b
  4665  003A3E  D002               	goto	l1195
  4666                           
  4667                           ; BSR set to: 0
  4668  003A40  0E01               	movlw	1
  4669  003A42  6FBA               	movwf	_isdigit$1254& (0+255),b
  4670  003A44                     l1195:
  4671                           
  4672                           ; BSR set to: 0
  4673                           
  4674                           ; BSR set to: 0
  4675  003A44  C0BA  F0B9         	movff	_isdigit$1254,??_isdigit
  4676  003A48  31B9               	rrcf	??_isdigit& (0+255),w,b
  4677  003A4A  0012               	return	
  4678  003A4C                     __end_of_isdigit:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           intcon3	equ	0xFF0
  4688                           indf0	equ	0xFEF
  4689                           postinc0	equ	0xFEE
  4690                           fsr0h	equ	0xFEA
  4691                           fsr0l	equ	0xFE9
  4692                           wreg	equ	0xFE8
  4693                           postdec1	equ	0xFE5
  4694                           fsr1l	equ	0xFE1
  4695                           postinc2	equ	0xFDE
  4696                           postdec2	equ	0xFDD
  4697                           fsr2h	equ	0xFDA
  4698                           fsr2l	equ	0xFD9
  4699                           status	equ	0xFD8
  4700                           
  4701 ;; *************** function ___lwmod *****************
  4702 ;; Defined at:
  4703 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  dividend        2    7[BANK0 ] unsigned int 
  4706 ;;  divisor         2    9[BANK0 ] unsigned int 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  counter         1   11[BANK0 ] unsigned char 
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  2    7[BANK0 ] unsigned int 
  4711 ;; Registers used:
  4712 ;;		wreg, status,2, status,0
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4718 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;Total ram usage:        5 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    4
  4725 ;; This function calls:
  4726 ;;		Nothing
  4727 ;; This function is called by:
  4728 ;;		_printf
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text5
  4733  003864                     __ptext5:
  4734                           	opt stack 0
  4735  003864                     ___lwmod:
  4736                           	opt stack 25
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;incstack = 0
  4740  003864  0100               	movlb	0	; () banked
  4741  003866  51C2               	movf	___lwmod@divisor& (0+255),w,b
  4742  003868  11C3               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4743  00386A  B4D8               	btfsc	status,2,c
  4744  00386C  D018               	goto	l1289
  4745                           
  4746                           ; BSR set to: 0
  4747  00386E  0E01               	movlw	1
  4748  003870  6FC4               	movwf	___lwmod@counter& (0+255),b
  4749  003872  D004               	goto	l1284
  4750  003874                     
  4751                           ; BSR set to: 0
  4752                           
  4753                           ; BSR set to: 0
  4754  003874  90D8               	bcf	status,0,c
  4755  003876  37C2               	rlcf	___lwmod@divisor& (0+255),f,b
  4756  003878  37C3               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4757  00387A  2BC4               	incf	___lwmod@counter& (0+255),f,b
  4758  00387C                     l1284:
  4759                           
  4760                           ; BSR set to: 0
  4761                           
  4762                           ; BSR set to: 0
  4763  00387C  AFC3               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4764  00387E  D7FA               	goto	l1285
  4765  003880                     u2620:
  4766                           
  4767                           ; BSR set to: 0
  4768                           
  4769                           ; BSR set to: 0
  4770                           
  4771                           ; BSR set to: 0
  4772  003880  51C2               	movf	___lwmod@divisor& (0+255),w,b
  4773  003882  5DC0               	subwf	___lwmod@dividend& (0+255),w,b
  4774  003884  51C3               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4775  003886  59C1               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4776  003888  A0D8               	btfss	status,0,c
  4777  00388A  D004               	goto	l1288
  4778                           
  4779                           ; BSR set to: 0
  4780  00388C  51C2               	movf	___lwmod@divisor& (0+255),w,b
  4781  00388E  5FC0               	subwf	___lwmod@dividend& (0+255),f,b
  4782  003890  51C3               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4783  003892  5BC1               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4784  003894                     l1288:
  4785                           
  4786                           ; BSR set to: 0
  4787                           
  4788                           ; BSR set to: 0
  4789  003894  90D8               	bcf	status,0,c
  4790  003896  33C3               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4791  003898  33C2               	rrcf	___lwmod@divisor& (0+255),f,b
  4792                           
  4793                           ; BSR set to: 0
  4794  00389A  2FC4               	decfsz	___lwmod@counter& (0+255),f,b
  4795  00389C  D7F1               	goto	u2620
  4796  00389E                     l1289:
  4797                           
  4798                           ; BSR set to: 0
  4799                           
  4800                           ; BSR set to: 0
  4801  00389E  C0C0  F0C0         	movff	___lwmod@dividend,?___lwmod
  4802  0038A2  C0C1  F0C1         	movff	___lwmod@dividend+1,?___lwmod+1
  4803                           
  4804                           ; BSR set to: 0
  4805  0038A6  0012               	return		;funcret
  4806  0038A8                     __end_of___lwmod:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           prodh	equ	0xFF4
  4813                           prodl	equ	0xFF3
  4814                           intcon	equ	0xFF2
  4815                           intcon3	equ	0xFF0
  4816                           indf0	equ	0xFEF
  4817                           postinc0	equ	0xFEE
  4818                           fsr0h	equ	0xFEA
  4819                           fsr0l	equ	0xFE9
  4820                           wreg	equ	0xFE8
  4821                           postdec1	equ	0xFE5
  4822                           fsr1l	equ	0xFE1
  4823                           postinc2	equ	0xFDE
  4824                           postdec2	equ	0xFDD
  4825                           fsr2h	equ	0xFDA
  4826                           fsr2l	equ	0xFD9
  4827                           status	equ	0xFD8
  4828                           
  4829 ;; *************** function ___lwdiv *****************
  4830 ;; Defined at:
  4831 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;  dividend        2    0[BANK0 ] unsigned int 
  4834 ;;  divisor         2    2[BANK0 ] unsigned int 
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;  quotient        2    4[BANK0 ] unsigned int 
  4837 ;;  counter         1    6[BANK0 ] unsigned char 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  2    0[BANK0 ] unsigned int 
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;Total ram usage:        7 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    4
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_printf
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text6
  4862  00364C                     __ptext6:
  4863                           	opt stack 0
  4864  00364C                     ___lwdiv:
  4865                           	opt stack 25
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;incstack = 0
  4869  00364C  0E00               	movlw	0
  4870  00364E  0100               	movlb	0	; () banked
  4871  003650  6FBE               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4872  003652  0E00               	movlw	0
  4873  003654  6FBD               	movwf	___lwdiv@quotient& (0+255),b
  4874                           
  4875                           ; BSR set to: 0
  4876  003656  51BB               	movf	___lwdiv@divisor& (0+255),w,b
  4877  003658  11BC               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4878  00365A  B4D8               	btfsc	status,2,c
  4879  00365C  D01C               	goto	l1279
  4880                           
  4881                           ; BSR set to: 0
  4882  00365E  0E01               	movlw	1
  4883  003660  6FBF               	movwf	___lwdiv@counter& (0+255),b
  4884  003662  D004               	goto	l1274
  4885  003664                     
  4886                           ; BSR set to: 0
  4887                           
  4888                           ; BSR set to: 0
  4889  003664  90D8               	bcf	status,0,c
  4890  003666  37BB               	rlcf	___lwdiv@divisor& (0+255),f,b
  4891  003668  37BC               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4892  00366A  2BBF               	incf	___lwdiv@counter& (0+255),f,b
  4893  00366C                     l1274:
  4894                           
  4895                           ; BSR set to: 0
  4896                           
  4897                           ; BSR set to: 0
  4898  00366C  AFBC               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4899  00366E  D7FA               	goto	l1275
  4900  003670                     u2590:
  4901                           
  4902                           ; BSR set to: 0
  4903                           
  4904                           ; BSR set to: 0
  4905                           
  4906                           ; BSR set to: 0
  4907  003670  90D8               	bcf	status,0,c
  4908  003672  37BD               	rlcf	___lwdiv@quotient& (0+255),f,b
  4909  003674  37BE               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4910                           
  4911                           ; BSR set to: 0
  4912  003676  51BB               	movf	___lwdiv@divisor& (0+255),w,b
  4913  003678  5DB9               	subwf	___lwdiv@dividend& (0+255),w,b
  4914  00367A  51BC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4915  00367C  59BA               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4916  00367E  A0D8               	btfss	status,0,c
  4917  003680  D005               	goto	l1278
  4918                           
  4919                           ; BSR set to: 0
  4920  003682  51BB               	movf	___lwdiv@divisor& (0+255),w,b
  4921  003684  5FB9               	subwf	___lwdiv@dividend& (0+255),f,b
  4922  003686  51BC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4923  003688  5BBA               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4924                           
  4925                           ; BSR set to: 0
  4926  00368A  81BD               	bsf	___lwdiv@quotient& (0+255),0,b
  4927  00368C                     l1278:
  4928                           
  4929                           ; BSR set to: 0
  4930                           
  4931                           ; BSR set to: 0
  4932  00368C  90D8               	bcf	status,0,c
  4933  00368E  33BC               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4934  003690  33BB               	rrcf	___lwdiv@divisor& (0+255),f,b
  4935                           
  4936                           ; BSR set to: 0
  4937  003692  2FBF               	decfsz	___lwdiv@counter& (0+255),f,b
  4938  003694  D7ED               	goto	u2590
  4939  003696                     l1279:
  4940                           
  4941                           ; BSR set to: 0
  4942                           
  4943                           ; BSR set to: 0
  4944  003696  C0BD  F0B9         	movff	___lwdiv@quotient,?___lwdiv
  4945  00369A  C0BE  F0BA         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4946                           
  4947                           ; BSR set to: 0
  4948  00369E  0012               	return		;funcret
  4949  0036A0                     __end_of___lwdiv:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           intcon3	equ	0xFF0
  4959                           indf0	equ	0xFEF
  4960                           postinc0	equ	0xFEE
  4961                           fsr0h	equ	0xFEA
  4962                           fsr0l	equ	0xFE9
  4963                           wreg	equ	0xFE8
  4964                           postdec1	equ	0xFE5
  4965                           fsr1l	equ	0xFE1
  4966                           postinc2	equ	0xFDE
  4967                           postdec2	equ	0xFDD
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function _initialize *****************
  4973 ;; Defined at:
  4974 ;;		line 1081 in file "main.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;		None
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;		None
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;Total ram usage:        0 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    4
  4995 ;; This function calls:
  4996 ;;		Nothing
  4997 ;; This function is called by:
  4998 ;;		_main
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text7
  5003  002E22                     __ptext7:
  5004                           	opt stack 0
  5005  002E22                     _initialize:
  5006                           	opt stack 26
  5007                           
  5008                           ;main.c: 1082: white_tape = 0;
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;incstack = 0
  5012  002E22  0E00               	movlw	0
  5013  002E24  0100               	movlb	0	; () banked
  5014  002E26  6FA9               	movwf	(_white_tape+1)& (0+255),b
  5015  002E28  0E00               	movlw	0
  5016  002E2A  6FA8               	movwf	_white_tape& (0+255),b
  5017                           
  5018                           ;main.c: 1083: mode = 0;
  5019  002E2C  0E00               	movlw	0
  5020  002E2E  6FF0               	movwf	(_mode+1)& (0+255),b
  5021  002E30  0E00               	movlw	0
  5022  002E32  6FEF               	movwf	_mode& (0+255),b
  5023                           
  5024                           ;main.c: 1084: state = 0;
  5025  002E34  0E00               	movlw	0
  5026  002E36  6E6E               	movwf	_state+1,c
  5027  002E38  0E00               	movlw	0
  5028  002E3A  6E6D               	movwf	_state,c
  5029                           
  5030                           ;main.c: 1085: assembly_step = 0;
  5031  002E3C  0E00               	movlw	0
  5032  002E3E  6E6C               	movwf	_assembly_step+1,c
  5033  002E40  0E00               	movlw	0
  5034  002E42  6E6B               	movwf	_assembly_step,c
  5035                           
  5036                           ;main.c: 1086: counter_step = 0;
  5037  002E44  0E00               	movlw	0
  5038  002E46  6E68               	movwf	_counter_step+1,c
  5039  002E48  0E00               	movlw	0
  5040  002E4A  6E67               	movwf	_counter_step,c
  5041                           
  5042                           ;main.c: 1088: valid = 0;
  5043  002E4C  0E00               	movlw	0
  5044  002E4E  6E66               	movwf	_valid+1,c
  5045  002E50  0E00               	movlw	0
  5046  002E52  6E65               	movwf	_valid,c
  5047                           
  5048                           ;main.c: 1089: number = 0;
  5049  002E54  0E00               	movlw	0
  5050  002E56  6E7E               	movwf	_number+1,c
  5051  002E58  0E00               	movlw	0
  5052  002E5A  6E7D               	movwf	_number,c
  5053                           
  5054                           ;main.c: 1090: total_number=0;
  5055  002E5C  0E00               	movlw	0
  5056  002E5E  6E64               	movwf	_total_number+1,c
  5057  002E60  0E00               	movlw	0
  5058  002E62  6E63               	movwf	_total_number,c
  5059                           
  5060                           ;main.c: 1092: B=0,N=0,S=0,W=0;
  5061  002E64  0E00               	movlw	0
  5062  002E66  6E60               	movwf	_B+1,c
  5063  002E68  0E00               	movlw	0
  5064  002E6A  6E5F               	movwf	_B,c
  5065  002E6C  0E00               	movlw	0
  5066  002E6E  6E5E               	movwf	_N+1,c
  5067  002E70  0E00               	movlw	0
  5068  002E72  6E5D               	movwf	_N,c
  5069  002E74  0E00               	movlw	0
  5070  002E76  6E5C               	movwf	_S+1,c
  5071  002E78  0E00               	movlw	0
  5072  002E7A  6E5B               	movwf	_S,c
  5073  002E7C  0E00               	movlw	0
  5074  002E7E  6E5A               	movwf	_W+1,c
  5075  002E80  0E00               	movlw	0
  5076  002E82  6E59               	movwf	_W,c
  5077                           
  5078                           ;main.c: 1094: B_counter= 0;
  5079  002E84  0E00               	movlw	0
  5080  002E86  6F9F               	movwf	(_B_counter+1)& (0+255),b
  5081  002E88  0E00               	movlw	0
  5082  002E8A  6F9E               	movwf	_B_counter& (0+255),b
  5083                           
  5084                           ;main.c: 1095: S_counter= 0;
  5085  002E8C  0E00               	movlw	0
  5086  002E8E  6F9D               	movwf	(_S_counter+1)& (0+255),b
  5087  002E90  0E00               	movlw	0
  5088  002E92  6F9C               	movwf	_S_counter& (0+255),b
  5089                           
  5090                           ;main.c: 1096: N_counter= 0;
  5091  002E94  0E00               	movlw	0
  5092  002E96  6F9B               	movwf	(_N_counter+1)& (0+255),b
  5093  002E98  0E00               	movlw	0
  5094  002E9A  6F9A               	movwf	_N_counter& (0+255),b
  5095                           
  5096                           ;main.c: 1097: W_counter= 0;
  5097  002E9C  0E00               	movlw	0
  5098  002E9E  6F99               	movwf	(_W_counter+1)& (0+255),b
  5099  002EA0  0E00               	movlw	0
  5100  002EA2  6F98               	movwf	_W_counter& (0+255),b
  5101                           
  5102                           ;main.c: 1100: initial_time = 0;
  5103  002EA4  0E00               	movlw	0
  5104  002EA6  6F89               	movwf	(_initial_time+1)& (0+255),b
  5105  002EA8  0E00               	movlw	0
  5106  002EAA  6F88               	movwf	_initial_time& (0+255),b
  5107                           
  5108                           ;main.c: 1101: final_time = 0;
  5109  002EAC  0E00               	movlw	0
  5110  002EAE  6F81               	movwf	(_final_time+1)& (0+255),b
  5111  002EB0  0E00               	movlw	0
  5112  002EB2  6F80               	movwf	_final_time& (0+255),b
  5113                           
  5114                           ;main.c: 1103: for (i=0;i<8;i++){
  5115  002EB4  0E00               	movlw	0
  5116  002EB6  6FAB               	movwf	(_i+1)& (0+255),b
  5117  002EB8  0E00               	movlw	0
  5118  002EBA  6FAA               	movwf	_i& (0+255),b
  5119  002EBC                     l4156:
  5120                           
  5121                           ; BSR set to: 0
  5122  002EBC  51AB               	movf	(_i+1)& (0+255),w,b
  5123  002EBE  E155               	bnz	l445
  5124  002EC0  0E08               	movlw	8
  5125  002EC2  5DAA               	subwf	_i& (0+255),w,b
  5126  002EC4  B0D8               	btfsc	status,0,c
  5127  002EC6  0012               	return	
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;main.c: 1104: compartment_array[i] = 0;
  5131                           
  5132                           ; BSR set to: 0
  5133                           
  5134                           ; BSR set to: 0
  5135  002EC8  90D8               	bcf	status,0,c
  5136  002ECA  35AA               	rlcf	_i& (0+255),w,b
  5137  002ECC  6ED9               	movwf	fsr2l,c
  5138  002ECE  35AB               	rlcf	(_i+1)& (0+255),w,b
  5139  002ED0  6EDA               	movwf	fsr2h,c
  5140  002ED2  0EDF               	movlw	low _compartment_array
  5141  002ED4  26D9               	addwf	fsr2l,f,c
  5142  002ED6  0E00               	movlw	high _compartment_array
  5143  002ED8  22DA               	addwfc	fsr2h,f,c
  5144  002EDA  0E00               	movlw	0
  5145  002EDC  6EDE               	movwf	postinc2,c
  5146  002EDE  0E00               	movlw	0
  5147  002EE0  6EDD               	movwf	postdec2,c
  5148                           
  5149                           ;main.c: 1105: compartment_number[i] = 0;
  5150  002EE2  90D8               	bcf	status,0,c
  5151  002EE4  35AA               	rlcf	_i& (0+255),w,b
  5152  002EE6  6ED9               	movwf	fsr2l,c
  5153  002EE8  35AB               	rlcf	(_i+1)& (0+255),w,b
  5154  002EEA  6EDA               	movwf	fsr2h,c
  5155  002EEC  0E42               	movlw	low _compartment_number
  5156  002EEE  26D9               	addwf	fsr2l,f,c
  5157  002EF0  0E00               	movlw	high _compartment_number
  5158  002EF2  22DA               	addwfc	fsr2h,f,c
  5159  002EF4  0E00               	movlw	0
  5160  002EF6  6EDE               	movwf	postinc2,c
  5161  002EF8  0E00               	movlw	0
  5162  002EFA  6EDD               	movwf	postdec2,c
  5163                           
  5164                           ;main.c: 1106: B_array[i] = 0;
  5165  002EFC  90D8               	bcf	status,0,c
  5166  002EFE  35AA               	rlcf	_i& (0+255),w,b
  5167  002F00  6ED9               	movwf	fsr2l,c
  5168  002F02  35AB               	rlcf	(_i+1)& (0+255),w,b
  5169  002F04  6EDA               	movwf	fsr2h,c
  5170  002F06  0EB4               	movlw	low _B_array
  5171  002F08  26D9               	addwf	fsr2l,f,c
  5172  002F0A  0E01               	movlw	high _B_array
  5173  002F0C  22DA               	addwfc	fsr2h,f,c
  5174  002F0E  0E00               	movlw	0
  5175  002F10  6EDE               	movwf	postinc2,c
  5176  002F12  0E00               	movlw	0
  5177  002F14  6EDD               	movwf	postdec2,c
  5178                           
  5179                           ;main.c: 1107: N_array[i] = 0;
  5180  002F16  90D8               	bcf	status,0,c
  5181  002F18  35AA               	rlcf	_i& (0+255),w,b
  5182  002F1A  6ED9               	movwf	fsr2l,c
  5183  002F1C  35AB               	rlcf	(_i+1)& (0+255),w,b
  5184  002F1E  6EDA               	movwf	fsr2h,c
  5185  002F20  0E94               	movlw	low _N_array
  5186  002F22  26D9               	addwf	fsr2l,f,c
  5187  002F24  0E01               	movlw	high _N_array
  5188  002F26  22DA               	addwfc	fsr2h,f,c
  5189  002F28  0E00               	movlw	0
  5190  002F2A  6EDE               	movwf	postinc2,c
  5191  002F2C  0E00               	movlw	0
  5192  002F2E  6EDD               	movwf	postdec2,c
  5193                           
  5194                           ;main.c: 1108: S_array[i] = 0;
  5195  002F30  90D8               	bcf	status,0,c
  5196  002F32  35AA               	rlcf	_i& (0+255),w,b
  5197  002F34  6ED9               	movwf	fsr2l,c
  5198  002F36  35AB               	rlcf	(_i+1)& (0+255),w,b
  5199  002F38  6EDA               	movwf	fsr2h,c
  5200  002F3A  0EA4               	movlw	low _S_array
  5201  002F3C  26D9               	addwf	fsr2l,f,c
  5202  002F3E  0E01               	movlw	high _S_array
  5203  002F40  22DA               	addwfc	fsr2h,f,c
  5204  002F42  0E00               	movlw	0
  5205  002F44  6EDE               	movwf	postinc2,c
  5206  002F46  0E00               	movlw	0
  5207  002F48  6EDD               	movwf	postdec2,c
  5208                           
  5209                           ;main.c: 1109: W_array[i] = 0;
  5210  002F4A  90D8               	bcf	status,0,c
  5211  002F4C  35AA               	rlcf	_i& (0+255),w,b
  5212  002F4E  6ED9               	movwf	fsr2l,c
  5213  002F50  35AB               	rlcf	(_i+1)& (0+255),w,b
  5214  002F52  6EDA               	movwf	fsr2h,c
  5215  002F54  0E84               	movlw	low _W_array
  5216  002F56  26D9               	addwf	fsr2l,f,c
  5217  002F58  0E01               	movlw	high _W_array
  5218  002F5A  22DA               	addwfc	fsr2h,f,c
  5219  002F5C  0E00               	movlw	0
  5220  002F5E  6EDE               	movwf	postinc2,c
  5221  002F60  0E00               	movlw	0
  5222  002F62  6EDD               	movwf	postdec2,c
  5223                           
  5224                           ; BSR set to: 0
  5225  002F64  4BAA               	infsnz	_i& (0+255),f,b
  5226  002F66  2BAB               	incf	(_i+1)& (0+255),f,b
  5227  002F68  D7A9               	goto	l4156
  5228  002F6A                     l445:
  5229                           
  5230                           ; BSR set to: 0
  5231  002F6A  0012               	return		;funcret
  5232  002F6C                     __end_of_initialize:
  5233                           	opt stack 0
  5234                           tblptru	equ	0xFF8
  5235                           tblptrh	equ	0xFF7
  5236                           tblptrl	equ	0xFF6
  5237                           tablat	equ	0xFF5
  5238                           prodh	equ	0xFF4
  5239                           prodl	equ	0xFF3
  5240                           intcon	equ	0xFF2
  5241                           intcon3	equ	0xFF0
  5242                           indf0	equ	0xFEF
  5243                           postinc0	equ	0xFEE
  5244                           fsr0h	equ	0xFEA
  5245                           fsr0l	equ	0xFE9
  5246                           wreg	equ	0xFE8
  5247                           postdec1	equ	0xFE5
  5248                           fsr1l	equ	0xFE1
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           fsr2h	equ	0xFDA
  5252                           fsr2l	equ	0xFD9
  5253                           status	equ	0xFD8
  5254                           
  5255 ;; *************** function _initLCD *****************
  5256 ;; Defined at:
  5257 ;;		line 60 in file "lcd.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;		None
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      void 
  5264 ;; Registers used:
  5265 ;;		wreg, status,2, status,0, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;Total ram usage:        1 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    6
  5278 ;; This function calls:
  5279 ;;		_lcdInst
  5280 ;; This function is called by:
  5281 ;;		_main
  5282 ;;		_count_gear
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           	psect	text8
  5287  0036F2                     __ptext8:
  5288                           	opt stack 0
  5289  0036F2                     _initLCD:
  5290                           	opt stack 24
  5291                           
  5292                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;incstack = 0
  5296  0036F2  0EC3               	movlw	195
  5297  0036F4  0100               	movlb	0	; () banked
  5298  0036F6  6FBC               	movwf	??_initLCD& (0+255),b
  5299  0036F8  0ECD               	movlw	205
  5300  0036FA                     u5117:
  5301  0036FA  2EE8               	decfsz	wreg,f,c
  5302  0036FC  D7FE               	bra	u5117
  5303  0036FE  2FBC               	decfsz	??_initLCD& (0+255),f,b
  5304  003700  D7FC               	bra	u5117
  5305                           
  5306                           ;lcd.c: 69: lcdInst(0b00110011);
  5307  003702  0E33               	movlw	51
  5308  003704  EC52  F01D         	call	_lcdInst
  5309                           
  5310                           ;lcd.c: 70: lcdInst(0b00110010);
  5311  003708  0E32               	movlw	50
  5312  00370A  EC52  F01D         	call	_lcdInst
  5313                           
  5314                           ;lcd.c: 71: lcdInst(0b00101000);
  5315  00370E  0E28               	movlw	40
  5316  003710  EC52  F01D         	call	_lcdInst
  5317                           
  5318                           ;lcd.c: 72: lcdInst(0b00001111);
  5319  003714  0E0F               	movlw	15
  5320  003716  EC52  F01D         	call	_lcdInst
  5321                           
  5322                           ;lcd.c: 73: lcdInst(0b00000110);
  5323  00371A  0E06               	movlw	6
  5324  00371C  EC52  F01D         	call	_lcdInst
  5325                           
  5326                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5327  003720  0E01               	movlw	1
  5328  003722  EC52  F01D         	call	_lcdInst
  5329  003726  0EC3               	movlw	195
  5330  003728  0100               	movlb	0	; () banked
  5331  00372A  6FBC               	movwf	??_initLCD& (0+255),b
  5332  00372C  0ECD               	movlw	205
  5333  00372E                     u5127:
  5334  00372E  2EE8               	decfsz	wreg,f,c
  5335  003730  D7FE               	bra	u5127
  5336  003732  2FBC               	decfsz	??_initLCD& (0+255),f,b
  5337  003734  D7FC               	bra	u5127
  5338                           
  5339                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5340  003736  0E0F               	movlw	15
  5341  003738  EC52  F01D         	call	_lcdInst
  5342  00373C  0012               	return		;funcret
  5343  00373E                     __end_of_initLCD:
  5344                           	opt stack 0
  5345                           tblptru	equ	0xFF8
  5346                           tblptrh	equ	0xFF7
  5347                           tblptrl	equ	0xFF6
  5348                           tablat	equ	0xFF5
  5349                           prodh	equ	0xFF4
  5350                           prodl	equ	0xFF3
  5351                           intcon	equ	0xFF2
  5352                           intcon3	equ	0xFF0
  5353                           indf0	equ	0xFEF
  5354                           postinc0	equ	0xFEE
  5355                           fsr0h	equ	0xFEA
  5356                           fsr0l	equ	0xFE9
  5357                           wreg	equ	0xFE8
  5358                           postdec1	equ	0xFE5
  5359                           fsr1l	equ	0xFE1
  5360                           postinc2	equ	0xFDE
  5361                           postdec2	equ	0xFDD
  5362                           fsr2h	equ	0xFDA
  5363                           fsr2l	equ	0xFD9
  5364                           status	equ	0xFD8
  5365                           
  5366 ;; *************** function _lcdInst *****************
  5367 ;; Defined at:
  5368 ;;		line 11 in file "lcd.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;  data            1    wreg     unsigned char 
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  data            1    2[BANK0 ] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, status,2, status,0, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;Total ram usage:        1 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    5
  5389 ;; This function calls:
  5390 ;;		_lcdNibble
  5391 ;; This function is called by:
  5392 ;;		_initLCD
  5393 ;;		_main
  5394 ;;		_lcd_set_cursor
  5395 ;;		_lcd_shift_cursor
  5396 ;;		_lcd_shift_display
  5397 ;;		_count_gear
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           	psect	text9
  5402  003AA4                     __ptext9:
  5403                           	opt stack 0
  5404  003AA4                     _lcdInst:
  5405                           	opt stack 25
  5406                           
  5407                           ;incstack = 0
  5408                           ;lcdInst@data stored from wreg
  5409  003AA4  0100               	movlb	0	; () banked
  5410  003AA6  6FBB               	movwf	lcdInst@data& (0+255),b
  5411                           
  5412                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5413  003AA8  948C               	bcf	3980,2,c	;volatile
  5414                           
  5415                           ;lcd.c: 20: lcdNibble(data);
  5416  003AAA  0100               	movlb	0	; () banked
  5417  003AAC  51BB               	movf	lcdInst@data& (0+255),w,b
  5418  003AAE  EC4F  F018         	call	_lcdNibble
  5419                           
  5420                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5421  003AB2  0EC8               	movlw	200
  5422  003AB4                     u5137:
  5423  003AB4  D000               	nop2	
  5424  003AB6  2EE8               	decfsz	wreg,f,c
  5425  003AB8  D7FD               	bra	u5137
  5426  003ABA  0012               	return		;funcret
  5427  003ABC                     __end_of_lcdInst:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           prodh	equ	0xFF4
  5434                           prodl	equ	0xFF3
  5435                           intcon	equ	0xFF2
  5436                           intcon3	equ	0xFF0
  5437                           indf0	equ	0xFEF
  5438                           postinc0	equ	0xFEE
  5439                           fsr0h	equ	0xFEA
  5440                           fsr0l	equ	0xFE9
  5441                           wreg	equ	0xFE8
  5442                           postdec1	equ	0xFE5
  5443                           fsr1l	equ	0xFE1
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _lcdNibble *****************
  5451 ;; Defined at:
  5452 ;;		line 37 in file "lcd.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  data            1    wreg     unsigned char 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  data            1    1[BANK0 ] unsigned char 
  5457 ;;  temp            1    0[BANK0 ] unsigned char 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, status,2, status,0
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;Total ram usage:        2 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    4
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		_lcdInst
  5478 ;;		_putch
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text10
  5483  00309E                     __ptext10:
  5484                           	opt stack 0
  5485  00309E                     _lcdNibble:
  5486                           	opt stack 24
  5487                           
  5488                           ;incstack = 0
  5489                           ;lcdNibble@data stored from wreg
  5490  00309E  0100               	movlb	0	; () banked
  5491  0030A0  6FBA               	movwf	lcdNibble@data& (0+255),b
  5492                           
  5493                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  5494  0030A2  0100               	movlb	0	; () banked
  5495  0030A4  51BA               	movf	lcdNibble@data& (0+255),w,b
  5496  0030A6  0BF0               	andlw	240
  5497  0030A8  6FB9               	movwf	lcdNibble@temp& (0+255),b
  5498                           
  5499                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  5500  0030AA  508C               	movf	3980,w,c	;volatile
  5501  0030AC  0B0F               	andlw	15
  5502  0030AE  6E8C               	movwf	3980,c	;volatile
  5503                           
  5504                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  5505  0030B0  51B9               	movf	lcdNibble@temp& (0+255),w,b
  5506  0030B2  108C               	iorwf	3980,w,c	;volatile
  5507  0030B4  6E8C               	movwf	3980,c	;volatile
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5511  0030B6  0E00               	movlw	0
  5512  0030B8  BEF2               	btfsc	intcon,7,c	;volatile
  5513  0030BA  0E01               	movlw	1
  5514  0030BC  6FAE               	movwf	_LCDinterruptState& (0+255),b
  5515                           
  5516                           ; BSR set to: 0
  5517  0030BE  9EF2               	bcf	intcon,7,c	;volatile
  5518                           
  5519                           ; BSR set to: 0
  5520  0030C0  868C               	bsf	3980,3,c	;volatile
  5521                           
  5522                           ; BSR set to: 0
  5523  0030C2  0E53               	movlw	83
  5524  0030C4                     u5147:
  5525  0030C4  2EE8               	decfsz	wreg,f,c
  5526  0030C6  D7FE               	bra	u5147
  5527  0030C8  F000               	nop	
  5528  0030CA  968C               	bcf	3980,3,c	;volatile
  5529  0030CC  0EC8               	movlw	200
  5530  0030CE                     u5157:
  5531  0030CE  D000               	nop2	
  5532  0030D0  2EE8               	decfsz	wreg,f,c
  5533  0030D2  D7FD               	bra	u5157
  5534  0030D4  0100               	movlb	0	; () banked
  5535  0030D6  B1AE               	btfsc	_LCDinterruptState& (0+255),0,b
  5536  0030D8  D002               	bra	u2385
  5537  0030DA  9EF2               	bcf	intcon,7,c	;volatile
  5538  0030DC  D001               	bra	u2386
  5539  0030DE                     u2385:
  5540  0030DE  8EF2               	bsf	intcon,7,c	;volatile
  5541  0030E0                     u2386:
  5542                           
  5543                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  5544  0030E0  0100               	movlb	0	; () banked
  5545  0030E2  39BA               	swapf	lcdNibble@data& (0+255),w,b
  5546  0030E4  0BF0               	andlw	240
  5547  0030E6  6FBA               	movwf	lcdNibble@data& (0+255),b
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  5551  0030E8  51BA               	movf	lcdNibble@data& (0+255),w,b
  5552  0030EA  0BF0               	andlw	240
  5553  0030EC  6FB9               	movwf	lcdNibble@temp& (0+255),b
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  5557  0030EE  508C               	movf	3980,w,c	;volatile
  5558  0030F0  0B0F               	andlw	15
  5559  0030F2  6E8C               	movwf	3980,c	;volatile
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  5563  0030F4  51B9               	movf	lcdNibble@temp& (0+255),w,b
  5564  0030F6  108C               	iorwf	3980,w,c	;volatile
  5565  0030F8  6E8C               	movwf	3980,c	;volatile
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5569  0030FA  0E00               	movlw	0
  5570  0030FC  BEF2               	btfsc	intcon,7,c	;volatile
  5571  0030FE  0E01               	movlw	1
  5572  003100  6FAE               	movwf	_LCDinterruptState& (0+255),b
  5573                           
  5574                           ; BSR set to: 0
  5575  003102  9EF2               	bcf	intcon,7,c	;volatile
  5576                           
  5577                           ; BSR set to: 0
  5578  003104  868C               	bsf	3980,3,c	;volatile
  5579                           
  5580                           ; BSR set to: 0
  5581  003106  0E53               	movlw	83
  5582  003108                     u5167:
  5583  003108  2EE8               	decfsz	wreg,f,c
  5584  00310A  D7FE               	bra	u5167
  5585  00310C  F000               	nop	
  5586  00310E  968C               	bcf	3980,3,c	;volatile
  5587  003110  0EC8               	movlw	200
  5588  003112                     u5177:
  5589  003112  D000               	nop2	
  5590  003114  2EE8               	decfsz	wreg,f,c
  5591  003116  D7FD               	bra	u5177
  5592  003118  0100               	movlb	0	; () banked
  5593  00311A  B1AE               	btfsc	_LCDinterruptState& (0+255),0,b
  5594  00311C  D002               	bra	u2395
  5595  00311E  9EF2               	bcf	intcon,7,c	;volatile
  5596  003120  D001               	bra	u2396
  5597  003122                     u2395:
  5598  003122  8EF2               	bsf	intcon,7,c	;volatile
  5599  003124                     u2396:
  5600  003124  0012               	return		;funcret
  5601  003126                     __end_of_lcdNibble:
  5602                           	opt stack 0
  5603                           tblptru	equ	0xFF8
  5604                           tblptrh	equ	0xFF7
  5605                           tblptrl	equ	0xFF6
  5606                           tablat	equ	0xFF5
  5607                           prodh	equ	0xFF4
  5608                           prodl	equ	0xFF3
  5609                           intcon	equ	0xFF2
  5610                           intcon3	equ	0xFF0
  5611                           indf0	equ	0xFEF
  5612                           postinc0	equ	0xFEE
  5613                           fsr0h	equ	0xFEA
  5614                           fsr0l	equ	0xFE9
  5615                           wreg	equ	0xFE8
  5616                           postdec1	equ	0xFE5
  5617                           fsr1l	equ	0xFE1
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           fsr2h	equ	0xFDA
  5621                           fsr2l	equ	0xFD9
  5622                           status	equ	0xFD8
  5623                           
  5624 ;; *************** function _get_RTC_final *****************
  5625 ;; Defined at:
  5626 ;;		line 1236 in file "main.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;		None
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;		None
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;Total ram usage:        1 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; Hardware stack levels required when called:    6
  5647 ;; This function calls:
  5648 ;;		_I2C_Master_Read
  5649 ;;		_I2C_Master_Start
  5650 ;;		_I2C_Master_Stop
  5651 ;;		_I2C_Master_Write
  5652 ;;		___awdiv
  5653 ;;		___wmul
  5654 ;; This function is called by:
  5655 ;;		_main
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text11
  5660  002F6C                     __ptext11:
  5661                           	opt stack 0
  5662  002F6C                     _get_RTC_final:
  5663                           	opt stack 24
  5664                           
  5665                           ;main.c: 1237: I2C_Master_Start();
  5666                           
  5667                           ;incstack = 0
  5668  002F6C  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  5669                           
  5670                           ;main.c: 1238: I2C_Master_Write(0b11010000);
  5671  002F70  0E00               	movlw	0
  5672  002F72  0100               	movlb	0	; () banked
  5673  002F74  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  5674  002F76  0ED0               	movlw	208
  5675  002F78  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  5676  002F7A  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  5677                           
  5678                           ;main.c: 1239: I2C_Master_Write(0x00);
  5679  002F7E  0E00               	movlw	0
  5680  002F80  0100               	movlb	0	; () banked
  5681  002F82  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  5682  002F84  0E00               	movlw	0
  5683  002F86  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  5684  002F88  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  5685                           
  5686                           ;main.c: 1240: I2C_Master_Stop();
  5687  002F8C  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  5688                           
  5689                           ;main.c: 1243: I2C_Master_Start();
  5690  002F90  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  5691                           
  5692                           ;main.c: 1244: I2C_Master_Write(0b11010001);
  5693  002F94  0E00               	movlw	0
  5694  002F96  0100               	movlb	0	; () banked
  5695  002F98  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  5696  002F9A  0ED1               	movlw	209
  5697  002F9C  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  5698  002F9E  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  5699                           
  5700                           ;main.c: 1245: for(i = 0; i < 6; i++){
  5701  002FA2  0E00               	movlw	0
  5702  002FA4  0100               	movlb	0	; () banked
  5703  002FA6  6FAB               	movwf	(_i+1)& (0+255),b
  5704  002FA8  0E00               	movlw	0
  5705  002FAA  6FAA               	movwf	_i& (0+255),b
  5706  002FAC                     l4136:
  5707                           
  5708                           ; BSR set to: 0
  5709  002FAC  51AB               	movf	(_i+1)& (0+255),w,b
  5710  002FAE  E112               	bnz	l4146
  5711  002FB0  0E06               	movlw	6
  5712  002FB2  5DAA               	subwf	_i& (0+255),w,b
  5713  002FB4  B0D8               	btfsc	status,0,c
  5714  002FB6  D00E               	goto	u3100
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;main.c: 1246: time[i] = I2C_Master_Read(0);
  5718                           
  5719                           ; BSR set to: 0
  5720                           
  5721                           ; BSR set to: 0
  5722  002FB8  0E52               	movlw	low _time
  5723  002FBA  25AA               	addwf	_i& (0+255),w,b
  5724  002FBC  6ED9               	movwf	fsr2l,c
  5725  002FBE  0E00               	movlw	high _time
  5726  002FC0  21AB               	addwfc	(_i+1)& (0+255),w,b
  5727  002FC2  6EDA               	movwf	fsr2h,c
  5728  002FC4  0E00               	movlw	0
  5729  002FC6  ECB3  F01C         	call	_I2C_Master_Read
  5730  002FCA  6EDF               	movwf	indf2,c
  5731  002FCC  0100               	movlb	0	; () banked
  5732  002FCE  4BAA               	infsnz	_i& (0+255),f,b
  5733  002FD0  2BAB               	incf	(_i+1)& (0+255),f,b
  5734  002FD2  D7EC               	goto	l4136
  5735  002FD4                     u3100:
  5736  002FD4                     l4146:
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;main.c: 1247: }
  5740                           ;main.c: 1248: time[6] = I2C_Master_Read(1);
  5741  002FD4  0E01               	movlw	1
  5742  002FD6  ECB3  F01C         	call	_I2C_Master_Read
  5743  002FDA  6E58               	movwf	_time+6,c
  5744                           
  5745                           ;main.c: 1249: I2C_Master_Stop();
  5746  002FDC  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  5747                           
  5748                           ;main.c: 1251: hr_final = time[2]/16*10+time[2]%16;
  5749  002FE0  C054  F0C7         	movff	_time+2,??_get_RTC_final
  5750  002FE4  0E0F               	movlw	15
  5751  002FE6  0100               	movlb	0	; () banked
  5752  002FE8  17C7               	andwf	??_get_RTC_final& (0+255),f,b
  5753  002FEA  0E00               	movlw	0
  5754  002FEC  6FBC               	movwf	(___awdiv@divisor+1)& (0+255),b
  5755  002FEE  0E10               	movlw	16
  5756  002FF0  6FBB               	movwf	___awdiv@divisor& (0+255),b
  5757  002FF2  C054  F0B9         	movff	_time+2,___awdiv@dividend
  5758  002FF6  6BBA               	clrf	(___awdiv@dividend+1)& (0+255),b
  5759  002FF8  EC93  F018         	call	___awdiv	;wreg free
  5760  002FFC  C0B9  F0C1         	movff	?___awdiv,___wmul@multiplier
  5761  003000  C0BA  F0C2         	movff	?___awdiv+1,___wmul@multiplier+1
  5762  003004  0E00               	movlw	0
  5763  003006  0100               	movlb	0	; () banked
  5764  003008  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5765  00300A  0E0A               	movlw	10
  5766  00300C  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  5767  00300E  ECC8  F01C         	call	___wmul	;wreg free
  5768  003012  0100               	movlb	0	; () banked
  5769  003014  51C7               	movf	??_get_RTC_final& (0+255),w,b
  5770  003016  25C1               	addwf	?___wmul& (0+255),w,b
  5771  003018  6F86               	movwf	_hr_final& (0+255),b
  5772  00301A  0E00               	movlw	0
  5773  00301C  21C2               	addwfc	(?___wmul+1)& (0+255),w,b
  5774  00301E  6F87               	movwf	(_hr_final+1)& (0+255),b
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;main.c: 1252: min_final = time[1]/16*10 + time[1]%16;
  5778  003020  C053  F0C7         	movff	_time+1,??_get_RTC_final
  5779  003024  0E0F               	movlw	15
  5780  003026  17C7               	andwf	??_get_RTC_final& (0+255),f,b
  5781  003028  0E00               	movlw	0
  5782  00302A  6FBC               	movwf	(___awdiv@divisor+1)& (0+255),b
  5783  00302C  0E10               	movlw	16
  5784  00302E  6FBB               	movwf	___awdiv@divisor& (0+255),b
  5785  003030  C053  F0B9         	movff	_time+1,___awdiv@dividend
  5786  003034  6BBA               	clrf	(___awdiv@dividend+1)& (0+255),b
  5787  003036  EC93  F018         	call	___awdiv	;wreg free
  5788  00303A  C0B9  F0C1         	movff	?___awdiv,___wmul@multiplier
  5789  00303E  C0BA  F0C2         	movff	?___awdiv+1,___wmul@multiplier+1
  5790  003042  0E00               	movlw	0
  5791  003044  0100               	movlb	0	; () banked
  5792  003046  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5793  003048  0E0A               	movlw	10
  5794  00304A  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  5795  00304C  ECC8  F01C         	call	___wmul	;wreg free
  5796  003050  0100               	movlb	0	; () banked
  5797  003052  51C7               	movf	??_get_RTC_final& (0+255),w,b
  5798  003054  25C1               	addwf	?___wmul& (0+255),w,b
  5799  003056  6F84               	movwf	_min_final& (0+255),b
  5800  003058  0E00               	movlw	0
  5801  00305A  21C2               	addwfc	(?___wmul+1)& (0+255),w,b
  5802  00305C  6F85               	movwf	(_min_final+1)& (0+255),b
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;main.c: 1253: sec_final = time[0]/16*10 + time[0]%16;
  5806  00305E  C052  F0C7         	movff	_time,??_get_RTC_final
  5807  003062  0E0F               	movlw	15
  5808  003064  17C7               	andwf	??_get_RTC_final& (0+255),f,b
  5809  003066  0E00               	movlw	0
  5810  003068  6FBC               	movwf	(___awdiv@divisor+1)& (0+255),b
  5811  00306A  0E10               	movlw	16
  5812  00306C  6FBB               	movwf	___awdiv@divisor& (0+255),b
  5813  00306E  C052  F0B9         	movff	_time,___awdiv@dividend
  5814  003072  6BBA               	clrf	(___awdiv@dividend+1)& (0+255),b
  5815  003074  EC93  F018         	call	___awdiv	;wreg free
  5816  003078  C0B9  F0C1         	movff	?___awdiv,___wmul@multiplier
  5817  00307C  C0BA  F0C2         	movff	?___awdiv+1,___wmul@multiplier+1
  5818  003080  0E00               	movlw	0
  5819  003082  0100               	movlb	0	; () banked
  5820  003084  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5821  003086  0E0A               	movlw	10
  5822  003088  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  5823  00308A  ECC8  F01C         	call	___wmul	;wreg free
  5824  00308E  0100               	movlb	0	; () banked
  5825  003090  51C7               	movf	??_get_RTC_final& (0+255),w,b
  5826  003092  25C1               	addwf	?___wmul& (0+255),w,b
  5827  003094  6F82               	movwf	_sec_final& (0+255),b
  5828  003096  0E00               	movlw	0
  5829  003098  21C2               	addwfc	(?___wmul+1)& (0+255),w,b
  5830  00309A  6F83               	movwf	(_sec_final+1)& (0+255),b
  5831                           
  5832                           ; BSR set to: 0
  5833  00309C  0012               	return		;funcret
  5834  00309E                     __end_of_get_RTC_final:
  5835                           	opt stack 0
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           intcon	equ	0xFF2
  5843                           intcon3	equ	0xFF0
  5844                           indf0	equ	0xFEF
  5845                           postinc0	equ	0xFEE
  5846                           fsr0h	equ	0xFEA
  5847                           fsr0l	equ	0xFE9
  5848                           wreg	equ	0xFE8
  5849                           postdec1	equ	0xFE5
  5850                           fsr1l	equ	0xFE1
  5851                           indf2	equ	0xFDF
  5852                           postinc2	equ	0xFDE
  5853                           postdec2	equ	0xFDD
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function ___wmul *****************
  5859 ;; Defined at:
  5860 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  multiplier      2    8[BANK0 ] unsigned int 
  5863 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  product         2   12[BANK0 ] unsigned int 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  2    8[BANK0 ] unsigned int 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, prodl, prodh
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5875 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;Total ram usage:        6 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    4
  5882 ;; This function calls:
  5883 ;;		Nothing
  5884 ;; This function is called by:
  5885 ;;		_get_RTC_final
  5886 ;;		_printf
  5887 ;;		_get_RTC_initial
  5888 ;;		_store_prev
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text12
  5893  003990                     __ptext12:
  5894                           	opt stack 0
  5895  003990                     ___wmul:
  5896                           	opt stack 25
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;incstack = 0
  5900  003990  0100               	movlb	0	; () banked
  5901  003992  51C1               	movf	___wmul@multiplier& (0+255),w,b
  5902  003994  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  5903  003996  CFF3 F0C5          	movff	prodl,___wmul@product
  5904  00399A  CFF4 F0C6          	movff	prodh,___wmul@product+1
  5905  00399E  51C1               	movf	___wmul@multiplier& (0+255),w,b
  5906  0039A0  03C4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5907  0039A2  50F3               	movf	prodl,w,c
  5908  0039A4  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  5909  0039A6  51C2               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5910  0039A8  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  5911  0039AA  50F3               	movf	prodl,w,c
  5912  0039AC  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  5913                           
  5914                           ; BSR set to: 0
  5915  0039AE  C0C5  F0C1         	movff	___wmul@product,?___wmul
  5916  0039B2  C0C6  F0C2         	movff	___wmul@product+1,?___wmul+1
  5917  0039B6  0012               	return	
  5918  0039B8                     __end_of___wmul:
  5919                           	opt stack 0
  5920                           tblptru	equ	0xFF8
  5921                           tblptrh	equ	0xFF7
  5922                           tblptrl	equ	0xFF6
  5923                           tablat	equ	0xFF5
  5924                           prodh	equ	0xFF4
  5925                           prodl	equ	0xFF3
  5926                           intcon	equ	0xFF2
  5927                           intcon3	equ	0xFF0
  5928                           indf0	equ	0xFEF
  5929                           postinc0	equ	0xFEE
  5930                           fsr0h	equ	0xFEA
  5931                           fsr0l	equ	0xFE9
  5932                           wreg	equ	0xFE8
  5933                           postdec1	equ	0xFE5
  5934                           fsr1l	equ	0xFE1
  5935                           indf2	equ	0xFDF
  5936                           postinc2	equ	0xFDE
  5937                           postdec2	equ	0xFDD
  5938                           fsr2h	equ	0xFDA
  5939                           fsr2l	equ	0xFD9
  5940                           status	equ	0xFD8
  5941                           
  5942 ;; *************** function ___awdiv *****************
  5943 ;; Defined at:
  5944 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  dividend        2    0[BANK0 ] int 
  5947 ;;  divisor         2    2[BANK0 ] int 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  quotient        2    6[BANK0 ] int 
  5950 ;;  sign            1    5[BANK0 ] unsigned char 
  5951 ;;  counter         1    4[BANK0 ] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  2    0[BANK0 ] int 
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, status,0
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5961 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;Total ram usage:        8 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    4
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_get_RTC_final
  5972 ;;		_get_RTC_initial
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text13
  5977  003126                     __ptext13:
  5978                           	opt stack 0
  5979  003126                     ___awdiv:
  5980                           	opt stack 25
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;incstack = 0
  5984  003126  0E00               	movlw	0
  5985  003128  0100               	movlb	0	; () banked
  5986  00312A  6FBE               	movwf	___awdiv@sign& (0+255),b
  5987                           
  5988                           ; BSR set to: 0
  5989  00312C  AFBC               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5990  00312E  D006               	goto	l1033
  5991                           
  5992                           ; BSR set to: 0
  5993  003130  6DBB               	negf	___awdiv@divisor& (0+255),b
  5994  003132  1FBC               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5995  003134  B0D8               	btfsc	status,0,c
  5996  003136  2BBC               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5997                           
  5998                           ; BSR set to: 0
  5999  003138  0E01               	movlw	1
  6000  00313A  6FBE               	movwf	___awdiv@sign& (0+255),b
  6001  00313C                     l1033:
  6002                           
  6003                           ; BSR set to: 0
  6004                           
  6005                           ; BSR set to: 0
  6006  00313C  AFBA               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6007  00313E  D006               	goto	l1034
  6008                           
  6009                           ; BSR set to: 0
  6010  003140  6DB9               	negf	___awdiv@dividend& (0+255),b
  6011  003142  1FBA               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6012  003144  B0D8               	btfsc	status,0,c
  6013  003146  2BBA               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6014                           
  6015                           ; BSR set to: 0
  6016  003148  0E01               	movlw	1
  6017  00314A  1BBE               	xorwf	___awdiv@sign& (0+255),f,b
  6018  00314C                     l1034:
  6019                           
  6020                           ; BSR set to: 0
  6021                           
  6022                           ; BSR set to: 0
  6023  00314C  0E00               	movlw	0
  6024  00314E  6FC0               	movwf	(___awdiv@quotient+1)& (0+255),b
  6025  003150  0E00               	movlw	0
  6026  003152  6FBF               	movwf	___awdiv@quotient& (0+255),b
  6027                           
  6028                           ; BSR set to: 0
  6029  003154  51BB               	movf	___awdiv@divisor& (0+255),w,b
  6030  003156  11BC               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6031  003158  B4D8               	btfsc	status,2,c
  6032  00315A  D01C               	goto	l1041
  6033                           
  6034                           ; BSR set to: 0
  6035  00315C  0E01               	movlw	1
  6036  00315E  6FBD               	movwf	___awdiv@counter& (0+255),b
  6037  003160  D004               	goto	l1036
  6038  003162                     
  6039                           ; BSR set to: 0
  6040                           
  6041                           ; BSR set to: 0
  6042  003162  90D8               	bcf	status,0,c
  6043  003164  37BB               	rlcf	___awdiv@divisor& (0+255),f,b
  6044  003166  37BC               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6045  003168  2BBD               	incf	___awdiv@counter& (0+255),f,b
  6046  00316A                     l1036:
  6047                           
  6048                           ; BSR set to: 0
  6049                           
  6050                           ; BSR set to: 0
  6051  00316A  AFBC               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6052  00316C  D7FA               	goto	l1037
  6053  00316E                     u2520:
  6054                           
  6055                           ; BSR set to: 0
  6056                           
  6057                           ; BSR set to: 0
  6058                           
  6059                           ; BSR set to: 0
  6060  00316E  90D8               	bcf	status,0,c
  6061  003170  37BF               	rlcf	___awdiv@quotient& (0+255),f,b
  6062  003172  37C0               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6063                           
  6064                           ; BSR set to: 0
  6065  003174  51BB               	movf	___awdiv@divisor& (0+255),w,b
  6066  003176  5DB9               	subwf	___awdiv@dividend& (0+255),w,b
  6067  003178  51BC               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6068  00317A  59BA               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6069  00317C  A0D8               	btfss	status,0,c
  6070  00317E  D005               	goto	l1040
  6071                           
  6072                           ; BSR set to: 0
  6073  003180  51BB               	movf	___awdiv@divisor& (0+255),w,b
  6074  003182  5FB9               	subwf	___awdiv@dividend& (0+255),f,b
  6075  003184  51BC               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6076  003186  5BBA               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6077                           
  6078                           ; BSR set to: 0
  6079  003188  81BF               	bsf	___awdiv@quotient& (0+255),0,b
  6080  00318A                     l1040:
  6081                           
  6082                           ; BSR set to: 0
  6083                           
  6084                           ; BSR set to: 0
  6085  00318A  90D8               	bcf	status,0,c
  6086  00318C  33BC               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6087  00318E  33BB               	rrcf	___awdiv@divisor& (0+255),f,b
  6088                           
  6089                           ; BSR set to: 0
  6090  003190  2FBD               	decfsz	___awdiv@counter& (0+255),f,b
  6091  003192  D7ED               	goto	u2520
  6092  003194                     l1041:
  6093                           
  6094                           ; BSR set to: 0
  6095                           
  6096                           ; BSR set to: 0
  6097                           
  6098                           ; BSR set to: 0
  6099  003194  51BE               	movf	___awdiv@sign& (0+255),w,b
  6100  003196  B4D8               	btfsc	status,2,c
  6101  003198  D004               	goto	l1042
  6102                           
  6103                           ; BSR set to: 0
  6104  00319A  6DBF               	negf	___awdiv@quotient& (0+255),b
  6105  00319C  1FC0               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6106  00319E  B0D8               	btfsc	status,0,c
  6107  0031A0  2BC0               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6108  0031A2                     l1042:
  6109                           
  6110                           ; BSR set to: 0
  6111                           
  6112                           ; BSR set to: 0
  6113  0031A2  C0BF  F0B9         	movff	___awdiv@quotient,?___awdiv
  6114  0031A6  C0C0  F0BA         	movff	___awdiv@quotient+1,?___awdiv+1
  6115  0031AA  0012               	return	
  6116  0031AC                     __end_of___awdiv:
  6117                           	opt stack 0
  6118                           tblptru	equ	0xFF8
  6119                           tblptrh	equ	0xFF7
  6120                           tblptrl	equ	0xFF6
  6121                           tablat	equ	0xFF5
  6122                           prodh	equ	0xFF4
  6123                           prodl	equ	0xFF3
  6124                           intcon	equ	0xFF2
  6125                           intcon3	equ	0xFF0
  6126                           indf0	equ	0xFEF
  6127                           postinc0	equ	0xFEE
  6128                           fsr0h	equ	0xFEA
  6129                           fsr0l	equ	0xFE9
  6130                           wreg	equ	0xFE8
  6131                           postdec1	equ	0xFE5
  6132                           fsr1l	equ	0xFE1
  6133                           indf2	equ	0xFDF
  6134                           postinc2	equ	0xFDE
  6135                           postdec2	equ	0xFDD
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _I2C_Master_Read *****************
  6141 ;; Defined at:
  6142 ;;		line 120 in file "I2C.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  ackBit          1    wreg     unsigned char 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  ackBit          1    1[BANK0 ] unsigned char 
  6147 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  1    wreg      unsigned char 
  6150 ;; Registers used:
  6151 ;;		wreg, status,2, status,0, cstack
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6161 ;;Total ram usage:        2 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    5
  6164 ;; This function calls:
  6165 ;;		_I2C_Master_Wait
  6166 ;; This function is called by:
  6167 ;;		_main
  6168 ;;		_get_RTC_final
  6169 ;;		_get_RTC_initial
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text14
  6174  003966                     __ptext14:
  6175                           	opt stack 0
  6176  003966                     _I2C_Master_Read:
  6177                           	opt stack 24
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;incstack = 0
  6181                           ;I2C_Master_Read@ackBit stored from wreg
  6182  003966  0100               	movlb	0	; () banked
  6183  003968  6FBA               	movwf	I2C_Master_Read@ackBit& (0+255),b
  6184                           
  6185                           ;I2C.c: 130: unsigned char receivedByte;
  6186                           ;I2C.c: 132: I2C_Master_Wait();
  6187  00396A  EC5E  F01D         	call	_I2C_Master_Wait	;wreg free
  6188                           
  6189                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  6190  00396E  86C5               	bsf	4037,3,c	;volatile
  6191                           
  6192                           ;I2C.c: 135: I2C_Master_Wait();
  6193  003970  EC5E  F01D         	call	_I2C_Master_Wait	;wreg free
  6194                           
  6195                           ;I2C.c: 136: receivedByte = SSPBUF;
  6196  003974  CFC9 F0BB          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  6197                           
  6198                           ;I2C.c: 138: I2C_Master_Wait();
  6199  003978  EC5E  F01D         	call	_I2C_Master_Wait	;wreg free
  6200                           
  6201                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  6202  00397C  0100               	movlb	0	; () banked
  6203  00397E  B1BA               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  6204  003980  D002               	bra	u2445
  6205  003982  9AC5               	bcf	4037,5,c	;volatile
  6206  003984  D001               	bra	u2446
  6207  003986                     u2445:
  6208  003986  8AC5               	bsf	4037,5,c	;volatile
  6209  003988                     u2446:
  6210                           
  6211                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  6212  003988  88C5               	bsf	4037,4,c	;volatile
  6213                           
  6214                           ;I2C.c: 142: return receivedByte;
  6215  00398A  0100               	movlb	0	; () banked
  6216  00398C  51BB               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  6217  00398E  0012               	return	
  6218  003990                     __end_of_I2C_Master_Read:
  6219                           	opt stack 0
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           intcon3	equ	0xFF0
  6228                           indf0	equ	0xFEF
  6229                           postinc0	equ	0xFEE
  6230                           fsr0h	equ	0xFEA
  6231                           fsr0l	equ	0xFE9
  6232                           wreg	equ	0xFE8
  6233                           postdec1	equ	0xFE5
  6234                           fsr1l	equ	0xFE1
  6235                           indf2	equ	0xFDF
  6236                           postinc2	equ	0xFDE
  6237                           postdec2	equ	0xFDD
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _I2C_sendData *****************
  6243 ;; Defined at:
  6244 ;;		line 1259 in file "main.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  char_data       1    wreg     unsigned char 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  char_data       1    3[BANK0 ] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;Total ram usage:        1 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    6
  6265 ;; This function calls:
  6266 ;;		_I2C_Master_Start
  6267 ;;		_I2C_Master_Stop
  6268 ;;		_I2C_Master_Write
  6269 ;; This function is called by:
  6270 ;;		_main
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           	psect	text15
  6275  0039B8                     __ptext15:
  6276                           	opt stack 0
  6277  0039B8                     _I2C_sendData:
  6278                           	opt stack 24
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;incstack = 0
  6282                           ;I2C_sendData@char_data stored from wreg
  6283  0039B8  0100               	movlb	0	; () banked
  6284  0039BA  6FBC               	movwf	I2C_sendData@char_data& (0+255),b
  6285                           
  6286                           ;main.c: 1260: I2C_Master_Start();
  6287  0039BC  EC93  F01D         	call	_I2C_Master_Start	;wreg free
  6288                           
  6289                           ;main.c: 1261: I2C_Master_Write(0b00010000);
  6290  0039C0  0E00               	movlw	0
  6291  0039C2  0100               	movlb	0	; () banked
  6292  0039C4  6FBB               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6293  0039C6  0E10               	movlw	16
  6294  0039C8  6FBA               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6295  0039CA  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  6296                           
  6297                           ;main.c: 1262: I2C_Master_Write(char_data);
  6298  0039CE  C0BC  F0BA         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  6299  0039D2  0100               	movlb	0	; () banked
  6300  0039D4  6BBB               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6301  0039D6  EC85  F01D         	call	_I2C_Master_Write	;wreg free
  6302                           
  6303                           ;main.c: 1263: I2C_Master_Stop();
  6304  0039DA  EC8F  F01D         	call	_I2C_Master_Stop	;wreg free
  6305  0039DE  0012               	return		;funcret
  6306  0039E0                     __end_of_I2C_sendData:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           prodh	equ	0xFF4
  6313                           prodl	equ	0xFF3
  6314                           intcon	equ	0xFF2
  6315                           intcon3	equ	0xFF0
  6316                           indf0	equ	0xFEF
  6317                           postinc0	equ	0xFEE
  6318                           fsr0h	equ	0xFEA
  6319                           fsr0l	equ	0xFE9
  6320                           wreg	equ	0xFE8
  6321                           postdec1	equ	0xFE5
  6322                           fsr1l	equ	0xFE1
  6323                           indf2	equ	0xFDF
  6324                           postinc2	equ	0xFDE
  6325                           postdec2	equ	0xFDD
  6326                           fsr2h	equ	0xFDA
  6327                           fsr2l	equ	0xFD9
  6328                           status	equ	0xFD8
  6329                           
  6330 ;; *************** function _I2C_Master_Write *****************
  6331 ;; Defined at:
  6332 ;;		line 108 in file "I2C.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;		None
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      void 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0, cstack
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6346 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;Total ram usage:        2 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    5
  6353 ;; This function calls:
  6354 ;;		_I2C_Master_Wait
  6355 ;; This function is called by:
  6356 ;;		_main
  6357 ;;		_get_RTC_final
  6358 ;;		_I2C_sendData
  6359 ;;		_initRamp
  6360 ;;		_ramp_Rotate
  6361 ;;		_RTC_setTime
  6362 ;;		_get_RTC_initial
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text16
  6367  003B0A                     __ptext16:
  6368                           	opt stack 0
  6369  003B0A                     _I2C_Master_Write:
  6370                           	opt stack 24
  6371                           
  6372                           ;I2C.c: 116: I2C_Master_Wait();
  6373                           
  6374                           ;incstack = 0
  6375  003B0A  EC5E  F01D         	call	_I2C_Master_Wait	;wreg free
  6376                           
  6377                           ;I2C.c: 117: SSPBUF = byteToWrite;
  6378  003B0E  C0BA  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  6379  003B12  0012               	return		;funcret
  6380  003B14                     __end_of_I2C_Master_Write:
  6381                           	opt stack 0
  6382                           tblptru	equ	0xFF8
  6383                           tblptrh	equ	0xFF7
  6384                           tblptrl	equ	0xFF6
  6385                           tablat	equ	0xFF5
  6386                           prodh	equ	0xFF4
  6387                           prodl	equ	0xFF3
  6388                           intcon	equ	0xFF2
  6389                           intcon3	equ	0xFF0
  6390                           indf0	equ	0xFEF
  6391                           postinc0	equ	0xFEE
  6392                           fsr0h	equ	0xFEA
  6393                           fsr0l	equ	0xFE9
  6394                           wreg	equ	0xFE8
  6395                           postdec1	equ	0xFE5
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _I2C_Master_Stop *****************
  6405 ;; Defined at:
  6406 ;;		line 95 in file "I2C.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      void 
  6413 ;; Registers used:
  6414 ;;		wreg, status,2, status,0, cstack
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;Total ram usage:        0 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    5
  6427 ;; This function calls:
  6428 ;;		_I2C_Master_Wait
  6429 ;; This function is called by:
  6430 ;;		_main
  6431 ;;		_get_RTC_final
  6432 ;;		_I2C_sendData
  6433 ;;		_initRamp
  6434 ;;		_ramp_Rotate
  6435 ;;		_RTC_setTime
  6436 ;;		_get_RTC_initial
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           	psect	text17
  6441  003B1E                     __ptext17:
  6442                           	opt stack 0
  6443  003B1E                     _I2C_Master_Stop:
  6444                           	opt stack 24
  6445                           
  6446                           ;I2C.c: 104: I2C_Master_Wait();
  6447                           
  6448                           ;incstack = 0
  6449  003B1E  EC5E  F01D         	call	_I2C_Master_Wait	;wreg free
  6450                           
  6451                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  6452  003B22  84C5               	bsf	4037,2,c	;volatile
  6453  003B24  0012               	return		;funcret
  6454  003B26                     __end_of_I2C_Master_Stop:
  6455                           	opt stack 0
  6456                           tblptru	equ	0xFF8
  6457                           tblptrh	equ	0xFF7
  6458                           tblptrl	equ	0xFF6
  6459                           tablat	equ	0xFF5
  6460                           prodh	equ	0xFF4
  6461                           prodl	equ	0xFF3
  6462                           intcon	equ	0xFF2
  6463                           intcon3	equ	0xFF0
  6464                           indf0	equ	0xFEF
  6465                           postinc0	equ	0xFEE
  6466                           fsr0h	equ	0xFEA
  6467                           fsr0l	equ	0xFE9
  6468                           wreg	equ	0xFE8
  6469                           postdec1	equ	0xFE5
  6470                           fsr1l	equ	0xFE1
  6471                           indf2	equ	0xFDF
  6472                           postinc2	equ	0xFDE
  6473                           postdec2	equ	0xFDD
  6474                           fsr2h	equ	0xFDA
  6475                           fsr2l	equ	0xFD9
  6476                           status	equ	0xFD8
  6477                           
  6478 ;; *************** function _I2C_Master_Start *****************
  6479 ;; Defined at:
  6480 ;;		line 69 in file "I2C.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      void 
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;Total ram usage:        0 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    5
  6501 ;; This function calls:
  6502 ;;		_I2C_Master_Wait
  6503 ;; This function is called by:
  6504 ;;		_main
  6505 ;;		_get_RTC_final
  6506 ;;		_I2C_sendData
  6507 ;;		_initRamp
  6508 ;;		_ramp_Rotate
  6509 ;;		_RTC_setTime
  6510 ;;		_get_RTC_initial
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text18
  6515  003B26                     __ptext18:
  6516                           	opt stack 0
  6517  003B26                     _I2C_Master_Start:
  6518                           	opt stack 24
  6519                           
  6520                           ;I2C.c: 78: I2C_Master_Wait();
  6521                           
  6522                           ;incstack = 0
  6523  003B26  EC5E  F01D         	call	_I2C_Master_Wait	;wreg free
  6524                           
  6525                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  6526  003B2A  80C5               	bsf	4037,0,c	;volatile
  6527  003B2C  0012               	return		;funcret
  6528  003B2E                     __end_of_I2C_Master_Start:
  6529                           	opt stack 0
  6530                           tblptru	equ	0xFF8
  6531                           tblptrh	equ	0xFF7
  6532                           tblptrl	equ	0xFF6
  6533                           tablat	equ	0xFF5
  6534                           prodh	equ	0xFF4
  6535                           prodl	equ	0xFF3
  6536                           intcon	equ	0xFF2
  6537                           intcon3	equ	0xFF0
  6538                           indf0	equ	0xFEF
  6539                           postinc0	equ	0xFEE
  6540                           fsr0h	equ	0xFEA
  6541                           fsr0l	equ	0xFE9
  6542                           wreg	equ	0xFE8
  6543                           postdec1	equ	0xFE5
  6544                           fsr1l	equ	0xFE1
  6545                           indf2	equ	0xFDF
  6546                           postinc2	equ	0xFDE
  6547                           postdec2	equ	0xFDD
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552 ;; *************** function _I2C_Master_Wait *****************
  6553 ;; Defined at:
  6554 ;;		line 51 in file "I2C.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  1    wreg      void 
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;Total ram usage:        1 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    4
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_I2C_Master_Start
  6579 ;;		_I2C_Master_Stop
  6580 ;;		_I2C_Master_Write
  6581 ;;		_I2C_Master_Read
  6582 ;;		_I2C_Master_RepeatedStart
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text19
  6587  003ABC                     __ptext19:
  6588                           	opt stack 0
  6589  003ABC                     _I2C_Master_Wait:
  6590                           	opt stack 24
  6591                           
  6592                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6593                           
  6594                           ;incstack = 0
  6595  003ABC  B4C7               	btfsc	4039,2,c	;volatile
  6596  003ABE  D7FE               	goto	_I2C_Master_Wait
  6597  003AC0  CFC5 F0B9          	movff	4037,??_I2C_Master_Wait	;volatile
  6598  003AC4  0E1F               	movlw	31
  6599  003AC6  0100               	movlb	0	; () banked
  6600  003AC8  17B9               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6601  003ACA  B4D8               	btfsc	status,2,c
  6602  003ACC  0012               	return	
  6603  003ACE  D7F6               	goto	_I2C_Master_Wait
  6604  003AD0                     __end_of_I2C_Master_Wait:
  6605                           	opt stack 0
  6606                           tblptru	equ	0xFF8
  6607                           tblptrh	equ	0xFF7
  6608                           tblptrl	equ	0xFF6
  6609                           tablat	equ	0xFF5
  6610                           prodh	equ	0xFF4
  6611                           prodl	equ	0xFF3
  6612                           intcon	equ	0xFF2
  6613                           intcon3	equ	0xFF0
  6614                           indf0	equ	0xFEF
  6615                           postinc0	equ	0xFEE
  6616                           fsr0h	equ	0xFEA
  6617                           fsr0l	equ	0xFE9
  6618                           wreg	equ	0xFE8
  6619                           postdec1	equ	0xFE5
  6620                           fsr1l	equ	0xFE1
  6621                           indf2	equ	0xFDF
  6622                           postinc2	equ	0xFDE
  6623                           postdec2	equ	0xFDD
  6624                           fsr2h	equ	0xFDA
  6625                           fsr2l	equ	0xFD9
  6626                           status	equ	0xFD8
  6627                           
  6628 ;; *************** function _I2C_Master_Init *****************
  6629 ;; Defined at:
  6630 ;;		line 14 in file "I2C.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;		None
  6635 ;; Return value:  Size  Location     Type
  6636 ;;                  1    wreg      void 
  6637 ;; Registers used:
  6638 ;;		wreg, status,2, status,0, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6644 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;Total ram usage:        8 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    5
  6651 ;; This function calls:
  6652 ;;		___lldiv
  6653 ;; This function is called by:
  6654 ;;		_main
  6655 ;;		_initRamp
  6656 ;;		_ramp_Rotate
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text20
  6661  003590                     __ptext20:
  6662                           	opt stack 0
  6663  003590                     _I2C_Master_Init:
  6664                           	opt stack 25
  6665                           
  6666                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;incstack = 0
  6670  003590  9AC6               	bcf	4038,5,c	;volatile
  6671                           
  6672                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  6673  003592  8694               	bsf	3988,3,c	;volatile
  6674                           
  6675                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  6676  003594  8894               	bsf	3988,4,c	;volatile
  6677                           
  6678                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  6679  003596  0E80               	movlw	128
  6680  003598  6EC7               	movwf	4039,c	;volatile
  6681                           
  6682                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  6683  00359A  0E28               	movlw	40
  6684  00359C  6EC6               	movwf	4038,c	;volatile
  6685                           
  6686                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  6687  00359E  0E00               	movlw	0
  6688  0035A0  6EC5               	movwf	4037,c	;volatile
  6689                           
  6690                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  6691  0035A2  0E00               	movlw	0
  6692  0035A4  0100               	movlb	0	; () banked
  6693  0035A6  6FB9               	movwf	___lldiv@dividend& (0+255),b
  6694  0035A8  0E5A               	movlw	90
  6695  0035AA  6FBA               	movwf	(___lldiv@dividend+1)& (0+255),b
  6696  0035AC  0E62               	movlw	98
  6697  0035AE  6FBB               	movwf	(___lldiv@dividend+2)& (0+255),b
  6698  0035B0  0E02               	movlw	2
  6699  0035B2  6FBC               	movwf	(___lldiv@dividend+3)& (0+255),b
  6700  0035B4  C0C6  F0CA         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  6701  0035B8  C0C7  F0CB         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  6702  0035BC  C0C8  F0CC         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  6703  0035C0  C0C9  F0CD         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  6704  0035C4  0E02               	movlw	2
  6705  0035C6                     u2775:
  6706  0035C6  90D8               	bcf	status,0,c
  6707  0035C8  37CA               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6708  0035CA  37CB               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6709  0035CC  37CC               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6710  0035CE  37CD               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6711  0035D0  2EE8               	decfsz	wreg,f,c
  6712  0035D2  D7F9               	goto	u2775
  6713  0035D4  C0CA  F0BD         	movff	??_I2C_Master_Init,___lldiv@divisor
  6714  0035D8  C0CB  F0BE         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6715  0035DC  C0CC  F0BF         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6716  0035E0  C0CD  F0C0         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6717  0035E4  EC5C  F019         	call	___lldiv	;wreg free
  6718  0035E8  0100               	movlb	0	; () banked
  6719  0035EA  05B9               	decf	?___lldiv& (0+255),w,b
  6720  0035EC  6EC8               	movwf	4040,c	;volatile
  6721                           
  6722                           ; BSR set to: 0
  6723  0035EE  0012               	return		;funcret
  6724  0035F0                     __end_of_I2C_Master_Init:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon	equ	0xFF2
  6733                           intcon3	equ	0xFF0
  6734                           indf0	equ	0xFEF
  6735                           postinc0	equ	0xFEE
  6736                           fsr0h	equ	0xFEA
  6737                           fsr0l	equ	0xFE9
  6738                           wreg	equ	0xFE8
  6739                           postdec1	equ	0xFE5
  6740                           fsr1l	equ	0xFE1
  6741                           indf2	equ	0xFDF
  6742                           postinc2	equ	0xFDE
  6743                           postdec2	equ	0xFDD
  6744                           fsr2h	equ	0xFDA
  6745                           fsr2l	equ	0xFD9
  6746                           status	equ	0xFD8
  6747                           
  6748 ;; *************** function ___lldiv *****************
  6749 ;; Defined at:
  6750 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;  dividend        4    0[BANK0 ] unsigned long 
  6753 ;;  divisor         4    4[BANK0 ] unsigned long 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  quotient        4    8[BANK0 ] unsigned long 
  6756 ;;  counter         1   12[BANK0 ] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  4    0[BANK0 ] unsigned long 
  6759 ;; Registers used:
  6760 ;;		wreg, status,2, status,0
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6766 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;Total ram usage:       13 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    4
  6773 ;; This function calls:
  6774 ;;		Nothing
  6775 ;; This function is called by:
  6776 ;;		_I2C_Master_Init
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           	psect	text21
  6781  0032B8                     __ptext21:
  6782                           	opt stack 0
  6783  0032B8                     ___lldiv:
  6784                           	opt stack 25
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;incstack = 0
  6788  0032B8  0E00               	movlw	0
  6789  0032BA  0100               	movlb	0	; () banked
  6790  0032BC  6FC1               	movwf	___lldiv@quotient& (0+255),b
  6791  0032BE  0E00               	movlw	0
  6792  0032C0  6FC2               	movwf	(___lldiv@quotient+1)& (0+255),b
  6793  0032C2  0E00               	movlw	0
  6794  0032C4  6FC3               	movwf	(___lldiv@quotient+2)& (0+255),b
  6795  0032C6  0E00               	movlw	0
  6796  0032C8  6FC4               	movwf	(___lldiv@quotient+3)& (0+255),b
  6797                           
  6798                           ; BSR set to: 0
  6799  0032CA  51BD               	movf	___lldiv@divisor& (0+255),w,b
  6800  0032CC  11BE               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6801  0032CE  11BF               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6802  0032D0  11C0               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6803  0032D2  B4D8               	btfsc	status,2,c
  6804  0032D4  D02A               	goto	l1226
  6805                           
  6806                           ; BSR set to: 0
  6807  0032D6  0E01               	movlw	1
  6808  0032D8  6FC5               	movwf	___lldiv@counter& (0+255),b
  6809  0032DA  D006               	goto	l1221
  6810  0032DC                     
  6811                           ; BSR set to: 0
  6812                           
  6813                           ; BSR set to: 0
  6814  0032DC  90D8               	bcf	status,0,c
  6815  0032DE  37BD               	rlcf	___lldiv@divisor& (0+255),f,b
  6816  0032E0  37BE               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6817  0032E2  37BF               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6818  0032E4  37C0               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6819  0032E6  2BC5               	incf	___lldiv@counter& (0+255),f,b
  6820  0032E8                     l1221:
  6821                           
  6822                           ; BSR set to: 0
  6823                           
  6824                           ; BSR set to: 0
  6825  0032E8  AFC0               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6826  0032EA  D7F8               	goto	l1222
  6827  0032EC                     u2560:
  6828                           
  6829                           ; BSR set to: 0
  6830                           
  6831                           ; BSR set to: 0
  6832                           
  6833                           ; BSR set to: 0
  6834  0032EC  90D8               	bcf	status,0,c
  6835  0032EE  37C1               	rlcf	___lldiv@quotient& (0+255),f,b
  6836  0032F0  37C2               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6837  0032F2  37C3               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6838  0032F4  37C4               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6839                           
  6840                           ; BSR set to: 0
  6841  0032F6  51BD               	movf	___lldiv@divisor& (0+255),w,b
  6842  0032F8  5DB9               	subwf	___lldiv@dividend& (0+255),w,b
  6843  0032FA  51BE               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6844  0032FC  59BA               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6845  0032FE  51BF               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6846  003300  59BB               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6847  003302  51C0               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6848  003304  59BC               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6849  003306  A0D8               	btfss	status,0,c
  6850  003308  D009               	goto	l1225
  6851                           
  6852                           ; BSR set to: 0
  6853  00330A  51BD               	movf	___lldiv@divisor& (0+255),w,b
  6854  00330C  5FB9               	subwf	___lldiv@dividend& (0+255),f,b
  6855  00330E  51BE               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6856  003310  5BBA               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6857  003312  51BF               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6858  003314  5BBB               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6859  003316  51C0               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6860  003318  5BBC               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6861                           
  6862                           ; BSR set to: 0
  6863  00331A  81C1               	bsf	___lldiv@quotient& (0+255),0,b
  6864  00331C                     l1225:
  6865                           
  6866                           ; BSR set to: 0
  6867                           
  6868                           ; BSR set to: 0
  6869  00331C  90D8               	bcf	status,0,c
  6870  00331E  33C0               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6871  003320  33BF               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6872  003322  33BE               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6873  003324  33BD               	rrcf	___lldiv@divisor& (0+255),f,b
  6874                           
  6875                           ; BSR set to: 0
  6876  003326  2FC5               	decfsz	___lldiv@counter& (0+255),f,b
  6877  003328  D7E1               	goto	u2560
  6878  00332A                     l1226:
  6879                           
  6880                           ; BSR set to: 0
  6881                           
  6882                           ; BSR set to: 0
  6883  00332A  C0C1  F0B9         	movff	___lldiv@quotient,?___lldiv
  6884  00332E  C0C2  F0BA         	movff	___lldiv@quotient+1,?___lldiv+1
  6885  003332  C0C3  F0BB         	movff	___lldiv@quotient+2,?___lldiv+2
  6886  003336  C0C4  F0BC         	movff	___lldiv@quotient+3,?___lldiv+3
  6887                           
  6888                           ; BSR set to: 0
  6889  00333A  0012               	return		;funcret
  6890  00333C                     __end_of___lldiv:
  6891                           	opt stack 0
  6892                           tblptru	equ	0xFF8
  6893                           tblptrh	equ	0xFF7
  6894                           tblptrl	equ	0xFF6
  6895                           tablat	equ	0xFF5
  6896                           prodh	equ	0xFF4
  6897                           prodl	equ	0xFF3
  6898                           intcon	equ	0xFF2
  6899                           intcon3	equ	0xFF0
  6900                           indf0	equ	0xFEF
  6901                           postinc0	equ	0xFEE
  6902                           fsr0h	equ	0xFEA
  6903                           fsr0l	equ	0xFE9
  6904                           wreg	equ	0xFE8
  6905                           postdec1	equ	0xFE5
  6906                           fsr1l	equ	0xFE1
  6907                           indf2	equ	0xFDF
  6908                           postinc2	equ	0xFDE
  6909                           postdec2	equ	0xFDD
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _interruptHandler *****************
  6915 ;; Defined at:
  6916 ;;		line 645 in file "main.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;  i               2   61[COMRAM] int 
  6921 ;;  temp            1   64[COMRAM] unsigned char 
  6922 ;;  keypress        1   63[COMRAM] unsigned char 
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6935 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6936 ;;Total ram usage:       27 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    3
  6939 ;; This function calls:
  6940 ;;		___awmod
  6941 ;;		_check
  6942 ;;		_generate_compartment_array
  6943 ;;		_is_valid
  6944 ;;		_strcat
  6945 ;;		_strcpy
  6946 ;;		_strncmp
  6947 ;;		i2_I2C_Master_Init
  6948 ;;		i2_I2C_Master_Read
  6949 ;;		i2_I2C_Master_Start
  6950 ;;		i2_I2C_Master_Stop
  6951 ;;		i2_I2C_Master_Write
  6952 ;;		i2___awdiv
  6953 ;;		i2___wmul
  6954 ;;		i2_initLCD
  6955 ;;		i2_lcdInst
  6956 ;;		i2_printf
  6957 ;;		i2_putch
  6958 ;; This function is called by:
  6959 ;;		Interrupt level 2
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           	psect	intcode
  6964  000008                     __pintcode:
  6965                           	opt stack 0
  6966  000008                     _interruptHandler:
  6967                           	opt stack 24
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;incstack = 0
  6971  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6972  00000A  ED31  F007         	call	int_func,f	;refresh shadow registers
  6973                           tblptru	equ	0xFF8
  6974                           tblptrh	equ	0xFF7
  6975                           tblptrl	equ	0xFF6
  6976                           tablat	equ	0xFF5
  6977                           prodh	equ	0xFF4
  6978                           prodl	equ	0xFF3
  6979                           intcon	equ	0xFF2
  6980                           intcon3	equ	0xFF0
  6981                           indf0	equ	0xFEF
  6982                           postinc0	equ	0xFEE
  6983                           fsr0h	equ	0xFEA
  6984                           fsr0l	equ	0xFE9
  6985                           wreg	equ	0xFE8
  6986                           postdec1	equ	0xFE5
  6987                           fsr1l	equ	0xFE1
  6988                           indf2	equ	0xFDF
  6989                           postinc2	equ	0xFDE
  6990                           postdec2	equ	0xFDD
  6991                           fsr2h	equ	0xFDA
  6992                           fsr2l	equ	0xFD9
  6993                           status	equ	0xFD8
  6994                           
  6995                           	psect	intcode_body
  6996  000E62                     __pintcode_body:
  6997                           	opt stack 24
  6998  000E62                     int_func:
  6999                           	opt stack 24
  7000  000E62  0006               	pop		; remove dummy address from shadow register refresh
  7001  000E64  CFFA F02C          	movff	pclath,??_interruptHandler+5
  7002  000E68  CFFB F02D          	movff	pclatu,??_interruptHandler+6
  7003  000E6C  CFE9 F02E          	movff	fsr0l,??_interruptHandler+7
  7004  000E70  CFEA F02F          	movff	fsr0h,??_interruptHandler+8
  7005  000E74  CFE1 F030          	movff	fsr1l,??_interruptHandler+9
  7006  000E78  CFE2 F031          	movff	fsr1h,??_interruptHandler+10
  7007  000E7C  CFD9 F032          	movff	fsr2l,??_interruptHandler+11
  7008  000E80  CFDA F033          	movff	fsr2h,??_interruptHandler+12
  7009  000E84  CFF3 F034          	movff	prodl,??_interruptHandler+13
  7010  000E88  CFF4 F035          	movff	prodh,??_interruptHandler+14
  7011  000E8C  CFF6 F036          	movff	tblptrl,??_interruptHandler+15
  7012  000E90  CFF7 F037          	movff	tblptrh,??_interruptHandler+16
  7013  000E94  CFF8 F038          	movff	tblptru,??_interruptHandler+17
  7014  000E98  CFF5 F039          	movff	tablat,??_interruptHandler+18
  7015  000E9C  C07F  F03A         	movff	btemp,??_interruptHandler+19
  7016  000EA0  C080  F03B         	movff	btemp+1,??_interruptHandler+20
  7017  000EA4  C081  F03C         	movff	btemp+2,??_interruptHandler+21
  7018  000EA8  C082  F03D         	movff	btemp+3,??_interruptHandler+22
  7019                           
  7020                           ;main.c: 656: if(INT1IF){
  7021  000EAC  A0F0               	btfss	intcon3,0,c	;volatile
  7022  000EAE  EFFC  F00C         	goto	i2l5510
  7023                           
  7024                           ;main.c: 662: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7025  000EB2  3881               	swapf	3969,w,c	;volatile
  7026  000EB4  0B0F               	andlw	15
  7027  000EB6  0B0F               	andlw	15
  7028  000EB8  6E40               	movwf	interruptHandler@keypress,c
  7029                           
  7030                           ;main.c: 664: char temp = keys[keypress];
  7031  000EBA  5040               	movf	interruptHandler@keypress,w,c
  7032  000EBC  0D01               	mullw	1
  7033  000EBE  0E6B               	movlw	low _keys
  7034  000EC0  24F3               	addwf	prodl,w,c
  7035  000EC2  6EF6               	movwf	tblptrl,c
  7036  000EC4  0EFD               	movlw	high _keys
  7037  000EC6  20F4               	addwfc	prodh,w,c
  7038  000EC8  6EF7               	movwf	tblptrh,c
  7039  000ECA                     	if	1	;There are 3 active tblptr bytes
  7040  000ECA  6AF8               	clrf	tblptru,c
  7041  000ECC  0E00               	movlw	low (__mediumconst shr (0+16))
  7042  000ECE  22F8               	addwfc	tblptru,f,c
  7043  000ED0                     	endif
  7044  000ED0  0008               	tblrd		*
  7045  000ED2  CFF5 F041          	movff	tablat,interruptHandler@temp
  7046                           
  7047                           ;main.c: 667: if(temp == 'A'){
  7048  000ED6  0E41               	movlw	65
  7049  000ED8  1841               	xorwf	interruptHandler@temp,w,c
  7050  000EDA  A4D8               	btfss	status,2,c
  7051  000EDC  D006               	goto	i2l383
  7052                           
  7053                           ;main.c: 668: state = prev_state;
  7054  000EDE  C061  F06D         	movff	_prev_state,_state
  7055  000EE2  C062  F06E         	movff	_prev_state+1,_state+1
  7056  000EE6  EFFB  F00C         	goto	i2l5508
  7057  000EEA                     i2l383:
  7058                           
  7059                           ;main.c: 671: }
  7060                           ;main.c: 674: if (change_mode == 0){
  7061  000EEA  5073               	movf	_change_mode,w,c
  7062  000EEC  1074               	iorwf	_change_mode+1,w,c
  7063  000EEE  A4D8               	btfss	status,2,c
  7064  000EF0  D09E               	goto	i2l391
  7065                           
  7066                           ;main.c: 678: if (temp == '1'){
  7067  000EF2  0E31               	movlw	49
  7068  000EF4  1841               	xorwf	interruptHandler@temp,w,c
  7069  000EF6  A4D8               	btfss	status,2,c
  7070  000EF8  D08B               	goto	i2l386
  7071                           
  7072                           ;main.c: 680: initLCD();
  7073  000EFA  EC9F  F01B         	call	i2_initLCD	;wreg free
  7074                           
  7075                           ;main.c: 681: for (i = 0; i <3; i++){
  7076  000EFE  0E00               	movlw	0
  7077  000F00  0100               	movlb	0	; () banked
  7078  000F02  6FAB               	movwf	(_i+1)& (0+255),b
  7079  000F04  0E00               	movlw	0
  7080  000F06  6FAA               	movwf	_i& (0+255),b
  7081                           
  7082                           ; BSR set to: 0
  7083  000F08  51AB               	movf	(_i+1)& (0+255),w,b
  7084  000F0A  E101               	bnz	i2u419_40
  7085  000F0C  D07B               	goto	L2
  7086  000F0E                     i2u419_40:
  7087                           
  7088                           ; BSR set to: 0
  7089  000F0E  EFFB  F00C         	goto	i2l5508
  7090  000F12                     
  7091                           ; BSR set to: 0
  7092                           ;main.c: 682: I2C_Master_Init(100000);
  7093                           
  7094                           ; BSR set to: 0
  7095  000F12  0EA0               	movlw	160
  7096  000F14  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  7097  000F16  0E86               	movlw	134
  7098  000F18  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  7099  000F1A  0E01               	movlw	1
  7100  000F1C  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  7101  000F1E  0E00               	movlw	0
  7102  000F20  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  7103  000F22  ECF8  F01A         	call	i2_I2C_Master_Init	;wreg free
  7104                           
  7105                           ;main.c: 683: I2C_Master_Start();
  7106  000F26  EC9B  F01D         	call	i2_I2C_Master_Start	;wreg free
  7107                           
  7108                           ;main.c: 684: I2C_Master_Write(0b11010000);
  7109  000F2A  0E00               	movlw	0
  7110  000F2C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7111  000F2E  0ED0               	movlw	208
  7112  000F30  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7113  000F32  EC8A  F01D         	call	i2_I2C_Master_Write	;wreg free
  7114                           
  7115                           ;main.c: 685: I2C_Master_Write(0x00);
  7116  000F36  0E00               	movlw	0
  7117  000F38  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7118  000F3A  0E00               	movlw	0
  7119  000F3C  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7120  000F3E  EC8A  F01D         	call	i2_I2C_Master_Write	;wreg free
  7121                           
  7122                           ;main.c: 686: I2C_Master_Stop();
  7123  000F42  EC97  F01D         	call	i2_I2C_Master_Stop	;wreg free
  7124                           
  7125                           ;main.c: 689: I2C_Master_Start();
  7126  000F46  EC9B  F01D         	call	i2_I2C_Master_Start	;wreg free
  7127                           
  7128                           ;main.c: 690: I2C_Master_Write(0b11010001);
  7129  000F4A  0E00               	movlw	0
  7130  000F4C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7131  000F4E  0ED1               	movlw	209
  7132  000F50  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7133  000F52  EC8A  F01D         	call	i2_I2C_Master_Write	;wreg free
  7134                           
  7135                           ;main.c: 691: for(j = 0; j < 6; j++){
  7136  000F56  0E00               	movlw	0
  7137  000F58  6E75               	movwf	_j,c
  7138  000F5A                     i2l5142:
  7139  000F5A  0E05               	movlw	5
  7140  000F5C  6475               	cpfsgt	_j,c
  7141  000F5E  D001               	goto	i2l389
  7142  000F60  D00E               	goto	i2u421_40
  7143  000F62                     i2l389:
  7144                           
  7145                           ;main.c: 692: time[j] = I2C_Master_Read(0);
  7146  000F62  5075               	movf	_j,w,c
  7147  000F64  0D01               	mullw	1
  7148  000F66  0E52               	movlw	low _time
  7149  000F68  24F3               	addwf	prodl,w,c
  7150  000F6A  6ED9               	movwf	fsr2l,c
  7151  000F6C  0E00               	movlw	high _time
  7152  000F6E  20F4               	addwfc	prodh,w,c
  7153  000F70  6EDA               	movwf	fsr2h,c
  7154  000F72  0E00               	movlw	0
  7155  000F74  EC03  F01D         	call	i2_I2C_Master_Read
  7156  000F78  6EDF               	movwf	indf2,c
  7157  000F7A  2A75               	incf	_j,f,c
  7158  000F7C  D7EE               	goto	i2l5142
  7159  000F7E                     i2u421_40:
  7160                           
  7161                           ;main.c: 693: }
  7162                           ;main.c: 694: time[6] = I2C_Master_Read(1);
  7163  000F7E  0E01               	movlw	1
  7164  000F80  EC03  F01D         	call	i2_I2C_Master_Read
  7165  000F84  6E58               	movwf	_time+6,c
  7166                           
  7167                           ;main.c: 695: I2C_Master_Stop();
  7168  000F86  EC97  F01D         	call	i2_I2C_Master_Stop	;wreg free
  7169                           
  7170                           ;main.c: 697: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7171  000F8A  0E80               	movlw	128
  7172  000F8C  EC72  F01D         	call	i2_lcdInst
  7173  000F90  0E41               	movlw	65
  7174  000F92  6E27               	movwf	??_interruptHandler& (0+255),c
  7175  000F94  0EEE               	movlw	238
  7176  000F96                     i2u518_47:
  7177  000F96  2EE8               	decfsz	wreg,f,c
  7178  000F98  D7FE               	bra	i2u518_47
  7179  000F9A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7180  000F9C  D7FC               	bra	i2u518_47
  7181  000F9E  D000               	nop2	
  7182                           
  7183                           ;main.c: 698: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  7184  000FA0  0EE4               	movlw	low STR_24
  7185  000FA2  6E0D               	movwf	i2printf@f,c
  7186  000FA4  0EFE               	movlw	high STR_24
  7187  000FA6  6E0E               	movwf	i2printf@f+1,c
  7188  000FA8  C058  F00F         	movff	_time+6,?i2_printf+2
  7189  000FAC  6A10               	clrf	?i2_printf+3,c
  7190  000FAE  C057  F011         	movff	_time+5,?i2_printf+4
  7191  000FB2  6A12               	clrf	?i2_printf+5,c
  7192  000FB4  C056  F013         	movff	_time+4,?i2_printf+6
  7193  000FB8  6A14               	clrf	?i2_printf+7,c
  7194  000FBA  ECCE  F013         	call	i2_printf	;wreg free
  7195                           
  7196                           ;main.c: 699: lcdInst(0xC0);;
  7197  000FBE  0EC0               	movlw	192
  7198  000FC0  EC72  F01D         	call	i2_lcdInst
  7199                           
  7200                           ;main.c: 700: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  7201  000FC4  0EF3               	movlw	low STR_25
  7202  000FC6  6E0D               	movwf	i2printf@f,c
  7203  000FC8  0EFE               	movlw	high STR_25
  7204  000FCA  6E0E               	movwf	i2printf@f+1,c
  7205  000FCC  C054  F00F         	movff	_time+2,?i2_printf+2
  7206  000FD0  6A10               	clrf	?i2_printf+3,c
  7207  000FD2  C053  F011         	movff	_time+1,?i2_printf+4
  7208  000FD6  6A12               	clrf	?i2_printf+5,c
  7209  000FD8  C052  F013         	movff	_time,?i2_printf+6
  7210  000FDC  6A14               	clrf	?i2_printf+7,c
  7211  000FDE  ECCE  F013         	call	i2_printf	;wreg free
  7212                           
  7213                           ;main.c: 701: _delay((unsigned long)((600)*(40000000/4000.0)));
  7214  000FE2  0E1F               	movlw	31
  7215  000FE4  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7216  000FE6  0E71               	movlw	113
  7217  000FE8  6E27               	movwf	??_interruptHandler& (0+255),c
  7218  000FEA  0E1E               	movlw	30
  7219  000FEC                     i2u519_47:
  7220  000FEC  2EE8               	decfsz	wreg,f,c
  7221  000FEE  D7FE               	bra	i2u519_47
  7222  000FF0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7223  000FF2  D7FC               	bra	i2u519_47
  7224  000FF4  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7225  000FF6  D7FA               	bra	i2u519_47
  7226  000FF8  D000               	nop2	
  7227  000FFA  0100               	movlb	0	; () banked
  7228  000FFC  4BAA               	infsnz	_i& (0+255),f,b
  7229  000FFE  2BAB               	incf	(_i+1)& (0+255),f,b
  7230  001000  51AB               	movf	(_i+1)& (0+255),w,b
  7231  001002  E113               	bnz	i2l5168
  7232  001004                     L2:
  7233  001004  0E03               	movlw	3
  7234  001006  5DAA               	subwf	_i& (0+255),w,b
  7235  001008  A0D8               	btfss	status,0,c
  7236  00100A  D783               	goto	i2l387
  7237  00100C  EFFB  F00C         	goto	i2l5508
  7238  001010                     i2l386:
  7239                           
  7240                           ;main.c: 705: }
  7241                           ;main.c: 706: if (temp == '2'){
  7242                           
  7243                           ; BSR set to: 0
  7244  001010  0E32               	movlw	50
  7245  001012  1841               	xorwf	interruptHandler@temp,w,c
  7246  001014  A4D8               	btfss	status,2,c
  7247  001016  D00B               	goto	i2l391
  7248                           
  7249                           ;main.c: 707: change_mode = 1;
  7250  001018  0E00               	movlw	0
  7251  00101A  6E74               	movwf	_change_mode+1,c
  7252  00101C  0E01               	movlw	1
  7253  00101E  6E73               	movwf	_change_mode,c
  7254                           
  7255                           ;main.c: 708: mode = 1;
  7256  001020  0E00               	movlw	0
  7257  001022  0100               	movlb	0	; () banked
  7258  001024  6FF0               	movwf	(_mode+1)& (0+255),b
  7259  001026  0E01               	movlw	1
  7260  001028  D142               	goto	L9
  7261  00102A                     i2l5168:
  7262  00102A  EFFB  F00C         	goto	i2l5508
  7263  00102E                     i2l391:
  7264                           
  7265                           ;main.c: 713: }
  7266                           ;main.c: 716: }
  7267                           ;main.c: 721: if(operation == 1){
  7268                           
  7269                           ; BSR set to: 0
  7270                           
  7271                           ; BSR set to: 0
  7272  00102E  0471               	decf	_operation,w,c
  7273  001030  1072               	iorwf	_operation+1,w,c
  7274  001032  A4D8               	btfss	status,2,c
  7275  001034  D13E               	goto	i2l400
  7276                           
  7277                           ;main.c: 722: if (temp == '1'){
  7278  001036  0E31               	movlw	49
  7279  001038  1841               	xorwf	interruptHandler@temp,w,c
  7280  00103A  A4D8               	btfss	status,2,c
  7281  00103C  D08B               	goto	i2l393
  7282                           
  7283                           ;main.c: 723: initLCD();
  7284  00103E  EC9F  F01B         	call	i2_initLCD	;wreg free
  7285                           
  7286                           ;main.c: 724: for (i = 0; i <3; i++){
  7287  001042  0E00               	movlw	0
  7288  001044  0100               	movlb	0	; () banked
  7289  001046  6FAB               	movwf	(_i+1)& (0+255),b
  7290  001048  0E00               	movlw	0
  7291  00104A  6FAA               	movwf	_i& (0+255),b
  7292                           
  7293                           ; BSR set to: 0
  7294  00104C  51AB               	movf	(_i+1)& (0+255),w,b
  7295  00104E  E101               	bnz	i2u426_40
  7296  001050  D07B               	goto	L3
  7297  001052                     i2u426_40:
  7298                           
  7299                           ; BSR set to: 0
  7300  001052  EFFB  F00C         	goto	i2l5508
  7301  001056                     
  7302                           ; BSR set to: 0
  7303                           ;main.c: 725: I2C_Master_Init(100000);
  7304                           
  7305                           ; BSR set to: 0
  7306  001056  0EA0               	movlw	160
  7307  001058  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  7308  00105A  0E86               	movlw	134
  7309  00105C  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  7310  00105E  0E01               	movlw	1
  7311  001060  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  7312  001062  0E00               	movlw	0
  7313  001064  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  7314  001066  ECF8  F01A         	call	i2_I2C_Master_Init	;wreg free
  7315                           
  7316                           ;main.c: 726: I2C_Master_Start();
  7317  00106A  EC9B  F01D         	call	i2_I2C_Master_Start	;wreg free
  7318                           
  7319                           ;main.c: 727: I2C_Master_Write(0b11010000);
  7320  00106E  0E00               	movlw	0
  7321  001070  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7322  001072  0ED0               	movlw	208
  7323  001074  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7324  001076  EC8A  F01D         	call	i2_I2C_Master_Write	;wreg free
  7325                           
  7326                           ;main.c: 728: I2C_Master_Write(0x00);
  7327  00107A  0E00               	movlw	0
  7328  00107C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7329  00107E  0E00               	movlw	0
  7330  001080  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7331  001082  EC8A  F01D         	call	i2_I2C_Master_Write	;wreg free
  7332                           
  7333                           ;main.c: 729: I2C_Master_Stop();
  7334  001086  EC97  F01D         	call	i2_I2C_Master_Stop	;wreg free
  7335                           
  7336                           ;main.c: 732: I2C_Master_Start();
  7337  00108A  EC9B  F01D         	call	i2_I2C_Master_Start	;wreg free
  7338                           
  7339                           ;main.c: 733: I2C_Master_Write(0b11010001);
  7340  00108E  0E00               	movlw	0
  7341  001090  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7342  001092  0ED1               	movlw	209
  7343  001094  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7344  001096  EC8A  F01D         	call	i2_I2C_Master_Write	;wreg free
  7345                           
  7346                           ;main.c: 734: for(j = 0; j < 6; j++){
  7347  00109A  0E00               	movlw	0
  7348  00109C  6E75               	movwf	_j,c
  7349  00109E                     i2l5188:
  7350  00109E  0E05               	movlw	5
  7351  0010A0  6475               	cpfsgt	_j,c
  7352  0010A2  D001               	goto	i2l396
  7353  0010A4  D00E               	goto	i2u428_40
  7354  0010A6                     i2l396:
  7355                           
  7356                           ;main.c: 735: time[j] = I2C_Master_Read(0);
  7357  0010A6  5075               	movf	_j,w,c
  7358  0010A8  0D01               	mullw	1
  7359  0010AA  0E52               	movlw	low _time
  7360  0010AC  24F3               	addwf	prodl,w,c
  7361  0010AE  6ED9               	movwf	fsr2l,c
  7362  0010B0  0E00               	movlw	high _time
  7363  0010B2  20F4               	addwfc	prodh,w,c
  7364  0010B4  6EDA               	movwf	fsr2h,c
  7365  0010B6  0E00               	movlw	0
  7366  0010B8  EC03  F01D         	call	i2_I2C_Master_Read
  7367  0010BC  6EDF               	movwf	indf2,c
  7368  0010BE  2A75               	incf	_j,f,c
  7369  0010C0  D7EE               	goto	i2l5188
  7370  0010C2                     i2u428_40:
  7371                           
  7372                           ;main.c: 736: }
  7373                           ;main.c: 737: time[6] = I2C_Master_Read(1);
  7374  0010C2  0E01               	movlw	1
  7375  0010C4  EC03  F01D         	call	i2_I2C_Master_Read
  7376  0010C8  6E58               	movwf	_time+6,c
  7377                           
  7378                           ;main.c: 738: I2C_Master_Stop();
  7379  0010CA  EC97  F01D         	call	i2_I2C_Master_Stop	;wreg free
  7380                           
  7381                           ;main.c: 740: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7382  0010CE  0E80               	movlw	128
  7383  0010D0  EC72  F01D         	call	i2_lcdInst
  7384  0010D4  0E41               	movlw	65
  7385  0010D6  6E27               	movwf	??_interruptHandler& (0+255),c
  7386  0010D8  0EEE               	movlw	238
  7387  0010DA                     i2u520_47:
  7388  0010DA  2EE8               	decfsz	wreg,f,c
  7389  0010DC  D7FE               	bra	i2u520_47
  7390  0010DE  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7391  0010E0  D7FC               	bra	i2u520_47
  7392  0010E2  D000               	nop2	
  7393                           
  7394                           ;main.c: 741: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  7395  0010E4  0EE4               	movlw	low STR_24
  7396  0010E6  6E0D               	movwf	i2printf@f,c
  7397  0010E8  0EFE               	movlw	high STR_24
  7398  0010EA  6E0E               	movwf	i2printf@f+1,c
  7399  0010EC  C058  F00F         	movff	_time+6,?i2_printf+2
  7400  0010F0  6A10               	clrf	?i2_printf+3,c
  7401  0010F2  C057  F011         	movff	_time+5,?i2_printf+4
  7402  0010F6  6A12               	clrf	?i2_printf+5,c
  7403  0010F8  C056  F013         	movff	_time+4,?i2_printf+6
  7404  0010FC  6A14               	clrf	?i2_printf+7,c
  7405  0010FE  ECCE  F013         	call	i2_printf	;wreg free
  7406                           
  7407                           ;main.c: 742: lcdInst(0xC0);;
  7408  001102  0EC0               	movlw	192
  7409  001104  EC72  F01D         	call	i2_lcdInst
  7410                           
  7411                           ;main.c: 743: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  7412  001108  0EF3               	movlw	low STR_25
  7413  00110A  6E0D               	movwf	i2printf@f,c
  7414  00110C  0EFE               	movlw	high STR_25
  7415  00110E  6E0E               	movwf	i2printf@f+1,c
  7416  001110  C054  F00F         	movff	_time+2,?i2_printf+2
  7417  001114  6A10               	clrf	?i2_printf+3,c
  7418  001116  C053  F011         	movff	_time+1,?i2_printf+4
  7419  00111A  6A12               	clrf	?i2_printf+5,c
  7420  00111C  C052  F013         	movff	_time,?i2_printf+6
  7421  001120  6A14               	clrf	?i2_printf+7,c
  7422  001122  ECCE  F013         	call	i2_printf	;wreg free
  7423                           
  7424                           ;main.c: 744: _delay((unsigned long)((600)*(40000000/4000.0)));
  7425  001126  0E1F               	movlw	31
  7426  001128  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7427  00112A  0E71               	movlw	113
  7428  00112C  6E27               	movwf	??_interruptHandler& (0+255),c
  7429  00112E  0E1E               	movlw	30
  7430  001130                     i2u521_47:
  7431  001130  2EE8               	decfsz	wreg,f,c
  7432  001132  D7FE               	bra	i2u521_47
  7433  001134  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7434  001136  D7FC               	bra	i2u521_47
  7435  001138  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7436  00113A  D7FA               	bra	i2u521_47
  7437  00113C  D000               	nop2	
  7438  00113E  0100               	movlb	0	; () banked
  7439  001140  4BAA               	infsnz	_i& (0+255),f,b
  7440  001142  2BAB               	incf	(_i+1)& (0+255),f,b
  7441  001144  51AB               	movf	(_i+1)& (0+255),w,b
  7442  001146  E104               	bnz	i2u429_40
  7443  001148                     L3:
  7444  001148  0E03               	movlw	3
  7445  00114A  5DAA               	subwf	_i& (0+255),w,b
  7446  00114C  A0D8               	btfss	status,0,c
  7447  00114E  D783               	goto	i2l394
  7448  001150                     i2u429_40:
  7449  001150  EFFB  F00C         	goto	i2l5508
  7450  001154                     i2l393:
  7451                           
  7452                           ;main.c: 750: }
  7453                           ;main.c: 751: if (temp == '2'){
  7454                           
  7455                           ; BSR set to: 0
  7456  001154  0E32               	movlw	50
  7457  001156  1841               	xorwf	interruptHandler@temp,w,c
  7458  001158  A4D8               	btfss	status,2,c
  7459  00115A  D099               	goto	i2l398
  7460                           
  7461                           ;main.c: 760: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
  7462  00115C  C08E  F001         	movff	_hr_initial,i2___wmul@multiplier
  7463  001160  C08F  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
  7464  001164  0E0E               	movlw	14
  7465  001166  6E04               	movwf	i2___wmul@multiplicand+1,c
  7466  001168  0E10               	movlw	16
  7467  00116A  6E03               	movwf	i2___wmul@multiplicand,c
  7468  00116C  ECF0  F01C         	call	i2___wmul	;wreg free
  7469  001170  C001  F027         	movff	?i2___wmul,??_interruptHandler
  7470  001174  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
  7471  001178  C08C  F001         	movff	_min_initial,i2___wmul@multiplier
  7472  00117C  C08D  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
  7473  001180  0E00               	movlw	0
  7474  001182  6E04               	movwf	i2___wmul@multiplicand+1,c
  7475  001184  0E3C               	movlw	60
  7476  001186  6E03               	movwf	i2___wmul@multiplicand,c
  7477  001188  ECF0  F01C         	call	i2___wmul	;wreg free
  7478  00118C  5001               	movf	?i2___wmul,w,c
  7479  00118E  2627               	addwf	??_interruptHandler,f,c
  7480  001190  5002               	movf	?i2___wmul+1,w,c
  7481  001192  2228               	addwfc	??_interruptHandler+1,f,c
  7482  001194  0100               	movlb	0	; () banked
  7483  001196  518A               	movf	_sec_initial& (0+255),w,b
  7484  001198  2427               	addwf	??_interruptHandler,w,c
  7485  00119A  6F88               	movwf	_initial_time& (0+255),b
  7486  00119C  518B               	movf	(_sec_initial+1)& (0+255),w,b
  7487  00119E  2028               	addwfc	??_interruptHandler+1,w,c
  7488  0011A0  6F89               	movwf	(_initial_time+1)& (0+255),b
  7489                           
  7490                           ;main.c: 761: final_time = hr_final*3600 + min_final*60 + sec_final;
  7491  0011A2  C086  F001         	movff	_hr_final,i2___wmul@multiplier
  7492  0011A6  C087  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
  7493  0011AA  0E0E               	movlw	14
  7494  0011AC  6E04               	movwf	i2___wmul@multiplicand+1,c
  7495  0011AE  0E10               	movlw	16
  7496  0011B0  6E03               	movwf	i2___wmul@multiplicand,c
  7497  0011B2  ECF0  F01C         	call	i2___wmul	;wreg free
  7498  0011B6  C001  F027         	movff	?i2___wmul,??_interruptHandler
  7499  0011BA  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
  7500  0011BE  C084  F001         	movff	_min_final,i2___wmul@multiplier
  7501  0011C2  C085  F002         	movff	_min_final+1,i2___wmul@multiplier+1
  7502  0011C6  0E00               	movlw	0
  7503  0011C8  6E04               	movwf	i2___wmul@multiplicand+1,c
  7504  0011CA  0E3C               	movlw	60
  7505  0011CC  6E03               	movwf	i2___wmul@multiplicand,c
  7506  0011CE  ECF0  F01C         	call	i2___wmul	;wreg free
  7507  0011D2  5001               	movf	?i2___wmul,w,c
  7508  0011D4  2627               	addwf	??_interruptHandler,f,c
  7509  0011D6  5002               	movf	?i2___wmul+1,w,c
  7510  0011D8  2228               	addwfc	??_interruptHandler+1,f,c
  7511  0011DA  0100               	movlb	0	; () banked
  7512  0011DC  5182               	movf	_sec_final& (0+255),w,b
  7513  0011DE  2427               	addwf	??_interruptHandler,w,c
  7514  0011E0  6F80               	movwf	_final_time& (0+255),b
  7515  0011E2  5183               	movf	(_sec_final+1)& (0+255),w,b
  7516  0011E4  2028               	addwfc	??_interruptHandler+1,w,c
  7517  0011E6  6F81               	movwf	(_final_time+1)& (0+255),b
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;main.c: 762: operationTime = final_time - initial_time;
  7521  0011E8  C088  F027         	movff	_initial_time,??_interruptHandler
  7522  0011EC  C089  F028         	movff	_initial_time+1,??_interruptHandler+1
  7523  0011F0  1E27               	comf	??_interruptHandler,f,c
  7524  0011F2  1E28               	comf	??_interruptHandler+1,f,c
  7525  0011F4  4A27               	infsnz	??_interruptHandler,f,c
  7526  0011F6  2A28               	incf	??_interruptHandler+1,f,c
  7527  0011F8  5180               	movf	_final_time& (0+255),w,b
  7528  0011FA  2427               	addwf	??_interruptHandler,w,c
  7529  0011FC  6E6F               	movwf	_operationTime,c
  7530  0011FE  5181               	movf	(_final_time+1)& (0+255),w,b
  7531  001200  2028               	addwfc	??_interruptHandler+1,w,c
  7532  001202  6E70               	movwf	_operationTime+1,c
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;main.c: 763: initLCD();
  7536  001204  EC9F  F01B         	call	i2_initLCD	;wreg free
  7537                           
  7538                           ;main.c: 766: printf("operation time:");
  7539  001208  0EA7               	movlw	low STR_28
  7540  00120A  6E0D               	movwf	i2printf@f,c
  7541  00120C  0EFE               	movlw	high STR_28
  7542  00120E  6E0E               	movwf	i2printf@f+1,c
  7543  001210  ECCE  F013         	call	i2_printf	;wreg free
  7544                           
  7545                           ;main.c: 767: lcdInst(0xC0);;
  7546  001214  0EC0               	movlw	192
  7547  001216  EC72  F01D         	call	i2_lcdInst
  7548                           
  7549                           ;main.c: 768: printf("%dmin %dsecs",operationTime/60,operationTime%60);
  7550  00121A  0E37               	movlw	low STR_29
  7551  00121C  6E0D               	movwf	i2printf@f,c
  7552  00121E  0EFF               	movlw	high STR_29
  7553  001220  6E0E               	movwf	i2printf@f+1,c
  7554  001222  C06F  F001         	movff	_operationTime,i2___awdiv@dividend
  7555  001226  C070  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
  7556  00122A  0E00               	movlw	0
  7557  00122C  6E04               	movwf	i2___awdiv@divisor+1,c
  7558  00122E  0E3C               	movlw	60
  7559  001230  6E03               	movwf	i2___awdiv@divisor,c
  7560  001232  EC9E  F019         	call	i2___awdiv	;wreg free
  7561  001236  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  7562  00123A  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  7563  00123E  C06F  F001         	movff	_operationTime,___awmod@dividend
  7564  001242  C070  F002         	movff	_operationTime+1,___awmod@dividend+1
  7565  001246  0E00               	movlw	0
  7566  001248  6E04               	movwf	___awmod@divisor+1,c
  7567  00124A  0E3C               	movlw	60
  7568  00124C  6E03               	movwf	___awmod@divisor,c
  7569  00124E  EC5E  F01A         	call	___awmod	;wreg free
  7570  001252  C001  F011         	movff	?___awmod,?i2_printf+4
  7571  001256  C002  F012         	movff	?___awmod+1,?i2_printf+5
  7572  00125A  ECCE  F013         	call	i2_printf	;wreg free
  7573                           
  7574                           ;main.c: 769: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7575  00125E  0E80               	movlw	128
  7576  001260  EC72  F01D         	call	i2_lcdInst
  7577  001264  0E41               	movlw	65
  7578  001266  6E27               	movwf	??_interruptHandler& (0+255),c
  7579  001268  0EEE               	movlw	238
  7580  00126A                     i2u522_47:
  7581  00126A  2EE8               	decfsz	wreg,f,c
  7582  00126C  D7FE               	bra	i2u522_47
  7583  00126E  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7584  001270  D7FC               	bra	i2u522_47
  7585  001272  D000               	nop2	
  7586                           
  7587                           ;main.c: 770: _delay((unsigned long)((2000)*(40000000/4000.0)));
  7588  001274  0E66               	movlw	102
  7589  001276  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7590  001278  0E76               	movlw	118
  7591  00127A  6E27               	movwf	??_interruptHandler& (0+255),c
  7592  00127C  0EC1               	movlw	193
  7593  00127E                     i2u523_47:
  7594  00127E  2EE8               	decfsz	wreg,f,c
  7595  001280  D7FE               	bra	i2u523_47
  7596  001282  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7597  001284  D7FC               	bra	i2u523_47
  7598  001286  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7599  001288  D7FA               	bra	i2u523_47
  7600  00128A  F000               	nop	
  7601  00128C  D3B4               	goto	i2l5508
  7602  00128E                     i2l398:
  7603                           
  7604                           ;main.c: 776: }
  7605                           ;main.c: 778: if (temp == '3'){
  7606  00128E  0E33               	movlw	51
  7607  001290  1841               	xorwf	interruptHandler@temp,w,c
  7608  001292  B4D8               	btfsc	status,2,c
  7609  001294  D3B0               	goto	i2l5508
  7610                           
  7611                           ;main.c: 785: }
  7612                           ;main.c: 787: if (temp == '4'){
  7613                           
  7614                           ;main.c: 784: return;
  7615                           
  7616                           ;main.c: 783: INT1IF = 0;
  7617  001296  0E34               	movlw	52
  7618  001298  1841               	xorwf	interruptHandler@temp,w,c
  7619  00129A  A4D8               	btfss	status,2,c
  7620  00129C  D00A               	goto	i2l400
  7621                           
  7622                           ;main.c: 788: operation_done = 1;
  7623  00129E  0E00               	movlw	0
  7624  0012A0  0100               	movlb	0	; () banked
  7625  0012A2  6FA7               	movwf	(_operation_done+1)& (0+255),b
  7626  0012A4  0E01               	movlw	1
  7627  0012A6  6FA6               	movwf	_operation_done& (0+255),b
  7628                           
  7629                           ;main.c: 789: mode = 0;
  7630  0012A8  0E00               	movlw	0
  7631  0012AA  6FF0               	movwf	(_mode+1)& (0+255),b
  7632  0012AC  0E00               	movlw	0
  7633  0012AE                     L9:
  7634  0012AE  6FEF               	movwf	_mode& (0+255),b
  7635  0012B0  D3A2               	goto	i2l5508
  7636  0012B2                     i2l400:
  7637                           
  7638                           ;main.c: 792: }
  7639                           ;main.c: 794: }
  7640                           ;main.c: 819: if (state == 0){
  7641                           
  7642                           ; BSR set to: 0
  7643                           
  7644                           ; BSR set to: 0
  7645  0012B2  506D               	movf	_state,w,c
  7646  0012B4  106E               	iorwf	_state+1,w,c
  7647  0012B6  A4D8               	btfss	status,2,c
  7648  0012B8  D0C9               	goto	i2l401
  7649                           
  7650                           ;main.c: 821: if(temp == '4'){
  7651  0012BA  0E34               	movlw	52
  7652  0012BC  1841               	xorwf	interruptHandler@temp,w,c
  7653  0012BE  A4D8               	btfss	status,2,c
  7654  0012C0  D01F               	goto	i2l402
  7655                           
  7656                           ;main.c: 822: assembly_step = 4;
  7657  0012C2  0E00               	movlw	0
  7658  0012C4  6E6C               	movwf	_assembly_step+1,c
  7659  0012C6  0E04               	movlw	4
  7660  0012C8  6E6B               	movwf	_assembly_step,c
  7661                           
  7662                           ;main.c: 823: prev_state = state;
  7663  0012CA  C06D  F061         	movff	_state,_prev_state
  7664  0012CE  C06E  F062         	movff	_state+1,_prev_state+1
  7665                           
  7666                           ;main.c: 824: state = 1;
  7667  0012D2  0E00               	movlw	0
  7668  0012D4  6E6E               	movwf	_state+1,c
  7669  0012D6  0E01               	movlw	1
  7670  0012D8  6E6D               	movwf	_state,c
  7671                           
  7672                           ;main.c: 825: lcdInst(0xC0);;
  7673  0012DA  0EC0               	movlw	192
  7674  0012DC  EC72  F01D         	call	i2_lcdInst
  7675                           
  7676                           ;main.c: 826: putch(keys[keypress]);
  7677  0012E0  5040               	movf	interruptHandler@keypress,w,c
  7678  0012E2  0D01               	mullw	1
  7679  0012E4  0E6B               	movlw	low _keys
  7680  0012E6  24F3               	addwf	prodl,w,c
  7681  0012E8  6EF6               	movwf	tblptrl,c
  7682  0012EA  0EFD               	movlw	high _keys
  7683  0012EC  20F4               	addwfc	prodh,w,c
  7684  0012EE  6EF7               	movwf	tblptrh,c
  7685  0012F0                     	if	1	;There are 3 active tblptr bytes
  7686  0012F0  6AF8               	clrf	tblptru,c
  7687  0012F2  0E00               	movlw	low (__mediumconst shr (0+16))
  7688  0012F4  22F8               	addwfc	tblptru,f,c
  7689  0012F6                     	endif
  7690  0012F6  0008               	tblrd		*
  7691  0012F8  50F5               	movf	tablat,w,c
  7692  0012FA  EC68  F01D         	call	i2_putch
  7693                           
  7694                           ;main.c: 828: }
  7695  0012FE  D09F               	goto	i2l411
  7696  001300                     i2l402:
  7697                           
  7698                           ;main.c: 829: else if(temp == '5'){
  7699  001300  0E35               	movlw	53
  7700  001302  1841               	xorwf	interruptHandler@temp,w,c
  7701  001304  A4D8               	btfss	status,2,c
  7702  001306  D01F               	goto	i2l404
  7703                           
  7704                           ;main.c: 830: assembly_step = 5;
  7705  001308  0E00               	movlw	0
  7706  00130A  6E6C               	movwf	_assembly_step+1,c
  7707  00130C  0E05               	movlw	5
  7708  00130E  6E6B               	movwf	_assembly_step,c
  7709                           
  7710                           ;main.c: 831: prev_state = state;
  7711  001310  C06D  F061         	movff	_state,_prev_state
  7712  001314  C06E  F062         	movff	_state+1,_prev_state+1
  7713                           
  7714                           ;main.c: 832: state = 1;
  7715  001318  0E00               	movlw	0
  7716  00131A  6E6E               	movwf	_state+1,c
  7717  00131C  0E01               	movlw	1
  7718  00131E  6E6D               	movwf	_state,c
  7719                           
  7720                           ;main.c: 833: lcdInst(0xC0);;
  7721  001320  0EC0               	movlw	192
  7722  001322  EC72  F01D         	call	i2_lcdInst
  7723                           
  7724                           ;main.c: 834: putch(keys[keypress]);
  7725  001326  5040               	movf	interruptHandler@keypress,w,c
  7726  001328  0D01               	mullw	1
  7727  00132A  0E6B               	movlw	low _keys
  7728  00132C  24F3               	addwf	prodl,w,c
  7729  00132E  6EF6               	movwf	tblptrl,c
  7730  001330  0EFD               	movlw	high _keys
  7731  001332  20F4               	addwfc	prodh,w,c
  7732  001334  6EF7               	movwf	tblptrh,c
  7733  001336                     	if	1	;There are 3 active tblptr bytes
  7734  001336  6AF8               	clrf	tblptru,c
  7735  001338  0E00               	movlw	low (__mediumconst shr (0+16))
  7736  00133A  22F8               	addwfc	tblptru,f,c
  7737  00133C                     	endif
  7738  00133C  0008               	tblrd		*
  7739  00133E  50F5               	movf	tablat,w,c
  7740  001340  EC68  F01D         	call	i2_putch
  7741                           
  7742                           ;main.c: 836: }
  7743  001344  D07C               	goto	i2l411
  7744  001346                     i2l404:
  7745                           
  7746                           ;main.c: 837: else if (temp == '6') {
  7747  001346  0E36               	movlw	54
  7748  001348  1841               	xorwf	interruptHandler@temp,w,c
  7749  00134A  A4D8               	btfss	status,2,c
  7750  00134C  D01F               	goto	i2l406
  7751                           
  7752                           ;main.c: 838: assembly_step = 6;
  7753  00134E  0E00               	movlw	0
  7754  001350  6E6C               	movwf	_assembly_step+1,c
  7755  001352  0E06               	movlw	6
  7756  001354  6E6B               	movwf	_assembly_step,c
  7757                           
  7758                           ;main.c: 839: prev_state = state;
  7759  001356  C06D  F061         	movff	_state,_prev_state
  7760  00135A  C06E  F062         	movff	_state+1,_prev_state+1
  7761                           
  7762                           ;main.c: 840: state = 1;
  7763  00135E  0E00               	movlw	0
  7764  001360  6E6E               	movwf	_state+1,c
  7765  001362  0E01               	movlw	1
  7766  001364  6E6D               	movwf	_state,c
  7767                           
  7768                           ;main.c: 841: lcdInst(0xC0);;
  7769  001366  0EC0               	movlw	192
  7770  001368  EC72  F01D         	call	i2_lcdInst
  7771                           
  7772                           ;main.c: 842: putch(keys[keypress]);
  7773  00136C  5040               	movf	interruptHandler@keypress,w,c
  7774  00136E  0D01               	mullw	1
  7775  001370  0E6B               	movlw	low _keys
  7776  001372  24F3               	addwf	prodl,w,c
  7777  001374  6EF6               	movwf	tblptrl,c
  7778  001376  0EFD               	movlw	high _keys
  7779  001378  20F4               	addwfc	prodh,w,c
  7780  00137A  6EF7               	movwf	tblptrh,c
  7781  00137C                     	if	1	;There are 3 active tblptr bytes
  7782  00137C  6AF8               	clrf	tblptru,c
  7783  00137E  0E00               	movlw	low (__mediumconst shr (0+16))
  7784  001380  22F8               	addwfc	tblptru,f,c
  7785  001382                     	endif
  7786  001382  0008               	tblrd		*
  7787  001384  50F5               	movf	tablat,w,c
  7788  001386  EC68  F01D         	call	i2_putch
  7789                           
  7790                           ;main.c: 843: }
  7791  00138A  D059               	goto	i2l411
  7792  00138C                     i2l406:
  7793                           
  7794                           ;main.c: 844: else if (temp == '7'){
  7795  00138C  0E37               	movlw	55
  7796  00138E  1841               	xorwf	interruptHandler@temp,w,c
  7797  001390  A4D8               	btfss	status,2,c
  7798  001392  D01F               	goto	i2l408
  7799                           
  7800                           ;main.c: 845: assembly_step = 7;
  7801  001394  0E00               	movlw	0
  7802  001396  6E6C               	movwf	_assembly_step+1,c
  7803  001398  0E07               	movlw	7
  7804  00139A  6E6B               	movwf	_assembly_step,c
  7805                           
  7806                           ;main.c: 846: prev_state = state;
  7807  00139C  C06D  F061         	movff	_state,_prev_state
  7808  0013A0  C06E  F062         	movff	_state+1,_prev_state+1
  7809                           
  7810                           ;main.c: 847: state = 1;
  7811  0013A4  0E00               	movlw	0
  7812  0013A6  6E6E               	movwf	_state+1,c
  7813  0013A8  0E01               	movlw	1
  7814  0013AA  6E6D               	movwf	_state,c
  7815                           
  7816                           ;main.c: 848: lcdInst(0xC0);;
  7817  0013AC  0EC0               	movlw	192
  7818  0013AE  EC72  F01D         	call	i2_lcdInst
  7819                           
  7820                           ;main.c: 849: putch(keys[keypress]);
  7821  0013B2  5040               	movf	interruptHandler@keypress,w,c
  7822  0013B4  0D01               	mullw	1
  7823  0013B6  0E6B               	movlw	low _keys
  7824  0013B8  24F3               	addwf	prodl,w,c
  7825  0013BA  6EF6               	movwf	tblptrl,c
  7826  0013BC  0EFD               	movlw	high _keys
  7827  0013BE  20F4               	addwfc	prodh,w,c
  7828  0013C0  6EF7               	movwf	tblptrh,c
  7829  0013C2                     	if	1	;There are 3 active tblptr bytes
  7830  0013C2  6AF8               	clrf	tblptru,c
  7831  0013C4  0E00               	movlw	low (__mediumconst shr (0+16))
  7832  0013C6  22F8               	addwfc	tblptru,f,c
  7833  0013C8                     	endif
  7834  0013C8  0008               	tblrd		*
  7835  0013CA  50F5               	movf	tablat,w,c
  7836  0013CC  EC68  F01D         	call	i2_putch
  7837                           
  7838                           ;main.c: 851: }
  7839  0013D0  D036               	goto	i2l411
  7840  0013D2                     i2l408:
  7841                           
  7842                           ;main.c: 852: else if (temp == '8'){
  7843  0013D2  0E38               	movlw	56
  7844  0013D4  1841               	xorwf	interruptHandler@temp,w,c
  7845  0013D6  A4D8               	btfss	status,2,c
  7846  0013D8  D01F               	goto	i2l410
  7847                           
  7848                           ;main.c: 853: assembly_step = 8;
  7849  0013DA  0E00               	movlw	0
  7850  0013DC  6E6C               	movwf	_assembly_step+1,c
  7851  0013DE  0E08               	movlw	8
  7852  0013E0  6E6B               	movwf	_assembly_step,c
  7853                           
  7854                           ;main.c: 854: prev_state = state;
  7855  0013E2  C06D  F061         	movff	_state,_prev_state
  7856  0013E6  C06E  F062         	movff	_state+1,_prev_state+1
  7857                           
  7858                           ;main.c: 855: state = 1;
  7859  0013EA  0E00               	movlw	0
  7860  0013EC  6E6E               	movwf	_state+1,c
  7861  0013EE  0E01               	movlw	1
  7862  0013F0  6E6D               	movwf	_state,c
  7863                           
  7864                           ;main.c: 856: lcdInst(0xC0);;
  7865  0013F2  0EC0               	movlw	192
  7866  0013F4  EC72  F01D         	call	i2_lcdInst
  7867                           
  7868                           ;main.c: 857: putch(keys[keypress]);
  7869  0013F8  5040               	movf	interruptHandler@keypress,w,c
  7870  0013FA  0D01               	mullw	1
  7871  0013FC  0E6B               	movlw	low _keys
  7872  0013FE  24F3               	addwf	prodl,w,c
  7873  001400  6EF6               	movwf	tblptrl,c
  7874  001402  0EFD               	movlw	high _keys
  7875  001404  20F4               	addwfc	prodh,w,c
  7876  001406  6EF7               	movwf	tblptrh,c
  7877  001408                     	if	1	;There are 3 active tblptr bytes
  7878  001408  6AF8               	clrf	tblptru,c
  7879  00140A  0E00               	movlw	low (__mediumconst shr (0+16))
  7880  00140C  22F8               	addwfc	tblptru,f,c
  7881  00140E                     	endif
  7882  00140E  0008               	tblrd		*
  7883  001410  50F5               	movf	tablat,w,c
  7884  001412  EC68  F01D         	call	i2_putch
  7885                           
  7886                           ;main.c: 859: }
  7887  001416  D013               	goto	i2l411
  7888  001418                     i2l410:
  7889                           
  7890                           ;main.c: 860: else{
  7891                           ;main.c: 866: initLCD();
  7892  001418  EC9F  F01B         	call	i2_initLCD	;wreg free
  7893                           
  7894                           ;main.c: 867: printf("Wrong number! ");
  7895  00141C  0EB7               	movlw	low STR_30
  7896  00141E  6E0D               	movwf	i2printf@f,c
  7897  001420  0EFE               	movlw	high STR_30
  7898  001422  6E0E               	movwf	i2printf@f+1,c
  7899  001424  ECCE  F013         	call	i2_printf	;wreg free
  7900                           
  7901                           ;main.c: 868: _delay((unsigned long)((1000)*(40000000/4000.0)));
  7902  001428  0E33               	movlw	51
  7903  00142A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7904  00142C  0EBB               	movlw	187
  7905  00142E  6E27               	movwf	??_interruptHandler& (0+255),c
  7906  001430  0EE0               	movlw	224
  7907  001432                     i2u524_47:
  7908  001432  2EE8               	decfsz	wreg,f,c
  7909  001434  D7FE               	bra	i2u524_47
  7910  001436  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7911  001438  D7FC               	bra	i2u524_47
  7912  00143A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7913  00143C  D7FA               	bra	i2u524_47
  7914  00143E                     i2l411:
  7915                           
  7916                           ;main.c: 870: }
  7917                           ;main.c: 876: generate_compartment_array(assembly_step);
  7918  00143E  C06B  F001         	movff	_assembly_step,generate_compartment_array@step
  7919  001442  C06C  F002         	movff	_assembly_step+1,generate_compartment_array@step+1
  7920  001446  ECDB  F015         	call	_generate_compartment_array	;wreg free
  7921  00144A  D2D5               	goto	i2l5508
  7922  00144C                     i2l401:
  7923                           
  7924                           ;main.c: 883: }
  7925                           ;main.c: 891: if(state == 1){
  7926  00144C  046D               	decf	_state,w,c
  7927  00144E  106E               	iorwf	_state+1,w,c
  7928  001450  A4D8               	btfss	status,2,c
  7929  001452  D19C               	goto	i2l412
  7930                           
  7931                           ;main.c: 892: if (temp == 'A'){
  7932  001454  0E41               	movlw	65
  7933  001456  1841               	xorwf	interruptHandler@temp,w,c
  7934  001458  A4D8               	btfss	status,2,c
  7935  00145A  D004               	goto	i2l413
  7936                           
  7937                           ;main.c: 893: state = prev_state;
  7938  00145C  C061  F06D         	movff	_prev_state,_state
  7939  001460  C062  F06E         	movff	_prev_state+1,_state+1
  7940  001464                     i2l413:
  7941                           
  7942                           ;main.c: 894: }
  7943                           ;main.c: 896: if (temp == '1'){
  7944  001464  0E31               	movlw	49
  7945  001466  1841               	xorwf	interruptHandler@temp,w,c
  7946  001468  A4D8               	btfss	status,2,c
  7947  00146A  D01C               	goto	i2l414
  7948                           
  7949                           ;main.c: 897: lcdInst(0xC0);;
  7950  00146C  0EC0               	movlw	192
  7951  00146E  EC72  F01D         	call	i2_lcdInst
  7952                           
  7953                           ;main.c: 898: putch('B');
  7954  001472  0E42               	movlw	66
  7955  001474  EC68  F01D         	call	i2_putch
  7956                           
  7957                           ;main.c: 899: strcpy(temp_set,"B");
  7958  001478  0EAF               	movlw	low _temp_set
  7959  00147A  6E07               	movwf	strcpy@to,c
  7960  00147C  0E00               	movlw	high _temp_set
  7961  00147E  6E08               	movwf	strcpy@to+1,c
  7962  001480  0EFD               	movlw	low STR_31
  7963  001482  6E09               	movwf	strcpy@from,c
  7964  001484  0EFF               	movlw	high STR_31
  7965  001486  6E0A               	movwf	strcpy@from+1,c
  7966  001488  EC0F  F01C         	call	_strcpy	;wreg free
  7967                           
  7968                           ;main.c: 900: strcat(current_set,temp_set);
  7969  00148C  0EB4               	movlw	low _current_set
  7970  00148E  6E01               	movwf	strcat@to,c
  7971  001490  0E00               	movlw	high _current_set
  7972  001492  6E02               	movwf	strcat@to+1,c
  7973  001494  0EAF               	movlw	low _temp_set
  7974  001496  6E03               	movwf	strcat@from,c
  7975  001498  0E00               	movlw	high _temp_set
  7976  00149A  6E04               	movwf	strcat@from+1,c
  7977  00149C  EC75  F01C         	call	_strcat	;wreg free
  7978                           
  7979                           ;main.c: 901: counter++;
  7980  0014A0  4A69               	infsnz	_counter,f,c
  7981  0014A2  2A6A               	incf	_counter+1,f,c
  7982  0014A4                     i2l414:
  7983                           
  7984                           ;main.c: 902: }
  7985                           ;main.c: 904: if(temp == '2'){
  7986  0014A4  0E32               	movlw	50
  7987  0014A6  1841               	xorwf	interruptHandler@temp,w,c
  7988  0014A8  A4D8               	btfss	status,2,c
  7989  0014AA  D01C               	goto	i2l415
  7990                           
  7991                           ;main.c: 905: lcdInst(0xC0);;
  7992  0014AC  0EC0               	movlw	192
  7993  0014AE  EC72  F01D         	call	i2_lcdInst
  7994                           
  7995                           ;main.c: 906: putch('N');
  7996  0014B2  0E4E               	movlw	78
  7997  0014B4  EC68  F01D         	call	i2_putch
  7998                           
  7999                           ;main.c: 907: strcpy(temp_set,"N");
  8000  0014B8  0EAF               	movlw	low _temp_set
  8001  0014BA  6E07               	movwf	strcpy@to,c
  8002  0014BC  0E00               	movlw	high _temp_set
  8003  0014BE  6E08               	movwf	strcpy@to+1,c
  8004  0014C0  0EEC               	movlw	low (STR_53+2)
  8005  0014C2  6E09               	movwf	strcpy@from,c
  8006  0014C4  0EFF               	movlw	high (STR_53+2)
  8007  0014C6  6E0A               	movwf	strcpy@from+1,c
  8008  0014C8  EC0F  F01C         	call	_strcpy	;wreg free
  8009                           
  8010                           ;main.c: 908: strcat(current_set,temp_set);
  8011  0014CC  0EB4               	movlw	low _current_set
  8012  0014CE  6E01               	movwf	strcat@to,c
  8013  0014D0  0E00               	movlw	high _current_set
  8014  0014D2  6E02               	movwf	strcat@to+1,c
  8015  0014D4  0EAF               	movlw	low _temp_set
  8016  0014D6  6E03               	movwf	strcat@from,c
  8017  0014D8  0E00               	movlw	high _temp_set
  8018  0014DA  6E04               	movwf	strcat@from+1,c
  8019  0014DC  EC75  F01C         	call	_strcat	;wreg free
  8020                           
  8021                           ;main.c: 909: counter++;
  8022  0014E0  4A69               	infsnz	_counter,f,c
  8023  0014E2  2A6A               	incf	_counter+1,f,c
  8024  0014E4                     i2l415:
  8025                           
  8026                           ;main.c: 910: }
  8027                           ;main.c: 912: if(temp == '3'){
  8028  0014E4  0E33               	movlw	51
  8029  0014E6  1841               	xorwf	interruptHandler@temp,w,c
  8030  0014E8  A4D8               	btfss	status,2,c
  8031  0014EA  D01C               	goto	i2l416
  8032                           
  8033                           ;main.c: 913: lcdInst(0xC0);;
  8034  0014EC  0EC0               	movlw	192
  8035  0014EE  EC72  F01D         	call	i2_lcdInst
  8036                           
  8037                           ;main.c: 914: putch('S');
  8038  0014F2  0E53               	movlw	83
  8039  0014F4  EC68  F01D         	call	i2_putch
  8040                           
  8041                           ;main.c: 916: strcpy(temp_set,"S");
  8042  0014F8  0EAF               	movlw	low _temp_set
  8043  0014FA  6E07               	movwf	strcpy@to,c
  8044  0014FC  0E00               	movlw	high _temp_set
  8045  0014FE  6E08               	movwf	strcpy@to+1,c
  8046  001500  0EF0               	movlw	low (STR_54+2)
  8047  001502  6E09               	movwf	strcpy@from,c
  8048  001504  0EFF               	movlw	high (STR_54+2)
  8049  001506  6E0A               	movwf	strcpy@from+1,c
  8050  001508  EC0F  F01C         	call	_strcpy	;wreg free
  8051                           
  8052                           ;main.c: 917: strcat(current_set,temp_set);
  8053  00150C  0EB4               	movlw	low _current_set
  8054  00150E  6E01               	movwf	strcat@to,c
  8055  001510  0E00               	movlw	high _current_set
  8056  001512  6E02               	movwf	strcat@to+1,c
  8057  001514  0EAF               	movlw	low _temp_set
  8058  001516  6E03               	movwf	strcat@from,c
  8059  001518  0E00               	movlw	high _temp_set
  8060  00151A  6E04               	movwf	strcat@from+1,c
  8061  00151C  EC75  F01C         	call	_strcat	;wreg free
  8062                           
  8063                           ;main.c: 918: counter++;
  8064  001520  4A69               	infsnz	_counter,f,c
  8065  001522  2A6A               	incf	_counter+1,f,c
  8066  001524                     i2l416:
  8067                           
  8068                           ;main.c: 919: }
  8069                           ;main.c: 920: if (temp == '4'){
  8070  001524  0E34               	movlw	52
  8071  001526  1841               	xorwf	interruptHandler@temp,w,c
  8072  001528  A4D8               	btfss	status,2,c
  8073  00152A  D01C               	goto	i2l417
  8074                           
  8075                           ;main.c: 921: lcdInst(0xC0);;
  8076  00152C  0EC0               	movlw	192
  8077  00152E  EC72  F01D         	call	i2_lcdInst
  8078                           
  8079                           ;main.c: 922: putch('W');
  8080  001532  0E57               	movlw	87
  8081  001534  EC68  F01D         	call	i2_putch
  8082                           
  8083                           ;main.c: 924: strcpy(temp_set,"W");
  8084  001538  0EAF               	movlw	low _temp_set
  8085  00153A  6E07               	movwf	strcpy@to,c
  8086  00153C  0E00               	movlw	high _temp_set
  8087  00153E  6E08               	movwf	strcpy@to+1,c
  8088  001540  0EF4               	movlw	low (STR_55+2)
  8089  001542  6E09               	movwf	strcpy@from,c
  8090  001544  0EFF               	movlw	high (STR_55+2)
  8091  001546  6E0A               	movwf	strcpy@from+1,c
  8092  001548  EC0F  F01C         	call	_strcpy	;wreg free
  8093                           
  8094                           ;main.c: 925: strcat(current_set,temp_set);
  8095  00154C  0EB4               	movlw	low _current_set
  8096  00154E  6E01               	movwf	strcat@to,c
  8097  001550  0E00               	movlw	high _current_set
  8098  001552  6E02               	movwf	strcat@to+1,c
  8099  001554  0EAF               	movlw	low _temp_set
  8100  001556  6E03               	movwf	strcat@from,c
  8101  001558  0E00               	movlw	high _temp_set
  8102  00155A  6E04               	movwf	strcat@from+1,c
  8103  00155C  EC75  F01C         	call	_strcat	;wreg free
  8104                           
  8105                           ;main.c: 927: counter++;
  8106  001560  4A69               	infsnz	_counter,f,c
  8107  001562  2A6A               	incf	_counter+1,f,c
  8108  001564                     i2l417:
  8109                           
  8110                           ;main.c: 928: }
  8111                           ;main.c: 930: if (keys[keypress] == '*'){
  8112  001564  5040               	movf	interruptHandler@keypress,w,c
  8113  001566  0D01               	mullw	1
  8114  001568  0E6B               	movlw	low _keys
  8115  00156A  24F3               	addwf	prodl,w,c
  8116  00156C  6EF6               	movwf	tblptrl,c
  8117  00156E  0EFD               	movlw	high _keys
  8118  001570  20F4               	addwfc	prodh,w,c
  8119  001572  6EF7               	movwf	tblptrh,c
  8120  001574                     	if	1	;There are 3 active tblptr bytes
  8121  001574  6AF8               	clrf	tblptru,c
  8122  001576  0E00               	movlw	low (__mediumconst shr (0+16))
  8123  001578  22F8               	addwfc	tblptru,f,c
  8124  00157A                     	endif
  8125  00157A  0008               	tblrd		*
  8126  00157C  50F5               	movf	tablat,w,c
  8127  00157E  0A2A               	xorlw	42
  8128  001580  A4D8               	btfss	status,2,c
  8129  001582  D0D9               	goto	i2l418
  8130                           
  8131                           ;main.c: 933: _delay((unsigned long)((500)*(40000000/4000.0)));
  8132  001584  0E1A               	movlw	26
  8133  001586  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8134  001588  0E5E               	movlw	94
  8135  00158A  6E27               	movwf	??_interruptHandler& (0+255),c
  8136  00158C  0E6E               	movlw	110
  8137  00158E                     i2u525_47:
  8138  00158E  2EE8               	decfsz	wreg,f,c
  8139  001590  D7FE               	bra	i2u525_47
  8140  001592  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8141  001594  D7FC               	bra	i2u525_47
  8142  001596  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8143  001598  D7FA               	bra	i2u525_47
  8144  00159A  D000               	nop2	
  8145                           
  8146                           ;main.c: 934: counter ++;
  8147  00159C  4A69               	infsnz	_counter,f,c
  8148  00159E  2A6A               	incf	_counter+1,f,c
  8149                           
  8150                           ;main.c: 935: for (int i=0;i<20;i++){
  8151  0015A0  0E00               	movlw	0
  8152  0015A2  6E3F               	movwf	interruptHandler@i+1,c
  8153  0015A4  0E00               	movlw	0
  8154  0015A6  6E3E               	movwf	interruptHandler@i,c
  8155  0015A8  BE3F               	btfsc	interruptHandler@i+1,7,c
  8156  0015AA  D008               	goto	i2l419
  8157  0015AC  503F               	movf	interruptHandler@i+1,w,c
  8158  0015AE  E105               	bnz	i2u446_40
  8159  0015B0  0E14               	movlw	20
  8160  0015B2  5C3E               	subwf	interruptHandler@i,w,c
  8161  0015B4  B0D8               	btfsc	status,0,c
  8162  0015B6  D088               	goto	i2u448_40
  8163  0015B8  D001               	goto	i2l419
  8164  0015BA                     i2u446_40:
  8165  0015BA  D086               	goto	i2u448_40
  8166  0015BC                     i2l419:
  8167                           
  8168                           ;main.c: 936: if (strncmp(current_set,strs[i],4) == 0){
  8169  0015BC  0EB4               	movlw	low _current_set
  8170  0015BE  6E07               	movwf	strncmp@s1,c
  8171  0015C0  0E00               	movlw	high _current_set
  8172  0015C2  6E08               	movwf	strncmp@s1+1,c
  8173  0015C4  C03E  F001         	movff	interruptHandler@i,i2___wmul@multiplier
  8174  0015C8  C03F  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
  8175  0015CC  0E00               	movlw	0
  8176  0015CE  6E04               	movwf	i2___wmul@multiplicand+1,c
  8177  0015D0  0E05               	movlw	5
  8178  0015D2  6E03               	movwf	i2___wmul@multiplicand,c
  8179  0015D4  ECF0  F01C         	call	i2___wmul	;wreg free
  8180  0015D8  0E9E               	movlw	low _strs
  8181  0015DA  2401               	addwf	?i2___wmul,w,c
  8182  0015DC  6E09               	movwf	strncmp@s2,c
  8183  0015DE  0EFD               	movlw	high _strs
  8184  0015E0  2002               	addwfc	?i2___wmul+1,w,c
  8185  0015E2  6E0A               	movwf	strncmp@s2+1,c
  8186  0015E4  0E00               	movlw	0
  8187  0015E6  6E0C               	movwf	strncmp@len+1,c
  8188  0015E8  0E04               	movlw	4
  8189  0015EA  6E0B               	movwf	strncmp@len,c
  8190  0015EC  EC19  F019         	call	_strncmp	;wreg free
  8191  0015F0  5007               	movf	?_strncmp,w,c
  8192  0015F2  1008               	iorwf	?_strncmp+1,w,c
  8193  0015F4  A4D8               	btfss	status,2,c
  8194  0015F6  D061               	goto	i2l421
  8195                           
  8196                           ;main.c: 937: strcpy(final_set[counter_step],current_set);
  8197  0015F8  C067  F001         	movff	_counter_step,i2___wmul@multiplier
  8198  0015FC  C068  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
  8199  001600  0E00               	movlw	0
  8200  001602  6E04               	movwf	i2___wmul@multiplicand+1,c
  8201  001604  0E05               	movlw	5
  8202  001606  6E03               	movwf	i2___wmul@multiplicand,c
  8203  001608  ECF0  F01C         	call	i2___wmul	;wreg free
  8204  00160C  0E5C               	movlw	low _final_set
  8205  00160E  2401               	addwf	?i2___wmul,w,c
  8206  001610  6E07               	movwf	strcpy@to,c
  8207  001612  0E01               	movlw	high _final_set
  8208  001614  2002               	addwfc	?i2___wmul+1,w,c
  8209  001616  6E08               	movwf	strcpy@to+1,c
  8210  001618  0EB4               	movlw	low _current_set
  8211  00161A  6E09               	movwf	strcpy@from,c
  8212  00161C  0E00               	movlw	high _current_set
  8213  00161E  6E0A               	movwf	strcpy@from+1,c
  8214  001620  EC0F  F01C         	call	_strcpy	;wreg free
  8215                           
  8216                           ;main.c: 938: strcpy(current_set2,current_set);
  8217  001624  0E78               	movlw	low _current_set2
  8218  001626  6E07               	movwf	strcpy@to,c
  8219  001628  0E00               	movlw	high _current_set2
  8220  00162A  6E08               	movwf	strcpy@to+1,c
  8221  00162C  0EB4               	movlw	low _current_set
  8222  00162E  6E09               	movwf	strcpy@from,c
  8223  001630  0E00               	movlw	high _current_set
  8224  001632  6E0A               	movwf	strcpy@from+1,c
  8225  001634  EC0F  F01C         	call	_strcpy	;wreg free
  8226                           
  8227                           ;main.c: 941: valid = 1;
  8228  001638  0E00               	movlw	0
  8229  00163A  6E66               	movwf	_valid+1,c
  8230  00163C  0E01               	movlw	1
  8231  00163E  6E65               	movwf	_valid,c
  8232                           
  8233                           ;main.c: 942: state = 2;
  8234  001640  0E00               	movlw	0
  8235  001642  6E6E               	movwf	_state+1,c
  8236  001644  0E02               	movlw	2
  8237  001646  6E6D               	movwf	_state,c
  8238                           
  8239                           ;main.c: 944: initLCD();
  8240  001648  EC9F  F01B         	call	i2_initLCD	;wreg free
  8241                           
  8242                           ;main.c: 945: printf("correct!");
  8243  00164C  0E9E               	movlw	low STR_35
  8244  00164E  6E0D               	movwf	i2printf@f,c
  8245  001650  0EFF               	movlw	high STR_35
  8246  001652  6E0E               	movwf	i2printf@f+1,c
  8247  001654  ECCE  F013         	call	i2_printf	;wreg free
  8248                           
  8249                           ;main.c: 946: _delay((unsigned long)((500)*(40000000/4000.0)));
  8250  001658  0E1A               	movlw	26
  8251  00165A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8252  00165C  0E5E               	movlw	94
  8253  00165E  6E27               	movwf	??_interruptHandler& (0+255),c
  8254  001660  0E6E               	movlw	110
  8255  001662                     i2u526_47:
  8256  001662  2EE8               	decfsz	wreg,f,c
  8257  001664  D7FE               	bra	i2u526_47
  8258  001666  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8259  001668  D7FC               	bra	i2u526_47
  8260  00166A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8261  00166C  D7FA               	bra	i2u526_47
  8262  00166E  D000               	nop2	
  8263                           
  8264                           ;main.c: 948: printf("%s",current_set);
  8265  001670  0EFA               	movlw	low STR_36
  8266  001672  6E0D               	movwf	i2printf@f,c
  8267  001674  0EFF               	movlw	high STR_36
  8268  001676  6E0E               	movwf	i2printf@f+1,c
  8269  001678  0EB4               	movlw	low _current_set
  8270  00167A  6E0F               	movwf	?i2_printf+2,c
  8271  00167C  0E00               	movlw	high _current_set
  8272  00167E  6E10               	movwf	?i2_printf+3,c
  8273  001680  ECCE  F013         	call	i2_printf	;wreg free
  8274                           
  8275                           ;main.c: 950: strcpy(current_set,"");
  8276  001684  0EB4               	movlw	low _current_set
  8277  001686  6E07               	movwf	strcpy@to,c
  8278  001688  0E00               	movlw	high _current_set
  8279  00168A  6E08               	movwf	strcpy@to+1,c
  8280  00168C  0EC5               	movlw	low (STR_30+14)
  8281  00168E  6E09               	movwf	strcpy@from,c
  8282  001690  0EFE               	movlw	high (STR_30+14)
  8283  001692  6E0A               	movwf	strcpy@from+1,c
  8284  001694  EC0F  F01C         	call	_strcpy	;wreg free
  8285                           
  8286                           ;main.c: 951: _delay((unsigned long)((500)*(40000000/4000.0)));
  8287  001698  0E1A               	movlw	26
  8288  00169A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8289  00169C  0E5E               	movlw	94
  8290  00169E  6E27               	movwf	??_interruptHandler& (0+255),c
  8291  0016A0  0E6E               	movlw	110
  8292  0016A2                     i2u527_47:
  8293  0016A2  2EE8               	decfsz	wreg,f,c
  8294  0016A4  D7FE               	bra	i2u527_47
  8295  0016A6  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8296  0016A8  D7FC               	bra	i2u527_47
  8297  0016AA  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8298  0016AC  D7FA               	bra	i2u527_47
  8299  0016AE  D000               	nop2	
  8300                           
  8301                           ;main.c: 952: counter = 0;
  8302  0016B0  0E00               	movlw	0
  8303  0016B2  6E6A               	movwf	_counter+1,c
  8304  0016B4  0E00               	movlw	0
  8305  0016B6  6E69               	movwf	_counter,c
  8306                           
  8307                           ;main.c: 953: break;
  8308  0016B8  D007               	goto	i2u448_40
  8309  0016BA                     i2l421:
  8310  0016BA  4A3E               	infsnz	interruptHandler@i,f,c
  8311  0016BC  2A3F               	incf	interruptHandler@i+1,f,c
  8312  0016BE  BE3F               	btfsc	interruptHandler@i+1,7,c
  8313  0016C0  D77D               	goto	i2l419
  8314  0016C2  503F               	movf	interruptHandler@i+1,w,c
  8315  0016C4  E101               	bnz	i2l5396
  8316  0016C6  D774               	goto	L4
  8317  0016C8                     i2u448_40:
  8318  0016C8                     i2l5396:
  8319                           
  8320                           ;main.c: 955: }
  8321                           ;main.c: 956: }
  8322                           ;main.c: 957: if (valid != 1){
  8323  0016C8  0465               	decf	_valid,w,c
  8324  0016CA  1066               	iorwf	_valid+1,w,c
  8325  0016CC  B4D8               	btfsc	status,2,c
  8326  0016CE  D02F               	goto	i2l422
  8327                           
  8328                           ;main.c: 959: initLCD();
  8329  0016D0  EC9F  F01B         	call	i2_initLCD	;wreg free
  8330                           
  8331                           ;main.c: 960: printf("wrong set!");
  8332  0016D4  0E68               	movlw	low STR_38
  8333  0016D6  6E0D               	movwf	i2printf@f,c
  8334  0016D8  0EFF               	movlw	high STR_38
  8335  0016DA  6E0E               	movwf	i2printf@f+1,c
  8336  0016DC  ECCE  F013         	call	i2_printf	;wreg free
  8337                           
  8338                           ;main.c: 961: printf("%s",current_set);
  8339  0016E0  0EFA               	movlw	low STR_36
  8340  0016E2  6E0D               	movwf	i2printf@f,c
  8341  0016E4  0EFF               	movlw	high STR_36
  8342  0016E6  6E0E               	movwf	i2printf@f+1,c
  8343  0016E8  0EB4               	movlw	low _current_set
  8344  0016EA  6E0F               	movwf	?i2_printf+2,c
  8345  0016EC  0E00               	movlw	high _current_set
  8346  0016EE  6E10               	movwf	?i2_printf+3,c
  8347  0016F0  ECCE  F013         	call	i2_printf	;wreg free
  8348                           
  8349                           ;main.c: 962: strcpy(current_set,"");
  8350  0016F4  0EB4               	movlw	low _current_set
  8351  0016F6  6E07               	movwf	strcpy@to,c
  8352  0016F8  0E00               	movlw	high _current_set
  8353  0016FA  6E08               	movwf	strcpy@to+1,c
  8354  0016FC  0EC5               	movlw	low (STR_30+14)
  8355  0016FE  6E09               	movwf	strcpy@from,c
  8356  001700  0EFE               	movlw	high (STR_30+14)
  8357  001702  6E0A               	movwf	strcpy@from+1,c
  8358  001704  EC0F  F01C         	call	_strcpy	;wreg free
  8359                           
  8360                           ;main.c: 963: _delay((unsigned long)((300)*(40000000/4000.0)));
  8361  001708  0E10               	movlw	16
  8362  00170A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8363  00170C  0E39               	movlw	57
  8364  00170E  6E27               	movwf	??_interruptHandler& (0+255),c
  8365  001710  0E0E               	movlw	14
  8366  001712                     i2u528_47:
  8367  001712  2EE8               	decfsz	wreg,f,c
  8368  001714  D7FE               	bra	i2u528_47
  8369  001716  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8370  001718  D7FC               	bra	i2u528_47
  8371  00171A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8372  00171C  D7FA               	bra	i2u528_47
  8373                           
  8374                           ;main.c: 964: counter = 0;
  8375  00171E  0E00               	movlw	0
  8376  001720  6E6A               	movwf	_counter+1,c
  8377  001722  0E00               	movlw	0
  8378  001724  6E69               	movwf	_counter,c
  8379                           
  8380                           ;main.c: 965: valid = 0;
  8381  001726  0E00               	movlw	0
  8382  001728  6E66               	movwf	_valid+1,c
  8383  00172A  0E00               	movlw	0
  8384  00172C  6E65               	movwf	_valid,c
  8385  00172E                     i2l422:
  8386                           
  8387                           ;main.c: 966: }
  8388                           ;main.c: 967: valid = 0;
  8389  00172E  0E00               	movlw	0
  8390  001730  6E66               	movwf	_valid+1,c
  8391  001732  0E00               	movlw	0
  8392  001734  6E65               	movwf	_valid,c
  8393  001736                     i2l418:
  8394                           
  8395                           ;main.c: 969: }
  8396                           ;main.c: 972: if (counter >= 5){
  8397  001736  BE6A               	btfsc	_counter+1,7,c
  8398  001738  D15E               	goto	i2l5508
  8399  00173A  506A               	movf	_counter+1,w,c
  8400  00173C  E104               	bnz	i2u450_40
  8401  00173E  0E05               	movlw	5
  8402  001740  5C69               	subwf	_counter,w,c
  8403  001742  A0D8               	btfss	status,0,c
  8404  001744  D158               	goto	i2l5508
  8405  001746                     i2u450_40:
  8406                           
  8407                           ;main.c: 974: initLCD();
  8408  001746  EC9F  F01B         	call	i2_initLCD	;wreg free
  8409                           
  8410                           ;main.c: 975: printf("wrong!");
  8411  00174A  0EC0               	movlw	low STR_41
  8412  00174C  6E0D               	movwf	i2printf@f,c
  8413  00174E  0EFF               	movlw	high STR_41
  8414  001750  6E0E               	movwf	i2printf@f+1,c
  8415  001752  ECCE  F013         	call	i2_printf	;wreg free
  8416                           
  8417                           ;main.c: 977: _delay((unsigned long)((500)*(40000000/4000.0)));
  8418  001756  0E1A               	movlw	26
  8419  001758  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8420  00175A  0E5E               	movlw	94
  8421  00175C  6E27               	movwf	??_interruptHandler& (0+255),c
  8422  00175E  0E6E               	movlw	110
  8423  001760                     i2u529_47:
  8424  001760  2EE8               	decfsz	wreg,f,c
  8425  001762  D7FE               	bra	i2u529_47
  8426  001764  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8427  001766  D7FC               	bra	i2u529_47
  8428  001768  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8429  00176A  D7FA               	bra	i2u529_47
  8430  00176C  D000               	nop2	
  8431                           
  8432                           ;main.c: 979: strcpy(current_set,"");
  8433  00176E  0EB4               	movlw	low _current_set
  8434  001770  6E07               	movwf	strcpy@to,c
  8435  001772  0E00               	movlw	high _current_set
  8436  001774  6E08               	movwf	strcpy@to+1,c
  8437  001776  0EC5               	movlw	low (STR_30+14)
  8438  001778  6E09               	movwf	strcpy@from,c
  8439  00177A  0EFE               	movlw	high (STR_30+14)
  8440  00177C  6E0A               	movwf	strcpy@from+1,c
  8441  00177E  EC0F  F01C         	call	_strcpy	;wreg free
  8442                           
  8443                           ;main.c: 982: counter = 0;
  8444  001782  0E00               	movlw	0
  8445  001784  6E6A               	movwf	_counter+1,c
  8446  001786  0E00               	movlw	0
  8447  001788  6E69               	movwf	_counter,c
  8448  00178A  D135               	goto	i2l5508
  8449  00178C                     i2l412:
  8450                           
  8451                           ;main.c: 987: }
  8452                           ;main.c: 992: if (state ==2){
  8453  00178C  0E02               	movlw	2
  8454  00178E  186D               	xorwf	_state,w,c
  8455  001790  106E               	iorwf	_state+1,w,c
  8456  001792  A4D8               	btfss	status,2,c
  8457  001794  D11C               	goto	i2l440
  8458                           
  8459                           ;main.c: 993: counter = 0;
  8460  001796  0E00               	movlw	0
  8461  001798  6E6A               	movwf	_counter+1,c
  8462  00179A  0E00               	movlw	0
  8463  00179C  6E69               	movwf	_counter,c
  8464                           
  8465                           ;main.c: 995: lcdInst(0xC0);;
  8466  00179E  0EC0               	movlw	192
  8467  0017A0  EC72  F01D         	call	i2_lcdInst
  8468                           
  8469                           ;main.c: 996: putch(keys[keypress]);
  8470  0017A4  5040               	movf	interruptHandler@keypress,w,c
  8471  0017A6  0D01               	mullw	1
  8472  0017A8  0E6B               	movlw	low _keys
  8473  0017AA  24F3               	addwf	prodl,w,c
  8474  0017AC  6EF6               	movwf	tblptrl,c
  8475  0017AE  0EFD               	movlw	high _keys
  8476  0017B0  20F4               	addwfc	prodh,w,c
  8477  0017B2  6EF7               	movwf	tblptrh,c
  8478  0017B4                     	if	1	;There are 3 active tblptr bytes
  8479  0017B4  6AF8               	clrf	tblptru,c
  8480  0017B6  0E00               	movlw	low (__mediumconst shr (0+16))
  8481  0017B8  22F8               	addwfc	tblptru,f,c
  8482  0017BA                     	endif
  8483  0017BA  0008               	tblrd		*
  8484  0017BC  50F5               	movf	tablat,w,c
  8485  0017BE  EC68  F01D         	call	i2_putch
  8486                           
  8487                           ;main.c: 998: _delay((unsigned long)((500)*(40000000/4000.0)));
  8488  0017C2  0E1A               	movlw	26
  8489  0017C4  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8490  0017C6  0E5E               	movlw	94
  8491  0017C8  6E27               	movwf	??_interruptHandler& (0+255),c
  8492  0017CA  0E6E               	movlw	110
  8493  0017CC                     i2u530_47:
  8494  0017CC  2EE8               	decfsz	wreg,f,c
  8495  0017CE  D7FE               	bra	i2u530_47
  8496  0017D0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8497  0017D2  D7FC               	bra	i2u530_47
  8498  0017D4  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8499  0017D6  D7FA               	bra	i2u530_47
  8500  0017D8  D000               	nop2	
  8501                           
  8502                           ;main.c: 1000: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' 
      +                          ||keys[keypress] == '4'){
  8503  0017DA  5040               	movf	interruptHandler@keypress,w,c
  8504  0017DC  0D01               	mullw	1
  8505  0017DE  0E6B               	movlw	low _keys
  8506  0017E0  24F3               	addwf	prodl,w,c
  8507  0017E2  6EF6               	movwf	tblptrl,c
  8508  0017E4  0EFD               	movlw	high _keys
  8509  0017E6  20F4               	addwfc	prodh,w,c
  8510  0017E8  6EF7               	movwf	tblptrh,c
  8511  0017EA                     	if	1	;There are 3 active tblptr bytes
  8512  0017EA  6AF8               	clrf	tblptru,c
  8513  0017EC  0E00               	movlw	low (__mediumconst shr (0+16))
  8514  0017EE  22F8               	addwfc	tblptru,f,c
  8515  0017F0                     	endif
  8516  0017F0  0008               	tblrd		*
  8517  0017F2  50F5               	movf	tablat,w,c
  8518  0017F4  0A31               	xorlw	49
  8519  0017F6  B4D8               	btfsc	status,2,c
  8520  0017F8  D05A               	goto	i2l428
  8521  0017FA  5040               	movf	interruptHandler@keypress,w,c
  8522  0017FC  0D01               	mullw	1
  8523  0017FE  0E6B               	movlw	low _keys
  8524  001800  24F3               	addwf	prodl,w,c
  8525  001802  6EF6               	movwf	tblptrl,c
  8526  001804  0EFD               	movlw	high _keys
  8527  001806  20F4               	addwfc	prodh,w,c
  8528  001808  6EF7               	movwf	tblptrh,c
  8529  00180A                     	if	1	;There are 3 active tblptr bytes
  8530  00180A  6AF8               	clrf	tblptru,c
  8531  00180C  0E00               	movlw	low (__mediumconst shr (0+16))
  8532  00180E  22F8               	addwfc	tblptru,f,c
  8533  001810                     	endif
  8534  001810  0008               	tblrd		*
  8535  001812  50F5               	movf	tablat,w,c
  8536  001814  0A32               	xorlw	50
  8537  001816  B4D8               	btfsc	status,2,c
  8538  001818  D04A               	goto	i2l428
  8539  00181A  5040               	movf	interruptHandler@keypress,w,c
  8540  00181C  0D01               	mullw	1
  8541  00181E  0E6B               	movlw	low _keys
  8542  001820  24F3               	addwf	prodl,w,c
  8543  001822  6EF6               	movwf	tblptrl,c
  8544  001824  0EFD               	movlw	high _keys
  8545  001826  20F4               	addwfc	prodh,w,c
  8546  001828  6EF7               	movwf	tblptrh,c
  8547  00182A                     	if	1	;There are 3 active tblptr bytes
  8548  00182A  6AF8               	clrf	tblptru,c
  8549  00182C  0E00               	movlw	low (__mediumconst shr (0+16))
  8550  00182E  22F8               	addwfc	tblptru,f,c
  8551  001830                     	endif
  8552  001830  0008               	tblrd		*
  8553  001832  50F5               	movf	tablat,w,c
  8554  001834  0A33               	xorlw	51
  8555  001836  B4D8               	btfsc	status,2,c
  8556  001838  D03A               	goto	i2l428
  8557  00183A  5040               	movf	interruptHandler@keypress,w,c
  8558  00183C  0D01               	mullw	1
  8559  00183E  0E6B               	movlw	low _keys
  8560  001840  24F3               	addwf	prodl,w,c
  8561  001842  6EF6               	movwf	tblptrl,c
  8562  001844  0EFD               	movlw	high _keys
  8563  001846  20F4               	addwfc	prodh,w,c
  8564  001848  6EF7               	movwf	tblptrh,c
  8565  00184A                     	if	1	;There are 3 active tblptr bytes
  8566  00184A  6AF8               	clrf	tblptru,c
  8567  00184C  0E00               	movlw	low (__mediumconst shr (0+16))
  8568  00184E  22F8               	addwfc	tblptru,f,c
  8569  001850                     	endif
  8570  001850  0008               	tblrd		*
  8571  001852  50F5               	movf	tablat,w,c
  8572  001854  0A34               	xorlw	52
  8573  001856  B4D8               	btfsc	status,2,c
  8574  001858  D02A               	goto	i2l428
  8575  00185A  D0B9               	goto	i2l440
  8576  00185C                     
  8577                           ;main.c: 1004: number = 1;
  8578  00185C  0E00               	movlw	0
  8579  00185E  6E7E               	movwf	_number+1,c
  8580  001860  0E01               	movlw	1
  8581  001862  D00F               	goto	L8
  8582  001864                     
  8583                           ;main.c: 1007: number = 2;
  8584  001864  0E00               	movlw	0
  8585  001866  6E7E               	movwf	_number+1,c
  8586  001868  0E02               	movlw	2
  8587  00186A  D00B               	goto	L8
  8588  00186C                     
  8589                           ;main.c: 1010: number = 3;
  8590  00186C  0E00               	movlw	0
  8591  00186E  6E7E               	movwf	_number+1,c
  8592  001870  0E03               	movlw	3
  8593  001872  D007               	goto	L8
  8594  001874                     
  8595                           ;main.c: 1013: number = 4;
  8596  001874  0E00               	movlw	0
  8597  001876  6E7E               	movwf	_number+1,c
  8598  001878  0E04               	movlw	4
  8599  00187A  D003               	goto	L8
  8600  00187C                     
  8601                           ;main.c: 1016: number = 5;
  8602  00187C  0E00               	movlw	0
  8603  00187E  6E7E               	movwf	_number+1,c
  8604  001880  0E05               	movlw	5
  8605  001882                     L8:
  8606  001882  6E7D               	movwf	_number,c
  8607                           
  8608                           ;main.c: 1017: break;
  8609  001884  D031               	goto	i2l430
  8610  001886                     
  8611                           ;main.c: 1019: initLCD();
  8612  001886  EC9F  F01B         	call	i2_initLCD	;wreg free
  8613                           
  8614                           ;main.c: 1020: printf("Wrong input");
  8615  00188A  0E5C               	movlw	low STR_43
  8616  00188C  6E0D               	movwf	i2printf@f,c
  8617  00188E  0EFF               	movlw	high STR_43
  8618  001890  6E0E               	movwf	i2printf@f+1,c
  8619  001892  ECCE  F013         	call	i2_printf	;wreg free
  8620                           
  8621                           ;main.c: 1021: _delay((unsigned long)((1000)*(40000000/4000.0)));
  8622  001896  0E33               	movlw	51
  8623  001898  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8624  00189A  0EBB               	movlw	187
  8625  00189C  6E27               	movwf	??_interruptHandler& (0+255),c
  8626  00189E  0EE0               	movlw	224
  8627  0018A0                     i2u531_47:
  8628  0018A0  2EE8               	decfsz	wreg,f,c
  8629  0018A2  D7FE               	bra	i2u531_47
  8630  0018A4  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8631  0018A6  D7FC               	bra	i2u531_47
  8632  0018A8  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8633  0018AA  D7FA               	bra	i2u531_47
  8634                           
  8635                           ;main.c: 1022: }
  8636  0018AC  D01D               	goto	i2l430
  8637  0018AE                     i2l428:
  8638  0018AE  5040               	movf	interruptHandler@keypress,w,c
  8639  0018B0  0D01               	mullw	1
  8640  0018B2  0E6B               	movlw	low _keys
  8641  0018B4  24F3               	addwf	prodl,w,c
  8642  0018B6  6EF6               	movwf	tblptrl,c
  8643  0018B8  0EFD               	movlw	high _keys
  8644  0018BA  20F4               	addwfc	prodh,w,c
  8645  0018BC  6EF7               	movwf	tblptrh,c
  8646  0018BE                     	if	1	;There are 3 active tblptr bytes
  8647  0018BE  6AF8               	clrf	tblptru,c
  8648  0018C0  0E00               	movlw	low (__mediumconst shr (0+16))
  8649  0018C2  22F8               	addwfc	tblptru,f,c
  8650  0018C4                     	endif
  8651  0018C4  0008               	tblrd		*
  8652  0018C6  50F5               	movf	tablat,w,c
  8653                           
  8654                           ; Switch size 1, requested type "space"
  8655                           ; Number of cases is 5, Range of values is 49 to 53
  8656                           ; switch strategies available:
  8657                           ; Name         Instructions Cycles
  8658                           ; simple_byte           16     9 (average)
  8659                           ;	Chosen strategy is simple_byte
  8660  0018C8  0A31               	xorlw	49	; case 49
  8661  0018CA  B4D8               	btfsc	status,2,c
  8662  0018CC  D7C7               	goto	i2l429
  8663  0018CE  0A03               	xorlw	3	; case 50
  8664  0018D0  B4D8               	btfsc	status,2,c
  8665  0018D2  D7C8               	goto	i2l431
  8666  0018D4  0A01               	xorlw	1	; case 51
  8667  0018D6  B4D8               	btfsc	status,2,c
  8668  0018D8  D7C9               	goto	i2l432
  8669  0018DA  0A07               	xorlw	7	; case 52
  8670  0018DC  B4D8               	btfsc	status,2,c
  8671  0018DE  D7CA               	goto	i2l433
  8672  0018E0  0A01               	xorlw	1	; case 53
  8673  0018E2  B4D8               	btfsc	status,2,c
  8674  0018E4  D7CB               	goto	i2l434
  8675  0018E6  D7CF               	goto	i2l435
  8676  0018E8                     i2l430:
  8677                           
  8678                           ;main.c: 1025: is_valid();
  8679  0018E8  EC09  F000         	call	_is_valid	;wreg free
  8680                           
  8681                           ;main.c: 1027: if ( check() == 0){
  8682  0018EC  EC96  F01A         	call	_check	;wreg free
  8683  0018F0  5001               	movf	?_check,w,c
  8684  0018F2  1002               	iorwf	?_check+1,w,c
  8685  0018F4  A4D8               	btfss	status,2,c
  8686  0018F6  D028               	goto	i2l436
  8687                           
  8688                           ;main.c: 1028: initLCD();
  8689  0018F8  EC9F  F01B         	call	i2_initLCD	;wreg free
  8690                           
  8691                           ;main.c: 1029: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  8692  0018FC  0E80               	movlw	128
  8693  0018FE  EC72  F01D         	call	i2_lcdInst
  8694  001902  0E41               	movlw	65
  8695  001904  6E27               	movwf	??_interruptHandler& (0+255),c
  8696  001906  0EEE               	movlw	238
  8697  001908                     i2u532_47:
  8698  001908  2EE8               	decfsz	wreg,f,c
  8699  00190A  D7FE               	bra	i2u532_47
  8700  00190C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8701  00190E  D7FC               	bra	i2u532_47
  8702  001910  D000               	nop2	
  8703                           
  8704                           ;main.c: 1030: printf("TOO MANY");
  8705  001912  0EA7               	movlw	low STR_44
  8706  001914  6E0D               	movwf	i2printf@f,c
  8707  001916  0EFF               	movlw	high STR_44
  8708  001918  6E0E               	movwf	i2printf@f+1,c
  8709  00191A  ECCE  F013         	call	i2_printf	;wreg free
  8710                           
  8711                           ;main.c: 1032: _delay((unsigned long)((500)*(40000000/4000.0)));
  8712  00191E  0E1A               	movlw	26
  8713  001920  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8714  001922  0E5E               	movlw	94
  8715  001924  6E27               	movwf	??_interruptHandler& (0+255),c
  8716  001926  0E6E               	movlw	110
  8717  001928                     i2u533_47:
  8718  001928  2EE8               	decfsz	wreg,f,c
  8719  00192A  D7FE               	bra	i2u533_47
  8720  00192C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8721  00192E  D7FC               	bra	i2u533_47
  8722  001930  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8723  001932  D7FA               	bra	i2u533_47
  8724  001934  D000               	nop2	
  8725                           
  8726                           ;main.c: 1033: state = 2;
  8727  001936  0E00               	movlw	0
  8728  001938  6E6E               	movwf	_state+1,c
  8729  00193A  0E02               	movlw	2
  8730  00193C  6E6D               	movwf	_state,c
  8731                           
  8732                           ;main.c: 1034: number = 0;
  8733  00193E  0E00               	movlw	0
  8734  001940  6E7E               	movwf	_number+1,c
  8735  001942  0E00               	movlw	0
  8736  001944  6E7D               	movwf	_number,c
  8737                           
  8738                           ;main.c: 1035: }
  8739  001946  D043               	goto	i2l440
  8740  001948                     i2l436:
  8741                           
  8742                           ;main.c: 1038: else if (counter_step >= assembly_step-1){
  8743  001948  0EFF               	movlw	255
  8744  00194A  6E27               	movwf	??_interruptHandler& (0+255),c
  8745  00194C  0EFF               	movlw	255
  8746  00194E  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8747  001950  C06B  F029         	movff	_assembly_step,??_interruptHandler+2
  8748  001954  C06C  F02A         	movff	_assembly_step+1,??_interruptHandler+3
  8749  001958  5027               	movf	??_interruptHandler,w,c
  8750  00195A  2629               	addwf	??_interruptHandler+2,f,c
  8751  00195C  5028               	movf	??_interruptHandler+1,w,c
  8752  00195E  222A               	addwfc	??_interruptHandler+3,f,c
  8753  001960  5029               	movf	??_interruptHandler+2,w,c
  8754  001962  5C67               	subwf	_counter_step,w,c
  8755  001964  5068               	movf	_counter_step+1,w,c
  8756  001966  0A80               	xorlw	128
  8757  001968  6E2B               	movwf	(??_interruptHandler+4)& (0+255),c
  8758  00196A  502A               	movf	??_interruptHandler+3,w,c
  8759  00196C  0A80               	xorlw	128
  8760  00196E  582B               	subwfb	(??_interruptHandler+4)& (0+255),w,c
  8761  001970  A0D8               	btfss	status,0,c
  8762  001972  D012               	goto	i2l438
  8763                           
  8764                           ;main.c: 1039: final_number[counter_step] = number;
  8765  001974  90D8               	bcf	status,0,c
  8766  001976  3467               	rlcf	_counter_step,w,c
  8767  001978  6ED9               	movwf	fsr2l,c
  8768  00197A  3468               	rlcf	_counter_step+1,w,c
  8769  00197C  6EDA               	movwf	fsr2h,c
  8770  00197E  0E10               	movlw	low _final_number
  8771  001980  26D9               	addwf	fsr2l,f,c
  8772  001982  0E01               	movlw	high _final_number
  8773  001984  22DA               	addwfc	fsr2h,f,c
  8774  001986  C07D  FFDE         	movff	_number,postinc2
  8775  00198A  C07E  FFDD         	movff	_number+1,postdec2
  8776                           
  8777                           ;main.c: 1040: state = 3;
  8778  00198E  0E00               	movlw	0
  8779  001990  6E6E               	movwf	_state+1,c
  8780  001992  0E03               	movlw	3
  8781  001994  6E6D               	movwf	_state,c
  8782                           
  8783                           ;main.c: 1041: }
  8784  001996  D01B               	goto	i2l440
  8785  001998                     i2l438:
  8786                           
  8787                           ;main.c: 1042: else if ( check() == 1){
  8788  001998  EC96  F01A         	call	_check	;wreg free
  8789  00199C  0401               	decf	?_check,w,c
  8790  00199E  1002               	iorwf	?_check+1,w,c
  8791  0019A0  A4D8               	btfss	status,2,c
  8792  0019A2  D015               	goto	i2l440
  8793                           
  8794                           ;main.c: 1043: state = 1;
  8795  0019A4  0E00               	movlw	0
  8796  0019A6  6E6E               	movwf	_state+1,c
  8797  0019A8  0E01               	movlw	1
  8798  0019AA  6E6D               	movwf	_state,c
  8799                           
  8800                           ;main.c: 1044: initLCD();
  8801  0019AC  EC9F  F01B         	call	i2_initLCD	;wreg free
  8802                           
  8803                           ;main.c: 1047: final_number[counter_step] = number;
  8804  0019B0  90D8               	bcf	status,0,c
  8805  0019B2  3467               	rlcf	_counter_step,w,c
  8806  0019B4  6ED9               	movwf	fsr2l,c
  8807  0019B6  3468               	rlcf	_counter_step+1,w,c
  8808  0019B8  6EDA               	movwf	fsr2h,c
  8809  0019BA  0E10               	movlw	low _final_number
  8810  0019BC  26D9               	addwf	fsr2l,f,c
  8811  0019BE  0E01               	movlw	high _final_number
  8812  0019C0  22DA               	addwfc	fsr2h,f,c
  8813  0019C2  C07D  FFDE         	movff	_number,postinc2
  8814  0019C6  C07E  FFDD         	movff	_number+1,postdec2
  8815                           
  8816                           ;main.c: 1048: counter_step++;
  8817  0019CA  4A67               	infsnz	_counter_step,f,c
  8818  0019CC  2A68               	incf	_counter_step+1,f,c
  8819  0019CE                     i2l440:
  8820                           
  8821                           ;main.c: 1049: }
  8822                           ;main.c: 1052: }
  8823                           ;main.c: 1054: }
  8824                           ;main.c: 1061: B=0;N=0;S=0;W=0;
  8825  0019CE  0E00               	movlw	0
  8826  0019D0  6E60               	movwf	_B+1,c
  8827  0019D2  0E00               	movlw	0
  8828  0019D4  6E5F               	movwf	_B,c
  8829  0019D6  0E00               	movlw	0
  8830  0019D8  6E5E               	movwf	_N+1,c
  8831  0019DA  0E00               	movlw	0
  8832  0019DC  6E5D               	movwf	_N,c
  8833  0019DE  0E00               	movlw	0
  8834  0019E0  6E5C               	movwf	_S+1,c
  8835  0019E2  0E00               	movlw	0
  8836  0019E4  6E5B               	movwf	_S,c
  8837  0019E6  0E00               	movlw	0
  8838  0019E8  6E5A               	movwf	_W+1,c
  8839  0019EA  0E00               	movlw	0
  8840  0019EC  6E59               	movwf	_W,c
  8841                           
  8842                           ;main.c: 1062: total_number = 0;
  8843  0019EE  0E00               	movlw	0
  8844  0019F0  6E64               	movwf	_total_number+1,c
  8845  0019F2  0E00               	movlw	0
  8846  0019F4  6E63               	movwf	_total_number,c
  8847  0019F6                     i2l5508:
  8848                           
  8849                           ;main.c: 1064: INT1IF = 0;
  8850  0019F6  90F0               	bcf	intcon3,0,c	;volatile
  8851  0019F8                     i2l5510:
  8852                           
  8853                           ;main.c: 1065: return;
  8854  0019F8  C03D  F082         	movff	??_interruptHandler+22,btemp+3
  8855  0019FC  C03C  F081         	movff	??_interruptHandler+21,btemp+2
  8856  001A00  C03B  F080         	movff	??_interruptHandler+20,btemp+1
  8857  001A04  C03A  F07F         	movff	??_interruptHandler+19,btemp
  8858  001A08  C039  FFF5         	movff	??_interruptHandler+18,tablat
  8859  001A0C  C038  FFF8         	movff	??_interruptHandler+17,tblptru
  8860  001A10  C037  FFF7         	movff	??_interruptHandler+16,tblptrh
  8861  001A14  C036  FFF6         	movff	??_interruptHandler+15,tblptrl
  8862  001A18  C035  FFF4         	movff	??_interruptHandler+14,prodh
  8863  001A1C  C034  FFF3         	movff	??_interruptHandler+13,prodl
  8864  001A20  C033  FFDA         	movff	??_interruptHandler+12,fsr2h
  8865  001A24  C032  FFD9         	movff	??_interruptHandler+11,fsr2l
  8866  001A28  C031  FFE2         	movff	??_interruptHandler+10,fsr1h
  8867  001A2C  C030  FFE1         	movff	??_interruptHandler+9,fsr1l
  8868  001A30  C02F  FFEA         	movff	??_interruptHandler+8,fsr0h
  8869  001A34  C02E  FFE9         	movff	??_interruptHandler+7,fsr0l
  8870  001A38  C02D  FFFB         	movff	??_interruptHandler+6,pclatu
  8871  001A3C  C02C  FFFA         	movff	??_interruptHandler+5,pclath
  8872  001A40  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8873  001A42  0011               	retfie		f
  8874  001A44                     __end_of_interruptHandler:
  8875                           	opt stack 0
  8876                           pclatu	equ	0xFFB
  8877                           pclath	equ	0xFFA
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           intcon3	equ	0xFF0
  8886                           indf0	equ	0xFEF
  8887                           postinc0	equ	0xFEE
  8888                           fsr0h	equ	0xFEA
  8889                           fsr0l	equ	0xFE9
  8890                           wreg	equ	0xFE8
  8891                           postdec1	equ	0xFE5
  8892                           fsr1h	equ	0xFE2
  8893                           fsr1l	equ	0xFE1
  8894                           indf2	equ	0xFDF
  8895                           postinc2	equ	0xFDE
  8896                           postdec2	equ	0xFDD
  8897                           fsr2h	equ	0xFDA
  8898                           fsr2l	equ	0xFD9
  8899                           status	equ	0xFD8
  8900                           
  8901 ;; *************** function i2_printf *****************
  8902 ;; Defined at:
  8903 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8906 ;;		 -> STR_45(3), STR_44(9), STR_43(12), STR_41(7), 
  8907 ;;		 -> STR_39(3), STR_38(11), STR_36(3), STR_35(9), 
  8908 ;;		 -> STR_30(15), STR_29(13), STR_28(16), STR_27(15), 
  8909 ;;		 -> STR_26(15), STR_25(15), STR_24(15), STR_23(10), 
  8910 ;;		 -> STR_22(19), STR_21(17), STR_20(12), STR_19(17), 
  8911 ;;		 -> STR_18(17), STR_17(14), STR_16(15), STR_15(9), 
  8912 ;;		 -> STR_14(20), STR_13(3), STR_12(3), STR_11(21), 
  8913 ;;		 -> STR_10(11), STR_9(13), STR_8(18), STR_7(11), 
  8914 ;;		 -> STR_6(13), STR_5(19), STR_4(11), STR_3(13), 
  8915 ;;		 -> STR_2(15), STR_1(12), 
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;  printf          4    0        struct .
  8918 ;;  printf          2   35[COMRAM] int 
  8919 ;;  printf          2   32[COMRAM] unsigned int 
  8920 ;;  printf          2   30[COMRAM] unsigned int 
  8921 ;;  printf          2   28[COMRAM] PTR void [1]
  8922 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8923 ;;  printf          2   26[COMRAM] PTR const unsigned char 
  8924 ;;		 -> STR_66(7), number(2), current_set(5), 
  8925 ;;  printf          1   37[COMRAM] char 
  8926 ;;  printf          1   34[COMRAM] unsigned char 
  8927 ;;  printf          1   25[COMRAM] char 
  8928 ;;  printf          1   24[COMRAM] unsigned char 
  8929 ;; Return value:  Size  Location     Type
  8930 ;;                  2   12[COMRAM] int 
  8931 ;; Registers used:
  8932 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8933 ;; Tracked objects:
  8934 ;;		On entry : 0/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8938 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8941 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;Total ram usage:       26 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; Hardware stack levels required when called:    2
  8945 ;; This function calls:
  8946 ;;		i2___lwdiv
  8947 ;;		i2___lwmod
  8948 ;;		i2___wmul
  8949 ;;		i2_isdigit
  8950 ;;		i2_putch
  8951 ;; This function is called by:
  8952 ;;		_interruptHandler
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           	psect	text23
  8957  00279C                     __ptext23:
  8958                           	opt stack 0
  8959  00279C                     i2_printf:
  8960                           	opt stack 24
  8961                           
  8962                           ;doprnt.c: 466: va_list ap;
  8963                           ;doprnt.c: 499: signed char c;
  8964                           ;doprnt.c: 501: int width;
  8965                           ;doprnt.c: 506: signed char prec;
  8966                           ;doprnt.c: 508: unsigned char flag;
  8967                           ;doprnt.c: 523: union {
  8968                           ;doprnt.c: 524: unsigned long vd;
  8969                           ;doprnt.c: 525: double integ;
  8970                           ;doprnt.c: 526: } tmpval;
  8971                           ;doprnt.c: 528: unsigned int val;
  8972                           ;doprnt.c: 529: unsigned len;
  8973                           ;doprnt.c: 530: const char * cp;
  8974                           ;doprnt.c: 533: *ap = __va_start();
  8975                           
  8976                           ;incstack = 0
  8977  00279C  0E0F               	movlw	low (?i2_printf+2)
  8978  00279E  6E1D               	movwf	i2printf@ap,c
  8979  0027A0  0E00               	movlw	high (?i2_printf+2)
  8980  0027A2  6E1E               	movwf	i2printf@ap+1,c
  8981                           
  8982                           ;doprnt.c: 536: while(c = *f++) {
  8983  0027A4  D1FA               	goto	i2u381_40
  8984  0027A6                     
  8985                           ;doprnt.c: 538: if(c != '%')
  8986  0027A6  0E25               	movlw	37
  8987  0027A8  1826               	xorwf	i2printf@c,w,c
  8988  0027AA  B4D8               	btfsc	status,2,c
  8989  0027AC  D004               	goto	i2l800
  8990                           
  8991                           ;doprnt.c: 540: {
  8992                           ;doprnt.c: 541: (putch(c) );
  8993  0027AE  5026               	movf	i2printf@c,w,c
  8994  0027B0  EC68  F01D         	call	i2_putch
  8995                           
  8996                           ;doprnt.c: 542: continue;
  8997  0027B4  D1F2               	goto	i2u381_40
  8998  0027B6                     i2l800:
  8999                           
  9000                           ;doprnt.c: 543: }
  9001                           ;doprnt.c: 546: width = 0;
  9002  0027B6  0E00               	movlw	0
  9003  0027B8  6E25               	movwf	i2printf@width+1,c
  9004  0027BA  0E00               	movlw	0
  9005  0027BC  6E24               	movwf	i2printf@width,c
  9006                           
  9007                           ;doprnt.c: 548: flag = 0;
  9008  0027BE  0E00               	movlw	0
  9009  0027C0  6E23               	movwf	i2printf@flag,c
  9010                           
  9011                           ;doprnt.c: 551: switch(*f) {
  9012                           
  9013                           ;doprnt.c: 550: for(;;) {
  9014  0027C2  D003               	goto	i2l802
  9015  0027C4                     
  9016                           ;doprnt.c: 580: flag |= 0x04;
  9017  0027C4  8423               	bsf	i2printf@flag,2,c
  9018                           
  9019                           ;doprnt.c: 581: f++;
  9020  0027C6  4A0D               	infsnz	i2printf@f,f,c
  9021  0027C8  2A0E               	incf	i2printf@f+1,f,c
  9022  0027CA                     i2l802:
  9023  0027CA  C00D  FFF6         	movff	i2printf@f,tblptrl
  9024  0027CE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9025  0027D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9026  0027D2  6AF8               	clrf	tblptru,c
  9027  0027D4                     	endif
  9028  0027D4                     	if	0	;tblptru may be non-zero
  9029  0027D4                     	endif
  9030  0027D4  0008               	tblrd		*
  9031  0027D6  50F5               	movf	tablat,w,c
  9032                           
  9033                           ; Switch size 1, requested type "space"
  9034                           ; Number of cases is 1, Range of values is 48 to 48
  9035                           ; switch strategies available:
  9036                           ; Name         Instructions Cycles
  9037                           ; simple_byte            4     3 (average)
  9038                           ;	Chosen strategy is simple_byte
  9039  0027D8  0A30               	xorlw	48	; case 48
  9040  0027DA  B4D8               	btfsc	status,2,c
  9041  0027DC  D7F3               	goto	i2l803
  9042                           
  9043                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9044                           
  9045                           ;doprnt.c: 586: }
  9046                           
  9047                           ;doprnt.c: 585: break;
  9048  0027DE  C00D  FFF6         	movff	i2printf@f,tblptrl
  9049  0027E2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9050  0027E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9051  0027E6  6AF8               	clrf	tblptru,c
  9052  0027E8                     	endif
  9053  0027E8                     	if	0	;tblptru may be non-zero
  9054  0027E8                     	endif
  9055  0027E8  0008               	tblrd		*
  9056  0027EA  50F5               	movf	tablat,w,c
  9057  0027EC  EC37  F01D         	call	i2_isdigit
  9058  0027F0  A0D8               	btfss	status,0,c
  9059  0027F2  D0A6               	goto	i2l810
  9060                           
  9061                           ;doprnt.c: 598: width = 0;
  9062  0027F4  0E00               	movlw	0
  9063  0027F6  6E25               	movwf	i2printf@width+1,c
  9064  0027F8  0E00               	movlw	0
  9065  0027FA  6E24               	movwf	i2printf@width,c
  9066  0027FC                     
  9067                           ;doprnt.c: 600: width *= 10;
  9068  0027FC  C024  F001         	movff	i2printf@width,i2___wmul@multiplier
  9069  002800  C025  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9070  002804  0E00               	movlw	0
  9071  002806  6E04               	movwf	i2___wmul@multiplicand+1,c
  9072  002808  0E0A               	movlw	10
  9073  00280A  6E03               	movwf	i2___wmul@multiplicand,c
  9074  00280C  ECF0  F01C         	call	i2___wmul	;wreg free
  9075  002810  C001  F024         	movff	?i2___wmul,i2printf@width
  9076  002814  C002  F025         	movff	?i2___wmul+1,i2printf@width+1
  9077                           
  9078                           ;doprnt.c: 601: width += *f++ - '0';
  9079  002818  0ED0               	movlw	208
  9080  00281A  6E15               	movwf	??i2_printf& (0+255),c
  9081  00281C  0EFF               	movlw	255
  9082  00281E  6E16               	movwf	(??i2_printf+1)& (0+255),c
  9083  002820  C00D  FFF6         	movff	i2printf@f,tblptrl
  9084  002824  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9085  002828                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9086  002828  6AF8               	clrf	tblptru,c
  9087  00282A                     	endif
  9088  00282A                     	if	0	;tblptru may be non-zero
  9089  00282A                     	endif
  9090  00282A  0008               	tblrd		*
  9091  00282C  50F5               	movf	tablat,w,c
  9092  00282E  6E17               	movwf	(??i2_printf+2)& (0+255),c
  9093  002830  6A18               	clrf	(??i2_printf+3)& (0+255),c
  9094  002832  5015               	movf	??i2_printf,w,c
  9095  002834  2617               	addwf	??i2_printf+2,f,c
  9096  002836  5016               	movf	??i2_printf+1,w,c
  9097  002838  2218               	addwfc	??i2_printf+3,f,c
  9098  00283A  5017               	movf	??i2_printf+2,w,c
  9099  00283C  2624               	addwf	i2printf@width,f,c
  9100  00283E  5018               	movf	??i2_printf+3,w,c
  9101  002840  2225               	addwfc	i2printf@width+1,f,c
  9102  002842  4A0D               	infsnz	i2printf@f,f,c
  9103  002844  2A0E               	incf	i2printf@f+1,f,c
  9104                           
  9105                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9106  002846  C00D  FFF6         	movff	i2printf@f,tblptrl
  9107  00284A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9108  00284E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9109  00284E  6AF8               	clrf	tblptru,c
  9110  002850                     	endif
  9111  002850                     	if	0	;tblptru may be non-zero
  9112  002850                     	endif
  9113  002850  0008               	tblrd		*
  9114  002852  50F5               	movf	tablat,w,c
  9115  002854  EC37  F01D         	call	i2_isdigit
  9116  002858  A0D8               	btfss	status,0,c
  9117  00285A  D072               	goto	i2l810
  9118  00285C  D7CF               	goto	i2l808
  9119  00285E                     
  9120                           ;doprnt.c: 721: flag |= 0x80;
  9121  00285E  8E23               	bsf	i2printf@flag,7,c
  9122                           
  9123                           ;doprnt.c: 723: break;
  9124  002860  D08A               	goto	i2l815
  9125  002862                     
  9126                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9127  002862  C01D  FFD9         	movff	i2printf@ap,fsr2l
  9128  002866  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  9129  00286A  CFDE F01B          	movff	postinc2,i2printf@cp
  9130  00286E  CFDD F01C          	movff	postdec2,i2printf@cp+1
  9131  002872  0E02               	movlw	2
  9132  002874  261D               	addwf	i2printf@ap,f,c
  9133  002876  0E00               	movlw	0
  9134  002878  221E               	addwfc	i2printf@ap+1,f,c
  9135                           
  9136                           ;doprnt.c: 740: if(!cp)
  9137  00287A  501B               	movf	i2printf@cp,w,c
  9138  00287C  101C               	iorwf	i2printf@cp+1,w,c
  9139  00287E  A4D8               	btfss	status,2,c
  9140  002880  D004               	goto	i2l818
  9141                           
  9142                           ;doprnt.c: 741: cp = "(null)";
  9143  002882  0EB9               	movlw	low STR_66
  9144  002884  6E1B               	movwf	i2printf@cp,c
  9145  002886  0EFF               	movlw	high STR_66
  9146  002888  6E1C               	movwf	i2printf@cp+1,c
  9147  00288A                     i2l818:
  9148                           
  9149                           ;doprnt.c: 745: len = 0;
  9150  00288A  0E00               	movlw	0
  9151  00288C  6E20               	movwf	i2printf@len+1,c
  9152  00288E  0E00               	movlw	0
  9153  002890  6E1F               	movwf	i2printf@len,c
  9154                           
  9155                           ;doprnt.c: 746: while(cp[len])
  9156  002892  D002               	goto	i2l819
  9157  002894                     
  9158                           ;doprnt.c: 747: len++;
  9159  002894  4A1F               	infsnz	i2printf@len,f,c
  9160  002896  2A20               	incf	i2printf@len+1,f,c
  9161  002898                     i2l819:
  9162  002898  501F               	movf	i2printf@len,w,c
  9163  00289A  241B               	addwf	i2printf@cp,w,c
  9164  00289C  6E15               	movwf	??i2_printf& (0+255),c
  9165  00289E  5020               	movf	i2printf@len+1,w,c
  9166  0028A0  201C               	addwfc	i2printf@cp+1,w,c
  9167  0028A2  6E16               	movwf	(??i2_printf+1)& (0+255),c
  9168  0028A4  C015  FFF6         	movff	??i2_printf,tblptrl
  9169  0028A8  C016  FFF7         	movff	??i2_printf+1,tblptrh
  9170  0028AC  0E00               	movlw	low (__mediumconst shr (0+16))
  9171  0028AE  6EF8               	movwf	tblptru,c
  9172  0028B0  0E0F               	movlw	(high __ramtop+-1)
  9173  0028B2  64F7               	cpfsgt	tblptrh,c
  9174  0028B4  D003               	bra	i2u357_47
  9175  0028B6  0008               	tblrd		*
  9176  0028B8  50F5               	movf	tablat,w,c
  9177  0028BA  D005               	bra	i2u357_40
  9178  0028BC                     i2u357_47:
  9179  0028BC  CFF6 FFE9          	movff	tblptrl,fsr0l
  9180  0028C0  CFF7 FFEA          	movff	tblptrh,fsr0h
  9181  0028C4  50EF               	movf	indf0,w,c
  9182  0028C6                     i2u357_40:
  9183  0028C6  0900               	iorlw	0
  9184  0028C8  A4D8               	btfss	status,2,c
  9185  0028CA  D7E4               	goto	i2l820
  9186                           
  9187                           ;doprnt.c: 757: if(width > len)
  9188  0028CC  5024               	movf	i2printf@width,w,c
  9189  0028CE  5C1F               	subwf	i2printf@len,w,c
  9190  0028D0  5025               	movf	i2printf@width+1,w,c
  9191  0028D2  5820               	subwfb	i2printf@len+1,w,c
  9192  0028D4  B0D8               	btfsc	status,0,c
  9193  0028D6  D005               	goto	i2l822
  9194                           
  9195                           ;doprnt.c: 758: width -= len;
  9196  0028D8  501F               	movf	i2printf@len,w,c
  9197  0028DA  5E24               	subwf	i2printf@width,f,c
  9198  0028DC  5020               	movf	i2printf@len+1,w,c
  9199  0028DE  5A25               	subwfb	i2printf@width+1,f,c
  9200  0028E0  D008               	goto	i2l824
  9201  0028E2                     i2l822:
  9202                           
  9203                           ;doprnt.c: 759: else
  9204                           ;doprnt.c: 760: width = 0;
  9205  0028E2  0E00               	movlw	0
  9206  0028E4  6E25               	movwf	i2printf@width+1,c
  9207  0028E6  0E00               	movlw	0
  9208  0028E8  6E24               	movwf	i2printf@width,c
  9209                           
  9210                           ;doprnt.c: 764: while(width--)
  9211  0028EA  D003               	goto	i2l824
  9212  0028EC                     i2l4598:
  9213                           
  9214                           ;doprnt.c: 765: (putch(' ') );
  9215  0028EC  0E20               	movlw	32
  9216  0028EE  EC68  F01D         	call	i2_putch
  9217  0028F2                     i2l824:
  9218  0028F2  0624               	decf	i2printf@width,f,c
  9219  0028F4  A0D8               	btfss	status,0,c
  9220  0028F6  0625               	decf	i2printf@width+1,f,c
  9221  0028F8  2824               	incf	i2printf@width,w,c
  9222  0028FA  E1F8               	bnz	i2l4598
  9223  0028FC  2825               	incf	i2printf@width+1,w,c
  9224  0028FE  B4D8               	btfsc	status,2,c
  9225  002900  D016               	goto	i2l827
  9226  002902  D7F4               	goto	i2l825
  9227  002904                     i2l4602:
  9228                           
  9229                           ;doprnt.c: 768: (putch(*cp++) );
  9230  002904  C01B  FFF6         	movff	i2printf@cp,tblptrl
  9231  002908  C01C  FFF7         	movff	i2printf@cp+1,tblptrh
  9232  00290C  0E00               	movlw	low (__mediumconst shr (0+16))
  9233  00290E  6EF8               	movwf	tblptru,c
  9234  002910  0E0F               	movlw	(high __ramtop+-1)
  9235  002912  64F7               	cpfsgt	tblptrh,c
  9236  002914  D003               	bra	i2u361_47
  9237  002916  0008               	tblrd		*
  9238  002918  50F5               	movf	tablat,w,c
  9239  00291A  D005               	bra	i2u361_40
  9240  00291C                     i2u361_47:
  9241  00291C  CFF6 FFE9          	movff	tblptrl,fsr0l
  9242  002920  CFF7 FFEA          	movff	tblptrh,fsr0h
  9243  002924  50EF               	movf	indf0,w,c
  9244  002926                     i2u361_40:
  9245  002926  EC68  F01D         	call	i2_putch
  9246  00292A  4A1B               	infsnz	i2printf@cp,f,c
  9247  00292C  2A1C               	incf	i2printf@cp+1,f,c
  9248  00292E                     i2l827:
  9249  00292E  061F               	decf	i2printf@len,f,c
  9250  002930  A0D8               	btfss	status,0,c
  9251  002932  0620               	decf	i2printf@len+1,f,c
  9252  002934  281F               	incf	i2printf@len,w,c
  9253  002936  E1E6               	bnz	i2l4602
  9254  002938  2820               	incf	i2printf@len+1,w,c
  9255  00293A  B4D8               	btfsc	status,2,c
  9256  00293C  D12E               	goto	i2u381_40
  9257  00293E  D7E2               	goto	i2l828
  9258  002940                     i2l810:
  9259  002940  C00D  FFF6         	movff	i2printf@f,tblptrl
  9260  002944  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9261  002948  4A0D               	infsnz	i2printf@f,f,c
  9262  00294A  2A0E               	incf	i2printf@f+1,f,c
  9263  00294C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9264  00294C  6AF8               	clrf	tblptru,c
  9265  00294E                     	endif
  9266  00294E                     	if	0	;tblptru may be non-zero
  9267  00294E                     	endif
  9268  00294E  0008               	tblrd		*
  9269  002950  CFF5 F026          	movff	tablat,i2printf@c
  9270  002954  5026               	movf	i2printf@c,w,c
  9271                           
  9272                           ; Switch size 1, requested type "space"
  9273                           ; Number of cases is 5, Range of values is 0 to 120
  9274                           ; switch strategies available:
  9275                           ; Name         Instructions Cycles
  9276                           ; simple_byte           16     9 (average)
  9277                           ;	Chosen strategy is simple_byte
  9278  002956  0A00               	xorlw	0	; case 0
  9279  002958  B4D8               	btfsc	status,2,c
  9280  00295A  0012               	return	
  9281  00295C  0A64               	xorlw	100	; case 100
  9282  00295E  B4D8               	btfsc	status,2,c
  9283  002960  D00A               	goto	i2l815
  9284  002962  0A0D               	xorlw	13	; case 105
  9285  002964  B4D8               	btfsc	status,2,c
  9286  002966  D007               	goto	i2l815
  9287  002968  0A1A               	xorlw	26	; case 115
  9288  00296A  B4D8               	btfsc	status,2,c
  9289  00296C  D77A               	goto	i2l817
  9290  00296E  0A0B               	xorlw	11	; case 120
  9291  002970  B4D8               	btfsc	status,2,c
  9292  002972  D775               	goto	i2l816
  9293  002974  D112               	goto	i2u381_40
  9294  002976                     i2l815:
  9295                           
  9296                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9297  002976  BE23               	btfsc	i2printf@flag,7,c
  9298  002978  D015               	goto	i2l831
  9299                           
  9300                           ;doprnt.c: 1253: {
  9301                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9302  00297A  C01D  FFD9         	movff	i2printf@ap,fsr2l
  9303  00297E  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  9304  002982  CFDE F021          	movff	postinc2,i2printf@val
  9305  002986  CFDD F022          	movff	postdec2,i2printf@val+1
  9306  00298A  0E02               	movlw	2
  9307  00298C  261D               	addwf	i2printf@ap,f,c
  9308  00298E  0E00               	movlw	0
  9309  002990  221E               	addwfc	i2printf@ap+1,f,c
  9310                           
  9311                           ;doprnt.c: 1261: if((int)val < 0) {
  9312  002992  AE22               	btfss	i2printf@val+1,7,c
  9313  002994  D04A               	goto	i2l834
  9314                           
  9315                           ;doprnt.c: 1262: flag |= 0x03;
  9316  002996  0E03               	movlw	3
  9317  002998  1223               	iorwf	i2printf@flag,f,c
  9318                           
  9319                           ;doprnt.c: 1263: val = -val;
  9320  00299A  6C21               	negf	i2printf@val,c
  9321  00299C  1E22               	comf	i2printf@val+1,f,c
  9322  00299E  B0D8               	btfsc	status,0,c
  9323  0029A0  2A22               	incf	i2printf@val+1,f,c
  9324                           
  9325                           ;doprnt.c: 1264: }
  9326                           ;doprnt.c: 1266: }
  9327  0029A2  D043               	goto	i2l834
  9328  0029A4                     i2l831:
  9329                           
  9330                           ;doprnt.c: 1268: else
  9331                           ;doprnt.c: 1273: {
  9332                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9333  0029A4  C01D  FFD9         	movff	i2printf@ap,fsr2l
  9334  0029A8  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  9335  0029AC  CFDE F021          	movff	postinc2,i2printf@val
  9336  0029B0  CFDD F022          	movff	postdec2,i2printf@val+1
  9337  0029B4  0E02               	movlw	2
  9338  0029B6  261D               	addwf	i2printf@ap,f,c
  9339  0029B8  0E00               	movlw	0
  9340  0029BA  221E               	addwfc	i2printf@ap+1,f,c
  9341                           
  9342                           ;doprnt.c: 1287: }
  9343                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  9344  0029BC  D036               	goto	i2l834
  9345  0029BE                     
  9346                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9347  0029BE  0E01               	movlw	1
  9348  0029C0  6E26               	movwf	i2printf@c,c
  9349  0029C2                     i2l4628:
  9350  0029C2  0E05               	movlw	5
  9351  0029C4  1826               	xorwf	i2printf@c,w,c
  9352  0029C6  B4D8               	btfsc	status,2,c
  9353  0029C8  D038               	goto	i2l839
  9354                           
  9355                           ;doprnt.c: 1306: if(val < dpowers[c])
  9356  0029CA  5026               	movf	i2printf@c,w,c
  9357  0029CC  0D02               	mullw	2
  9358  0029CE  0E7C               	movlw	low _dpowers
  9359  0029D0  24F3               	addwf	prodl,w,c
  9360  0029D2  6EF6               	movwf	tblptrl,c
  9361  0029D4  0EFD               	movlw	high _dpowers
  9362  0029D6  20F4               	addwfc	prodh,w,c
  9363  0029D8  6EF7               	movwf	tblptrh,c
  9364  0029DA                     	if	1	;There are 3 active tblptr bytes
  9365  0029DA  6AF8               	clrf	tblptru,c
  9366  0029DC  0E00               	movlw	low (__mediumconst shr (0+16))
  9367  0029DE  22F8               	addwfc	tblptru,f,c
  9368  0029E0                     	endif
  9369  0029E0  0009               	tblrd		*+
  9370  0029E2  50F5               	movf	tablat,w,c
  9371  0029E4  5C21               	subwf	i2printf@val,w,c
  9372  0029E6  0009               	tblrd		*+
  9373  0029E8  50F5               	movf	tablat,w,c
  9374  0029EA  5822               	subwfb	i2printf@val+1,w,c
  9375  0029EC  A0D8               	btfss	status,0,c
  9376  0029EE  D025               	goto	i2l839
  9377                           
  9378                           ;doprnt.c: 1307: break;
  9379  0029F0  2A26               	incf	i2printf@c,f,c
  9380  0029F2  D7E7               	goto	i2l4628
  9381  0029F4                     
  9382                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9383  0029F4  0E01               	movlw	1
  9384  0029F6  6E26               	movwf	i2printf@c,c
  9385  0029F8                     i2l4642:
  9386  0029F8  0E04               	movlw	4
  9387  0029FA  1826               	xorwf	i2printf@c,w,c
  9388  0029FC  B4D8               	btfsc	status,2,c
  9389  0029FE  D01D               	goto	i2l839
  9390                           
  9391                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9392  002A00  5026               	movf	i2printf@c,w,c
  9393  002A02  0D02               	mullw	2
  9394  002A04  0E86               	movlw	low _hexpowers
  9395  002A06  24F3               	addwf	prodl,w,c
  9396  002A08  6EF6               	movwf	tblptrl,c
  9397  002A0A  0EFD               	movlw	high _hexpowers
  9398  002A0C  20F4               	addwfc	prodh,w,c
  9399  002A0E  6EF7               	movwf	tblptrh,c
  9400  002A10                     	if	1	;There are 3 active tblptr bytes
  9401  002A10  6AF8               	clrf	tblptru,c
  9402  002A12  0E00               	movlw	low (__mediumconst shr (0+16))
  9403  002A14  22F8               	addwfc	tblptru,f,c
  9404  002A16                     	endif
  9405  002A16  0009               	tblrd		*+
  9406  002A18  50F5               	movf	tablat,w,c
  9407  002A1A  5C21               	subwf	i2printf@val,w,c
  9408  002A1C  0009               	tblrd		*+
  9409  002A1E  50F5               	movf	tablat,w,c
  9410  002A20  5822               	subwfb	i2printf@val+1,w,c
  9411  002A22  A0D8               	btfss	status,0,c
  9412  002A24  D00A               	goto	i2l839
  9413                           
  9414                           ;doprnt.c: 1318: break;
  9415  002A26  2A26               	incf	i2printf@c,f,c
  9416  002A28  D7E7               	goto	i2l4642
  9417  002A2A                     i2l834:
  9418  002A2A  5023               	movf	i2printf@flag,w,c
  9419  002A2C  0B80               	andlw	128
  9420                           
  9421                           ; Switch size 1, requested type "space"
  9422                           ; Number of cases is 2, Range of values is 0 to 128
  9423                           ; switch strategies available:
  9424                           ; Name         Instructions Cycles
  9425                           ; simple_byte            7     4 (average)
  9426                           ;	Chosen strategy is simple_byte
  9427  002A2E  0A00               	xorlw	0	; case 0
  9428  002A30  B4D8               	btfsc	status,2,c
  9429  002A32  D7C5               	goto	i2l835
  9430  002A34  0A80               	xorlw	128	; case 128
  9431  002A36  B4D8               	btfsc	status,2,c
  9432  002A38  D7DD               	goto	i2l840
  9433  002A3A                     i2l839:
  9434                           
  9435                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9436  002A3A  5024               	movf	i2printf@width,w,c
  9437  002A3C  1025               	iorwf	i2printf@width+1,w,c
  9438  002A3E  B4D8               	btfsc	status,2,c
  9439  002A40  D009               	goto	i2l844
  9440  002A42  C023  F015         	movff	i2printf@flag,??i2_printf
  9441  002A46  0E03               	movlw	3
  9442  002A48  1615               	andwf	??i2_printf,f,c
  9443  002A4A  B4D8               	btfsc	status,2,c
  9444  002A4C  D003               	goto	i2l844
  9445                           
  9446                           ;doprnt.c: 1346: width--;
  9447  002A4E  0624               	decf	i2printf@width,f,c
  9448  002A50  A0D8               	btfss	status,0,c
  9449  002A52  0625               	decf	i2printf@width+1,f,c
  9450  002A54                     i2l844:
  9451                           
  9452                           ;doprnt.c: 1381: if(width > c)
  9453  002A54  0E80               	movlw	128
  9454  002A56  BE26               	btfsc	i2printf@c,7,c
  9455  002A58  0E7F               	movlw	127
  9456  002A5A  6E15               	movwf	??i2_printf& (0+255),c
  9457  002A5C  5024               	movf	i2printf@width,w,c
  9458  002A5E  5C26               	subwf	i2printf@c,w,c
  9459  002A60  5025               	movf	i2printf@width+1,w,c
  9460  002A62  0A80               	xorlw	128
  9461  002A64  5815               	subwfb	??i2_printf& (0+255),w,c
  9462  002A66  B0D8               	btfsc	status,0,c
  9463  002A68  D007               	goto	i2l845
  9464                           
  9465                           ;doprnt.c: 1382: width -= c;
  9466  002A6A  5026               	movf	i2printf@c,w,c
  9467  002A6C  5E24               	subwf	i2printf@width,f,c
  9468  002A6E  0E00               	movlw	0
  9469  002A70  BE26               	btfsc	i2printf@c,7,c
  9470  002A72  0EFF               	movlw	255
  9471  002A74  5A25               	subwfb	i2printf@width+1,f,c
  9472  002A76  D004               	goto	i2l846
  9473  002A78                     i2l845:
  9474                           
  9475                           ;doprnt.c: 1383: else
  9476                           ;doprnt.c: 1384: width = 0;
  9477  002A78  0E00               	movlw	0
  9478  002A7A  6E25               	movwf	i2printf@width+1,c
  9479  002A7C  0E00               	movlw	0
  9480  002A7E  6E24               	movwf	i2printf@width,c
  9481  002A80                     i2l846:
  9482                           
  9483                           ;doprnt.c: 1387: if(flag & 0x04) {
  9484  002A80  A423               	btfss	i2printf@flag,2,c
  9485  002A82  D014               	goto	i2l847
  9486                           
  9487                           ;doprnt.c: 1392: if(flag & 0x03)
  9488  002A84  C023  F015         	movff	i2printf@flag,??i2_printf
  9489  002A88  0E03               	movlw	3
  9490  002A8A  1615               	andwf	??i2_printf,f,c
  9491  002A8C  B4D8               	btfsc	status,2,c
  9492  002A8E  D003               	goto	i2l848
  9493                           
  9494                           ;doprnt.c: 1393: (putch('-') );
  9495  002A90  0E2D               	movlw	45
  9496  002A92  EC68  F01D         	call	i2_putch
  9497  002A96                     i2l848:
  9498                           
  9499                           ;doprnt.c: 1415: if(width)
  9500  002A96  5024               	movf	i2printf@width,w,c
  9501  002A98  1025               	iorwf	i2printf@width+1,w,c
  9502  002A9A  B4D8               	btfsc	status,2,c
  9503  002A9C  D01E               	goto	i2l856
  9504                           
  9505                           ;doprnt.c: 1417: (putch('0') );
  9506                           
  9507                           ;doprnt.c: 1416: do
  9508  002A9E  0E30               	movlw	48
  9509  002AA0  EC68  F01D         	call	i2_putch
  9510                           
  9511                           ;doprnt.c: 1418: while(--width);
  9512  002AA4  0624               	decf	i2printf@width,f,c
  9513  002AA6  A0D8               	btfss	status,0,c
  9514  002AA8  0625               	decf	i2printf@width+1,f,c
  9515  002AAA  D7F5               	goto	i2l848
  9516  002AAC                     i2l847:
  9517                           
  9518                           ;doprnt.c: 1422: {
  9519                           ;doprnt.c: 1424: if(width
  9520                           ;doprnt.c: 1428: )
  9521  002AAC  5024               	movf	i2printf@width,w,c
  9522  002AAE  1025               	iorwf	i2printf@width+1,w,c
  9523  002AB0  B4D8               	btfsc	status,2,c
  9524  002AB2  D00A               	goto	i2u379_40
  9525  002AB4                     i2u378_40:
  9526                           
  9527                           ;doprnt.c: 1430: (putch(' ') );
  9528                           
  9529                           ;doprnt.c: 1429: do
  9530  002AB4  0E20               	movlw	32
  9531  002AB6  EC68  F01D         	call	i2_putch
  9532                           
  9533                           ;doprnt.c: 1431: while(--width);
  9534  002ABA  0624               	decf	i2printf@width,f,c
  9535  002ABC  A0D8               	btfss	status,0,c
  9536  002ABE  0625               	decf	i2printf@width+1,f,c
  9537  002AC0  5024               	movf	i2printf@width,w,c
  9538  002AC2  1025               	iorwf	i2printf@width+1,w,c
  9539  002AC4  A4D8               	btfss	status,2,c
  9540  002AC6  D7F6               	goto	i2u378_40
  9541  002AC8                     i2u379_40:
  9542                           
  9543                           ;doprnt.c: 1438: if(flag & 0x03)
  9544  002AC8  C023  F015         	movff	i2printf@flag,??i2_printf
  9545  002ACC  0E03               	movlw	3
  9546  002ACE  1615               	andwf	??i2_printf,f,c
  9547  002AD0  B4D8               	btfsc	status,2,c
  9548  002AD2  D003               	goto	i2l856
  9549                           
  9550                           ;doprnt.c: 1439: (putch('-') );
  9551  002AD4  0E2D               	movlw	45
  9552  002AD6  EC68  F01D         	call	i2_putch
  9553  002ADA                     i2l856:
  9554                           
  9555                           ;doprnt.c: 1469: }
  9556                           ;doprnt.c: 1472: prec = c;
  9557  002ADA  C026  F01A         	movff	i2printf@c,i2printf@prec
  9558                           
  9559                           ;doprnt.c: 1474: while(prec--) {
  9560  002ADE  D059               	goto	i2l857
  9561  002AE0                     
  9562                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9563  002AE0  501A               	movf	i2printf@prec,w,c
  9564  002AE2  0D02               	mullw	2
  9565  002AE4  0E7C               	movlw	low _dpowers
  9566  002AE6  24F3               	addwf	prodl,w,c
  9567  002AE8  6EF6               	movwf	tblptrl,c
  9568  002AEA  0EFD               	movlw	high _dpowers
  9569  002AEC  20F4               	addwfc	prodh,w,c
  9570  002AEE  6EF7               	movwf	tblptrh,c
  9571  002AF0                     	if	1	;There are 3 active tblptr bytes
  9572  002AF0  6AF8               	clrf	tblptru,c
  9573  002AF2  0E00               	movlw	low (__mediumconst shr (0+16))
  9574  002AF4  22F8               	addwfc	tblptru,f,c
  9575  002AF6                     	endif
  9576  002AF6  0009               	tblrd		*+
  9577  002AF8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9578  002AFC  000A               	tblrd		*-
  9579  002AFE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9580  002B02  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9581  002B06  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9582  002B0A  EC50  F01B         	call	i2___lwdiv	;wreg free
  9583  002B0E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9584  002B12  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9585  002B16  0E00               	movlw	0
  9586  002B18  6E0B               	movwf	i2___lwmod@divisor+1,c
  9587  002B1A  0E0A               	movlw	10
  9588  002B1C  6E0A               	movwf	i2___lwmod@divisor,c
  9589  002B1E  EC54  F01C         	call	i2___lwmod	;wreg free
  9590  002B22  5008               	movf	?i2___lwmod,w,c
  9591  002B24  0F30               	addlw	48
  9592  002B26  6E26               	movwf	i2printf@c,c
  9593                           
  9594                           ;doprnt.c: 1491: break;
  9595  002B28  D031               	goto	i2l861
  9596  002B2A                     
  9597                           ;doprnt.c: 1499: {
  9598                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9599  002B2A  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9600  002B2E  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9601  002B32  501A               	movf	i2printf@prec,w,c
  9602  002B34  0D02               	mullw	2
  9603  002B36  0E86               	movlw	low _hexpowers
  9604  002B38  24F3               	addwf	prodl,w,c
  9605  002B3A  6EF6               	movwf	tblptrl,c
  9606  002B3C  0EFD               	movlw	high _hexpowers
  9607  002B3E  20F4               	addwfc	prodh,w,c
  9608  002B40  6EF7               	movwf	tblptrh,c
  9609  002B42                     	if	1	;There are 3 active tblptr bytes
  9610  002B42  6AF8               	clrf	tblptru,c
  9611  002B44  0E00               	movlw	low (__mediumconst shr (0+16))
  9612  002B46  22F8               	addwfc	tblptru,f,c
  9613  002B48                     	endif
  9614  002B48  0009               	tblrd		*+
  9615  002B4A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9616  002B4E  000A               	tblrd		*-
  9617  002B50  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9618  002B54  EC50  F01B         	call	i2___lwdiv	;wreg free
  9619  002B58  5001               	movf	?i2___lwdiv,w,c
  9620  002B5A  0B0F               	andlw	15
  9621  002B5C  6E19               	movwf	i2printf@idx,c
  9622                           
  9623                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9624  002B5E  5019               	movf	i2printf@idx,w,c
  9625  002B60  0D01               	mullw	1
  9626  002B62  0E63               	movlw	low STR_67
  9627  002B64  24F3               	addwf	prodl,w,c
  9628  002B66  6EF6               	movwf	tblptrl,c
  9629  002B68  0EFE               	movlw	high STR_67
  9630  002B6A  20F4               	addwfc	prodh,w,c
  9631  002B6C  6EF7               	movwf	tblptrh,c
  9632  002B6E                     	if	1	;There are 3 active tblptr bytes
  9633  002B6E  6AF8               	clrf	tblptru,c
  9634  002B70  0E00               	movlw	low (__mediumconst shr (0+16))
  9635  002B72  22F8               	addwfc	tblptru,f,c
  9636  002B74                     	endif
  9637  002B74  0008               	tblrd		*
  9638  002B76  CFF5 F026          	movff	tablat,i2printf@c
  9639                           
  9640                           ;doprnt.c: 1523: }
  9641                           
  9642                           ;doprnt.c: 1508: }
  9643                           ;doprnt.c: 1510: break;
  9644  002B7A  D008               	goto	i2l861
  9645  002B7C  5023               	movf	i2printf@flag,w,c
  9646  002B7E  0B80               	andlw	128
  9647                           
  9648                           ; Switch size 1, requested type "space"
  9649                           ; Number of cases is 2, Range of values is 0 to 128
  9650                           ; switch strategies available:
  9651                           ; Name         Instructions Cycles
  9652                           ; simple_byte            7     4 (average)
  9653                           ;	Chosen strategy is simple_byte
  9654  002B80  0A00               	xorlw	0	; case 0
  9655  002B82  B4D8               	btfsc	status,2,c
  9656  002B84  D7AD               	goto	i2l860
  9657  002B86  0A80               	xorlw	128	; case 128
  9658  002B88  B4D8               	btfsc	status,2,c
  9659  002B8A  D7CF               	goto	i2l862
  9660  002B8C                     i2l861:
  9661                           
  9662                           ;doprnt.c: 1524: (putch(c) );
  9663  002B8C  5026               	movf	i2printf@c,w,c
  9664  002B8E  EC68  F01D         	call	i2_putch
  9665  002B92                     i2l857:
  9666  002B92  061A               	decf	i2printf@prec,f,c
  9667  002B94  281A               	incf	i2printf@prec,w,c
  9668  002B96  A4D8               	btfss	status,2,c
  9669  002B98  D7F1               	goto	i2l859
  9670  002B9A                     i2u381_40:
  9671  002B9A  C00D  FFF6         	movff	i2printf@f,tblptrl
  9672  002B9E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9673  002BA2  4A0D               	infsnz	i2printf@f,f,c
  9674  002BA4  2A0E               	incf	i2printf@f+1,f,c
  9675  002BA6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9676  002BA6  6AF8               	clrf	tblptru,c
  9677  002BA8                     	endif
  9678  002BA8                     	if	0	;tblptru may be non-zero
  9679  002BA8                     	endif
  9680  002BA8  0008               	tblrd		*
  9681  002BAA  CFF5 F026          	movff	tablat,i2printf@c
  9682  002BAE  5026               	movf	i2printf@c,w,c
  9683  002BB0  B4D8               	btfsc	status,2,c
  9684  002BB2  0012               	return	
  9685  002BB4  D5F8               	goto	i2l799
  9686  002BB6                     __end_ofi2_printf:
  9687                           	opt stack 0
  9688                           pclatu	equ	0xFFB
  9689                           pclath	equ	0xFFA
  9690                           tblptru	equ	0xFF8
  9691                           tblptrh	equ	0xFF7
  9692                           tblptrl	equ	0xFF6
  9693                           tablat	equ	0xFF5
  9694                           prodh	equ	0xFF4
  9695                           prodl	equ	0xFF3
  9696                           intcon	equ	0xFF2
  9697                           intcon3	equ	0xFF0
  9698                           indf0	equ	0xFEF
  9699                           postinc0	equ	0xFEE
  9700                           fsr0h	equ	0xFEA
  9701                           fsr0l	equ	0xFE9
  9702                           wreg	equ	0xFE8
  9703                           postdec1	equ	0xFE5
  9704                           fsr1h	equ	0xFE2
  9705                           fsr1l	equ	0xFE1
  9706                           indf2	equ	0xFDF
  9707                           postinc2	equ	0xFDE
  9708                           postdec2	equ	0xFDD
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function i2_putch *****************
  9714 ;; Defined at:
  9715 ;;		line 24 in file "lcd.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;  data            1    wreg     unsigned char 
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;  data            1    2[COMRAM] unsigned char 
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      void 
  9722 ;; Registers used:
  9723 ;;		wreg, status,2, status,0, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;Total ram usage:        1 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    1
  9736 ;; This function calls:
  9737 ;;		i2_lcdNibble
  9738 ;; This function is called by:
  9739 ;;		_interruptHandler
  9740 ;;		i2_printf
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text24
  9745  003AD0                     __ptext24:
  9746                           	opt stack 0
  9747  003AD0                     i2_putch:
  9748                           	opt stack 25
  9749                           
  9750                           ;incstack = 0
  9751                           ;i2putch@data stored from wreg
  9752  003AD0  6E03               	movwf	i2putch@data,c
  9753                           
  9754                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  9755  003AD2  848C               	bsf	3980,2,c	;volatile
  9756                           
  9757                           ;lcd.c: 33: lcdNibble(data);
  9758  003AD4  5003               	movf	i2putch@data,w,c
  9759  003AD6  ECD6  F018         	call	i2_lcdNibble
  9760                           
  9761                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  9762  003ADA  0EC8               	movlw	200
  9763  003ADC                     i2u534_47:
  9764  003ADC  D000               	nop2	
  9765  003ADE  2EE8               	decfsz	wreg,f,c
  9766  003AE0  D7FD               	bra	i2u534_47
  9767  003AE2  0012               	return		;funcret
  9768  003AE4                     __end_ofi2_putch:
  9769                           	opt stack 0
  9770                           pclatu	equ	0xFFB
  9771                           pclath	equ	0xFFA
  9772                           tblptru	equ	0xFF8
  9773                           tblptrh	equ	0xFF7
  9774                           tblptrl	equ	0xFF6
  9775                           tablat	equ	0xFF5
  9776                           prodh	equ	0xFF4
  9777                           prodl	equ	0xFF3
  9778                           intcon	equ	0xFF2
  9779                           intcon3	equ	0xFF0
  9780                           indf0	equ	0xFEF
  9781                           postinc0	equ	0xFEE
  9782                           fsr0h	equ	0xFEA
  9783                           fsr0l	equ	0xFE9
  9784                           wreg	equ	0xFE8
  9785                           postdec1	equ	0xFE5
  9786                           fsr1h	equ	0xFE2
  9787                           fsr1l	equ	0xFE1
  9788                           indf2	equ	0xFDF
  9789                           postinc2	equ	0xFDE
  9790                           postdec2	equ	0xFDD
  9791                           fsr2h	equ	0xFDA
  9792                           fsr2l	equ	0xFD9
  9793                           status	equ	0xFD8
  9794                           
  9795 ;; *************** function i2_isdigit *****************
  9796 ;; Defined at:
  9797 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;  c               1    wreg     unsigned char 
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;  c               1    2[COMRAM] unsigned char 
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, status,2, status,0
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;Total ram usage:        3 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; This function calls:
  9818 ;;		Nothing
  9819 ;; This function is called by:
  9820 ;;		i2_printf
  9821 ;; This function uses a non-reentrant model
  9822 ;;
  9823                           
  9824                           	psect	text25
  9825  003A6E                     __ptext25:
  9826                           	opt stack 0
  9827  003A6E                     i2_isdigit:
  9828                           	opt stack 25
  9829                           
  9830                           ;incstack = 0
  9831                           ;i2isdigit@c stored from wreg
  9832  003A6E  6E03               	movwf	i2isdigit@c,c
  9833  003A70  0E00               	movlw	0
  9834  003A72  6E02               	movwf	i2_isdigit$1254,c
  9835  003A74  0E3A               	movlw	58
  9836  003A76  6003               	cpfslt	i2isdigit@c,c
  9837  003A78  D005               	goto	i2l1195
  9838  003A7A  0E2F               	movlw	47
  9839  003A7C  6403               	cpfsgt	i2isdigit@c,c
  9840  003A7E  D002               	goto	i2l1195
  9841  003A80  0E01               	movlw	1
  9842  003A82  6E02               	movwf	i2_isdigit$1254,c
  9843  003A84                     i2l1195:
  9844  003A84  C002  F001         	movff	i2_isdigit$1254,??i2_isdigit
  9845  003A88  3001               	rrcf	??i2_isdigit,w,c
  9846  003A8A  0012               	return	
  9847  003A8C                     __end_ofi2_isdigit:
  9848                           	opt stack 0
  9849                           pclatu	equ	0xFFB
  9850                           pclath	equ	0xFFA
  9851                           tblptru	equ	0xFF8
  9852                           tblptrh	equ	0xFF7
  9853                           tblptrl	equ	0xFF6
  9854                           tablat	equ	0xFF5
  9855                           prodh	equ	0xFF4
  9856                           prodl	equ	0xFF3
  9857                           intcon	equ	0xFF2
  9858                           intcon3	equ	0xFF0
  9859                           indf0	equ	0xFEF
  9860                           postinc0	equ	0xFEE
  9861                           fsr0h	equ	0xFEA
  9862                           fsr0l	equ	0xFE9
  9863                           wreg	equ	0xFE8
  9864                           postdec1	equ	0xFE5
  9865                           fsr1h	equ	0xFE2
  9866                           fsr1l	equ	0xFE1
  9867                           indf2	equ	0xFDF
  9868                           postinc2	equ	0xFDE
  9869                           postdec2	equ	0xFDD
  9870                           fsr2h	equ	0xFDA
  9871                           fsr2l	equ	0xFD9
  9872                           status	equ	0xFD8
  9873                           
  9874 ;; *************** function i2___lwmod *****************
  9875 ;; Defined at:
  9876 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;  dividend        2    7[COMRAM] unsigned int 
  9879 ;;  divisor         2    9[COMRAM] unsigned int 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  __lwmod         1   11[COMRAM] unsigned char 
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  2    7[COMRAM] unsigned int 
  9884 ;; Registers used:
  9885 ;;		wreg, status,2, status,0
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;Total ram usage:        5 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; This function calls:
  9898 ;;		Nothing
  9899 ;; This function is called by:
  9900 ;;		i2_printf
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           	psect	text26
  9905  0038A8                     __ptext26:
  9906                           	opt stack 0
  9907  0038A8                     i2___lwmod:
  9908                           	opt stack 25
  9909                           
  9910                           ;incstack = 0
  9911  0038A8  500A               	movf	i2___lwmod@divisor,w,c
  9912  0038AA  100B               	iorwf	i2___lwmod@divisor+1,w,c
  9913  0038AC  B4D8               	btfsc	status,2,c
  9914  0038AE  D018               	goto	i2l1289
  9915  0038B0  0E01               	movlw	1
  9916  0038B2  6E0C               	movwf	i2___lwmod@counter,c
  9917  0038B4  D004               	goto	i2l1284
  9918  0038B6  90D8               	bcf	status,0,c
  9919  0038B8  360A               	rlcf	i2___lwmod@divisor,f,c
  9920  0038BA  360B               	rlcf	i2___lwmod@divisor+1,f,c
  9921  0038BC  2A0C               	incf	i2___lwmod@counter,f,c
  9922  0038BE                     i2l1284:
  9923  0038BE  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  9924  0038C0  D7FA               	goto	i2l1285
  9925  0038C2                     i2u275_40:
  9926  0038C2  500A               	movf	i2___lwmod@divisor,w,c
  9927  0038C4  5C08               	subwf	i2___lwmod@dividend,w,c
  9928  0038C6  500B               	movf	i2___lwmod@divisor+1,w,c
  9929  0038C8  5809               	subwfb	i2___lwmod@dividend+1,w,c
  9930  0038CA  A0D8               	btfss	status,0,c
  9931  0038CC  D004               	goto	i2l1288
  9932  0038CE  500A               	movf	i2___lwmod@divisor,w,c
  9933  0038D0  5E08               	subwf	i2___lwmod@dividend,f,c
  9934  0038D2  500B               	movf	i2___lwmod@divisor+1,w,c
  9935  0038D4  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9936  0038D6                     i2l1288:
  9937  0038D6  90D8               	bcf	status,0,c
  9938  0038D8  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9939  0038DA  320A               	rrcf	i2___lwmod@divisor,f,c
  9940  0038DC  2E0C               	decfsz	i2___lwmod@counter,f,c
  9941  0038DE  D7F1               	goto	i2u275_40
  9942  0038E0                     i2l1289:
  9943  0038E0  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9944  0038E4  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9945  0038E8  0012               	return		;funcret
  9946  0038EA                     __end_ofi2___lwmod:
  9947                           	opt stack 0
  9948                           pclatu	equ	0xFFB
  9949                           pclath	equ	0xFFA
  9950                           tblptru	equ	0xFF8
  9951                           tblptrh	equ	0xFF7
  9952                           tblptrl	equ	0xFF6
  9953                           tablat	equ	0xFF5
  9954                           prodh	equ	0xFF4
  9955                           prodl	equ	0xFF3
  9956                           intcon	equ	0xFF2
  9957                           intcon3	equ	0xFF0
  9958                           indf0	equ	0xFEF
  9959                           postinc0	equ	0xFEE
  9960                           fsr0h	equ	0xFEA
  9961                           fsr0l	equ	0xFE9
  9962                           wreg	equ	0xFE8
  9963                           postdec1	equ	0xFE5
  9964                           fsr1h	equ	0xFE2
  9965                           fsr1l	equ	0xFE1
  9966                           indf2	equ	0xFDF
  9967                           postinc2	equ	0xFDE
  9968                           postdec2	equ	0xFDD
  9969                           fsr2h	equ	0xFDA
  9970                           fsr2l	equ	0xFD9
  9971                           status	equ	0xFD8
  9972                           
  9973 ;; *************** function i2___lwdiv *****************
  9974 ;; Defined at:
  9975 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;  dividend        2    0[COMRAM] unsigned int 
  9978 ;;  divisor         2    2[COMRAM] unsigned int 
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9981 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  2    0[COMRAM] unsigned int 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2, status,0
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9991 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9992 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9994 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9995 ;;Total ram usage:        7 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; This function calls:
  9998 ;;		Nothing
  9999 ;; This function is called by:
 10000 ;;		i2_printf
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           	psect	text27
 10005  0036A0                     __ptext27:
 10006                           	opt stack 0
 10007  0036A0                     i2___lwdiv:
 10008                           	opt stack 25
 10009                           
 10010                           ;incstack = 0
 10011  0036A0  0E00               	movlw	0
 10012  0036A2  6E06               	movwf	i2___lwdiv@quotient+1,c
 10013  0036A4  0E00               	movlw	0
 10014  0036A6  6E05               	movwf	i2___lwdiv@quotient,c
 10015  0036A8  5003               	movf	i2___lwdiv@divisor,w,c
 10016  0036AA  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10017  0036AC  B4D8               	btfsc	status,2,c
 10018  0036AE  D01C               	goto	i2l1279
 10019  0036B0  0E01               	movlw	1
 10020  0036B2  6E07               	movwf	i2___lwdiv@counter,c
 10021  0036B4  D004               	goto	i2l1274
 10022  0036B6  90D8               	bcf	status,0,c
 10023  0036B8  3603               	rlcf	i2___lwdiv@divisor,f,c
 10024  0036BA  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10025  0036BC  2A07               	incf	i2___lwdiv@counter,f,c
 10026  0036BE                     i2l1274:
 10027  0036BE  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10028  0036C0  D7FA               	goto	i2l1275
 10029  0036C2                     i2u272_40:
 10030  0036C2  90D8               	bcf	status,0,c
 10031  0036C4  3605               	rlcf	i2___lwdiv@quotient,f,c
 10032  0036C6  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10033  0036C8  5003               	movf	i2___lwdiv@divisor,w,c
 10034  0036CA  5C01               	subwf	i2___lwdiv@dividend,w,c
 10035  0036CC  5004               	movf	i2___lwdiv@divisor+1,w,c
 10036  0036CE  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10037  0036D0  A0D8               	btfss	status,0,c
 10038  0036D2  D005               	goto	i2l1278
 10039  0036D4  5003               	movf	i2___lwdiv@divisor,w,c
 10040  0036D6  5E01               	subwf	i2___lwdiv@dividend,f,c
 10041  0036D8  5004               	movf	i2___lwdiv@divisor+1,w,c
 10042  0036DA  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10043  0036DC  8005               	bsf	i2___lwdiv@quotient,0,c
 10044  0036DE                     i2l1278:
 10045  0036DE  90D8               	bcf	status,0,c
 10046  0036E0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10047  0036E2  3203               	rrcf	i2___lwdiv@divisor,f,c
 10048  0036E4  2E07               	decfsz	i2___lwdiv@counter,f,c
 10049  0036E6  D7ED               	goto	i2u272_40
 10050  0036E8                     i2l1279:
 10051  0036E8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10052  0036EC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10053  0036F0  0012               	return		;funcret
 10054  0036F2                     __end_ofi2___lwdiv:
 10055                           	opt stack 0
 10056                           pclatu	equ	0xFFB
 10057                           pclath	equ	0xFFA
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           intcon	equ	0xFF2
 10065                           intcon3	equ	0xFF0
 10066                           indf0	equ	0xFEF
 10067                           postinc0	equ	0xFEE
 10068                           fsr0h	equ	0xFEA
 10069                           fsr0l	equ	0xFE9
 10070                           wreg	equ	0xFE8
 10071                           postdec1	equ	0xFE5
 10072                           fsr1h	equ	0xFE2
 10073                           fsr1l	equ	0xFE1
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           fsr2h	equ	0xFDA
 10078                           fsr2l	equ	0xFD9
 10079                           status	equ	0xFD8
 10080                           
 10081 ;; *************** function i2_initLCD *****************
 10082 ;; Defined at:
 10083 ;;		line 60 in file "lcd.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;		None
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;		None
 10088 ;; Return value:  Size  Location     Type
 10089 ;;                  1    wreg      void 
 10090 ;; Registers used:
 10091 ;;		wreg, status,2, status,0, cstack
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10099 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10100 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10101 ;;Total ram usage:        1 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    2
 10104 ;; This function calls:
 10105 ;;		i2_lcdInst
 10106 ;; This function is called by:
 10107 ;;		_interruptHandler
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           	psect	text28
 10112  00373E                     __ptext28:
 10113                           	opt stack 0
 10114  00373E                     i2_initLCD:
 10115                           	opt stack 24
 10116                           
 10117                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
 10118                           
 10119                           ;incstack = 0
 10120  00373E  0EC3               	movlw	195
 10121  003740  6E04               	movwf	??i2_initLCD& (0+255),c
 10122  003742  0ECD               	movlw	205
 10123  003744                     i2u535_47:
 10124  003744  2EE8               	decfsz	wreg,f,c
 10125  003746  D7FE               	bra	i2u535_47
 10126  003748  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 10127  00374A  D7FC               	bra	i2u535_47
 10128  00374C  F000               	nop	
 10129                           
 10130                           ;lcd.c: 69: lcdInst(0b00110011);
 10131  00374E  0E33               	movlw	51
 10132  003750  EC72  F01D         	call	i2_lcdInst
 10133                           
 10134                           ;lcd.c: 70: lcdInst(0b00110010);
 10135  003754  0E32               	movlw	50
 10136  003756  EC72  F01D         	call	i2_lcdInst
 10137                           
 10138                           ;lcd.c: 71: lcdInst(0b00101000);
 10139  00375A  0E28               	movlw	40
 10140  00375C  EC72  F01D         	call	i2_lcdInst
 10141                           
 10142                           ;lcd.c: 72: lcdInst(0b00001111);
 10143  003760  0E0F               	movlw	15
 10144  003762  EC72  F01D         	call	i2_lcdInst
 10145                           
 10146                           ;lcd.c: 73: lcdInst(0b00000110);
 10147  003766  0E06               	movlw	6
 10148  003768  EC72  F01D         	call	i2_lcdInst
 10149                           
 10150                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10151  00376C  0E01               	movlw	1
 10152  00376E  EC72  F01D         	call	i2_lcdInst
 10153  003772  0EC3               	movlw	195
 10154  003774  6E04               	movwf	??i2_initLCD& (0+255),c
 10155  003776  0ECD               	movlw	205
 10156  003778                     i2u536_47:
 10157  003778  2EE8               	decfsz	wreg,f,c
 10158  00377A  D7FE               	bra	i2u536_47
 10159  00377C  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 10160  00377E  D7FC               	bra	i2u536_47
 10161  003780  F000               	nop	
 10162                           
 10163                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 10164  003782  0E0F               	movlw	15
 10165  003784  EC72  F01D         	call	i2_lcdInst
 10166  003788  0012               	return		;funcret
 10167  00378A                     __end_ofi2_initLCD:
 10168                           	opt stack 0
 10169                           pclatu	equ	0xFFB
 10170                           pclath	equ	0xFFA
 10171                           tblptru	equ	0xFF8
 10172                           tblptrh	equ	0xFF7
 10173                           tblptrl	equ	0xFF6
 10174                           tablat	equ	0xFF5
 10175                           prodh	equ	0xFF4
 10176                           prodl	equ	0xFF3
 10177                           intcon	equ	0xFF2
 10178                           intcon3	equ	0xFF0
 10179                           indf0	equ	0xFEF
 10180                           postinc0	equ	0xFEE
 10181                           fsr0h	equ	0xFEA
 10182                           fsr0l	equ	0xFE9
 10183                           wreg	equ	0xFE8
 10184                           postdec1	equ	0xFE5
 10185                           fsr1h	equ	0xFE2
 10186                           fsr1l	equ	0xFE1
 10187                           indf2	equ	0xFDF
 10188                           postinc2	equ	0xFDE
 10189                           postdec2	equ	0xFDD
 10190                           fsr2h	equ	0xFDA
 10191                           fsr2l	equ	0xFD9
 10192                           status	equ	0xFD8
 10193                           
 10194 ;; *************** function i2_lcdInst *****************
 10195 ;; Defined at:
 10196 ;;		line 11 in file "lcd.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  data            1    wreg     unsigned char 
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  data            1    2[COMRAM] unsigned char 
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  1    wreg      void 
 10203 ;; Registers used:
 10204 ;;		wreg, status,2, status,0, cstack
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10213 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10214 ;;Total ram usage:        1 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    1
 10217 ;; This function calls:
 10218 ;;		i2_lcdNibble
 10219 ;; This function is called by:
 10220 ;;		_interruptHandler
 10221 ;;		i2_initLCD
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           	psect	text29
 10226  003AE4                     __ptext29:
 10227                           	opt stack 0
 10228  003AE4                     i2_lcdInst:
 10229                           	opt stack 25
 10230                           
 10231                           ;incstack = 0
 10232                           ;i2lcdInst@data stored from wreg
 10233  003AE4  6E03               	movwf	i2lcdInst@data,c
 10234                           
 10235                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 10236  003AE6  948C               	bcf	3980,2,c	;volatile
 10237                           
 10238                           ;lcd.c: 20: lcdNibble(data);
 10239  003AE8  5003               	movf	i2lcdInst@data,w,c
 10240  003AEA  ECD6  F018         	call	i2_lcdNibble
 10241                           
 10242                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10243  003AEE  0EC8               	movlw	200
 10244  003AF0                     i2u537_47:
 10245  003AF0  D000               	nop2	
 10246  003AF2  2EE8               	decfsz	wreg,f,c
 10247  003AF4  D7FD               	bra	i2u537_47
 10248  003AF6  0012               	return		;funcret
 10249  003AF8                     __end_ofi2_lcdInst:
 10250                           	opt stack 0
 10251                           pclatu	equ	0xFFB
 10252                           pclath	equ	0xFFA
 10253                           tblptru	equ	0xFF8
 10254                           tblptrh	equ	0xFF7
 10255                           tblptrl	equ	0xFF6
 10256                           tablat	equ	0xFF5
 10257                           prodh	equ	0xFF4
 10258                           prodl	equ	0xFF3
 10259                           intcon	equ	0xFF2
 10260                           intcon3	equ	0xFF0
 10261                           indf0	equ	0xFEF
 10262                           postinc0	equ	0xFEE
 10263                           fsr0h	equ	0xFEA
 10264                           fsr0l	equ	0xFE9
 10265                           wreg	equ	0xFE8
 10266                           postdec1	equ	0xFE5
 10267                           fsr1h	equ	0xFE2
 10268                           fsr1l	equ	0xFE1
 10269                           indf2	equ	0xFDF
 10270                           postinc2	equ	0xFDE
 10271                           postdec2	equ	0xFDD
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function i2_lcdNibble *****************
 10277 ;; Defined at:
 10278 ;;		line 37 in file "lcd.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;  data            1    wreg     unsigned char 
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;  data            1    1[COMRAM] unsigned char 
 10283 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  1    wreg      void 
 10286 ;; Registers used:
 10287 ;;		wreg, status,2, status,0
 10288 ;; Tracked objects:
 10289 ;;		On entry : 0/0
 10290 ;;		On exit  : 0/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10296 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10297 ;;Total ram usage:        2 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		i2_lcdInst
 10303 ;;		i2_putch
 10304 ;; This function uses a non-reentrant model
 10305 ;;
 10306                           
 10307                           	psect	text30
 10308  0031AC                     __ptext30:
 10309                           	opt stack 0
 10310  0031AC                     i2_lcdNibble:
 10311                           	opt stack 25
 10312                           
 10313                           ;incstack = 0
 10314                           ;i2lcdNibble@data stored from wreg
 10315  0031AC  6E02               	movwf	i2lcdNibble@data,c
 10316                           
 10317                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 10318  0031AE  5002               	movf	i2lcdNibble@data,w,c
 10319  0031B0  0BF0               	andlw	240
 10320  0031B2  6E01               	movwf	i2lcdNibble@temp,c
 10321                           
 10322                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 10323  0031B4  508C               	movf	3980,w,c	;volatile
 10324  0031B6  0B0F               	andlw	15
 10325  0031B8  6E8C               	movwf	3980,c	;volatile
 10326                           
 10327                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 10328  0031BA  5001               	movf	i2lcdNibble@temp,w,c
 10329  0031BC  108C               	iorwf	3980,w,c	;volatile
 10330  0031BE  6E8C               	movwf	3980,c	;volatile
 10331                           
 10332                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10333  0031C0  0E00               	movlw	0
 10334  0031C2  BEF2               	btfsc	intcon,7,c	;volatile
 10335  0031C4  0E01               	movlw	1
 10336  0031C6  0100               	movlb	0	; () banked
 10337  0031C8  6FAE               	movwf	_LCDinterruptState& (0+255),b
 10338                           
 10339                           ; BSR set to: 0
 10340  0031CA  9EF2               	bcf	intcon,7,c	;volatile
 10341                           
 10342                           ; BSR set to: 0
 10343  0031CC  868C               	bsf	3980,3,c	;volatile
 10344                           
 10345                           ; BSR set to: 0
 10346  0031CE  0E53               	movlw	83
 10347  0031D0                     i2u538_47:
 10348  0031D0  2EE8               	decfsz	wreg,f,c
 10349  0031D2  D7FE               	bra	i2u538_47
 10350  0031D4  F000               	nop	
 10351  0031D6  968C               	bcf	3980,3,c	;volatile
 10352  0031D8  0EC8               	movlw	200
 10353  0031DA                     i2u539_47:
 10354  0031DA  D000               	nop2	
 10355  0031DC  2EE8               	decfsz	wreg,f,c
 10356  0031DE  D7FD               	bra	i2u539_47
 10357  0031E0  0100               	movlb	0	; () banked
 10358  0031E2  B1AE               	btfsc	_LCDinterruptState& (0+255),0,b
 10359  0031E4  D002               	bra	i2u242_45
 10360  0031E6  9EF2               	bcf	intcon,7,c	;volatile
 10361  0031E8  D001               	bra	i2u242_46
 10362  0031EA                     i2u242_45:
 10363  0031EA  8EF2               	bsf	intcon,7,c	;volatile
 10364  0031EC                     i2u242_46:
 10365                           
 10366                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 10367  0031EC  3802               	swapf	i2lcdNibble@data,w,c
 10368  0031EE  0BF0               	andlw	240
 10369  0031F0  6E02               	movwf	i2lcdNibble@data,c
 10370                           
 10371                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 10372  0031F2  5002               	movf	i2lcdNibble@data,w,c
 10373  0031F4  0BF0               	andlw	240
 10374  0031F6  6E01               	movwf	i2lcdNibble@temp,c
 10375                           
 10376                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 10377  0031F8  508C               	movf	3980,w,c	;volatile
 10378  0031FA  0B0F               	andlw	15
 10379  0031FC  6E8C               	movwf	3980,c	;volatile
 10380                           
 10381                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 10382  0031FE  5001               	movf	i2lcdNibble@temp,w,c
 10383  003200  108C               	iorwf	3980,w,c	;volatile
 10384  003202  6E8C               	movwf	3980,c	;volatile
 10385                           
 10386                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10387  003204  0E00               	movlw	0
 10388  003206  BEF2               	btfsc	intcon,7,c	;volatile
 10389  003208  0E01               	movlw	1
 10390  00320A  0100               	movlb	0	; () banked
 10391  00320C  6FAE               	movwf	_LCDinterruptState& (0+255),b
 10392                           
 10393                           ; BSR set to: 0
 10394  00320E  9EF2               	bcf	intcon,7,c	;volatile
 10395                           
 10396                           ; BSR set to: 0
 10397  003210  868C               	bsf	3980,3,c	;volatile
 10398                           
 10399                           ; BSR set to: 0
 10400  003212  0E53               	movlw	83
 10401  003214                     i2u540_47:
 10402  003214  2EE8               	decfsz	wreg,f,c
 10403  003216  D7FE               	bra	i2u540_47
 10404  003218  F000               	nop	
 10405  00321A  968C               	bcf	3980,3,c	;volatile
 10406  00321C  0EC8               	movlw	200
 10407  00321E                     i2u541_47:
 10408  00321E  D000               	nop2	
 10409  003220  2EE8               	decfsz	wreg,f,c
 10410  003222  D7FD               	bra	i2u541_47
 10411  003224  0100               	movlb	0	; () banked
 10412  003226  B1AE               	btfsc	_LCDinterruptState& (0+255),0,b
 10413  003228  D002               	bra	i2u243_45
 10414  00322A  9EF2               	bcf	intcon,7,c	;volatile
 10415  00322C  D001               	bra	i2u243_46
 10416  00322E                     i2u243_45:
 10417  00322E  8EF2               	bsf	intcon,7,c	;volatile
 10418  003230                     i2u243_46:
 10419  003230  0012               	return		;funcret
 10420  003232                     __end_ofi2_lcdNibble:
 10421                           	opt stack 0
 10422                           pclatu	equ	0xFFB
 10423                           pclath	equ	0xFFA
 10424                           tblptru	equ	0xFF8
 10425                           tblptrh	equ	0xFF7
 10426                           tblptrl	equ	0xFF6
 10427                           tablat	equ	0xFF5
 10428                           prodh	equ	0xFF4
 10429                           prodl	equ	0xFF3
 10430                           intcon	equ	0xFF2
 10431                           intcon3	equ	0xFF0
 10432                           indf0	equ	0xFEF
 10433                           postinc0	equ	0xFEE
 10434                           fsr0h	equ	0xFEA
 10435                           fsr0l	equ	0xFE9
 10436                           wreg	equ	0xFE8
 10437                           postdec1	equ	0xFE5
 10438                           fsr1h	equ	0xFE2
 10439                           fsr1l	equ	0xFE1
 10440                           indf2	equ	0xFDF
 10441                           postinc2	equ	0xFDE
 10442                           postdec2	equ	0xFDD
 10443                           fsr2h	equ	0xFDA
 10444                           fsr2l	equ	0xFD9
 10445                           status	equ	0xFD8
 10446                           
 10447 ;; *************** function i2___awdiv *****************
 10448 ;; Defined at:
 10449 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;  dividend        2    0[COMRAM] int 
 10452 ;;  divisor         2    2[COMRAM] int 
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;  __awdiv         2    6[COMRAM] int 
 10455 ;;  __awdiv         1    5[COMRAM] unsigned char 
 10456 ;;  __awdiv         1    4[COMRAM] unsigned char 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  2    0[COMRAM] int 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;Total ram usage:        8 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_interruptHandler
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           	psect	text31
 10480  00333C                     __ptext31:
 10481                           	opt stack 0
 10482  00333C                     i2___awdiv:
 10483                           	opt stack 26
 10484                           
 10485                           ;incstack = 0
 10486  00333C  0E00               	movlw	0
 10487  00333E  6E06               	movwf	i2___awdiv@sign,c
 10488  003340  AE04               	btfss	i2___awdiv@divisor+1,7,c
 10489  003342  D006               	goto	i2l1033
 10490  003344  6C03               	negf	i2___awdiv@divisor,c
 10491  003346  1E04               	comf	i2___awdiv@divisor+1,f,c
 10492  003348  B0D8               	btfsc	status,0,c
 10493  00334A  2A04               	incf	i2___awdiv@divisor+1,f,c
 10494  00334C  0E01               	movlw	1
 10495  00334E  6E06               	movwf	i2___awdiv@sign,c
 10496  003350                     i2l1033:
 10497  003350  AE02               	btfss	i2___awdiv@dividend+1,7,c
 10498  003352  D006               	goto	i2l1034
 10499  003354  6C01               	negf	i2___awdiv@dividend,c
 10500  003356  1E02               	comf	i2___awdiv@dividend+1,f,c
 10501  003358  B0D8               	btfsc	status,0,c
 10502  00335A  2A02               	incf	i2___awdiv@dividend+1,f,c
 10503  00335C  0E01               	movlw	1
 10504  00335E  1A06               	xorwf	i2___awdiv@sign,f,c
 10505  003360                     i2l1034:
 10506  003360  0E00               	movlw	0
 10507  003362  6E08               	movwf	i2___awdiv@quotient+1,c
 10508  003364  0E00               	movlw	0
 10509  003366  6E07               	movwf	i2___awdiv@quotient,c
 10510  003368  5003               	movf	i2___awdiv@divisor,w,c
 10511  00336A  1004               	iorwf	i2___awdiv@divisor+1,w,c
 10512  00336C  B4D8               	btfsc	status,2,c
 10513  00336E  D01C               	goto	i2l1041
 10514  003370  0E01               	movlw	1
 10515  003372  6E05               	movwf	i2___awdiv@counter,c
 10516  003374  D004               	goto	i2l1036
 10517  003376  90D8               	bcf	status,0,c
 10518  003378  3603               	rlcf	i2___awdiv@divisor,f,c
 10519  00337A  3604               	rlcf	i2___awdiv@divisor+1,f,c
 10520  00337C  2A05               	incf	i2___awdiv@counter,f,c
 10521  00337E                     i2l1036:
 10522  00337E  AE04               	btfss	i2___awdiv@divisor+1,7,c
 10523  003380  D7FA               	goto	i2l1037
 10524  003382                     i2u386_40:
 10525  003382  90D8               	bcf	status,0,c
 10526  003384  3607               	rlcf	i2___awdiv@quotient,f,c
 10527  003386  3608               	rlcf	i2___awdiv@quotient+1,f,c
 10528  003388  5003               	movf	i2___awdiv@divisor,w,c
 10529  00338A  5C01               	subwf	i2___awdiv@dividend,w,c
 10530  00338C  5004               	movf	i2___awdiv@divisor+1,w,c
 10531  00338E  5802               	subwfb	i2___awdiv@dividend+1,w,c
 10532  003390  A0D8               	btfss	status,0,c
 10533  003392  D005               	goto	i2l1040
 10534  003394  5003               	movf	i2___awdiv@divisor,w,c
 10535  003396  5E01               	subwf	i2___awdiv@dividend,f,c
 10536  003398  5004               	movf	i2___awdiv@divisor+1,w,c
 10537  00339A  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 10538  00339C  8007               	bsf	i2___awdiv@quotient,0,c
 10539  00339E                     i2l1040:
 10540  00339E  90D8               	bcf	status,0,c
 10541  0033A0  3204               	rrcf	i2___awdiv@divisor+1,f,c
 10542  0033A2  3203               	rrcf	i2___awdiv@divisor,f,c
 10543  0033A4  2E05               	decfsz	i2___awdiv@counter,f,c
 10544  0033A6  D7ED               	goto	i2u386_40
 10545  0033A8                     i2l1041:
 10546  0033A8  5006               	movf	i2___awdiv@sign,w,c
 10547  0033AA  B4D8               	btfsc	status,2,c
 10548  0033AC  D004               	goto	i2l1042
 10549  0033AE  6C07               	negf	i2___awdiv@quotient,c
 10550  0033B0  1E08               	comf	i2___awdiv@quotient+1,f,c
 10551  0033B2  B0D8               	btfsc	status,0,c
 10552  0033B4  2A08               	incf	i2___awdiv@quotient+1,f,c
 10553  0033B6                     i2l1042:
 10554  0033B6  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 10555  0033BA  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 10556  0033BE  0012               	return	
 10557  0033C0                     __end_ofi2___awdiv:
 10558                           	opt stack 0
 10559                           pclatu	equ	0xFFB
 10560                           pclath	equ	0xFFA
 10561                           tblptru	equ	0xFF8
 10562                           tblptrh	equ	0xFF7
 10563                           tblptrl	equ	0xFF6
 10564                           tablat	equ	0xFF5
 10565                           prodh	equ	0xFF4
 10566                           prodl	equ	0xFF3
 10567                           intcon	equ	0xFF2
 10568                           intcon3	equ	0xFF0
 10569                           indf0	equ	0xFEF
 10570                           postinc0	equ	0xFEE
 10571                           fsr0h	equ	0xFEA
 10572                           fsr0l	equ	0xFE9
 10573                           wreg	equ	0xFE8
 10574                           postdec1	equ	0xFE5
 10575                           fsr1h	equ	0xFE2
 10576                           fsr1l	equ	0xFE1
 10577                           indf2	equ	0xFDF
 10578                           postinc2	equ	0xFDE
 10579                           postdec2	equ	0xFDD
 10580                           fsr2h	equ	0xFDA
 10581                           fsr2l	equ	0xFD9
 10582                           status	equ	0xFD8
 10583                           
 10584 ;; *************** function i2_I2C_Master_Write *****************
 10585 ;; Defined at:
 10586 ;;		line 108 in file "I2C.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;                  1    wreg      void 
 10593 ;; Registers used:
 10594 ;;		wreg, status,2, status,0, cstack
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10603 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10604 ;;Total ram usage:        2 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    1
 10607 ;; This function calls:
 10608 ;;		i2_I2C_Master_Wait
 10609 ;; This function is called by:
 10610 ;;		_interruptHandler
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text32
 10615  003B14                     __ptext32:
 10616                           	opt stack 0
 10617  003B14                     i2_I2C_Master_Write:
 10618                           	opt stack 25
 10619                           
 10620                           ;I2C.c: 116: I2C_Master_Wait();
 10621                           
 10622                           ;incstack = 0
 10623  003B14  EC7C  F01D         	call	i2_I2C_Master_Wait	;wreg free
 10624                           
 10625                           ;I2C.c: 117: SSPBUF = byteToWrite;
 10626  003B18  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 10627  003B1C  0012               	return		;funcret
 10628  003B1E                     __end_ofi2_I2C_Master_Write:
 10629                           	opt stack 0
 10630                           pclatu	equ	0xFFB
 10631                           pclath	equ	0xFFA
 10632                           tblptru	equ	0xFF8
 10633                           tblptrh	equ	0xFF7
 10634                           tblptrl	equ	0xFF6
 10635                           tablat	equ	0xFF5
 10636                           prodh	equ	0xFF4
 10637                           prodl	equ	0xFF3
 10638                           intcon	equ	0xFF2
 10639                           intcon3	equ	0xFF0
 10640                           indf0	equ	0xFEF
 10641                           postinc0	equ	0xFEE
 10642                           fsr0h	equ	0xFEA
 10643                           fsr0l	equ	0xFE9
 10644                           wreg	equ	0xFE8
 10645                           postdec1	equ	0xFE5
 10646                           fsr1h	equ	0xFE2
 10647                           fsr1l	equ	0xFE1
 10648                           indf2	equ	0xFDF
 10649                           postinc2	equ	0xFDE
 10650                           postdec2	equ	0xFDD
 10651                           fsr2h	equ	0xFDA
 10652                           fsr2l	equ	0xFD9
 10653                           status	equ	0xFD8
 10654                           
 10655 ;; *************** function i2_I2C_Master_Stop *****************
 10656 ;; Defined at:
 10657 ;;		line 95 in file "I2C.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;		None
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;		None
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  1    wreg      void 
 10664 ;; Registers used:
 10665 ;;		wreg, status,2, status,0, cstack
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;Total ram usage:        0 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    1
 10678 ;; This function calls:
 10679 ;;		i2_I2C_Master_Wait
 10680 ;; This function is called by:
 10681 ;;		_interruptHandler
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           	psect	text33
 10686  003B2E                     __ptext33:
 10687                           	opt stack 0
 10688  003B2E                     i2_I2C_Master_Stop:
 10689                           	opt stack 25
 10690                           
 10691                           ;I2C.c: 104: I2C_Master_Wait();
 10692                           
 10693                           ;incstack = 0
 10694  003B2E  EC7C  F01D         	call	i2_I2C_Master_Wait	;wreg free
 10695                           
 10696                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 10697  003B32  84C5               	bsf	4037,2,c	;volatile
 10698  003B34  0012               	return		;funcret
 10699  003B36                     __end_ofi2_I2C_Master_Stop:
 10700                           	opt stack 0
 10701                           pclatu	equ	0xFFB
 10702                           pclath	equ	0xFFA
 10703                           tblptru	equ	0xFF8
 10704                           tblptrh	equ	0xFF7
 10705                           tblptrl	equ	0xFF6
 10706                           tablat	equ	0xFF5
 10707                           prodh	equ	0xFF4
 10708                           prodl	equ	0xFF3
 10709                           intcon	equ	0xFF2
 10710                           intcon3	equ	0xFF0
 10711                           indf0	equ	0xFEF
 10712                           postinc0	equ	0xFEE
 10713                           fsr0h	equ	0xFEA
 10714                           fsr0l	equ	0xFE9
 10715                           wreg	equ	0xFE8
 10716                           postdec1	equ	0xFE5
 10717                           fsr1h	equ	0xFE2
 10718                           fsr1l	equ	0xFE1
 10719                           indf2	equ	0xFDF
 10720                           postinc2	equ	0xFDE
 10721                           postdec2	equ	0xFDD
 10722                           fsr2h	equ	0xFDA
 10723                           fsr2l	equ	0xFD9
 10724                           status	equ	0xFD8
 10725                           
 10726 ;; *************** function i2_I2C_Master_Start *****************
 10727 ;; Defined at:
 10728 ;;		line 69 in file "I2C.c"
 10729 ;; Parameters:    Size  Location     Type
 10730 ;;		None
 10731 ;; Auto vars:     Size  Location     Type
 10732 ;;		None
 10733 ;; Return value:  Size  Location     Type
 10734 ;;                  1    wreg      void 
 10735 ;; Registers used:
 10736 ;;		wreg, status,2, status,0, cstack
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;Total ram usage:        0 bytes
 10747 ;; Hardware stack levels used:    1
 10748 ;; Hardware stack levels required when called:    1
 10749 ;; This function calls:
 10750 ;;		i2_I2C_Master_Wait
 10751 ;; This function is called by:
 10752 ;;		_interruptHandler
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           	psect	text34
 10757  003B36                     __ptext34:
 10758                           	opt stack 0
 10759  003B36                     i2_I2C_Master_Start:
 10760                           	opt stack 25
 10761                           
 10762                           ;I2C.c: 78: I2C_Master_Wait();
 10763                           
 10764                           ;incstack = 0
 10765  003B36  EC7C  F01D         	call	i2_I2C_Master_Wait	;wreg free
 10766                           
 10767                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 10768  003B3A  80C5               	bsf	4037,0,c	;volatile
 10769  003B3C  0012               	return		;funcret
 10770  003B3E                     __end_ofi2_I2C_Master_Start:
 10771                           	opt stack 0
 10772                           pclatu	equ	0xFFB
 10773                           pclath	equ	0xFFA
 10774                           tblptru	equ	0xFF8
 10775                           tblptrh	equ	0xFF7
 10776                           tblptrl	equ	0xFF6
 10777                           tablat	equ	0xFF5
 10778                           prodh	equ	0xFF4
 10779                           prodl	equ	0xFF3
 10780                           intcon	equ	0xFF2
 10781                           intcon3	equ	0xFF0
 10782                           indf0	equ	0xFEF
 10783                           postinc0	equ	0xFEE
 10784                           fsr0h	equ	0xFEA
 10785                           fsr0l	equ	0xFE9
 10786                           wreg	equ	0xFE8
 10787                           postdec1	equ	0xFE5
 10788                           fsr1h	equ	0xFE2
 10789                           fsr1l	equ	0xFE1
 10790                           indf2	equ	0xFDF
 10791                           postinc2	equ	0xFDE
 10792                           postdec2	equ	0xFDD
 10793                           fsr2h	equ	0xFDA
 10794                           fsr2l	equ	0xFD9
 10795                           status	equ	0xFD8
 10796                           
 10797 ;; *************** function i2_I2C_Master_Read *****************
 10798 ;; Defined at:
 10799 ;;		line 120 in file "I2C.c"
 10800 ;; Parameters:    Size  Location     Type
 10801 ;;  ackBit          1    wreg     unsigned char 
 10802 ;; Auto vars:     Size  Location     Type
 10803 ;;  ackBit          1    1[COMRAM] unsigned char 
 10804 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  1    wreg      unsigned char 
 10807 ;; Registers used:
 10808 ;;		wreg, status,2, status,0, cstack
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;Total ram usage:        2 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    1
 10821 ;; This function calls:
 10822 ;;		i2_I2C_Master_Wait
 10823 ;; This function is called by:
 10824 ;;		_interruptHandler
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           	psect	text35
 10829  003A06                     __ptext35:
 10830                           	opt stack 0
 10831  003A06                     i2_I2C_Master_Read:
 10832                           	opt stack 25
 10833                           
 10834                           ;incstack = 0
 10835                           ;i2I2C_Master_Read@ackBit stored from wreg
 10836  003A06  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 10837                           
 10838                           ;I2C.c: 130: unsigned char receivedByte;
 10839                           ;I2C.c: 132: I2C_Master_Wait();
 10840  003A08  EC7C  F01D         	call	i2_I2C_Master_Wait	;wreg free
 10841                           
 10842                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 10843  003A0C  86C5               	bsf	4037,3,c	;volatile
 10844                           
 10845                           ;I2C.c: 135: I2C_Master_Wait();
 10846  003A0E  EC7C  F01D         	call	i2_I2C_Master_Wait	;wreg free
 10847                           
 10848                           ;I2C.c: 136: receivedByte = SSPBUF;
 10849  003A12  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 10850                           
 10851                           ;I2C.c: 138: I2C_Master_Wait();
 10852  003A16  EC7C  F01D         	call	i2_I2C_Master_Wait	;wreg free
 10853                           
 10854                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 10855  003A1A  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 10856  003A1C  D002               	bra	i2u352_45
 10857  003A1E  9AC5               	bcf	4037,5,c	;volatile
 10858  003A20  D001               	bra	i2u352_46
 10859  003A22                     i2u352_45:
 10860  003A22  8AC5               	bsf	4037,5,c	;volatile
 10861  003A24                     i2u352_46:
 10862                           
 10863                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 10864  003A24  88C5               	bsf	4037,4,c	;volatile
 10865                           
 10866                           ;I2C.c: 142: return receivedByte;
 10867  003A26  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 10868  003A28  0012               	return	
 10869  003A2A                     __end_ofi2_I2C_Master_Read:
 10870                           	opt stack 0
 10871                           pclatu	equ	0xFFB
 10872                           pclath	equ	0xFFA
 10873                           tblptru	equ	0xFF8
 10874                           tblptrh	equ	0xFF7
 10875                           tblptrl	equ	0xFF6
 10876                           tablat	equ	0xFF5
 10877                           prodh	equ	0xFF4
 10878                           prodl	equ	0xFF3
 10879                           intcon	equ	0xFF2
 10880                           intcon3	equ	0xFF0
 10881                           indf0	equ	0xFEF
 10882                           postinc0	equ	0xFEE
 10883                           fsr0h	equ	0xFEA
 10884                           fsr0l	equ	0xFE9
 10885                           wreg	equ	0xFE8
 10886                           postdec1	equ	0xFE5
 10887                           fsr1h	equ	0xFE2
 10888                           fsr1l	equ	0xFE1
 10889                           indf2	equ	0xFDF
 10890                           postinc2	equ	0xFDE
 10891                           postdec2	equ	0xFDD
 10892                           fsr2h	equ	0xFDA
 10893                           fsr2l	equ	0xFD9
 10894                           status	equ	0xFD8
 10895                           
 10896 ;; *************** function i2_I2C_Master_Wait *****************
 10897 ;; Defined at:
 10898 ;;		line 51 in file "I2C.c"
 10899 ;; Parameters:    Size  Location     Type
 10900 ;;		None
 10901 ;; Auto vars:     Size  Location     Type
 10902 ;;		None
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  1    wreg      void 
 10905 ;; Registers used:
 10906 ;;		wreg, status,2, status,0
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;Total ram usage:        1 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; This function calls:
 10919 ;;		Nothing
 10920 ;; This function is called by:
 10921 ;;		i2_I2C_Master_Start
 10922 ;;		i2_I2C_Master_Stop
 10923 ;;		i2_I2C_Master_Write
 10924 ;;		i2_I2C_Master_Read
 10925 ;; This function uses a non-reentrant model
 10926 ;;
 10927                           
 10928                           	psect	text36
 10929  003AF8                     __ptext36:
 10930                           	opt stack 0
 10931  003AF8                     i2_I2C_Master_Wait:
 10932                           	opt stack 25
 10933                           
 10934                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 10935                           
 10936                           ;incstack = 0
 10937  003AF8  B4C7               	btfsc	4039,2,c	;volatile
 10938  003AFA  D7FE               	goto	i2_I2C_Master_Wait
 10939  003AFC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 10940  003B00  0E1F               	movlw	31
 10941  003B02  1601               	andwf	??i2_I2C_Master_Wait,f,c
 10942  003B04  B4D8               	btfsc	status,2,c
 10943  003B06  0012               	return	
 10944  003B08  D7F7               	goto	i2_I2C_Master_Wait
 10945  003B0A                     __end_ofi2_I2C_Master_Wait:
 10946                           	opt stack 0
 10947                           pclatu	equ	0xFFB
 10948                           pclath	equ	0xFFA
 10949                           tblptru	equ	0xFF8
 10950                           tblptrh	equ	0xFF7
 10951                           tblptrl	equ	0xFF6
 10952                           tablat	equ	0xFF5
 10953                           prodh	equ	0xFF4
 10954                           prodl	equ	0xFF3
 10955                           intcon	equ	0xFF2
 10956                           intcon3	equ	0xFF0
 10957                           indf0	equ	0xFEF
 10958                           postinc0	equ	0xFEE
 10959                           fsr0h	equ	0xFEA
 10960                           fsr0l	equ	0xFE9
 10961                           wreg	equ	0xFE8
 10962                           postdec1	equ	0xFE5
 10963                           fsr1h	equ	0xFE2
 10964                           fsr1l	equ	0xFE1
 10965                           indf2	equ	0xFDF
 10966                           postinc2	equ	0xFDE
 10967                           postdec2	equ	0xFDD
 10968                           fsr2h	equ	0xFDA
 10969                           fsr2l	equ	0xFD9
 10970                           status	equ	0xFD8
 10971                           
 10972 ;; *************** function i2_I2C_Master_Init *****************
 10973 ;; Defined at:
 10974 ;;		line 14 in file "I2C.c"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;		None
 10979 ;; Return value:  Size  Location     Type
 10980 ;;                  1    wreg      void 
 10981 ;; Registers used:
 10982 ;;		wreg, status,2, status,0, cstack
 10983 ;; Tracked objects:
 10984 ;;		On entry : 0/0
 10985 ;;		On exit  : 0/0
 10986 ;;		Unchanged: 0/0
 10987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10988 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10990 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10992 ;;Total ram usage:        8 bytes
 10993 ;; Hardware stack levels used:    1
 10994 ;; Hardware stack levels required when called:    1
 10995 ;; This function calls:
 10996 ;;		i2___lldiv
 10997 ;; This function is called by:
 10998 ;;		_interruptHandler
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           	psect	text37
 11003  0035F0                     __ptext37:
 11004                           	opt stack 0
 11005  0035F0                     i2_I2C_Master_Init:
 11006                           	opt stack 25
 11007                           
 11008                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 11009                           
 11010                           ;incstack = 0
 11011  0035F0  9AC6               	bcf	4038,5,c	;volatile
 11012                           
 11013                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 11014  0035F2  8694               	bsf	3988,3,c	;volatile
 11015                           
 11016                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 11017  0035F4  8894               	bsf	3988,4,c	;volatile
 11018                           
 11019                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 11020  0035F6  0E80               	movlw	128
 11021  0035F8  6EC7               	movwf	4039,c	;volatile
 11022                           
 11023                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 11024  0035FA  0E28               	movlw	40
 11025  0035FC  6EC6               	movwf	4038,c	;volatile
 11026                           
 11027                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 11028  0035FE  0E00               	movlw	0
 11029  003600  6EC5               	movwf	4037,c	;volatile
 11030                           
 11031                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 11032  003602  0E00               	movlw	0
 11033  003604  6E01               	movwf	i2___lldiv@dividend,c
 11034  003606  0E5A               	movlw	90
 11035  003608  6E02               	movwf	i2___lldiv@dividend+1,c
 11036  00360A  0E62               	movlw	98
 11037  00360C  6E03               	movwf	i2___lldiv@dividend+2,c
 11038  00360E  0E02               	movlw	2
 11039  003610  6E04               	movwf	i2___lldiv@dividend+3,c
 11040  003612  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 11041  003616  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 11042  00361A  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 11043  00361E  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 11044  003622  0E02               	movlw	2
 11045  003624                     i2u351_45:
 11046  003624  90D8               	bcf	status,0,c
 11047  003626  3612               	rlcf	??i2_I2C_Master_Init,f,c
 11048  003628  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 11049  00362A  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 11050  00362C  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 11051  00362E  2EE8               	decfsz	wreg,f,c
 11052  003630  D7F9               	goto	i2u351_45
 11053  003632  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 11054  003636  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 11055  00363A  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 11056  00363E  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 11057  003642  ECE0  F019         	call	i2___lldiv	;wreg free
 11058  003646  0401               	decf	?i2___lldiv,w,c
 11059  003648  6EC8               	movwf	4040,c	;volatile
 11060  00364A  0012               	return		;funcret
 11061  00364C                     __end_ofi2_I2C_Master_Init:
 11062                           	opt stack 0
 11063                           pclatu	equ	0xFFB
 11064                           pclath	equ	0xFFA
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           intcon3	equ	0xFF0
 11073                           indf0	equ	0xFEF
 11074                           postinc0	equ	0xFEE
 11075                           fsr0h	equ	0xFEA
 11076                           fsr0l	equ	0xFE9
 11077                           wreg	equ	0xFE8
 11078                           postdec1	equ	0xFE5
 11079                           fsr1h	equ	0xFE2
 11080                           fsr1l	equ	0xFE1
 11081                           indf2	equ	0xFDF
 11082                           postinc2	equ	0xFDE
 11083                           postdec2	equ	0xFDD
 11084                           fsr2h	equ	0xFDA
 11085                           fsr2l	equ	0xFD9
 11086                           status	equ	0xFD8
 11087                           
 11088 ;; *************** function i2___lldiv *****************
 11089 ;; Defined at:
 11090 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 11091 ;; Parameters:    Size  Location     Type
 11092 ;;  dividend        4    0[COMRAM] unsigned long 
 11093 ;;  divisor         4    4[COMRAM] unsigned long 
 11094 ;; Auto vars:     Size  Location     Type
 11095 ;;  __lldiv         4    8[COMRAM] unsigned long 
 11096 ;;  __lldiv         1   12[COMRAM] unsigned char 
 11097 ;; Return value:  Size  Location     Type
 11098 ;;                  4    0[COMRAM] unsigned long 
 11099 ;; Registers used:
 11100 ;;		wreg, status,2, status,0
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11106 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11107 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;Total ram usage:       13 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; This function calls:
 11113 ;;		Nothing
 11114 ;; This function is called by:
 11115 ;;		i2_I2C_Master_Init
 11116 ;; This function uses a non-reentrant model
 11117 ;;
 11118                           
 11119                           	psect	text38
 11120  0033C0                     __ptext38:
 11121                           	opt stack 0
 11122  0033C0                     i2___lldiv:
 11123                           	opt stack 25
 11124                           
 11125                           ;incstack = 0
 11126  0033C0  0E00               	movlw	0
 11127  0033C2  6E09               	movwf	i2___lldiv@quotient,c
 11128  0033C4  0E00               	movlw	0
 11129  0033C6  6E0A               	movwf	i2___lldiv@quotient+1,c
 11130  0033C8  0E00               	movlw	0
 11131  0033CA  6E0B               	movwf	i2___lldiv@quotient+2,c
 11132  0033CC  0E00               	movlw	0
 11133  0033CE  6E0C               	movwf	i2___lldiv@quotient+3,c
 11134  0033D0  5005               	movf	i2___lldiv@divisor,w,c
 11135  0033D2  1006               	iorwf	i2___lldiv@divisor+1,w,c
 11136  0033D4  1007               	iorwf	i2___lldiv@divisor+2,w,c
 11137  0033D6  1008               	iorwf	i2___lldiv@divisor+3,w,c
 11138  0033D8  B4D8               	btfsc	status,2,c
 11139  0033DA  D02A               	goto	i2l1226
 11140  0033DC  0E01               	movlw	1
 11141  0033DE  6E0D               	movwf	i2___lldiv@counter,c
 11142  0033E0  D006               	goto	i2l1221
 11143  0033E2  90D8               	bcf	status,0,c
 11144  0033E4  3605               	rlcf	i2___lldiv@divisor,f,c
 11145  0033E6  3606               	rlcf	i2___lldiv@divisor+1,f,c
 11146  0033E8  3607               	rlcf	i2___lldiv@divisor+2,f,c
 11147  0033EA  3608               	rlcf	i2___lldiv@divisor+3,f,c
 11148  0033EC  2A0D               	incf	i2___lldiv@counter,f,c
 11149  0033EE                     i2l1221:
 11150  0033EE  AE08               	btfss	i2___lldiv@divisor+3,7,c
 11151  0033F0  D7F8               	goto	i2l1222
 11152  0033F2                     i2u269_40:
 11153  0033F2  90D8               	bcf	status,0,c
 11154  0033F4  3609               	rlcf	i2___lldiv@quotient,f,c
 11155  0033F6  360A               	rlcf	i2___lldiv@quotient+1,f,c
 11156  0033F8  360B               	rlcf	i2___lldiv@quotient+2,f,c
 11157  0033FA  360C               	rlcf	i2___lldiv@quotient+3,f,c
 11158  0033FC  5005               	movf	i2___lldiv@divisor,w,c
 11159  0033FE  5C01               	subwf	i2___lldiv@dividend,w,c
 11160  003400  5006               	movf	i2___lldiv@divisor+1,w,c
 11161  003402  5802               	subwfb	i2___lldiv@dividend+1,w,c
 11162  003404  5007               	movf	i2___lldiv@divisor+2,w,c
 11163  003406  5803               	subwfb	i2___lldiv@dividend+2,w,c
 11164  003408  5008               	movf	i2___lldiv@divisor+3,w,c
 11165  00340A  5804               	subwfb	i2___lldiv@dividend+3,w,c
 11166  00340C  A0D8               	btfss	status,0,c
 11167  00340E  D009               	goto	i2l1225
 11168  003410  5005               	movf	i2___lldiv@divisor,w,c
 11169  003412  5E01               	subwf	i2___lldiv@dividend,f,c
 11170  003414  5006               	movf	i2___lldiv@divisor+1,w,c
 11171  003416  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 11172  003418  5007               	movf	i2___lldiv@divisor+2,w,c
 11173  00341A  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 11174  00341C  5008               	movf	i2___lldiv@divisor+3,w,c
 11175  00341E  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 11176  003420  8009               	bsf	i2___lldiv@quotient,0,c
 11177  003422                     i2l1225:
 11178  003422  90D8               	bcf	status,0,c
 11179  003424  3208               	rrcf	i2___lldiv@divisor+3,f,c
 11180  003426  3207               	rrcf	i2___lldiv@divisor+2,f,c
 11181  003428  3206               	rrcf	i2___lldiv@divisor+1,f,c
 11182  00342A  3205               	rrcf	i2___lldiv@divisor,f,c
 11183  00342C  2E0D               	decfsz	i2___lldiv@counter,f,c
 11184  00342E  D7E1               	goto	i2u269_40
 11185  003430                     i2l1226:
 11186  003430  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 11187  003434  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 11188  003438  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 11189  00343C  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 11190  003440  0012               	return		;funcret
 11191  003442                     __end_ofi2___lldiv:
 11192                           	opt stack 0
 11193                           pclatu	equ	0xFFB
 11194                           pclath	equ	0xFFA
 11195                           tblptru	equ	0xFF8
 11196                           tblptrh	equ	0xFF7
 11197                           tblptrl	equ	0xFF6
 11198                           tablat	equ	0xFF5
 11199                           prodh	equ	0xFF4
 11200                           prodl	equ	0xFF3
 11201                           intcon	equ	0xFF2
 11202                           intcon3	equ	0xFF0
 11203                           indf0	equ	0xFEF
 11204                           postinc0	equ	0xFEE
 11205                           fsr0h	equ	0xFEA
 11206                           fsr0l	equ	0xFE9
 11207                           wreg	equ	0xFE8
 11208                           postdec1	equ	0xFE5
 11209                           fsr1h	equ	0xFE2
 11210                           fsr1l	equ	0xFE1
 11211                           indf2	equ	0xFDF
 11212                           postinc2	equ	0xFDE
 11213                           postdec2	equ	0xFDD
 11214                           fsr2h	equ	0xFDA
 11215                           fsr2l	equ	0xFD9
 11216                           status	equ	0xFD8
 11217                           
 11218 ;; *************** function _strncmp *****************
 11219 ;; Defined at:
 11220 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 11223 ;;		 -> current_set(5), 
 11224 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 11225 ;;		 -> strs(100), 
 11226 ;;  len             2   10[COMRAM] unsigned int 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  2    6[COMRAM] int 
 11231 ;; Registers used:
 11232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11238 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;Total ram usage:        9 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; This function calls:
 11245 ;;		Nothing
 11246 ;; This function is called by:
 11247 ;;		_interruptHandler
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           	psect	text39
 11252  003232                     __ptext39:
 11253                           	opt stack 0
 11254  003232                     _strncmp:
 11255                           	opt stack 26
 11256                           
 11257                           ;incstack = 0
 11258  003232  D035               	goto	i2l1441
 11259  003234                     i2l4204:
 11260  003234  C007  FFD9         	movff	strncmp@s1,fsr2l
 11261  003238  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 11262  00323C  50DF               	movf	indf2,w,c
 11263  00323E  B4D8               	btfsc	status,2,c
 11264  003240  D010               	goto	i2u318_40
 11265  003242  C007  FFD9         	movff	strncmp@s1,fsr2l
 11266  003246  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 11267  00324A  50DF               	movf	indf2,w,c
 11268  00324C  6E0D               	movwf	??_strncmp& (0+255),c
 11269  00324E  C009  FFF6         	movff	strncmp@s2,tblptrl
 11270  003252  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 11271  003256                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11272  003256  6AF8               	clrf	tblptru,c
 11273  003258                     	endif
 11274  003258                     	if	0	;tblptru may be non-zero
 11275  003258                     	endif
 11276  003258  0008               	tblrd		*
 11277  00325A  50F5               	movf	tablat,w,c
 11278  00325C  180D               	xorwf	??_strncmp,w,c
 11279  00325E  B4D8               	btfsc	status,2,c
 11280  003260  D01A               	goto	i2l1443
 11281  003262                     i2u318_40:
 11282  003262  C009  FFF6         	movff	strncmp@s2,tblptrl
 11283  003266  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 11284  00326A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11285  00326A  6AF8               	clrf	tblptru,c
 11286  00326C                     	endif
 11287  00326C                     	if	0	;tblptru may be non-zero
 11288  00326C                     	endif
 11289  00326C  0008               	tblrd		*
 11290  00326E  50F5               	movf	tablat,w,c
 11291  003270  6E0D               	movwf	??_strncmp& (0+255),c
 11292  003272  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 11293  003274  1E0D               	comf	??_strncmp,f,c
 11294  003276  1E0E               	comf	??_strncmp+1,f,c
 11295  003278  4A0D               	infsnz	??_strncmp,f,c
 11296  00327A  2A0E               	incf	??_strncmp+1,f,c
 11297  00327C  C007  FFD9         	movff	strncmp@s1,fsr2l
 11298  003280  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 11299  003284  50DF               	movf	indf2,w,c
 11300  003286  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 11301  003288  500F               	movf	??_strncmp+2,w,c
 11302  00328A  240D               	addwf	??_strncmp,w,c
 11303  00328C  6E07               	movwf	?_strncmp,c
 11304  00328E  0E00               	movlw	0
 11305  003290  200E               	addwfc	??_strncmp+1,w,c
 11306  003292  6E08               	movwf	?_strncmp+1,c
 11307  003294  0012               	return	
 11308  003296                     i2l1443:
 11309  003296  4A07               	infsnz	strncmp@s1,f,c
 11310  003298  2A08               	incf	strncmp@s1+1,f,c
 11311  00329A  4A09               	infsnz	strncmp@s2,f,c
 11312  00329C  2A0A               	incf	strncmp@s2+1,f,c
 11313  00329E                     i2l1441:
 11314  00329E  060B               	decf	strncmp@len,f,c
 11315  0032A0  A0D8               	btfss	status,0,c
 11316  0032A2  060C               	decf	strncmp@len+1,f,c
 11317  0032A4  280B               	incf	strncmp@len,w,c
 11318  0032A6  E1C6               	bnz	i2l4204
 11319  0032A8  280C               	incf	strncmp@len+1,w,c
 11320  0032AA  A4D8               	btfss	status,2,c
 11321  0032AC  D7C3               	goto	i2l1442
 11322  0032AE  0E00               	movlw	0
 11323  0032B0  6E08               	movwf	?_strncmp+1,c
 11324  0032B2  0E00               	movlw	0
 11325  0032B4  6E07               	movwf	?_strncmp,c
 11326  0032B6  0012               	return	
 11327  0032B8                     __end_of_strncmp:
 11328                           	opt stack 0
 11329                           pclatu	equ	0xFFB
 11330                           pclath	equ	0xFFA
 11331                           tblptru	equ	0xFF8
 11332                           tblptrh	equ	0xFF7
 11333                           tblptrl	equ	0xFF6
 11334                           tablat	equ	0xFF5
 11335                           prodh	equ	0xFF4
 11336                           prodl	equ	0xFF3
 11337                           intcon	equ	0xFF2
 11338                           intcon3	equ	0xFF0
 11339                           indf0	equ	0xFEF
 11340                           postinc0	equ	0xFEE
 11341                           fsr0h	equ	0xFEA
 11342                           fsr0l	equ	0xFE9
 11343                           wreg	equ	0xFE8
 11344                           postdec1	equ	0xFE5
 11345                           fsr1h	equ	0xFE2
 11346                           fsr1l	equ	0xFE1
 11347                           indf2	equ	0xFDF
 11348                           postinc2	equ	0xFDE
 11349                           postdec2	equ	0xFDD
 11350                           fsr2h	equ	0xFDA
 11351                           fsr2l	equ	0xFD9
 11352                           status	equ	0xFD8
 11353                           
 11354 ;; *************** function _strcpy *****************
 11355 ;; Defined at:
 11356 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 11357 ;; Parameters:    Size  Location     Type
 11358 ;;  to              2    6[COMRAM] PTR unsigned char 
 11359 ;;		 -> current_set2(5), final_set(40), current_set(5), temp_set(5), 
 11360 ;;  from            2    8[COMRAM] PTR const unsigned char 
 11361 ;;		 -> STR_42(1), STR_40(1), STR_37(1), STR_34(2), 
 11362 ;;		 -> STR_33(2), STR_32(2), current_set(5), STR_31(2), 
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;  cp              2   10[COMRAM] PTR unsigned char 
 11365 ;;		 -> current_set2(5), final_set(40), current_set(5), temp_set(5), 
 11366 ;; Return value:  Size  Location     Type
 11367 ;;                  2    6[COMRAM] PTR unsigned char 
 11368 ;; Registers used:
 11369 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11370 ;; Tracked objects:
 11371 ;;		On entry : 0/0
 11372 ;;		On exit  : 0/0
 11373 ;;		Unchanged: 0/0
 11374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;Total ram usage:        6 bytes
 11380 ;; Hardware stack levels used:    1
 11381 ;; This function calls:
 11382 ;;		Nothing
 11383 ;; This function is called by:
 11384 ;;		_interruptHandler
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           	psect	text40
 11389  00381E                     __ptext40:
 11390                           	opt stack 0
 11391  00381E                     _strcpy:
 11392                           	opt stack 26
 11393                           
 11394                           ;incstack = 0
 11395  00381E  C007  F00B         	movff	strcpy@to,strcpy@cp
 11396  003822  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 11397  003826  D004               	goto	i2l1435
 11398  003828  4A0B               	infsnz	strcpy@cp,f,c
 11399  00382A  2A0C               	incf	strcpy@cp+1,f,c
 11400  00382C  4A09               	infsnz	strcpy@from,f,c
 11401  00382E  2A0A               	incf	strcpy@from+1,f,c
 11402  003830                     i2l1435:
 11403  003830  C009  FFF6         	movff	strcpy@from,tblptrl
 11404  003834  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 11405  003838  0E00               	movlw	low (__mediumconst shr (0+16))
 11406  00383A  6EF8               	movwf	tblptru,c
 11407  00383C  C00B  FFD9         	movff	strcpy@cp,fsr2l
 11408  003840  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 11409  003844  0E0F               	movlw	(high __ramtop+-1)
 11410  003846  64F7               	cpfsgt	tblptrh,c
 11411  003848  D003               	bra	i2u313_47
 11412  00384A  0008               	tblrd		*
 11413  00384C  50F5               	movf	tablat,w,c
 11414  00384E  D005               	bra	i2u313_40
 11415  003850                     i2u313_47:
 11416  003850  CFF6 FFE9          	movff	tblptrl,fsr0l
 11417  003854  CFF7 FFEA          	movff	tblptrh,fsr0h
 11418  003858  50EF               	movf	indf0,w,c
 11419  00385A                     i2u313_40:
 11420  00385A  6EDF               	movwf	indf2,c
 11421  00385C  50DF               	movf	indf2,w,c
 11422  00385E  B4D8               	btfsc	status,2,c
 11423  003860  0012               	return	
 11424  003862  D7E2               	goto	i2l1436
 11425  003864                     __end_of_strcpy:
 11426                           	opt stack 0
 11427                           pclatu	equ	0xFFB
 11428                           pclath	equ	0xFFA
 11429                           tblptru	equ	0xFF8
 11430                           tblptrh	equ	0xFF7
 11431                           tblptrl	equ	0xFF6
 11432                           tablat	equ	0xFF5
 11433                           prodh	equ	0xFF4
 11434                           prodl	equ	0xFF3
 11435                           intcon	equ	0xFF2
 11436                           intcon3	equ	0xFF0
 11437                           indf0	equ	0xFEF
 11438                           postinc0	equ	0xFEE
 11439                           fsr0h	equ	0xFEA
 11440                           fsr0l	equ	0xFE9
 11441                           wreg	equ	0xFE8
 11442                           postdec1	equ	0xFE5
 11443                           fsr1h	equ	0xFE2
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           fsr2h	equ	0xFDA
 11449                           fsr2l	equ	0xFD9
 11450                           status	equ	0xFD8
 11451                           
 11452 ;; *************** function _strcat *****************
 11453 ;; Defined at:
 11454 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;  to              2    0[COMRAM] PTR unsigned char 
 11457 ;;		 -> current_set(5), 
 11458 ;;  from            2    2[COMRAM] PTR const unsigned char 
 11459 ;;		 -> temp_set(5), 
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;  cp              2    4[COMRAM] PTR unsigned char 
 11462 ;;		 -> current_set(5), 
 11463 ;; Return value:  Size  Location     Type
 11464 ;;                  2    0[COMRAM] PTR unsigned char 
 11465 ;; Registers used:
 11466 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 11467 ;; Tracked objects:
 11468 ;;		On entry : 0/0
 11469 ;;		On exit  : 0/0
 11470 ;;		Unchanged: 0/0
 11471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11472 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11475 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11476 ;;Total ram usage:        6 bytes
 11477 ;; Hardware stack levels used:    1
 11478 ;; This function calls:
 11479 ;;		Nothing
 11480 ;; This function is called by:
 11481 ;;		_interruptHandler
 11482 ;; This function uses a non-reentrant model
 11483 ;;
 11484                           
 11485                           	psect	text41
 11486  0038EA                     __ptext41:
 11487                           	opt stack 0
 11488  0038EA                     _strcat:
 11489                           	opt stack 26
 11490                           
 11491                           ;incstack = 0
 11492  0038EA  C001  F005         	movff	strcat@to,strcat@cp
 11493  0038EE  C002  F006         	movff	strcat@to+1,strcat@cp+1
 11494  0038F2  D002               	goto	i2l1418
 11495  0038F4  4A05               	infsnz	strcat@cp,f,c
 11496  0038F6  2A06               	incf	strcat@cp+1,f,c
 11497  0038F8                     i2l1418:
 11498  0038F8  C005  FFD9         	movff	strcat@cp,fsr2l
 11499  0038FC  C006  FFDA         	movff	strcat@cp+1,fsr2h
 11500  003900  50DF               	movf	indf2,w,c
 11501  003902  B4D8               	btfsc	status,2,c
 11502  003904  D005               	goto	i2l1421
 11503  003906  D7F6               	goto	i2l1419
 11504  003908  4A05               	infsnz	strcat@cp,f,c
 11505  00390A  2A06               	incf	strcat@cp+1,f,c
 11506  00390C  4A03               	infsnz	strcat@from,f,c
 11507  00390E  2A04               	incf	strcat@from+1,f,c
 11508  003910                     i2l1421:
 11509  003910  C003  FFD9         	movff	strcat@from,fsr2l
 11510  003914  C004  FFDA         	movff	strcat@from+1,fsr2h
 11511  003918  C005  FFE1         	movff	strcat@cp,fsr1l
 11512  00391C  C006  FFE2         	movff	strcat@cp+1,fsr1h
 11513  003920  CFDF FFE7          	movff	indf2,indf1
 11514  003924  50E7               	movf	indf1,w,c
 11515  003926  B4D8               	btfsc	status,2,c
 11516  003928  0012               	return	
 11517  00392A  D7EE               	goto	i2l1422
 11518  00392C                     __end_of_strcat:
 11519                           	opt stack 0
 11520                           pclatu	equ	0xFFB
 11521                           pclath	equ	0xFFA
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodh	equ	0xFF4
 11527                           prodl	equ	0xFF3
 11528                           intcon	equ	0xFF2
 11529                           intcon3	equ	0xFF0
 11530                           indf0	equ	0xFEF
 11531                           postinc0	equ	0xFEE
 11532                           fsr0h	equ	0xFEA
 11533                           fsr0l	equ	0xFE9
 11534                           wreg	equ	0xFE8
 11535                           indf1	equ	0xFE7
 11536                           postdec1	equ	0xFE5
 11537                           fsr1h	equ	0xFE2
 11538                           fsr1l	equ	0xFE1
 11539                           indf2	equ	0xFDF
 11540                           postinc2	equ	0xFDE
 11541                           postdec2	equ	0xFDD
 11542                           fsr2h	equ	0xFDA
 11543                           fsr2l	equ	0xFD9
 11544                           status	equ	0xFD8
 11545                           
 11546 ;; *************** function _is_valid *****************
 11547 ;; Defined at:
 11548 ;;		line 12 in file "keypad.c"
 11549 ;; Parameters:    Size  Location     Type
 11550 ;;		None
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;		None
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  2  125[None  ] int 
 11555 ;; Registers used:
 11556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11557 ;; Tracked objects:
 11558 ;;		On entry : 0/0
 11559 ;;		On exit  : 0/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11564 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11565 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;Total ram usage:        2 bytes
 11567 ;; Hardware stack levels used:    1
 11568 ;; Hardware stack levels required when called:    1
 11569 ;; This function calls:
 11570 ;;		_strcmp
 11571 ;;		i2___wmul
 11572 ;; This function is called by:
 11573 ;;		_interruptHandler
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           	psect	text42
 11578  000012                     __ptext42:
 11579                           	opt stack 0
 11580  000012                     _is_valid:
 11581                           	opt stack 25
 11582                           
 11583                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 11584                           
 11585                           ;incstack = 0
 11586  000012  0E78               	movlw	low _current_set2
 11587  000014  6E01               	movwf	strcmp@s1,c
 11588  000016  0E00               	movlw	high _current_set2
 11589  000018  6E02               	movwf	strcmp@s1+1,c
 11590  00001A  0EFD               	movlw	low STR_31
 11591  00001C  6E03               	movwf	strcmp@s2,c
 11592  00001E  0EFF               	movlw	high STR_31
 11593  000020  6E04               	movwf	strcmp@s2+1,c
 11594  000022  ECEA  F01B         	call	_strcmp	;wreg free
 11595  000026  5001               	movf	?_strcmp,w,c
 11596  000028  1002               	iorwf	?_strcmp+1,w,c
 11597  00002A  A4D8               	btfss	status,2,c
 11598  00002C  D023               	goto	i2l682
 11599                           
 11600                           ;keypad.c: 17: B=1*number;
 11601  00002E  C07D  F05F         	movff	_number,_B
 11602  000032  C07E  F060         	movff	_number+1,_B+1
 11603                           
 11604                           ;keypad.c: 18: total_number = 1*number;
 11605  000036  C07D  F063         	movff	_number,_total_number
 11606  00003A  C07E  F064         	movff	_number+1,_total_number+1
 11607                           
 11608                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 11609  00003E  90D8               	bcf	status,0,c
 11610  000040  3467               	rlcf	_counter_step,w,c
 11611  000042  6ED9               	movwf	fsr2l,c
 11612  000044  3468               	rlcf	_counter_step+1,w,c
 11613  000046  6EDA               	movwf	fsr2h,c
 11614  000048  0E42               	movlw	low _compartment_number
 11615  00004A  26D9               	addwf	fsr2l,f,c
 11616  00004C  0E00               	movlw	high _compartment_number
 11617  00004E  22DA               	addwfc	fsr2h,f,c
 11618  000050  CFDE F007          	movff	postinc2,??_is_valid
 11619  000054  CFDD F008          	movff	postdec2,??_is_valid+1
 11620  000058  90D8               	bcf	status,0,c
 11621  00005A  3607               	rlcf	??_is_valid,f,c
 11622  00005C  3608               	rlcf	??_is_valid+1,f,c
 11623  00005E  0EB4               	movlw	low _B_array
 11624  000060  2407               	addwf	??_is_valid,w,c
 11625  000062  6ED9               	movwf	fsr2l,c
 11626  000064  0E01               	movlw	high _B_array
 11627  000066  2008               	addwfc	??_is_valid+1,w,c
 11628  000068  6EDA               	movwf	fsr2h,c
 11629  00006A  C05F  FFDE         	movff	_B,postinc2
 11630  00006E  C060  FFDD         	movff	_B+1,postdec2
 11631                           
 11632                           ;keypad.c: 22: }
 11633  000072  0012               	return	
 11634  000074                     i2l682:
 11635                           
 11636                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 11637  000074  0E78               	movlw	low _current_set2
 11638  000076  6E01               	movwf	strcmp@s1,c
 11639  000078  0E00               	movlw	high _current_set2
 11640  00007A  6E02               	movwf	strcmp@s1+1,c
 11641  00007C  0EEC               	movlw	low (STR_53+2)
 11642  00007E  6E03               	movwf	strcmp@s2,c
 11643  000080  0EFF               	movlw	high (STR_53+2)
 11644  000082  6E04               	movwf	strcmp@s2+1,c
 11645  000084  ECEA  F01B         	call	_strcmp	;wreg free
 11646  000088  5001               	movf	?_strcmp,w,c
 11647  00008A  1002               	iorwf	?_strcmp+1,w,c
 11648  00008C  A4D8               	btfss	status,2,c
 11649  00008E  D023               	goto	i2l684
 11650                           
 11651                           ;keypad.c: 25: N=1*number;
 11652  000090  C07D  F05D         	movff	_number,_N
 11653  000094  C07E  F05E         	movff	_number+1,_N+1
 11654                           
 11655                           ;keypad.c: 26: total_number = 1*number;
 11656  000098  C07D  F063         	movff	_number,_total_number
 11657  00009C  C07E  F064         	movff	_number+1,_total_number+1
 11658                           
 11659                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 11660  0000A0  90D8               	bcf	status,0,c
 11661  0000A2  3467               	rlcf	_counter_step,w,c
 11662  0000A4  6ED9               	movwf	fsr2l,c
 11663  0000A6  3468               	rlcf	_counter_step+1,w,c
 11664  0000A8  6EDA               	movwf	fsr2h,c
 11665  0000AA  0E42               	movlw	low _compartment_number
 11666  0000AC  26D9               	addwf	fsr2l,f,c
 11667  0000AE  0E00               	movlw	high _compartment_number
 11668  0000B0  22DA               	addwfc	fsr2h,f,c
 11669  0000B2  CFDE F007          	movff	postinc2,??_is_valid
 11670  0000B6  CFDD F008          	movff	postdec2,??_is_valid+1
 11671  0000BA  90D8               	bcf	status,0,c
 11672  0000BC  3607               	rlcf	??_is_valid,f,c
 11673  0000BE  3608               	rlcf	??_is_valid+1,f,c
 11674  0000C0  0E94               	movlw	low _N_array
 11675  0000C2  2407               	addwf	??_is_valid,w,c
 11676  0000C4  6ED9               	movwf	fsr2l,c
 11677  0000C6  0E01               	movlw	high _N_array
 11678  0000C8  2008               	addwfc	??_is_valid+1,w,c
 11679  0000CA  6EDA               	movwf	fsr2h,c
 11680  0000CC  C05D  FFDE         	movff	_N,postinc2
 11681  0000D0  C05E  FFDD         	movff	_N+1,postdec2
 11682                           
 11683                           ;keypad.c: 28: }
 11684  0000D4  0012               	return	
 11685  0000D6                     i2l684:
 11686                           
 11687                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 11688  0000D6  0E78               	movlw	low _current_set2
 11689  0000D8  6E01               	movwf	strcmp@s1,c
 11690  0000DA  0E00               	movlw	high _current_set2
 11691  0000DC  6E02               	movwf	strcmp@s1+1,c
 11692  0000DE  0EF0               	movlw	low (STR_54+2)
 11693  0000E0  6E03               	movwf	strcmp@s2,c
 11694  0000E2  0EFF               	movlw	high (STR_54+2)
 11695  0000E4  6E04               	movwf	strcmp@s2+1,c
 11696  0000E6  ECEA  F01B         	call	_strcmp	;wreg free
 11697  0000EA  5001               	movf	?_strcmp,w,c
 11698  0000EC  1002               	iorwf	?_strcmp+1,w,c
 11699  0000EE  A4D8               	btfss	status,2,c
 11700  0000F0  D023               	goto	i2l686
 11701                           
 11702                           ;keypad.c: 30: S=1*number;
 11703  0000F2  C07D  F05B         	movff	_number,_S
 11704  0000F6  C07E  F05C         	movff	_number+1,_S+1
 11705                           
 11706                           ;keypad.c: 31: total_number = 1*number;
 11707  0000FA  C07D  F063         	movff	_number,_total_number
 11708  0000FE  C07E  F064         	movff	_number+1,_total_number+1
 11709                           
 11710                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 11711  000102  90D8               	bcf	status,0,c
 11712  000104  3467               	rlcf	_counter_step,w,c
 11713  000106  6ED9               	movwf	fsr2l,c
 11714  000108  3468               	rlcf	_counter_step+1,w,c
 11715  00010A  6EDA               	movwf	fsr2h,c
 11716  00010C  0E42               	movlw	low _compartment_number
 11717  00010E  26D9               	addwf	fsr2l,f,c
 11718  000110  0E00               	movlw	high _compartment_number
 11719  000112  22DA               	addwfc	fsr2h,f,c
 11720  000114  CFDE F007          	movff	postinc2,??_is_valid
 11721  000118  CFDD F008          	movff	postdec2,??_is_valid+1
 11722  00011C  90D8               	bcf	status,0,c
 11723  00011E  3607               	rlcf	??_is_valid,f,c
 11724  000120  3608               	rlcf	??_is_valid+1,f,c
 11725  000122  0EA4               	movlw	low _S_array
 11726  000124  2407               	addwf	??_is_valid,w,c
 11727  000126  6ED9               	movwf	fsr2l,c
 11728  000128  0E01               	movlw	high _S_array
 11729  00012A  2008               	addwfc	??_is_valid+1,w,c
 11730  00012C  6EDA               	movwf	fsr2h,c
 11731  00012E  C05B  FFDE         	movff	_S,postinc2
 11732  000132  C05C  FFDD         	movff	_S+1,postdec2
 11733                           
 11734                           ;keypad.c: 33: }
 11735  000136  0012               	return	
 11736  000138                     i2l686:
 11737                           
 11738                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 11739  000138  0E78               	movlw	low _current_set2
 11740  00013A  6E01               	movwf	strcmp@s1,c
 11741  00013C  0E00               	movlw	high _current_set2
 11742  00013E  6E02               	movwf	strcmp@s1+1,c
 11743  000140  0EF4               	movlw	low (STR_55+2)
 11744  000142  6E03               	movwf	strcmp@s2,c
 11745  000144  0EFF               	movlw	high (STR_55+2)
 11746  000146  6E04               	movwf	strcmp@s2+1,c
 11747  000148  ECEA  F01B         	call	_strcmp	;wreg free
 11748  00014C  5001               	movf	?_strcmp,w,c
 11749  00014E  1002               	iorwf	?_strcmp+1,w,c
 11750  000150  A4D8               	btfss	status,2,c
 11751  000152  D023               	goto	i2l688
 11752                           
 11753                           ;keypad.c: 35: W=1*number;
 11754  000154  C07D  F059         	movff	_number,_W
 11755  000158  C07E  F05A         	movff	_number+1,_W+1
 11756                           
 11757                           ;keypad.c: 36: total_number = 1*number;
 11758  00015C  C07D  F063         	movff	_number,_total_number
 11759  000160  C07E  F064         	movff	_number+1,_total_number+1
 11760                           
 11761                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 11762  000164  90D8               	bcf	status,0,c
 11763  000166  3467               	rlcf	_counter_step,w,c
 11764  000168  6ED9               	movwf	fsr2l,c
 11765  00016A  3468               	rlcf	_counter_step+1,w,c
 11766  00016C  6EDA               	movwf	fsr2h,c
 11767  00016E  0E42               	movlw	low _compartment_number
 11768  000170  26D9               	addwf	fsr2l,f,c
 11769  000172  0E00               	movlw	high _compartment_number
 11770  000174  22DA               	addwfc	fsr2h,f,c
 11771  000176  CFDE F007          	movff	postinc2,??_is_valid
 11772  00017A  CFDD F008          	movff	postdec2,??_is_valid+1
 11773  00017E  90D8               	bcf	status,0,c
 11774  000180  3607               	rlcf	??_is_valid,f,c
 11775  000182  3608               	rlcf	??_is_valid+1,f,c
 11776  000184  0E84               	movlw	low _W_array
 11777  000186  2407               	addwf	??_is_valid,w,c
 11778  000188  6ED9               	movwf	fsr2l,c
 11779  00018A  0E01               	movlw	high _W_array
 11780  00018C  2008               	addwfc	??_is_valid+1,w,c
 11781  00018E  6EDA               	movwf	fsr2h,c
 11782  000190  C059  FFDE         	movff	_W,postinc2
 11783  000194  C05A  FFDD         	movff	_W+1,postdec2
 11784                           
 11785                           ;keypad.c: 38: }
 11786  000198  0012               	return	
 11787  00019A                     i2l688:
 11788                           
 11789                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 11790  00019A  0E78               	movlw	low _current_set2
 11791  00019C  6E01               	movwf	strcmp@s1,c
 11792  00019E  0E00               	movlw	high _current_set2
 11793  0001A0  6E02               	movwf	strcmp@s1+1,c
 11794  0001A2  0EEB               	movlw	low (STR_53+1)
 11795  0001A4  6E03               	movwf	strcmp@s2,c
 11796  0001A6  0EFF               	movlw	high (STR_53+1)
 11797  0001A8  6E04               	movwf	strcmp@s2+1,c
 11798  0001AA  ECEA  F01B         	call	_strcmp	;wreg free
 11799  0001AE  5001               	movf	?_strcmp,w,c
 11800  0001B0  1002               	iorwf	?_strcmp+1,w,c
 11801  0001B2  A4D8               	btfss	status,2,c
 11802  0001B4  D042               	goto	i2l690
 11803                           
 11804                           ;keypad.c: 40: B = 1*number;
 11805  0001B6  C07D  F05F         	movff	_number,_B
 11806  0001BA  C07E  F060         	movff	_number+1,_B+1
 11807                           
 11808                           ;keypad.c: 42: N = 1*number;
 11809  0001BE  C07D  F05D         	movff	_number,_N
 11810  0001C2  C07E  F05E         	movff	_number+1,_N+1
 11811                           
 11812                           ;keypad.c: 43: total_number = 2*number;
 11813  0001C6  90D8               	bcf	status,0,c
 11814  0001C8  347D               	rlcf	_number,w,c
 11815  0001CA  6E63               	movwf	_total_number,c
 11816  0001CC  347E               	rlcf	_number+1,w,c
 11817  0001CE  6E64               	movwf	_total_number+1,c
 11818                           
 11819                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 11820  0001D0  90D8               	bcf	status,0,c
 11821  0001D2  3467               	rlcf	_counter_step,w,c
 11822  0001D4  6ED9               	movwf	fsr2l,c
 11823  0001D6  3468               	rlcf	_counter_step+1,w,c
 11824  0001D8  6EDA               	movwf	fsr2h,c
 11825  0001DA  0E42               	movlw	low _compartment_number
 11826  0001DC  26D9               	addwf	fsr2l,f,c
 11827  0001DE  0E00               	movlw	high _compartment_number
 11828  0001E0  22DA               	addwfc	fsr2h,f,c
 11829  0001E2  CFDE F007          	movff	postinc2,??_is_valid
 11830  0001E6  CFDD F008          	movff	postdec2,??_is_valid+1
 11831  0001EA  90D8               	bcf	status,0,c
 11832  0001EC  3607               	rlcf	??_is_valid,f,c
 11833  0001EE  3608               	rlcf	??_is_valid+1,f,c
 11834  0001F0  0EB4               	movlw	low _B_array
 11835  0001F2  2407               	addwf	??_is_valid,w,c
 11836  0001F4  6ED9               	movwf	fsr2l,c
 11837  0001F6  0E01               	movlw	high _B_array
 11838  0001F8  2008               	addwfc	??_is_valid+1,w,c
 11839  0001FA  6EDA               	movwf	fsr2h,c
 11840  0001FC  C05F  FFDE         	movff	_B,postinc2
 11841  000200  C060  FFDD         	movff	_B+1,postdec2
 11842                           
 11843                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 11844  000204  90D8               	bcf	status,0,c
 11845  000206  3467               	rlcf	_counter_step,w,c
 11846  000208  6ED9               	movwf	fsr2l,c
 11847  00020A  3468               	rlcf	_counter_step+1,w,c
 11848  00020C  6EDA               	movwf	fsr2h,c
 11849  00020E  0E42               	movlw	low _compartment_number
 11850  000210  26D9               	addwf	fsr2l,f,c
 11851  000212  0E00               	movlw	high _compartment_number
 11852  000214  22DA               	addwfc	fsr2h,f,c
 11853  000216  CFDE F007          	movff	postinc2,??_is_valid
 11854  00021A  CFDD F008          	movff	postdec2,??_is_valid+1
 11855  00021E  90D8               	bcf	status,0,c
 11856  000220  3607               	rlcf	??_is_valid,f,c
 11857  000222  3608               	rlcf	??_is_valid+1,f,c
 11858  000224  0E94               	movlw	low _N_array
 11859  000226  2407               	addwf	??_is_valid,w,c
 11860  000228  6ED9               	movwf	fsr2l,c
 11861  00022A  0E01               	movlw	high _N_array
 11862  00022C  2008               	addwfc	??_is_valid+1,w,c
 11863  00022E  6EDA               	movwf	fsr2h,c
 11864  000230  C05D  FFDE         	movff	_N,postinc2
 11865  000234  C05E  FFDD         	movff	_N+1,postdec2
 11866                           
 11867                           ;keypad.c: 47: }
 11868  000238  0012               	return	
 11869  00023A                     i2l690:
 11870                           
 11871                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 11872  00023A  0E78               	movlw	low _current_set2
 11873  00023C  6E01               	movwf	strcmp@s1,c
 11874  00023E  0E00               	movlw	high _current_set2
 11875  000240  6E02               	movwf	strcmp@s1+1,c
 11876  000242  0EEF               	movlw	low (STR_54+1)
 11877  000244  6E03               	movwf	strcmp@s2,c
 11878  000246  0EFF               	movlw	high (STR_54+1)
 11879  000248  6E04               	movwf	strcmp@s2+1,c
 11880  00024A  ECEA  F01B         	call	_strcmp	;wreg free
 11881  00024E  5001               	movf	?_strcmp,w,c
 11882  000250  1002               	iorwf	?_strcmp+1,w,c
 11883  000252  A4D8               	btfss	status,2,c
 11884  000254  D042               	goto	i2l692
 11885                           
 11886                           ;keypad.c: 49: B = 1*number;
 11887  000256  C07D  F05F         	movff	_number,_B
 11888  00025A  C07E  F060         	movff	_number+1,_B+1
 11889                           
 11890                           ;keypad.c: 51: S = 1*number;
 11891  00025E  C07D  F05B         	movff	_number,_S
 11892  000262  C07E  F05C         	movff	_number+1,_S+1
 11893                           
 11894                           ;keypad.c: 52: total_number = 2*number;
 11895  000266  90D8               	bcf	status,0,c
 11896  000268  347D               	rlcf	_number,w,c
 11897  00026A  6E63               	movwf	_total_number,c
 11898  00026C  347E               	rlcf	_number+1,w,c
 11899  00026E  6E64               	movwf	_total_number+1,c
 11900                           
 11901                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 11902  000270  90D8               	bcf	status,0,c
 11903  000272  3467               	rlcf	_counter_step,w,c
 11904  000274  6ED9               	movwf	fsr2l,c
 11905  000276  3468               	rlcf	_counter_step+1,w,c
 11906  000278  6EDA               	movwf	fsr2h,c
 11907  00027A  0E42               	movlw	low _compartment_number
 11908  00027C  26D9               	addwf	fsr2l,f,c
 11909  00027E  0E00               	movlw	high _compartment_number
 11910  000280  22DA               	addwfc	fsr2h,f,c
 11911  000282  CFDE F007          	movff	postinc2,??_is_valid
 11912  000286  CFDD F008          	movff	postdec2,??_is_valid+1
 11913  00028A  90D8               	bcf	status,0,c
 11914  00028C  3607               	rlcf	??_is_valid,f,c
 11915  00028E  3608               	rlcf	??_is_valid+1,f,c
 11916  000290  0EB4               	movlw	low _B_array
 11917  000292  2407               	addwf	??_is_valid,w,c
 11918  000294  6ED9               	movwf	fsr2l,c
 11919  000296  0E01               	movlw	high _B_array
 11920  000298  2008               	addwfc	??_is_valid+1,w,c
 11921  00029A  6EDA               	movwf	fsr2h,c
 11922  00029C  C05F  FFDE         	movff	_B,postinc2
 11923  0002A0  C060  FFDD         	movff	_B+1,postdec2
 11924                           
 11925                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 11926  0002A4  90D8               	bcf	status,0,c
 11927  0002A6  3467               	rlcf	_counter_step,w,c
 11928  0002A8  6ED9               	movwf	fsr2l,c
 11929  0002AA  3468               	rlcf	_counter_step+1,w,c
 11930  0002AC  6EDA               	movwf	fsr2h,c
 11931  0002AE  0E42               	movlw	low _compartment_number
 11932  0002B0  26D9               	addwf	fsr2l,f,c
 11933  0002B2  0E00               	movlw	high _compartment_number
 11934  0002B4  22DA               	addwfc	fsr2h,f,c
 11935  0002B6  CFDE F007          	movff	postinc2,??_is_valid
 11936  0002BA  CFDD F008          	movff	postdec2,??_is_valid+1
 11937  0002BE  90D8               	bcf	status,0,c
 11938  0002C0  3607               	rlcf	??_is_valid,f,c
 11939  0002C2  3608               	rlcf	??_is_valid+1,f,c
 11940  0002C4  0EA4               	movlw	low _S_array
 11941  0002C6  2407               	addwf	??_is_valid,w,c
 11942  0002C8  6ED9               	movwf	fsr2l,c
 11943  0002CA  0E01               	movlw	high _S_array
 11944  0002CC  2008               	addwfc	??_is_valid+1,w,c
 11945  0002CE  6EDA               	movwf	fsr2h,c
 11946  0002D0  C05B  FFDE         	movff	_S,postinc2
 11947  0002D4  C05C  FFDD         	movff	_S+1,postdec2
 11948                           
 11949                           ;keypad.c: 57: }
 11950  0002D8  0012               	return	
 11951  0002DA                     i2l692:
 11952                           
 11953                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 11954  0002DA  0E78               	movlw	low _current_set2
 11955  0002DC  6E01               	movwf	strcmp@s1,c
 11956  0002DE  0E00               	movlw	high _current_set2
 11957  0002E0  6E02               	movwf	strcmp@s1+1,c
 11958  0002E2  0EF3               	movlw	low (STR_55+1)
 11959  0002E4  6E03               	movwf	strcmp@s2,c
 11960  0002E6  0EFF               	movlw	high (STR_55+1)
 11961  0002E8  6E04               	movwf	strcmp@s2+1,c
 11962  0002EA  ECEA  F01B         	call	_strcmp	;wreg free
 11963  0002EE  5001               	movf	?_strcmp,w,c
 11964  0002F0  1002               	iorwf	?_strcmp+1,w,c
 11965  0002F2  A4D8               	btfss	status,2,c
 11966  0002F4  D042               	goto	i2l694
 11967                           
 11968                           ;keypad.c: 60: B = 1*number;
 11969  0002F6  C07D  F05F         	movff	_number,_B
 11970  0002FA  C07E  F060         	movff	_number+1,_B+1
 11971                           
 11972                           ;keypad.c: 62: W = 1*number;
 11973  0002FE  C07D  F059         	movff	_number,_W
 11974  000302  C07E  F05A         	movff	_number+1,_W+1
 11975                           
 11976                           ;keypad.c: 63: total_number = 2*number;
 11977  000306  90D8               	bcf	status,0,c
 11978  000308  347D               	rlcf	_number,w,c
 11979  00030A  6E63               	movwf	_total_number,c
 11980  00030C  347E               	rlcf	_number+1,w,c
 11981  00030E  6E64               	movwf	_total_number+1,c
 11982                           
 11983                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 11984  000310  90D8               	bcf	status,0,c
 11985  000312  3467               	rlcf	_counter_step,w,c
 11986  000314  6ED9               	movwf	fsr2l,c
 11987  000316  3468               	rlcf	_counter_step+1,w,c
 11988  000318  6EDA               	movwf	fsr2h,c
 11989  00031A  0E42               	movlw	low _compartment_number
 11990  00031C  26D9               	addwf	fsr2l,f,c
 11991  00031E  0E00               	movlw	high _compartment_number
 11992  000320  22DA               	addwfc	fsr2h,f,c
 11993  000322  CFDE F007          	movff	postinc2,??_is_valid
 11994  000326  CFDD F008          	movff	postdec2,??_is_valid+1
 11995  00032A  90D8               	bcf	status,0,c
 11996  00032C  3607               	rlcf	??_is_valid,f,c
 11997  00032E  3608               	rlcf	??_is_valid+1,f,c
 11998  000330  0EB4               	movlw	low _B_array
 11999  000332  2407               	addwf	??_is_valid,w,c
 12000  000334  6ED9               	movwf	fsr2l,c
 12001  000336  0E01               	movlw	high _B_array
 12002  000338  2008               	addwfc	??_is_valid+1,w,c
 12003  00033A  6EDA               	movwf	fsr2h,c
 12004  00033C  C05F  FFDE         	movff	_B,postinc2
 12005  000340  C060  FFDD         	movff	_B+1,postdec2
 12006                           
 12007                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 12008  000344  90D8               	bcf	status,0,c
 12009  000346  3467               	rlcf	_counter_step,w,c
 12010  000348  6ED9               	movwf	fsr2l,c
 12011  00034A  3468               	rlcf	_counter_step+1,w,c
 12012  00034C  6EDA               	movwf	fsr2h,c
 12013  00034E  0E42               	movlw	low _compartment_number
 12014  000350  26D9               	addwf	fsr2l,f,c
 12015  000352  0E00               	movlw	high _compartment_number
 12016  000354  22DA               	addwfc	fsr2h,f,c
 12017  000356  CFDE F007          	movff	postinc2,??_is_valid
 12018  00035A  CFDD F008          	movff	postdec2,??_is_valid+1
 12019  00035E  90D8               	bcf	status,0,c
 12020  000360  3607               	rlcf	??_is_valid,f,c
 12021  000362  3608               	rlcf	??_is_valid+1,f,c
 12022  000364  0E84               	movlw	low _W_array
 12023  000366  2407               	addwf	??_is_valid,w,c
 12024  000368  6ED9               	movwf	fsr2l,c
 12025  00036A  0E01               	movlw	high _W_array
 12026  00036C  2008               	addwfc	??_is_valid+1,w,c
 12027  00036E  6EDA               	movwf	fsr2h,c
 12028  000370  C059  FFDE         	movff	_W,postinc2
 12029  000374  C05A  FFDD         	movff	_W+1,postdec2
 12030                           
 12031                           ;keypad.c: 67: }
 12032  000378  0012               	return	
 12033  00037A                     i2l694:
 12034                           
 12035                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 12036  00037A  0E78               	movlw	low _current_set2
 12037  00037C  6E01               	movwf	strcmp@s1,c
 12038  00037E  0E00               	movlw	high _current_set2
 12039  000380  6E02               	movwf	strcmp@s1+1,c
 12040  000382  0EEA               	movlw	low STR_53
 12041  000384  6E03               	movwf	strcmp@s2,c
 12042  000386  0EFF               	movlw	high STR_53
 12043  000388  6E04               	movwf	strcmp@s2+1,c
 12044  00038A  ECEA  F01B         	call	_strcmp	;wreg free
 12045  00038E  5001               	movf	?_strcmp,w,c
 12046  000390  1002               	iorwf	?_strcmp+1,w,c
 12047  000392  A4D8               	btfss	status,2,c
 12048  000394  D04C               	goto	i2l696
 12049                           
 12050                           ;keypad.c: 69: B = 2*number;
 12051  000396  90D8               	bcf	status,0,c
 12052  000398  347D               	rlcf	_number,w,c
 12053  00039A  6E5F               	movwf	_B,c
 12054  00039C  347E               	rlcf	_number+1,w,c
 12055  00039E  6E60               	movwf	_B+1,c
 12056                           
 12057                           ;keypad.c: 71: N = 1*number;
 12058  0003A0  C07D  F05D         	movff	_number,_N
 12059  0003A4  C07E  F05E         	movff	_number+1,_N+1
 12060                           
 12061                           ;keypad.c: 72: total_number = 3*number;
 12062  0003A8  C07D  F001         	movff	_number,i2___wmul@multiplier
 12063  0003AC  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12064  0003B0  0E00               	movlw	0
 12065  0003B2  6E04               	movwf	i2___wmul@multiplicand+1,c
 12066  0003B4  0E03               	movlw	3
 12067  0003B6  6E03               	movwf	i2___wmul@multiplicand,c
 12068  0003B8  ECF0  F01C         	call	i2___wmul	;wreg free
 12069  0003BC  C001  F063         	movff	?i2___wmul,_total_number
 12070  0003C0  C002  F064         	movff	?i2___wmul+1,_total_number+1
 12071                           
 12072                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 12073  0003C4  90D8               	bcf	status,0,c
 12074  0003C6  3467               	rlcf	_counter_step,w,c
 12075  0003C8  6ED9               	movwf	fsr2l,c
 12076  0003CA  3468               	rlcf	_counter_step+1,w,c
 12077  0003CC  6EDA               	movwf	fsr2h,c
 12078  0003CE  0E42               	movlw	low _compartment_number
 12079  0003D0  26D9               	addwf	fsr2l,f,c
 12080  0003D2  0E00               	movlw	high _compartment_number
 12081  0003D4  22DA               	addwfc	fsr2h,f,c
 12082  0003D6  CFDE F007          	movff	postinc2,??_is_valid
 12083  0003DA  CFDD F008          	movff	postdec2,??_is_valid+1
 12084  0003DE  90D8               	bcf	status,0,c
 12085  0003E0  3607               	rlcf	??_is_valid,f,c
 12086  0003E2  3608               	rlcf	??_is_valid+1,f,c
 12087  0003E4  0EB4               	movlw	low _B_array
 12088  0003E6  2407               	addwf	??_is_valid,w,c
 12089  0003E8  6ED9               	movwf	fsr2l,c
 12090  0003EA  0E01               	movlw	high _B_array
 12091  0003EC  2008               	addwfc	??_is_valid+1,w,c
 12092  0003EE  6EDA               	movwf	fsr2h,c
 12093  0003F0  C05F  FFDE         	movff	_B,postinc2
 12094  0003F4  C060  FFDD         	movff	_B+1,postdec2
 12095                           
 12096                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 12097  0003F8  90D8               	bcf	status,0,c
 12098  0003FA  3467               	rlcf	_counter_step,w,c
 12099  0003FC  6ED9               	movwf	fsr2l,c
 12100  0003FE  3468               	rlcf	_counter_step+1,w,c
 12101  000400  6EDA               	movwf	fsr2h,c
 12102  000402  0E42               	movlw	low _compartment_number
 12103  000404  26D9               	addwf	fsr2l,f,c
 12104  000406  0E00               	movlw	high _compartment_number
 12105  000408  22DA               	addwfc	fsr2h,f,c
 12106  00040A  CFDE F007          	movff	postinc2,??_is_valid
 12107  00040E  CFDD F008          	movff	postdec2,??_is_valid+1
 12108  000412  90D8               	bcf	status,0,c
 12109  000414  3607               	rlcf	??_is_valid,f,c
 12110  000416  3608               	rlcf	??_is_valid+1,f,c
 12111  000418  0E94               	movlw	low _N_array
 12112  00041A  2407               	addwf	??_is_valid,w,c
 12113  00041C  6ED9               	movwf	fsr2l,c
 12114  00041E  0E01               	movlw	high _N_array
 12115  000420  2008               	addwfc	??_is_valid+1,w,c
 12116  000422  6EDA               	movwf	fsr2h,c
 12117  000424  C05D  FFDE         	movff	_N,postinc2
 12118  000428  C05E  FFDD         	movff	_N+1,postdec2
 12119                           
 12120                           ;keypad.c: 76: }
 12121  00042C  0012               	return	
 12122  00042E                     i2l696:
 12123                           
 12124                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 12125  00042E  0E78               	movlw	low _current_set2
 12126  000430  6E01               	movwf	strcmp@s1,c
 12127  000432  0E00               	movlw	high _current_set2
 12128  000434  6E02               	movwf	strcmp@s1+1,c
 12129  000436  0EEE               	movlw	low STR_54
 12130  000438  6E03               	movwf	strcmp@s2,c
 12131  00043A  0EFF               	movlw	high STR_54
 12132  00043C  6E04               	movwf	strcmp@s2+1,c
 12133  00043E  ECEA  F01B         	call	_strcmp	;wreg free
 12134  000442  5001               	movf	?_strcmp,w,c
 12135  000444  1002               	iorwf	?_strcmp+1,w,c
 12136  000446  A4D8               	btfss	status,2,c
 12137  000448  D04C               	goto	i2l698
 12138                           
 12139                           ;keypad.c: 78: B = 2*number;
 12140  00044A  90D8               	bcf	status,0,c
 12141  00044C  347D               	rlcf	_number,w,c
 12142  00044E  6E5F               	movwf	_B,c
 12143  000450  347E               	rlcf	_number+1,w,c
 12144  000452  6E60               	movwf	_B+1,c
 12145                           
 12146                           ;keypad.c: 80: S = 1*number;
 12147  000454  C07D  F05B         	movff	_number,_S
 12148  000458  C07E  F05C         	movff	_number+1,_S+1
 12149                           
 12150                           ;keypad.c: 81: total_number = 3*number;
 12151  00045C  C07D  F001         	movff	_number,i2___wmul@multiplier
 12152  000460  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12153  000464  0E00               	movlw	0
 12154  000466  6E04               	movwf	i2___wmul@multiplicand+1,c
 12155  000468  0E03               	movlw	3
 12156  00046A  6E03               	movwf	i2___wmul@multiplicand,c
 12157  00046C  ECF0  F01C         	call	i2___wmul	;wreg free
 12158  000470  C001  F063         	movff	?i2___wmul,_total_number
 12159  000474  C002  F064         	movff	?i2___wmul+1,_total_number+1
 12160                           
 12161                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 12162  000478  90D8               	bcf	status,0,c
 12163  00047A  3467               	rlcf	_counter_step,w,c
 12164  00047C  6ED9               	movwf	fsr2l,c
 12165  00047E  3468               	rlcf	_counter_step+1,w,c
 12166  000480  6EDA               	movwf	fsr2h,c
 12167  000482  0E42               	movlw	low _compartment_number
 12168  000484  26D9               	addwf	fsr2l,f,c
 12169  000486  0E00               	movlw	high _compartment_number
 12170  000488  22DA               	addwfc	fsr2h,f,c
 12171  00048A  CFDE F007          	movff	postinc2,??_is_valid
 12172  00048E  CFDD F008          	movff	postdec2,??_is_valid+1
 12173  000492  90D8               	bcf	status,0,c
 12174  000494  3607               	rlcf	??_is_valid,f,c
 12175  000496  3608               	rlcf	??_is_valid+1,f,c
 12176  000498  0EB4               	movlw	low _B_array
 12177  00049A  2407               	addwf	??_is_valid,w,c
 12178  00049C  6ED9               	movwf	fsr2l,c
 12179  00049E  0E01               	movlw	high _B_array
 12180  0004A0  2008               	addwfc	??_is_valid+1,w,c
 12181  0004A2  6EDA               	movwf	fsr2h,c
 12182  0004A4  C05F  FFDE         	movff	_B,postinc2
 12183  0004A8  C060  FFDD         	movff	_B+1,postdec2
 12184                           
 12185                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 12186  0004AC  90D8               	bcf	status,0,c
 12187  0004AE  3467               	rlcf	_counter_step,w,c
 12188  0004B0  6ED9               	movwf	fsr2l,c
 12189  0004B2  3468               	rlcf	_counter_step+1,w,c
 12190  0004B4  6EDA               	movwf	fsr2h,c
 12191  0004B6  0E42               	movlw	low _compartment_number
 12192  0004B8  26D9               	addwf	fsr2l,f,c
 12193  0004BA  0E00               	movlw	high _compartment_number
 12194  0004BC  22DA               	addwfc	fsr2h,f,c
 12195  0004BE  CFDE F007          	movff	postinc2,??_is_valid
 12196  0004C2  CFDD F008          	movff	postdec2,??_is_valid+1
 12197  0004C6  90D8               	bcf	status,0,c
 12198  0004C8  3607               	rlcf	??_is_valid,f,c
 12199  0004CA  3608               	rlcf	??_is_valid+1,f,c
 12200  0004CC  0EA4               	movlw	low _S_array
 12201  0004CE  2407               	addwf	??_is_valid,w,c
 12202  0004D0  6ED9               	movwf	fsr2l,c
 12203  0004D2  0E01               	movlw	high _S_array
 12204  0004D4  2008               	addwfc	??_is_valid+1,w,c
 12205  0004D6  6EDA               	movwf	fsr2h,c
 12206  0004D8  C05B  FFDE         	movff	_S,postinc2
 12207  0004DC  C05C  FFDD         	movff	_S+1,postdec2
 12208                           
 12209                           ;keypad.c: 85: }
 12210  0004E0  0012               	return	
 12211  0004E2                     i2l698:
 12212                           
 12213                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 12214  0004E2  0E78               	movlw	low _current_set2
 12215  0004E4  6E01               	movwf	strcmp@s1,c
 12216  0004E6  0E00               	movlw	high _current_set2
 12217  0004E8  6E02               	movwf	strcmp@s1+1,c
 12218  0004EA  0EF2               	movlw	low STR_55
 12219  0004EC  6E03               	movwf	strcmp@s2,c
 12220  0004EE  0EFF               	movlw	high STR_55
 12221  0004F0  6E04               	movwf	strcmp@s2+1,c
 12222  0004F2  ECEA  F01B         	call	_strcmp	;wreg free
 12223  0004F6  5001               	movf	?_strcmp,w,c
 12224  0004F8  1002               	iorwf	?_strcmp+1,w,c
 12225  0004FA  A4D8               	btfss	status,2,c
 12226  0004FC  D04C               	goto	i2l700
 12227                           
 12228                           ;keypad.c: 87: B = 2*number;
 12229  0004FE  90D8               	bcf	status,0,c
 12230  000500  347D               	rlcf	_number,w,c
 12231  000502  6E5F               	movwf	_B,c
 12232  000504  347E               	rlcf	_number+1,w,c
 12233  000506  6E60               	movwf	_B+1,c
 12234                           
 12235                           ;keypad.c: 89: W = 1*number;
 12236  000508  C07D  F059         	movff	_number,_W
 12237  00050C  C07E  F05A         	movff	_number+1,_W+1
 12238                           
 12239                           ;keypad.c: 90: total_number = 3*number;
 12240  000510  C07D  F001         	movff	_number,i2___wmul@multiplier
 12241  000514  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12242  000518  0E00               	movlw	0
 12243  00051A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12244  00051C  0E03               	movlw	3
 12245  00051E  6E03               	movwf	i2___wmul@multiplicand,c
 12246  000520  ECF0  F01C         	call	i2___wmul	;wreg free
 12247  000524  C001  F063         	movff	?i2___wmul,_total_number
 12248  000528  C002  F064         	movff	?i2___wmul+1,_total_number+1
 12249                           
 12250                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 12251  00052C  90D8               	bcf	status,0,c
 12252  00052E  3467               	rlcf	_counter_step,w,c
 12253  000530  6ED9               	movwf	fsr2l,c
 12254  000532  3468               	rlcf	_counter_step+1,w,c
 12255  000534  6EDA               	movwf	fsr2h,c
 12256  000536  0E42               	movlw	low _compartment_number
 12257  000538  26D9               	addwf	fsr2l,f,c
 12258  00053A  0E00               	movlw	high _compartment_number
 12259  00053C  22DA               	addwfc	fsr2h,f,c
 12260  00053E  CFDE F007          	movff	postinc2,??_is_valid
 12261  000542  CFDD F008          	movff	postdec2,??_is_valid+1
 12262  000546  90D8               	bcf	status,0,c
 12263  000548  3607               	rlcf	??_is_valid,f,c
 12264  00054A  3608               	rlcf	??_is_valid+1,f,c
 12265  00054C  0EB4               	movlw	low _B_array
 12266  00054E  2407               	addwf	??_is_valid,w,c
 12267  000550  6ED9               	movwf	fsr2l,c
 12268  000552  0E01               	movlw	high _B_array
 12269  000554  2008               	addwfc	??_is_valid+1,w,c
 12270  000556  6EDA               	movwf	fsr2h,c
 12271  000558  C05F  FFDE         	movff	_B,postinc2
 12272  00055C  C060  FFDD         	movff	_B+1,postdec2
 12273                           
 12274                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 12275  000560  90D8               	bcf	status,0,c
 12276  000562  3467               	rlcf	_counter_step,w,c
 12277  000564  6ED9               	movwf	fsr2l,c
 12278  000566  3468               	rlcf	_counter_step+1,w,c
 12279  000568  6EDA               	movwf	fsr2h,c
 12280  00056A  0E42               	movlw	low _compartment_number
 12281  00056C  26D9               	addwf	fsr2l,f,c
 12282  00056E  0E00               	movlw	high _compartment_number
 12283  000570  22DA               	addwfc	fsr2h,f,c
 12284  000572  CFDE F007          	movff	postinc2,??_is_valid
 12285  000576  CFDD F008          	movff	postdec2,??_is_valid+1
 12286  00057A  90D8               	bcf	status,0,c
 12287  00057C  3607               	rlcf	??_is_valid,f,c
 12288  00057E  3608               	rlcf	??_is_valid+1,f,c
 12289  000580  0E84               	movlw	low _W_array
 12290  000582  2407               	addwf	??_is_valid,w,c
 12291  000584  6ED9               	movwf	fsr2l,c
 12292  000586  0E01               	movlw	high _W_array
 12293  000588  2008               	addwfc	??_is_valid+1,w,c
 12294  00058A  6EDA               	movwf	fsr2h,c
 12295  00058C  C059  FFDE         	movff	_W,postinc2
 12296  000590  C05A  FFDD         	movff	_W+1,postdec2
 12297                           
 12298                           ;keypad.c: 94: }
 12299  000594  0012               	return	
 12300  000596                     i2l700:
 12301                           
 12302                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 12303  000596  0E78               	movlw	low _current_set2
 12304  000598  6E01               	movwf	strcmp@s1,c
 12305  00059A  0E00               	movlw	high _current_set2
 12306  00059C  6E02               	movwf	strcmp@s1+1,c
 12307  00059E  0ECD               	movlw	low (STR_62+1)
 12308  0005A0  6E03               	movwf	strcmp@s2,c
 12309  0005A2  0EFF               	movlw	high (STR_62+1)
 12310  0005A4  6E04               	movwf	strcmp@s2+1,c
 12311  0005A6  ECEA  F01B         	call	_strcmp	;wreg free
 12312  0005AA  5001               	movf	?_strcmp,w,c
 12313  0005AC  1002               	iorwf	?_strcmp+1,w,c
 12314  0005AE  A4D8               	btfss	status,2,c
 12315  0005B0  D069               	goto	i2l702
 12316                           
 12317                           ;keypad.c: 96: B = 1*number;
 12318  0005B2  C07D  F05F         	movff	_number,_B
 12319  0005B6  C07E  F060         	movff	_number+1,_B+1
 12320                           
 12321                           ;keypad.c: 97: W = 1*number;
 12322  0005BA  C07D  F059         	movff	_number,_W
 12323  0005BE  C07E  F05A         	movff	_number+1,_W+1
 12324                           
 12325                           ;keypad.c: 98: N = 1*number;
 12326  0005C2  C07D  F05D         	movff	_number,_N
 12327  0005C6  C07E  F05E         	movff	_number+1,_N+1
 12328                           
 12329                           ;keypad.c: 99: total_number = 3*number;
 12330  0005CA  C07D  F001         	movff	_number,i2___wmul@multiplier
 12331  0005CE  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12332  0005D2  0E00               	movlw	0
 12333  0005D4  6E04               	movwf	i2___wmul@multiplicand+1,c
 12334  0005D6  0E03               	movlw	3
 12335  0005D8  6E03               	movwf	i2___wmul@multiplicand,c
 12336  0005DA  ECF0  F01C         	call	i2___wmul	;wreg free
 12337  0005DE  C001  F063         	movff	?i2___wmul,_total_number
 12338  0005E2  C002  F064         	movff	?i2___wmul+1,_total_number+1
 12339                           
 12340                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 12341  0005E6  90D8               	bcf	status,0,c
 12342  0005E8  3467               	rlcf	_counter_step,w,c
 12343  0005EA  6ED9               	movwf	fsr2l,c
 12344  0005EC  3468               	rlcf	_counter_step+1,w,c
 12345  0005EE  6EDA               	movwf	fsr2h,c
 12346  0005F0  0E42               	movlw	low _compartment_number
 12347  0005F2  26D9               	addwf	fsr2l,f,c
 12348  0005F4  0E00               	movlw	high _compartment_number
 12349  0005F6  22DA               	addwfc	fsr2h,f,c
 12350  0005F8  CFDE F007          	movff	postinc2,??_is_valid
 12351  0005FC  CFDD F008          	movff	postdec2,??_is_valid+1
 12352  000600  90D8               	bcf	status,0,c
 12353  000602  3607               	rlcf	??_is_valid,f,c
 12354  000604  3608               	rlcf	??_is_valid+1,f,c
 12355  000606  0EB4               	movlw	low _B_array
 12356  000608  2407               	addwf	??_is_valid,w,c
 12357  00060A  6ED9               	movwf	fsr2l,c
 12358  00060C  0E01               	movlw	high _B_array
 12359  00060E  2008               	addwfc	??_is_valid+1,w,c
 12360  000610  6EDA               	movwf	fsr2h,c
 12361  000612  C05F  FFDE         	movff	_B,postinc2
 12362  000616  C060  FFDD         	movff	_B+1,postdec2
 12363                           
 12364                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 12365  00061A  90D8               	bcf	status,0,c
 12366  00061C  3467               	rlcf	_counter_step,w,c
 12367  00061E  6ED9               	movwf	fsr2l,c
 12368  000620  3468               	rlcf	_counter_step+1,w,c
 12369  000622  6EDA               	movwf	fsr2h,c
 12370  000624  0E42               	movlw	low _compartment_number
 12371  000626  26D9               	addwf	fsr2l,f,c
 12372  000628  0E00               	movlw	high _compartment_number
 12373  00062A  22DA               	addwfc	fsr2h,f,c
 12374  00062C  CFDE F007          	movff	postinc2,??_is_valid
 12375  000630  CFDD F008          	movff	postdec2,??_is_valid+1
 12376  000634  90D8               	bcf	status,0,c
 12377  000636  3607               	rlcf	??_is_valid,f,c
 12378  000638  3608               	rlcf	??_is_valid+1,f,c
 12379  00063A  0E84               	movlw	low _W_array
 12380  00063C  2407               	addwf	??_is_valid,w,c
 12381  00063E  6ED9               	movwf	fsr2l,c
 12382  000640  0E01               	movlw	high _W_array
 12383  000642  2008               	addwfc	??_is_valid+1,w,c
 12384  000644  6EDA               	movwf	fsr2h,c
 12385  000646  C059  FFDE         	movff	_W,postinc2
 12386  00064A  C05A  FFDD         	movff	_W+1,postdec2
 12387                           
 12388                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 12389  00064E  90D8               	bcf	status,0,c
 12390  000650  3467               	rlcf	_counter_step,w,c
 12391  000652  6ED9               	movwf	fsr2l,c
 12392  000654  3468               	rlcf	_counter_step+1,w,c
 12393  000656  6EDA               	movwf	fsr2h,c
 12394  000658  0E42               	movlw	low _compartment_number
 12395  00065A  26D9               	addwf	fsr2l,f,c
 12396  00065C  0E00               	movlw	high _compartment_number
 12397  00065E  22DA               	addwfc	fsr2h,f,c
 12398  000660  CFDE F007          	movff	postinc2,??_is_valid
 12399  000664  CFDD F008          	movff	postdec2,??_is_valid+1
 12400  000668  90D8               	bcf	status,0,c
 12401  00066A  3607               	rlcf	??_is_valid,f,c
 12402  00066C  3608               	rlcf	??_is_valid+1,f,c
 12403  00066E  0E94               	movlw	low _N_array
 12404  000670  2407               	addwf	??_is_valid,w,c
 12405  000672  6ED9               	movwf	fsr2l,c
 12406  000674  0E01               	movlw	high _N_array
 12407  000676  2008               	addwfc	??_is_valid+1,w,c
 12408  000678  6EDA               	movwf	fsr2h,c
 12409  00067A  C05D  FFDE         	movff	_N,postinc2
 12410  00067E  C05E  FFDD         	movff	_N+1,postdec2
 12411                           
 12412                           ;keypad.c: 105: }
 12413  000682  0012               	return	
 12414  000684                     i2l702:
 12415                           
 12416                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 12417  000684  0E78               	movlw	low _current_set2
 12418  000686  6E01               	movwf	strcmp@s1,c
 12419  000688  0E00               	movlw	high _current_set2
 12420  00068A  6E02               	movwf	strcmp@s1+1,c
 12421  00068C  0ED7               	movlw	low (STR_61+1)
 12422  00068E  6E03               	movwf	strcmp@s2,c
 12423  000690  0EFF               	movlw	high (STR_61+1)
 12424  000692  6E04               	movwf	strcmp@s2+1,c
 12425  000694  ECEA  F01B         	call	_strcmp	;wreg free
 12426  000698  5001               	movf	?_strcmp,w,c
 12427  00069A  1002               	iorwf	?_strcmp+1,w,c
 12428  00069C  A4D8               	btfss	status,2,c
 12429  00069E  D069               	goto	i2l704
 12430                           
 12431                           ;keypad.c: 107: B = 1*number;
 12432  0006A0  C07D  F05F         	movff	_number,_B
 12433  0006A4  C07E  F060         	movff	_number+1,_B+1
 12434                           
 12435                           ;keypad.c: 108: S = 1*number;
 12436  0006A8  C07D  F05B         	movff	_number,_S
 12437  0006AC  C07E  F05C         	movff	_number+1,_S+1
 12438                           
 12439                           ;keypad.c: 109: N = 1*number;
 12440  0006B0  C07D  F05D         	movff	_number,_N
 12441  0006B4  C07E  F05E         	movff	_number+1,_N+1
 12442                           
 12443                           ;keypad.c: 110: total_number = 3*number;
 12444  0006B8  C07D  F001         	movff	_number,i2___wmul@multiplier
 12445  0006BC  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12446  0006C0  0E00               	movlw	0
 12447  0006C2  6E04               	movwf	i2___wmul@multiplicand+1,c
 12448  0006C4  0E03               	movlw	3
 12449  0006C6  6E03               	movwf	i2___wmul@multiplicand,c
 12450  0006C8  ECF0  F01C         	call	i2___wmul	;wreg free
 12451  0006CC  C001  F063         	movff	?i2___wmul,_total_number
 12452  0006D0  C002  F064         	movff	?i2___wmul+1,_total_number+1
 12453                           
 12454                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 12455  0006D4  90D8               	bcf	status,0,c
 12456  0006D6  3467               	rlcf	_counter_step,w,c
 12457  0006D8  6ED9               	movwf	fsr2l,c
 12458  0006DA  3468               	rlcf	_counter_step+1,w,c
 12459  0006DC  6EDA               	movwf	fsr2h,c
 12460  0006DE  0E42               	movlw	low _compartment_number
 12461  0006E0  26D9               	addwf	fsr2l,f,c
 12462  0006E2  0E00               	movlw	high _compartment_number
 12463  0006E4  22DA               	addwfc	fsr2h,f,c
 12464  0006E6  CFDE F007          	movff	postinc2,??_is_valid
 12465  0006EA  CFDD F008          	movff	postdec2,??_is_valid+1
 12466  0006EE  90D8               	bcf	status,0,c
 12467  0006F0  3607               	rlcf	??_is_valid,f,c
 12468  0006F2  3608               	rlcf	??_is_valid+1,f,c
 12469  0006F4  0EB4               	movlw	low _B_array
 12470  0006F6  2407               	addwf	??_is_valid,w,c
 12471  0006F8  6ED9               	movwf	fsr2l,c
 12472  0006FA  0E01               	movlw	high _B_array
 12473  0006FC  2008               	addwfc	??_is_valid+1,w,c
 12474  0006FE  6EDA               	movwf	fsr2h,c
 12475  000700  C05F  FFDE         	movff	_B,postinc2
 12476  000704  C060  FFDD         	movff	_B+1,postdec2
 12477                           
 12478                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 12479  000708  90D8               	bcf	status,0,c
 12480  00070A  3467               	rlcf	_counter_step,w,c
 12481  00070C  6ED9               	movwf	fsr2l,c
 12482  00070E  3468               	rlcf	_counter_step+1,w,c
 12483  000710  6EDA               	movwf	fsr2h,c
 12484  000712  0E42               	movlw	low _compartment_number
 12485  000714  26D9               	addwf	fsr2l,f,c
 12486  000716  0E00               	movlw	high _compartment_number
 12487  000718  22DA               	addwfc	fsr2h,f,c
 12488  00071A  CFDE F007          	movff	postinc2,??_is_valid
 12489  00071E  CFDD F008          	movff	postdec2,??_is_valid+1
 12490  000722  90D8               	bcf	status,0,c
 12491  000724  3607               	rlcf	??_is_valid,f,c
 12492  000726  3608               	rlcf	??_is_valid+1,f,c
 12493  000728  0EA4               	movlw	low _S_array
 12494  00072A  2407               	addwf	??_is_valid,w,c
 12495  00072C  6ED9               	movwf	fsr2l,c
 12496  00072E  0E01               	movlw	high _S_array
 12497  000730  2008               	addwfc	??_is_valid+1,w,c
 12498  000732  6EDA               	movwf	fsr2h,c
 12499  000734  C05B  FFDE         	movff	_S,postinc2
 12500  000738  C05C  FFDD         	movff	_S+1,postdec2
 12501                           
 12502                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
 12503  00073C  90D8               	bcf	status,0,c
 12504  00073E  3467               	rlcf	_counter_step,w,c
 12505  000740  6ED9               	movwf	fsr2l,c
 12506  000742  3468               	rlcf	_counter_step+1,w,c
 12507  000744  6EDA               	movwf	fsr2h,c
 12508  000746  0E42               	movlw	low _compartment_number
 12509  000748  26D9               	addwf	fsr2l,f,c
 12510  00074A  0E00               	movlw	high _compartment_number
 12511  00074C  22DA               	addwfc	fsr2h,f,c
 12512  00074E  CFDE F007          	movff	postinc2,??_is_valid
 12513  000752  CFDD F008          	movff	postdec2,??_is_valid+1
 12514  000756  90D8               	bcf	status,0,c
 12515  000758  3607               	rlcf	??_is_valid,f,c
 12516  00075A  3608               	rlcf	??_is_valid+1,f,c
 12517  00075C  0E94               	movlw	low _N_array
 12518  00075E  2407               	addwf	??_is_valid,w,c
 12519  000760  6ED9               	movwf	fsr2l,c
 12520  000762  0E01               	movlw	high _N_array
 12521  000764  2008               	addwfc	??_is_valid+1,w,c
 12522  000766  6EDA               	movwf	fsr2h,c
 12523  000768  C05D  FFDE         	movff	_N,postinc2
 12524  00076C  C05E  FFDD         	movff	_N+1,postdec2
 12525                           
 12526                           ;keypad.c: 116: }
 12527  000770  0012               	return	
 12528  000772                     i2l704:
 12529                           
 12530                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 12531  000772  0E78               	movlw	low _current_set2
 12532  000774  6E01               	movwf	strcmp@s1,c
 12533  000776  0E00               	movlw	high _current_set2
 12534  000778  6E02               	movwf	strcmp@s1+1,c
 12535  00077A  0EF6               	movlw	low STR_58
 12536  00077C  6E03               	movwf	strcmp@s2,c
 12537  00077E  0EFF               	movlw	high STR_58
 12538  000780  6E04               	movwf	strcmp@s2+1,c
 12539  000782  ECEA  F01B         	call	_strcmp	;wreg free
 12540  000786  5001               	movf	?_strcmp,w,c
 12541  000788  1002               	iorwf	?_strcmp+1,w,c
 12542  00078A  A4D8               	btfss	status,2,c
 12543  00078C  D04C               	goto	i2l706
 12544                           
 12545                           ;keypad.c: 118: B = 1*number;
 12546  00078E  C07D  F05F         	movff	_number,_B
 12547  000792  C07E  F060         	movff	_number+1,_B+1
 12548                           
 12549                           ;keypad.c: 119: W = 2*number;
 12550  000796  90D8               	bcf	status,0,c
 12551  000798  347D               	rlcf	_number,w,c
 12552  00079A  6E59               	movwf	_W,c
 12553  00079C  347E               	rlcf	_number+1,w,c
 12554  00079E  6E5A               	movwf	_W+1,c
 12555                           
 12556                           ;keypad.c: 120: total_number = 3*number;
 12557  0007A0  C07D  F001         	movff	_number,i2___wmul@multiplier
 12558  0007A4  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12559  0007A8  0E00               	movlw	0
 12560  0007AA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12561  0007AC  0E03               	movlw	3
 12562  0007AE  6E03               	movwf	i2___wmul@multiplicand,c
 12563  0007B0  ECF0  F01C         	call	i2___wmul	;wreg free
 12564  0007B4  C001  F063         	movff	?i2___wmul,_total_number
 12565  0007B8  C002  F064         	movff	?i2___wmul+1,_total_number+1
 12566                           
 12567                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 12568  0007BC  90D8               	bcf	status,0,c
 12569  0007BE  3467               	rlcf	_counter_step,w,c
 12570  0007C0  6ED9               	movwf	fsr2l,c
 12571  0007C2  3468               	rlcf	_counter_step+1,w,c
 12572  0007C4  6EDA               	movwf	fsr2h,c
 12573  0007C6  0E42               	movlw	low _compartment_number
 12574  0007C8  26D9               	addwf	fsr2l,f,c
 12575  0007CA  0E00               	movlw	high _compartment_number
 12576  0007CC  22DA               	addwfc	fsr2h,f,c
 12577  0007CE  CFDE F007          	movff	postinc2,??_is_valid
 12578  0007D2  CFDD F008          	movff	postdec2,??_is_valid+1
 12579  0007D6  90D8               	bcf	status,0,c
 12580  0007D8  3607               	rlcf	??_is_valid,f,c
 12581  0007DA  3608               	rlcf	??_is_valid+1,f,c
 12582  0007DC  0EB4               	movlw	low _B_array
 12583  0007DE  2407               	addwf	??_is_valid,w,c
 12584  0007E0  6ED9               	movwf	fsr2l,c
 12585  0007E2  0E01               	movlw	high _B_array
 12586  0007E4  2008               	addwfc	??_is_valid+1,w,c
 12587  0007E6  6EDA               	movwf	fsr2h,c
 12588  0007E8  C05F  FFDE         	movff	_B,postinc2
 12589  0007EC  C060  FFDD         	movff	_B+1,postdec2
 12590                           
 12591                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 12592  0007F0  90D8               	bcf	status,0,c
 12593  0007F2  3467               	rlcf	_counter_step,w,c
 12594  0007F4  6ED9               	movwf	fsr2l,c
 12595  0007F6  3468               	rlcf	_counter_step+1,w,c
 12596  0007F8  6EDA               	movwf	fsr2h,c
 12597  0007FA  0E42               	movlw	low _compartment_number
 12598  0007FC  26D9               	addwf	fsr2l,f,c
 12599  0007FE  0E00               	movlw	high _compartment_number
 12600  000800  22DA               	addwfc	fsr2h,f,c
 12601  000802  CFDE F007          	movff	postinc2,??_is_valid
 12602  000806  CFDD F008          	movff	postdec2,??_is_valid+1
 12603  00080A  90D8               	bcf	status,0,c
 12604  00080C  3607               	rlcf	??_is_valid,f,c
 12605  00080E  3608               	rlcf	??_is_valid+1,f,c
 12606  000810  0E84               	movlw	low _W_array
 12607  000812  2407               	addwf	??_is_valid,w,c
 12608  000814  6ED9               	movwf	fsr2l,c
 12609  000816  0E01               	movlw	high _W_array
 12610  000818  2008               	addwfc	??_is_valid+1,w,c
 12611  00081A  6EDA               	movwf	fsr2h,c
 12612  00081C  C059  FFDE         	movff	_W,postinc2
 12613  000820  C05A  FFDD         	movff	_W+1,postdec2
 12614                           
 12615                           ;keypad.c: 124: }
 12616  000824  0012               	return	
 12617  000826                     i2l706:
 12618                           
 12619                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 12620  000826  0E78               	movlw	low _current_set2
 12621  000828  6E01               	movwf	strcmp@s1,c
 12622  00082A  0E00               	movlw	high _current_set2
 12623  00082C  6E02               	movwf	strcmp@s1+1,c
 12624  00082E  0EDB               	movlw	low STR_59
 12625  000830  6E03               	movwf	strcmp@s2,c
 12626  000832  0EFF               	movlw	high STR_59
 12627  000834  6E04               	movwf	strcmp@s2+1,c
 12628  000836  ECEA  F01B         	call	_strcmp	;wreg free
 12629  00083A  5001               	movf	?_strcmp,w,c
 12630  00083C  1002               	iorwf	?_strcmp+1,w,c
 12631  00083E  A4D8               	btfss	status,2,c
 12632  000840  D06A               	goto	i2l708
 12633                           
 12634                           ;keypad.c: 126: B = 1*number;
 12635  000842  C07D  F05F         	movff	_number,_B
 12636  000846  C07E  F060         	movff	_number+1,_B+1
 12637                           
 12638                           ;keypad.c: 127: N = 1*number;
 12639  00084A  C07D  F05D         	movff	_number,_N
 12640  00084E  C07E  F05E         	movff	_number+1,_N+1
 12641                           
 12642                           ;keypad.c: 128: W = 2*number;
 12643  000852  90D8               	bcf	status,0,c
 12644  000854  347D               	rlcf	_number,w,c
 12645  000856  6E59               	movwf	_W,c
 12646  000858  347E               	rlcf	_number+1,w,c
 12647  00085A  6E5A               	movwf	_W+1,c
 12648                           
 12649                           ;keypad.c: 129: total_number = 4*number;
 12650  00085C  C07D  F007         	movff	_number,??_is_valid
 12651  000860  C07E  F008         	movff	_number+1,??_is_valid+1
 12652  000864  90D8               	bcf	status,0,c
 12653  000866  3607               	rlcf	??_is_valid,f,c
 12654  000868  3608               	rlcf	??_is_valid+1,f,c
 12655  00086A  90D8               	bcf	status,0,c
 12656  00086C  3607               	rlcf	??_is_valid,f,c
 12657  00086E  3608               	rlcf	??_is_valid+1,f,c
 12658  000870  C007  F063         	movff	??_is_valid,_total_number
 12659  000874  C008  F064         	movff	??_is_valid+1,_total_number+1
 12660                           
 12661                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 12662  000878  90D8               	bcf	status,0,c
 12663  00087A  3467               	rlcf	_counter_step,w,c
 12664  00087C  6ED9               	movwf	fsr2l,c
 12665  00087E  3468               	rlcf	_counter_step+1,w,c
 12666  000880  6EDA               	movwf	fsr2h,c
 12667  000882  0E42               	movlw	low _compartment_number
 12668  000884  26D9               	addwf	fsr2l,f,c
 12669  000886  0E00               	movlw	high _compartment_number
 12670  000888  22DA               	addwfc	fsr2h,f,c
 12671  00088A  CFDE F007          	movff	postinc2,??_is_valid
 12672  00088E  CFDD F008          	movff	postdec2,??_is_valid+1
 12673  000892  90D8               	bcf	status,0,c
 12674  000894  3607               	rlcf	??_is_valid,f,c
 12675  000896  3608               	rlcf	??_is_valid+1,f,c
 12676  000898  0EB4               	movlw	low _B_array
 12677  00089A  2407               	addwf	??_is_valid,w,c
 12678  00089C  6ED9               	movwf	fsr2l,c
 12679  00089E  0E01               	movlw	high _B_array
 12680  0008A0  2008               	addwfc	??_is_valid+1,w,c
 12681  0008A2  6EDA               	movwf	fsr2h,c
 12682  0008A4  C05F  FFDE         	movff	_B,postinc2
 12683  0008A8  C060  FFDD         	movff	_B+1,postdec2
 12684                           
 12685                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 12686  0008AC  90D8               	bcf	status,0,c
 12687  0008AE  3467               	rlcf	_counter_step,w,c
 12688  0008B0  6ED9               	movwf	fsr2l,c
 12689  0008B2  3468               	rlcf	_counter_step+1,w,c
 12690  0008B4  6EDA               	movwf	fsr2h,c
 12691  0008B6  0E42               	movlw	low _compartment_number
 12692  0008B8  26D9               	addwf	fsr2l,f,c
 12693  0008BA  0E00               	movlw	high _compartment_number
 12694  0008BC  22DA               	addwfc	fsr2h,f,c
 12695  0008BE  CFDE F007          	movff	postinc2,??_is_valid
 12696  0008C2  CFDD F008          	movff	postdec2,??_is_valid+1
 12697  0008C6  90D8               	bcf	status,0,c
 12698  0008C8  3607               	rlcf	??_is_valid,f,c
 12699  0008CA  3608               	rlcf	??_is_valid+1,f,c
 12700  0008CC  0E94               	movlw	low _N_array
 12701  0008CE  2407               	addwf	??_is_valid,w,c
 12702  0008D0  6ED9               	movwf	fsr2l,c
 12703  0008D2  0E01               	movlw	high _N_array
 12704  0008D4  2008               	addwfc	??_is_valid+1,w,c
 12705  0008D6  6EDA               	movwf	fsr2h,c
 12706  0008D8  C05D  FFDE         	movff	_N,postinc2
 12707  0008DC  C05E  FFDD         	movff	_N+1,postdec2
 12708                           
 12709                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 12710  0008E0  90D8               	bcf	status,0,c
 12711  0008E2  3467               	rlcf	_counter_step,w,c
 12712  0008E4  6ED9               	movwf	fsr2l,c
 12713  0008E6  3468               	rlcf	_counter_step+1,w,c
 12714  0008E8  6EDA               	movwf	fsr2h,c
 12715  0008EA  0E42               	movlw	low _compartment_number
 12716  0008EC  26D9               	addwf	fsr2l,f,c
 12717  0008EE  0E00               	movlw	high _compartment_number
 12718  0008F0  22DA               	addwfc	fsr2h,f,c
 12719  0008F2  CFDE F007          	movff	postinc2,??_is_valid
 12720  0008F6  CFDD F008          	movff	postdec2,??_is_valid+1
 12721  0008FA  90D8               	bcf	status,0,c
 12722  0008FC  3607               	rlcf	??_is_valid,f,c
 12723  0008FE  3608               	rlcf	??_is_valid+1,f,c
 12724  000900  0E84               	movlw	low _W_array
 12725  000902  2407               	addwf	??_is_valid,w,c
 12726  000904  6ED9               	movwf	fsr2l,c
 12727  000906  0E01               	movlw	high _W_array
 12728  000908  2008               	addwfc	??_is_valid+1,w,c
 12729  00090A  6EDA               	movwf	fsr2h,c
 12730  00090C  C059  FFDE         	movff	_W,postinc2
 12731  000910  C05A  FFDD         	movff	_W+1,postdec2
 12732                           
 12733                           ;keypad.c: 134: }
 12734  000914  0012               	return	
 12735  000916                     i2l708:
 12736                           
 12737                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 12738  000916  0E78               	movlw	low _current_set2
 12739  000918  6E01               	movwf	strcmp@s1,c
 12740  00091A  0E00               	movlw	high _current_set2
 12741  00091C  6E02               	movwf	strcmp@s1+1,c
 12742  00091E  0EE0               	movlw	low STR_60
 12743  000920  6E03               	movwf	strcmp@s2,c
 12744  000922  0EFF               	movlw	high STR_60
 12745  000924  6E04               	movwf	strcmp@s2+1,c
 12746  000926  ECEA  F01B         	call	_strcmp	;wreg free
 12747  00092A  5001               	movf	?_strcmp,w,c
 12748  00092C  1002               	iorwf	?_strcmp+1,w,c
 12749  00092E  A4D8               	btfss	status,2,c
 12750  000930  D06A               	goto	i2l710
 12751                           
 12752                           ;keypad.c: 136: B = 1*number;
 12753  000932  C07D  F05F         	movff	_number,_B
 12754  000936  C07E  F060         	movff	_number+1,_B+1
 12755                           
 12756                           ;keypad.c: 137: S = 1*number;
 12757  00093A  C07D  F05B         	movff	_number,_S
 12758  00093E  C07E  F05C         	movff	_number+1,_S+1
 12759                           
 12760                           ;keypad.c: 138: W = 2*number;
 12761  000942  90D8               	bcf	status,0,c
 12762  000944  347D               	rlcf	_number,w,c
 12763  000946  6E59               	movwf	_W,c
 12764  000948  347E               	rlcf	_number+1,w,c
 12765  00094A  6E5A               	movwf	_W+1,c
 12766                           
 12767                           ;keypad.c: 139: total_number = 4*number;
 12768  00094C  C07D  F007         	movff	_number,??_is_valid
 12769  000950  C07E  F008         	movff	_number+1,??_is_valid+1
 12770  000954  90D8               	bcf	status,0,c
 12771  000956  3607               	rlcf	??_is_valid,f,c
 12772  000958  3608               	rlcf	??_is_valid+1,f,c
 12773  00095A  90D8               	bcf	status,0,c
 12774  00095C  3607               	rlcf	??_is_valid,f,c
 12775  00095E  3608               	rlcf	??_is_valid+1,f,c
 12776  000960  C007  F063         	movff	??_is_valid,_total_number
 12777  000964  C008  F064         	movff	??_is_valid+1,_total_number+1
 12778                           
 12779                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 12780  000968  90D8               	bcf	status,0,c
 12781  00096A  3467               	rlcf	_counter_step,w,c
 12782  00096C  6ED9               	movwf	fsr2l,c
 12783  00096E  3468               	rlcf	_counter_step+1,w,c
 12784  000970  6EDA               	movwf	fsr2h,c
 12785  000972  0E42               	movlw	low _compartment_number
 12786  000974  26D9               	addwf	fsr2l,f,c
 12787  000976  0E00               	movlw	high _compartment_number
 12788  000978  22DA               	addwfc	fsr2h,f,c
 12789  00097A  CFDE F007          	movff	postinc2,??_is_valid
 12790  00097E  CFDD F008          	movff	postdec2,??_is_valid+1
 12791  000982  90D8               	bcf	status,0,c
 12792  000984  3607               	rlcf	??_is_valid,f,c
 12793  000986  3608               	rlcf	??_is_valid+1,f,c
 12794  000988  0EB4               	movlw	low _B_array
 12795  00098A  2407               	addwf	??_is_valid,w,c
 12796  00098C  6ED9               	movwf	fsr2l,c
 12797  00098E  0E01               	movlw	high _B_array
 12798  000990  2008               	addwfc	??_is_valid+1,w,c
 12799  000992  6EDA               	movwf	fsr2h,c
 12800  000994  C05F  FFDE         	movff	_B,postinc2
 12801  000998  C060  FFDD         	movff	_B+1,postdec2
 12802                           
 12803                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 12804  00099C  90D8               	bcf	status,0,c
 12805  00099E  3467               	rlcf	_counter_step,w,c
 12806  0009A0  6ED9               	movwf	fsr2l,c
 12807  0009A2  3468               	rlcf	_counter_step+1,w,c
 12808  0009A4  6EDA               	movwf	fsr2h,c
 12809  0009A6  0E42               	movlw	low _compartment_number
 12810  0009A8  26D9               	addwf	fsr2l,f,c
 12811  0009AA  0E00               	movlw	high _compartment_number
 12812  0009AC  22DA               	addwfc	fsr2h,f,c
 12813  0009AE  CFDE F007          	movff	postinc2,??_is_valid
 12814  0009B2  CFDD F008          	movff	postdec2,??_is_valid+1
 12815  0009B6  90D8               	bcf	status,0,c
 12816  0009B8  3607               	rlcf	??_is_valid,f,c
 12817  0009BA  3608               	rlcf	??_is_valid+1,f,c
 12818  0009BC  0EA4               	movlw	low _S_array
 12819  0009BE  2407               	addwf	??_is_valid,w,c
 12820  0009C0  6ED9               	movwf	fsr2l,c
 12821  0009C2  0E01               	movlw	high _S_array
 12822  0009C4  2008               	addwfc	??_is_valid+1,w,c
 12823  0009C6  6EDA               	movwf	fsr2h,c
 12824  0009C8  C05B  FFDE         	movff	_S,postinc2
 12825  0009CC  C05C  FFDD         	movff	_S+1,postdec2
 12826                           
 12827                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 12828  0009D0  90D8               	bcf	status,0,c
 12829  0009D2  3467               	rlcf	_counter_step,w,c
 12830  0009D4  6ED9               	movwf	fsr2l,c
 12831  0009D6  3468               	rlcf	_counter_step+1,w,c
 12832  0009D8  6EDA               	movwf	fsr2h,c
 12833  0009DA  0E42               	movlw	low _compartment_number
 12834  0009DC  26D9               	addwf	fsr2l,f,c
 12835  0009DE  0E00               	movlw	high _compartment_number
 12836  0009E0  22DA               	addwfc	fsr2h,f,c
 12837  0009E2  CFDE F007          	movff	postinc2,??_is_valid
 12838  0009E6  CFDD F008          	movff	postdec2,??_is_valid+1
 12839  0009EA  90D8               	bcf	status,0,c
 12840  0009EC  3607               	rlcf	??_is_valid,f,c
 12841  0009EE  3608               	rlcf	??_is_valid+1,f,c
 12842  0009F0  0E84               	movlw	low _W_array
 12843  0009F2  2407               	addwf	??_is_valid,w,c
 12844  0009F4  6ED9               	movwf	fsr2l,c
 12845  0009F6  0E01               	movlw	high _W_array
 12846  0009F8  2008               	addwfc	??_is_valid+1,w,c
 12847  0009FA  6EDA               	movwf	fsr2h,c
 12848  0009FC  C059  FFDE         	movff	_W,postinc2
 12849  000A00  C05A  FFDD         	movff	_W+1,postdec2
 12850                           
 12851                           ;keypad.c: 145: }
 12852  000A04  0012               	return	
 12853  000A06                     i2l710:
 12854                           
 12855                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 12856  000A06  0E78               	movlw	low _current_set2
 12857  000A08  6E01               	movwf	strcmp@s1,c
 12858  000A0A  0E00               	movlw	high _current_set2
 12859  000A0C  6E02               	movwf	strcmp@s1+1,c
 12860  000A0E  0ED6               	movlw	low STR_61
 12861  000A10  6E03               	movwf	strcmp@s2,c
 12862  000A12  0EFF               	movlw	high STR_61
 12863  000A14  6E04               	movwf	strcmp@s2+1,c
 12864  000A16  ECEA  F01B         	call	_strcmp	;wreg free
 12865  000A1A  5001               	movf	?_strcmp,w,c
 12866  000A1C  1002               	iorwf	?_strcmp+1,w,c
 12867  000A1E  A4D8               	btfss	status,2,c
 12868  000A20  D06A               	goto	i2l712
 12869                           
 12870                           ;keypad.c: 147: B = 2*number;
 12871  000A22  90D8               	bcf	status,0,c
 12872  000A24  347D               	rlcf	_number,w,c
 12873  000A26  6E5F               	movwf	_B,c
 12874  000A28  347E               	rlcf	_number+1,w,c
 12875  000A2A  6E60               	movwf	_B+1,c
 12876                           
 12877                           ;keypad.c: 148: S = 1*number;
 12878  000A2C  C07D  F05B         	movff	_number,_S
 12879  000A30  C07E  F05C         	movff	_number+1,_S+1
 12880                           
 12881                           ;keypad.c: 149: W = number;
 12882  000A34  C07D  F059         	movff	_number,_W
 12883  000A38  C07E  F05A         	movff	_number+1,_W+1
 12884                           
 12885                           ;keypad.c: 150: total_number = 4*number;
 12886  000A3C  C07D  F007         	movff	_number,??_is_valid
 12887  000A40  C07E  F008         	movff	_number+1,??_is_valid+1
 12888  000A44  90D8               	bcf	status,0,c
 12889  000A46  3607               	rlcf	??_is_valid,f,c
 12890  000A48  3608               	rlcf	??_is_valid+1,f,c
 12891  000A4A  90D8               	bcf	status,0,c
 12892  000A4C  3607               	rlcf	??_is_valid,f,c
 12893  000A4E  3608               	rlcf	??_is_valid+1,f,c
 12894  000A50  C007  F063         	movff	??_is_valid,_total_number
 12895  000A54  C008  F064         	movff	??_is_valid+1,_total_number+1
 12896                           
 12897                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 12898  000A58  90D8               	bcf	status,0,c
 12899  000A5A  3467               	rlcf	_counter_step,w,c
 12900  000A5C  6ED9               	movwf	fsr2l,c
 12901  000A5E  3468               	rlcf	_counter_step+1,w,c
 12902  000A60  6EDA               	movwf	fsr2h,c
 12903  000A62  0E42               	movlw	low _compartment_number
 12904  000A64  26D9               	addwf	fsr2l,f,c
 12905  000A66  0E00               	movlw	high _compartment_number
 12906  000A68  22DA               	addwfc	fsr2h,f,c
 12907  000A6A  CFDE F007          	movff	postinc2,??_is_valid
 12908  000A6E  CFDD F008          	movff	postdec2,??_is_valid+1
 12909  000A72  90D8               	bcf	status,0,c
 12910  000A74  3607               	rlcf	??_is_valid,f,c
 12911  000A76  3608               	rlcf	??_is_valid+1,f,c
 12912  000A78  0EB4               	movlw	low _B_array
 12913  000A7A  2407               	addwf	??_is_valid,w,c
 12914  000A7C  6ED9               	movwf	fsr2l,c
 12915  000A7E  0E01               	movlw	high _B_array
 12916  000A80  2008               	addwfc	??_is_valid+1,w,c
 12917  000A82  6EDA               	movwf	fsr2h,c
 12918  000A84  C05F  FFDE         	movff	_B,postinc2
 12919  000A88  C060  FFDD         	movff	_B+1,postdec2
 12920                           
 12921                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 12922  000A8C  90D8               	bcf	status,0,c
 12923  000A8E  3467               	rlcf	_counter_step,w,c
 12924  000A90  6ED9               	movwf	fsr2l,c
 12925  000A92  3468               	rlcf	_counter_step+1,w,c
 12926  000A94  6EDA               	movwf	fsr2h,c
 12927  000A96  0E42               	movlw	low _compartment_number
 12928  000A98  26D9               	addwf	fsr2l,f,c
 12929  000A9A  0E00               	movlw	high _compartment_number
 12930  000A9C  22DA               	addwfc	fsr2h,f,c
 12931  000A9E  CFDE F007          	movff	postinc2,??_is_valid
 12932  000AA2  CFDD F008          	movff	postdec2,??_is_valid+1
 12933  000AA6  90D8               	bcf	status,0,c
 12934  000AA8  3607               	rlcf	??_is_valid,f,c
 12935  000AAA  3608               	rlcf	??_is_valid+1,f,c
 12936  000AAC  0EA4               	movlw	low _S_array
 12937  000AAE  2407               	addwf	??_is_valid,w,c
 12938  000AB0  6ED9               	movwf	fsr2l,c
 12939  000AB2  0E01               	movlw	high _S_array
 12940  000AB4  2008               	addwfc	??_is_valid+1,w,c
 12941  000AB6  6EDA               	movwf	fsr2h,c
 12942  000AB8  C05B  FFDE         	movff	_S,postinc2
 12943  000ABC  C05C  FFDD         	movff	_S+1,postdec2
 12944                           
 12945                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 12946  000AC0  90D8               	bcf	status,0,c
 12947  000AC2  3467               	rlcf	_counter_step,w,c
 12948  000AC4  6ED9               	movwf	fsr2l,c
 12949  000AC6  3468               	rlcf	_counter_step+1,w,c
 12950  000AC8  6EDA               	movwf	fsr2h,c
 12951  000ACA  0E42               	movlw	low _compartment_number
 12952  000ACC  26D9               	addwf	fsr2l,f,c
 12953  000ACE  0E00               	movlw	high _compartment_number
 12954  000AD0  22DA               	addwfc	fsr2h,f,c
 12955  000AD2  CFDE F007          	movff	postinc2,??_is_valid
 12956  000AD6  CFDD F008          	movff	postdec2,??_is_valid+1
 12957  000ADA  90D8               	bcf	status,0,c
 12958  000ADC  3607               	rlcf	??_is_valid,f,c
 12959  000ADE  3608               	rlcf	??_is_valid+1,f,c
 12960  000AE0  0E84               	movlw	low _W_array
 12961  000AE2  2407               	addwf	??_is_valid,w,c
 12962  000AE4  6ED9               	movwf	fsr2l,c
 12963  000AE6  0E01               	movlw	high _W_array
 12964  000AE8  2008               	addwfc	??_is_valid+1,w,c
 12965  000AEA  6EDA               	movwf	fsr2h,c
 12966  000AEC  C059  FFDE         	movff	_W,postinc2
 12967  000AF0  C05A  FFDD         	movff	_W+1,postdec2
 12968                           
 12969                           ;keypad.c: 155: }
 12970  000AF4  0012               	return	
 12971  000AF6                     i2l712:
 12972                           
 12973                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 12974  000AF6  0E78               	movlw	low _current_set2
 12975  000AF8  6E01               	movwf	strcmp@s1,c
 12976  000AFA  0E00               	movlw	high _current_set2
 12977  000AFC  6E02               	movwf	strcmp@s1+1,c
 12978  000AFE  0ECC               	movlw	low STR_62
 12979  000B00  6E03               	movwf	strcmp@s2,c
 12980  000B02  0EFF               	movlw	high STR_62
 12981  000B04  6E04               	movwf	strcmp@s2+1,c
 12982  000B06  ECEA  F01B         	call	_strcmp	;wreg free
 12983  000B0A  5001               	movf	?_strcmp,w,c
 12984  000B0C  1002               	iorwf	?_strcmp+1,w,c
 12985  000B0E  A4D8               	btfss	status,2,c
 12986  000B10  D06A               	goto	i2l714
 12987                           
 12988                           ;keypad.c: 157: B = 2*number;
 12989  000B12  90D8               	bcf	status,0,c
 12990  000B14  347D               	rlcf	_number,w,c
 12991  000B16  6E5F               	movwf	_B,c
 12992  000B18  347E               	rlcf	_number+1,w,c
 12993  000B1A  6E60               	movwf	_B+1,c
 12994                           
 12995                           ;keypad.c: 158: N = 1*number;
 12996  000B1C  C07D  F05D         	movff	_number,_N
 12997  000B20  C07E  F05E         	movff	_number+1,_N+1
 12998                           
 12999                           ;keypad.c: 159: W = 1*number;
 13000  000B24  C07D  F059         	movff	_number,_W
 13001  000B28  C07E  F05A         	movff	_number+1,_W+1
 13002                           
 13003                           ;keypad.c: 160: total_number = 4*number;
 13004  000B2C  C07D  F007         	movff	_number,??_is_valid
 13005  000B30  C07E  F008         	movff	_number+1,??_is_valid+1
 13006  000B34  90D8               	bcf	status,0,c
 13007  000B36  3607               	rlcf	??_is_valid,f,c
 13008  000B38  3608               	rlcf	??_is_valid+1,f,c
 13009  000B3A  90D8               	bcf	status,0,c
 13010  000B3C  3607               	rlcf	??_is_valid,f,c
 13011  000B3E  3608               	rlcf	??_is_valid+1,f,c
 13012  000B40  C007  F063         	movff	??_is_valid,_total_number
 13013  000B44  C008  F064         	movff	??_is_valid+1,_total_number+1
 13014                           
 13015                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 13016  000B48  90D8               	bcf	status,0,c
 13017  000B4A  3467               	rlcf	_counter_step,w,c
 13018  000B4C  6ED9               	movwf	fsr2l,c
 13019  000B4E  3468               	rlcf	_counter_step+1,w,c
 13020  000B50  6EDA               	movwf	fsr2h,c
 13021  000B52  0E42               	movlw	low _compartment_number
 13022  000B54  26D9               	addwf	fsr2l,f,c
 13023  000B56  0E00               	movlw	high _compartment_number
 13024  000B58  22DA               	addwfc	fsr2h,f,c
 13025  000B5A  CFDE F007          	movff	postinc2,??_is_valid
 13026  000B5E  CFDD F008          	movff	postdec2,??_is_valid+1
 13027  000B62  90D8               	bcf	status,0,c
 13028  000B64  3607               	rlcf	??_is_valid,f,c
 13029  000B66  3608               	rlcf	??_is_valid+1,f,c
 13030  000B68  0EB4               	movlw	low _B_array
 13031  000B6A  2407               	addwf	??_is_valid,w,c
 13032  000B6C  6ED9               	movwf	fsr2l,c
 13033  000B6E  0E01               	movlw	high _B_array
 13034  000B70  2008               	addwfc	??_is_valid+1,w,c
 13035  000B72  6EDA               	movwf	fsr2h,c
 13036  000B74  C05F  FFDE         	movff	_B,postinc2
 13037  000B78  C060  FFDD         	movff	_B+1,postdec2
 13038                           
 13039                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 13040  000B7C  90D8               	bcf	status,0,c
 13041  000B7E  3467               	rlcf	_counter_step,w,c
 13042  000B80  6ED9               	movwf	fsr2l,c
 13043  000B82  3468               	rlcf	_counter_step+1,w,c
 13044  000B84  6EDA               	movwf	fsr2h,c
 13045  000B86  0E42               	movlw	low _compartment_number
 13046  000B88  26D9               	addwf	fsr2l,f,c
 13047  000B8A  0E00               	movlw	high _compartment_number
 13048  000B8C  22DA               	addwfc	fsr2h,f,c
 13049  000B8E  CFDE F007          	movff	postinc2,??_is_valid
 13050  000B92  CFDD F008          	movff	postdec2,??_is_valid+1
 13051  000B96  90D8               	bcf	status,0,c
 13052  000B98  3607               	rlcf	??_is_valid,f,c
 13053  000B9A  3608               	rlcf	??_is_valid+1,f,c
 13054  000B9C  0E94               	movlw	low _N_array
 13055  000B9E  2407               	addwf	??_is_valid,w,c
 13056  000BA0  6ED9               	movwf	fsr2l,c
 13057  000BA2  0E01               	movlw	high _N_array
 13058  000BA4  2008               	addwfc	??_is_valid+1,w,c
 13059  000BA6  6EDA               	movwf	fsr2h,c
 13060  000BA8  C05D  FFDE         	movff	_N,postinc2
 13061  000BAC  C05E  FFDD         	movff	_N+1,postdec2
 13062                           
 13063                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 13064  000BB0  90D8               	bcf	status,0,c
 13065  000BB2  3467               	rlcf	_counter_step,w,c
 13066  000BB4  6ED9               	movwf	fsr2l,c
 13067  000BB6  3468               	rlcf	_counter_step+1,w,c
 13068  000BB8  6EDA               	movwf	fsr2h,c
 13069  000BBA  0E42               	movlw	low _compartment_number
 13070  000BBC  26D9               	addwf	fsr2l,f,c
 13071  000BBE  0E00               	movlw	high _compartment_number
 13072  000BC0  22DA               	addwfc	fsr2h,f,c
 13073  000BC2  CFDE F007          	movff	postinc2,??_is_valid
 13074  000BC6  CFDD F008          	movff	postdec2,??_is_valid+1
 13075  000BCA  90D8               	bcf	status,0,c
 13076  000BCC  3607               	rlcf	??_is_valid,f,c
 13077  000BCE  3608               	rlcf	??_is_valid+1,f,c
 13078  000BD0  0E84               	movlw	low _W_array
 13079  000BD2  2407               	addwf	??_is_valid,w,c
 13080  000BD4  6ED9               	movwf	fsr2l,c
 13081  000BD6  0E01               	movlw	high _W_array
 13082  000BD8  2008               	addwfc	??_is_valid+1,w,c
 13083  000BDA  6EDA               	movwf	fsr2h,c
 13084  000BDC  C059  FFDE         	movff	_W,postinc2
 13085  000BE0  C05A  FFDD         	movff	_W+1,postdec2
 13086                           
 13087                           ;keypad.c: 165: }
 13088  000BE4  0012               	return	
 13089  000BE6                     i2l714:
 13090                           
 13091                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 13092  000BE6  0E78               	movlw	low _current_set2
 13093  000BE8  6E01               	movwf	strcmp@s1,c
 13094  000BEA  0E00               	movlw	high _current_set2
 13095  000BEC  6E02               	movwf	strcmp@s1+1,c
 13096  000BEE  0ED1               	movlw	low STR_63
 13097  000BF0  6E03               	movwf	strcmp@s2,c
 13098  000BF2  0EFF               	movlw	high STR_63
 13099  000BF4  6E04               	movwf	strcmp@s2+1,c
 13100  000BF6  ECEA  F01B         	call	_strcmp	;wreg free
 13101  000BFA  5001               	movf	?_strcmp,w,c
 13102  000BFC  1002               	iorwf	?_strcmp+1,w,c
 13103  000BFE  A4D8               	btfss	status,2,c
 13104  000C00  D06A               	goto	i2l716
 13105                           
 13106                           ;keypad.c: 167: B = 1*number;
 13107  000C02  C07D  F05F         	movff	_number,_B
 13108  000C06  C07E  F060         	movff	_number+1,_B+1
 13109                           
 13110                           ;keypad.c: 168: N = 2*number;
 13111  000C0A  90D8               	bcf	status,0,c
 13112  000C0C  347D               	rlcf	_number,w,c
 13113  000C0E  6E5D               	movwf	_N,c
 13114  000C10  347E               	rlcf	_number+1,w,c
 13115  000C12  6E5E               	movwf	_N+1,c
 13116                           
 13117                           ;keypad.c: 169: W = 1*number;
 13118  000C14  C07D  F059         	movff	_number,_W
 13119  000C18  C07E  F05A         	movff	_number+1,_W+1
 13120                           
 13121                           ;keypad.c: 170: total_number = 4*number;
 13122  000C1C  C07D  F007         	movff	_number,??_is_valid
 13123  000C20  C07E  F008         	movff	_number+1,??_is_valid+1
 13124  000C24  90D8               	bcf	status,0,c
 13125  000C26  3607               	rlcf	??_is_valid,f,c
 13126  000C28  3608               	rlcf	??_is_valid+1,f,c
 13127  000C2A  90D8               	bcf	status,0,c
 13128  000C2C  3607               	rlcf	??_is_valid,f,c
 13129  000C2E  3608               	rlcf	??_is_valid+1,f,c
 13130  000C30  C007  F063         	movff	??_is_valid,_total_number
 13131  000C34  C008  F064         	movff	??_is_valid+1,_total_number+1
 13132                           
 13133                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 13134  000C38  90D8               	bcf	status,0,c
 13135  000C3A  3467               	rlcf	_counter_step,w,c
 13136  000C3C  6ED9               	movwf	fsr2l,c
 13137  000C3E  3468               	rlcf	_counter_step+1,w,c
 13138  000C40  6EDA               	movwf	fsr2h,c
 13139  000C42  0E42               	movlw	low _compartment_number
 13140  000C44  26D9               	addwf	fsr2l,f,c
 13141  000C46  0E00               	movlw	high _compartment_number
 13142  000C48  22DA               	addwfc	fsr2h,f,c
 13143  000C4A  CFDE F007          	movff	postinc2,??_is_valid
 13144  000C4E  CFDD F008          	movff	postdec2,??_is_valid+1
 13145  000C52  90D8               	bcf	status,0,c
 13146  000C54  3607               	rlcf	??_is_valid,f,c
 13147  000C56  3608               	rlcf	??_is_valid+1,f,c
 13148  000C58  0EB4               	movlw	low _B_array
 13149  000C5A  2407               	addwf	??_is_valid,w,c
 13150  000C5C  6ED9               	movwf	fsr2l,c
 13151  000C5E  0E01               	movlw	high _B_array
 13152  000C60  2008               	addwfc	??_is_valid+1,w,c
 13153  000C62  6EDA               	movwf	fsr2h,c
 13154  000C64  C05F  FFDE         	movff	_B,postinc2
 13155  000C68  C060  FFDD         	movff	_B+1,postdec2
 13156                           
 13157                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 13158  000C6C  90D8               	bcf	status,0,c
 13159  000C6E  3467               	rlcf	_counter_step,w,c
 13160  000C70  6ED9               	movwf	fsr2l,c
 13161  000C72  3468               	rlcf	_counter_step+1,w,c
 13162  000C74  6EDA               	movwf	fsr2h,c
 13163  000C76  0E42               	movlw	low _compartment_number
 13164  000C78  26D9               	addwf	fsr2l,f,c
 13165  000C7A  0E00               	movlw	high _compartment_number
 13166  000C7C  22DA               	addwfc	fsr2h,f,c
 13167  000C7E  CFDE F007          	movff	postinc2,??_is_valid
 13168  000C82  CFDD F008          	movff	postdec2,??_is_valid+1
 13169  000C86  90D8               	bcf	status,0,c
 13170  000C88  3607               	rlcf	??_is_valid,f,c
 13171  000C8A  3608               	rlcf	??_is_valid+1,f,c
 13172  000C8C  0E94               	movlw	low _N_array
 13173  000C8E  2407               	addwf	??_is_valid,w,c
 13174  000C90  6ED9               	movwf	fsr2l,c
 13175  000C92  0E01               	movlw	high _N_array
 13176  000C94  2008               	addwfc	??_is_valid+1,w,c
 13177  000C96  6EDA               	movwf	fsr2h,c
 13178  000C98  C05D  FFDE         	movff	_N,postinc2
 13179  000C9C  C05E  FFDD         	movff	_N+1,postdec2
 13180                           
 13181                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 13182  000CA0  90D8               	bcf	status,0,c
 13183  000CA2  3467               	rlcf	_counter_step,w,c
 13184  000CA4  6ED9               	movwf	fsr2l,c
 13185  000CA6  3468               	rlcf	_counter_step+1,w,c
 13186  000CA8  6EDA               	movwf	fsr2h,c
 13187  000CAA  0E42               	movlw	low _compartment_number
 13188  000CAC  26D9               	addwf	fsr2l,f,c
 13189  000CAE  0E00               	movlw	high _compartment_number
 13190  000CB0  22DA               	addwfc	fsr2h,f,c
 13191  000CB2  CFDE F007          	movff	postinc2,??_is_valid
 13192  000CB6  CFDD F008          	movff	postdec2,??_is_valid+1
 13193  000CBA  90D8               	bcf	status,0,c
 13194  000CBC  3607               	rlcf	??_is_valid,f,c
 13195  000CBE  3608               	rlcf	??_is_valid+1,f,c
 13196  000CC0  0E84               	movlw	low _W_array
 13197  000CC2  2407               	addwf	??_is_valid,w,c
 13198  000CC4  6ED9               	movwf	fsr2l,c
 13199  000CC6  0E01               	movlw	high _W_array
 13200  000CC8  2008               	addwfc	??_is_valid+1,w,c
 13201  000CCA  6EDA               	movwf	fsr2h,c
 13202  000CCC  C059  FFDE         	movff	_W,postinc2
 13203  000CD0  C05A  FFDD         	movff	_W+1,postdec2
 13204                           
 13205                           ;keypad.c: 175: }
 13206  000CD4  0012               	return	
 13207  000CD6                     i2l716:
 13208                           
 13209                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 13210  000CD6  0E78               	movlw	low _current_set2
 13211  000CD8  6E01               	movwf	strcmp@s1,c
 13212  000CDA  0E00               	movlw	high _current_set2
 13213  000CDC  6E02               	movwf	strcmp@s1+1,c
 13214  000CDE  0EC7               	movlw	low STR_64
 13215  000CE0  6E03               	movwf	strcmp@s2,c
 13216  000CE2  0EFF               	movlw	high STR_64
 13217  000CE4  6E04               	movwf	strcmp@s2+1,c
 13218  000CE6  ECEA  F01B         	call	_strcmp	;wreg free
 13219  000CEA  5001               	movf	?_strcmp,w,c
 13220  000CEC  1002               	iorwf	?_strcmp+1,w,c
 13221  000CEE  A4D8               	btfss	status,2,c
 13222  000CF0  D055               	goto	i2l718
 13223                           
 13224                           ;keypad.c: 177: B = 1*number;
 13225  000CF2  C07D  F05F         	movff	_number,_B
 13226  000CF6  C07E  F060         	movff	_number+1,_B+1
 13227                           
 13228                           ;keypad.c: 178: N = 3*number;
 13229  000CFA  C07D  F001         	movff	_number,i2___wmul@multiplier
 13230  000CFE  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 13231  000D02  0E00               	movlw	0
 13232  000D04  6E04               	movwf	i2___wmul@multiplicand+1,c
 13233  000D06  0E03               	movlw	3
 13234  000D08  6E03               	movwf	i2___wmul@multiplicand,c
 13235  000D0A  ECF0  F01C         	call	i2___wmul	;wreg free
 13236  000D0E  C001  F05D         	movff	?i2___wmul,_N
 13237  000D12  C002  F05E         	movff	?i2___wmul+1,_N+1
 13238                           
 13239                           ;keypad.c: 179: total_number = 4*number;
 13240  000D16  C07D  F007         	movff	_number,??_is_valid
 13241  000D1A  C07E  F008         	movff	_number+1,??_is_valid+1
 13242  000D1E  90D8               	bcf	status,0,c
 13243  000D20  3607               	rlcf	??_is_valid,f,c
 13244  000D22  3608               	rlcf	??_is_valid+1,f,c
 13245  000D24  90D8               	bcf	status,0,c
 13246  000D26  3607               	rlcf	??_is_valid,f,c
 13247  000D28  3608               	rlcf	??_is_valid+1,f,c
 13248  000D2A  C007  F063         	movff	??_is_valid,_total_number
 13249  000D2E  C008  F064         	movff	??_is_valid+1,_total_number+1
 13250                           
 13251                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 13252  000D32  90D8               	bcf	status,0,c
 13253  000D34  3467               	rlcf	_counter_step,w,c
 13254  000D36  6ED9               	movwf	fsr2l,c
 13255  000D38  3468               	rlcf	_counter_step+1,w,c
 13256  000D3A  6EDA               	movwf	fsr2h,c
 13257  000D3C  0E42               	movlw	low _compartment_number
 13258  000D3E  26D9               	addwf	fsr2l,f,c
 13259  000D40  0E00               	movlw	high _compartment_number
 13260  000D42  22DA               	addwfc	fsr2h,f,c
 13261  000D44  CFDE F007          	movff	postinc2,??_is_valid
 13262  000D48  CFDD F008          	movff	postdec2,??_is_valid+1
 13263  000D4C  90D8               	bcf	status,0,c
 13264  000D4E  3607               	rlcf	??_is_valid,f,c
 13265  000D50  3608               	rlcf	??_is_valid+1,f,c
 13266  000D52  0EB4               	movlw	low _B_array
 13267  000D54  2407               	addwf	??_is_valid,w,c
 13268  000D56  6ED9               	movwf	fsr2l,c
 13269  000D58  0E01               	movlw	high _B_array
 13270  000D5A  2008               	addwfc	??_is_valid+1,w,c
 13271  000D5C  6EDA               	movwf	fsr2h,c
 13272  000D5E  C05F  FFDE         	movff	_B,postinc2
 13273  000D62  C060  FFDD         	movff	_B+1,postdec2
 13274                           
 13275                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 13276  000D66  90D8               	bcf	status,0,c
 13277  000D68  3467               	rlcf	_counter_step,w,c
 13278  000D6A  6ED9               	movwf	fsr2l,c
 13279  000D6C  3468               	rlcf	_counter_step+1,w,c
 13280  000D6E  6EDA               	movwf	fsr2h,c
 13281  000D70  0E42               	movlw	low _compartment_number
 13282  000D72  26D9               	addwf	fsr2l,f,c
 13283  000D74  0E00               	movlw	high _compartment_number
 13284  000D76  22DA               	addwfc	fsr2h,f,c
 13285  000D78  CFDE F007          	movff	postinc2,??_is_valid
 13286  000D7C  CFDD F008          	movff	postdec2,??_is_valid+1
 13287  000D80  90D8               	bcf	status,0,c
 13288  000D82  3607               	rlcf	??_is_valid,f,c
 13289  000D84  3608               	rlcf	??_is_valid+1,f,c
 13290  000D86  0E94               	movlw	low _N_array
 13291  000D88  2407               	addwf	??_is_valid,w,c
 13292  000D8A  6ED9               	movwf	fsr2l,c
 13293  000D8C  0E01               	movlw	high _N_array
 13294  000D8E  2008               	addwfc	??_is_valid+1,w,c
 13295  000D90  6EDA               	movwf	fsr2h,c
 13296  000D92  C05D  FFDE         	movff	_N,postinc2
 13297  000D96  C05E  FFDD         	movff	_N+1,postdec2
 13298                           
 13299                           ;keypad.c: 184: }
 13300  000D9A  0012               	return	
 13301  000D9C                     i2l718:
 13302                           
 13303                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 13304  000D9C  0E78               	movlw	low _current_set2
 13305  000D9E  6E01               	movwf	strcmp@s1,c
 13306  000DA0  0E00               	movlw	high _current_set2
 13307  000DA2  6E02               	movwf	strcmp@s1+1,c
 13308  000DA4  0EE5               	movlw	low STR_65
 13309  000DA6  6E03               	movwf	strcmp@s2,c
 13310  000DA8  0EFF               	movlw	high STR_65
 13311  000DAA  6E04               	movwf	strcmp@s2+1,c
 13312  000DAC  ECEA  F01B         	call	_strcmp	;wreg free
 13313  000DB0  5001               	movf	?_strcmp,w,c
 13314  000DB2  1002               	iorwf	?_strcmp+1,w,c
 13315  000DB4  A4D8               	btfss	status,2,c
 13316  000DB6  0012               	return	
 13317                           
 13318                           ;keypad.c: 186: B = 1*number;
 13319  000DB8  C07D  F05F         	movff	_number,_B
 13320  000DBC  C07E  F060         	movff	_number+1,_B+1
 13321                           
 13322                           ;keypad.c: 187: W = 3*number;
 13323  000DC0  C07D  F001         	movff	_number,i2___wmul@multiplier
 13324  000DC4  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 13325  000DC8  0E00               	movlw	0
 13326  000DCA  6E04               	movwf	i2___wmul@multiplicand+1,c
 13327  000DCC  0E03               	movlw	3
 13328  000DCE  6E03               	movwf	i2___wmul@multiplicand,c
 13329  000DD0  ECF0  F01C         	call	i2___wmul	;wreg free
 13330  000DD4  C001  F059         	movff	?i2___wmul,_W
 13331  000DD8  C002  F05A         	movff	?i2___wmul+1,_W+1
 13332                           
 13333                           ;keypad.c: 188: total_number = 4*number;
 13334  000DDC  C07D  F007         	movff	_number,??_is_valid
 13335  000DE0  C07E  F008         	movff	_number+1,??_is_valid+1
 13336  000DE4  90D8               	bcf	status,0,c
 13337  000DE6  3607               	rlcf	??_is_valid,f,c
 13338  000DE8  3608               	rlcf	??_is_valid+1,f,c
 13339  000DEA  90D8               	bcf	status,0,c
 13340  000DEC  3607               	rlcf	??_is_valid,f,c
 13341  000DEE  3608               	rlcf	??_is_valid+1,f,c
 13342  000DF0  C007  F063         	movff	??_is_valid,_total_number
 13343  000DF4  C008  F064         	movff	??_is_valid+1,_total_number+1
 13344                           
 13345                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 13346  000DF8  90D8               	bcf	status,0,c
 13347  000DFA  3467               	rlcf	_counter_step,w,c
 13348  000DFC  6ED9               	movwf	fsr2l,c
 13349  000DFE  3468               	rlcf	_counter_step+1,w,c
 13350  000E00  6EDA               	movwf	fsr2h,c
 13351  000E02  0E42               	movlw	low _compartment_number
 13352  000E04  26D9               	addwf	fsr2l,f,c
 13353  000E06  0E00               	movlw	high _compartment_number
 13354  000E08  22DA               	addwfc	fsr2h,f,c
 13355  000E0A  CFDE F007          	movff	postinc2,??_is_valid
 13356  000E0E  CFDD F008          	movff	postdec2,??_is_valid+1
 13357  000E12  90D8               	bcf	status,0,c
 13358  000E14  3607               	rlcf	??_is_valid,f,c
 13359  000E16  3608               	rlcf	??_is_valid+1,f,c
 13360  000E18  0EB4               	movlw	low _B_array
 13361  000E1A  2407               	addwf	??_is_valid,w,c
 13362  000E1C  6ED9               	movwf	fsr2l,c
 13363  000E1E  0E01               	movlw	high _B_array
 13364  000E20  2008               	addwfc	??_is_valid+1,w,c
 13365  000E22  6EDA               	movwf	fsr2h,c
 13366  000E24  C05F  FFDE         	movff	_B,postinc2
 13367  000E28  C060  FFDD         	movff	_B+1,postdec2
 13368                           
 13369                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 13370  000E2C  90D8               	bcf	status,0,c
 13371  000E2E  3467               	rlcf	_counter_step,w,c
 13372  000E30  6ED9               	movwf	fsr2l,c
 13373  000E32  3468               	rlcf	_counter_step+1,w,c
 13374  000E34  6EDA               	movwf	fsr2h,c
 13375  000E36  0E42               	movlw	low _compartment_number
 13376  000E38  26D9               	addwf	fsr2l,f,c
 13377  000E3A  0E00               	movlw	high _compartment_number
 13378  000E3C  22DA               	addwfc	fsr2h,f,c
 13379  000E3E  CFDE F007          	movff	postinc2,??_is_valid
 13380  000E42  CFDD F008          	movff	postdec2,??_is_valid+1
 13381  000E46  90D8               	bcf	status,0,c
 13382  000E48  3607               	rlcf	??_is_valid,f,c
 13383  000E4A  3608               	rlcf	??_is_valid+1,f,c
 13384  000E4C  0E84               	movlw	low _W_array
 13385  000E4E  2407               	addwf	??_is_valid,w,c
 13386  000E50  6ED9               	movwf	fsr2l,c
 13387  000E52  0E01               	movlw	high _W_array
 13388  000E54  2008               	addwfc	??_is_valid+1,w,c
 13389  000E56  6EDA               	movwf	fsr2h,c
 13390  000E58  C059  FFDE         	movff	_W,postinc2
 13391  000E5C  C05A  FFDD         	movff	_W+1,postdec2
 13392  000E60  0012               	return	
 13393  000E62                     __end_of_is_valid:
 13394                           	opt stack 0
 13395                           pclatu	equ	0xFFB
 13396                           pclath	equ	0xFFA
 13397                           tblptru	equ	0xFF8
 13398                           tblptrh	equ	0xFF7
 13399                           tblptrl	equ	0xFF6
 13400                           tablat	equ	0xFF5
 13401                           prodh	equ	0xFF4
 13402                           prodl	equ	0xFF3
 13403                           intcon	equ	0xFF2
 13404                           intcon3	equ	0xFF0
 13405                           indf0	equ	0xFEF
 13406                           postinc0	equ	0xFEE
 13407                           fsr0h	equ	0xFEA
 13408                           fsr0l	equ	0xFE9
 13409                           wreg	equ	0xFE8
 13410                           indf1	equ	0xFE7
 13411                           postdec1	equ	0xFE5
 13412                           fsr1h	equ	0xFE2
 13413                           fsr1l	equ	0xFE1
 13414                           indf2	equ	0xFDF
 13415                           postinc2	equ	0xFDE
 13416                           postdec2	equ	0xFDD
 13417                           fsr2h	equ	0xFDA
 13418                           fsr2l	equ	0xFD9
 13419                           status	equ	0xFD8
 13420                           
 13421 ;; *************** function i2___wmul *****************
 13422 ;; Defined at:
 13423 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 13424 ;; Parameters:    Size  Location     Type
 13425 ;;  multiplier      2    0[COMRAM] unsigned int 
 13426 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;  __wmul          2    4[COMRAM] unsigned int 
 13429 ;; Return value:  Size  Location     Type
 13430 ;;                  2    0[COMRAM] unsigned int 
 13431 ;; Registers used:
 13432 ;;		wreg, status,2, status,0, prodl, prodh
 13433 ;; Tracked objects:
 13434 ;;		On entry : 0/0
 13435 ;;		On exit  : 0/0
 13436 ;;		Unchanged: 0/0
 13437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13441 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13442 ;;Total ram usage:        6 bytes
 13443 ;; Hardware stack levels used:    1
 13444 ;; This function calls:
 13445 ;;		Nothing
 13446 ;; This function is called by:
 13447 ;;		_interruptHandler
 13448 ;;		_is_valid
 13449 ;;		i2_printf
 13450 ;; This function uses a non-reentrant model
 13451 ;;
 13452                           
 13453                           	psect	text43
 13454  0039E0                     __ptext43:
 13455                           	opt stack 0
 13456  0039E0                     i2___wmul:
 13457                           	opt stack 25
 13458                           
 13459                           ;incstack = 0
 13460  0039E0  5001               	movf	i2___wmul@multiplier,w,c
 13461  0039E2  0203               	mulwf	i2___wmul@multiplicand,c
 13462  0039E4  CFF3 F005          	movff	prodl,i2___wmul@product
 13463  0039E8  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13464  0039EC  5001               	movf	i2___wmul@multiplier,w,c
 13465  0039EE  0204               	mulwf	i2___wmul@multiplicand+1,c
 13466  0039F0  50F3               	movf	prodl,w,c
 13467  0039F2  2606               	addwf	i2___wmul@product+1,f,c
 13468  0039F4  5002               	movf	i2___wmul@multiplier+1,w,c
 13469  0039F6  0203               	mulwf	i2___wmul@multiplicand,c
 13470  0039F8  50F3               	movf	prodl,w,c
 13471  0039FA  2606               	addwf	i2___wmul@product+1,f,c
 13472  0039FC  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13473  003A00  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13474  003A04  0012               	return	
 13475  003A06                     __end_ofi2___wmul:
 13476                           	opt stack 0
 13477                           pclatu	equ	0xFFB
 13478                           pclath	equ	0xFFA
 13479                           tblptru	equ	0xFF8
 13480                           tblptrh	equ	0xFF7
 13481                           tblptrl	equ	0xFF6
 13482                           tablat	equ	0xFF5
 13483                           prodh	equ	0xFF4
 13484                           prodl	equ	0xFF3
 13485                           intcon	equ	0xFF2
 13486                           intcon3	equ	0xFF0
 13487                           indf0	equ	0xFEF
 13488                           postinc0	equ	0xFEE
 13489                           fsr0h	equ	0xFEA
 13490                           fsr0l	equ	0xFE9
 13491                           wreg	equ	0xFE8
 13492                           indf1	equ	0xFE7
 13493                           postdec1	equ	0xFE5
 13494                           fsr1h	equ	0xFE2
 13495                           fsr1l	equ	0xFE1
 13496                           indf2	equ	0xFDF
 13497                           postinc2	equ	0xFDE
 13498                           postdec2	equ	0xFDD
 13499                           fsr2h	equ	0xFDA
 13500                           fsr2l	equ	0xFD9
 13501                           status	equ	0xFD8
 13502                           
 13503 ;; *************** function _strcmp *****************
 13504 ;; Defined at:
 13505 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 13506 ;; Parameters:    Size  Location     Type
 13507 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 13508 ;;		 -> current_set2(5), 
 13509 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 13510 ;;		 -> STR_65(5), STR_64(5), STR_63(5), STR_62(5), 
 13511 ;;		 -> STR_61(5), STR_60(5), STR_59(5), STR_58(4), 
 13512 ;;		 -> STR_57(4), STR_56(4), STR_55(4), STR_54(4), 
 13513 ;;		 -> STR_53(4), STR_52(3), STR_51(3), STR_50(3), 
 13514 ;;		 -> STR_49(2), STR_48(2), STR_47(2), STR_46(2), 
 13515 ;; Auto vars:     Size  Location     Type
 13516 ;;  r               1    5[COMRAM] char 
 13517 ;; Return value:  Size  Location     Type
 13518 ;;                  2    0[COMRAM] int 
 13519 ;; Registers used:
 13520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13521 ;; Tracked objects:
 13522 ;;		On entry : 0/0
 13523 ;;		On exit  : 0/0
 13524 ;;		Unchanged: 0/0
 13525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13528 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13530 ;;Total ram usage:        6 bytes
 13531 ;; Hardware stack levels used:    1
 13532 ;; This function calls:
 13533 ;;		Nothing
 13534 ;; This function is called by:
 13535 ;;		_is_valid
 13536 ;; This function uses a non-reentrant model
 13537 ;;
 13538                           
 13539                           	psect	text44
 13540  0037D4                     __ptext44:
 13541                           	opt stack 0
 13542  0037D4                     _strcmp:
 13543                           	opt stack 25
 13544                           
 13545                           ;incstack = 0
 13546  0037D4  D004               	goto	i2l1427
 13547  0037D6  4A01               	infsnz	strcmp@s1,f,c
 13548  0037D8  2A02               	incf	strcmp@s1+1,f,c
 13549  0037DA  4A03               	infsnz	strcmp@s2,f,c
 13550  0037DC  2A04               	incf	strcmp@s2+1,f,c
 13551  0037DE                     i2l1427:
 13552  0037DE  C001  FFD9         	movff	strcmp@s1,fsr2l
 13553  0037E2  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 13554  0037E6  50DF               	movf	indf2,w,c
 13555  0037E8  6E05               	movwf	??_strcmp& (0+255),c
 13556  0037EA  C003  FFF6         	movff	strcmp@s2,tblptrl
 13557  0037EE  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 13558  0037F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13559  0037F2  6AF8               	clrf	tblptru,c
 13560  0037F4                     	endif
 13561  0037F4                     	if	0	;tblptru may be non-zero
 13562  0037F4                     	endif
 13563  0037F4  0008               	tblrd		*
 13564  0037F6  50F5               	movf	tablat,w,c
 13565  0037F8  0800               	sublw	0
 13566  0037FA  2405               	addwf	??_strcmp,w,c
 13567  0037FC  6E06               	movwf	strcmp@r,c
 13568  0037FE  5006               	movf	strcmp@r,w,c
 13569  003800  A4D8               	btfss	status,2,c
 13570  003802  D007               	goto	i2u246_40
 13571  003804  C001  FFD9         	movff	strcmp@s1,fsr2l
 13572  003808  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 13573  00380C  50DF               	movf	indf2,w,c
 13574  00380E  A4D8               	btfss	status,2,c
 13575  003810  D7E2               	goto	i2l1428
 13576  003812                     i2u246_40:
 13577  003812  5006               	movf	strcmp@r,w,c
 13578  003814  6E01               	movwf	?_strcmp,c
 13579  003816  6A02               	clrf	?_strcmp+1,c
 13580  003818  BE01               	btfsc	?_strcmp,7,c
 13581  00381A  0602               	decf	?_strcmp+1,f,c
 13582  00381C  0012               	return	
 13583  00381E                     __end_of_strcmp:
 13584                           	opt stack 0
 13585                           pclatu	equ	0xFFB
 13586                           pclath	equ	0xFFA
 13587                           tblptru	equ	0xFF8
 13588                           tblptrh	equ	0xFF7
 13589                           tblptrl	equ	0xFF6
 13590                           tablat	equ	0xFF5
 13591                           prodh	equ	0xFF4
 13592                           prodl	equ	0xFF3
 13593                           intcon	equ	0xFF2
 13594                           intcon3	equ	0xFF0
 13595                           indf0	equ	0xFEF
 13596                           postinc0	equ	0xFEE
 13597                           fsr0h	equ	0xFEA
 13598                           fsr0l	equ	0xFE9
 13599                           wreg	equ	0xFE8
 13600                           indf1	equ	0xFE7
 13601                           postdec1	equ	0xFE5
 13602                           fsr1h	equ	0xFE2
 13603                           fsr1l	equ	0xFE1
 13604                           indf2	equ	0xFDF
 13605                           postinc2	equ	0xFDE
 13606                           postdec2	equ	0xFDD
 13607                           fsr2h	equ	0xFDA
 13608                           fsr2l	equ	0xFD9
 13609                           status	equ	0xFD8
 13610                           
 13611 ;; *************** function _generate_compartment_array *****************
 13612 ;; Defined at:
 13613 ;;		line 220 in file "keypad.c"
 13614 ;; Parameters:    Size  Location     Type
 13615 ;;  step            2    0[COMRAM] int 
 13616 ;; Auto vars:     Size  Location     Type
 13617 ;;		None
 13618 ;; Return value:  Size  Location     Type
 13619 ;;                  1    wreg      void 
 13620 ;; Registers used:
 13621 ;;		wreg, status,2, status,0
 13622 ;; Tracked objects:
 13623 ;;		On entry : 0/0
 13624 ;;		On exit  : 0/0
 13625 ;;		Unchanged: 0/0
 13626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13630 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13631 ;;Total ram usage:        4 bytes
 13632 ;; Hardware stack levels used:    1
 13633 ;; This function calls:
 13634 ;;		Nothing
 13635 ;; This function is called by:
 13636 ;;		_interruptHandler
 13637 ;; This function uses a non-reentrant model
 13638 ;;
 13639                           
 13640                           	psect	text45
 13641  002BB6                     __ptext45:
 13642                           	opt stack 0
 13643  002BB6                     _generate_compartment_array:
 13644                           	opt stack 26
 13645                           
 13646                           ;keypad.c: 222: switch(step){
 13647                           
 13648                           ;incstack = 0
 13649  002BB6  D11C               	goto	i2l730
 13650  002BB8                     
 13651                           ;keypad.c: 224: compartment_array[1] = 1;
 13652  002BB8  0E00               	movlw	0
 13653  002BBA  0100               	movlb	0	; () banked
 13654  002BBC  6FE2               	movwf	(_compartment_array+3)& (0+255),b
 13655  002BBE  0E01               	movlw	1
 13656  002BC0  6FE1               	movwf	(_compartment_array+2)& (0+255),b
 13657                           
 13658                           ;keypad.c: 225: compartment_array[3] = 1;
 13659  002BC2  0E00               	movlw	0
 13660  002BC4  6FE6               	movwf	(_compartment_array+7)& (0+255),b
 13661  002BC6  0E01               	movlw	1
 13662  002BC8  6FE5               	movwf	(_compartment_array+6)& (0+255),b
 13663                           
 13664                           ;keypad.c: 226: compartment_array[5] = 1;
 13665  002BCA  0E00               	movlw	0
 13666  002BCC  6FEA               	movwf	(_compartment_array+11)& (0+255),b
 13667  002BCE  0E01               	movlw	1
 13668  002BD0  6FE9               	movwf	(_compartment_array+10)& (0+255),b
 13669                           
 13670                           ;keypad.c: 227: compartment_array[7] = 1;
 13671  002BD2  0E00               	movlw	0
 13672  002BD4  6FEE               	movwf	(_compartment_array+15)& (0+255),b
 13673  002BD6  0E01               	movlw	1
 13674  002BD8  6FED               	movwf	(_compartment_array+14)& (0+255),b
 13675                           
 13676                           ;keypad.c: 230: compartment_number[0] = 1;
 13677  002BDA  0E00               	movlw	0
 13678  002BDC  6E43               	movwf	_compartment_number+1,c
 13679  002BDE  0E01               	movlw	1
 13680  002BE0  6E42               	movwf	_compartment_number,c
 13681                           
 13682                           ;keypad.c: 231: compartment_number[1] = 3;
 13683  002BE2  0E00               	movlw	0
 13684  002BE4  6E45               	movwf	_compartment_number+3,c
 13685  002BE6  0E03               	movlw	3
 13686  002BE8  6E44               	movwf	_compartment_number+2,c
 13687                           
 13688                           ;keypad.c: 232: compartment_number[2] = 5;
 13689  002BEA  0E00               	movlw	0
 13690  002BEC  6E47               	movwf	_compartment_number+5,c
 13691  002BEE  0E05               	movlw	5
 13692  002BF0  6E46               	movwf	_compartment_number+4,c
 13693                           
 13694                           ;keypad.c: 233: compartment_number[3] = 7;
 13695  002BF2  0E00               	movlw	0
 13696  002BF4  6E49               	movwf	_compartment_number+7,c
 13697  002BF6  0E07               	movlw	7
 13698  002BF8  6E48               	movwf	_compartment_number+6,c
 13699                           
 13700                           ;keypad.c: 235: break;
 13701  002BFA  0012               	return	
 13702  002BFC                     
 13703                           ;keypad.c: 237: compartment_array[0] = 1;
 13704                           
 13705                           ; BSR set to: 0
 13706  002BFC  0E00               	movlw	0
 13707  002BFE  0100               	movlb	0	; () banked
 13708  002C00  6FE0               	movwf	(_compartment_array+1)& (0+255),b
 13709  002C02  0E01               	movlw	1
 13710  002C04  6FDF               	movwf	_compartment_array& (0+255),b
 13711                           
 13712                           ;keypad.c: 238: compartment_array[1] = 1;
 13713  002C06  0E00               	movlw	0
 13714  002C08  6FE2               	movwf	(_compartment_array+3)& (0+255),b
 13715  002C0A  0E01               	movlw	1
 13716  002C0C  6FE1               	movwf	(_compartment_array+2)& (0+255),b
 13717                           
 13718                           ;keypad.c: 239: compartment_array[3] = 1;
 13719  002C0E  0E00               	movlw	0
 13720  002C10  6FE6               	movwf	(_compartment_array+7)& (0+255),b
 13721  002C12  0E01               	movlw	1
 13722  002C14  6FE5               	movwf	(_compartment_array+6)& (0+255),b
 13723                           
 13724                           ;keypad.c: 240: compartment_array[4] = 1;
 13725  002C16  0E00               	movlw	0
 13726  002C18  6FE8               	movwf	(_compartment_array+9)& (0+255),b
 13727  002C1A  0E01               	movlw	1
 13728  002C1C  6FE7               	movwf	(_compartment_array+8)& (0+255),b
 13729                           
 13730                           ;keypad.c: 241: compartment_array[6] = 1;
 13731  002C1E  0E00               	movlw	0
 13732  002C20  6FEC               	movwf	(_compartment_array+13)& (0+255),b
 13733  002C22  0E01               	movlw	1
 13734  002C24  6FEB               	movwf	(_compartment_array+12)& (0+255),b
 13735                           
 13736                           ;keypad.c: 245: compartment_number[0] = 0;
 13737  002C26  0E00               	movlw	0
 13738  002C28  6E43               	movwf	_compartment_number+1,c
 13739  002C2A  0E00               	movlw	0
 13740  002C2C  6E42               	movwf	_compartment_number,c
 13741                           
 13742                           ;keypad.c: 246: compartment_number[1] = 1;
 13743  002C2E  0E00               	movlw	0
 13744  002C30  6E45               	movwf	_compartment_number+3,c
 13745  002C32  0E01               	movlw	1
 13746  002C34  6E44               	movwf	_compartment_number+2,c
 13747                           
 13748                           ;keypad.c: 247: compartment_number[2] = 3;
 13749  002C36  0E00               	movlw	0
 13750  002C38  6E47               	movwf	_compartment_number+5,c
 13751  002C3A  0E03               	movlw	3
 13752  002C3C  6E46               	movwf	_compartment_number+4,c
 13753                           
 13754                           ;keypad.c: 248: compartment_number[3] = 4;
 13755  002C3E  0E00               	movlw	0
 13756  002C40  6E49               	movwf	_compartment_number+7,c
 13757  002C42  0E04               	movlw	4
 13758  002C44  6E48               	movwf	_compartment_number+6,c
 13759                           
 13760                           ;keypad.c: 249: compartment_number[4] = 6;
 13761  002C46  0E00               	movlw	0
 13762  002C48  6E4B               	movwf	_compartment_number+9,c
 13763  002C4A  0E06               	movlw	6
 13764  002C4C  6E4A               	movwf	_compartment_number+8,c
 13765                           
 13766                           ;keypad.c: 251: break;
 13767  002C4E  0012               	return	
 13768  002C50                     
 13769                           ;keypad.c: 254: compartment_array[0] = 1;
 13770                           
 13771                           ; BSR set to: 0
 13772  002C50  0E00               	movlw	0
 13773  002C52  0100               	movlb	0	; () banked
 13774  002C54  6FE0               	movwf	(_compartment_array+1)& (0+255),b
 13775  002C56  0E01               	movlw	1
 13776  002C58  6FDF               	movwf	_compartment_array& (0+255),b
 13777                           
 13778                           ;keypad.c: 255: compartment_array[1] = 1;
 13779  002C5A  0E00               	movlw	0
 13780  002C5C  6FE2               	movwf	(_compartment_array+3)& (0+255),b
 13781  002C5E  0E01               	movlw	1
 13782  002C60  6FE1               	movwf	(_compartment_array+2)& (0+255),b
 13783                           
 13784                           ;keypad.c: 256: compartment_array[2] = 1;
 13785  002C62  0E00               	movlw	0
 13786  002C64  6FE4               	movwf	(_compartment_array+5)& (0+255),b
 13787  002C66  0E01               	movlw	1
 13788  002C68  6FE3               	movwf	(_compartment_array+4)& (0+255),b
 13789                           
 13790                           ;keypad.c: 257: compartment_array[4] = 1;
 13791  002C6A  0E00               	movlw	0
 13792  002C6C  6FE8               	movwf	(_compartment_array+9)& (0+255),b
 13793  002C6E  0E01               	movlw	1
 13794  002C70  6FE7               	movwf	(_compartment_array+8)& (0+255),b
 13795                           
 13796                           ;keypad.c: 258: compartment_array[5] = 1;
 13797  002C72  0E00               	movlw	0
 13798  002C74  6FEA               	movwf	(_compartment_array+11)& (0+255),b
 13799  002C76  0E01               	movlw	1
 13800  002C78  6FE9               	movwf	(_compartment_array+10)& (0+255),b
 13801                           
 13802                           ;keypad.c: 259: compartment_array[6] = 1;
 13803  002C7A  0E00               	movlw	0
 13804  002C7C  6FEC               	movwf	(_compartment_array+13)& (0+255),b
 13805  002C7E  0E01               	movlw	1
 13806  002C80  6FEB               	movwf	(_compartment_array+12)& (0+255),b
 13807                           
 13808                           ;keypad.c: 262: compartment_number[0] = 0;
 13809  002C82  0E00               	movlw	0
 13810  002C84  6E43               	movwf	_compartment_number+1,c
 13811  002C86  0E00               	movlw	0
 13812  002C88  6E42               	movwf	_compartment_number,c
 13813                           
 13814                           ;keypad.c: 263: compartment_number[1] = 1;
 13815  002C8A  0E00               	movlw	0
 13816  002C8C  6E45               	movwf	_compartment_number+3,c
 13817  002C8E  0E01               	movlw	1
 13818  002C90  6E44               	movwf	_compartment_number+2,c
 13819                           
 13820                           ;keypad.c: 264: compartment_number[2] = 2;
 13821  002C92  0E00               	movlw	0
 13822  002C94  6E47               	movwf	_compartment_number+5,c
 13823  002C96  0E02               	movlw	2
 13824  002C98  6E46               	movwf	_compartment_number+4,c
 13825                           
 13826                           ;keypad.c: 265: compartment_number[3] = 4;
 13827  002C9A  0E00               	movlw	0
 13828  002C9C  6E49               	movwf	_compartment_number+7,c
 13829  002C9E  0E04               	movlw	4
 13830  002CA0  6E48               	movwf	_compartment_number+6,c
 13831                           
 13832                           ;keypad.c: 266: compartment_number[4] = 5;
 13833  002CA2  0E00               	movlw	0
 13834  002CA4  6E4B               	movwf	_compartment_number+9,c
 13835  002CA6  0E05               	movlw	5
 13836  002CA8  6E4A               	movwf	_compartment_number+8,c
 13837                           
 13838                           ;keypad.c: 267: compartment_number[5] = 6;
 13839  002CAA  0E00               	movlw	0
 13840  002CAC  6E4D               	movwf	_compartment_number+11,c
 13841  002CAE  0E06               	movlw	6
 13842  002CB0  6E4C               	movwf	_compartment_number+10,c
 13843                           
 13844                           ;keypad.c: 269: break;
 13845  002CB2  0012               	return	
 13846  002CB4                     
 13847                           ;keypad.c: 271: compartment_array[0] = 1;
 13848                           
 13849                           ; BSR set to: 0
 13850  002CB4  0E00               	movlw	0
 13851  002CB6  0100               	movlb	0	; () banked
 13852  002CB8  6FE0               	movwf	(_compartment_array+1)& (0+255),b
 13853  002CBA  0E01               	movlw	1
 13854  002CBC  6FDF               	movwf	_compartment_array& (0+255),b
 13855                           
 13856                           ;keypad.c: 272: compartment_array[1] = 1;
 13857  002CBE  0E00               	movlw	0
 13858  002CC0  6FE2               	movwf	(_compartment_array+3)& (0+255),b
 13859  002CC2  0E01               	movlw	1
 13860  002CC4  6FE1               	movwf	(_compartment_array+2)& (0+255),b
 13861                           
 13862                           ;keypad.c: 273: compartment_array[2] = 1;
 13863  002CC6  0E00               	movlw	0
 13864  002CC8  6FE4               	movwf	(_compartment_array+5)& (0+255),b
 13865  002CCA  0E01               	movlw	1
 13866  002CCC  6FE3               	movwf	(_compartment_array+4)& (0+255),b
 13867                           
 13868                           ;keypad.c: 274: compartment_array[3] = 1;
 13869  002CCE  0E00               	movlw	0
 13870  002CD0  6FE6               	movwf	(_compartment_array+7)& (0+255),b
 13871  002CD2  0E01               	movlw	1
 13872  002CD4  6FE5               	movwf	(_compartment_array+6)& (0+255),b
 13873                           
 13874                           ;keypad.c: 275: compartment_array[4] = 1;
 13875  002CD6  0E00               	movlw	0
 13876  002CD8  6FE8               	movwf	(_compartment_array+9)& (0+255),b
 13877  002CDA  0E01               	movlw	1
 13878  002CDC  6FE7               	movwf	(_compartment_array+8)& (0+255),b
 13879                           
 13880                           ;keypad.c: 276: compartment_array[5] = 1;
 13881  002CDE  0E00               	movlw	0
 13882  002CE0  6FEA               	movwf	(_compartment_array+11)& (0+255),b
 13883  002CE2  0E01               	movlw	1
 13884  002CE4  6FE9               	movwf	(_compartment_array+10)& (0+255),b
 13885                           
 13886                           ;keypad.c: 277: compartment_array[6] = 1;
 13887  002CE6  0E00               	movlw	0
 13888  002CE8  6FEC               	movwf	(_compartment_array+13)& (0+255),b
 13889  002CEA  0E01               	movlw	1
 13890  002CEC  6FEB               	movwf	(_compartment_array+12)& (0+255),b
 13891                           
 13892                           ;keypad.c: 280: compartment_number[0] = 0;
 13893  002CEE  0E00               	movlw	0
 13894  002CF0  6E43               	movwf	_compartment_number+1,c
 13895  002CF2  0E00               	movlw	0
 13896  002CF4  6E42               	movwf	_compartment_number,c
 13897                           
 13898                           ;keypad.c: 281: compartment_number[1] = 1;
 13899  002CF6  0E00               	movlw	0
 13900  002CF8  6E45               	movwf	_compartment_number+3,c
 13901  002CFA  0E01               	movlw	1
 13902  002CFC  6E44               	movwf	_compartment_number+2,c
 13903                           
 13904                           ;keypad.c: 282: compartment_number[2] = 2;
 13905  002CFE  0E00               	movlw	0
 13906  002D00  6E47               	movwf	_compartment_number+5,c
 13907  002D02  0E02               	movlw	2
 13908  002D04  6E46               	movwf	_compartment_number+4,c
 13909                           
 13910                           ;keypad.c: 283: compartment_number[3] = 3;
 13911  002D06  0E00               	movlw	0
 13912  002D08  6E49               	movwf	_compartment_number+7,c
 13913  002D0A  0E03               	movlw	3
 13914  002D0C  6E48               	movwf	_compartment_number+6,c
 13915                           
 13916                           ;keypad.c: 284: compartment_number[4] = 4;
 13917  002D0E  0E00               	movlw	0
 13918  002D10  6E4B               	movwf	_compartment_number+9,c
 13919  002D12  0E04               	movlw	4
 13920  002D14  6E4A               	movwf	_compartment_number+8,c
 13921                           
 13922                           ;keypad.c: 285: compartment_number[5] = 5;
 13923  002D16  0E00               	movlw	0
 13924  002D18  6E4D               	movwf	_compartment_number+11,c
 13925  002D1A  0E05               	movlw	5
 13926  002D1C  6E4C               	movwf	_compartment_number+10,c
 13927                           
 13928                           ;keypad.c: 286: compartment_number[6] = 6;
 13929  002D1E  0E00               	movlw	0
 13930  002D20  6E4F               	movwf	_compartment_number+13,c
 13931  002D22  0E06               	movlw	6
 13932  002D24  6E4E               	movwf	_compartment_number+12,c
 13933                           
 13934                           ;keypad.c: 288: break;
 13935  002D26  0012               	return	
 13936  002D28                     
 13937                           ;keypad.c: 290: compartment_array[0] = 1;
 13938                           
 13939                           ; BSR set to: 0
 13940  002D28  0E00               	movlw	0
 13941  002D2A  0100               	movlb	0	; () banked
 13942  002D2C  6FE0               	movwf	(_compartment_array+1)& (0+255),b
 13943  002D2E  0E01               	movlw	1
 13944  002D30  6FDF               	movwf	_compartment_array& (0+255),b
 13945                           
 13946                           ;keypad.c: 291: compartment_array[1] = 1;
 13947  002D32  0E00               	movlw	0
 13948  002D34  6FE2               	movwf	(_compartment_array+3)& (0+255),b
 13949  002D36  0E01               	movlw	1
 13950  002D38  6FE1               	movwf	(_compartment_array+2)& (0+255),b
 13951                           
 13952                           ;keypad.c: 292: compartment_array[2] = 1;
 13953  002D3A  0E00               	movlw	0
 13954  002D3C  6FE4               	movwf	(_compartment_array+5)& (0+255),b
 13955  002D3E  0E01               	movlw	1
 13956  002D40  6FE3               	movwf	(_compartment_array+4)& (0+255),b
 13957                           
 13958                           ;keypad.c: 293: compartment_array[3] = 1;
 13959  002D42  0E00               	movlw	0
 13960  002D44  6FE6               	movwf	(_compartment_array+7)& (0+255),b
 13961  002D46  0E01               	movlw	1
 13962  002D48  6FE5               	movwf	(_compartment_array+6)& (0+255),b
 13963                           
 13964                           ;keypad.c: 294: compartment_array[4] = 1;
 13965  002D4A  0E00               	movlw	0
 13966  002D4C  6FE8               	movwf	(_compartment_array+9)& (0+255),b
 13967  002D4E  0E01               	movlw	1
 13968  002D50  6FE7               	movwf	(_compartment_array+8)& (0+255),b
 13969                           
 13970                           ;keypad.c: 295: compartment_array[5] = 1;
 13971  002D52  0E00               	movlw	0
 13972  002D54  6FEA               	movwf	(_compartment_array+11)& (0+255),b
 13973  002D56  0E01               	movlw	1
 13974  002D58  6FE9               	movwf	(_compartment_array+10)& (0+255),b
 13975                           
 13976                           ;keypad.c: 296: compartment_array[6] = 1;
 13977  002D5A  0E00               	movlw	0
 13978  002D5C  6FEC               	movwf	(_compartment_array+13)& (0+255),b
 13979  002D5E  0E01               	movlw	1
 13980  002D60  6FEB               	movwf	(_compartment_array+12)& (0+255),b
 13981                           
 13982                           ;keypad.c: 297: compartment_array[7] = 1;
 13983  002D62  0E00               	movlw	0
 13984  002D64  6FEE               	movwf	(_compartment_array+15)& (0+255),b
 13985  002D66  0E01               	movlw	1
 13986  002D68  6FED               	movwf	(_compartment_array+14)& (0+255),b
 13987                           
 13988                           ;keypad.c: 300: compartment_number[0] = 0;
 13989  002D6A  0E00               	movlw	0
 13990  002D6C  6E43               	movwf	_compartment_number+1,c
 13991  002D6E  0E00               	movlw	0
 13992  002D70  6E42               	movwf	_compartment_number,c
 13993                           
 13994                           ;keypad.c: 301: compartment_number[1] = 1;
 13995  002D72  0E00               	movlw	0
 13996  002D74  6E45               	movwf	_compartment_number+3,c
 13997  002D76  0E01               	movlw	1
 13998  002D78  6E44               	movwf	_compartment_number+2,c
 13999                           
 14000                           ;keypad.c: 302: compartment_number[2] = 2;
 14001  002D7A  0E00               	movlw	0
 14002  002D7C  6E47               	movwf	_compartment_number+5,c
 14003  002D7E  0E02               	movlw	2
 14004  002D80  6E46               	movwf	_compartment_number+4,c
 14005                           
 14006                           ;keypad.c: 303: compartment_number[3] = 3;
 14007  002D82  0E00               	movlw	0
 14008  002D84  6E49               	movwf	_compartment_number+7,c
 14009  002D86  0E03               	movlw	3
 14010  002D88  6E48               	movwf	_compartment_number+6,c
 14011                           
 14012                           ;keypad.c: 304: compartment_number[4] = 4;
 14013  002D8A  0E00               	movlw	0
 14014  002D8C  6E4B               	movwf	_compartment_number+9,c
 14015  002D8E  0E04               	movlw	4
 14016  002D90  6E4A               	movwf	_compartment_number+8,c
 14017                           
 14018                           ;keypad.c: 305: compartment_number[5] = 5;
 14019  002D92  0E00               	movlw	0
 14020  002D94  6E4D               	movwf	_compartment_number+11,c
 14021  002D96  0E05               	movlw	5
 14022  002D98  6E4C               	movwf	_compartment_number+10,c
 14023                           
 14024                           ;keypad.c: 306: compartment_number[6] = 6;
 14025  002D9A  0E00               	movlw	0
 14026  002D9C  6E4F               	movwf	_compartment_number+13,c
 14027  002D9E  0E06               	movlw	6
 14028  002DA0  6E4E               	movwf	_compartment_number+12,c
 14029                           
 14030                           ;keypad.c: 307: compartment_number[7] = 7;
 14031  002DA2  0E00               	movlw	0
 14032  002DA4  6E51               	movwf	_compartment_number+15,c
 14033  002DA6  0E07               	movlw	7
 14034  002DA8  6E50               	movwf	_compartment_number+14,c
 14035                           
 14036                           ;keypad.c: 309: break;
 14037  002DAA  0012               	return	
 14038  002DAC                     
 14039                           ;keypad.c: 311: compartment_array[0] = 0;
 14040                           
 14041                           ; BSR set to: 0
 14042  002DAC  0E00               	movlw	0
 14043  002DAE  0100               	movlb	0	; () banked
 14044  002DB0  6FE0               	movwf	(_compartment_array+1)& (0+255),b
 14045  002DB2  0E00               	movlw	0
 14046  002DB4  6FDF               	movwf	_compartment_array& (0+255),b
 14047                           
 14048                           ;keypad.c: 312: compartment_array[1] = 0;
 14049  002DB6  0E00               	movlw	0
 14050  002DB8  6FE2               	movwf	(_compartment_array+3)& (0+255),b
 14051  002DBA  0E00               	movlw	0
 14052  002DBC  6FE1               	movwf	(_compartment_array+2)& (0+255),b
 14053                           
 14054                           ;keypad.c: 313: compartment_array[2] = 0;
 14055  002DBE  0E00               	movlw	0
 14056  002DC0  6FE4               	movwf	(_compartment_array+5)& (0+255),b
 14057  002DC2  0E00               	movlw	0
 14058  002DC4  6FE3               	movwf	(_compartment_array+4)& (0+255),b
 14059                           
 14060                           ;keypad.c: 314: compartment_array[3] = 0;
 14061  002DC6  0E00               	movlw	0
 14062  002DC8  6FE6               	movwf	(_compartment_array+7)& (0+255),b
 14063  002DCA  0E00               	movlw	0
 14064  002DCC  6FE5               	movwf	(_compartment_array+6)& (0+255),b
 14065                           
 14066                           ;keypad.c: 315: compartment_array[4] = 0;
 14067  002DCE  0E00               	movlw	0
 14068  002DD0  6FE8               	movwf	(_compartment_array+9)& (0+255),b
 14069  002DD2  0E00               	movlw	0
 14070  002DD4  6FE7               	movwf	(_compartment_array+8)& (0+255),b
 14071                           
 14072                           ;keypad.c: 316: compartment_array[5] = 0;
 14073  002DD6  0E00               	movlw	0
 14074  002DD8  6FEA               	movwf	(_compartment_array+11)& (0+255),b
 14075  002DDA  0E00               	movlw	0
 14076  002DDC  6FE9               	movwf	(_compartment_array+10)& (0+255),b
 14077                           
 14078                           ;keypad.c: 317: compartment_array[6] = 0;
 14079  002DDE  0E00               	movlw	0
 14080  002DE0  6FEC               	movwf	(_compartment_array+13)& (0+255),b
 14081  002DE2  0E00               	movlw	0
 14082  002DE4  6FEB               	movwf	(_compartment_array+12)& (0+255),b
 14083                           
 14084                           ;keypad.c: 318: compartment_array[7] = 0;
 14085  002DE6  0E00               	movlw	0
 14086  002DE8  6FEE               	movwf	(_compartment_array+15)& (0+255),b
 14087  002DEA  0E00               	movlw	0
 14088  002DEC  6FED               	movwf	(_compartment_array+14)& (0+255),b
 14089                           
 14090                           ;keypad.c: 320: }
 14091  002DEE  0012               	return	
 14092  002DF0                     i2l730:
 14093                           
 14094                           ; BSR set to: 0
 14095  002DF0  C001  F003         	movff	generate_compartment_array@step,??_generate_compartment_array
 14096  002DF4  C002  F004         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
 14097                           
 14098                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14099                           ; Switch size 1, requested type "space"
 14100                           ; Number of cases is 1, Range of values is 0 to 0
 14101                           ; switch strategies available:
 14102                           ; Name         Instructions Cycles
 14103                           ; simple_byte            4     3 (average)
 14104                           ;	Chosen strategy is simple_byte
 14105  002DF8  5004               	movf	??_generate_compartment_array+1,w,c
 14106  002DFA  0A00               	xorlw	0	; case 0
 14107  002DFC  A4D8               	btfss	status,2,c
 14108  002DFE  D7D6               	goto	i2l737
 14109                           
 14110                           ; Switch size 1, requested type "space"
 14111                           ; Number of cases is 5, Range of values is 4 to 8
 14112                           ; switch strategies available:
 14113                           ; Name         Instructions Cycles
 14114                           ; simple_byte           16     9 (average)
 14115                           ;	Chosen strategy is simple_byte
 14116  002E00  5003               	movf	??_generate_compartment_array,w,c
 14117  002E02  0A04               	xorlw	4	; case 4
 14118  002E04  B4D8               	btfsc	status,2,c
 14119  002E06  D6D8               	goto	i2l731
 14120  002E08  0A01               	xorlw	1	; case 5
 14121  002E0A  B4D8               	btfsc	status,2,c
 14122  002E0C  D6F7               	goto	i2l733
 14123  002E0E  0A03               	xorlw	3	; case 6
 14124  002E10  B4D8               	btfsc	status,2,c
 14125  002E12  D71E               	goto	i2l734
 14126  002E14  0A01               	xorlw	1	; case 7
 14127  002E16  B4D8               	btfsc	status,2,c
 14128  002E18  D74D               	goto	i2l735
 14129  002E1A  0A0F               	xorlw	15	; case 8
 14130  002E1C  B4D8               	btfsc	status,2,c
 14131  002E1E  D784               	goto	i2l736
 14132  002E20  D7C5               	goto	i2l737
 14133  002E22                     __end_of_generate_compartment_array:
 14134                           	opt stack 0
 14135                           pclatu	equ	0xFFB
 14136                           pclath	equ	0xFFA
 14137                           tblptru	equ	0xFF8
 14138                           tblptrh	equ	0xFF7
 14139                           tblptrl	equ	0xFF6
 14140                           tablat	equ	0xFF5
 14141                           prodh	equ	0xFF4
 14142                           prodl	equ	0xFF3
 14143                           intcon	equ	0xFF2
 14144                           intcon3	equ	0xFF0
 14145                           indf0	equ	0xFEF
 14146                           postinc0	equ	0xFEE
 14147                           fsr0h	equ	0xFEA
 14148                           fsr0l	equ	0xFE9
 14149                           wreg	equ	0xFE8
 14150                           indf1	equ	0xFE7
 14151                           postdec1	equ	0xFE5
 14152                           fsr1h	equ	0xFE2
 14153                           fsr1l	equ	0xFE1
 14154                           indf2	equ	0xFDF
 14155                           postinc2	equ	0xFDE
 14156                           postdec2	equ	0xFDD
 14157                           fsr2h	equ	0xFDA
 14158                           fsr2l	equ	0xFD9
 14159                           status	equ	0xFD8
 14160                           
 14161 ;; *************** function _check *****************
 14162 ;; Defined at:
 14163 ;;		line 208 in file "keypad.c"
 14164 ;; Parameters:    Size  Location     Type
 14165 ;;		None
 14166 ;; Auto vars:     Size  Location     Type
 14167 ;;		None
 14168 ;; Return value:  Size  Location     Type
 14169 ;;                  2    0[COMRAM] int 
 14170 ;; Registers used:
 14171 ;;		wreg, status,2, status,0
 14172 ;; Tracked objects:
 14173 ;;		On entry : 0/0
 14174 ;;		On exit  : 0/0
 14175 ;;		Unchanged: 0/0
 14176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14177 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14181 ;;Total ram usage:        2 bytes
 14182 ;; Hardware stack levels used:    1
 14183 ;; This function calls:
 14184 ;;		Nothing
 14185 ;; This function is called by:
 14186 ;;		_interruptHandler
 14187 ;; This function uses a non-reentrant model
 14188 ;;
 14189                           
 14190                           	psect	text46
 14191  00352C                     __ptext46:
 14192                           	opt stack 0
 14193  00352C                     _check:
 14194                           	opt stack 26
 14195                           
 14196                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 14197                           
 14198                           ;incstack = 0
 14199  00352C  BE60               	btfsc	_B+1,7,c
 14200  00352E  D006               	goto	i2u340_40
 14201  003530  5060               	movf	_B+1,w,c
 14202  003532  E124               	bnz	i2l4458
 14203  003534  0E03               	movlw	3
 14204  003536  5C5F               	subwf	_B,w,c
 14205  003538  B0D8               	btfsc	status,0,c
 14206  00353A  D020               	goto	i2u344_40
 14207  00353C                     i2u340_40:
 14208  00353C  BE5E               	btfsc	_N+1,7,c
 14209  00353E  D006               	goto	i2u341_40
 14210  003540  505E               	movf	_N+1,w,c
 14211  003542  E11C               	bnz	i2l4458
 14212  003544  0E04               	movlw	4
 14213  003546  5C5D               	subwf	_N,w,c
 14214  003548  B0D8               	btfsc	status,0,c
 14215  00354A  D018               	goto	i2u344_40
 14216  00354C                     i2u341_40:
 14217  00354C  BE5C               	btfsc	_S+1,7,c
 14218  00354E  D006               	goto	i2u342_40
 14219  003550  505C               	movf	_S+1,w,c
 14220  003552  E114               	bnz	i2l4458
 14221  003554  0E03               	movlw	3
 14222  003556  5C5B               	subwf	_S,w,c
 14223  003558  B0D8               	btfsc	status,0,c
 14224  00355A  D010               	goto	i2u344_40
 14225  00355C                     i2u342_40:
 14226  00355C  BE5A               	btfsc	_W+1,7,c
 14227  00355E  D006               	goto	i2u343_40
 14228  003560  505A               	movf	_W+1,w,c
 14229  003562  E10C               	bnz	i2l4458
 14230  003564  0E05               	movlw	5
 14231  003566  5C59               	subwf	_W,w,c
 14232  003568  B0D8               	btfsc	status,0,c
 14233  00356A  D008               	goto	i2u344_40
 14234  00356C                     i2u343_40:
 14235  00356C  BE64               	btfsc	_total_number+1,7,c
 14236  00356E  D00B               	goto	i2l724
 14237  003570  5064               	movf	_total_number+1,w,c
 14238  003572  E104               	bnz	i2l4458
 14239  003574  0E05               	movlw	5
 14240  003576  5C63               	subwf	_total_number,w,c
 14241  003578  A0D8               	btfss	status,0,c
 14242  00357A  D005               	goto	i2l724
 14243  00357C                     i2u344_40:
 14244  00357C                     i2l4458:
 14245                           
 14246                           ;keypad.c: 213: return 0;
 14247  00357C  0E00               	movlw	0
 14248  00357E  6E02               	movwf	?_check+1,c
 14249  003580  0E00               	movlw	0
 14250  003582  6E01               	movwf	?_check,c
 14251  003584  0012               	return	
 14252  003586                     i2l724:
 14253                           
 14254                           ;keypad.c: 214: }
 14255                           ;keypad.c: 215: return 1;
 14256  003586  0E00               	movlw	0
 14257  003588  6E02               	movwf	?_check+1,c
 14258  00358A  0E01               	movlw	1
 14259  00358C  6E01               	movwf	?_check,c
 14260  00358E  0012               	return	
 14261  003590                     __end_of_check:
 14262                           	opt stack 0
 14263                           pclatu	equ	0xFFB
 14264                           pclath	equ	0xFFA
 14265                           tblptru	equ	0xFF8
 14266                           tblptrh	equ	0xFF7
 14267                           tblptrl	equ	0xFF6
 14268                           tablat	equ	0xFF5
 14269                           prodh	equ	0xFF4
 14270                           prodl	equ	0xFF3
 14271                           intcon	equ	0xFF2
 14272                           intcon3	equ	0xFF0
 14273                           indf0	equ	0xFEF
 14274                           postinc0	equ	0xFEE
 14275                           fsr0h	equ	0xFEA
 14276                           fsr0l	equ	0xFE9
 14277                           wreg	equ	0xFE8
 14278                           indf1	equ	0xFE7
 14279                           postdec1	equ	0xFE5
 14280                           fsr1h	equ	0xFE2
 14281                           fsr1l	equ	0xFE1
 14282                           indf2	equ	0xFDF
 14283                           postinc2	equ	0xFDE
 14284                           postdec2	equ	0xFDD
 14285                           fsr2h	equ	0xFDA
 14286                           fsr2l	equ	0xFD9
 14287                           status	equ	0xFD8
 14288                           
 14289 ;; *************** function ___awmod *****************
 14290 ;; Defined at:
 14291 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 14292 ;; Parameters:    Size  Location     Type
 14293 ;;  dividend        2    0[COMRAM] int 
 14294 ;;  divisor         2    2[COMRAM] int 
 14295 ;; Auto vars:     Size  Location     Type
 14296 ;;  sign            1    5[COMRAM] unsigned char 
 14297 ;;  counter         1    4[COMRAM] unsigned char 
 14298 ;; Return value:  Size  Location     Type
 14299 ;;                  2    0[COMRAM] int 
 14300 ;; Registers used:
 14301 ;;		wreg, status,2, status,0
 14302 ;; Tracked objects:
 14303 ;;		On entry : 0/0
 14304 ;;		On exit  : 0/0
 14305 ;;		Unchanged: 0/0
 14306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14307 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14311 ;;Total ram usage:        6 bytes
 14312 ;; Hardware stack levels used:    1
 14313 ;; This function calls:
 14314 ;;		Nothing
 14315 ;; This function is called by:
 14316 ;;		_interruptHandler
 14317 ;; This function uses a non-reentrant model
 14318 ;;
 14319                           
 14320                           	psect	text47
 14321  0034BC                     __ptext47:
 14322                           	opt stack 0
 14323  0034BC                     ___awmod:
 14324                           	opt stack 26
 14325                           
 14326                           ;incstack = 0
 14327  0034BC  0E00               	movlw	0
 14328  0034BE  6E06               	movwf	___awmod@sign,c
 14329  0034C0  AE02               	btfss	___awmod@dividend+1,7,c
 14330  0034C2  D006               	goto	i2l1046
 14331  0034C4  6C01               	negf	___awmod@dividend,c
 14332  0034C6  1E02               	comf	___awmod@dividend+1,f,c
 14333  0034C8  B0D8               	btfsc	status,0,c
 14334  0034CA  2A02               	incf	___awmod@dividend+1,f,c
 14335  0034CC  0E01               	movlw	1
 14336  0034CE  6E06               	movwf	___awmod@sign,c
 14337  0034D0                     i2l1046:
 14338  0034D0  AE04               	btfss	___awmod@divisor+1,7,c
 14339  0034D2  D004               	goto	i2l1047
 14340  0034D4  6C03               	negf	___awmod@divisor,c
 14341  0034D6  1E04               	comf	___awmod@divisor+1,f,c
 14342  0034D8  B0D8               	btfsc	status,0,c
 14343  0034DA  2A04               	incf	___awmod@divisor+1,f,c
 14344  0034DC                     i2l1047:
 14345  0034DC  5003               	movf	___awmod@divisor,w,c
 14346  0034DE  1004               	iorwf	___awmod@divisor+1,w,c
 14347  0034E0  B4D8               	btfsc	status,2,c
 14348  0034E2  D018               	goto	i2l1054
 14349  0034E4  0E01               	movlw	1
 14350  0034E6  6E05               	movwf	___awmod@counter,c
 14351  0034E8  D004               	goto	i2l1049
 14352  0034EA  90D8               	bcf	status,0,c
 14353  0034EC  3603               	rlcf	___awmod@divisor,f,c
 14354  0034EE  3604               	rlcf	___awmod@divisor+1,f,c
 14355  0034F0  2A05               	incf	___awmod@counter,f,c
 14356  0034F2                     i2l1049:
 14357  0034F2  AE04               	btfss	___awmod@divisor+1,7,c
 14358  0034F4  D7FA               	goto	i2l1050
 14359  0034F6                     i2u348_40:
 14360  0034F6  5003               	movf	___awmod@divisor,w,c
 14361  0034F8  5C01               	subwf	___awmod@dividend,w,c
 14362  0034FA  5004               	movf	___awmod@divisor+1,w,c
 14363  0034FC  5802               	subwfb	___awmod@dividend+1,w,c
 14364  0034FE  A0D8               	btfss	status,0,c
 14365  003500  D004               	goto	i2l1053
 14366  003502  5003               	movf	___awmod@divisor,w,c
 14367  003504  5E01               	subwf	___awmod@dividend,f,c
 14368  003506  5004               	movf	___awmod@divisor+1,w,c
 14369  003508  5A02               	subwfb	___awmod@dividend+1,f,c
 14370  00350A                     i2l1053:
 14371  00350A  90D8               	bcf	status,0,c
 14372  00350C  3204               	rrcf	___awmod@divisor+1,f,c
 14373  00350E  3203               	rrcf	___awmod@divisor,f,c
 14374  003510  2E05               	decfsz	___awmod@counter,f,c
 14375  003512  D7F1               	goto	i2u348_40
 14376  003514                     i2l1054:
 14377  003514  5006               	movf	___awmod@sign,w,c
 14378  003516  B4D8               	btfsc	status,2,c
 14379  003518  D004               	goto	i2l1055
 14380  00351A  6C01               	negf	___awmod@dividend,c
 14381  00351C  1E02               	comf	___awmod@dividend+1,f,c
 14382  00351E  B0D8               	btfsc	status,0,c
 14383  003520  2A02               	incf	___awmod@dividend+1,f,c
 14384  003522                     i2l1055:
 14385  003522  C001  F001         	movff	___awmod@dividend,?___awmod
 14386  003526  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 14387  00352A  0012               	return	
 14388  00352C                     __end_of___awmod:
 14389                           	opt stack 0
 14390                           pclatu	equ	0xFFB
 14391                           pclath	equ	0xFFA
 14392                           tblptru	equ	0xFF8
 14393                           tblptrh	equ	0xFF7
 14394                           tblptrl	equ	0xFF6
 14395                           tablat	equ	0xFF5
 14396                           prodh	equ	0xFF4
 14397                           prodl	equ	0xFF3
 14398                           intcon	equ	0xFF2
 14399                           intcon3	equ	0xFF0
 14400                           indf0	equ	0xFEF
 14401                           postinc0	equ	0xFEE
 14402                           fsr0h	equ	0xFEA
 14403                           fsr0l	equ	0xFE9
 14404                           wreg	equ	0xFE8
 14405                           indf1	equ	0xFE7
 14406                           postdec1	equ	0xFE5
 14407                           fsr1h	equ	0xFE2
 14408                           fsr1l	equ	0xFE1
 14409                           indf2	equ	0xFDF
 14410                           postinc2	equ	0xFDE
 14411                           postdec2	equ	0xFDD
 14412                           fsr2h	equ	0xFDA
 14413                           fsr2l	equ	0xFD9
 14414                           status	equ	0xFD8
 14415                           pclatu	equ	0xFFB
 14416                           pclath	equ	0xFFA
 14417                           tblptru	equ	0xFF8
 14418                           tblptrh	equ	0xFF7
 14419                           tblptrl	equ	0xFF6
 14420                           tablat	equ	0xFF5
 14421                           prodh	equ	0xFF4
 14422                           prodl	equ	0xFF3
 14423                           intcon	equ	0xFF2
 14424                           intcon3	equ	0xFF0
 14425                           indf0	equ	0xFEF
 14426                           postinc0	equ	0xFEE
 14427                           fsr0h	equ	0xFEA
 14428                           fsr0l	equ	0xFE9
 14429                           wreg	equ	0xFE8
 14430                           indf1	equ	0xFE7
 14431                           postdec1	equ	0xFE5
 14432                           fsr1h	equ	0xFE2
 14433                           fsr1l	equ	0xFE1
 14434                           indf2	equ	0xFDF
 14435                           postinc2	equ	0xFDE
 14436                           postdec2	equ	0xFDD
 14437                           fsr2h	equ	0xFDA
 14438                           fsr2l	equ	0xFD9
 14439                           status	equ	0xFD8
 14440                           
 14441                           	psect	rparam
 14442  0000                     pclatu	equ	0xFFB
 14443                           pclath	equ	0xFFA
 14444                           tblptru	equ	0xFF8
 14445                           tblptrh	equ	0xFF7
 14446                           tblptrl	equ	0xFF6
 14447                           tablat	equ	0xFF5
 14448                           prodh	equ	0xFF4
 14449                           prodl	equ	0xFF3
 14450                           intcon	equ	0xFF2
 14451                           intcon3	equ	0xFF0
 14452                           indf0	equ	0xFEF
 14453                           postinc0	equ	0xFEE
 14454                           fsr0h	equ	0xFEA
 14455                           fsr0l	equ	0xFE9
 14456                           wreg	equ	0xFE8
 14457                           indf1	equ	0xFE7
 14458                           postdec1	equ	0xFE5
 14459                           fsr1h	equ	0xFE2
 14460                           fsr1l	equ	0xFE1
 14461                           indf2	equ	0xFDF
 14462                           postinc2	equ	0xFDE
 14463                           postdec2	equ	0xFDD
 14464                           fsr2h	equ	0xFDA
 14465                           fsr2l	equ	0xFD9
 14466                           status	equ	0xFD8
 14467                           
 14468                           	psect	temp
 14469  00007F                     btemp:
 14470                           	opt stack 0
 14471  00007F                     	ds	1
 14472  0000                     int$flags	set	btemp
 14473  0000                     wtemp6	set	btemp+1
 14474                           pclatu	equ	0xFFB
 14475                           pclath	equ	0xFFA
 14476                           tblptru	equ	0xFF8
 14477                           tblptrh	equ	0xFF7
 14478                           tblptrl	equ	0xFF6
 14479                           tablat	equ	0xFF5
 14480                           prodh	equ	0xFF4
 14481                           prodl	equ	0xFF3
 14482                           intcon	equ	0xFF2
 14483                           intcon3	equ	0xFF0
 14484                           indf0	equ	0xFEF
 14485                           postinc0	equ	0xFEE
 14486                           fsr0h	equ	0xFEA
 14487                           fsr0l	equ	0xFE9
 14488                           wreg	equ	0xFE8
 14489                           indf1	equ	0xFE7
 14490                           postdec1	equ	0xFE5
 14491                           fsr1h	equ	0xFE2
 14492                           fsr1l	equ	0xFE1
 14493                           indf2	equ	0xFDF
 14494                           postinc2	equ	0xFDE
 14495                           postdec2	equ	0xFDD
 14496                           fsr2h	equ	0xFDA
 14497                           fsr2l	equ	0xFD9
 14498                           status	equ	0xFD8


Data Sizes:
    Strings     509
    Constant    151
    Data        107
    BSS         450
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65     126
    BANK0           128     38     128
    BANK1           256      0     206
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_42(CODE[1]), STR_40(CODE[1]), STR_37(CODE[1]), STR_34(CODE[2]), 
		 -> STR_33(CODE[2]), STR_32(CODE[2]), current_set(BANK0[5]), STR_31(CODE[2]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), final_set(BANK1[40]), current_set(BANK0[5]), temp_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), final_set(BANK1[40]), current_set(BANK0[5]), temp_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_65(CODE[5]), STR_64(CODE[5]), STR_63(CODE[5]), STR_62(CODE[5]), 
		 -> STR_61(CODE[5]), STR_60(CODE[5]), STR_59(CODE[5]), STR_58(CODE[4]), 
		 -> STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), STR_54(CODE[4]), 
		 -> STR_53(CODE[4]), STR_52(CODE[3]), STR_51(CODE[3]), STR_50(CODE[3]), 
		 -> STR_49(CODE[2]), STR_48(CODE[2]), STR_47(CODE[2]), STR_46(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK0[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[7]), number(COMRAM[2]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_45(CODE[3]), STR_44(CODE[9]), STR_43(CODE[12]), STR_41(CODE[7]), 
		 -> STR_39(CODE[3]), STR_38(CODE[11]), STR_36(CODE[3]), STR_35(CODE[9]), 
		 -> STR_30(CODE[15]), STR_29(CODE[13]), STR_28(CODE[16]), STR_27(CODE[15]), 
		 -> STR_26(CODE[15]), STR_25(CODE[15]), STR_24(CODE[15]), STR_23(CODE[10]), 
		 -> STR_22(CODE[19]), STR_21(CODE[17]), STR_20(CODE[12]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[9]), 
		 -> STR_14(CODE[20]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[21]), 
		 -> STR_10(CODE[11]), STR_9(CODE[13]), STR_8(CODE[18]), STR_7(CODE[11]), 
		 -> STR_6(CODE[13]), STR_5(CODE[19]), STR_4(CODE[11]), STR_3(CODE[13]), 
		 -> STR_2(CODE[15]), STR_1(CODE[12]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), final_set(BANK1[40]), current_set(BANK0[5]), temp_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _get_RTC_final->___wmul
    ___wmul->___awdiv
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   19253
                                             36 BANK0      2     2      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _I2C_sendData
                      _get_RTC_final
                            _initLCD
                         _initialize
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4    7658
                                             14 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_RTC_final                                        1     1      0    6356
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2929
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1312
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0    2092
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2070
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     740
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0   13266
                                             38 COMRAM    27    27      0
                            ___awmod
                              _check
         _generate_compartment_array
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            30    22      8    3206
                                             12 COMRAM    26    18      8
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (6) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _generate_compartment_array                           4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_RTC_final
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble
   _readADC

 _interruptHandler (ROOT)
   ___awmod
   _check
   _generate_compartment_array
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      CE       7       80.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     26      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     294      34        0.0%
DATA                 0      0     294       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 03:04:40 2018

                                  _B 005F                                    _N 005D  
                                  _S 005B                                    _W 0059  
                                  _i 00AA                                    _j 0075  
                 i2_I2C_Master_Start 3B36                           _B_dispense 00FD  
                 i2_I2C_Master_Write 3B14                          _rotate_gear 00FF  
                        __CFG_CPD$ON 000000                         ___awdiv@sign 00BE  
                ___wmul@multiplicand 00C3                   i2___lwdiv@dividend 0001  
                        __CFG_BORV$3 000000                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l350 1CA4  
                                l342 1B88                                  l344 209A  
                                l336 1A78                                  l361 1E94  
                                l354 1D6A                                  l338 1ABE  
                                l371 2290                                  l363 1EF0  
                                l347 1C40                                  l364 1EF8  
                                l356 1DC6                                  l445 2F6A  
                                l357 1DCE                                  l349 1C9C  
                                l366 1FAC                                  l367 1FD6  
                                l800 2370                                  l368 2024  
                                l449 3948                                  l810 250E  
                                l802 2388                                  l803 2380  
                                l820 245A                                  l822 24AC  
                                l831 2576                                  l815 2546  
                                l840 25C6                                  l824 24BC  
                                l816 2422                                  l808 23BC  
                                l825 24B6                                  l817 2428  
                                l834 25FC                                  l818 2450  
                                l835 2590                                  l827 24FC  
                                l819 2460                                  l860 26B8  
                                l844 2626                                  l828 24D0  
                                l861 276E                                  l845 264A  
                                l862 2708                                  l846 2652  
                                l847 2682                                  l839 260C  
                                l856 26B2                                  l848 2668  
                                l857 2774                                  l859 275C  
                                l799 2360                         __CFG_CPB$OFF 000000  
                ?i2_I2C_Master_Start 0001                  ?i2_I2C_Master_Write 0002  
                    _compartment_pos 00A0                         ___awmod@sign 0006  
                                prod 000FF3                        _assembly_step 006B  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                       __CFG_WDT$OFF 000000                                 l1040 318A  
                               l1041 3194                                 l1033 313C  
                               l1042 31A2                                 l1034 314C  
                               l1036 316A                                 l1221 32E8  
                               l1037 3162                                 l1222 32DC  
                               l1225 331C                                 l1226 332A  
                               l1274 366C                                 l4010 24B6  
                               l1275 3664                                 l1195 3A44  
                               l1284 387C                                 l1285 3874  
                               l1278 368C                                 l4014 24D0  
                               l1279 3696                                 l1288 3894  
                               l4040 2594                                 l1289 389E  
                               l5020 20C6                                 l4054 25CA  
                               l4136 2FAC                                 l4146 2FD4  
                               l4156 2EBC                                 l4938 1E94  
                               l4858 1C40                                 l4980 1FD6  
                               l4976 1FAC                                 l4898 1D6A  
                               _ADON 007E10                                 STR_1 FF44  
                               STR_2 FED5                                 STR_3 FF10  
                               STR_4 FF73                                 STR_5 FE2B  
                               STR_6 FF1D                                 STR_7 FF7E  
                               STR_8 FE51                                 STR_9 FF2A  
                               u3100 2FD4                                 _LATA 000F89  
                               u3030 268A                                 _LATB 000F8A  
                               _LATC 000F8B                                 u3040 26A0  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u3060 277E                                 u4100 1F08  
                               u4020 1CB4                                 u2520 316E  
                               u4130 20C6                                 u2620 3880  
                               u4060 1DDE                                 u2445 3986  
                               u2446 3988                                 u5007 21E8  
                               u2560 32EC                                 u2385 30DE  
                               u5017 2214                                 u2386 30E0  
                               u2395 3122                                 u5107 3A9C  
                               u5027 2230                                 u2396 3124  
                               u2820 248E                                 u5117 36FA  
                               u5037 2246                                 u2590 3670  
                               u5127 372E                                 u5047 226A  
                               u5137 3AB4                                 u5057 2286  
                               u5147 30C4                                 u2827 2484  
                               u5067 22C8                                 u2860 24F2  
                               u5157 30CE                                 u5077 22E8  
                               u2775 35C6                                 u5167 3108  
                               u5087 2312                                 u5177 3112  
                               u5097 232E                                 u2867 24E8  
                               u4807 1BAE                                 u4817 1C28  
                               u3970 1B86                                 u4907 204A  
                               u4827 1CEC                                 u4917 2066  
                               u4837 1D08                                 u4927 20FA  
                               u4847 1E16                                 u4937 2116  
                               u4857 1E32                                 u4947 212C  
                               u4867 1F40                                 u4787 1B08  
                               u4957 2158                                 u4877 1F5C  
                               u4797 1B50                                 u4967 2174  
                               u4887 1F96                                 u4977 218A  
                               u4897 2014                                 u4987 21B6  
                               u4997 21D2                                 _main 1A44  
           __end_of_interruptHandler 1A44                                 _keys FD6B  
                               _mode 00EF                                 _temp 0076  
                               _time 0052                                 _prev 00A2  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                 i2___lwdiv@quotient 0005                                 indf0 000FEF  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 007F                                 _strs FD9E  
               ??i2_I2C_Master_Start 0002                 ??i2_I2C_Master_Write 0004  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                    __end_ofi2_putch 3AE4                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000                          i2_lcdNibble 31AC  
                   __end_of_LCD_LEFT FD99                         _total_number 0063  
              I2C_Master_Read@ackBit 00BA                     ?_I2C_Master_Init 00C6  
                   ?_I2C_Master_Read 0001       generate_compartment_array@step 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
                              ?_main 0001                      __end_of___awdiv 31AC  
                              STR_10 FF89                                STR_11 FE02  
                              STR_12 FE28                                STR_20 FF50  
                              STR_13 FE28                                STR_21 FE96  
                              STR_30 FEB7                                STR_22 FE3E  
                              STR_14 FE17                                STR_31 FFFD  
                              STR_15 FFB0                                STR_23 FF94  
                              STR_40 FEC5                                STR_32 FFEC  
                              STR_24 FEE4                                STR_16 FEC6  
                              STR_33 FFF0                                STR_41 FFC0  
                              STR_17 FF02                                STR_25 FEF3  
                              STR_42 FEC5                                STR_50 FFEB  
                              STR_34 FFF4                                STR_26 FEE4  
                              STR_18 FE74                                STR_51 FFEF  
                              STR_27 FEF3                                STR_35 FF9E  
                              STR_43 FF5C                                STR_19 FE85  
                              STR_52 FFF3                                STR_36 FFFA  
                              STR_60 FFE0                                STR_44 FFA7  
                              STR_28 FEA7                      __end_of___awmod 352C  
                              STR_37 FEC5                                STR_53 FFEA  
                              STR_61 FFD6                                STR_29 FF37  
                              STR_46 FFFD                                STR_54 FFEE  
                              STR_62 FFCC                                STR_38 FF68  
                              STR_47 FFEC                                STR_39 FFFA  
                              STR_55 FFF2                                STR_63 FFD1  
                              STR_48 FFF0                                STR_56 FFCD  
                              STR_64 FFC7                                STR_49 FFF4  
                              STR_57 FFD7                                STR_65 FFE5  
                              STR_58 FFF6                                STR_66 FFB9  
                              STR_59 FFDB                                STR_67 FE63  
                    __end_of___lldiv 333C                      ___awdiv@divisor 00BB  
                    __end_of___lwdiv 36A0                      __end_of___lwmod 38A8  
                              i2l400 12B2                                i2l401 144C  
                              i2l410 1418                                i2l402 1300  
                              i2l411 143E                                i2l412 178C  
                              i2l404 1346                                i2l421 16BA  
                              i2l413 1464                                i2l430 18E8  
                              i2l422 172E                                i2l414 14A4  
                              i2l406 138C                                i2l431 1864  
                              i2l415 14E4                                i2l440 19CE  
                              i2l432 186C                                i2l416 1524  
                              i2l408 13D2                                i2l433 1874  
                              i2l417 1564                                i2l434 187C  
                              i2l418 1736                                i2l435 1886  
                              i2l419 15BC                                i2l700 0596  
                              i2l436 1948                                i2l428 18AE  
                              i2l429 185C                                i2l710 0A06  
                              i2l702 0684                                i2l438 1998  
                              i2l391 102E                                i2l383 0EEA  
                              i2l712 0AF6                                i2l704 0772  
                              i2l800 27B6                                i2l393 1154  
                              i2l730 2DF0                                i2l714 0BE6  
                              i2l706 0826                                i2l810 2940  
                              i2l802 27CA                                i2l394 1056  
                              i2l386 1010                                i2l731 2BB8  
                              i2l803 27C4                                i2l387 0F12  
                              i2l724 3586                                i2l716 0CD6  
                              i2l708 0916                                i2l820 2894  
                              i2l396 10A6                                i2l733 2BFC  
                              i2l389 0F62                                i2l734 2C50  
                              i2l718 0D9C                                i2l822 28E2  
                              i2l398 128E                                i2l735 2CB4  
                              i2l831 29A4                                i2l815 2976  
                              i2l736 2D28                                i2l840 29F4  
                              i2l824 28F2                                i2l816 285E  
                              i2l808 27FC                                i2l737 2DAC  
                              i2l825 28EC                                i2l817 2862  
                              i2l690 023A                                i2l682 0074  
                              i2l834 2A2A                                i2l818 288A  
                              i2l835 29BE                                i2l827 292E  
                              i2l819 2898                                i2l692 02DA  
                              i2l684 00D6                                i2l860 2AE0  
                              i2l844 2A54                                i2l828 2904  
                              i2l861 2B8C                                i2l845 2A78  
                              i2l694 037A                                i2l686 0138  
                              i2l862 2B2A                                i2l846 2A80  
                              i2l847 2AAC                                i2l839 2A3A  
                              i2l696 042E                                i2l688 019A  
                              i2l856 2ADA                                i2l848 2A96  
                              i2l857 2B92                                i2l698 04E2  
                              i2l859 2B7C                      ___awdiv@counter 00BD  
                              i2l799 27A6                                _PORTB 000F81  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _B_max 01CA  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                              _N_max 01C8                        __CFG_WRT3$OFF 000000  
                    __end_of_lcdInst 3ABC                        _N_spacingTime 012C  
                              _S_max 01C6                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                              _W_max 01C4                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_readADC 3966                      __end_of_initLCD 373E  
                              _check 352C                       __CFG_EBTRB$OFF 000000  
                         i2isdigit@c 0003                                _angle 0132  
                    __end_of_dpowers FD86                                _array FD95  
                              _error 0130                      __end_of_isdigit 3A4C  
                              _valid 0065                                _state 006D  
                              _putch 3A8C                    _compartment_array 00DF  
                         _N_dispense 00FC                                pclath 000FFA  
                              tablat 000FF5                    _LCDinterruptState 00AE  
                   __end_ofi2___wmul 3A06                                status 000FD8  
        I2C_Master_Read@receivedByte 00BB                                wtemp6 0080  
                    __end_of_strncmp 32B8                   __size_ofi2___awdiv 0084  
                     __CFG_PBADEN$ON 000000                        i2printf@width 0024  
              __size_of_I2C_sendData 0028                   __size_ofi2___lldiv 0082  
                   __end_ofi2_printf 2BB6                   __size_ofi2___lwdiv 0052  
                 __size_ofi2___lwmod 0042                      __initialization 3442  
                  i2___lldiv@divisor 0005                   __size_ofi2_lcdInst 0014  
                       __end_of_main 2354                    i2___lldiv@counter 000D  
                       __end_of_keys FD7C                           i2printf@ap 001D  
                         i2printf@cp 001B                         __end_of_strs FE02  
                 __size_ofi2_initLCD 004C                   __size_ofi2_isdigit 001E  
                     __CFG_OSC$HSPLL 000000                    __end_of_LCD_RIGHT FD9A  
                             ??_main 00DD                           _S_dispense 00FB  
                      __activetblptr 000003                    ?_I2C_Master_Start 0001  
                  ?_I2C_Master_Write 00BA                               ?_check 0001  
                 ??_I2C_Master_Start 00BA                               _ADCON0 000FC2  
                             _ADCON1 000FC1                   ??_I2C_Master_Write 00BC  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   ___awdiv@dividend 00B9                      i2lcdNibble@data 0002  
                             ?_putch 0001                         _I2C_sendData 39B8  
                    i2lcdNibble@temp 0001                               _INT1IE 007F83  
                             _INT1IF 007F80                               i2l1040 339E  
                             i2l1041 33A8                               i2l1033 3350  
                             i2l1050 34EA                               i2l1042 33B6  
                             i2l1034 3360                               i2l1036 337E  
                             i2l1053 350A                               i2l1221 33EE  
                             i2l1037 3376                               i2l1054 3514  
                             i2l1046 34D0                               i2l1222 33E2  
                             i2l1055 3522                               i2l1047 34DC  
                             i2l1049 34F2                               i2l1225 3422  
                             i2l1226 3430                               i2l1421 3910  
                             i2l1422 3908                               i2l1441 329E  
                             i2l1418 38F8                               i2l1442 3234  
                             i2l1274 36BE                               i2l1427 37DE  
                             i2l1419 38F4                               i2l1435 3830  
                             i2l1443 3296                               i2l1275 36B6  
                             i2l1195 3A84                               i2l1428 37D6  
                             i2l1436 3828                               i2l1284 38BE  
                             i2l1285 38B6                               i2l1278 36DE  
                             i2l1279 36E8                               i2l1288 38D6  
                             i2l1289 38E0                               i2l4204 3234  
                             i2l5142 0F5A                               i2l4602 2904  
                             i2l5510 19F8                               i2l5168 102A  
                             i2l4458 357C                               i2l4642 29F8  
                             i2l4628 29C2                               i2l5508 19F6  
                             i2l5188 109E                               i2l5396 16C8  
                             i2l4598 28EC                            ??i2_putch 0003  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                             _B_done 0126                      _openHandle_data 00AD  
                             _N_done 0124                               _S_done 0122  
                     __CFG_XINST$OFF 000000                               _W_done 0120  
                             ___wmul 3990                            ??___awdiv 00BD  
                     __CFG_STVREN$ON 000000                            ??___awmod 0005  
                          ??___lldiv 00C1                            ??___lwdiv 00BD  
                          ??___lwmod 00C4                     __end_of_is_valid 0E62  
                             clear_0 3488                               clear_1 3494  
                             clear_2 34A0                               clear_3 34AC  
                   ___awdiv@quotient 00BF                      ___awmod@divisor 0003  
                             _number 007D                      ___awmod@counter 0005  
                          ??_lcdInst 00BB                               _printf 2354  
                             _strcat 38EA                               _strcmp 37D4  
                             _strcpy 381E                       i2___awdiv@sign 0006  
                          ??_readADC 00BB                            ??_initLCD 00BC  
                 _compartment_number 0042                            ??_isdigit 00B9  
                  __end_ofi2___awdiv 33C0                    __end_ofi2___lldiv 3442  
                  __end_ofi2___lwdiv 36F2                         __mediumconst FD6A  
                  __end_ofi2___lwmod 38EA                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                  __end_ofi2_lcdInst 3AF8                            ??_strncmp 000D  
                  __end_ofi2_initLCD 378A                    __end_ofi2_isdigit 3A8C  
                         __accesstop 0080              __end_of__initialization 34B2  
              __end_of_get_RTC_final 309E                        ___rparam_used 000001  
                 i2___lwmod@dividend 0008                 __end_of_happynewyear FD95  
                     __pcstackCOMRAM 0001                   i2___lldiv@dividend 0001  
                       __pidataBANK0 3A4C                         __pidataBANK1 378A  
            i2I2C_Master_Read@ackBit 0002                        __end_of_check 3590  
                      __end_of_array FD98                        __end_of_putch 3AA4  
                        i2printf@idx 0019                          i2printf@len 001F  
                        i2printf@val 0021                        _B_spacingTime 012E  
                          ?i2___wmul 0001                   __size_of_lcdNibble 0088  
                        i2putch@data 0003                            ?i2_printf 000D  
                            ??_check 0003                              ??_putch 00BB  
                 i2___lldiv@quotient 0009                           __pbssBANK0 0080  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                  ?_interruptHandler 0001                   ??_interruptHandler 0027  
                      _init_position 01CC                         ?i2_lcdNibble 0001  
                            ?___wmul 00C1           i2I2C_Master_Init@clockFreq 000E  
                            ?_printf 00C7                              ?_strcat 0001  
                            ?_strcmp 0001                              ?_strcpy 0007  
                         ??i2___wmul 0005                         _gear_counter 00A4  
                         _final_time 0080                           ??i2_printf 0015  
               lcd@LCDinterruptState 0077                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
                            _B_array 01B4                              i2_putch 3AD0  
                          ?_is_valid 0001                              _N_array 0194  
        __size_ofi2_I2C_Master_Start 0008                    __end_of_lcdNibble 3126  
        __size_ofi2_I2C_Master_Write 000A                              _S_array 01A4  
                            __Hparam 0000                           _hr_initial 008E  
                            __Lparam 0000                              _W_array 0184  
                            ___awdiv 3126                              ___awmod 34BC  
                            ___lldiv 32B8                      __size_of___wmul 0028  
                            ___lwdiv 364C                              ___lwmod 3864  
           interruptHandler@keypress 0040                              __pcinit 3442  
                            __ramtop 1000                           _initialize 2E22  
                            _lcdInst 3AA4                              __ptext0 1A44  
                            __ptext1 392C                              __ptext2 2354  
                            __ptext3 3A8C                              __ptext4 3A2A  
                            __ptext5 3864                              __ptext6 364C  
                            __ptext7 2E22                              __ptext8 36F2  
                            __ptext9 3AA4                      __size_of_printf 0448  
                    __size_of_strcat 0042                      __size_of_strcmp 004A  
                            _readADC 392C                      __size_of_strcpy 0046  
                            _initLCD 36F2                    __end_of_hexpowers FD8E  
                            _counter 0069                              _dpowers FD7C  
                            _isdigit 3A2A                     ___awmod@dividend 0001  
                          _LCD_RIGHT FD99             __size_of_I2C_Master_Init 0060  
           __size_of_I2C_Master_Read 002A             __size_of_I2C_Master_Wait 0014  
           __size_of_I2C_Master_Stop 0008                        _S_spacingTime 012A  
                            _strncmp 3232                       __pintcode_body 0E62  
               end_of_initialization 34B2                __end_of_LCD_SIZE_HORZ FD9C  
              __end_of_LCD_SIZE_VERT FD9B         ??_generate_compartment_array 0003  
                       _final_number 0110                              int_func 0E62  
                i2___wmul@multiplier 0001                           ??_is_valid 0007  
                     _operation_done 00A6            __size_of_I2C_Master_Start 0008  
          __size_of_I2C_Master_Write 000A                      ___lldiv@divisor 00BD  
                       _close_handle 00F1                      ___lldiv@counter 00C5  
                            printf@c 00DC                              printf@f 00C7  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                            strcmp@r 0006                            _PORTAbits 000F80  
                         _prev_state 0061                           _servo_ramp 00F2  
__size_of_generate_compartment_array 026C                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                  i2_I2C_Master_Init 35F0                    i2_I2C_Master_Read 3A06  
                  i2_I2C_Master_Wait 3AF8                         _happynewyear FD8E  
                  i2_I2C_Master_Stop 3B2E                            i2___awdiv 333C  
                         _white_tape 00A8                            _B_counter 009E  
                  i2___lwdiv@divisor 0003                            i2___lldiv 33C0  
                          i2___lwdiv 36A0                            i2___lwmod 38A8  
                 ?i2_I2C_Master_Init 000E                    i2___lwdiv@counter 0007  
                 ?i2_I2C_Master_Read 0001                   ?i2_I2C_Master_Wait 0001  
                 ?i2_I2C_Master_Stop 0001                            i2_lcdInst 3AE4  
                        printf@width 00DA                            i2_initLCD 373E  
                 i2___awdiv@dividend 0001                  ??i2_I2C_Master_Init 0012  
                ??i2_I2C_Master_Read 0002                            i2_isdigit 3A6E  
                ??i2_I2C_Master_Wait 0001                  ??i2_I2C_Master_Stop 0002  
                     __end_of___wmul 39B8                 __size_ofi2_lcdNibble 0086  
                        ?_initialize 0001                        i2lcdInst@data 0003  
                   i2___wmul@product 0005                       __end_of_printf 279C  
                          _N_counter 009A                       __end_of_strcat 392C  
                     __end_of_strcmp 381E                         i2printf@flag 0023  
                     __end_of_strcpy 3864            __end_ofi2_I2C_Master_Init 364C  
          __end_ofi2_I2C_Master_Read 3A2A            __end_ofi2_I2C_Master_Wait 3B0A  
                       i2printf@prec 001A                  start_initialization 3442  
          __end_ofi2_I2C_Master_Stop 3B36                   i2___awdiv@quotient 0007  
                  __size_ofi2___wmul 0026                            i2printf@c 0026  
                          i2printf@f 000D                           ?i2___awdiv 0001  
                         ?i2___lldiv 0001                           ?i2___lwdiv 0001  
                         ?i2___lwmod 0008                    __size_ofi2_printf 041A  
                          _S_counter 009C                    ??_I2C_Master_Init 00CA  
                  ??_I2C_Master_Read 00BA                    ??_I2C_Master_Wait 00B9  
                         ?i2_lcdInst 0001                    ??_I2C_Master_Stop 00BA  
                       _counter_step 0067                           ?i2_initLCD 0001  
                         ?i2_isdigit 0001                            _W_counter 0098  
                  interruptHandler@i 003E                             ??___wmul 00C5  
           I2C_Master_Init@clockFreq 00C6                          __pdataBANK0 00DF  
                        __pdataBANK1 0184                     __CFG_LPT1OSC$OFF 000000  
                           ??_printf 00CB            __size_of_interruptHandler 1A3C  
                           ??_strcat 0005                             ??_strcmp 0005  
                           ??_strcpy 000B               __size_of_get_RTC_final 0132  
                        __pbssCOMRAM 0042                          _change_mode 0073  
                      __pcstackBANK0 00B9                    i2___lwmod@divisor 000A  
                  i2___lwmod@counter 000C                         _isdigit$1254 00BA  
 __end_of_generate_compartment_array 2E22           _generate_compartment_array 2BB6  
                           ?i2_putch 0001                  __size_of_initialize 014A  
                       _current_set2 0078                     _I2C_Master_Start 3B26  
                   _I2C_Master_Write 3B0A                    __size_of_is_valid 0E50  
                   ___lwdiv@dividend 00B9                         _initial_time 0088  
                  __CFG_CCP2MX$PORTC 000000                            __pintcode 0008  
                      __pmediumconst FD6A                            _lcdNibble 309E  
                           ?___awdiv 00B9                             ?___awmod 0001  
                           ?___lldiv 00B9                             ?___lwdiv 00B9  
                           ?___lwmod 00C0                            _final_set 015C  
                           ?_lcdInst 0001                             ?_readADC 00B9  
                           ?_initLCD 0001                             ?_isdigit 0001  
         __size_ofi2_I2C_Master_Init 005C           __size_ofi2_I2C_Master_Read 0024  
         __size_ofi2_I2C_Master_Wait 0012           __size_ofi2_I2C_Master_Stop 0008  
                          _hexpowers FD86                       __size_of_check 0064  
                   ___lwdiv@quotient 00BD                          ??i2___awdiv 0005  
                        ??i2___lldiv 0009                        _W_spacingTime 0128  
                      ?_I2C_sendData 0001                            _min_final 0084  
                           ?_strncmp 0007                          ??i2___lwdiv 0005  
                        ??i2___lwmod 000C                       __size_of_putch 0018  
                          _sec_final 0082                             _LCD_LEFT FD98  
         __end_ofi2_I2C_Master_Start 3B3E           __end_ofi2_I2C_Master_Write 3B1E  
                        ??i2_lcdInst 0003                       ___wmul@product 00C5  
                           _LATDbits 000F8C                          ??i2_initLCD 0004  
                        ??i2_isdigit 0001                        _get_RTC_final 2F6C  
                      _operationTime 006F                             i2u313_40 385A  
                           i2u313_47 3850                             i2u242_45 31EA  
                           i2u242_46 31EC                             i2u243_45 322E  
                           i2u243_46 3230                             i2u340_40 353C  
                           i2u341_40 354C                             i2u421_40 0F7E  
                           i2u342_40 355C                             i2u246_40 3812  
                           i2u318_40 3262                             i2u343_40 356C  
                           i2u351_45 3624                             i2u344_40 357C  
                           i2u272_40 36C2                             i2u352_45 3A22  
                           i2u352_46 3A24                             i2u520_47 10DA  
                           i2u361_40 2926                             i2u361_47 291C  
                           i2u521_47 1130                             i2u450_40 1746  
                           i2u426_40 1052                             i2u530_47 17CC  
                           i2u522_47 126A                             i2u275_40 38C2  
                           i2u419_40 0F0E                             i2u531_47 18A0  
                           i2u523_47 127E                             i2u348_40 34F6  
                           i2u428_40 10C2                             i2u540_47 3214  
                           i2u532_47 1908                             i2u524_47 1432  
                           i2u269_40 33F2                             i2u381_40 2B9A  
                           i2u357_40 28C6                             i2u429_40 1150  
                           i2u541_47 321E                             i2u357_47 28BC  
                           i2u533_47 1928                             i2u525_47 158E  
                           i2u446_40 15BA                             i2u534_47 3ADC  
                           i2u526_47 1662                             i2u518_47 0F96  
                           i2u535_47 3744                             i2u527_47 16A2  
                           i2u519_47 0FEC                            _operation 0071  
                           i2u448_40 16C8                             i2u536_47 3778  
                           i2u528_47 1712                             i2u537_47 3AF0  
                           i2u529_47 1760                             i2u386_40 3382  
                           i2u378_40 2AB4                             i2u538_47 31D0  
                           i2u379_40 2AC8                             i2u539_47 31DA  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
      i2I2C_Master_Write@byteToWrite 0002                            _nuts_data 00AC  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 00C1  
                           i2___wmul 39E0                        lcdNibble@data 00BA  
                           _B_remain 0096                           printf@flag 00D9  
                      lcdNibble@temp 00B9                           printf@prec 00D0  
                  i2___awdiv@divisor 0003                    i2___awdiv@counter 0005  
                           i2_printf 279C                       ??_I2C_sendData 00BC  
                     _LCD_HORZ_LIMIT FD9D                            copy_data0 3456  
                          copy_data1 3476                 interruptHandler@temp 0041  
                           _N_remain 0094                     __size_ofi2_putch 0014  
                     ?_get_RTC_final 0001                             _S_remain 0092  
                           __Hrparam 0000                I2C_sendData@char_data 00BC  
                           __Lrparam 0000                             _W_remain 0090  
                 __CFG_BOREN$SBORDIS 000000                     __size_of___awdiv 0086  
                   __size_of___awmod 0070                i2___wmul@multiplicand 0003  
                   __size_of___lldiv 0084                  _rotate_1compartment 00FE  
                   __size_of___lwdiv 0054                     __size_of___lwmod 0044  
                     readADC@channel 00BD                         ??_initialize 00B9  
                   _interruptHandler 0008                     __size_of_lcdInst 0018  
                    _I2C_Master_Init 3590                     __size_of_readADC 003A  
                    _I2C_Master_Read 3966                     __size_of_initLCD 004C  
                        _current_set 00B4                      _I2C_Master_Wait 3ABC  
                         strcat@from 0003                      _I2C_Master_Stop 3B1E  
             __end_of_LCD_HORZ_LIMIT FD9E                     __size_of_isdigit 0022  
                    ___lwdiv@divisor 00BB                      ___lwdiv@counter 00BF  
                           __ptext10 309E                             __ptext11 2F6C  
                           __ptext20 3590                             __ptext12 3990  
                           __ptext21 32B8                             __ptext13 3126  
                           __ptext30 31AC                             __ptext14 3966  
                           __ptext31 333C                             __ptext23 279C  
                           __ptext15 39B8                             __ptext40 381E  
                           __ptext32 3B14                             __ptext24 3AD0  
                           __ptext16 3B0A                             __ptext41 38EA  
                           __ptext33 3B2E                             __ptext25 3A6E  
                           __ptext17 3B1E                             __ptext42 0012  
                           __ptext34 3B36                             __ptext26 38A8  
                           __ptext18 3B26                             __ptext43 39E0  
                           __ptext35 3A06                             __ptext27 36A0  
                           __ptext19 3ABC                             __ptext44 37D4  
                           __ptext36 3AF8                             __ptext28 373E  
                           __ptext45 2BB6                             __ptext37 35F0  
                           __ptext29 3AE4                             __ptext46 352C  
                           __ptext38 33C0                             __ptext47 34BC  
                           __ptext39 3232                             _fastener 0200  
                     _LCD_VERT_LIMIT FD9C                          _min_initial 008C  
                   __size_of_strncmp 0086                             _hr_final 0086  
                         strcpy@from 0009                       i2_isdigit$1254 0002  
                      __size_of_main 0910                             _is_valid 0012  
                         strncmp@len 000B                   __end_of_initialize 2F6C  
                        _sec_initial 008A                             _temp_set 00AF  
                      ??i2_lcdNibble 0001                          ??_lcdNibble 00B9  
                           _prev_set 0134                             int$flags 007F  
                          printf@idx 00CF                            printf@len 00D5  
                          printf@val 00D7          I2C_Master_Write@byteToWrite 00BA  
                          putch@data 00BB             __end_of_I2C_Master_Start 3B2E  
           __end_of_I2C_Master_Write 3B14                           _INTCONbits 000FF2  
                       _motorStart_0 00FA                         _motorStart_1 00F8  
                       _motorStart_2 00F6                         _motorStart_3 00F4  
             __end_of_LCD_VERT_LIMIT FD9D                             isdigit@c 00BB  
                           intlevel2 0000          ?_generate_compartment_array 0001  
                    ??_get_RTC_final 00C7                        _LCD_SIZE_HORZ FD9B  
                   ___lwmod@dividend 00C0                        _LCD_SIZE_VERT FD9A  
                   ___lldiv@dividend 00B9                            strncmp@s1 0007  
                          strncmp@s2 0009                             printf@ap 00D3  
                           printf@cp 00D1                 __end_of_I2C_sendData 39E0  
            __end_of_I2C_Master_Init 35F0              __end_of_I2C_Master_Read 3990  
            __end_of_I2C_Master_Wait 3AD0              __end_of_I2C_Master_Stop 3B26  
                        lcdInst@data 00BB                          _motorStop_0 00F9  
                        _motorStop_1 00F7                          _motorStop_2 00F5  
                        _motorStop_3 00F3                  __end_ofi2_lcdNibble 3232  
                           strcat@cp 0005                             strcat@to 0001  
                           strcmp@s1 0001                             strcmp@s2 0003  
                   ___lldiv@quotient 00C1                      ___lwmod@divisor 00C2  
                           strcpy@cp 000B                             strcpy@to 0007  
                    ___lwmod@counter 00C4                          _SSPCON1bits 000FC6  
                        _SSPCON2bits 000FC5                          _prev_number 0100  
      i2I2C_Master_Read@receivedByte 0003  
