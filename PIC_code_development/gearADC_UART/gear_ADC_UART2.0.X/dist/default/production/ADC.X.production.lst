

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 16 16:12:49 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  001404                     __pidataCOMRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _mode
    63  001404  0001               	dw	1
    64                           
    65                           	psect	smallconst
    66  001000                     __psmallconst:
    67                           	opt stack 0
    68  001000  00                 	db	0
    69  001001                     _dpowers:
    70                           	opt stack 0
    71  001001  0001               	dw	1
    72  001003  000A               	dw	10
    73  001005  0064               	dw	100
    74  001007  03E8               	dw	1000
    75  001009  2710               	dw	10000
    76  00100B                     __end_of_dpowers:
    77                           	opt stack 0
    78  00100B                     _LCD_LEFT:
    79                           	opt stack 0
    80  00100B  00                 	db	0
    81  00100C                     __end_of_LCD_LEFT:
    82                           	opt stack 0
    83  00100C                     _LCD_RIGHT:
    84                           	opt stack 0
    85  00100C  01                 	db	1
    86  00100D                     __end_of_LCD_RIGHT:
    87                           	opt stack 0
    88  00100D                     _LCD_SIZE_VERT:
    89                           	opt stack 0
    90  00100D  02                 	db	2
    91  00100E                     __end_of_LCD_SIZE_VERT:
    92                           	opt stack 0
    93  00100E                     _LCD_SIZE_HORZ:
    94                           	opt stack 0
    95  00100E  10                 	db	16
    96  00100F                     __end_of_LCD_SIZE_HORZ:
    97                           	opt stack 0
    98  00100F                     _LCD_VERT_LIMIT:
    99                           	opt stack 0
   100  00100F  02                 	db	2
   101  001010                     __end_of_LCD_VERT_LIMIT:
   102                           	opt stack 0
   103  001010                     _LCD_HORZ_LIMIT:
   104                           	opt stack 0
   105  001010  28                 	db	40
   106  001011                     __end_of_LCD_HORZ_LIMIT:
   107                           	opt stack 0
   108  0000                     _INTCONbits	set	4082
   109  0000                     _LATDbits	set	3980
   110  0000                     _ADRESL	set	4035
   111  0000                     _ADRESH	set	4036
   112  0000                     _ADCON0bits	set	4034
   113  0000                     _ADCON2bits	set	4032
   114  0000                     _ADCON1	set	4033
   115  0000                     _ADCON0	set	4034
   116  0000                     _TRISE	set	3990
   117  0000                     _TRISD	set	3989
   118  0000                     _TRISC	set	3988
   119  0000                     _TRISB	set	3987
   120  0000                     _TRISA	set	3986
   121  0000                     _LATE	set	3981
   122  0000                     _LATD	set	3980
   123  0000                     _LATC	set	3979
   124  0000                     _LATB	set	3978
   125  0000                     _LATA	set	3977
   126  0000                     _OSCCON	set	4051
   127  0000                     _ADON	set	32272
   128  001011                     STR_1:
   129  001011  6C                 	db	108	;'l'
   130  001012  61                 	db	97	;'a'
   131  001013  6C                 	db	108	;'l'
   132  001014  61                 	db	97	;'a'
   133  001015  00                 	db	0
   134  001016                     STR_2:
   135  001016  25                 	db	37
   136  001017  64                 	db	100	;'d'
   137  001018  00                 	db	0
   138                           
   139                           ; #config settings
   140  001019  00                 	db	0	; dummy byte at the end
   141  0000                     
   142                           	psect	cinit
   143  0013B2                     __pcinit:
   144                           	opt stack 0
   145  0013B2                     start_initialization:
   146                           	opt stack 0
   147  0013B2                     __initialization:
   148                           	opt stack 0
   149                           
   150                           ; Initialize objects allocated to COMRAM (2 bytes)
   151                           ; load TBLPTR registers with __pidataCOMRAM
   152  0013B2  0E04               	movlw	low __pidataCOMRAM
   153  0013B4  6EF6               	movwf	tblptrl,c
   154  0013B6  0E14               	movlw	high __pidataCOMRAM
   155  0013B8  6EF7               	movwf	tblptrh,c
   156  0013BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   157  0013BC  6EF8               	movwf	tblptru,c
   158  0013BE  0009               	tblrd		*+	;fetch initializer
   159  0013C0  CFF5 F01F          	movff	tablat,__pdataCOMRAM
   160  0013C4  0009               	tblrd		*+	;fetch initializer
   161  0013C6  CFF5 F020          	movff	tablat,__pdataCOMRAM+1
   162                           
   163                           ; Clear objects allocated to COMRAM (4 bytes)
   164  0013CA  6A1E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   165  0013CC  6A1D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   166  0013CE  6A1C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   167  0013D0  6A1B               	clrf	__pbssCOMRAM& (0+255),c
   168  0013D2                     end_of_initialization:
   169                           	opt stack 0
   170  0013D2                     __end_of__initialization:
   171                           	opt stack 0
   172  0013D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   173  0013D4  6EF8               	movwf	tblptru,c
   174  0013D6  0100               	movlb	0
   175  0013D8  EF9C  F008         	goto	_main	;jump to C main() function
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           tblptrl	equ	0xFF6
   179                           tablat	equ	0xFF5
   180                           
   181                           	psect	bssCOMRAM
   182  00001B                     __pbssCOMRAM:
   183                           	opt stack 0
   184  00001B                     _counter:
   185                           	opt stack 0
   186  00001B                     	ds	2
   187  00001D                     lcd@LCDinterruptState:
   188                           	opt stack 0
   189  00001D                     	ds	1
   190  00001E                     	ds	1
   191                           tblptru	equ	0xFF8
   192                           tblptrh	equ	0xFF7
   193                           tblptrl	equ	0xFF6
   194                           tablat	equ	0xFF5
   195                           
   196                           	psect	dataCOMRAM
   197  00001F                     __pdataCOMRAM:
   198                           	opt stack 0
   199  00001F                     _mode:
   200                           	opt stack 0
   201  00001F                     	ds	2
   202                           tblptru	equ	0xFF8
   203                           tblptrh	equ	0xFF7
   204                           tblptrl	equ	0xFF6
   205                           tablat	equ	0xFF5
   206                           
   207                           	psect	cstackCOMRAM
   208  000001                     __pcstackCOMRAM:
   209                           	opt stack 0
   210  000001                     ?_readADC:
   211                           	opt stack 0
   212  000001                     ?___lwdiv:
   213                           	opt stack 0
   214  000001                     lcdNibble@temp:
   215                           	opt stack 0
   216  000001                     ___lwdiv@dividend:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x0
   220  000001                     	ds	1
   221  000002                     lcdNibble@data:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x1
   225  000002                     	ds	1
   226  000003                     ??_readADC:
   227  000003                     lcdInst@data:
   228                           	opt stack 0
   229  000003                     putch@data:
   230                           	opt stack 0
   231  000003                     ___lwdiv@divisor:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x2
   235  000003                     	ds	1
   236  000004                     ??_initLCD:
   237                           
   238                           ; 1 bytes @ 0x3
   239  000004                     	ds	1
   240  000005                     readADC@channel:
   241                           	opt stack 0
   242  000005                     ___lwdiv@quotient:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x4
   246  000005                     	ds	2
   247  000007                     ___lwdiv@counter:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x6
   251  000007                     	ds	1
   252  000008                     ?___lwmod:
   253                           	opt stack 0
   254  000008                     ___lwmod@dividend:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x7
   258  000008                     	ds	2
   259  00000A                     ___lwmod@divisor:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x9
   263  00000A                     	ds	2
   264  00000C                     ___lwmod@counter:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0xB
   268  00000C                     	ds	1
   269  00000D                     ?_printf:
   270                           	opt stack 0
   271  00000D                     printf@f:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0xC
   275  00000D                     	ds	4
   276  000011                     ??_printf:
   277                           
   278                           ; 1 bytes @ 0x10
   279  000011                     	ds	1
   280  000012                     printf@ap:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x11
   284  000012                     	ds	2
   285  000014                     printf@flag:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x13
   289  000014                     	ds	1
   290  000015                     printf@prec:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x14
   294  000015                     	ds	1
   295  000016                     printf@val:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x15
   299  000016                     	ds	2
   300  000018                     printf@c:
   301                           	opt stack 0
   302                           
   303                           ; 1 bytes @ 0x17
   304  000018                     	ds	1
   305  000019                     ??_main:
   306                           
   307                           ; 1 bytes @ 0x18
   308  000019                     	ds	2
   309                           tblptru	equ	0xFF8
   310                           tblptrh	equ	0xFF7
   311                           tblptrl	equ	0xFF6
   312                           tablat	equ	0xFF5
   313                           
   314 ;;
   315 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   316 ;;
   317 ;; *************** function _main *****************
   318 ;; Defined at:
   319 ;;		line 27 in file "main.c"
   320 ;; Parameters:    Size  Location     Type
   321 ;;		None
   322 ;; Auto vars:     Size  Location     Type
   323 ;;		None
   324 ;; Return value:  Size  Location     Type
   325 ;;                  1    wreg      void 
   326 ;; Registers used:
   327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   328 ;; Tracked objects:
   329 ;;		On entry : 0/0
   330 ;;		On exit  : 0/0
   331 ;;		Unchanged: 0/0
   332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   335 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   337 ;;Total ram usage:        2 bytes
   338 ;; Hardware stack levels required when called:    3
   339 ;; This function calls:
   340 ;;		_initLCD
   341 ;;		_lcdInst
   342 ;;		_printf
   343 ;;		_readADC
   344 ;; This function is called by:
   345 ;;		Startup code after reset
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           	psect	text0
   350  001138                     __ptext0:
   351                           	opt stack 0
   352  001138                     _main:
   353                           	opt stack 28
   354                           
   355                           ;main.c: 31: OSCCON = 0xF2;
   356                           
   357                           ;incstack = 0
   358  001138  0EF2               	movlw	242
   359  00113A  6ED3               	movwf	4051,c	;volatile
   360                           
   361                           ;main.c: 36: LATA = 0x00;
   362  00113C  0E00               	movlw	0
   363  00113E  6E89               	movwf	3977,c	;volatile
   364                           
   365                           ;main.c: 37: LATB = 0x00;
   366  001140  0E00               	movlw	0
   367  001142  6E8A               	movwf	3978,c	;volatile
   368                           
   369                           ;main.c: 38: LATC = 0x00;
   370  001144  0E00               	movlw	0
   371  001146  6E8B               	movwf	3979,c	;volatile
   372                           
   373                           ;main.c: 39: LATD = 0x00;
   374  001148  0E00               	movlw	0
   375  00114A  6E8C               	movwf	3980,c	;volatile
   376                           
   377                           ;main.c: 40: LATE = 0x00;
   378  00114C  0E00               	movlw	0
   379  00114E  6E8D               	movwf	3981,c	;volatile
   380                           
   381                           ;main.c: 44: TRISA = 0xFF;
   382  001150  6892               	setf	3986,c	;volatile
   383                           
   384                           ;main.c: 45: TRISB = 0xFF;
   385  001152  6893               	setf	3987,c	;volatile
   386                           
   387                           ;main.c: 46: TRISC = 0x00;
   388  001154  0E00               	movlw	0
   389  001156  6E94               	movwf	3988,c	;volatile
   390                           
   391                           ;main.c: 47: TRISD = 0x00;
   392  001158  0E00               	movlw	0
   393  00115A  6E95               	movwf	3989,c	;volatile
   394                           
   395                           ;main.c: 48: TRISE = 0x00;
   396  00115C  0E00               	movlw	0
   397  00115E  6E96               	movwf	3990,c	;volatile
   398                           
   399                           ;main.c: 51: ADCON0 = 0x00;
   400  001160  0E00               	movlw	0
   401  001162  6EC2               	movwf	4034,c	;volatile
   402                           
   403                           ;main.c: 52: ADCON1 = 0x0B;
   404  001164  0E0B               	movlw	11
   405  001166  6EC1               	movwf	4033,c	;volatile
   406                           
   407                           ;main.c: 53: ADCON2bits.ADFM = 1;
   408  001168  8EC0               	bsf	4032,7,c	;volatile
   409                           
   410                           ;main.c: 57: initLCD();
   411  00116A  EC78  F009         	call	_initLCD	;wreg free
   412                           
   413                           ;main.c: 58: if (mode == 0){
   414  00116E  501F               	movf	_mode,w,c
   415  001170  1020               	iorwf	_mode+1,w,c
   416  001172  A4D8               	btfss	status,2,c
   417  001174  D01F               	goto	l69
   418                           
   419                           ;main.c: 59: printf("lala");
   420  001176  0E11               	movlw	low STR_1
   421  001178  6E0D               	movwf	printf@f,c
   422  00117A  0E10               	movlw	high STR_1
   423  00117C  6E0E               	movwf	printf@f+1,c
   424  00117E  EC0D  F008         	call	_printf	;wreg free
   425                           
   426                           ;main.c: 60: _delay((unsigned long)((5000)*(8000000/4000.0)));
   427  001182  0E33               	movlw	51
   428  001184  6E1A               	movwf	(??_main+1)& (0+255),c
   429  001186  0EBB               	movlw	187
   430  001188  6E19               	movwf	??_main& (0+255),c
   431  00118A  0EE0               	movlw	224
   432  00118C                     u457:
   433  00118C  2EE8               	decfsz	wreg,f,c
   434  00118E  D7FE               	bra	u457
   435  001190  2E19               	decfsz	??_main& (0+255),f,c
   436  001192  D7FC               	bra	u457
   437  001194  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   438  001196  D7FA               	bra	u457
   439                           
   440                           ;main.c: 61: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   441  001198  0E80               	movlw	128
   442  00119A  ECF8  F009         	call	_lcdInst
   443  00119E  0E0D               	movlw	13
   444  0011A0  6E19               	movwf	??_main& (0+255),c
   445  0011A2  0EFC               	movlw	252
   446  0011A4                     u467:
   447  0011A4  2EE8               	decfsz	wreg,f,c
   448  0011A6  D7FE               	bra	u467
   449  0011A8  2E19               	decfsz	??_main& (0+255),f,c
   450  0011AA  D7FC               	bra	u467
   451                           
   452                           ;main.c: 62: mode =1;
   453  0011AC  0E00               	movlw	0
   454  0011AE  6E20               	movwf	_mode+1,c
   455  0011B0  0E01               	movlw	1
   456  0011B2  6E1F               	movwf	_mode,c
   457  0011B4                     l69:
   458                           
   459                           ;main.c: 63: }
   460                           ;main.c: 66: if (mode == 1){
   461  0011B4  041F               	decf	_mode,w,c
   462  0011B6  1020               	iorwf	_mode+1,w,c
   463  0011B8  A4D8               	btfss	status,2,c
   464  0011BA  EF00  F000         	goto	start
   465  0011BE                     u430:
   466  0011BE                     l1154:
   467                           
   468                           ;main.c: 84: if (readADC(0)<250){
   469  0011BE  0E00               	movlw	0
   470  0011C0  ECBF  F009         	call	_readADC
   471  0011C4  5002               	movf	?_readADC+1,w,c
   472  0011C6  E1FB               	bnz	l1154
   473  0011C8  0EFA               	movlw	250
   474  0011CA  5C01               	subwf	?_readADC,w,c
   475  0011CC  B0D8               	btfsc	status,0,c
   476  0011CE  D7F7               	goto	u430
   477                           
   478                           ;main.c: 86: counter++;
   479  0011D0  4A1B               	infsnz	_counter,f,c
   480  0011D2  2A1C               	incf	_counter+1,f,c
   481                           
   482                           ;main.c: 88: printf("%d",counter);
   483  0011D4  0E16               	movlw	low STR_2
   484  0011D6  6E0D               	movwf	printf@f,c
   485  0011D8  0E10               	movlw	high STR_2
   486  0011DA  6E0E               	movwf	printf@f+1,c
   487  0011DC  C01B  F00F         	movff	_counter,?_printf+2
   488  0011E0  C01C  F010         	movff	_counter+1,?_printf+3
   489  0011E4  EC0D  F008         	call	_printf	;wreg free
   490                           
   491                           ;main.c: 89: _delay((unsigned long)((70)*(8000000/4000.0)));
   492  0011E8  0EB6               	movlw	182
   493  0011EA  6E19               	movwf	??_main& (0+255),c
   494  0011EC  0ED0               	movlw	208
   495  0011EE                     u477:
   496  0011EE  2EE8               	decfsz	wreg,f,c
   497  0011F0  D7FE               	bra	u477
   498  0011F2  2E19               	decfsz	??_main& (0+255),f,c
   499  0011F4  D7FC               	bra	u477
   500  0011F6  D000               	nop2	
   501                           
   502                           ;main.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   503  0011F8  0E80               	movlw	128
   504  0011FA  ECF8  F009         	call	_lcdInst
   505  0011FE  0E0D               	movlw	13
   506  001200  6E19               	movwf	??_main& (0+255),c
   507  001202  0EFC               	movlw	252
   508  001204                     u487:
   509  001204  2EE8               	decfsz	wreg,f,c
   510  001206  D7FE               	bra	u487
   511  001208  2E19               	decfsz	??_main& (0+255),f,c
   512  00120A  D7FC               	bra	u487
   513  00120C  D7D8               	goto	u430
   514                           
   515                           ;main.c: 91: }
   516                           ;main.c: 92: }
   517                           ;main.c: 96: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   518  00120E  0E0D               	movlw	13
   519  001210  6E19               	movwf	??_main& (0+255),c
   520  001212  0EFC               	movlw	252
   521  001214                     u497:
   522  001214  2EE8               	decfsz	wreg,f,c
   523  001216  D7FE               	bra	u497
   524  001218  2E19               	decfsz	??_main& (0+255),f,c
   525  00121A  D7FC               	bra	u497
   526  00121C  EF00  F000         	goto	start
   527  001220                     __end_of_main:
   528                           	opt stack 0
   529                           tblptru	equ	0xFF8
   530                           tblptrh	equ	0xFF7
   531                           tblptrl	equ	0xFF6
   532                           tablat	equ	0xFF5
   533                           wreg	equ	0xFE8
   534                           status	equ	0xFD8
   535                           
   536 ;; *************** function _readADC *****************
   537 ;; Defined at:
   538 ;;		line 110 in file "main.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;  channel         1    wreg     unsigned char 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  channel         1    4[COMRAM] unsigned char 
   543 ;; Return value:  Size  Location     Type
   544 ;;                  2    0[COMRAM] unsigned short 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;Total ram usage:        5 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; This function calls:
   559 ;;		Nothing
   560 ;; This function is called by:
   561 ;;		_main
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text1
   566  00137E                     __ptext1:
   567                           	opt stack 0
   568  00137E                     _readADC:
   569                           	opt stack 30
   570                           
   571                           ;incstack = 0
   572                           ;readADC@channel stored from wreg
   573  00137E  6E05               	movwf	readADC@channel,c
   574                           
   575                           ;main.c: 119: ADCON0 = (channel & 0x0F) << 2;
   576  001380  C005  F003         	movff	readADC@channel,??_readADC
   577  001384  0E0F               	movlw	15
   578  001386  1603               	andwf	??_readADC,f,c
   579  001388  90D8               	bcf	status,0,c
   580  00138A  3603               	rlcf	??_readADC,f,c
   581  00138C  90D8               	bcf	status,0,c
   582  00138E  3403               	rlcf	??_readADC,w,c
   583  001390  6EC2               	movwf	4034,c	;volatile
   584                           
   585                           ;main.c: 120: ADON = 1;
   586  001392  80C2               	bsf	4034,0,c	;volatile
   587                           
   588                           ;main.c: 121: ADCON0bits.GO = 1;
   589  001394  82C2               	bsf	4034,1,c	;volatile
   590  001396  B2C2               	btfsc	4034,1,c	;volatile
   591  001398  D7FE               	goto	l79
   592                           
   593                           ;main.c: 123: return (ADRESH << 8) | ADRESL;
   594  00139A  50C3               	movf	4035,w,c	;volatile
   595  00139C  CFC4 F003          	movff	4036,??_readADC	;volatile
   596  0013A0  6A04               	clrf	(??_readADC+1)& (0+255),c
   597  0013A2  C003  F004         	movff	??_readADC,??_readADC+1
   598  0013A6  6A03               	clrf	??_readADC,c
   599  0013A8  1003               	iorwf	??_readADC,w,c
   600  0013AA  6E01               	movwf	?_readADC,c
   601  0013AC  5004               	movf	??_readADC+1,w,c
   602  0013AE  6E02               	movwf	?_readADC+1,c
   603  0013B0  0012               	return	
   604  0013B2                     __end_of_readADC:
   605                           	opt stack 0
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           wreg	equ	0xFE8
   611                           status	equ	0xFD8
   612                           
   613 ;; *************** function _printf *****************
   614 ;; Defined at:
   615 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;  f               2   12[COMRAM] PTR const unsigned char 
   618 ;;		 -> STR_2(3), STR_1(5), 
   619 ;; Auto vars:     Size  Location     Type
   620 ;;  tmpval          4    0        struct .
   621 ;;  cp              3    0        PTR const unsigned char 
   622 ;;  val             2   21[COMRAM] unsigned int 
   623 ;;  ap              2   17[COMRAM] PTR void [1]
   624 ;;		 -> ?_printf(2), 
   625 ;;  len             2    0        unsigned int 
   626 ;;  c               1   23[COMRAM] char 
   627 ;;  prec            1   20[COMRAM] char 
   628 ;;  flag            1   19[COMRAM] unsigned char 
   629 ;; Return value:  Size  Location     Type
   630 ;;                  2   12[COMRAM] int 
   631 ;; Registers used:
   632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   638 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   639 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   640 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   641 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   642 ;;Total ram usage:       12 bytes
   643 ;; Hardware stack levels used:    1
   644 ;; Hardware stack levels required when called:    2
   645 ;; This function calls:
   646 ;;		___lwdiv
   647 ;;		___lwmod
   648 ;;		_putch
   649 ;; This function is called by:
   650 ;;		_main
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           	psect	text2
   655  00101A                     __ptext2:
   656                           	opt stack 0
   657  00101A                     _printf:
   658                           	opt stack 28
   659                           
   660                           ;doprnt.c: 466: va_list ap;
   661                           ;doprnt.c: 499: signed char c;
   662                           ;doprnt.c: 506: signed char prec;
   663                           ;doprnt.c: 508: unsigned char flag;
   664                           ;doprnt.c: 523: union {
   665                           ;doprnt.c: 524: unsigned long vd;
   666                           ;doprnt.c: 525: double integ;
   667                           ;doprnt.c: 526: } tmpval;
   668                           ;doprnt.c: 528: unsigned int val;
   669                           ;doprnt.c: 529: unsigned len;
   670                           ;doprnt.c: 530: const char * cp;
   671                           ;doprnt.c: 533: *ap = __va_start();
   672                           
   673                           ;incstack = 0
   674  00101A  0E0F               	movlw	low (?_printf+2)
   675  00101C  6E12               	movwf	printf@ap,c
   676  00101E  0E00               	movlw	high (?_printf+2)
   677  001020  6E13               	movwf	printf@ap+1,c
   678                           
   679                           ;doprnt.c: 536: while(c = *f++) {
   680  001022  D07D               	goto	u390
   681  001024                     
   682                           ;doprnt.c: 538: if(c != '%')
   683  001024  0E25               	movlw	37
   684  001026  1818               	xorwf	printf@c,w,c
   685  001028  B4D8               	btfsc	status,2,c
   686  00102A  D004               	goto	l149
   687                           
   688                           ;doprnt.c: 540: {
   689                           ;doprnt.c: 541: (putch(c) );
   690  00102C  5018               	movf	printf@c,w,c
   691  00102E  ECEE  F009         	call	_putch
   692                           
   693                           ;doprnt.c: 542: continue;
   694  001032  D075               	goto	u390
   695  001034                     l149:
   696                           
   697                           ;doprnt.c: 543: }
   698                           ;doprnt.c: 548: flag = 0;
   699  001034  0E00               	movlw	0
   700  001036  6E14               	movwf	printf@flag,c
   701                           
   702                           ;doprnt.c: 822: }
   703                           
   704                           ;doprnt.c: 813: continue;
   705                           
   706                           ;doprnt.c: 802: default:
   707                           
   708                           ;doprnt.c: 698: case 'i':
   709                           ;doprnt.c: 699: break;
   710                           
   711                           ;doprnt.c: 697: case 'd':
   712                           
   713                           ;doprnt.c: 638: goto alldone;
   714                           
   715                           ;doprnt.c: 637: case 0:
   716                           
   717                           ;doprnt.c: 635: switch(c = *f++) {
   718  001038  C00D  FFF6         	movff	printf@f,tblptrl
   719  00103C  C00E  FFF7         	movff	printf@f+1,tblptrh
   720  001040  4A0D               	infsnz	printf@f,f,c
   721  001042  2A0E               	incf	printf@f+1,f,c
   722  001044                     	if	0	;tblptru may be non-zero
   723  001044                     	endif
   724  001044                     	if	0	;tblptru may be non-zero
   725  001044                     	endif
   726  001044  0008               	tblrd		*
   727  001046  CFF5 F018          	movff	tablat,printf@c
   728  00104A  5018               	movf	printf@c,w,c
   729                           
   730                           ; Switch size 1, requested type "space"
   731                           ; Number of cases is 3, Range of values is 0 to 105
   732                           ; switch strategies available:
   733                           ; Name         Instructions Cycles
   734                           ; simple_byte           10     6 (average)
   735                           ;	Chosen strategy is simple_byte
   736  00104C  0A00               	xorlw	0	; case 0
   737  00104E  B4D8               	btfsc	status,2,c
   738  001050  0012               	return	
   739  001052  0A64               	xorlw	100	; case 100
   740  001054  B4D8               	btfsc	status,2,c
   741  001056  D003               	goto	l155
   742  001058  0A0D               	xorlw	13	; case 105
   743  00105A  A4D8               	btfss	status,2,c
   744  00105C  D060               	goto	u390
   745  00105E                     l155:
   746                           
   747                           ;doprnt.c: 1253: {
   748                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   749  00105E  C012  FFD9         	movff	printf@ap,fsr2l
   750  001062  C013  FFDA         	movff	printf@ap+1,fsr2h
   751  001066  CFDE F016          	movff	postinc2,printf@val
   752  00106A  CFDD F017          	movff	postdec2,printf@val+1
   753  00106E  0E02               	movlw	2
   754  001070  2612               	addwf	printf@ap,f,c
   755  001072  0E00               	movlw	0
   756  001074  2213               	addwfc	printf@ap+1,f,c
   757                           
   758                           ;doprnt.c: 1261: if((int)val < 0) {
   759  001076  AE17               	btfss	printf@val+1,7,c
   760  001078  D006               	goto	l157
   761                           
   762                           ;doprnt.c: 1262: flag |= 0x03;
   763  00107A  0E03               	movlw	3
   764  00107C  1214               	iorwf	printf@flag,f,c
   765                           
   766                           ;doprnt.c: 1263: val = -val;
   767  00107E  6C16               	negf	printf@val,c
   768  001080  1E17               	comf	printf@val+1,f,c
   769  001082  B0D8               	btfsc	status,0,c
   770  001084  2A17               	incf	printf@val+1,f,c
   771  001086                     l157:
   772                           
   773                           ;doprnt.c: 1264: }
   774                           ;doprnt.c: 1266: }
   775                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   776  001086  0E01               	movlw	1
   777  001088  6E18               	movwf	printf@c,c
   778  00108A                     l1094:
   779  00108A  0E05               	movlw	5
   780  00108C  1818               	xorwf	printf@c,w,c
   781  00108E  B4D8               	btfsc	status,2,c
   782  001090  D012               	goto	u370
   783                           
   784                           ;doprnt.c: 1306: if(val < dpowers[c])
   785  001092  5018               	movf	printf@c,w,c
   786  001094  0D02               	mullw	2
   787  001096  0E01               	movlw	low _dpowers
   788  001098  24F3               	addwf	prodl,w,c
   789  00109A  6EF6               	movwf	tblptrl,c
   790  00109C  0E10               	movlw	high _dpowers
   791  00109E  20F4               	addwfc	prodh,w,c
   792  0010A0  6EF7               	movwf	tblptrh,c
   793  0010A2                     	if	0	;There are less than 3 active tblptr bytes
   794  0010A2                     	endif
   795  0010A2  0009               	tblrd		*+
   796  0010A4  50F5               	movf	tablat,w,c
   797  0010A6  5C16               	subwf	printf@val,w,c
   798  0010A8  0009               	tblrd		*+
   799  0010AA  50F5               	movf	tablat,w,c
   800  0010AC  5817               	subwfb	printf@val+1,w,c
   801  0010AE  A0D8               	btfss	status,0,c
   802  0010B0  D002               	goto	u370
   803                           
   804                           ;doprnt.c: 1307: break;
   805  0010B2  2A18               	incf	printf@c,f,c
   806  0010B4  D7EA               	goto	l1094
   807  0010B6                     u370:
   808                           
   809                           ;doprnt.c: 1422: {
   810                           ;doprnt.c: 1438: if(flag & 0x03)
   811  0010B6  C014  F011         	movff	printf@flag,??_printf
   812  0010BA  0E03               	movlw	3
   813  0010BC  1611               	andwf	??_printf,f,c
   814  0010BE  B4D8               	btfsc	status,2,c
   815  0010C0  D003               	goto	l161
   816                           
   817                           ;doprnt.c: 1439: (putch('-') );
   818  0010C2  0E2D               	movlw	45
   819  0010C4  ECEE  F009         	call	_putch
   820  0010C8                     l161:
   821                           
   822                           ;doprnt.c: 1469: }
   823                           ;doprnt.c: 1472: prec = c;
   824  0010C8  C018  F015         	movff	printf@c,printf@prec
   825                           
   826                           ;doprnt.c: 1474: while(prec--) {
   827  0010CC  D024               	goto	l162
   828  0010CE                     
   829                           ;doprnt.c: 1478: {
   830                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   831  0010CE  5015               	movf	printf@prec,w,c
   832  0010D0  0D02               	mullw	2
   833  0010D2  0E01               	movlw	low _dpowers
   834  0010D4  24F3               	addwf	prodl,w,c
   835  0010D6  6EF6               	movwf	tblptrl,c
   836  0010D8  0E10               	movlw	high _dpowers
   837  0010DA  20F4               	addwfc	prodh,w,c
   838  0010DC  6EF7               	movwf	tblptrh,c
   839  0010DE                     	if	0	;There are less than 3 active tblptr bytes
   840  0010DE                     	endif
   841  0010DE  0009               	tblrd		*+
   842  0010E0  CFF5 F003          	movff	tablat,___lwdiv@divisor
   843  0010E4  000A               	tblrd		*-
   844  0010E6  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   845  0010EA  C016  F001         	movff	printf@val,___lwdiv@dividend
   846  0010EE  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   847  0010F2  EC4F  F009         	call	___lwdiv	;wreg free
   848  0010F6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   849  0010FA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   850  0010FE  0E00               	movlw	0
   851  001100  6E0B               	movwf	___lwmod@divisor+1,c
   852  001102  0E0A               	movlw	10
   853  001104  6E0A               	movwf	___lwmod@divisor,c
   854  001106  EC9E  F009         	call	___lwmod	;wreg free
   855  00110A  5008               	movf	?___lwmod,w,c
   856  00110C  0F30               	addlw	48
   857  00110E  6E18               	movwf	printf@c,c
   858                           
   859                           ;doprnt.c: 1523: }
   860                           ;doprnt.c: 1524: (putch(c) );
   861  001110  5018               	movf	printf@c,w,c
   862  001112  ECEE  F009         	call	_putch
   863  001116                     l162:
   864  001116  0615               	decf	printf@prec,f,c
   865  001118  2815               	incf	printf@prec,w,c
   866  00111A  A4D8               	btfss	status,2,c
   867  00111C  D7D8               	goto	l163
   868  00111E                     u390:
   869  00111E  C00D  FFF6         	movff	printf@f,tblptrl
   870  001122  C00E  FFF7         	movff	printf@f+1,tblptrh
   871  001126  4A0D               	infsnz	printf@f,f,c
   872  001128  2A0E               	incf	printf@f+1,f,c
   873  00112A                     	if	0	;tblptru may be non-zero
   874  00112A                     	endif
   875  00112A                     	if	0	;tblptru may be non-zero
   876  00112A                     	endif
   877  00112A  0008               	tblrd		*
   878  00112C  CFF5 F018          	movff	tablat,printf@c
   879  001130  5018               	movf	printf@c,w,c
   880  001132  B4D8               	btfsc	status,2,c
   881  001134  0012               	return	
   882  001136  D776               	goto	l148
   883  001138                     __end_of_printf:
   884                           	opt stack 0
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           prodh	equ	0xFF4
   890                           prodl	equ	0xFF3
   891                           wreg	equ	0xFE8
   892                           postinc2	equ	0xFDE
   893                           postdec2	equ	0xFDD
   894                           fsr2h	equ	0xFDA
   895                           fsr2l	equ	0xFD9
   896                           status	equ	0xFD8
   897                           
   898 ;; *************** function _putch *****************
   899 ;; Defined at:
   900 ;;		line 24 in file "lcd.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  data            1    wreg     unsigned char 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  data            1    2[COMRAM] unsigned char 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;Total ram usage:        1 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    1
   921 ;; This function calls:
   922 ;;		_lcdNibble
   923 ;; This function is called by:
   924 ;;		_printf
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text3
   929  0013DC                     __ptext3:
   930                           	opt stack 0
   931  0013DC                     _putch:
   932                           	opt stack 28
   933                           
   934                           ;incstack = 0
   935                           ;putch@data stored from wreg
   936  0013DC  6E03               	movwf	putch@data,c
   937                           
   938                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   939  0013DE  848C               	bsf	3980,2,c	;volatile
   940                           
   941                           ;lcd.c: 33: lcdNibble(data);
   942  0013E0  5003               	movf	putch@data,w,c
   943  0013E2  EC10  F009         	call	_lcdNibble
   944                           
   945                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
   946  0013E6  0E42               	movlw	66
   947  0013E8                     u507:
   948  0013E8  2EE8               	decfsz	wreg,f,c
   949  0013EA  D7FE               	bra	u507
   950  0013EC  D000               	nop2	
   951  0013EE  0012               	return		;funcret
   952  0013F0                     __end_of_putch:
   953                           	opt stack 0
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           prodh	equ	0xFF4
   959                           prodl	equ	0xFF3
   960                           wreg	equ	0xFE8
   961                           postinc2	equ	0xFDE
   962                           postdec2	equ	0xFDD
   963                           fsr2h	equ	0xFDA
   964                           fsr2l	equ	0xFD9
   965                           status	equ	0xFD8
   966                           
   967 ;; *************** function ___lwmod *****************
   968 ;; Defined at:
   969 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;  dividend        2    7[COMRAM] unsigned int 
   972 ;;  divisor         2    9[COMRAM] unsigned int 
   973 ;; Auto vars:     Size  Location     Type
   974 ;;  counter         1   11[COMRAM] unsigned char 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  2    7[COMRAM] unsigned int 
   977 ;; Registers used:
   978 ;;		wreg, status,2, status,0
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;Total ram usage:        5 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; This function calls:
   991 ;;		Nothing
   992 ;; This function is called by:
   993 ;;		_printf
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text4
   998  00133C                     __ptext4:
   999                           	opt stack 0
  1000  00133C                     ___lwmod:
  1001                           	opt stack 29
  1002                           
  1003                           ;incstack = 0
  1004  00133C  500A               	movf	___lwmod@divisor,w,c
  1005  00133E  100B               	iorwf	___lwmod@divisor+1,w,c
  1006  001340  B4D8               	btfsc	status,2,c
  1007  001342  D018               	goto	l585
  1008  001344  0E01               	movlw	1
  1009  001346  6E0C               	movwf	___lwmod@counter,c
  1010  001348  D004               	goto	l580
  1011  00134A  90D8               	bcf	status,0,c
  1012  00134C  360A               	rlcf	___lwmod@divisor,f,c
  1013  00134E  360B               	rlcf	___lwmod@divisor+1,f,c
  1014  001350  2A0C               	incf	___lwmod@counter,f,c
  1015  001352                     l580:
  1016  001352  AE0B               	btfss	___lwmod@divisor+1,7,c
  1017  001354  D7FA               	goto	l581
  1018  001356                     u310:
  1019  001356  500A               	movf	___lwmod@divisor,w,c
  1020  001358  5C08               	subwf	___lwmod@dividend,w,c
  1021  00135A  500B               	movf	___lwmod@divisor+1,w,c
  1022  00135C  5809               	subwfb	___lwmod@dividend+1,w,c
  1023  00135E  A0D8               	btfss	status,0,c
  1024  001360  D004               	goto	l584
  1025  001362  500A               	movf	___lwmod@divisor,w,c
  1026  001364  5E08               	subwf	___lwmod@dividend,f,c
  1027  001366  500B               	movf	___lwmod@divisor+1,w,c
  1028  001368  5A09               	subwfb	___lwmod@dividend+1,f,c
  1029  00136A                     l584:
  1030  00136A  90D8               	bcf	status,0,c
  1031  00136C  320B               	rrcf	___lwmod@divisor+1,f,c
  1032  00136E  320A               	rrcf	___lwmod@divisor,f,c
  1033  001370  2E0C               	decfsz	___lwmod@counter,f,c
  1034  001372  D7F1               	goto	u310
  1035  001374                     l585:
  1036  001374  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1037  001378  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1038  00137C  0012               	return		;funcret
  1039  00137E                     __end_of___lwmod:
  1040                           	opt stack 0
  1041                           tblptru	equ	0xFF8
  1042                           tblptrh	equ	0xFF7
  1043                           tblptrl	equ	0xFF6
  1044                           tablat	equ	0xFF5
  1045                           prodh	equ	0xFF4
  1046                           prodl	equ	0xFF3
  1047                           wreg	equ	0xFE8
  1048                           postinc2	equ	0xFDE
  1049                           postdec2	equ	0xFDD
  1050                           fsr2h	equ	0xFDA
  1051                           fsr2l	equ	0xFD9
  1052                           status	equ	0xFD8
  1053                           
  1054 ;; *************** function ___lwdiv *****************
  1055 ;; Defined at:
  1056 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  dividend        2    0[COMRAM] unsigned int 
  1059 ;;  divisor         2    2[COMRAM] unsigned int 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  quotient        2    4[COMRAM] unsigned int 
  1062 ;;  counter         1    6[COMRAM] unsigned char 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  2    0[COMRAM] unsigned int 
  1065 ;; Registers used:
  1066 ;;		wreg, status,2, status,0
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1073 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;Total ram usage:        7 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; This function calls:
  1079 ;;		Nothing
  1080 ;; This function is called by:
  1081 ;;		_printf
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text5
  1086  00129E                     __ptext5:
  1087                           	opt stack 0
  1088  00129E                     ___lwdiv:
  1089                           	opt stack 29
  1090                           
  1091                           ;incstack = 0
  1092  00129E  0E00               	movlw	0
  1093  0012A0  6E06               	movwf	___lwdiv@quotient+1,c
  1094  0012A2  0E00               	movlw	0
  1095  0012A4  6E05               	movwf	___lwdiv@quotient,c
  1096  0012A6  5003               	movf	___lwdiv@divisor,w,c
  1097  0012A8  1004               	iorwf	___lwdiv@divisor+1,w,c
  1098  0012AA  B4D8               	btfsc	status,2,c
  1099  0012AC  D01C               	goto	l575
  1100  0012AE  0E01               	movlw	1
  1101  0012B0  6E07               	movwf	___lwdiv@counter,c
  1102  0012B2  D004               	goto	l570
  1103  0012B4  90D8               	bcf	status,0,c
  1104  0012B6  3603               	rlcf	___lwdiv@divisor,f,c
  1105  0012B8  3604               	rlcf	___lwdiv@divisor+1,f,c
  1106  0012BA  2A07               	incf	___lwdiv@counter,f,c
  1107  0012BC                     l570:
  1108  0012BC  AE04               	btfss	___lwdiv@divisor+1,7,c
  1109  0012BE  D7FA               	goto	l571
  1110  0012C0                     u280:
  1111  0012C0  90D8               	bcf	status,0,c
  1112  0012C2  3605               	rlcf	___lwdiv@quotient,f,c
  1113  0012C4  3606               	rlcf	___lwdiv@quotient+1,f,c
  1114  0012C6  5003               	movf	___lwdiv@divisor,w,c
  1115  0012C8  5C01               	subwf	___lwdiv@dividend,w,c
  1116  0012CA  5004               	movf	___lwdiv@divisor+1,w,c
  1117  0012CC  5802               	subwfb	___lwdiv@dividend+1,w,c
  1118  0012CE  A0D8               	btfss	status,0,c
  1119  0012D0  D005               	goto	l574
  1120  0012D2  5003               	movf	___lwdiv@divisor,w,c
  1121  0012D4  5E01               	subwf	___lwdiv@dividend,f,c
  1122  0012D6  5004               	movf	___lwdiv@divisor+1,w,c
  1123  0012D8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1124  0012DA  8005               	bsf	___lwdiv@quotient,0,c
  1125  0012DC                     l574:
  1126  0012DC  90D8               	bcf	status,0,c
  1127  0012DE  3204               	rrcf	___lwdiv@divisor+1,f,c
  1128  0012E0  3203               	rrcf	___lwdiv@divisor,f,c
  1129  0012E2  2E07               	decfsz	___lwdiv@counter,f,c
  1130  0012E4  D7ED               	goto	u280
  1131  0012E6                     l575:
  1132  0012E6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1133  0012EA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1134  0012EE  0012               	return		;funcret
  1135  0012F0                     __end_of___lwdiv:
  1136                           	opt stack 0
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           prodh	equ	0xFF4
  1142                           prodl	equ	0xFF3
  1143                           wreg	equ	0xFE8
  1144                           postinc2	equ	0xFDE
  1145                           postdec2	equ	0xFDD
  1146                           fsr2h	equ	0xFDA
  1147                           fsr2l	equ	0xFD9
  1148                           status	equ	0xFD8
  1149                           
  1150 ;; *************** function _initLCD *****************
  1151 ;; Defined at:
  1152 ;;		line 60 in file "lcd.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		wreg, status,2, status,0, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1168 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1169 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1170 ;;Total ram usage:        1 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    2
  1173 ;; This function calls:
  1174 ;;		_lcdInst
  1175 ;; This function is called by:
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	text6
  1181  0012F0                     __ptext6:
  1182                           	opt stack 0
  1183  0012F0                     _initLCD:
  1184                           	opt stack 28
  1185                           
  1186                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  1187                           
  1188                           ;incstack = 0
  1189  0012F0  0E27               	movlw	39
  1190  0012F2  6E04               	movwf	??_initLCD& (0+255),c
  1191  0012F4  0EF5               	movlw	245
  1192  0012F6                     u517:
  1193  0012F6  2EE8               	decfsz	wreg,f,c
  1194  0012F8  D7FE               	bra	u517
  1195  0012FA  2E04               	decfsz	??_initLCD& (0+255),f,c
  1196  0012FC  D7FC               	bra	u517
  1197  0012FE  F000               	nop	
  1198                           
  1199                           ;lcd.c: 69: lcdInst(0b00110011);
  1200  001300  0E33               	movlw	51
  1201  001302  ECF8  F009         	call	_lcdInst
  1202                           
  1203                           ;lcd.c: 70: lcdInst(0b00110010);
  1204  001306  0E32               	movlw	50
  1205  001308  ECF8  F009         	call	_lcdInst
  1206                           
  1207                           ;lcd.c: 71: lcdInst(0b00101000);
  1208  00130C  0E28               	movlw	40
  1209  00130E  ECF8  F009         	call	_lcdInst
  1210                           
  1211                           ;lcd.c: 72: lcdInst(0b00001111);
  1212  001312  0E0F               	movlw	15
  1213  001314  ECF8  F009         	call	_lcdInst
  1214                           
  1215                           ;lcd.c: 73: lcdInst(0b00000110);
  1216  001318  0E06               	movlw	6
  1217  00131A  ECF8  F009         	call	_lcdInst
  1218                           
  1219                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  1220  00131E  0E01               	movlw	1
  1221  001320  ECF8  F009         	call	_lcdInst
  1222  001324  0E27               	movlw	39
  1223  001326  6E04               	movwf	??_initLCD& (0+255),c
  1224  001328  0EF5               	movlw	245
  1225  00132A                     u527:
  1226  00132A  2EE8               	decfsz	wreg,f,c
  1227  00132C  D7FE               	bra	u527
  1228  00132E  2E04               	decfsz	??_initLCD& (0+255),f,c
  1229  001330  D7FC               	bra	u527
  1230  001332  F000               	nop	
  1231                           
  1232                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1233  001334  0E0F               	movlw	15
  1234  001336  ECF8  F009         	call	_lcdInst
  1235  00133A  0012               	return		;funcret
  1236  00133C                     __end_of_initLCD:
  1237                           	opt stack 0
  1238                           tblptru	equ	0xFF8
  1239                           tblptrh	equ	0xFF7
  1240                           tblptrl	equ	0xFF6
  1241                           tablat	equ	0xFF5
  1242                           prodh	equ	0xFF4
  1243                           prodl	equ	0xFF3
  1244                           wreg	equ	0xFE8
  1245                           postinc2	equ	0xFDE
  1246                           postdec2	equ	0xFDD
  1247                           fsr2h	equ	0xFDA
  1248                           fsr2l	equ	0xFD9
  1249                           status	equ	0xFD8
  1250                           
  1251 ;; *************** function _lcdInst *****************
  1252 ;; Defined at:
  1253 ;;		line 11 in file "lcd.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;  data            1    wreg     unsigned char 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  data            1    2[COMRAM] unsigned char 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;Total ram usage:        1 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    1
  1274 ;; This function calls:
  1275 ;;		_lcdNibble
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;;		_initLCD
  1279 ;;		_lcd_set_cursor
  1280 ;;		_lcd_shift_cursor
  1281 ;;		_lcd_shift_display
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text7
  1286  0013F0                     __ptext7:
  1287                           	opt stack 0
  1288  0013F0                     _lcdInst:
  1289                           	opt stack 29
  1290                           
  1291                           ;incstack = 0
  1292                           ;lcdInst@data stored from wreg
  1293  0013F0  6E03               	movwf	lcdInst@data,c
  1294                           
  1295                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1296  0013F2  948C               	bcf	3980,2,c	;volatile
  1297                           
  1298                           ;lcd.c: 20: lcdNibble(data);
  1299  0013F4  5003               	movf	lcdInst@data,w,c
  1300  0013F6  EC10  F009         	call	_lcdNibble
  1301                           
  1302                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1303  0013FA  0E42               	movlw	66
  1304  0013FC                     u537:
  1305  0013FC  2EE8               	decfsz	wreg,f,c
  1306  0013FE  D7FE               	bra	u537
  1307  001400  D000               	nop2	
  1308  001402  0012               	return		;funcret
  1309  001404                     __end_of_lcdInst:
  1310                           	opt stack 0
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           prodh	equ	0xFF4
  1316                           prodl	equ	0xFF3
  1317                           wreg	equ	0xFE8
  1318                           postinc2	equ	0xFDE
  1319                           postdec2	equ	0xFDD
  1320                           fsr2h	equ	0xFDA
  1321                           fsr2l	equ	0xFD9
  1322                           status	equ	0xFD8
  1323                           
  1324 ;; *************** function _lcdNibble *****************
  1325 ;; Defined at:
  1326 ;;		line 37 in file "lcd.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  data            1    wreg     unsigned char 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  data            1    1[COMRAM] unsigned char 
  1331 ;;  temp            1    0[COMRAM] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;Total ram usage:        2 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; This function calls:
  1348 ;;		Nothing
  1349 ;; This function is called by:
  1350 ;;		_lcdInst
  1351 ;;		_putch
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text8
  1356  001220                     __ptext8:
  1357                           	opt stack 0
  1358  001220                     _lcdNibble:
  1359                           	opt stack 28
  1360                           
  1361                           ;incstack = 0
  1362                           ;lcdNibble@data stored from wreg
  1363  001220  6E02               	movwf	lcdNibble@data,c
  1364                           
  1365                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1366  001222  5002               	movf	lcdNibble@data,w,c
  1367  001224  0BF0               	andlw	240
  1368  001226  6E01               	movwf	lcdNibble@temp,c
  1369                           
  1370                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1371  001228  508C               	movf	3980,w,c	;volatile
  1372  00122A  0B0F               	andlw	15
  1373  00122C  6E8C               	movwf	3980,c	;volatile
  1374                           
  1375                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1376  00122E  5001               	movf	lcdNibble@temp,w,c
  1377  001230  108C               	iorwf	3980,w,c	;volatile
  1378  001232  6E8C               	movwf	3980,c	;volatile
  1379                           
  1380                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1381  001234  0E00               	movlw	0
  1382  001236  BEF2               	btfsc	intcon,7,c	;volatile
  1383  001238  0E01               	movlw	1
  1384  00123A  6E1D               	movwf	lcd@LCDinterruptState,c
  1385  00123C  9EF2               	bcf	intcon,7,c	;volatile
  1386  00123E  868C               	bsf	3980,3,c	;volatile
  1387  001240  0E10               	movlw	16
  1388  001242                     u547:
  1389  001242  2EE8               	decfsz	wreg,f,c
  1390  001244  D7FE               	bra	u547
  1391  001246  D000               	nop2	
  1392  001248  968C               	bcf	3980,3,c	;volatile
  1393  00124A  0E42               	movlw	66
  1394  00124C                     u557:
  1395  00124C  2EE8               	decfsz	wreg,f,c
  1396  00124E  D7FE               	bra	u557
  1397  001250  D000               	nop2	
  1398  001252  B01D               	btfsc	lcd@LCDinterruptState,0,c
  1399  001254  D002               	bra	u15
  1400  001256  9EF2               	bcf	intcon,7,c	;volatile
  1401  001258  D001               	bra	u16
  1402  00125A                     u15:
  1403  00125A  8EF2               	bsf	intcon,7,c	;volatile
  1404  00125C                     u16:
  1405                           
  1406                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1407  00125C  3802               	swapf	lcdNibble@data,w,c
  1408  00125E  0BF0               	andlw	240
  1409  001260  6E02               	movwf	lcdNibble@data,c
  1410                           
  1411                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1412  001262  5002               	movf	lcdNibble@data,w,c
  1413  001264  0BF0               	andlw	240
  1414  001266  6E01               	movwf	lcdNibble@temp,c
  1415                           
  1416                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1417  001268  508C               	movf	3980,w,c	;volatile
  1418  00126A  0B0F               	andlw	15
  1419  00126C  6E8C               	movwf	3980,c	;volatile
  1420                           
  1421                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1422  00126E  5001               	movf	lcdNibble@temp,w,c
  1423  001270  108C               	iorwf	3980,w,c	;volatile
  1424  001272  6E8C               	movwf	3980,c	;volatile
  1425                           
  1426                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1427  001274  0E00               	movlw	0
  1428  001276  BEF2               	btfsc	intcon,7,c	;volatile
  1429  001278  0E01               	movlw	1
  1430  00127A  6E1D               	movwf	lcd@LCDinterruptState,c
  1431  00127C  9EF2               	bcf	intcon,7,c	;volatile
  1432  00127E  868C               	bsf	3980,3,c	;volatile
  1433  001280  0E10               	movlw	16
  1434  001282                     u567:
  1435  001282  2EE8               	decfsz	wreg,f,c
  1436  001284  D7FE               	bra	u567
  1437  001286  D000               	nop2	
  1438  001288  968C               	bcf	3980,3,c	;volatile
  1439  00128A  0E42               	movlw	66
  1440  00128C                     u577:
  1441  00128C  2EE8               	decfsz	wreg,f,c
  1442  00128E  D7FE               	bra	u577
  1443  001290  D000               	nop2	
  1444  001292  B01D               	btfsc	lcd@LCDinterruptState,0,c
  1445  001294  D002               	bra	u25
  1446  001296  9EF2               	bcf	intcon,7,c	;volatile
  1447  001298  D001               	bra	u26
  1448  00129A                     u25:
  1449  00129A  8EF2               	bsf	intcon,7,c	;volatile
  1450  00129C                     u26:
  1451  00129C  0012               	return		;funcret
  1452  00129E                     __end_of_lcdNibble:
  1453                           	opt stack 0
  1454                           tblptru	equ	0xFF8
  1455                           tblptrh	equ	0xFF7
  1456                           tblptrl	equ	0xFF6
  1457                           tablat	equ	0xFF5
  1458                           prodh	equ	0xFF4
  1459                           prodl	equ	0xFF3
  1460                           intcon	equ	0xFF2
  1461                           wreg	equ	0xFE8
  1462                           postinc2	equ	0xFDE
  1463                           postdec2	equ	0xFDD
  1464                           fsr2h	equ	0xFDA
  1465                           fsr2l	equ	0xFD9
  1466                           status	equ	0xFD8
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           prodh	equ	0xFF4
  1472                           prodl	equ	0xFF3
  1473                           intcon	equ	0xFF2
  1474                           wreg	equ	0xFE8
  1475                           postinc2	equ	0xFDE
  1476                           postdec2	equ	0xFDD
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481                           	psect	rparam
  1482  0000                     tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           prodh	equ	0xFF4
  1487                           prodl	equ	0xFF3
  1488                           intcon	equ	0xFF2
  1489                           wreg	equ	0xFE8
  1490                           postinc2	equ	0xFDE
  1491                           postdec2	equ	0xFDD
  1492                           fsr2h	equ	0xFDA
  1493                           fsr2l	equ	0xFD9
  1494                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    16
    Data        2
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      32
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[3]), STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1455
                                             24 COMRAM     2     2      0
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1253
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      20       1       25.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20      34        0.0%
DATA                 0      0      20       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 16 16:12:49 2018

                     l69 11B4                       l79 1396                       u15 125A  
                     u16 125C                       u25 129A                       u26 129C  
            __CFG_CPD$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l161 10C8                      l162 1116                      l163 10CE  
                    l155 105E                      l148 1024                      l157 1086  
                    l149 1034                      l570 12BC                      l571 12B4  
                    l580 1352                      l581 134A                      l574 12DC  
                    l575 12E6                      l584 136A                      l585 1374  
           __CFG_CPB$OFF 000000                      u310 1356                      u430 11BE  
                    u280 12C0                      u370 10B6                      u507 13E8  
                    u517 12F6                      u390 111E                      u527 132A  
                    u537 13FC                      u457 118C                      u547 1242  
                    u467 11A4                      u557 124C                      u477 11EE  
                    u567 1282                      u487 1204                      u577 128C  
                    u497 1214                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1154 11BE                     l1094 108A  
                   _ADON 007E10                     STR_1 1011                     STR_2 1016  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _LATE 000F8D                     _main 1138  
                   _mode 001F                     fsr2h 000FDA                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
       __end_of_LCD_LEFT 100C                    ?_main 0001          __end_of___lwdiv 12F0  
        __end_of___lwmod 137E                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 1404  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_readADC 13B2  
        __end_of_initLCD 133C           __CFG_EBTRB$OFF 000000          __end_of_dpowers 100B  
                  _putch 13DC                    tablat 000FF5        _LCDinterruptState 001E  
                  status 000FD8           __CFG_PBADEN$ON 000000          __initialization 13B2  
           __end_of_main 1220        __end_of_LCD_RIGHT 100D                   ??_main 0019  
          __activetblptr 000002                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_putch 0001  
                 _OSCCON 000FD3           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??___lwdiv 0005                ??___lwmod 000C                ??_lcdInst 0003  
                 _printf 101A                ??_readADC 0003                ??_initLCD 0004  
           __pdataCOMRAM 001F             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 13D2            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_putch 13F0       __size_of_lcdNibble 007E                  ??_putch 0003  
                ?_printf 000D     lcd@LCDinterruptState 001D        __end_of_lcdNibble 129E  
                __Hparam 0000                  __Lparam 0000                  ___lwdiv 129E  
                ___lwmod 133C             __psmallconst 1000                  __pcinit 13B2  
                __ramtop 1000                  _lcdInst 13F0                  __ptext0 1138  
                __ptext1 137E                  __ptext2 101A                  __ptext3 13DC  
                __ptext4 133C                  __ptext5 129E                  __ptext6 12F0  
                __ptext7 13F0                  __ptext8 1220          __size_of_printf 011E  
                _readADC 137E                  _initLCD 12F0                  _counter 001B  
                _dpowers 1001                _LCD_RIGHT 100C     end_of_initialization 13D2  
  __end_of_LCD_SIZE_HORZ 100F    __end_of_LCD_SIZE_VERT 100E            __Lmediumconst 0000  
                printf@c 0018                  printf@f 000D                  postdec2 000FDD  
                postinc2 000FDE            __pidataCOMRAM 1404           __end_of_printf 1138  
    start_initialization 13B2         __CFG_OSC$INTIO67 000000         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0011              __pbssCOMRAM 001B         ___lwdiv@dividend 0001  
      __CFG_CCP2MX$PORTC 000000                _lcdNibble 1220                 ?___lwdiv 0001  
               ?___lwmod 0008                 ?_lcdInst 0001                 ?_readADC 0001  
               ?_initLCD 0001              __smallconst 1000         ___lwdiv@quotient 0005  
         __size_of_putch 0014                 _LCD_LEFT 100B                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001               _ADCON0bits 000FC2  
             _ADCON2bits 000FC0            lcdNibble@data 0002               printf@flag 0014  
          lcdNibble@temp 0001               printf@prec 0015           _LCD_HORZ_LIMIT 1010  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of___lwdiv 0052         __size_of___lwmod 0042           readADC@channel 0005  
       __size_of_lcdInst 0014         __size_of_readADC 0034         __size_of_initLCD 004C  
 __end_of_LCD_HORZ_LIMIT 1011          ___lwdiv@divisor 0003          ___lwdiv@counter 0007  
         _LCD_VERT_LIMIT 100F            __size_of_main 00E8              ??_lcdNibble 0001  
              printf@val 0016                putch@data 0003               _INTCONbits 000FF2  
 __end_of_LCD_VERT_LIMIT 1010            _LCD_SIZE_HORZ 100E         ___lwmod@dividend 0008  
          _LCD_SIZE_VERT 100D                 printf@ap 0012              lcdInst@data 0003  
        ___lwmod@divisor 000A          ___lwmod@counter 000C  
