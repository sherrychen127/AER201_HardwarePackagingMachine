

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 22:13:53 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4620 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  001744                     __pidataCOMRAM:
    67                           	opt stack 0
    68                           
    69                           ;initializer for _B_array
    70  001744  0000               	dw	0
    71  001746  0001               	dw	1
    72  001748  0000               	dw	0
    73  00174A  0000               	dw	0
    74  00174C  0001               	dw	1
    75  00174E  0000               	dw	0
    76  001750  0001               	dw	1
    77  001752  0001               	dw	1
    78                           
    79                           ;initializer for _white_tape
    80  001754  0001               	dw	1
    81                           
    82                           	psect	smallconst
    83  001000                     __psmallconst:
    84                           	opt stack 0
    85  001000  00                 	db	0
    86  001001                     _dpowers:
    87                           	opt stack 0
    88  001001  0001               	dw	1
    89  001003  000A               	dw	10
    90  001005  0064               	dw	100
    91  001007  03E8               	dw	1000
    92  001009  2710               	dw	10000
    93  00100B                     __end_of_dpowers:
    94                           	opt stack 0
    95  00100B                     _array:
    96                           	opt stack 0
    97  00100B  30                 	db	48
    98  00100C  31                 	db	49
    99  00100D  00                 	db	0
   100  00100E                     __end_of_array:
   101                           	opt stack 0
   102  00100E                     _LCD_LEFT:
   103                           	opt stack 0
   104  00100E  00                 	db	0
   105  00100F                     __end_of_LCD_LEFT:
   106                           	opt stack 0
   107  00100F                     _LCD_RIGHT:
   108                           	opt stack 0
   109  00100F  01                 	db	1
   110  001010                     __end_of_LCD_RIGHT:
   111                           	opt stack 0
   112  001010                     _LCD_SIZE_VERT:
   113                           	opt stack 0
   114  001010  02                 	db	2
   115  001011                     __end_of_LCD_SIZE_VERT:
   116                           	opt stack 0
   117  001011                     _LCD_SIZE_HORZ:
   118                           	opt stack 0
   119  001011  10                 	db	16
   120  001012                     __end_of_LCD_SIZE_HORZ:
   121                           	opt stack 0
   122  001012                     _LCD_VERT_LIMIT:
   123                           	opt stack 0
   124  001012  02                 	db	2
   125  001013                     __end_of_LCD_VERT_LIMIT:
   126                           	opt stack 0
   127  001013                     _LCD_HORZ_LIMIT:
   128                           	opt stack 0
   129  001013  28                 	db	40
   130  001014                     __end_of_LCD_HORZ_LIMIT:
   131                           	opt stack 0
   132  0000                     _INTCONbits	set	4082
   133  0000                     _PORTAbits	set	3968
   134  0000                     _TRISAbits	set	3986
   135  0000                     _TRISDbits	set	3989
   136  0000                     _LATDbits	set	3980
   137  0000                     _ADRESL	set	4035
   138  0000                     _ADRESH	set	4036
   139  0000                     _ADCON0bits	set	4034
   140  0000                     _ADCON2bits	set	4032
   141  0000                     _ADCON1	set	4033
   142  0000                     _ADCON0	set	4034
   143  0000                     _TRISE	set	3990
   144  0000                     _TRISD	set	3989
   145  0000                     _TRISC	set	3988
   146  0000                     _TRISB	set	3987
   147  0000                     _TRISA	set	3986
   148  0000                     _LATE	set	3981
   149  0000                     _LATD	set	3980
   150  0000                     _LATC	set	3979
   151  0000                     _LATB	set	3978
   152  0000                     _LATA	set	3977
   153  0000                     _OSCCON	set	4051
   154  0000                     _ADON	set	32272
   155  001014                     STR_1:
   156  001014  67                 	db	103	;'g'
   157  001015  65                 	db	101	;'e'
   158  001016  61                 	db	97	;'a'
   159  001017  72                 	db	114	;'r'
   160  001018  3A                 	db	58	;':'
   161  001019  25                 	db	37
   162  00101A  64                 	db	100	;'d'
   163  00101B  00                 	db	0
   164  0000                     
   165                           ; #config settings
   166  00101C  00                 	db	0	; dummy byte at the end
   167  0000                     
   168                           	psect	cinit
   169  0016B2                     __pcinit:
   170                           	opt stack 0
   171  0016B2                     start_initialization:
   172                           	opt stack 0
   173  0016B2                     __initialization:
   174                           	opt stack 0
   175                           
   176                           ; Initialize objects allocated to COMRAM (18 bytes)
   177                           ; load TBLPTR registers with __pidataCOMRAM
   178  0016B2  0E44               	movlw	low __pidataCOMRAM
   179  0016B4  6EF6               	movwf	tblptrl,c
   180  0016B6  0E17               	movlw	high __pidataCOMRAM
   181  0016B8  6EF7               	movwf	tblptrh,c
   182  0016BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   183  0016BC  6EF8               	movwf	tblptru,c
   184  0016BE  EE00  F01C         	lfsr	0,__pdataCOMRAM
   185  0016C2  EE10 F012          	lfsr	1,18
   186  0016C6                     copy_data0:
   187  0016C6  0009               	tblrd		*+
   188  0016C8  CFF5 FFEE          	movff	tablat,postinc0
   189  0016CC  50E5               	movf	postdec1,w,c
   190  0016CE  50E1               	movf	fsr1l,w,c
   191  0016D0  E1FA               	bnz	copy_data0
   192                           
   193                           ; Clear objects allocated to COMRAM (12 bytes)
   194  0016D2  EE00  F02E         	lfsr	0,__pbssCOMRAM
   195  0016D6  0E0C               	movlw	12
   196  0016D8                     clear_0:
   197  0016D8  6AEE               	clrf	postinc0,c
   198  0016DA  06E8               	decf	wreg,f,c
   199  0016DC  E1FD               	bnz	clear_0
   200  0016DE                     end_of_initialization:
   201                           	opt stack 0
   202  0016DE                     __end_of__initialization:
   203                           	opt stack 0
   204  0016DE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   205  0016E0  6EF8               	movwf	tblptru,c
   206  0016E2  0100               	movlb	0
   207  0016E4  EF0F  F008         	goto	_main	;jump to C main() function
   208                           tblptru	equ	0xFF8
   209                           tblptrh	equ	0xFF7
   210                           tblptrl	equ	0xFF6
   211                           tablat	equ	0xFF5
   212                           postinc0	equ	0xFEE
   213                           wreg	equ	0xFE8
   214                           postdec1	equ	0xFE5
   215                           fsr1l	equ	0xFE1
   216                           
   217                           	psect	bssCOMRAM
   218  00002E                     __pbssCOMRAM:
   219                           	opt stack 0
   220  00002E                     _i:
   221                           	opt stack 0
   222  00002E                     	ds	2
   223  000030                     _prev:
   224                           	opt stack 0
   225  000030                     	ds	2
   226  000032                     _init_position:
   227                           	opt stack 0
   228  000032                     	ds	2
   229  000034                     _counter:
   230                           	opt stack 0
   231  000034                     	ds	2
   232  000036                     _compartment:
   233                           	opt stack 0
   234  000036                     	ds	2
   235  000038                     lcd@LCDinterruptState:
   236                           	opt stack 0
   237  000038                     	ds	1
   238  000039                     	ds	1
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           tblptrl	equ	0xFF6
   242                           tablat	equ	0xFF5
   243                           postinc0	equ	0xFEE
   244                           wreg	equ	0xFE8
   245                           postdec1	equ	0xFE5
   246                           fsr1l	equ	0xFE1
   247                           
   248                           	psect	dataCOMRAM
   249  00001C                     __pdataCOMRAM:
   250                           	opt stack 0
   251  00001C                     _B_array:
   252                           	opt stack 0
   253  00001C                     	ds	16
   254  00002C                     _white_tape:
   255                           	opt stack 0
   256  00002C                     	ds	2
   257                           tblptru	equ	0xFF8
   258                           tblptrh	equ	0xFF7
   259                           tblptrl	equ	0xFF6
   260                           tablat	equ	0xFF5
   261                           postinc0	equ	0xFEE
   262                           wreg	equ	0xFE8
   263                           postdec1	equ	0xFE5
   264                           fsr1l	equ	0xFE1
   265                           
   266                           	psect	cstackCOMRAM
   267  000001                     __pcstackCOMRAM:
   268                           	opt stack 0
   269  000001                     ??_servoRotate_clockwise:
   270  000001                     ??_servoRotate_ConStop:
   271  000001                     ??_servoRotate_counter:
   272  000001                     ?_read_IR:
   273                           	opt stack 0
   274  000001                     ?_readADC:
   275                           	opt stack 0
   276  000001                     ?___awdiv:
   277                           	opt stack 0
   278  000001                     ?___awmod:
   279                           	opt stack 0
   280  000001                     ?___lwdiv:
   281                           	opt stack 0
   282  000001                     lcdNibble@temp:
   283                           	opt stack 0
   284  000001                     ___awdiv@dividend:
   285                           	opt stack 0
   286  000001                     ___awmod@dividend:
   287                           	opt stack 0
   288  000001                     ___lwdiv@dividend:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x0
   292  000001                     	ds	1
   293  000002                     lcdNibble@data:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x1
   297  000002                     	ds	1
   298  000003                     ??_readADC:
   299  000003                     read_IR@input:
   300                           	opt stack 0
   301  000003                     lcdInst@data:
   302                           	opt stack 0
   303  000003                     putch@data:
   304                           	opt stack 0
   305  000003                     ___awdiv@divisor:
   306                           	opt stack 0
   307  000003                     ___awmod@divisor:
   308                           	opt stack 0
   309  000003                     ___lwdiv@divisor:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x2
   313  000003                     	ds	1
   314  000004                     ??_initLCD:
   315                           
   316                           ; 1 bytes @ 0x3
   317  000004                     	ds	1
   318  000005                     readADC@channel:
   319                           	opt stack 0
   320  000005                     ___awdiv@counter:
   321                           	opt stack 0
   322  000005                     ___awmod@counter:
   323                           	opt stack 0
   324  000005                     ___lwdiv@quotient:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x4
   328  000005                     	ds	1
   329  000006                     ___awdiv@sign:
   330                           	opt stack 0
   331  000006                     ___awmod@sign:
   332                           	opt stack 0
   333                           
   334                           ; 1 bytes @ 0x5
   335  000006                     	ds	1
   336  000007                     ___lwdiv@counter:
   337                           	opt stack 0
   338  000007                     ___awdiv@quotient:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x6
   342  000007                     	ds	1
   343  000008                     ?___lwmod:
   344                           	opt stack 0
   345  000008                     ___lwmod@dividend:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x7
   349  000008                     	ds	2
   350  00000A                     ___lwmod@divisor:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x9
   354  00000A                     	ds	2
   355  00000C                     ___lwmod@counter:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0xB
   359  00000C                     	ds	1
   360  00000D                     ?_printf:
   361                           	opt stack 0
   362  00000D                     printf@f:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0xC
   366  00000D                     	ds	4
   367  000011                     ??_printf:
   368                           
   369                           ; 1 bytes @ 0x10
   370  000011                     	ds	1
   371  000012                     printf@ap:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x11
   375  000012                     	ds	2
   376  000014                     printf@flag:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x13
   380  000014                     	ds	1
   381  000015                     printf@prec:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x14
   385  000015                     	ds	1
   386  000016                     printf@val:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x15
   390  000016                     	ds	2
   391  000018                     printf@c:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x17
   395  000018                     	ds	1
   396  000019                     ??_count_gear:
   397                           
   398                           ; 1 bytes @ 0x18
   399  000019                     	ds	1
   400  00001A                     ??_main:
   401                           
   402                           ; 1 bytes @ 0x19
   403  00001A                     	ds	2
   404                           tblptru	equ	0xFF8
   405                           tblptrh	equ	0xFF7
   406                           tblptrl	equ	0xFF6
   407                           tablat	equ	0xFF5
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           postdec1	equ	0xFE5
   411                           fsr1l	equ	0xFE1
   412                           
   413 ;;
   414 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   415 ;;
   416 ;; *************** function _main *****************
   417 ;; Defined at:
   418 ;;		line 46 in file "main.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;		None
   421 ;; Auto vars:     Size  Location     Type
   422 ;;		None
   423 ;; Return value:  Size  Location     Type
   424 ;;                  1    wreg      void 
   425 ;; Registers used:
   426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   427 ;; Tracked objects:
   428 ;;		On entry : 0/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   434 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   436 ;;Total ram usage:        2 bytes
   437 ;; Hardware stack levels required when called:    4
   438 ;; This function calls:
   439 ;;		___awdiv
   440 ;;		___awmod
   441 ;;		_count_gear
   442 ;;		_initLCD
   443 ;;		_lcdInst
   444 ;;		_printf
   445 ;;		_read_IR
   446 ;;		_servoRotate_ConStop
   447 ;;		_servoRotate_clockwise
   448 ;;		_servoRotate_counter
   449 ;; This function is called by:
   450 ;;		Startup code after reset
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           	psect	text0
   455  00101E                     __ptext0:
   456                           	opt stack 0
   457  00101E                     _main:
   458                           	opt stack 27
   459                           
   460                           ;main.c: 49: OSCCON = 0xF2;
   461                           
   462                           ;incstack = 0
   463  00101E  0EF2               	movlw	242
   464  001020  6ED3               	movwf	4051,c	;volatile
   465                           
   466                           ;main.c: 54: LATA = 0x00;
   467  001022  0E00               	movlw	0
   468  001024  6E89               	movwf	3977,c	;volatile
   469                           
   470                           ;main.c: 55: LATB = 0x00;
   471  001026  0E00               	movlw	0
   472  001028  6E8A               	movwf	3978,c	;volatile
   473                           
   474                           ;main.c: 56: LATC = 0x00;
   475  00102A  0E00               	movlw	0
   476  00102C  6E8B               	movwf	3979,c	;volatile
   477                           
   478                           ;main.c: 57: LATD = 0x00;
   479  00102E  0E00               	movlw	0
   480  001030  6E8C               	movwf	3980,c	;volatile
   481                           
   482                           ;main.c: 58: LATE = 0x00;
   483  001032  0E00               	movlw	0
   484  001034  6E8D               	movwf	3981,c	;volatile
   485                           
   486                           ;main.c: 62: TRISA = 0xFF;
   487  001036  6892               	setf	3986,c	;volatile
   488                           
   489                           ;main.c: 63: TRISB = 0xFF;
   490  001038  6893               	setf	3987,c	;volatile
   491                           
   492                           ;main.c: 64: TRISC = 0x00;
   493  00103A  0E00               	movlw	0
   494  00103C  6E94               	movwf	3988,c	;volatile
   495                           
   496                           ;main.c: 65: TRISD = 0x00;
   497  00103E  0E00               	movlw	0
   498  001040  6E95               	movwf	3989,c	;volatile
   499                           
   500                           ;main.c: 66: TRISE = 0x00;
   501  001042  0E00               	movlw	0
   502  001044  6E96               	movwf	3990,c	;volatile
   503                           
   504                           ;main.c: 69: ADCON0 = 0x00;
   505  001046  0E00               	movlw	0
   506  001048  6EC2               	movwf	4034,c	;volatile
   507                           
   508                           ;main.c: 70: ADCON1 = 0x0B;
   509  00104A  0E0B               	movlw	11
   510  00104C  6EC1               	movwf	4033,c	;volatile
   511                           
   512                           ;main.c: 71: ADCON2bits.ADFM = 1;
   513  00104E  8EC0               	bsf	4032,7,c	;volatile
   514                           
   515                           ;main.c: 74: initLCD();
   516  001050  EC8C  F00A         	call	_initLCD	;wreg free
   517  001054                     
   518                           ;main.c: 101: if (counter>=40){
   519  001054  BE35               	btfsc	_counter+1,7,c
   520  001056  D014               	goto	l101
   521  001058  5035               	movf	_counter+1,w,c
   522  00105A  E104               	bnz	u850
   523  00105C  0E28               	movlw	40
   524  00105E  5C34               	subwf	_counter,w,c
   525  001060  A0D8               	btfss	status,0,c
   526  001062  D00E               	goto	l101
   527  001064                     u850:
   528                           
   529                           ;main.c: 102: if(init_position%5 == 0){
   530  001064  C032  F001         	movff	_init_position,___awmod@dividend
   531  001068  C033  F002         	movff	_init_position+1,___awmod@dividend+1
   532  00106C  0E00               	movlw	0
   533  00106E  6E04               	movwf	___awmod@divisor+1,c
   534  001070  0E05               	movlw	5
   535  001072  6E03               	movwf	___awmod@divisor,c
   536  001074  ECF5  F009         	call	___awmod	;wreg free
   537  001078  5001               	movf	?___awmod,w,c
   538  00107A  1002               	iorwf	?___awmod+1,w,c
   539  00107C  B4D8               	btfsc	status,2,c
   540  00107E  D023               	goto	l102
   541  001080                     l101:
   542                           
   543                           ;main.c: 104: }
   544                           ;main.c: 105: }
   545                           ;main.c: 106: servoRotate_clockwise();
   546  001080  ECF7  F00A         	call	_servoRotate_clockwise	;wreg free
   547                           
   548                           ;main.c: 107: count_gear();
   549  001084  EC2D  F00A         	call	_count_gear	;wreg free
   550                           
   551                           ;main.c: 108: printf("gear:%d",counter);
   552  001088  0E14               	movlw	low STR_1
   553  00108A  6E0D               	movwf	printf@f,c
   554  00108C  0E10               	movlw	high STR_1
   555  00108E  6E0E               	movwf	printf@f+1,c
   556  001090  C034  F00F         	movff	_counter,?_printf+2
   557  001094  C035  F010         	movff	_counter+1,?_printf+3
   558  001098  ECE5  F008         	call	_printf	;wreg free
   559                           
   560                           ;main.c: 110: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   561  00109C  0E80               	movlw	128
   562  00109E  EC98  F00B         	call	_lcdInst
   563  0010A2  0E0D               	movlw	13
   564  0010A4  6E1A               	movwf	??_main& (0+255),c
   565  0010A6  0EFC               	movlw	252
   566  0010A8                     u937:
   567  0010A8  2EE8               	decfsz	wreg,f,c
   568  0010AA  D7FE               	bra	u937
   569  0010AC  2E1A               	decfsz	??_main& (0+255),f,c
   570  0010AE  D7FC               	bra	u937
   571                           
   572                           ;main.c: 111: if (read_IR() == 1){
   573  0010B0  EC3A  F00B         	call	_read_IR	;wreg free
   574  0010B4  0401               	decf	?_read_IR,w,c
   575  0010B6  1002               	iorwf	?_read_IR+1,w,c
   576  0010B8  A4D8               	btfss	status,2,c
   577  0010BA  D7CC               	goto	l99
   578                           
   579                           ;main.c: 112: white_tape = 1;
   580  0010BC  0E00               	movlw	0
   581  0010BE  6E2D               	movwf	_white_tape+1,c
   582  0010C0  0E01               	movlw	1
   583  0010C2  6E2C               	movwf	_white_tape,c
   584  0010C4  D7C7               	goto	l99
   585  0010C6                     l102:
   586                           
   587                           ;main.c: 113: }
   588                           ;main.c: 114: }
   589                           ;main.c: 116: counter = 0;
   590  0010C6  0E00               	movlw	0
   591  0010C8  6E35               	movwf	_counter+1,c
   592  0010CA  0E00               	movlw	0
   593  0010CC  6E34               	movwf	_counter,c
   594                           
   595                           ;main.c: 117: compartment = init_position/5;
   596  0010CE  C032  F001         	movff	_init_position,___awdiv@dividend
   597  0010D2  C033  F002         	movff	_init_position+1,___awdiv@dividend+1
   598  0010D6  0E00               	movlw	0
   599  0010D8  6E04               	movwf	___awdiv@divisor+1,c
   600  0010DA  0E05               	movlw	5
   601  0010DC  6E03               	movwf	___awdiv@divisor,c
   602  0010DE  EC74  F009         	call	___awdiv	;wreg free
   603  0010E2  C001  F036         	movff	?___awdiv,_compartment
   604  0010E6  C002  F037         	movff	?___awdiv+1,_compartment+1
   605                           
   606                           ;main.c: 119: i = 0;
   607  0010EA  0E00               	movlw	0
   608  0010EC  6E2F               	movwf	_i+1,c
   609  0010EE  0E00               	movlw	0
   610  0010F0  6E2E               	movwf	_i,c
   611                           
   612                           ;main.c: 120: while (i<7){
   613  0010F2  D04F               	goto	l105
   614  0010F4                     
   615                           ;main.c: 121: if (compartment == 8){
   616  0010F4  0E08               	movlw	8
   617  0010F6  1836               	xorwf	_compartment,w,c
   618  0010F8  1037               	iorwf	_compartment+1,w,c
   619  0010FA  A4D8               	btfss	status,2,c
   620  0010FC  D004               	goto	l107
   621                           
   622                           ;main.c: 122: compartment = 0;
   623  0010FE  0E00               	movlw	0
   624  001100  6E37               	movwf	_compartment+1,c
   625  001102  0E00               	movlw	0
   626  001104  6E36               	movwf	_compartment,c
   627  001106                     l107:
   628                           
   629                           ;main.c: 123: }
   630                           ;main.c: 124: if (B_array[compartment] != 0){
   631  001106  90D8               	bcf	status,0,c
   632  001108  3436               	rlcf	_compartment,w,c
   633  00110A  6ED9               	movwf	fsr2l,c
   634  00110C  3437               	rlcf	_compartment+1,w,c
   635  00110E  6EDA               	movwf	fsr2h,c
   636  001110  0E1C               	movlw	low _B_array
   637  001112  26D9               	addwf	fsr2l,f,c
   638  001114  0E00               	movlw	high _B_array
   639  001116  22DA               	addwfc	fsr2h,f,c
   640  001118  50DE               	movf	postinc2,w,c
   641  00111A  10DE               	iorwf	postinc2,w,c
   642  00111C  B4D8               	btfsc	status,2,c
   643  00111E  D029               	goto	l109
   644                           
   645                           ;main.c: 125: servoRotate_ConStop();
   646  001120  ECB2  F00A         	call	_servoRotate_ConStop	;wreg free
   647                           
   648                           ;main.c: 126: _delay((unsigned long)((2000)*(8000000/4000.0)));
   649  001124  0E15               	movlw	21
   650  001126  6E1B               	movwf	(??_main+1)& (0+255),c
   651  001128  0E4B               	movlw	75
   652  00112A  6E1A               	movwf	??_main& (0+255),c
   653  00112C  0EBE               	movlw	190
   654  00112E                     u947:
   655  00112E  2EE8               	decfsz	wreg,f,c
   656  001130  D7FE               	bra	u947
   657  001132  2E1A               	decfsz	??_main& (0+255),f,c
   658  001134  D7FC               	bra	u947
   659  001136  2E1B               	decfsz	(??_main+1)& (0+255),f,c
   660  001138  D7FA               	bra	u947
   661  00113A  D000               	nop2	
   662                           
   663                           ;main.c: 127: }
   664                           ;main.c: 130: while(counter<=5){
   665  00113C  D01A               	goto	l109
   666  00113E                     
   667                           ;main.c: 131: servoRotate_clockwise();
   668  00113E  ECF7  F00A         	call	_servoRotate_clockwise	;wreg free
   669                           
   670                           ;main.c: 132: count_gear();
   671  001142  EC2D  F00A         	call	_count_gear	;wreg free
   672                           
   673                           ;main.c: 133: initLCD();
   674  001146  EC8C  F00A         	call	_initLCD	;wreg free
   675                           
   676                           ;main.c: 134: printf("%d",counter);
   677  00114A  0E19               	movlw	low (STR_1+5)
   678  00114C  6E0D               	movwf	printf@f,c
   679  00114E  0E10               	movlw	high (STR_1+5)
   680  001150  6E0E               	movwf	printf@f+1,c
   681  001152  C034  F00F         	movff	_counter,?_printf+2
   682  001156  C035  F010         	movff	_counter+1,?_printf+3
   683  00115A  ECE5  F008         	call	_printf	;wreg free
   684                           
   685                           ;main.c: 135: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   686  00115E  0E80               	movlw	128
   687  001160  EC98  F00B         	call	_lcdInst
   688  001164  0E0D               	movlw	13
   689  001166  6E1A               	movwf	??_main& (0+255),c
   690  001168  0EFC               	movlw	252
   691  00116A                     u957:
   692  00116A  2EE8               	decfsz	wreg,f,c
   693  00116C  D7FE               	bra	u957
   694  00116E  2E1A               	decfsz	??_main& (0+255),f,c
   695  001170  D7FC               	bra	u957
   696  001172                     l109:
   697  001172  BE35               	btfsc	_counter+1,7,c
   698  001174  D7E4               	goto	l110
   699  001176  5035               	movf	_counter+1,w,c
   700  001178  E104               	bnz	l1563
   701  00117A  0E06               	movlw	6
   702  00117C  5C34               	subwf	_counter,w,c
   703  00117E  A0D8               	btfss	status,0,c
   704  001180  D7DE               	goto	l110
   705  001182                     l1563:
   706                           
   707                           ;main.c: 137: }
   708                           ;main.c: 139: counter = 0;
   709  001182  0E00               	movlw	0
   710  001184  6E35               	movwf	_counter+1,c
   711  001186  0E00               	movlw	0
   712  001188  6E34               	movwf	_counter,c
   713                           
   714                           ;main.c: 140: compartment++;
   715  00118A  4A36               	infsnz	_compartment,f,c
   716  00118C  2A37               	incf	_compartment+1,f,c
   717                           
   718                           ;main.c: 141: i++;
   719  00118E  4A2E               	infsnz	_i,f,c
   720  001190  2A2F               	incf	_i+1,f,c
   721  001192                     l105:
   722  001192  BE2F               	btfsc	_i+1,7,c
   723  001194  D7AF               	goto	l106
   724  001196  502F               	movf	_i+1,w,c
   725  001198  E104               	bnz	l1571
   726  00119A  0E07               	movlw	7
   727  00119C  5C2E               	subwf	_i,w,c
   728  00119E  A0D8               	btfss	status,0,c
   729  0011A0  D7A9               	goto	l106
   730  0011A2                     l1571:
   731                           
   732                           ;main.c: 142: }
   733                           ;main.c: 146: counter = 0;
   734  0011A2  0E00               	movlw	0
   735  0011A4  6E35               	movwf	_counter+1,c
   736  0011A6  0E00               	movlw	0
   737  0011A8  6E34               	movwf	_counter,c
   738                           
   739                           ;main.c: 147: while(counter>=45){
   740  0011AA  D004               	goto	l113
   741  0011AC                     l1573:
   742                           
   743                           ;main.c: 148: servoRotate_counter();
   744  0011AC  ECD5  F00A         	call	_servoRotate_counter	;wreg free
   745                           
   746                           ;main.c: 149: count_gear();
   747  0011B0  EC2D  F00A         	call	_count_gear	;wreg free
   748  0011B4                     l113:
   749  0011B4  BE35               	btfsc	_counter+1,7,c
   750  0011B6  EF00  F000         	goto	start
   751  0011BA  5035               	movf	_counter+1,w,c
   752  0011BC  E1F7               	bnz	l1573
   753  0011BE  0E2D               	movlw	45
   754  0011C0  5C34               	subwf	_counter,w,c
   755  0011C2  A0D8               	btfss	status,0,c
   756  0011C4  EF00  F000         	goto	start
   757  0011C8  D7F1               	goto	l114
   758  0011CA                     __end_of_main:
   759                           	opt stack 0
   760                           tblptru	equ	0xFF8
   761                           tblptrh	equ	0xFF7
   762                           tblptrl	equ	0xFF6
   763                           tablat	equ	0xFF5
   764                           postinc0	equ	0xFEE
   765                           wreg	equ	0xFE8
   766                           postdec1	equ	0xFE5
   767                           fsr1l	equ	0xFE1
   768                           postinc2	equ	0xFDE
   769                           fsr2h	equ	0xFDA
   770                           fsr2l	equ	0xFD9
   771                           status	equ	0xFD8
   772                           
   773 ;; *************** function _servoRotate_counter *****************
   774 ;; Defined at:
   775 ;;		line 229 in file "main.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;		None
   778 ;; Auto vars:     Size  Location     Type
   779 ;;		None
   780 ;; Return value:  Size  Location     Type
   781 ;;                  1    wreg      void 
   782 ;; Registers used:
   783 ;;		wreg, status,2, status,0
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   793 ;;Total ram usage:        1 bytes
   794 ;; Hardware stack levels used:    1
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_main
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text1
   803  0015AA                     __ptext1:
   804                           	opt stack 0
   805  0015AA                     _servoRotate_counter:
   806                           	opt stack 30
   807                           
   808                           ;main.c: 231: for (i = 0; i<1; i++){
   809                           
   810                           ;incstack = 0
   811  0015AA  0E00               	movlw	0
   812  0015AC  6E2F               	movwf	_i+1,c
   813  0015AE  0E00               	movlw	0
   814  0015B0  6E2E               	movwf	_i,c
   815  0015B2                     l1089:
   816  0015B2  BE2F               	btfsc	_i+1,7,c
   817  0015B4  D005               	goto	l142
   818  0015B6  502F               	movf	_i+1,w,c
   819  0015B8  E119               	bnz	l144
   820  0015BA  042E               	decf	_i,w,c
   821  0015BC  B0D8               	btfsc	status,0,c
   822  0015BE  0012               	return	
   823  0015C0                     l142:
   824                           
   825                           ;main.c: 232: LATDbits.LATD0 = 1;
   826  0015C0  808C               	bsf	3980,0,c	;volatile
   827                           
   828                           ;main.c: 233: TRISDbits.RD0 = 0;
   829  0015C2  9095               	bcf	3989,0,c	;volatile
   830                           
   831                           ;main.c: 234: _delay((unsigned long)((2000)*(8000000/4000000.0)));
   832  0015C4  0E06               	movlw	6
   833  0015C6  6E01               	movwf	??_servoRotate_counter& (0+255),c
   834  0015C8  0E30               	movlw	48
   835  0015CA                     u967:
   836  0015CA  2EE8               	decfsz	wreg,f,c
   837  0015CC  D7FE               	bra	u967
   838  0015CE  2E01               	decfsz	??_servoRotate_counter& (0+255),f,c
   839  0015D0  D7FC               	bra	u967
   840  0015D2  D000               	nop2	
   841                           
   842                           ;main.c: 235: LATDbits.LATD0 = 0;
   843  0015D4  908C               	bcf	3980,0,c	;volatile
   844                           
   845                           ;main.c: 236: TRISDbits.RD0 = 0;
   846  0015D6  9095               	bcf	3989,0,c	;volatile
   847                           
   848                           ;main.c: 237: _delay((unsigned long)((18000)*(8000000/4000000.0)));
   849  0015D8  0E2F               	movlw	47
   850  0015DA  6E01               	movwf	??_servoRotate_counter& (0+255),c
   851  0015DC  0EC0               	movlw	192
   852  0015DE                     u977:
   853  0015DE  2EE8               	decfsz	wreg,f,c
   854  0015E0  D7FE               	bra	u977
   855  0015E2  2E01               	decfsz	??_servoRotate_counter& (0+255),f,c
   856  0015E4  D7FC               	bra	u977
   857  0015E6  4A2E               	infsnz	_i,f,c
   858  0015E8  2A2F               	incf	_i+1,f,c
   859  0015EA  D7E3               	goto	l1089
   860  0015EC                     l144:
   861  0015EC  0012               	return		;funcret
   862  0015EE                     __end_of_servoRotate_counter:
   863                           	opt stack 0
   864                           tblptru	equ	0xFF8
   865                           tblptrh	equ	0xFF7
   866                           tblptrl	equ	0xFF6
   867                           tablat	equ	0xFF5
   868                           postinc0	equ	0xFEE
   869                           wreg	equ	0xFE8
   870                           postdec1	equ	0xFE5
   871                           fsr1l	equ	0xFE1
   872                           postinc2	equ	0xFDE
   873                           fsr2h	equ	0xFDA
   874                           fsr2l	equ	0xFD9
   875                           status	equ	0xFD8
   876                           
   877 ;; *************** function _servoRotate_clockwise *****************
   878 ;; Defined at:
   879 ;;		line 202 in file "main.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   897 ;;Total ram usage:        1 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text2
   907  0015EE                     __ptext2:
   908                           	opt stack 0
   909  0015EE                     _servoRotate_clockwise:
   910                           	opt stack 30
   911                           
   912                           ;main.c: 204: for (i = 0; i<1; i++){
   913                           
   914                           ;incstack = 0
   915  0015EE  0E00               	movlw	0
   916  0015F0  6E2F               	movwf	_i+1,c
   917  0015F2  0E00               	movlw	0
   918  0015F4  6E2E               	movwf	_i,c
   919  0015F6                     l1025:
   920  0015F6  BE2F               	btfsc	_i+1,7,c
   921  0015F8  D005               	goto	l132
   922  0015FA  502F               	movf	_i+1,w,c
   923  0015FC  E119               	bnz	l134
   924  0015FE  042E               	decf	_i,w,c
   925  001600  B0D8               	btfsc	status,0,c
   926  001602  0012               	return	
   927  001604                     l132:
   928                           
   929                           ;main.c: 205: LATDbits.LATD0 = 1;
   930  001604  808C               	bsf	3980,0,c	;volatile
   931                           
   932                           ;main.c: 206: TRISDbits.RD0 = 0;
   933  001606  9095               	bcf	3989,0,c	;volatile
   934                           
   935                           ;main.c: 207: _delay((unsigned long)((1400)*(8000000/4000000.0)));
   936  001608  0E04               	movlw	4
   937  00160A  6E01               	movwf	??_servoRotate_clockwise& (0+255),c
   938  00160C  0EA2               	movlw	162
   939  00160E                     u987:
   940  00160E  2EE8               	decfsz	wreg,f,c
   941  001610  D7FE               	bra	u987
   942  001612  2E01               	decfsz	??_servoRotate_clockwise& (0+255),f,c
   943  001614  D7FC               	bra	u987
   944                           
   945                           ;main.c: 208: LATDbits.LATD0 = 0;
   946  001616  908C               	bcf	3980,0,c	;volatile
   947                           
   948                           ;main.c: 209: TRISDbits.RD0 = 0;
   949  001618  9095               	bcf	3989,0,c	;volatile
   950                           
   951                           ;main.c: 210: _delay((unsigned long)((18600)*(8000000/4000000.0)));
   952  00161A  0E31               	movlw	49
   953  00161C  6E01               	movwf	??_servoRotate_clockwise& (0+255),c
   954  00161E  0E4E               	movlw	78
   955  001620                     u997:
   956  001620  2EE8               	decfsz	wreg,f,c
   957  001622  D7FE               	bra	u997
   958  001624  2E01               	decfsz	??_servoRotate_clockwise& (0+255),f,c
   959  001626  D7FC               	bra	u997
   960  001628  D000               	nop2	
   961  00162A  4A2E               	infsnz	_i,f,c
   962  00162C  2A2F               	incf	_i+1,f,c
   963  00162E  D7E3               	goto	l1025
   964  001630                     l134:
   965  001630  0012               	return		;funcret
   966  001632                     __end_of_servoRotate_clockwise:
   967                           	opt stack 0
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           postdec1	equ	0xFE5
   975                           fsr1l	equ	0xFE1
   976                           postinc2	equ	0xFDE
   977                           fsr2h	equ	0xFDA
   978                           fsr2l	equ	0xFD9
   979                           status	equ	0xFD8
   980                           
   981 ;; *************** function _servoRotate_ConStop *****************
   982 ;; Defined at:
   983 ;;		line 216 in file "main.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;		None
   986 ;; Auto vars:     Size  Location     Type
   987 ;;		None
   988 ;; Return value:  Size  Location     Type
   989 ;;                  1    wreg      void 
   990 ;; Registers used:
   991 ;;		wreg, status,2, status,0
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1000 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1001 ;;Total ram usage:        1 bytes
  1002 ;; Hardware stack levels used:    1
  1003 ;; This function calls:
  1004 ;;		Nothing
  1005 ;; This function is called by:
  1006 ;;		_main
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text3
  1011  001564                     __ptext3:
  1012                           	opt stack 0
  1013  001564                     _servoRotate_ConStop:
  1014                           	opt stack 30
  1015                           
  1016                           ;main.c: 217: for(i=0;i<50;i++)
  1017                           
  1018                           ;incstack = 0
  1019  001564  0E00               	movlw	0
  1020  001566  6E2F               	movwf	_i+1,c
  1021  001568  0E00               	movlw	0
  1022  00156A  6E2E               	movwf	_i,c
  1023  00156C                     l1075:
  1024  00156C  BE2F               	btfsc	_i+1,7,c
  1025  00156E  D006               	goto	l137
  1026  001570  502F               	movf	_i+1,w,c
  1027  001572  E11A               	bnz	l139
  1028  001574  0E32               	movlw	50
  1029  001576  5C2E               	subwf	_i,w,c
  1030  001578  B0D8               	btfsc	status,0,c
  1031  00157A  0012               	return	
  1032  00157C                     l137:
  1033                           
  1034                           ;main.c: 218: {
  1035                           ;main.c: 219: LATDbits.LATD0 = 1;
  1036  00157C  808C               	bsf	3980,0,c	;volatile
  1037                           
  1038                           ;main.c: 220: TRISDbits.RD0 = 0;
  1039  00157E  9095               	bcf	3989,0,c	;volatile
  1040                           
  1041                           ;main.c: 221: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  1042  001580  0E04               	movlw	4
  1043  001582  6E01               	movwf	??_servoRotate_ConStop& (0+255),c
  1044  001584  0EE4               	movlw	228
  1045  001586                     u1007:
  1046  001586  2EE8               	decfsz	wreg,f,c
  1047  001588  D7FE               	bra	u1007
  1048  00158A  2E01               	decfsz	??_servoRotate_ConStop& (0+255),f,c
  1049  00158C  D7FC               	bra	u1007
  1050  00158E  D000               	nop2	
  1051                           
  1052                           ;main.c: 222: LATDbits.LATD0 = 0;
  1053  001590  908C               	bcf	3980,0,c	;volatile
  1054                           
  1055                           ;main.c: 223: TRISDbits.RD0 = 0;
  1056  001592  9095               	bcf	3989,0,c	;volatile
  1057                           
  1058                           ;main.c: 224: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  1059  001594  0E31               	movlw	49
  1060  001596  6E01               	movwf	??_servoRotate_ConStop& (0+255),c
  1061  001598  0E0C               	movlw	12
  1062  00159A                     u1017:
  1063  00159A  2EE8               	decfsz	wreg,f,c
  1064  00159C  D7FE               	bra	u1017
  1065  00159E  2E01               	decfsz	??_servoRotate_ConStop& (0+255),f,c
  1066  0015A0  D7FC               	bra	u1017
  1067  0015A2  4A2E               	infsnz	_i,f,c
  1068  0015A4  2A2F               	incf	_i+1,f,c
  1069  0015A6  D7E2               	goto	l1075
  1070  0015A8                     l139:
  1071  0015A8  0012               	return		;funcret
  1072  0015AA                     __end_of_servoRotate_ConStop:
  1073                           	opt stack 0
  1074                           tblptru	equ	0xFF8
  1075                           tblptrh	equ	0xFF7
  1076                           tblptrl	equ	0xFF6
  1077                           tablat	equ	0xFF5
  1078                           postinc0	equ	0xFEE
  1079                           wreg	equ	0xFE8
  1080                           postdec1	equ	0xFE5
  1081                           fsr1l	equ	0xFE1
  1082                           postinc2	equ	0xFDE
  1083                           fsr2h	equ	0xFDA
  1084                           fsr2l	equ	0xFD9
  1085                           status	equ	0xFD8
  1086                           
  1087 ;; *************** function _read_IR *****************
  1088 ;; Defined at:
  1089 ;;		line 244 in file "main.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;		None
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  input           1    2[COMRAM] unsigned char 
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  2    0[COMRAM] int 
  1096 ;; Registers used:
  1097 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : 0/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1104 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1106 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;Total ram usage:        3 bytes
  1108 ;; Hardware stack levels used:    1
  1109 ;; This function calls:
  1110 ;;		Nothing
  1111 ;; This function is called by:
  1112 ;;		_main
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text4
  1117  001674                     __ptext4:
  1118                           	opt stack 0
  1119  001674                     _read_IR:
  1120                           	opt stack 30
  1121                           
  1122                           ;main.c: 246: TRISAbits.RA4 = 1;
  1123                           
  1124                           ;incstack = 0
  1125                           ;main.c: 245: while(1){
  1126  001674  8892               	bsf	3986,4,c	;volatile
  1127                           
  1128                           ;main.c: 247: unsigned char input = PORTAbits.RA4;
  1129  001676  0E00               	movlw	0
  1130  001678  B880               	btfsc	3968,4,c	;volatile
  1131  00167A  0E01               	movlw	1
  1132  00167C  6E03               	movwf	read_IR@input,c
  1133                           
  1134                           ;main.c: 252: if (array[input] == '1'){
  1135  00167E  5003               	movf	read_IR@input,w,c
  1136  001680  0D01               	mullw	1
  1137  001682  0E0B               	movlw	low _array
  1138  001684  24F3               	addwf	prodl,w,c
  1139  001686  6EF6               	movwf	tblptrl,c
  1140  001688  0E10               	movlw	high _array
  1141  00168A  20F4               	addwfc	prodh,w,c
  1142  00168C  6EF7               	movwf	tblptrh,c
  1143  00168E                     	if	0	;There are less than 3 active tblptr bytes
  1144  00168E                     	endif
  1145  00168E  0008               	tblrd		*
  1146  001690  50F5               	movf	tablat,w,c
  1147  001692  0A31               	xorlw	49
  1148  001694  A4D8               	btfss	status,2,c
  1149  001696  D009               	goto	l148
  1150                           
  1151                           ;main.c: 253: white_tape = 1;
  1152  001698  0E00               	movlw	0
  1153  00169A  6E2D               	movwf	_white_tape+1,c
  1154  00169C  0E01               	movlw	1
  1155  00169E  6E2C               	movwf	_white_tape,c
  1156                           
  1157                           ;main.c: 254: return 1;
  1158  0016A0  0E00               	movlw	0
  1159  0016A2  6E02               	movwf	?_read_IR+1,c
  1160  0016A4  0E01               	movlw	1
  1161  0016A6  6E01               	movwf	?_read_IR,c
  1162  0016A8  0012               	return	
  1163  0016AA                     l148:
  1164                           
  1165                           ;main.c: 256: else{
  1166                           ;main.c: 257: return 0;
  1167  0016AA  0E00               	movlw	0
  1168  0016AC  6E02               	movwf	?_read_IR+1,c
  1169  0016AE  0E00               	movlw	0
  1170  0016B0  D7FA               	goto	L1
  1171  0016B2                     __end_of_read_IR:
  1172                           	opt stack 0
  1173                           tblptru	equ	0xFF8
  1174                           tblptrh	equ	0xFF7
  1175                           tblptrl	equ	0xFF6
  1176                           tablat	equ	0xFF5
  1177                           prodh	equ	0xFF4
  1178                           prodl	equ	0xFF3
  1179                           postinc0	equ	0xFEE
  1180                           wreg	equ	0xFE8
  1181                           postdec1	equ	0xFE5
  1182                           fsr1l	equ	0xFE1
  1183                           postinc2	equ	0xFDE
  1184                           fsr2h	equ	0xFDA
  1185                           fsr2l	equ	0xFD9
  1186                           status	equ	0xFD8
  1187                           
  1188 ;; *************** function _count_gear *****************
  1189 ;; Defined at:
  1190 ;;		line 163 in file "main.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;		None
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;		None
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;Total ram usage:        1 bytes
  1209 ;; Hardware stack levels used:    1
  1210 ;; Hardware stack levels required when called:    3
  1211 ;; This function calls:
  1212 ;;		_initLCD
  1213 ;;		_lcdInst
  1214 ;;		_printf
  1215 ;;		_readADC
  1216 ;; This function is called by:
  1217 ;;		_main
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           	psect	text5
  1222  00145A                     __ptext5:
  1223                           	opt stack 0
  1224  00145A                     _count_gear:
  1225                           	opt stack 27
  1226                           
  1227                           ;main.c: 165: if (readADC(3)<250){
  1228                           
  1229                           ;incstack = 0
  1230  00145A  0E03               	movlw	3
  1231  00145C  EC74  F00B         	call	_readADC
  1232  001460  5002               	movf	?_readADC+1,w,c
  1233  001462  E130               	bnz	l123
  1234  001464  0EFA               	movlw	250
  1235  001466  5C01               	subwf	?_readADC,w,c
  1236  001468  B0D8               	btfsc	status,0,c
  1237  00146A  0012               	return	
  1238                           
  1239                           ;main.c: 166: if (prev == 0){
  1240  00146C  5030               	movf	_prev,w,c
  1241  00146E  1031               	iorwf	_prev+1,w,c
  1242  001470  A4D8               	btfss	status,2,c
  1243  001472  D023               	goto	l120
  1244                           
  1245                           ;main.c: 167: initLCD();
  1246  001474  EC8C  F00A         	call	_initLCD	;wreg free
  1247                           
  1248                           ;main.c: 168: printf("%d",counter);
  1249  001478  0E19               	movlw	low (STR_1+5)
  1250  00147A  6E0D               	movwf	printf@f,c
  1251  00147C  0E10               	movlw	high (STR_1+5)
  1252  00147E  6E0E               	movwf	printf@f+1,c
  1253  001480  C034  F00F         	movff	_counter,?_printf+2
  1254  001484  C035  F010         	movff	_counter+1,?_printf+3
  1255  001488  ECE5  F008         	call	_printf	;wreg free
  1256                           
  1257                           ;main.c: 169: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
  1258  00148C  0E80               	movlw	128
  1259  00148E  EC98  F00B         	call	_lcdInst
  1260  001492  0E0D               	movlw	13
  1261  001494  6E19               	movwf	??_count_gear& (0+255),c
  1262  001496  0EFC               	movlw	252
  1263  001498                     u1027:
  1264  001498  2EE8               	decfsz	wreg,f,c
  1265  00149A  D7FE               	bra	u1027
  1266  00149C  2E19               	decfsz	??_count_gear& (0+255),f,c
  1267  00149E  D7FC               	bra	u1027
  1268                           
  1269                           ;main.c: 171: counter++;
  1270  0014A0  4A34               	infsnz	_counter,f,c
  1271  0014A2  2A35               	incf	_counter+1,f,c
  1272                           
  1273                           ;main.c: 172: if (white_tape == 1){
  1274  0014A4  042C               	decf	_white_tape,w,c
  1275  0014A6  102D               	iorwf	_white_tape+1,w,c
  1276  0014A8  A4D8               	btfss	status,2,c
  1277  0014AA  D002               	goto	l121
  1278                           
  1279                           ;main.c: 173: init_position ++;
  1280  0014AC  4A32               	infsnz	_init_position,f,c
  1281  0014AE  2A33               	incf	_init_position+1,f,c
  1282  0014B0                     l121:
  1283                           
  1284                           ;main.c: 175: }
  1285                           ;main.c: 176: prev = 1;
  1286  0014B0  0E00               	movlw	0
  1287  0014B2  6E31               	movwf	_prev+1,c
  1288  0014B4  0E01               	movlw	1
  1289  0014B6  6E30               	movwf	_prev,c
  1290                           
  1291                           ;main.c: 177: }
  1292  0014B8  0012               	return	
  1293  0014BA                     l120:
  1294                           
  1295                           ;main.c: 178: else{
  1296                           ;main.c: 179: prev = 0;
  1297  0014BA  0E00               	movlw	0
  1298  0014BC  6E31               	movwf	_prev+1,c
  1299  0014BE  0E00               	movlw	0
  1300  0014C0  6E30               	movwf	_prev,c
  1301  0014C2  0012               	return	
  1302  0014C4                     l123:
  1303  0014C4  0012               	return		;funcret
  1304  0014C6                     __end_of_count_gear:
  1305                           	opt stack 0
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           prodh	equ	0xFF4
  1311                           prodl	equ	0xFF3
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           postdec1	equ	0xFE5
  1315                           fsr1l	equ	0xFE1
  1316                           postinc2	equ	0xFDE
  1317                           fsr2h	equ	0xFDA
  1318                           fsr2l	equ	0xFD9
  1319                           status	equ	0xFD8
  1320                           
  1321 ;; *************** function _readADC *****************
  1322 ;; Defined at:
  1323 ;;		line 184 in file "main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  channel         1    wreg     unsigned char 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  channel         1    4[COMRAM] unsigned char 
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  2    0[COMRAM] unsigned short 
  1330 ;; Registers used:
  1331 ;;		wreg, status,2, status,0
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1337 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1339 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1340 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1341 ;;Total ram usage:        5 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_count_gear
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text6
  1351  0016E8                     __ptext6:
  1352                           	opt stack 0
  1353  0016E8                     _readADC:
  1354                           	opt stack 29
  1355                           
  1356                           ;incstack = 0
  1357                           ;readADC@channel stored from wreg
  1358  0016E8  6E05               	movwf	readADC@channel,c
  1359                           
  1360                           ;main.c: 193: ADCON0 = (channel & 0x0F) << 2;
  1361  0016EA  C005  F003         	movff	readADC@channel,??_readADC
  1362  0016EE  0E0F               	movlw	15
  1363  0016F0  1603               	andwf	??_readADC,f,c
  1364  0016F2  90D8               	bcf	status,0,c
  1365  0016F4  3603               	rlcf	??_readADC,f,c
  1366  0016F6  90D8               	bcf	status,0,c
  1367  0016F8  3403               	rlcf	??_readADC,w,c
  1368  0016FA  6EC2               	movwf	4034,c	;volatile
  1369                           
  1370                           ;main.c: 194: ADON = 1;
  1371  0016FC  80C2               	bsf	4034,0,c	;volatile
  1372                           
  1373                           ;main.c: 195: ADCON0bits.GO = 1;
  1374  0016FE  82C2               	bsf	4034,1,c	;volatile
  1375  001700  B2C2               	btfsc	4034,1,c	;volatile
  1376  001702  D7FE               	goto	l127
  1377                           
  1378                           ;main.c: 197: return (ADRESH << 8) | ADRESL;
  1379  001704  50C3               	movf	4035,w,c	;volatile
  1380  001706  CFC4 F003          	movff	4036,??_readADC	;volatile
  1381  00170A  6A04               	clrf	(??_readADC+1)& (0+255),c
  1382  00170C  C003  F004         	movff	??_readADC,??_readADC+1
  1383  001710  6A03               	clrf	??_readADC,c
  1384  001712  1003               	iorwf	??_readADC,w,c
  1385  001714  6E01               	movwf	?_readADC,c
  1386  001716  5004               	movf	??_readADC+1,w,c
  1387  001718  6E02               	movwf	?_readADC+1,c
  1388  00171A  0012               	return	
  1389  00171C                     __end_of_readADC:
  1390                           	opt stack 0
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           prodh	equ	0xFF4
  1396                           prodl	equ	0xFF3
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           postdec1	equ	0xFE5
  1400                           fsr1l	equ	0xFE1
  1401                           postinc2	equ	0xFDE
  1402                           fsr2h	equ	0xFDA
  1403                           fsr2l	equ	0xFD9
  1404                           status	equ	0xFD8
  1405                           
  1406 ;; *************** function _printf *****************
  1407 ;; Defined at:
  1408 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1411 ;;		 -> STR_3(3), STR_2(3), STR_1(8), 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  tmpval          4    0        struct .
  1414 ;;  cp              3    0        PTR const unsigned char 
  1415 ;;  val             2   21[COMRAM] unsigned int 
  1416 ;;  ap              2   17[COMRAM] PTR void [1]
  1417 ;;		 -> ?_printf(2), 
  1418 ;;  len             2    0        unsigned int 
  1419 ;;  c               1   23[COMRAM] char 
  1420 ;;  prec            1   20[COMRAM] char 
  1421 ;;  flag            1   19[COMRAM] unsigned char 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  2   12[COMRAM] int 
  1424 ;; Registers used:
  1425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;Total ram usage:       12 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:    2
  1438 ;; This function calls:
  1439 ;;		___lwdiv
  1440 ;;		___lwmod
  1441 ;;		_putch
  1442 ;; This function is called by:
  1443 ;;		_main
  1444 ;;		_count_gear
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text7
  1449  0011CA                     __ptext7:
  1450                           	opt stack 0
  1451  0011CA                     _printf:
  1452                           	opt stack 28
  1453                           
  1454                           ;doprnt.c: 466: va_list ap;
  1455                           ;doprnt.c: 499: signed char c;
  1456                           ;doprnt.c: 506: signed char prec;
  1457                           ;doprnt.c: 508: unsigned char flag;
  1458                           ;doprnt.c: 523: union {
  1459                           ;doprnt.c: 524: unsigned long vd;
  1460                           ;doprnt.c: 525: double integ;
  1461                           ;doprnt.c: 526: } tmpval;
  1462                           ;doprnt.c: 528: unsigned int val;
  1463                           ;doprnt.c: 529: unsigned len;
  1464                           ;doprnt.c: 530: const char * cp;
  1465                           ;doprnt.c: 533: *ap = __va_start();
  1466                           
  1467                           ;incstack = 0
  1468  0011CA  0E0F               	movlw	low (?_printf+2)
  1469  0011CC  6E12               	movwf	printf@ap,c
  1470  0011CE  0E00               	movlw	high (?_printf+2)
  1471  0011D0  6E13               	movwf	printf@ap+1,c
  1472                           
  1473                           ;doprnt.c: 536: while(c = *f++) {
  1474  0011D2  D07D               	goto	u660
  1475  0011D4                     
  1476                           ;doprnt.c: 538: if(c != '%')
  1477  0011D4  0E25               	movlw	37
  1478  0011D6  1818               	xorwf	printf@c,w,c
  1479  0011D8  B4D8               	btfsc	status,2,c
  1480  0011DA  D004               	goto	l220
  1481                           
  1482                           ;doprnt.c: 540: {
  1483                           ;doprnt.c: 541: (putch(c) );
  1484  0011DC  5018               	movf	printf@c,w,c
  1485  0011DE  EC8E  F00B         	call	_putch
  1486                           
  1487                           ;doprnt.c: 542: continue;
  1488  0011E2  D075               	goto	u660
  1489  0011E4                     l220:
  1490                           
  1491                           ;doprnt.c: 543: }
  1492                           ;doprnt.c: 548: flag = 0;
  1493  0011E4  0E00               	movlw	0
  1494  0011E6  6E14               	movwf	printf@flag,c
  1495                           
  1496                           ;doprnt.c: 822: }
  1497                           
  1498                           ;doprnt.c: 813: continue;
  1499                           
  1500                           ;doprnt.c: 802: default:
  1501                           
  1502                           ;doprnt.c: 698: case 'i':
  1503                           ;doprnt.c: 699: break;
  1504                           
  1505                           ;doprnt.c: 697: case 'd':
  1506                           
  1507                           ;doprnt.c: 638: goto alldone;
  1508                           
  1509                           ;doprnt.c: 637: case 0:
  1510                           
  1511                           ;doprnt.c: 635: switch(c = *f++) {
  1512  0011E8  C00D  FFF6         	movff	printf@f,tblptrl
  1513  0011EC  C00E  FFF7         	movff	printf@f+1,tblptrh
  1514  0011F0  4A0D               	infsnz	printf@f,f,c
  1515  0011F2  2A0E               	incf	printf@f+1,f,c
  1516  0011F4                     	if	0	;tblptru may be non-zero
  1517  0011F4                     	endif
  1518  0011F4                     	if	0	;tblptru may be non-zero
  1519  0011F4                     	endif
  1520  0011F4  0008               	tblrd		*
  1521  0011F6  CFF5 F018          	movff	tablat,printf@c
  1522  0011FA  5018               	movf	printf@c,w,c
  1523                           
  1524                           ; Switch size 1, requested type "space"
  1525                           ; Number of cases is 3, Range of values is 0 to 105
  1526                           ; switch strategies available:
  1527                           ; Name         Instructions Cycles
  1528                           ; simple_byte           10     6 (average)
  1529                           ;	Chosen strategy is simple_byte
  1530  0011FC  0A00               	xorlw	0	; case 0
  1531  0011FE  B4D8               	btfsc	status,2,c
  1532  001200  0012               	return	
  1533  001202  0A64               	xorlw	100	; case 100
  1534  001204  B4D8               	btfsc	status,2,c
  1535  001206  D003               	goto	l226
  1536  001208  0A0D               	xorlw	13	; case 105
  1537  00120A  A4D8               	btfss	status,2,c
  1538  00120C  D060               	goto	u660
  1539  00120E                     l226:
  1540                           
  1541                           ;doprnt.c: 1253: {
  1542                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1543  00120E  C012  FFD9         	movff	printf@ap,fsr2l
  1544  001212  C013  FFDA         	movff	printf@ap+1,fsr2h
  1545  001216  CFDE F016          	movff	postinc2,printf@val
  1546  00121A  CFDD F017          	movff	postdec2,printf@val+1
  1547  00121E  0E02               	movlw	2
  1548  001220  2612               	addwf	printf@ap,f,c
  1549  001222  0E00               	movlw	0
  1550  001224  2213               	addwfc	printf@ap+1,f,c
  1551                           
  1552                           ;doprnt.c: 1261: if((int)val < 0) {
  1553  001226  AE17               	btfss	printf@val+1,7,c
  1554  001228  D006               	goto	l228
  1555                           
  1556                           ;doprnt.c: 1262: flag |= 0x03;
  1557  00122A  0E03               	movlw	3
  1558  00122C  1214               	iorwf	printf@flag,f,c
  1559                           
  1560                           ;doprnt.c: 1263: val = -val;
  1561  00122E  6C16               	negf	printf@val,c
  1562  001230  1E17               	comf	printf@val+1,f,c
  1563  001232  B0D8               	btfsc	status,0,c
  1564  001234  2A17               	incf	printf@val+1,f,c
  1565  001236                     l228:
  1566                           
  1567                           ;doprnt.c: 1264: }
  1568                           ;doprnt.c: 1266: }
  1569                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1570  001236  0E01               	movlw	1
  1571  001238  6E18               	movwf	printf@c,c
  1572  00123A                     l1355:
  1573  00123A  0E05               	movlw	5
  1574  00123C  1818               	xorwf	printf@c,w,c
  1575  00123E  B4D8               	btfsc	status,2,c
  1576  001240  D012               	goto	u640
  1577                           
  1578                           ;doprnt.c: 1306: if(val < dpowers[c])
  1579  001242  5018               	movf	printf@c,w,c
  1580  001244  0D02               	mullw	2
  1581  001246  0E01               	movlw	low _dpowers
  1582  001248  24F3               	addwf	prodl,w,c
  1583  00124A  6EF6               	movwf	tblptrl,c
  1584  00124C  0E10               	movlw	high _dpowers
  1585  00124E  20F4               	addwfc	prodh,w,c
  1586  001250  6EF7               	movwf	tblptrh,c
  1587  001252                     	if	0	;There are less than 3 active tblptr bytes
  1588  001252                     	endif
  1589  001252  0009               	tblrd		*+
  1590  001254  50F5               	movf	tablat,w,c
  1591  001256  5C16               	subwf	printf@val,w,c
  1592  001258  0009               	tblrd		*+
  1593  00125A  50F5               	movf	tablat,w,c
  1594  00125C  5817               	subwfb	printf@val+1,w,c
  1595  00125E  A0D8               	btfss	status,0,c
  1596  001260  D002               	goto	u640
  1597                           
  1598                           ;doprnt.c: 1307: break;
  1599  001262  2A18               	incf	printf@c,f,c
  1600  001264  D7EA               	goto	l1355
  1601  001266                     u640:
  1602                           
  1603                           ;doprnt.c: 1422: {
  1604                           ;doprnt.c: 1438: if(flag & 0x03)
  1605  001266  C014  F011         	movff	printf@flag,??_printf
  1606  00126A  0E03               	movlw	3
  1607  00126C  1611               	andwf	??_printf,f,c
  1608  00126E  B4D8               	btfsc	status,2,c
  1609  001270  D003               	goto	l232
  1610                           
  1611                           ;doprnt.c: 1439: (putch('-') );
  1612  001272  0E2D               	movlw	45
  1613  001274  EC8E  F00B         	call	_putch
  1614  001278                     l232:
  1615                           
  1616                           ;doprnt.c: 1469: }
  1617                           ;doprnt.c: 1472: prec = c;
  1618  001278  C018  F015         	movff	printf@c,printf@prec
  1619                           
  1620                           ;doprnt.c: 1474: while(prec--) {
  1621  00127C  D024               	goto	l233
  1622  00127E                     
  1623                           ;doprnt.c: 1478: {
  1624                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1625  00127E  5015               	movf	printf@prec,w,c
  1626  001280  0D02               	mullw	2
  1627  001282  0E01               	movlw	low _dpowers
  1628  001284  24F3               	addwf	prodl,w,c
  1629  001286  6EF6               	movwf	tblptrl,c
  1630  001288  0E10               	movlw	high _dpowers
  1631  00128A  20F4               	addwfc	prodh,w,c
  1632  00128C  6EF7               	movwf	tblptrh,c
  1633  00128E                     	if	0	;There are less than 3 active tblptr bytes
  1634  00128E                     	endif
  1635  00128E  0009               	tblrd		*+
  1636  001290  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1637  001294  000A               	tblrd		*-
  1638  001296  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1639  00129A  C016  F001         	movff	printf@val,___lwdiv@dividend
  1640  00129E  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1641  0012A2  EC63  F00A         	call	___lwdiv	;wreg free
  1642  0012A6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1643  0012AA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1644  0012AE  0E00               	movlw	0
  1645  0012B0  6E0B               	movwf	___lwmod@divisor+1,c
  1646  0012B2  0E0A               	movlw	10
  1647  0012B4  6E0A               	movwf	___lwmod@divisor,c
  1648  0012B6  EC19  F00B         	call	___lwmod	;wreg free
  1649  0012BA  5008               	movf	?___lwmod,w,c
  1650  0012BC  0F30               	addlw	48
  1651  0012BE  6E18               	movwf	printf@c,c
  1652                           
  1653                           ;doprnt.c: 1523: }
  1654                           ;doprnt.c: 1524: (putch(c) );
  1655  0012C0  5018               	movf	printf@c,w,c
  1656  0012C2  EC8E  F00B         	call	_putch
  1657  0012C6                     l233:
  1658  0012C6  0615               	decf	printf@prec,f,c
  1659  0012C8  2815               	incf	printf@prec,w,c
  1660  0012CA  A4D8               	btfss	status,2,c
  1661  0012CC  D7D8               	goto	l234
  1662  0012CE                     u660:
  1663  0012CE  C00D  FFF6         	movff	printf@f,tblptrl
  1664  0012D2  C00E  FFF7         	movff	printf@f+1,tblptrh
  1665  0012D6  4A0D               	infsnz	printf@f,f,c
  1666  0012D8  2A0E               	incf	printf@f+1,f,c
  1667  0012DA                     	if	0	;tblptru may be non-zero
  1668  0012DA                     	endif
  1669  0012DA                     	if	0	;tblptru may be non-zero
  1670  0012DA                     	endif
  1671  0012DA  0008               	tblrd		*
  1672  0012DC  CFF5 F018          	movff	tablat,printf@c
  1673  0012E0  5018               	movf	printf@c,w,c
  1674  0012E2  B4D8               	btfsc	status,2,c
  1675  0012E4  0012               	return	
  1676  0012E6  D776               	goto	l219
  1677  0012E8                     __end_of_printf:
  1678                           	opt stack 0
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           prodh	equ	0xFF4
  1684                           prodl	equ	0xFF3
  1685                           postinc0	equ	0xFEE
  1686                           wreg	equ	0xFE8
  1687                           postdec1	equ	0xFE5
  1688                           fsr1l	equ	0xFE1
  1689                           postinc2	equ	0xFDE
  1690                           postdec2	equ	0xFDD
  1691                           fsr2h	equ	0xFDA
  1692                           fsr2l	equ	0xFD9
  1693                           status	equ	0xFD8
  1694                           
  1695 ;; *************** function _putch *****************
  1696 ;; Defined at:
  1697 ;;		line 24 in file "lcd.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  data            1    wreg     unsigned char 
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  data            1    2[COMRAM] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1715 ;;Total ram usage:        1 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    1
  1718 ;; This function calls:
  1719 ;;		_lcdNibble
  1720 ;; This function is called by:
  1721 ;;		_printf
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text8
  1726  00171C                     __ptext8:
  1727                           	opt stack 0
  1728  00171C                     _putch:
  1729                           	opt stack 28
  1730                           
  1731                           ;incstack = 0
  1732                           ;putch@data stored from wreg
  1733  00171C  6E03               	movwf	putch@data,c
  1734                           
  1735                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1736  00171E  848C               	bsf	3980,2,c	;volatile
  1737                           
  1738                           ;lcd.c: 33: lcdNibble(data);
  1739  001720  5003               	movf	putch@data,w,c
  1740  001722  ECB6  F009         	call	_lcdNibble
  1741                           
  1742                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1743  001726  0E42               	movlw	66
  1744  001728                     u1037:
  1745  001728  2EE8               	decfsz	wreg,f,c
  1746  00172A  D7FE               	bra	u1037
  1747  00172C  D000               	nop2	
  1748  00172E  0012               	return		;funcret
  1749  001730                     __end_of_putch:
  1750                           	opt stack 0
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           prodh	equ	0xFF4
  1756                           prodl	equ	0xFF3
  1757                           postinc0	equ	0xFEE
  1758                           wreg	equ	0xFE8
  1759                           postdec1	equ	0xFE5
  1760                           fsr1l	equ	0xFE1
  1761                           postinc2	equ	0xFDE
  1762                           postdec2	equ	0xFDD
  1763                           fsr2h	equ	0xFDA
  1764                           fsr2l	equ	0xFD9
  1765                           status	equ	0xFD8
  1766                           
  1767 ;; *************** function ___lwmod *****************
  1768 ;; Defined at:
  1769 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  dividend        2    7[COMRAM] unsigned int 
  1772 ;;  divisor         2    9[COMRAM] unsigned int 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  counter         1   11[COMRAM] unsigned char 
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  2    7[COMRAM] unsigned int 
  1777 ;; Registers used:
  1778 ;;		wreg, status,2, status,0
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;Total ram usage:        5 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_printf
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text9
  1798  001632                     __ptext9:
  1799                           	opt stack 0
  1800  001632                     ___lwmod:
  1801                           	opt stack 29
  1802                           
  1803                           ;incstack = 0
  1804  001632  500A               	movf	___lwmod@divisor,w,c
  1805  001634  100B               	iorwf	___lwmod@divisor+1,w,c
  1806  001636  B4D8               	btfsc	status,2,c
  1807  001638  D018               	goto	l656
  1808  00163A  0E01               	movlw	1
  1809  00163C  6E0C               	movwf	___lwmod@counter,c
  1810  00163E  D004               	goto	l651
  1811  001640  90D8               	bcf	status,0,c
  1812  001642  360A               	rlcf	___lwmod@divisor,f,c
  1813  001644  360B               	rlcf	___lwmod@divisor+1,f,c
  1814  001646  2A0C               	incf	___lwmod@counter,f,c
  1815  001648                     l651:
  1816  001648  AE0B               	btfss	___lwmod@divisor+1,7,c
  1817  00164A  D7FA               	goto	l652
  1818  00164C                     u580:
  1819  00164C  500A               	movf	___lwmod@divisor,w,c
  1820  00164E  5C08               	subwf	___lwmod@dividend,w,c
  1821  001650  500B               	movf	___lwmod@divisor+1,w,c
  1822  001652  5809               	subwfb	___lwmod@dividend+1,w,c
  1823  001654  A0D8               	btfss	status,0,c
  1824  001656  D004               	goto	l655
  1825  001658  500A               	movf	___lwmod@divisor,w,c
  1826  00165A  5E08               	subwf	___lwmod@dividend,f,c
  1827  00165C  500B               	movf	___lwmod@divisor+1,w,c
  1828  00165E  5A09               	subwfb	___lwmod@dividend+1,f,c
  1829  001660                     l655:
  1830  001660  90D8               	bcf	status,0,c
  1831  001662  320B               	rrcf	___lwmod@divisor+1,f,c
  1832  001664  320A               	rrcf	___lwmod@divisor,f,c
  1833  001666  2E0C               	decfsz	___lwmod@counter,f,c
  1834  001668  D7F1               	goto	u580
  1835  00166A                     l656:
  1836  00166A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1837  00166E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1838  001672  0012               	return		;funcret
  1839  001674                     __end_of___lwmod:
  1840                           	opt stack 0
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           prodh	equ	0xFF4
  1846                           prodl	equ	0xFF3
  1847                           postinc0	equ	0xFEE
  1848                           wreg	equ	0xFE8
  1849                           postdec1	equ	0xFE5
  1850                           fsr1l	equ	0xFE1
  1851                           postinc2	equ	0xFDE
  1852                           postdec2	equ	0xFDD
  1853                           fsr2h	equ	0xFDA
  1854                           fsr2l	equ	0xFD9
  1855                           status	equ	0xFD8
  1856                           
  1857 ;; *************** function ___lwdiv *****************
  1858 ;; Defined at:
  1859 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  dividend        2    0[COMRAM] unsigned int 
  1862 ;;  divisor         2    2[COMRAM] unsigned int 
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;  quotient        2    4[COMRAM] unsigned int 
  1865 ;;  counter         1    6[COMRAM] unsigned char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  2    0[COMRAM] unsigned int 
  1868 ;; Registers used:
  1869 ;;		wreg, status,2, status,0
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1875 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;Total ram usage:        7 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; This function calls:
  1882 ;;		Nothing
  1883 ;; This function is called by:
  1884 ;;		_printf
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text10
  1889  0014C6                     __ptext10:
  1890                           	opt stack 0
  1891  0014C6                     ___lwdiv:
  1892                           	opt stack 29
  1893                           
  1894                           ;incstack = 0
  1895  0014C6  0E00               	movlw	0
  1896  0014C8  6E06               	movwf	___lwdiv@quotient+1,c
  1897  0014CA  0E00               	movlw	0
  1898  0014CC  6E05               	movwf	___lwdiv@quotient,c
  1899  0014CE  5003               	movf	___lwdiv@divisor,w,c
  1900  0014D0  1004               	iorwf	___lwdiv@divisor+1,w,c
  1901  0014D2  B4D8               	btfsc	status,2,c
  1902  0014D4  D01C               	goto	l646
  1903  0014D6  0E01               	movlw	1
  1904  0014D8  6E07               	movwf	___lwdiv@counter,c
  1905  0014DA  D004               	goto	l641
  1906  0014DC  90D8               	bcf	status,0,c
  1907  0014DE  3603               	rlcf	___lwdiv@divisor,f,c
  1908  0014E0  3604               	rlcf	___lwdiv@divisor+1,f,c
  1909  0014E2  2A07               	incf	___lwdiv@counter,f,c
  1910  0014E4                     l641:
  1911  0014E4  AE04               	btfss	___lwdiv@divisor+1,7,c
  1912  0014E6  D7FA               	goto	l642
  1913  0014E8                     u550:
  1914  0014E8  90D8               	bcf	status,0,c
  1915  0014EA  3605               	rlcf	___lwdiv@quotient,f,c
  1916  0014EC  3606               	rlcf	___lwdiv@quotient+1,f,c
  1917  0014EE  5003               	movf	___lwdiv@divisor,w,c
  1918  0014F0  5C01               	subwf	___lwdiv@dividend,w,c
  1919  0014F2  5004               	movf	___lwdiv@divisor+1,w,c
  1920  0014F4  5802               	subwfb	___lwdiv@dividend+1,w,c
  1921  0014F6  A0D8               	btfss	status,0,c
  1922  0014F8  D005               	goto	l645
  1923  0014FA  5003               	movf	___lwdiv@divisor,w,c
  1924  0014FC  5E01               	subwf	___lwdiv@dividend,f,c
  1925  0014FE  5004               	movf	___lwdiv@divisor+1,w,c
  1926  001500  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1927  001502  8005               	bsf	___lwdiv@quotient,0,c
  1928  001504                     l645:
  1929  001504  90D8               	bcf	status,0,c
  1930  001506  3204               	rrcf	___lwdiv@divisor+1,f,c
  1931  001508  3203               	rrcf	___lwdiv@divisor,f,c
  1932  00150A  2E07               	decfsz	___lwdiv@counter,f,c
  1933  00150C  D7ED               	goto	u550
  1934  00150E                     l646:
  1935  00150E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1936  001512  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1937  001516  0012               	return		;funcret
  1938  001518                     __end_of___lwdiv:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           postinc0	equ	0xFEE
  1947                           wreg	equ	0xFE8
  1948                           postdec1	equ	0xFE5
  1949                           fsr1l	equ	0xFE1
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _initLCD *****************
  1957 ;; Defined at:
  1958 ;;		line 60 in file "lcd.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  1    wreg      void 
  1965 ;; Registers used:
  1966 ;;		wreg, status,2, status,0, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;Total ram usage:        1 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    2
  1979 ;; This function calls:
  1980 ;;		_lcdInst
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;;		_count_gear
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text11
  1988  001518                     __ptext11:
  1989                           	opt stack 0
  1990  001518                     _initLCD:
  1991                           	opt stack 28
  1992                           
  1993                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  1994                           
  1995                           ;incstack = 0
  1996  001518  0E27               	movlw	39
  1997  00151A  6E04               	movwf	??_initLCD& (0+255),c
  1998  00151C  0EF5               	movlw	245
  1999  00151E                     u1047:
  2000  00151E  2EE8               	decfsz	wreg,f,c
  2001  001520  D7FE               	bra	u1047
  2002  001522  2E04               	decfsz	??_initLCD& (0+255),f,c
  2003  001524  D7FC               	bra	u1047
  2004  001526  F000               	nop	
  2005                           
  2006                           ;lcd.c: 69: lcdInst(0b00110011);
  2007  001528  0E33               	movlw	51
  2008  00152A  EC98  F00B         	call	_lcdInst
  2009                           
  2010                           ;lcd.c: 70: lcdInst(0b00110010);
  2011  00152E  0E32               	movlw	50
  2012  001530  EC98  F00B         	call	_lcdInst
  2013                           
  2014                           ;lcd.c: 71: lcdInst(0b00101000);
  2015  001534  0E28               	movlw	40
  2016  001536  EC98  F00B         	call	_lcdInst
  2017                           
  2018                           ;lcd.c: 72: lcdInst(0b00001111);
  2019  00153A  0E0F               	movlw	15
  2020  00153C  EC98  F00B         	call	_lcdInst
  2021                           
  2022                           ;lcd.c: 73: lcdInst(0b00000110);
  2023  001540  0E06               	movlw	6
  2024  001542  EC98  F00B         	call	_lcdInst
  2025                           
  2026                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  2027  001546  0E01               	movlw	1
  2028  001548  EC98  F00B         	call	_lcdInst
  2029  00154C  0E27               	movlw	39
  2030  00154E  6E04               	movwf	??_initLCD& (0+255),c
  2031  001550  0EF5               	movlw	245
  2032  001552                     u1057:
  2033  001552  2EE8               	decfsz	wreg,f,c
  2034  001554  D7FE               	bra	u1057
  2035  001556  2E04               	decfsz	??_initLCD& (0+255),f,c
  2036  001558  D7FC               	bra	u1057
  2037  00155A  F000               	nop	
  2038                           
  2039                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2040  00155C  0E0F               	movlw	15
  2041  00155E  EC98  F00B         	call	_lcdInst
  2042  001562  0012               	return		;funcret
  2043  001564                     __end_of_initLCD:
  2044                           	opt stack 0
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           prodh	equ	0xFF4
  2050                           prodl	equ	0xFF3
  2051                           postinc0	equ	0xFEE
  2052                           wreg	equ	0xFE8
  2053                           postdec1	equ	0xFE5
  2054                           fsr1l	equ	0xFE1
  2055                           postinc2	equ	0xFDE
  2056                           postdec2	equ	0xFDD
  2057                           fsr2h	equ	0xFDA
  2058                           fsr2l	equ	0xFD9
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function _lcdInst *****************
  2062 ;; Defined at:
  2063 ;;		line 11 in file "lcd.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  data            1    wreg     unsigned char 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  data            1    2[COMRAM] unsigned char 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2, status,0, cstack
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;Total ram usage:        1 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    1
  2084 ;; This function calls:
  2085 ;;		_lcdNibble
  2086 ;; This function is called by:
  2087 ;;		_main
  2088 ;;		_count_gear
  2089 ;;		_initLCD
  2090 ;;		_lcd_set_cursor
  2091 ;;		_lcd_shift_cursor
  2092 ;;		_lcd_shift_display
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text12
  2097  001730                     __ptext12:
  2098                           	opt stack 0
  2099  001730                     _lcdInst:
  2100                           	opt stack 29
  2101                           
  2102                           ;incstack = 0
  2103                           ;lcdInst@data stored from wreg
  2104  001730  6E03               	movwf	lcdInst@data,c
  2105                           
  2106                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2107  001732  948C               	bcf	3980,2,c	;volatile
  2108                           
  2109                           ;lcd.c: 20: lcdNibble(data);
  2110  001734  5003               	movf	lcdInst@data,w,c
  2111  001736  ECB6  F009         	call	_lcdNibble
  2112                           
  2113                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2114  00173A  0E42               	movlw	66
  2115  00173C                     u1067:
  2116  00173C  2EE8               	decfsz	wreg,f,c
  2117  00173E  D7FE               	bra	u1067
  2118  001740  D000               	nop2	
  2119  001742  0012               	return		;funcret
  2120  001744                     __end_of_lcdInst:
  2121                           	opt stack 0
  2122                           tblptru	equ	0xFF8
  2123                           tblptrh	equ	0xFF7
  2124                           tblptrl	equ	0xFF6
  2125                           tablat	equ	0xFF5
  2126                           prodh	equ	0xFF4
  2127                           prodl	equ	0xFF3
  2128                           postinc0	equ	0xFEE
  2129                           wreg	equ	0xFE8
  2130                           postdec1	equ	0xFE5
  2131                           fsr1l	equ	0xFE1
  2132                           postinc2	equ	0xFDE
  2133                           postdec2	equ	0xFDD
  2134                           fsr2h	equ	0xFDA
  2135                           fsr2l	equ	0xFD9
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _lcdNibble *****************
  2139 ;; Defined at:
  2140 ;;		line 37 in file "lcd.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  data            1    wreg     unsigned char 
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;  data            1    1[COMRAM] unsigned char 
  2145 ;;  temp            1    0[COMRAM] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, status,2, status,0
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;Total ram usage:        2 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; This function calls:
  2162 ;;		Nothing
  2163 ;; This function is called by:
  2164 ;;		_lcdInst
  2165 ;;		_putch
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text13
  2170  00136C                     __ptext13:
  2171                           	opt stack 0
  2172  00136C                     _lcdNibble:
  2173                           	opt stack 28
  2174                           
  2175                           ;incstack = 0
  2176                           ;lcdNibble@data stored from wreg
  2177  00136C  6E02               	movwf	lcdNibble@data,c
  2178                           
  2179                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2180  00136E  5002               	movf	lcdNibble@data,w,c
  2181  001370  0BF0               	andlw	240
  2182  001372  6E01               	movwf	lcdNibble@temp,c
  2183                           
  2184                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2185  001374  508C               	movf	3980,w,c	;volatile
  2186  001376  0B0F               	andlw	15
  2187  001378  6E8C               	movwf	3980,c	;volatile
  2188                           
  2189                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2190  00137A  5001               	movf	lcdNibble@temp,w,c
  2191  00137C  108C               	iorwf	3980,w,c	;volatile
  2192  00137E  6E8C               	movwf	3980,c	;volatile
  2193                           
  2194                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2195  001380  0E00               	movlw	0
  2196  001382  BEF2               	btfsc	intcon,7,c	;volatile
  2197  001384  0E01               	movlw	1
  2198  001386  6E38               	movwf	lcd@LCDinterruptState,c
  2199  001388  9EF2               	bcf	intcon,7,c	;volatile
  2200  00138A  868C               	bsf	3980,3,c	;volatile
  2201  00138C  0E10               	movlw	16
  2202  00138E                     u1077:
  2203  00138E  2EE8               	decfsz	wreg,f,c
  2204  001390  D7FE               	bra	u1077
  2205  001392  D000               	nop2	
  2206  001394  968C               	bcf	3980,3,c	;volatile
  2207  001396  0E42               	movlw	66
  2208  001398                     u1087:
  2209  001398  2EE8               	decfsz	wreg,f,c
  2210  00139A  D7FE               	bra	u1087
  2211  00139C  D000               	nop2	
  2212  00139E  B038               	btfsc	lcd@LCDinterruptState,0,c
  2213  0013A0  D002               	bra	u15
  2214  0013A2  9EF2               	bcf	intcon,7,c	;volatile
  2215  0013A4  D001               	bra	u16
  2216  0013A6                     u15:
  2217  0013A6  8EF2               	bsf	intcon,7,c	;volatile
  2218  0013A8                     u16:
  2219                           
  2220                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2221  0013A8  3802               	swapf	lcdNibble@data,w,c
  2222  0013AA  0BF0               	andlw	240
  2223  0013AC  6E02               	movwf	lcdNibble@data,c
  2224                           
  2225                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2226  0013AE  5002               	movf	lcdNibble@data,w,c
  2227  0013B0  0BF0               	andlw	240
  2228  0013B2  6E01               	movwf	lcdNibble@temp,c
  2229                           
  2230                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2231  0013B4  508C               	movf	3980,w,c	;volatile
  2232  0013B6  0B0F               	andlw	15
  2233  0013B8  6E8C               	movwf	3980,c	;volatile
  2234                           
  2235                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2236  0013BA  5001               	movf	lcdNibble@temp,w,c
  2237  0013BC  108C               	iorwf	3980,w,c	;volatile
  2238  0013BE  6E8C               	movwf	3980,c	;volatile
  2239                           
  2240                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2241  0013C0  0E00               	movlw	0
  2242  0013C2  BEF2               	btfsc	intcon,7,c	;volatile
  2243  0013C4  0E01               	movlw	1
  2244  0013C6  6E38               	movwf	lcd@LCDinterruptState,c
  2245  0013C8  9EF2               	bcf	intcon,7,c	;volatile
  2246  0013CA  868C               	bsf	3980,3,c	;volatile
  2247  0013CC  0E10               	movlw	16
  2248  0013CE                     u1097:
  2249  0013CE  2EE8               	decfsz	wreg,f,c
  2250  0013D0  D7FE               	bra	u1097
  2251  0013D2  D000               	nop2	
  2252  0013D4  968C               	bcf	3980,3,c	;volatile
  2253  0013D6  0E42               	movlw	66
  2254  0013D8                     u1107:
  2255  0013D8  2EE8               	decfsz	wreg,f,c
  2256  0013DA  D7FE               	bra	u1107
  2257  0013DC  D000               	nop2	
  2258  0013DE  B038               	btfsc	lcd@LCDinterruptState,0,c
  2259  0013E0  D002               	bra	u25
  2260  0013E2  9EF2               	bcf	intcon,7,c	;volatile
  2261  0013E4  D001               	bra	u26
  2262  0013E6                     u25:
  2263  0013E6  8EF2               	bsf	intcon,7,c	;volatile
  2264  0013E8                     u26:
  2265  0013E8  0012               	return		;funcret
  2266  0013EA                     __end_of_lcdNibble:
  2267                           	opt stack 0
  2268                           tblptru	equ	0xFF8
  2269                           tblptrh	equ	0xFF7
  2270                           tblptrl	equ	0xFF6
  2271                           tablat	equ	0xFF5
  2272                           prodh	equ	0xFF4
  2273                           prodl	equ	0xFF3
  2274                           intcon	equ	0xFF2
  2275                           postinc0	equ	0xFEE
  2276                           wreg	equ	0xFE8
  2277                           postdec1	equ	0xFE5
  2278                           fsr1l	equ	0xFE1
  2279                           postinc2	equ	0xFDE
  2280                           postdec2	equ	0xFDD
  2281                           fsr2h	equ	0xFDA
  2282                           fsr2l	equ	0xFD9
  2283                           status	equ	0xFD8
  2284                           
  2285 ;; *************** function ___awmod *****************
  2286 ;; Defined at:
  2287 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  dividend        2    0[COMRAM] int 
  2290 ;;  divisor         2    2[COMRAM] int 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  sign            1    5[COMRAM] unsigned char 
  2293 ;;  counter         1    4[COMRAM] unsigned char 
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  2    0[COMRAM] int 
  2296 ;; Registers used:
  2297 ;;		wreg, status,2, status,0
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2303 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;Total ram usage:        6 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; This function calls:
  2310 ;;		Nothing
  2311 ;; This function is called by:
  2312 ;;		_main
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text14
  2317  0013EA                     __ptext14:
  2318                           	opt stack 0
  2319  0013EA                     ___awmod:
  2320                           	opt stack 30
  2321                           
  2322                           ;incstack = 0
  2323  0013EA  0E00               	movlw	0
  2324  0013EC  6E06               	movwf	___awmod@sign,c
  2325  0013EE  AE02               	btfss	___awmod@dividend+1,7,c
  2326  0013F0  D006               	goto	l418
  2327  0013F2  6C01               	negf	___awmod@dividend,c
  2328  0013F4  1E02               	comf	___awmod@dividend+1,f,c
  2329  0013F6  B0D8               	btfsc	status,0,c
  2330  0013F8  2A02               	incf	___awmod@dividend+1,f,c
  2331  0013FA  0E01               	movlw	1
  2332  0013FC  6E06               	movwf	___awmod@sign,c
  2333  0013FE                     l418:
  2334  0013FE  AE04               	btfss	___awmod@divisor+1,7,c
  2335  001400  D004               	goto	l419
  2336  001402  6C03               	negf	___awmod@divisor,c
  2337  001404  1E04               	comf	___awmod@divisor+1,f,c
  2338  001406  B0D8               	btfsc	status,0,c
  2339  001408  2A04               	incf	___awmod@divisor+1,f,c
  2340  00140A                     l419:
  2341  00140A  5003               	movf	___awmod@divisor,w,c
  2342  00140C  1004               	iorwf	___awmod@divisor+1,w,c
  2343  00140E  B4D8               	btfsc	status,2,c
  2344  001410  D018               	goto	l426
  2345  001412  0E01               	movlw	1
  2346  001414  6E05               	movwf	___awmod@counter,c
  2347  001416  D004               	goto	l421
  2348  001418  90D8               	bcf	status,0,c
  2349  00141A  3603               	rlcf	___awmod@divisor,f,c
  2350  00141C  3604               	rlcf	___awmod@divisor+1,f,c
  2351  00141E  2A05               	incf	___awmod@counter,f,c
  2352  001420                     l421:
  2353  001420  AE04               	btfss	___awmod@divisor+1,7,c
  2354  001422  D7FA               	goto	l422
  2355  001424                     u820:
  2356  001424  5003               	movf	___awmod@divisor,w,c
  2357  001426  5C01               	subwf	___awmod@dividend,w,c
  2358  001428  5004               	movf	___awmod@divisor+1,w,c
  2359  00142A  5802               	subwfb	___awmod@dividend+1,w,c
  2360  00142C  A0D8               	btfss	status,0,c
  2361  00142E  D004               	goto	l425
  2362  001430  5003               	movf	___awmod@divisor,w,c
  2363  001432  5E01               	subwf	___awmod@dividend,f,c
  2364  001434  5004               	movf	___awmod@divisor+1,w,c
  2365  001436  5A02               	subwfb	___awmod@dividend+1,f,c
  2366  001438                     l425:
  2367  001438  90D8               	bcf	status,0,c
  2368  00143A  3204               	rrcf	___awmod@divisor+1,f,c
  2369  00143C  3203               	rrcf	___awmod@divisor,f,c
  2370  00143E  2E05               	decfsz	___awmod@counter,f,c
  2371  001440  D7F1               	goto	u820
  2372  001442                     l426:
  2373  001442  5006               	movf	___awmod@sign,w,c
  2374  001444  B4D8               	btfsc	status,2,c
  2375  001446  D004               	goto	l427
  2376  001448  6C01               	negf	___awmod@dividend,c
  2377  00144A  1E02               	comf	___awmod@dividend+1,f,c
  2378  00144C  B0D8               	btfsc	status,0,c
  2379  00144E  2A02               	incf	___awmod@dividend+1,f,c
  2380  001450                     l427:
  2381  001450  C001  F001         	movff	___awmod@dividend,?___awmod
  2382  001454  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2383  001458  0012               	return	
  2384  00145A                     __end_of___awmod:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           postinc0	equ	0xFEE
  2394                           wreg	equ	0xFE8
  2395                           postdec1	equ	0xFE5
  2396                           fsr1l	equ	0xFE1
  2397                           postinc2	equ	0xFDE
  2398                           postdec2	equ	0xFDD
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function ___awdiv *****************
  2404 ;; Defined at:
  2405 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  dividend        2    0[COMRAM] int 
  2408 ;;  divisor         2    2[COMRAM] int 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  quotient        2    6[COMRAM] int 
  2411 ;;  sign            1    5[COMRAM] unsigned char 
  2412 ;;  counter         1    4[COMRAM] unsigned char 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  2    0[COMRAM] int 
  2415 ;; Registers used:
  2416 ;;		wreg, status,2, status,0
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2422 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;Total ram usage:        8 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_main
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text15
  2436  0012E8                     __ptext15:
  2437                           	opt stack 0
  2438  0012E8                     ___awdiv:
  2439                           	opt stack 30
  2440                           
  2441                           ;incstack = 0
  2442  0012E8  0E00               	movlw	0
  2443  0012EA  6E06               	movwf	___awdiv@sign,c
  2444  0012EC  AE04               	btfss	___awdiv@divisor+1,7,c
  2445  0012EE  D006               	goto	l405
  2446  0012F0  6C03               	negf	___awdiv@divisor,c
  2447  0012F2  1E04               	comf	___awdiv@divisor+1,f,c
  2448  0012F4  B0D8               	btfsc	status,0,c
  2449  0012F6  2A04               	incf	___awdiv@divisor+1,f,c
  2450  0012F8  0E01               	movlw	1
  2451  0012FA  6E06               	movwf	___awdiv@sign,c
  2452  0012FC                     l405:
  2453  0012FC  AE02               	btfss	___awdiv@dividend+1,7,c
  2454  0012FE  D006               	goto	l406
  2455  001300  6C01               	negf	___awdiv@dividend,c
  2456  001302  1E02               	comf	___awdiv@dividend+1,f,c
  2457  001304  B0D8               	btfsc	status,0,c
  2458  001306  2A02               	incf	___awdiv@dividend+1,f,c
  2459  001308  0E01               	movlw	1
  2460  00130A  1A06               	xorwf	___awdiv@sign,f,c
  2461  00130C                     l406:
  2462  00130C  0E00               	movlw	0
  2463  00130E  6E08               	movwf	___awdiv@quotient+1,c
  2464  001310  0E00               	movlw	0
  2465  001312  6E07               	movwf	___awdiv@quotient,c
  2466  001314  5003               	movf	___awdiv@divisor,w,c
  2467  001316  1004               	iorwf	___awdiv@divisor+1,w,c
  2468  001318  B4D8               	btfsc	status,2,c
  2469  00131A  D01C               	goto	l413
  2470  00131C  0E01               	movlw	1
  2471  00131E  6E05               	movwf	___awdiv@counter,c
  2472  001320  D004               	goto	l408
  2473  001322  90D8               	bcf	status,0,c
  2474  001324  3603               	rlcf	___awdiv@divisor,f,c
  2475  001326  3604               	rlcf	___awdiv@divisor+1,f,c
  2476  001328  2A05               	incf	___awdiv@counter,f,c
  2477  00132A                     l408:
  2478  00132A  AE04               	btfss	___awdiv@divisor+1,7,c
  2479  00132C  D7FA               	goto	l409
  2480  00132E                     u760:
  2481  00132E  90D8               	bcf	status,0,c
  2482  001330  3607               	rlcf	___awdiv@quotient,f,c
  2483  001332  3608               	rlcf	___awdiv@quotient+1,f,c
  2484  001334  5003               	movf	___awdiv@divisor,w,c
  2485  001336  5C01               	subwf	___awdiv@dividend,w,c
  2486  001338  5004               	movf	___awdiv@divisor+1,w,c
  2487  00133A  5802               	subwfb	___awdiv@dividend+1,w,c
  2488  00133C  A0D8               	btfss	status,0,c
  2489  00133E  D005               	goto	l412
  2490  001340  5003               	movf	___awdiv@divisor,w,c
  2491  001342  5E01               	subwf	___awdiv@dividend,f,c
  2492  001344  5004               	movf	___awdiv@divisor+1,w,c
  2493  001346  5A02               	subwfb	___awdiv@dividend+1,f,c
  2494  001348  8007               	bsf	___awdiv@quotient,0,c
  2495  00134A                     l412:
  2496  00134A  90D8               	bcf	status,0,c
  2497  00134C  3204               	rrcf	___awdiv@divisor+1,f,c
  2498  00134E  3203               	rrcf	___awdiv@divisor,f,c
  2499  001350  2E05               	decfsz	___awdiv@counter,f,c
  2500  001352  D7ED               	goto	u760
  2501  001354                     l413:
  2502  001354  5006               	movf	___awdiv@sign,w,c
  2503  001356  B4D8               	btfsc	status,2,c
  2504  001358  D004               	goto	l414
  2505  00135A  6C07               	negf	___awdiv@quotient,c
  2506  00135C  1E08               	comf	___awdiv@quotient+1,f,c
  2507  00135E  B0D8               	btfsc	status,0,c
  2508  001360  2A08               	incf	___awdiv@quotient+1,f,c
  2509  001362                     l414:
  2510  001362  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2511  001366  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2512  00136A  0012               	return	
  2513  00136C                     __end_of___awdiv:
  2514                           	opt stack 0
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           prodh	equ	0xFF4
  2520                           prodl	equ	0xFF3
  2521                           intcon	equ	0xFF2
  2522                           postinc0	equ	0xFEE
  2523                           wreg	equ	0xFE8
  2524                           postdec1	equ	0xFE5
  2525                           fsr1l	equ	0xFE1
  2526                           postinc2	equ	0xFDE
  2527                           postdec2	equ	0xFDD
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           prodh	equ	0xFF4
  2536                           prodl	equ	0xFF3
  2537                           intcon	equ	0xFF2
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           postdec1	equ	0xFE5
  2541                           fsr1l	equ	0xFE1
  2542                           postinc2	equ	0xFDE
  2543                           postdec2	equ	0xFDD
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548                           	psect	rparam
  2549  0000                     tblptru	equ	0xFF8
  2550                           tblptrh	equ	0xFF7
  2551                           tblptrl	equ	0xFF6
  2552                           tablat	equ	0xFF5
  2553                           prodh	equ	0xFF4
  2554                           prodl	equ	0xFF3
  2555                           intcon	equ	0xFF2
  2556                           postinc0	equ	0xFEE
  2557                           wreg	equ	0xFE8
  2558                           postdec1	equ	0xFE5
  2559                           fsr1l	equ	0xFE1
  2560                           postinc2	equ	0xFDE
  2561                           postdec2	equ	0xFDD
  2562                           fsr2h	equ	0xFDA
  2563                           fsr2l	equ	0xFD9
  2564                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    19
    Data        18
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      57
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_count_gear
    _count_gear->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3963
                                             25 COMRAM     2     2      0
                            ___awdiv
                            ___awmod
                         _count_gear
                            _initLCD
                            _lcdInst
                             _printf
                            _read_IR
                _servoRotate_ConStop
              _servoRotate_clockwise
                _servoRotate_counter
 ---------------------------------------------------------------------------------
 (1) _servoRotate_counter                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate_clockwise                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate_ConStop                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_IR                                              3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _count_gear                                           1     1      0    1531
                                             24 COMRAM     1     1      0
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1329
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   _count_gear
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _readADC
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _read_IR
   _servoRotate_ConStop
   _servoRotate_clockwise
   _servoRotate_counter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1B      39       1       44.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39      34        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 22:13:53 2018

                             _i 002E                              l99 1054                              u15 13A6  
                            u16 13A8                              u25 13E6                              u26 13E8  
                   __CFG_CPD$ON 000000                    ___awdiv@sign 0006                     __CFG_BORV$3 000000  
           _servoRotate_ConStop 1564                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                             l101 1080  
                           l110 113E                             l102 10C6                             l120 14BA  
                           l121 14B0                             l113 11B4                             l105 1192  
                           l114 11AC                             l106 10F4                             l123 14C4  
                           l107 1106                             l220 11E4                             l132 1604  
                           l109 1172                             l134 1630                             l142 15C0  
                           l127 1700                             l232 1278                             l144 15EC  
                           l233 12C6                             l137 157C                             l234 127E  
                           l226 120E                             l219 11D4                             l139 15A8  
                           l412 134A                             l228 1236                             l148 16AA  
                           l413 1354                             l405 12FC                             l421 1420  
                           l414 1362                             l406 130C                             l422 1418  
                           l408 132A                             l409 1322                             l425 1438  
                           l426 1442                             l418 13FE                             l427 1450  
                           l419 140A                             l641 14E4                             l642 14DC  
                           l651 1648                             l652 1640                             l645 1504  
                           l646 150E                             l655 1660                             l656 166A  
                  __CFG_CPB$OFF 000000                             u550 14E8                             u640 1266  
                           u820 1424                             u580 164C                             u660 12CE  
                           u760 132E                             u850 1064                             u937 10A8  
                           u947 112E                             u957 116A                             u967 15CA  
                           u977 15DE                             u987 160E                             u997 1620  
                  ___awmod@sign 0006                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l1025 15F6                            l1075 156C  
                          l1089 15B2                            l1355 123A                            l1571 11A2  
                          l1563 1182                            l1573 11AC                            _ADON 007E10  
                          STR_1 1014                            STR_2 1019                            STR_3 1019  
                          u1007 1586                            u1017 159A                            u1107 13D8  
                          u1027 1498                            u1037 1728                            u1047 151E  
                          u1057 1552                            u1067 173C                            u1077 138E  
                          _LATA 000F89                            _LATB 000F8A                            u1087 1398  
                          _LATC 000F8B                            _LATD 000F8C                            u1097 13CE  
                          _LATE 000F8D            ?_servoRotate_ConStop 0001                            _main 101E  
           _servoRotate_counter 15AA                            _prev 0030                            fsr2h 000FDA  
                          fsr1l 000FE1                            fsr2l 000FD9                            prodh 000FF4  
                          prodl 000FF3                            start 0000                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000000                __end_of_LCD_LEFT 100F  
          ?_servoRotate_counter 0001                           ?_main 0001                 __end_of___awdiv 136C  
               __end_of___awmod 145A                 ___awdiv@divisor 0003                 __end_of___lwdiv 1518  
               __end_of___lwmod 1674                 ___awdiv@counter 0005                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdInst 1744                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_readADC 171C                 __end_of_initLCD 1564                  __CFG_EBTRB$OFF 000000  
               __end_of_dpowers 100B                           _array 100B                 __end_of_read_IR 16B2  
                         _putch 171C           ??_servoRotate_ConStop 0001                           tablat 000FF5  
             _LCDinterruptState 0039                           status 000FD8                  __CFG_PBADEN$ON 000000  
               __initialization 16B2                    __end_of_main 11CA           ??_servoRotate_counter 0001  
             __end_of_LCD_RIGHT 1010                          ??_main 001A                   __activetblptr 000002  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADRESH 000FC4  
                        _ADRESL 000FC3                ___awdiv@dividend 0001                          ?_putch 0001  
                        _OSCCON 000FD3           _servoRotate_clockwise 15EE                  __CFG_XINST$OFF 000000  
                     ??___awdiv 0005                  __CFG_STVREN$ON 000000                       ??___awmod 0005  
                     ??___lwdiv 0005                       ??___lwmod 000C                          clear_0 16D8  
              ___awdiv@quotient 0007                 ___awmod@divisor 0003                 ___awmod@counter 0005  
                     ??_lcdInst 0003                          _printf 11CA                       ??_readADC 0003  
                     ??_initLCD 0004                       ??_read_IR 0003                    __pdataCOMRAM 001C  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                      __accesstop 0080         __end_of__initialization 16DE  
                 ___rparam_used 000001                  __pcstackCOMRAM 0001                   __end_of_array 100E  
                 __end_of_putch 1730              __size_of_lcdNibble 007E                         ??_putch 0003  
        ?_servoRotate_clockwise 0001                   _init_position 0032                         ?_printf 000D  
                  read_IR@input 0003            lcd@LCDinterruptState 0038                         _B_array 001C  
             __end_of_lcdNibble 13EA                      _count_gear 145A                         __Hparam 0000  
                       __Lparam 0000                         ___awdiv 12E8                         ___awmod 13EA  
                       ___lwdiv 14C6                         ___lwmod 1632                    __psmallconst 1000  
                       __pcinit 16B2                         __ramtop 1000                         _lcdInst 1730  
                       __ptext0 101E                         __ptext1 15AA                         __ptext2 15EE  
                       __ptext3 1564                         __ptext4 1674                         __ptext5 145A  
                       __ptext6 16E8                         __ptext7 11CA                         __ptext8 171C  
                       __ptext9 1632                 __size_of_printf 011E                         _readADC 16E8  
                       _initLCD 1518                         _counter 0034                         _dpowers 1001  
                       _read_IR 1674                ___awmod@dividend 0001     __end_of_servoRotate_ConStop 15AA  
                     _LCD_RIGHT 100F            end_of_initialization 16DE           __end_of_LCD_SIZE_HORZ 1012  
         __end_of_LCD_SIZE_VERT 1011                   __Lmediumconst 0000     __end_of_servoRotate_counter 15EE  
                       printf@c 0018                         printf@f 000D                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
                     _PORTAbits 000F80                       _TRISAbits 000F92                       _TRISDbits 000F95  
                    _white_tape 002C                     ?_count_gear 0001                   __pidataCOMRAM 1744  
                __end_of_printf 12E8             start_initialization 16B2         ??_servoRotate_clockwise 0001  
              __CFG_OSC$INTIO67 000000                __CFG_LPT1OSC$OFF 000000                        ??_printf 0011  
                   __pbssCOMRAM 002E             __size_of_count_gear 006C                ___lwdiv@dividend 0001  
             __CFG_CCP2MX$PORTC 000000                       _lcdNibble 136C                        ?___awdiv 0001  
                      ?___awmod 0001                        ?___lwdiv 0001                        ?___lwmod 0008  
                      ?_lcdInst 0001                        ?_readADC 0001                        ?_initLCD 0001  
                   __smallconst 1000                        ?_read_IR 0001                ___lwdiv@quotient 0005  
                __size_of_putch 0014                        _LCD_LEFT 100E                        _LATDbits 000F8C  
              __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001                     _compartment 0036  
                    _ADCON0bits 000FC2                      _ADCON2bits 000FC0                   lcdNibble@data 0002  
                    printf@flag 0014                   lcdNibble@temp 0001                      printf@prec 0015  
                _LCD_HORZ_LIMIT 1013                       copy_data0 16C6    __size_of_servoRotate_ConStop 0046  
                  ??_count_gear 0019                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                __size_of___awdiv 0084                __size_of___awmod 0070  
              __size_of___lwdiv 0052                __size_of___lwmod 0042                  readADC@channel 0005  
  __size_of_servoRotate_counter 0044                __size_of_lcdInst 0014                __size_of_readADC 0034  
              __size_of_initLCD 004C          __end_of_LCD_HORZ_LIMIT 1014                __size_of_read_IR 003E  
               ___lwdiv@divisor 0003              __end_of_count_gear 14C6                 ___lwdiv@counter 0007  
                      __ptext10 14C6                        __ptext11 1518                        __ptext12 1730  
                      __ptext13 136C                        __ptext14 13EA                        __ptext15 12E8  
                _LCD_VERT_LIMIT 1012  __size_of_servoRotate_clockwise 0044                   __size_of_main 01AC  
 __end_of_servoRotate_clockwise 1632                     ??_lcdNibble 0001                       printf@val 0016  
                     putch@data 0003                      _INTCONbits 000FF2          __end_of_LCD_VERT_LIMIT 1013  
                 _LCD_SIZE_HORZ 1011                ___lwmod@dividend 0008                   _LCD_SIZE_VERT 1010  
                      printf@ap 0012                     lcdInst@data 0003                 ___lwmod@divisor 000A  
               ___lwmod@counter 000C  
